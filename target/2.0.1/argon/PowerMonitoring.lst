
/Users/abdulhannanmustajab/Desktop/IoT/Power-Monitoring/PowerMonitoring/target/2.0.1/argon/PowerMonitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000079b0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  2003f400  000db9d0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002e4  2003dd50  000dc1d4  0001dd50  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000007c0  2003e038  2003e038  0002e038  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000dc4b8  000dc4b8  0002c4b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000dc4e0  000dc4e0  0002c4e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0019648d  00000000  00000000  0002c4e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001a555  00000000  00000000  001c2971  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000324d1  00000000  00000000  001dcec6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002e80  00000000  00000000  0020f397  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000088f0  00000000  00000000  00212217  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003c737  00000000  00000000  0021ab07  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00044088  00000000  00000000  0025723e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    001108cd  00000000  00000000  0029b2c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000088c8  00000000  00000000  003abb94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 ff3f 	bl	d8eb4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 ff61 	bl	d8f04 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dd50 	.word	0x2003dd50
   d404c:	000dc1d4 	.word	0x000dc1d4
   d4050:	2003e034 	.word	0x2003e034
   d4054:	2003e038 	.word	0x2003e038
   d4058:	2003e7f8 	.word	0x2003e7f8

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f003 ffbb 	bl	d7fdc <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000db9a4 	.word	0x000db9a4
   d4080:	000db9d0 	.word	0x000db9d0

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 be9a 	b.w	d4dbc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fd73 	bl	d4b74 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f003 bf65 	b.w	d7f60 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 bcf1 	b.w	d6a7c <malloc>

000d409a <_Znaj>:
   d409a:	f002 bcef 	b.w	d6a7c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 bcf5 	b.w	d6a8c <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 fbc8 	bl	d6840 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d6571 	.word	0x000d6571

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z11watchdogISRv>:
}


void watchdogISR()
{
  watchdogFlag = true;
   d40c8:	4b01      	ldr	r3, [pc, #4]	; (d40d0 <_Z11watchdogISRv+0x8>)
   d40ca:	2201      	movs	r2, #1
   d40cc:	701a      	strb	r2, [r3, #0]
}
   d40ce:	4770      	bx	lr
   d40d0:	2003e5f9 	.word	0x2003e5f9

000d40d4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40d4:	6803      	ldr	r3, [r0, #0]
   d40d6:	4718      	bx	r3

000d40d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40d8:	2a01      	cmp	r2, #1
   d40da:	d003      	beq.n	d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40dc:	2a02      	cmp	r2, #2
   d40de:	d003      	beq.n	d40e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40e0:	2000      	movs	r0, #0
   d40e2:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40e4:	6001      	str	r1, [r0, #0]
	      break;
   d40e6:	e7fb      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40e8:	680b      	ldr	r3, [r1, #0]
   d40ea:	6003      	str	r3, [r0, #0]
	}
   d40ec:	e7f8      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	...

000d40f0 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
   d40f0:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40f2:	4904      	ldr	r1, [pc, #16]	; (d4104 <_Z10measureNow6String+0x14>)
   d40f4:	f003 fb9e 	bl	d7834 <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d40f8:	b118      	cbz	r0, d4102 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d40fa:	4b03      	ldr	r3, [pc, #12]	; (d4108 <_Z10measureNow6String+0x18>)
   d40fc:	2203      	movs	r2, #3
   d40fe:	701a      	strb	r2, [r3, #0]
    return 1;
   d4100:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4102:	bd08      	pop	{r3, pc}
   d4104:	000dadab 	.word	0x000dadab
   d4108:	2003e5cd 	.word	0x2003e5cd

000d410c <_Z12enableSensor6String>:

/* 
  EnableSensor (String Sensor)
  This function takes in the sensor number as integer and enables or disable the sensor accordingly.
*/
int enableSensor(String Sensor){
   d410c:	b570      	push	{r4, r5, r6, lr}
   d410e:	b0c2      	sub	sp, #264	; 0x108
  char * pEND;
  char data[256];
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4110:	6800      	ldr	r0, [r0, #0]
   d4112:	220a      	movs	r2, #10
   d4114:	a901      	add	r1, sp, #4
   d4116:	f005 fe2b 	bl	d9d70 <strtol>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d411a:	1e43      	subs	r3, r0, #1
   d411c:	2b06      	cmp	r3, #6
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d411e:	4604      	mov	r4, r0
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d4120:	d82b      	bhi.n	d417a <_Z12enableSensor6String+0x6e>
 
  if (tempSensor == 1){
   d4122:	2801      	cmp	r0, #1
   d4124:	4b16      	ldr	r3, [pc, #88]	; (d4180 <_Z12enableSensor6String+0x74>)
   d4126:	4e17      	ldr	r6, [pc, #92]	; (d4184 <_Z12enableSensor6String+0x78>)
   d4128:	d108      	bne.n	d413c <_Z12enableSensor6String+0x30>
    sysStatus.sensorOneConnected = true;
   d412a:	7718      	strb	r0, [r3, #28]
    snprintf(data, sizeof(data), "Enabled Sensor One");
   d412c:	4916      	ldr	r1, [pc, #88]	; (d4188 <_Z12enableSensor6String+0x7c>)
   d412e:	a802      	add	r0, sp, #8
   d4130:	f004 ff1e 	bl	d8f70 <strcpy>
    sysStatusWriteNeeded = true;  
   d4134:	7034      	strb	r4, [r6, #0]
    sysStatus.sensorSixConnected = true;
    snprintf(data, sizeof(data), "Enabled Sensor Six");
    sysStatusWriteNeeded = true; 
    return 1;      
  }
}
   d4136:	4620      	mov	r0, r4
   d4138:	b042      	add	sp, #264	; 0x108
   d413a:	bd70      	pop	{r4, r5, r6, pc}
  } else if (tempSensor == 2){
   d413c:	2802      	cmp	r0, #2
   d413e:	f04f 0501 	mov.w	r5, #1
   d4142:	d107      	bne.n	d4154 <_Z12enableSensor6String+0x48>
    snprintf(data, sizeof(data), "Enabled Sensor Two");
   d4144:	4911      	ldr	r1, [pc, #68]	; (d418c <_Z12enableSensor6String+0x80>)
    sysStatus.sensorTwoConnected = true;
   d4146:	775d      	strb	r5, [r3, #29]
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d4148:	a802      	add	r0, sp, #8
   d414a:	f004 ff11 	bl	d8f70 <strcpy>
    return 1;      
   d414e:	462c      	mov	r4, r5
    sysStatusWriteNeeded = true; 
   d4150:	7035      	strb	r5, [r6, #0]
    return 1;      
   d4152:	e7f0      	b.n	d4136 <_Z12enableSensor6String+0x2a>
  else if (tempSensor == 3){
   d4154:	2803      	cmp	r0, #3
   d4156:	d102      	bne.n	d415e <_Z12enableSensor6String+0x52>
    snprintf(data, sizeof(data), "Enabled Sensor Three");
   d4158:	490d      	ldr	r1, [pc, #52]	; (d4190 <_Z12enableSensor6String+0x84>)
    sysStatus.sensorThreeConnected = true;
   d415a:	779d      	strb	r5, [r3, #30]
    snprintf(data, sizeof(data), "Enabled Sensor Three");
   d415c:	e7f4      	b.n	d4148 <_Z12enableSensor6String+0x3c>
  else if (tempSensor == 4){
   d415e:	2804      	cmp	r0, #4
   d4160:	d102      	bne.n	d4168 <_Z12enableSensor6String+0x5c>
    snprintf(data, sizeof(data), "Enabled Sensor Four");
   d4162:	490c      	ldr	r1, [pc, #48]	; (d4194 <_Z12enableSensor6String+0x88>)
    sysStatus.sensorFourConnected = true;
   d4164:	77dd      	strb	r5, [r3, #31]
    snprintf(data, sizeof(data), "Enabled Sensor Four");
   d4166:	e7ef      	b.n	d4148 <_Z12enableSensor6String+0x3c>
  else if (tempSensor == 5){
   d4168:	2805      	cmp	r0, #5
    snprintf(data, sizeof(data), "Enabled Sensor Five");
   d416a:	bf0b      	itete	eq
   d416c:	490a      	ldreq	r1, [pc, #40]	; (d4198 <_Z12enableSensor6String+0x8c>)
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d416e:	490b      	ldrne	r1, [pc, #44]	; (d419c <_Z12enableSensor6String+0x90>)
    sysStatus.sensorFiveConnected = true;
   d4170:	f883 5020 	strbeq.w	r5, [r3, #32]
    sysStatus.sensorSixConnected = true;
   d4174:	f883 5021 	strbne.w	r5, [r3, #33]	; 0x21
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d4178:	e7e6      	b.n	d4148 <_Z12enableSensor6String+0x3c>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d417a:	2400      	movs	r4, #0
   d417c:	e7db      	b.n	d4136 <_Z12enableSensor6String+0x2a>
   d417e:	bf00      	nop
   d4180:	2003e5d0 	.word	0x2003e5d0
   d4184:	2003e5f8 	.word	0x2003e5f8
   d4188:	000dadad 	.word	0x000dadad
   d418c:	000dadc0 	.word	0x000dadc0
   d4190:	000dadd3 	.word	0x000dadd3
   d4194:	000dade8 	.word	0x000dade8
   d4198:	000dadfc 	.word	0x000dadfc
   d419c:	000dae10 	.word	0x000dae10

000d41a0 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d41a0:	6943      	ldr	r3, [r0, #20]
   d41a2:	b113      	cbz	r3, d41aa <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d41a4:	6983      	ldr	r3, [r0, #24]
   d41a6:	300c      	adds	r0, #12
   d41a8:	4718      	bx	r3
            callback();
        }
    }
   d41aa:	4770      	bx	lr

000d41ac <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d41ac:	b510      	push	{r4, lr}
   d41ae:	4b03      	ldr	r3, [pc, #12]	; (d41bc <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d41b0:	6003      	str	r3, [r0, #0]
   d41b2:	4604      	mov	r4, r0
   d41b4:	f001 ff0e 	bl	d5fd4 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d41b8:	4620      	mov	r0, r4
   d41ba:	bd10      	pop	{r4, pc}
   d41bc:	000db24c 	.word	0x000db24c

000d41c0 <_ZN17PublishQueueAsyncD0Ev>:
   d41c0:	b510      	push	{r4, lr}
   d41c2:	4604      	mov	r4, r0
   d41c4:	f7ff fff2 	bl	d41ac <_ZN17PublishQueueAsyncD1Ev>
   d41c8:	4620      	mov	r0, r4
   d41ca:	2138      	movs	r1, #56	; 0x38
   d41cc:	f003 fffd 	bl	d81ca <_ZdlPvj>
   d41d0:	4620      	mov	r0, r4
   d41d2:	bd10      	pop	{r4, pc}

000d41d4 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d41d4:	b510      	push	{r4, lr}
   d41d6:	4b03      	ldr	r3, [pc, #12]	; (d41e4 <_ZN8MB85RC64D1Ev+0x10>)
   d41d8:	6003      	str	r3, [r0, #0]
   d41da:	4604      	mov	r4, r0
   d41dc:	f001 f912 	bl	d5404 <_ZN6MB85RCD1Ev>
   d41e0:	4620      	mov	r0, r4
   d41e2:	bd10      	pop	{r4, pc}
   d41e4:	000db274 	.word	0x000db274

000d41e8 <_ZN8MB85RC64D0Ev>:
   d41e8:	b510      	push	{r4, lr}
   d41ea:	4604      	mov	r4, r0
   d41ec:	f7ff fff2 	bl	d41d4 <_ZN8MB85RC64D1Ev>
   d41f0:	4620      	mov	r0, r4
   d41f2:	2110      	movs	r1, #16
   d41f4:	f003 ffe9 	bl	d81ca <_ZdlPvj>
   d41f8:	4620      	mov	r0, r4
   d41fa:	bd10      	pop	{r4, pc}

000d41fc <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d41fc:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d41fe:	2100      	movs	r1, #0
   d4200:	4604      	mov	r4, r0
   d4202:	4608      	mov	r0, r1
   d4204:	f002 f93c 	bl	d6480 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4208:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d420a:	4620      	mov	r0, r4
   d420c:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d420e:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d4210:	f002 f94e 	bl	d64b0 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4214:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4216:	b10c      	cbz	r4, d421c <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d4218:	2301      	movs	r3, #1
   d421a:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d421c:	2100      	movs	r1, #0
   d421e:	2001      	movs	r0, #1
   d4220:	f002 f92e 	bl	d6480 <os_thread_scheduling>
            }
        }
        if (t) {
   d4224:	b12c      	cbz	r4, d4232 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d4226:	6823      	ldr	r3, [r4, #0]
   d4228:	4620      	mov	r0, r4
   d422a:	689b      	ldr	r3, [r3, #8]
   d422c:	4798      	blx	r3
            t->running = false;
   d422e:	2300      	movs	r3, #0
   d4230:	7123      	strb	r3, [r4, #4]
        }
    }
   d4232:	b002      	add	sp, #8
   d4234:	bd10      	pop	{r4, pc}

000d4236 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4236:	b510      	push	{r4, lr}
   d4238:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d423a:	6800      	ldr	r0, [r0, #0]
   d423c:	b108      	cbz	r0, d4242 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d423e:	f002 fc25 	bl	d6a8c <free>
class SystemClass {
   d4242:	4620      	mov	r0, r4
   d4244:	bd10      	pop	{r4, pc}
	...

000d4248 <_Z16keepAliveMessagev>:
void keepAliveMessage() {
   d4248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d424a:	4b10      	ldr	r3, [pc, #64]	; (d428c <_Z16keepAliveMessagev+0x44>)
   d424c:	4a10      	ldr	r2, [pc, #64]	; (d4290 <_Z16keepAliveMessagev+0x48>)
   d424e:	781b      	ldrb	r3, [r3, #0]
   d4250:	7812      	ldrb	r2, [r2, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4252:	4910      	ldr	r1, [pc, #64]	; (d4294 <_Z16keepAliveMessagev+0x4c>)
   d4254:	4313      	orrs	r3, r2
   d4256:	f88d 3000 	strb.w	r3, [sp]
   d425a:	2200      	movs	r2, #0
   d425c:	233c      	movs	r3, #60	; 0x3c
   d425e:	a802      	add	r0, sp, #8
   d4260:	f002 fe2a 	bl	d6eb8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4264:	9c03      	ldr	r4, [sp, #12]
   d4266:	b17c      	cbz	r4, d4288 <_Z16keepAliveMessagev+0x40>
      if (--_M_use_count == 0)
   d4268:	6863      	ldr	r3, [r4, #4]
   d426a:	3b01      	subs	r3, #1
   d426c:	6063      	str	r3, [r4, #4]
   d426e:	b95b      	cbnz	r3, d4288 <_Z16keepAliveMessagev+0x40>
          _M_dispose();
   d4270:	6823      	ldr	r3, [r4, #0]
   d4272:	4620      	mov	r0, r4
   d4274:	689b      	ldr	r3, [r3, #8]
   d4276:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4278:	68a3      	ldr	r3, [r4, #8]
   d427a:	3b01      	subs	r3, #1
   d427c:	60a3      	str	r3, [r4, #8]
   d427e:	b91b      	cbnz	r3, d4288 <_Z16keepAliveMessagev+0x40>
            _M_destroy();
   d4280:	6823      	ldr	r3, [r4, #0]
   d4282:	4620      	mov	r0, r4
   d4284:	68db      	ldr	r3, [r3, #12]
   d4286:	4798      	blx	r3
}
   d4288:	b004      	add	sp, #16
   d428a:	bd10      	pop	{r4, pc}
   d428c:	2003e048 	.word	0x2003e048
   d4290:	2003e049 	.word	0x2003e049
   d4294:	000dae23 	.word	0x000dae23

000d4298 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4298:	b510      	push	{r4, lr}
      if (_M_manager)
   d429a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d429c:	4604      	mov	r4, r0
      if (_M_manager)
   d429e:	b113      	cbz	r3, d42a6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d42a0:	2203      	movs	r2, #3
   d42a2:	4601      	mov	r1, r0
   d42a4:	4798      	blx	r3
    }
   d42a6:	4620      	mov	r0, r4
   d42a8:	bd10      	pop	{r4, pc}
	...

000d42ac <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d42ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d42ae:	4b13      	ldr	r3, [pc, #76]	; (d42fc <_ZN5TimerD1Ev+0x50>)
   d42b0:	6003      	str	r3, [r0, #0]
   d42b2:	4604      	mov	r4, r0
        if (handle) {
   d42b4:	6880      	ldr	r0, [r0, #8]
   d42b6:	b1c8      	cbz	r0, d42ec <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d42b8:	2500      	movs	r5, #0
   d42ba:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d42be:	e9cd 3500 	strd	r3, r5, [sp]
   d42c2:	2102      	movs	r1, #2
   d42c4:	462b      	mov	r3, r5
   d42c6:	462a      	mov	r2, r5
   d42c8:	f002 f8fa 	bl	d64c0 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   d42cc:	68a0      	ldr	r0, [r4, #8]
   d42ce:	4629      	mov	r1, r5
   d42d0:	f002 f92e 	bl	d6530 <os_timer_set_id>
            while (running) {
   d42d4:	7923      	ldrb	r3, [r4, #4]
   d42d6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d42da:	b113      	cbz	r3, d42e2 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d42dc:	f002 f8c8 	bl	d6470 <os_thread_yield>
            while (running) {
   d42e0:	e7f8      	b.n	d42d4 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   d42e2:	68a0      	ldr	r0, [r4, #8]
   d42e4:	4629      	mov	r1, r5
   d42e6:	f002 f8db 	bl	d64a0 <os_timer_destroy>
            handle = nullptr;
   d42ea:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d42ec:	f104 000c 	add.w	r0, r4, #12
   d42f0:	f7ff ffd2 	bl	d4298 <_ZNSt14_Function_baseD1Ev>
    }
   d42f4:	4620      	mov	r0, r4
   d42f6:	b003      	add	sp, #12
   d42f8:	bd30      	pop	{r4, r5, pc}
   d42fa:	bf00      	nop
   d42fc:	000db238 	.word	0x000db238

000d4300 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d4300:	b510      	push	{r4, lr}
   d4302:	4604      	mov	r4, r0
    }
   d4304:	f7ff ffd2 	bl	d42ac <_ZN5TimerD1Ev>
   d4308:	4620      	mov	r0, r4
   d430a:	211c      	movs	r1, #28
   d430c:	f003 ff5d 	bl	d81ca <_ZdlPvj>
   d4310:	4620      	mov	r0, r4
   d4312:	bd10      	pop	{r4, pc}

000d4314 <_ZN10CloudClass9_functionEPKcPFi6StringE>:
    static bool _function(const char *funcKey, user_function_int_str_t* func)
   d4314:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4316:	4801      	ldr	r0, [pc, #4]	; (d431c <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
   d4318:	f002 bcc9 	b.w	d6cae <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d431c:	000d6c83 	.word	0x000d6c83

000d4320 <_ZN10CloudClass9keepAliveEj>:
    		spark_process();
    }
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
   d4320:	b507      	push	{r0, r1, r2, lr}
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d4322:	2208      	movs	r2, #8
        particle::protocol::connection_properties_t conn_prop = {0};
   d4324:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   d4326:	f8ad 2000 	strh.w	r2, [sp]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d432a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d432e:	2201      	movs	r2, #1
   d4330:	9201      	str	r2, [sp, #4]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4332:	4341      	muls	r1, r0
   d4334:	466a      	mov	r2, sp
   d4336:	4618      	mov	r0, r3
        particle::protocol::connection_properties_t conn_prop = {0};
   d4338:	f8ad 3002 	strh.w	r3, [sp, #2]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d433c:	f002 fb3e 	bl	d69bc <spark_set_connection_property>
    }
   d4340:	b003      	add	sp, #12
   d4342:	f85d fb04 	ldr.w	pc, [sp], #4

000d4346 <_ZN5Timer12changePeriodEjj>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d4346:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d4348:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d434a:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d434c:	2100      	movs	r1, #0
   d434e:	b140      	cbz	r0, d4362 <_ZN5Timer12changePeriodEjj+0x1c>
   d4350:	e9cd 2100 	strd	r2, r1, [sp]
   d4354:	460a      	mov	r2, r1
   d4356:	2103      	movs	r1, #3
   d4358:	f002 f8b2 	bl	d64c0 <os_timer_change>
   d435c:	fab0 f080 	clz	r0, r0
   d4360:	0940      	lsrs	r0, r0, #5
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d4362:	b003      	add	sp, #12
   d4364:	f85d fb04 	ldr.w	pc, [sp], #4

000d4368 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d4368:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d436a:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d436c:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4370:	f88d 3000 	strb.w	r3, [sp]
   d4374:	f88d 5004 	strb.w	r5, [sp, #4]
   d4378:	68e4      	ldr	r4, [r4, #12]
   d437a:	233c      	movs	r3, #60	; 0x3c
   d437c:	47a0      	blx	r4
	}
   d437e:	b003      	add	sp, #12
   d4380:	bd30      	pop	{r4, r5, pc}
	...

000d4384 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4384:	b510      	push	{r4, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d4386:	780b      	ldrb	r3, [r1, #0]
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4388:	b092      	sub	sp, #72	; 0x48
   d438a:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d438c:	b97b      	cbnz	r3, d43ae <_Z14UbidotsHandlerPKcS0_+0x2a>
    snprintf(responseString, sizeof(responseString),"No Data");
   d438e:	4919      	ldr	r1, [pc, #100]	; (d43f4 <_Z14UbidotsHandlerPKcS0_+0x70>)
   d4390:	a802      	add	r0, sp, #8
   d4392:	f004 fded 	bl	d8f70 <strcpy>
        val_(0) {
   d4396:	2300      	movs	r3, #0
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
   d4398:	f88d 3000 	strb.w	r3, [sp]
   d439c:	4b16      	ldr	r3, [pc, #88]	; (d43f8 <_Z14UbidotsHandlerPKcS0_+0x74>)
   d439e:	4917      	ldr	r1, [pc, #92]	; (d43fc <_Z14UbidotsHandlerPKcS0_+0x78>)
   d43a0:	781b      	ldrb	r3, [r3, #0]
   d43a2:	4817      	ldr	r0, [pc, #92]	; (d4400 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d43a4:	aa02      	add	r2, sp, #8
   d43a6:	f7ff ffdf 	bl	d4368 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d43aa:	b012      	add	sp, #72	; 0x48
   d43ac:	bd10      	pop	{r4, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d43ae:	4608      	mov	r0, r1
   d43b0:	f004 fd5b 	bl	d8e6a <atoi>
   d43b4:	28c8      	cmp	r0, #200	; 0xc8
   d43b6:	d10e      	bne.n	d43d6 <_Z14UbidotsHandlerPKcS0_+0x52>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d43b8:	4912      	ldr	r1, [pc, #72]	; (d4404 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d43ba:	a802      	add	r0, sp, #8
   d43bc:	f004 fdd8 	bl	d8f70 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d43c0:	f003 fbe7 	bl	d7b92 <_ZN9TimeClass3nowEv>
   d43c4:	4b10      	ldr	r3, [pc, #64]	; (d4408 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d43c6:	6198      	str	r0, [r3, #24]
    sysStatusWriteNeeded = true;
   d43c8:	4b10      	ldr	r3, [pc, #64]	; (d440c <_Z14UbidotsHandlerPKcS0_+0x88>)
   d43ca:	2201      	movs	r2, #1
   d43cc:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d43ce:	4b10      	ldr	r3, [pc, #64]	; (d4410 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d43d0:	2200      	movs	r2, #0
   d43d2:	701a      	strb	r2, [r3, #0]
   d43d4:	e7df      	b.n	d4396 <_Z14UbidotsHandlerPKcS0_+0x12>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d43d6:	4620      	mov	r0, r4
   d43d8:	f004 fd47 	bl	d8e6a <atoi>
   d43dc:	28c9      	cmp	r0, #201	; 0xc9
   d43de:	d0eb      	beq.n	d43b8 <_Z14UbidotsHandlerPKcS0_+0x34>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d43e0:	4620      	mov	r0, r4
   d43e2:	f004 fd42 	bl	d8e6a <atoi>
   d43e6:	4a0b      	ldr	r2, [pc, #44]	; (d4414 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d43e8:	4603      	mov	r3, r0
   d43ea:	2140      	movs	r1, #64	; 0x40
   d43ec:	a802      	add	r0, sp, #8
   d43ee:	f002 fb65 	bl	d6abc <snprintf>
   d43f2:	e7d0      	b.n	d4396 <_Z14UbidotsHandlerPKcS0_+0x12>
   d43f4:	000dae25 	.word	0x000dae25
   d43f8:	2003e049 	.word	0x2003e049
   d43fc:	000dae5c 	.word	0x000dae5c
   d4400:	2003e4f0 	.word	0x2003e4f0
   d4404:	000dae2d 	.word	0x000dae2d
   d4408:	2003e5d0 	.word	0x2003e5d0
   d440c:	2003e5f8 	.word	0x2003e5f8
   d4410:	2003e06b 	.word	0x2003e06b
   d4414:	000dae3f 	.word	0x000dae3f

000d4418 <_Z14setVerboseMode6String>:
{
   d4418:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d441a:	4916      	ldr	r1, [pc, #88]	; (d4474 <_Z14setVerboseMode6String+0x5c>)
   d441c:	4605      	mov	r5, r0
   d441e:	f003 fa09 	bl	d7834 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4422:	4604      	mov	r4, r0
   d4424:	b188      	cbz	r0, d444a <_Z14setVerboseMode6String+0x32>
    sysStatus.verboseMode = true;
   d4426:	4b14      	ldr	r3, [pc, #80]	; (d4478 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d4428:	4a14      	ldr	r2, [pc, #80]	; (d447c <_Z14setVerboseMode6String+0x64>)
   d442a:	4915      	ldr	r1, [pc, #84]	; (d4480 <_Z14setVerboseMode6String+0x68>)
   d442c:	4815      	ldr	r0, [pc, #84]	; (d4484 <_Z14setVerboseMode6String+0x6c>)
    sysStatus.verboseMode = true;
   d442e:	2401      	movs	r4, #1
   d4430:	725c      	strb	r4, [r3, #9]
   d4432:	2300      	movs	r3, #0
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d4434:	f88d 3000 	strb.w	r3, [sp]
   d4438:	4b13      	ldr	r3, [pc, #76]	; (d4488 <_Z14setVerboseMode6String+0x70>)
   d443a:	781b      	ldrb	r3, [r3, #0]
   d443c:	f7ff ff94 	bl	d4368 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d4440:	4b12      	ldr	r3, [pc, #72]	; (d448c <_Z14setVerboseMode6String+0x74>)
    return 1;
   d4442:	4620      	mov	r0, r4
    sysStatusWriteNeeded = true;
   d4444:	701c      	strb	r4, [r3, #0]
}
   d4446:	b003      	add	sp, #12
   d4448:	bd30      	pop	{r4, r5, pc}
   d444a:	4911      	ldr	r1, [pc, #68]	; (d4490 <_Z14setVerboseMode6String+0x78>)
   d444c:	4628      	mov	r0, r5
   d444e:	f003 f9f1 	bl	d7834 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4452:	2800      	cmp	r0, #0
   d4454:	d0f7      	beq.n	d4446 <_Z14setVerboseMode6String+0x2e>
    sysStatus.verboseMode = false;
   d4456:	4b08      	ldr	r3, [pc, #32]	; (d4478 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4458:	4a0e      	ldr	r2, [pc, #56]	; (d4494 <_Z14setVerboseMode6String+0x7c>)
    sysStatus.verboseMode = false;
   d445a:	725c      	strb	r4, [r3, #9]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d445c:	4b0a      	ldr	r3, [pc, #40]	; (d4488 <_Z14setVerboseMode6String+0x70>)
   d445e:	f88d 4000 	strb.w	r4, [sp]
   d4462:	781b      	ldrb	r3, [r3, #0]
   d4464:	4906      	ldr	r1, [pc, #24]	; (d4480 <_Z14setVerboseMode6String+0x68>)
   d4466:	4807      	ldr	r0, [pc, #28]	; (d4484 <_Z14setVerboseMode6String+0x6c>)
   d4468:	f7ff ff7e 	bl	d4368 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d446c:	4b07      	ldr	r3, [pc, #28]	; (d448c <_Z14setVerboseMode6String+0x74>)
   d446e:	2001      	movs	r0, #1
   d4470:	7018      	strb	r0, [r3, #0]
    return 1;
   d4472:	e7e8      	b.n	d4446 <_Z14setVerboseMode6String+0x2e>
   d4474:	000dadab 	.word	0x000dadab
   d4478:	2003e5d0 	.word	0x2003e5d0
   d447c:	000dae69 	.word	0x000dae69
   d4480:	000dae8c 	.word	0x000dae8c
   d4484:	2003e4f0 	.word	0x2003e4f0
   d4488:	2003e049 	.word	0x2003e049
   d448c:	2003e5f8 	.word	0x2003e5f8
   d4490:	000dae7a 	.word	0x000dae7a
   d4494:	000dae7c 	.word	0x000dae7c

000d4498 <_Z16setThirdPartySim6String>:
{
   d4498:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d449a:	491c      	ldr	r1, [pc, #112]	; (d450c <_Z16setThirdPartySim6String+0x74>)
   d449c:	4605      	mov	r5, r0
   d449e:	f003 f9c9 	bl	d7834 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d44a2:	4604      	mov	r4, r0
   d44a4:	b300      	cbz	r0, d44e8 <_Z16setThirdPartySim6String+0x50>
    sysStatus.thirdPartySim = true;
   d44a6:	4c1a      	ldr	r4, [pc, #104]	; (d4510 <_Z16setThirdPartySim6String+0x78>)
   d44a8:	2301      	movs	r3, #1
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d44aa:	6860      	ldr	r0, [r4, #4]
    sysStatus.thirdPartySim = true;
   d44ac:	7063      	strb	r3, [r4, #1]
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d44ae:	f7ff ff37 	bl	d4320 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d44b2:	6863      	ldr	r3, [r4, #4]
   d44b4:	4817      	ldr	r0, [pc, #92]	; (d4514 <_Z16setThirdPartySim6String+0x7c>)
   d44b6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d44ba:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d44be:	4359      	muls	r1, r3
   d44c0:	f7ff ff41 	bl	d4346 <_ZN5Timer12changePeriodEjj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d44c4:	f002 fa42 	bl	d694c <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to 3rd Party Sim", PRIVATE);
   d44c8:	b148      	cbz	r0, d44de <_Z16setThirdPartySim6String+0x46>
   d44ca:	2300      	movs	r3, #0
   d44cc:	f88d 3000 	strb.w	r3, [sp]
   d44d0:	4b11      	ldr	r3, [pc, #68]	; (d4518 <_Z16setThirdPartySim6String+0x80>)
   d44d2:	4a12      	ldr	r2, [pc, #72]	; (d451c <_Z16setThirdPartySim6String+0x84>)
   d44d4:	781b      	ldrb	r3, [r3, #0]
   d44d6:	4912      	ldr	r1, [pc, #72]	; (d4520 <_Z16setThirdPartySim6String+0x88>)
   d44d8:	4812      	ldr	r0, [pc, #72]	; (d4524 <_Z16setThirdPartySim6String+0x8c>)
   d44da:	f7ff ff45 	bl	d4368 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d44de:	4b12      	ldr	r3, [pc, #72]	; (d4528 <_Z16setThirdPartySim6String+0x90>)
   d44e0:	2001      	movs	r0, #1
   d44e2:	7018      	strb	r0, [r3, #0]
}
   d44e4:	b003      	add	sp, #12
   d44e6:	bd30      	pop	{r4, r5, pc}
   d44e8:	4910      	ldr	r1, [pc, #64]	; (d452c <_Z16setThirdPartySim6String+0x94>)
   d44ea:	4628      	mov	r0, r5
   d44ec:	f003 f9a2 	bl	d7834 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d44f0:	2800      	cmp	r0, #0
   d44f2:	d0f7      	beq.n	d44e4 <_Z16setThirdPartySim6String+0x4c>
    sysStatus.thirdPartySim = false;
   d44f4:	4b06      	ldr	r3, [pc, #24]	; (d4510 <_Z16setThirdPartySim6String+0x78>)
   d44f6:	705c      	strb	r4, [r3, #1]
   d44f8:	f002 fa28 	bl	d694c <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
   d44fc:	2800      	cmp	r0, #0
   d44fe:	d0ee      	beq.n	d44de <_Z16setThirdPartySim6String+0x46>
   d4500:	4b05      	ldr	r3, [pc, #20]	; (d4518 <_Z16setThirdPartySim6String+0x80>)
   d4502:	f88d 4000 	strb.w	r4, [sp]
   d4506:	781b      	ldrb	r3, [r3, #0]
   d4508:	4a09      	ldr	r2, [pc, #36]	; (d4530 <_Z16setThirdPartySim6String+0x98>)
   d450a:	e7e4      	b.n	d44d6 <_Z16setThirdPartySim6String+0x3e>
   d450c:	000dadab 	.word	0x000dadab
   d4510:	2003e5d0 	.word	0x2003e5d0
   d4514:	2003e4d0 	.word	0x2003e4d0
   d4518:	2003e049 	.word	0x2003e049
   d451c:	000dae91 	.word	0x000dae91
   d4520:	000dae8c 	.word	0x000dae8c
   d4524:	2003e4f0 	.word	0x2003e4f0
   d4528:	2003e5f8 	.word	0x2003e5f8
   d452c:	000dae7a 	.word	0x000dae7a
   d4530:	000daea6 	.word	0x000daea6

000d4534 <_Z12setKeepAlive6String>:
{
   d4534:	b510      	push	{r4, lr}
   d4536:	b0c4      	sub	sp, #272	; 0x110
  int tempTime = strtol(command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4538:	6800      	ldr	r0, [r0, #0]
   d453a:	220a      	movs	r2, #10
   d453c:	a903      	add	r1, sp, #12
   d453e:	f005 fc17 	bl	d9d70 <strtol>
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d4542:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   d4546:	d822      	bhi.n	d458e <_Z12setKeepAlive6String+0x5a>
  sysStatus.keepAlive = tempTime;
   d4548:	4c12      	ldr	r4, [pc, #72]	; (d4594 <_Z12setKeepAlive6String+0x60>)
   d454a:	6060      	str	r0, [r4, #4]
  Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d454c:	f7ff fee8 	bl	d4320 <_ZN10CloudClass9keepAliveEj>
  keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d4550:	6863      	ldr	r3, [r4, #4]
   d4552:	4811      	ldr	r0, [pc, #68]	; (d4598 <_Z12setKeepAlive6String+0x64>)
   d4554:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4558:	4359      	muls	r1, r3
   d455a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d455e:	f7ff fef2 	bl	d4346 <_ZN5Timer12changePeriodEjj>
  snprintf(data, sizeof(data), "Keep Alive set to %i sec",sysStatus.keepAlive);
   d4562:	6863      	ldr	r3, [r4, #4]
   d4564:	4a0d      	ldr	r2, [pc, #52]	; (d459c <_Z12setKeepAlive6String+0x68>)
   d4566:	f44f 7180 	mov.w	r1, #256	; 0x100
   d456a:	a804      	add	r0, sp, #16
   d456c:	f002 faa6 	bl	d6abc <snprintf>
   d4570:	2300      	movs	r3, #0
  publishQueue.publish("Keep Alive",data, PRIVATE);
   d4572:	f88d 3000 	strb.w	r3, [sp]
   d4576:	4b0a      	ldr	r3, [pc, #40]	; (d45a0 <_Z12setKeepAlive6String+0x6c>)
   d4578:	490a      	ldr	r1, [pc, #40]	; (d45a4 <_Z12setKeepAlive6String+0x70>)
   d457a:	781b      	ldrb	r3, [r3, #0]
   d457c:	480a      	ldr	r0, [pc, #40]	; (d45a8 <_Z12setKeepAlive6String+0x74>)
   d457e:	aa04      	add	r2, sp, #16
   d4580:	f7ff fef2 	bl	d4368 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatusWriteNeeded = true;                                                           // Need to store to FRAM back in the main loop
   d4584:	4b09      	ldr	r3, [pc, #36]	; (d45ac <_Z12setKeepAlive6String+0x78>)
   d4586:	2001      	movs	r0, #1
   d4588:	7018      	strb	r0, [r3, #0]
}
   d458a:	b044      	add	sp, #272	; 0x110
   d458c:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d458e:	2000      	movs	r0, #0
   d4590:	e7fb      	b.n	d458a <_Z12setKeepAlive6String+0x56>
   d4592:	bf00      	nop
   d4594:	2003e5d0 	.word	0x2003e5d0
   d4598:	2003e4d0 	.word	0x2003e4d0
   d459c:	000daeba 	.word	0x000daeba
   d45a0:	2003e049 	.word	0x2003e049
   d45a4:	000daed3 	.word	0x000daed3
   d45a8:	2003e4f0 	.word	0x2003e4f0
   d45ac:	2003e5f8 	.word	0x2003e5f8

000d45b0 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                                                 // Default settings for the device - connected, not-low power and always on
   d45b0:	b507      	push	{r0, r1, r2, lr}
   d45b2:	f002 f9cb 	bl	d694c <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d45b6:	b148      	cbz	r0, d45cc <_Z18loadSystemDefaultsv+0x1c>
   d45b8:	2300      	movs	r3, #0
   d45ba:	f88d 3000 	strb.w	r3, [sp]
   d45be:	4b0b      	ldr	r3, [pc, #44]	; (d45ec <_Z18loadSystemDefaultsv+0x3c>)
   d45c0:	4a0b      	ldr	r2, [pc, #44]	; (d45f0 <_Z18loadSystemDefaultsv+0x40>)
   d45c2:	781b      	ldrb	r3, [r3, #0]
   d45c4:	490b      	ldr	r1, [pc, #44]	; (d45f4 <_Z18loadSystemDefaultsv+0x44>)
   d45c6:	480c      	ldr	r0, [pc, #48]	; (d45f8 <_Z18loadSystemDefaultsv+0x48>)
   d45c8:	f7ff fece 	bl	d4368 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.keepAlive = 120;
   d45cc:	4a0b      	ldr	r2, [pc, #44]	; (d45fc <_Z18loadSystemDefaultsv+0x4c>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d45ce:	480c      	ldr	r0, [pc, #48]	; (d4600 <_Z18loadSystemDefaultsv+0x50>)
   d45d0:	2378      	movs	r3, #120	; 0x78
   d45d2:	6053      	str	r3, [r2, #4]
  sysStatus.verboseMode = false;
   d45d4:	2300      	movs	r3, #0
  sysStatus.structuresVersion = 1;
   d45d6:	2101      	movs	r1, #1
  sysStatus.verboseMode = false;
   d45d8:	7253      	strb	r3, [r2, #9]
  sysStatus.lowBatteryMode = false;
   d45da:	7293      	strb	r3, [r2, #10]
   d45dc:	2328      	movs	r3, #40	; 0x28
  sysStatus.structuresVersion = 1;
   d45de:	8011      	strh	r1, [r2, #0]
}
   d45e0:	b003      	add	sp, #12
   d45e2:	f85d eb04 	ldr.w	lr, [sp], #4
   d45e6:	f000 bfc8 	b.w	d557a <_ZN6MB85RC9writeDataEjPKhj>
   d45ea:	bf00      	nop
   d45ec:	2003e049 	.word	0x2003e049
   d45f0:	000daede 	.word	0x000daede
   d45f4:	000dae8c 	.word	0x000dae8c
   d45f8:	2003e4f0 	.word	0x2003e4f0
   d45fc:	2003e5d0 	.word	0x2003e5d0
   d4600:	2003e4c0 	.word	0x2003e4c0

000d4604 <_Z17checkSystemValuesv>:
void checkSystemValues() {                                                                  // Checks to ensure that all system values are in reasonable range 
   d4604:	b510      	push	{r4, lr}
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d4606:	4c12      	ldr	r4, [pc, #72]	; (d4650 <_Z17checkSystemValuesv+0x4c>)
   d4608:	7a23      	ldrb	r3, [r4, #8]
   d460a:	2b01      	cmp	r3, #1
   d460c:	d904      	bls.n	d4618 <_Z17checkSystemValuesv+0x14>
   d460e:	f002 f99d 	bl	d694c <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d4612:	b1d8      	cbz	r0, d464c <_Z17checkSystemValuesv+0x48>
   d4614:	2301      	movs	r3, #1
   d4616:	7223      	strb	r3, [r4, #8]
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   d4618:	6863      	ldr	r3, [r4, #4]
   d461a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   d461e:	bf84      	itt	hi
   d4620:	f44f 7316 	movhi.w	r3, #600	; 0x258
   d4624:	6063      	strhi	r3, [r4, #4]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = true;
   d4626:	7a63      	ldrb	r3, [r4, #9]
   d4628:	2b01      	cmp	r3, #1
   d462a:	bf84      	itt	hi
   d462c:	2301      	movhi	r3, #1
   d462e:	7263      	strbhi	r3, [r4, #9]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
   d4630:	7aa3      	ldrb	r3, [r4, #10]
   d4632:	2b01      	cmp	r3, #1
   d4634:	bf84      	itt	hi
   d4636:	2300      	movhi	r3, #0
   d4638:	72a3      	strbhi	r3, [r4, #10]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d463a:	6963      	ldr	r3, [r4, #20]
   d463c:	2bff      	cmp	r3, #255	; 0xff
   d463e:	bf84      	itt	hi
   d4640:	2300      	movhi	r3, #0
   d4642:	6163      	strhi	r3, [r4, #20]
  sysStatusWriteNeeded = true;
   d4644:	4b03      	ldr	r3, [pc, #12]	; (d4654 <_Z17checkSystemValuesv+0x50>)
   d4646:	2201      	movs	r2, #1
   d4648:	701a      	strb	r2, [r3, #0]
}
   d464a:	bd10      	pop	{r4, pc}
    else sysStatus.connectedStatus = false;
   d464c:	7220      	strb	r0, [r4, #8]
   d464e:	e7e3      	b.n	d4618 <_Z17checkSystemValuesv+0x14>
   d4650:	2003e5d0 	.word	0x2003e5d0
   d4654:	2003e5f8 	.word	0x2003e5f8

000d4658 <_Z11petWatchdogv>:
{
   d4658:	b507      	push	{r0, r1, r2, lr}
  digitalWrite(donePin, HIGH);                                                              // Pet the watchdog
   d465a:	2101      	movs	r1, #1
   d465c:	2005      	movs	r0, #5
   d465e:	f003 fd3e 	bl	d80de <digitalWrite>
  digitalWrite(donePin, LOW);
   d4662:	2100      	movs	r1, #0
   d4664:	2005      	movs	r0, #5
   d4666:	f003 fd3a 	bl	d80de <digitalWrite>
  watchdogFlag = false;
   d466a:	4a09      	ldr	r2, [pc, #36]	; (d4690 <_Z11petWatchdogv+0x38>)
   d466c:	2300      	movs	r3, #0
   d466e:	7013      	strb	r3, [r2, #0]
  if (Particle.connected && sysStatus.verboseMode) publishQueue.publish("Watchdog","Petted",PRIVATE);
   d4670:	4a08      	ldr	r2, [pc, #32]	; (d4694 <_Z11petWatchdogv+0x3c>)
   d4672:	7a52      	ldrb	r2, [r2, #9]
   d4674:	b142      	cbz	r2, d4688 <_Z11petWatchdogv+0x30>
   d4676:	f88d 3000 	strb.w	r3, [sp]
   d467a:	4b07      	ldr	r3, [pc, #28]	; (d4698 <_Z11petWatchdogv+0x40>)
   d467c:	4a07      	ldr	r2, [pc, #28]	; (d469c <_Z11petWatchdogv+0x44>)
   d467e:	781b      	ldrb	r3, [r3, #0]
   d4680:	4907      	ldr	r1, [pc, #28]	; (d46a0 <_Z11petWatchdogv+0x48>)
   d4682:	4808      	ldr	r0, [pc, #32]	; (d46a4 <_Z11petWatchdogv+0x4c>)
   d4684:	f7ff fe70 	bl	d4368 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4688:	b003      	add	sp, #12
   d468a:	f85d fb04 	ldr.w	pc, [sp], #4
   d468e:	bf00      	nop
   d4690:	2003e5f9 	.word	0x2003e5f9
   d4694:	2003e5d0 	.word	0x2003e5d0
   d4698:	2003e049 	.word	0x2003e049
   d469c:	000daef6 	.word	0x000daef6
   d46a0:	000daefd 	.word	0x000daefd
   d46a4:	2003e4f0 	.word	0x2003e4f0

000d46a8 <_Z9sendEventv>:
{
   d46a8:	b510      	push	{r4, lr}
  snprintf(data, sizeof(data), "{\"sensorOne\":%4.1f, \"sensorTwo\":%4.1f,  \"sensorThree\":%4.1f,  \"sensorFour\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f}", sensorData.sensorOneCurrent,sensorData.sensorTwoCurrent,sensorData.sensorThreeCurrent,sensorData.sensorFourCurrent,sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d46aa:	4c1d      	ldr	r4, [pc, #116]	; (d4720 <_Z9sendEventv+0x78>)
{
   d46ac:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
  snprintf(data, sizeof(data), "{\"sensorOne\":%4.1f, \"sensorTwo\":%4.1f,  \"sensorThree\":%4.1f,  \"sensorFour\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f}", sensorData.sensorOneCurrent,sensorData.sensorTwoCurrent,sensorData.sensorThreeCurrent,sensorData.sensorFourCurrent,sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d46b0:	6960      	ldr	r0, [r4, #20]
   d46b2:	f004 f81b 	bl	d86ec <__aeabi_f2d>
   d46b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d46ba:	6920      	ldr	r0, [r4, #16]
   d46bc:	f004 f816 	bl	d86ec <__aeabi_f2d>
   d46c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d46c4:	68e0      	ldr	r0, [r4, #12]
   d46c6:	f004 f811 	bl	d86ec <__aeabi_f2d>
   d46ca:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d46ce:	68a0      	ldr	r0, [r4, #8]
   d46d0:	f004 f80c 	bl	d86ec <__aeabi_f2d>
   d46d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d46d8:	6860      	ldr	r0, [r4, #4]
   d46da:	f004 f807 	bl	d86ec <__aeabi_f2d>
   d46de:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d46e2:	6820      	ldr	r0, [r4, #0]
   d46e4:	f004 f802 	bl	d86ec <__aeabi_f2d>
   d46e8:	4a0e      	ldr	r2, [pc, #56]	; (d4724 <_Z9sendEventv+0x7c>)
   d46ea:	e9cd 0100 	strd	r0, r1, [sp]
   d46ee:	f44f 7100 	mov.w	r1, #512	; 0x200
   d46f2:	a80c      	add	r0, sp, #48	; 0x30
   d46f4:	f002 f9e2 	bl	d6abc <snprintf>
  publishQueue.publish("powermonitoring_hook", data, PRIVATE);
   d46f8:	2300      	movs	r3, #0
   d46fa:	f88d 3000 	strb.w	r3, [sp]
   d46fe:	4b0a      	ldr	r3, [pc, #40]	; (d4728 <_Z9sendEventv+0x80>)
   d4700:	490a      	ldr	r1, [pc, #40]	; (d472c <_Z9sendEventv+0x84>)
   d4702:	781b      	ldrb	r3, [r3, #0]
   d4704:	480a      	ldr	r0, [pc, #40]	; (d4730 <_Z9sendEventv+0x88>)
   d4706:	aa0c      	add	r2, sp, #48	; 0x30
   d4708:	f7ff fe2e 	bl	d4368 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                                      // set the data inflight flag
   d470c:	4b09      	ldr	r3, [pc, #36]	; (d4734 <_Z9sendEventv+0x8c>)
   d470e:	2201      	movs	r2, #1
   d4710:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4712:	f001 ff35 	bl	d6580 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d4716:	4b08      	ldr	r3, [pc, #32]	; (d4738 <_Z9sendEventv+0x90>)
   d4718:	6018      	str	r0, [r3, #0]
}
   d471a:	f50d 7d0c 	add.w	sp, sp, #560	; 0x230
   d471e:	bd10      	pop	{r4, pc}
   d4720:	2003e548 	.word	0x2003e548
   d4724:	000daf06 	.word	0x000daf06
   d4728:	2003e049 	.word	0x2003e049
   d472c:	000daf7f 	.word	0x000daf7f
   d4730:	2003e4f0 	.word	0x2003e4f0
   d4734:	2003e06b 	.word	0x2003e06b
   d4738:	2003e5fc 	.word	0x2003e5fc

000d473c <_Z22publishStateTransitionv>:
{
   d473c:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d473e:	4d11      	ldr	r5, [pc, #68]	; (d4784 <_Z22publishStateTransitionv+0x48>)
   d4740:	4c11      	ldr	r4, [pc, #68]	; (d4788 <_Z22publishStateTransitionv+0x4c>)
   d4742:	4912      	ldr	r1, [pc, #72]	; (d478c <_Z22publishStateTransitionv+0x50>)
   d4744:	782a      	ldrb	r2, [r5, #0]
   d4746:	7820      	ldrb	r0, [r4, #0]
{
   d4748:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d474a:	231a      	movs	r3, #26
   d474c:	fb03 1202 	mla	r2, r3, r2, r1
   d4750:	9200      	str	r2, [sp, #0]
   d4752:	fb03 1300 	mla	r3, r3, r0, r1
   d4756:	4a0e      	ldr	r2, [pc, #56]	; (d4790 <_Z22publishStateTransitionv+0x54>)
   d4758:	2128      	movs	r1, #40	; 0x28
   d475a:	a802      	add	r0, sp, #8
   d475c:	f002 f9ae 	bl	d6abc <snprintf>
  oldState = state;
   d4760:	782b      	ldrb	r3, [r5, #0]
   d4762:	7023      	strb	r3, [r4, #0]
   d4764:	f002 f8f2 	bl	d694c <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d4768:	b148      	cbz	r0, d477e <_Z22publishStateTransitionv+0x42>
   d476a:	2300      	movs	r3, #0
   d476c:	f88d 3000 	strb.w	r3, [sp]
   d4770:	4b08      	ldr	r3, [pc, #32]	; (d4794 <_Z22publishStateTransitionv+0x58>)
   d4772:	4909      	ldr	r1, [pc, #36]	; (d4798 <_Z22publishStateTransitionv+0x5c>)
   d4774:	781b      	ldrb	r3, [r3, #0]
   d4776:	4809      	ldr	r0, [pc, #36]	; (d479c <_Z22publishStateTransitionv+0x60>)
   d4778:	aa02      	add	r2, sp, #8
   d477a:	f7ff fdf5 	bl	d4368 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d477e:	b00d      	add	sp, #52	; 0x34
   d4780:	bd30      	pop	{r4, r5, pc}
   d4782:	bf00      	nop
   d4784:	2003e5cd 	.word	0x2003e5cd
   d4788:	2003e4ec 	.word	0x2003e4ec
   d478c:	2003dd88 	.word	0x2003dd88
   d4790:	000daf94 	.word	0x000daf94
   d4794:	2003e049 	.word	0x2003e049
   d4798:	000dafa2 	.word	0x000dafa2
   d479c:	2003e4f0 	.word	0x2003e4f0

000d47a0 <_Z17getBatteryContextv>:
{
   d47a0:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d47a2:	4d0d      	ldr	r5, [pc, #52]	; (d47d8 <_Z17getBatteryContextv+0x38>)
   d47a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   d47a6:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d47a8:	ac01      	add	r4, sp, #4
   d47aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d47ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d47b0:	4b0a      	ldr	r3, [pc, #40]	; (d47dc <_Z17getBatteryContextv+0x3c>)
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d47b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d47b6:	7c1b      	ldrb	r3, [r3, #16]
   d47b8:	4809      	ldr	r0, [pc, #36]	; (d47e0 <_Z17getBatteryContextv+0x40>)
   d47ba:	aa08      	add	r2, sp, #32
   d47bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d47c0:	2110      	movs	r1, #16
   d47c2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
   d47c6:	4a07      	ldr	r2, [pc, #28]	; (d47e4 <_Z17getBatteryContextv+0x44>)
   d47c8:	f002 f978 	bl	d6abc <snprintf>
  sysStatusWriteNeeded = true;
   d47cc:	4b06      	ldr	r3, [pc, #24]	; (d47e8 <_Z17getBatteryContextv+0x48>)
   d47ce:	2201      	movs	r2, #1
   d47d0:	701a      	strb	r2, [r3, #0]
}
   d47d2:	b009      	add	sp, #36	; 0x24
   d47d4:	bd30      	pop	{r4, r5, pc}
   d47d6:	bf00      	nop
   d47d8:	000db288 	.word	0x000db288
   d47dc:	2003e5d0 	.word	0x2003e5d0
   d47e0:	2003e04a 	.word	0x2003e04a
   d47e4:	000db364 	.word	0x000db364
   d47e8:	2003e5f8 	.word	0x2003e5f8

000d47ec <_Z20updateConstantValuesv>:
{   
   d47ec:	b513      	push	{r0, r1, r4, lr}
    snprintf(sensorOneConstantStr,sizeof(sensorOneConstantStr),"CT One: %3.1f", sensorConstants.sensorOneConstant);
   d47ee:	4c1e      	ldr	r4, [pc, #120]	; (d4868 <_Z20updateConstantValuesv+0x7c>)
   d47f0:	481e      	ldr	r0, [pc, #120]	; (d486c <_Z20updateConstantValuesv+0x80>)
   d47f2:	e9d4 2300 	ldrd	r2, r3, [r4]
   d47f6:	2110      	movs	r1, #16
   d47f8:	e9cd 2300 	strd	r2, r3, [sp]
   d47fc:	4a1c      	ldr	r2, [pc, #112]	; (d4870 <_Z20updateConstantValuesv+0x84>)
   d47fe:	f002 f95d 	bl	d6abc <snprintf>
    snprintf(sensorTwoConstantStr,sizeof(sensorTwoConstantStr),"CT Two %3.1f", sensorConstants.sensorTwoConstant);
   d4802:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   d4806:	2110      	movs	r1, #16
   d4808:	e9cd 2300 	strd	r2, r3, [sp]
   d480c:	4819      	ldr	r0, [pc, #100]	; (d4874 <_Z20updateConstantValuesv+0x88>)
   d480e:	4a1a      	ldr	r2, [pc, #104]	; (d4878 <_Z20updateConstantValuesv+0x8c>)
   d4810:	f002 f954 	bl	d6abc <snprintf>
    snprintf(sensorThreeConstantStr,sizeof(sensorThreeConstantStr),"CT Three: %3.1f", sensorConstants.sensorThreeConstant);
   d4814:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   d4818:	2110      	movs	r1, #16
   d481a:	e9cd 2300 	strd	r2, r3, [sp]
   d481e:	4817      	ldr	r0, [pc, #92]	; (d487c <_Z20updateConstantValuesv+0x90>)
   d4820:	4a17      	ldr	r2, [pc, #92]	; (d4880 <_Z20updateConstantValuesv+0x94>)
   d4822:	f002 f94b 	bl	d6abc <snprintf>
    snprintf(sensorFourConstantStr,sizeof(sensorFourConstantStr),"Sensor Four Constant : %3.1f", sensorConstants.sensorFourConstant);
   d4826:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   d482a:	2110      	movs	r1, #16
   d482c:	e9cd 2300 	strd	r2, r3, [sp]
   d4830:	4814      	ldr	r0, [pc, #80]	; (d4884 <_Z20updateConstantValuesv+0x98>)
   d4832:	4a15      	ldr	r2, [pc, #84]	; (d4888 <_Z20updateConstantValuesv+0x9c>)
   d4834:	f002 f942 	bl	d6abc <snprintf>
    snprintf(sensorFiveConstantStr,sizeof(sensorFiveConstantStr),"Sensor Five Constant : %3.1f", sensorConstants.sensorFiveConstant);
   d4838:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   d483c:	2110      	movs	r1, #16
   d483e:	e9cd 2300 	strd	r2, r3, [sp]
   d4842:	4812      	ldr	r0, [pc, #72]	; (d488c <_Z20updateConstantValuesv+0xa0>)
   d4844:	4a12      	ldr	r2, [pc, #72]	; (d4890 <_Z20updateConstantValuesv+0xa4>)
   d4846:	f002 f939 	bl	d6abc <snprintf>
    snprintf(sensorSixConstantStr,sizeof(sensorSixConstantStr),"Sensor Six Constant : %3.1f", sensorConstants.sensorSixConstant);
   d484a:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   d484e:	2110      	movs	r1, #16
   d4850:	e9cd 2300 	strd	r2, r3, [sp]
   d4854:	480f      	ldr	r0, [pc, #60]	; (d4894 <_Z20updateConstantValuesv+0xa8>)
   d4856:	4a10      	ldr	r2, [pc, #64]	; (d4898 <_Z20updateConstantValuesv+0xac>)
   d4858:	f002 f930 	bl	d6abc <snprintf>
    constantsStatusWriteNeeded = true;                                                         // This function is called when there is a change so, we need to update the FRAM
   d485c:	4b0f      	ldr	r3, [pc, #60]	; (d489c <_Z20updateConstantValuesv+0xb0>)
   d485e:	2201      	movs	r2, #1
   d4860:	701a      	strb	r2, [r3, #0]
} 
   d4862:	b002      	add	sp, #8
   d4864:	bd10      	pop	{r4, pc}
   d4866:	bf00      	nop
   d4868:	2003dd58 	.word	0x2003dd58
   d486c:	2003e58d 	.word	0x2003e58d
   d4870:	000dafb3 	.word	0x000dafb3
   d4874:	2003e5bd 	.word	0x2003e5bd
   d4878:	000dafc1 	.word	0x000dafc1
   d487c:	2003e5ad 	.word	0x2003e5ad
   d4880:	000dafce 	.word	0x000dafce
   d4884:	2003e57d 	.word	0x2003e57d
   d4888:	000dafde 	.word	0x000dafde
   d488c:	2003e56d 	.word	0x2003e56d
   d4890:	000daffb 	.word	0x000daffb
   d4894:	2003e59d 	.word	0x2003e59d
   d4898:	000db018 	.word	0x000db018
   d489c:	2003e06a 	.word	0x2003e06a

000d48a0 <_Z14setConstantOne6String>:
int setConstantOne(String command){
   d48a0:	b510      	push	{r4, lr}
   d48a2:	b086      	sub	sp, #24
   d48a4:	4604      	mov	r4, r0
  sensorConstants.sensorOneConstant = command.toFloat();
   d48a6:	f002 ffd7 	bl	d7858 <_ZNK6String7toFloatEv>
   d48aa:	ee10 0a10 	vmov	r0, s0
   d48ae:	f003 ff1d 	bl	d86ec <__aeabi_f2d>
   d48b2:	4b0c      	ldr	r3, [pc, #48]	; (d48e4 <_Z14setConstantOne6String+0x44>)
   d48b4:	e9c3 0100 	strd	r0, r1, [r3]
  publishQueue.publish("Constant One Value set to ",String(command),PRIVATE);
   d48b8:	4621      	mov	r1, r4
   d48ba:	a802      	add	r0, sp, #8
   d48bc:	f002 ff5e 	bl	d777c <_ZN6StringC1ERKS_>
   d48c0:	2300      	movs	r3, #0
   d48c2:	f88d 3000 	strb.w	r3, [sp]
   d48c6:	4b08      	ldr	r3, [pc, #32]	; (d48e8 <_Z14setConstantOne6String+0x48>)
   d48c8:	9a02      	ldr	r2, [sp, #8]
   d48ca:	781b      	ldrb	r3, [r3, #0]
   d48cc:	4907      	ldr	r1, [pc, #28]	; (d48ec <_Z14setConstantOne6String+0x4c>)
   d48ce:	4808      	ldr	r0, [pc, #32]	; (d48f0 <_Z14setConstantOne6String+0x50>)
   d48d0:	f7ff fd4a 	bl	d4368 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d48d4:	a802      	add	r0, sp, #8
   d48d6:	f002 fee3 	bl	d76a0 <_ZN6StringD1Ev>
  updateConstantValues();
   d48da:	f7ff ff87 	bl	d47ec <_Z20updateConstantValuesv>
}
   d48de:	2001      	movs	r0, #1
   d48e0:	b006      	add	sp, #24
   d48e2:	bd10      	pop	{r4, pc}
   d48e4:	2003dd58 	.word	0x2003dd58
   d48e8:	2003e049 	.word	0x2003e049
   d48ec:	000db034 	.word	0x000db034
   d48f0:	2003e4f0 	.word	0x2003e4f0

000d48f4 <_Z14setConstantTwo6String>:
int setConstantTwo(String command){
   d48f4:	b510      	push	{r4, lr}
   d48f6:	b086      	sub	sp, #24
   d48f8:	4604      	mov	r4, r0
  sensorConstants.sensorTwoConstant = command.toFloat();
   d48fa:	f002 ffad 	bl	d7858 <_ZNK6String7toFloatEv>
   d48fe:	ee10 0a10 	vmov	r0, s0
   d4902:	f003 fef3 	bl	d86ec <__aeabi_f2d>
   d4906:	4b0c      	ldr	r3, [pc, #48]	; (d4938 <_Z14setConstantTwo6String+0x44>)
   d4908:	e9c3 0102 	strd	r0, r1, [r3, #8]
  publishQueue.publish("Constant Two Value set to ",String(command),PRIVATE);
   d490c:	4621      	mov	r1, r4
   d490e:	a802      	add	r0, sp, #8
   d4910:	f002 ff34 	bl	d777c <_ZN6StringC1ERKS_>
   d4914:	2300      	movs	r3, #0
   d4916:	f88d 3000 	strb.w	r3, [sp]
   d491a:	4b08      	ldr	r3, [pc, #32]	; (d493c <_Z14setConstantTwo6String+0x48>)
   d491c:	9a02      	ldr	r2, [sp, #8]
   d491e:	781b      	ldrb	r3, [r3, #0]
   d4920:	4907      	ldr	r1, [pc, #28]	; (d4940 <_Z14setConstantTwo6String+0x4c>)
   d4922:	4808      	ldr	r0, [pc, #32]	; (d4944 <_Z14setConstantTwo6String+0x50>)
   d4924:	f7ff fd20 	bl	d4368 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4928:	a802      	add	r0, sp, #8
   d492a:	f002 feb9 	bl	d76a0 <_ZN6StringD1Ev>
  updateConstantValues();
   d492e:	f7ff ff5d 	bl	d47ec <_Z20updateConstantValuesv>
}
   d4932:	2001      	movs	r0, #1
   d4934:	b006      	add	sp, #24
   d4936:	bd10      	pop	{r4, pc}
   d4938:	2003dd58 	.word	0x2003dd58
   d493c:	2003e049 	.word	0x2003e049
   d4940:	000db04f 	.word	0x000db04f
   d4944:	2003e4f0 	.word	0x2003e4f0

000d4948 <_Z16setConstantThree6String>:
int setConstantThree(String command){
   d4948:	b510      	push	{r4, lr}
   d494a:	b086      	sub	sp, #24
   d494c:	4604      	mov	r4, r0
  sensorConstants.sensorThreeConstant = command.toFloat();
   d494e:	f002 ff83 	bl	d7858 <_ZNK6String7toFloatEv>
   d4952:	ee10 0a10 	vmov	r0, s0
   d4956:	f003 fec9 	bl	d86ec <__aeabi_f2d>
   d495a:	4b0c      	ldr	r3, [pc, #48]	; (d498c <_Z16setConstantThree6String+0x44>)
   d495c:	e9c3 0104 	strd	r0, r1, [r3, #16]
  publishQueue.publish("Constant Three Value set to ",String(command),PRIVATE);
   d4960:	4621      	mov	r1, r4
   d4962:	a802      	add	r0, sp, #8
   d4964:	f002 ff0a 	bl	d777c <_ZN6StringC1ERKS_>
   d4968:	2300      	movs	r3, #0
   d496a:	f88d 3000 	strb.w	r3, [sp]
   d496e:	4b08      	ldr	r3, [pc, #32]	; (d4990 <_Z16setConstantThree6String+0x48>)
   d4970:	9a02      	ldr	r2, [sp, #8]
   d4972:	781b      	ldrb	r3, [r3, #0]
   d4974:	4907      	ldr	r1, [pc, #28]	; (d4994 <_Z16setConstantThree6String+0x4c>)
   d4976:	4808      	ldr	r0, [pc, #32]	; (d4998 <_Z16setConstantThree6String+0x50>)
   d4978:	f7ff fcf6 	bl	d4368 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d497c:	a802      	add	r0, sp, #8
   d497e:	f002 fe8f 	bl	d76a0 <_ZN6StringD1Ev>
  updateConstantValues();
   d4982:	f7ff ff33 	bl	d47ec <_Z20updateConstantValuesv>
}
   d4986:	2001      	movs	r0, #1
   d4988:	b006      	add	sp, #24
   d498a:	bd10      	pop	{r4, pc}
   d498c:	2003dd58 	.word	0x2003dd58
   d4990:	2003e049 	.word	0x2003e049
   d4994:	000db06a 	.word	0x000db06a
   d4998:	2003e4f0 	.word	0x2003e4f0

000d499c <_Z15setConstantFour6String>:
int setConstantFour(String command){
   d499c:	b510      	push	{r4, lr}
   d499e:	b086      	sub	sp, #24
   d49a0:	4604      	mov	r4, r0
  sensorConstants.sensorFourConstant = command.toFloat();
   d49a2:	f002 ff59 	bl	d7858 <_ZNK6String7toFloatEv>
   d49a6:	ee10 0a10 	vmov	r0, s0
   d49aa:	f003 fe9f 	bl	d86ec <__aeabi_f2d>
   d49ae:	4b0c      	ldr	r3, [pc, #48]	; (d49e0 <_Z15setConstantFour6String+0x44>)
   d49b0:	e9c3 0106 	strd	r0, r1, [r3, #24]
  publishQueue.publish("Constant Four Value set to ",String(command),PRIVATE);
   d49b4:	4621      	mov	r1, r4
   d49b6:	a802      	add	r0, sp, #8
   d49b8:	f002 fee0 	bl	d777c <_ZN6StringC1ERKS_>
   d49bc:	2300      	movs	r3, #0
   d49be:	f88d 3000 	strb.w	r3, [sp]
   d49c2:	4b08      	ldr	r3, [pc, #32]	; (d49e4 <_Z15setConstantFour6String+0x48>)
   d49c4:	9a02      	ldr	r2, [sp, #8]
   d49c6:	781b      	ldrb	r3, [r3, #0]
   d49c8:	4907      	ldr	r1, [pc, #28]	; (d49e8 <_Z15setConstantFour6String+0x4c>)
   d49ca:	4808      	ldr	r0, [pc, #32]	; (d49ec <_Z15setConstantFour6String+0x50>)
   d49cc:	f7ff fccc 	bl	d4368 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d49d0:	a802      	add	r0, sp, #8
   d49d2:	f002 fe65 	bl	d76a0 <_ZN6StringD1Ev>
  updateConstantValues();
   d49d6:	f7ff ff09 	bl	d47ec <_Z20updateConstantValuesv>
}
   d49da:	2001      	movs	r0, #1
   d49dc:	b006      	add	sp, #24
   d49de:	bd10      	pop	{r4, pc}
   d49e0:	2003dd58 	.word	0x2003dd58
   d49e4:	2003e049 	.word	0x2003e049
   d49e8:	000db087 	.word	0x000db087
   d49ec:	2003e4f0 	.word	0x2003e4f0

000d49f0 <_Z15setConstantFive6String>:
int setConstantFive(String command){
   d49f0:	b510      	push	{r4, lr}
   d49f2:	b086      	sub	sp, #24
   d49f4:	4604      	mov	r4, r0
  sensorConstants.sensorFiveConstant = command.toFloat();
   d49f6:	f002 ff2f 	bl	d7858 <_ZNK6String7toFloatEv>
   d49fa:	ee10 0a10 	vmov	r0, s0
   d49fe:	f003 fe75 	bl	d86ec <__aeabi_f2d>
   d4a02:	4b0c      	ldr	r3, [pc, #48]	; (d4a34 <_Z15setConstantFive6String+0x44>)
   d4a04:	e9c3 0108 	strd	r0, r1, [r3, #32]
  publishQueue.publish("Constant Five Value set to ",String(command),PRIVATE);
   d4a08:	4621      	mov	r1, r4
   d4a0a:	a802      	add	r0, sp, #8
   d4a0c:	f002 feb6 	bl	d777c <_ZN6StringC1ERKS_>
   d4a10:	2300      	movs	r3, #0
   d4a12:	f88d 3000 	strb.w	r3, [sp]
   d4a16:	4b08      	ldr	r3, [pc, #32]	; (d4a38 <_Z15setConstantFive6String+0x48>)
   d4a18:	9a02      	ldr	r2, [sp, #8]
   d4a1a:	781b      	ldrb	r3, [r3, #0]
   d4a1c:	4907      	ldr	r1, [pc, #28]	; (d4a3c <_Z15setConstantFive6String+0x4c>)
   d4a1e:	4808      	ldr	r0, [pc, #32]	; (d4a40 <_Z15setConstantFive6String+0x50>)
   d4a20:	f7ff fca2 	bl	d4368 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4a24:	a802      	add	r0, sp, #8
   d4a26:	f002 fe3b 	bl	d76a0 <_ZN6StringD1Ev>
  updateConstantValues();
   d4a2a:	f7ff fedf 	bl	d47ec <_Z20updateConstantValuesv>
}
   d4a2e:	2001      	movs	r0, #1
   d4a30:	b006      	add	sp, #24
   d4a32:	bd10      	pop	{r4, pc}
   d4a34:	2003dd58 	.word	0x2003dd58
   d4a38:	2003e049 	.word	0x2003e049
   d4a3c:	000db0a3 	.word	0x000db0a3
   d4a40:	2003e4f0 	.word	0x2003e4f0

000d4a44 <_Z14setConstantSix6String>:
int setConstantSix(String command){
   d4a44:	b510      	push	{r4, lr}
   d4a46:	b086      	sub	sp, #24
   d4a48:	4604      	mov	r4, r0
  sensorConstants.sensorSixConstant = command.toFloat();
   d4a4a:	f002 ff05 	bl	d7858 <_ZNK6String7toFloatEv>
   d4a4e:	ee10 0a10 	vmov	r0, s0
   d4a52:	f003 fe4b 	bl	d86ec <__aeabi_f2d>
   d4a56:	4b0c      	ldr	r3, [pc, #48]	; (d4a88 <_Z14setConstantSix6String+0x44>)
   d4a58:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
  publishQueue.publish("Constant Six Value set to ",String(command),PRIVATE);
   d4a5c:	4621      	mov	r1, r4
   d4a5e:	a802      	add	r0, sp, #8
   d4a60:	f002 fe8c 	bl	d777c <_ZN6StringC1ERKS_>
   d4a64:	2300      	movs	r3, #0
   d4a66:	f88d 3000 	strb.w	r3, [sp]
   d4a6a:	4b08      	ldr	r3, [pc, #32]	; (d4a8c <_Z14setConstantSix6String+0x48>)
   d4a6c:	9a02      	ldr	r2, [sp, #8]
   d4a6e:	781b      	ldrb	r3, [r3, #0]
   d4a70:	4907      	ldr	r1, [pc, #28]	; (d4a90 <_Z14setConstantSix6String+0x4c>)
   d4a72:	4808      	ldr	r0, [pc, #32]	; (d4a94 <_Z14setConstantSix6String+0x50>)
   d4a74:	f7ff fc78 	bl	d4368 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4a78:	a802      	add	r0, sp, #8
   d4a7a:	f002 fe11 	bl	d76a0 <_ZN6StringD1Ev>
  updateConstantValues();
   d4a7e:	f7ff feb5 	bl	d47ec <_Z20updateConstantValuesv>
}
   d4a82:	2001      	movs	r0, #1
   d4a84:	b006      	add	sp, #24
   d4a86:	bd10      	pop	{r4, pc}
   d4a88:	2003dd58 	.word	0x2003dd58
   d4a8c:	2003e049 	.word	0x2003e049
   d4a90:	000db0bf 	.word	0x000db0bf
   d4a94:	2003e4f0 	.word	0x2003e4f0

000d4a98 <_Z16takeMeasurementsv>:

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() 
{
   d4a98:	b538      	push	{r3, r4, r5, lr}
    sensorData.validData = false;
   d4a9a:	4c2d      	ldr	r4, [pc, #180]	; (d4b50 <_Z16takeMeasurementsv+0xb8>)
    
    getBatteryContext();     

    if (sysStatus.sensorOneConnected) sensorData.sensorOneCurrent =   emon1.calcIrms(1480);
   d4a9c:	4d2d      	ldr	r5, [pc, #180]	; (d4b54 <_Z16takeMeasurementsv+0xbc>)
    sensorData.validData = false;
   d4a9e:	2300      	movs	r3, #0
   d4aa0:	f884 3020 	strb.w	r3, [r4, #32]
    getBatteryContext();     
   d4aa4:	f7ff fe7c 	bl	d47a0 <_Z17getBatteryContextv>
    if (sysStatus.sensorOneConnected) sensorData.sensorOneCurrent =   emon1.calcIrms(1480);
   d4aa8:	7f2b      	ldrb	r3, [r5, #28]
   d4aaa:	b14b      	cbz	r3, d4ac0 <_Z16takeMeasurementsv+0x28>
   d4aac:	482a      	ldr	r0, [pc, #168]	; (d4b58 <_Z16takeMeasurementsv+0xc0>)
   d4aae:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4ab2:	f000 fc3d 	bl	d5330 <_ZN13EnergyMonitor8calcIrmsEj>
   d4ab6:	ec51 0b10 	vmov	r0, r1, d0
   d4aba:	f004 f93f 	bl	d8d3c <__aeabi_d2f>
   d4abe:	6020      	str	r0, [r4, #0]
    if (sysStatus.sensorTwoConnected) sensorData.sensorTwoCurrent =   emon2.calcIrms(1480);
   d4ac0:	7f6b      	ldrb	r3, [r5, #29]
   d4ac2:	b14b      	cbz	r3, d4ad8 <_Z16takeMeasurementsv+0x40>
   d4ac4:	4825      	ldr	r0, [pc, #148]	; (d4b5c <_Z16takeMeasurementsv+0xc4>)
   d4ac6:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4aca:	f000 fc31 	bl	d5330 <_ZN13EnergyMonitor8calcIrmsEj>
   d4ace:	ec51 0b10 	vmov	r0, r1, d0
   d4ad2:	f004 f933 	bl	d8d3c <__aeabi_d2f>
   d4ad6:	6060      	str	r0, [r4, #4]
    if (sysStatus.sensorThreeConnected) sensorData.sensorThreeCurrent=  emon3.calcIrms(1480);
   d4ad8:	7fab      	ldrb	r3, [r5, #30]
   d4ada:	b14b      	cbz	r3, d4af0 <_Z16takeMeasurementsv+0x58>
   d4adc:	4820      	ldr	r0, [pc, #128]	; (d4b60 <_Z16takeMeasurementsv+0xc8>)
   d4ade:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4ae2:	f000 fc25 	bl	d5330 <_ZN13EnergyMonitor8calcIrmsEj>
   d4ae6:	ec51 0b10 	vmov	r0, r1, d0
   d4aea:	f004 f927 	bl	d8d3c <__aeabi_d2f>
   d4aee:	60a0      	str	r0, [r4, #8]
    if (sysStatus.sensorFourConnected) sensorData.sensorFourCurrent =  emon4.calcIrms(1480);
   d4af0:	7feb      	ldrb	r3, [r5, #31]
   d4af2:	b14b      	cbz	r3, d4b08 <_Z16takeMeasurementsv+0x70>
   d4af4:	481b      	ldr	r0, [pc, #108]	; (d4b64 <_Z16takeMeasurementsv+0xcc>)
   d4af6:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4afa:	f000 fc19 	bl	d5330 <_ZN13EnergyMonitor8calcIrmsEj>
   d4afe:	ec51 0b10 	vmov	r0, r1, d0
   d4b02:	f004 f91b 	bl	d8d3c <__aeabi_d2f>
   d4b06:	60e0      	str	r0, [r4, #12]
    if (sysStatus.sensorFiveConnected) sensorData.sensorFiveCurrent =  emon5.calcIrms(1480);               
   d4b08:	f895 3020 	ldrb.w	r3, [r5, #32]
   d4b0c:	b14b      	cbz	r3, d4b22 <_Z16takeMeasurementsv+0x8a>
   d4b0e:	4816      	ldr	r0, [pc, #88]	; (d4b68 <_Z16takeMeasurementsv+0xd0>)
   d4b10:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4b14:	f000 fc0c 	bl	d5330 <_ZN13EnergyMonitor8calcIrmsEj>
   d4b18:	ec51 0b10 	vmov	r0, r1, d0
   d4b1c:	f004 f90e 	bl	d8d3c <__aeabi_d2f>
   d4b20:	6120      	str	r0, [r4, #16]
    if (sysStatus.sensorSixConnected) sensorData.sensorSixCurrent =   emon6.calcIrms(1480);
   d4b22:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d4b26:	b14b      	cbz	r3, d4b3c <_Z16takeMeasurementsv+0xa4>
   d4b28:	4810      	ldr	r0, [pc, #64]	; (d4b6c <_Z16takeMeasurementsv+0xd4>)
   d4b2a:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4b2e:	f000 fbff 	bl	d5330 <_ZN13EnergyMonitor8calcIrmsEj>
   d4b32:	ec51 0b10 	vmov	r0, r1, d0
   d4b36:	f004 f901 	bl	d8d3c <__aeabi_d2f>
   d4b3a:	6160      	str	r0, [r4, #20]

    // Indicate that this is a valid data array and store it
    sensorData.validData = true;
   d4b3c:	2501      	movs	r5, #1
   d4b3e:	f884 5020 	strb.w	r5, [r4, #32]
    sensorData.timeStamp = Time.now();
   d4b42:	f003 f826 	bl	d7b92 <_ZN9TimeClass3nowEv>
    sensorDataWriteNeeded = true;
   d4b46:	4b0a      	ldr	r3, [pc, #40]	; (d4b70 <_Z16takeMeasurementsv+0xd8>)
    sensorData.timeStamp = Time.now();
   d4b48:	61a0      	str	r0, [r4, #24]
    sensorDataWriteNeeded = true;
   d4b4a:	701d      	strb	r5, [r3, #0]
    return 1;

  }
   d4b4c:	4628      	mov	r0, r5
   d4b4e:	bd38      	pop	{r3, r4, r5, pc}
   d4b50:	2003e548 	.word	0x2003e548
   d4b54:	2003e5d0 	.word	0x2003e5d0
   d4b58:	2003e070 	.word	0x2003e070
   d4b5c:	2003e128 	.word	0x2003e128
   d4b60:	2003e1e0 	.word	0x2003e1e0
   d4b64:	2003e298 	.word	0x2003e298
   d4b68:	2003e350 	.word	0x2003e350
   d4b6c:	2003e408 	.word	0x2003e408
   d4b70:	2003e56c 	.word	0x2003e56c

000d4b74 <loop>:
void loop() {
   d4b74:	b570      	push	{r4, r5, r6, lr}
  switch(state) {
   d4b76:	4c78      	ldr	r4, [pc, #480]	; (d4d58 <loop+0x1e4>)
   d4b78:	7823      	ldrb	r3, [r4, #0]
   d4b7a:	3b01      	subs	r3, #1
void loop() {
   d4b7c:	b086      	sub	sp, #24
   d4b7e:	2b04      	cmp	r3, #4
   d4b80:	d817      	bhi.n	d4bb2 <loop+0x3e>
   d4b82:	e8df f003 	tbb	[pc, r3]
   d4b86:	03c3      	.short	0x03c3
   d4b88:	5141      	.short	0x5141
   d4b8a:	90          	.byte	0x90
   d4b8b:	00          	.byte	0x00
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4b8c:	4b73      	ldr	r3, [pc, #460]	; (d4d5c <loop+0x1e8>)
   d4b8e:	7a5b      	ldrb	r3, [r3, #9]
   d4b90:	b12b      	cbz	r3, d4b9e <loop+0x2a>
   d4b92:	4b73      	ldr	r3, [pc, #460]	; (d4d60 <loop+0x1ec>)
   d4b94:	781b      	ldrb	r3, [r3, #0]
   d4b96:	2b02      	cmp	r3, #2
   d4b98:	d001      	beq.n	d4b9e <loop+0x2a>
   d4b9a:	f7ff fdcf 	bl	d473c <_Z22publishStateTransitionv>
    if (!(Time.now() % wakeBoundary)) state = MEASURING_STATE;                                                     
   d4b9e:	f002 fff8 	bl	d7b92 <_ZN9TimeClass3nowEv>
   d4ba2:	230a      	movs	r3, #10
   d4ba4:	fb90 f2f3 	sdiv	r2, r0, r3
   d4ba8:	fb02 0313 	mls	r3, r2, r3, r0
   d4bac:	b90b      	cbnz	r3, d4bb2 <loop+0x3e>
   d4bae:	2303      	movs	r3, #3
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d4bb0:	7023      	strb	r3, [r4, #0]
  rtc.loop();                                                                               // keeps the clock up to date
   d4bb2:	486c      	ldr	r0, [pc, #432]	; (d4d64 <loop+0x1f0>)
   d4bb4:	f001 f8be 	bl	d5d34 <_ZN8MCP794104loopEv>
  if (watchdogFlag) petWatchdog();                                                          // Watchdog flag is raised - time to pet the watchdog
   d4bb8:	4b6b      	ldr	r3, [pc, #428]	; (d4d68 <loop+0x1f4>)
   d4bba:	781b      	ldrb	r3, [r3, #0]
   d4bbc:	b10b      	cbz	r3, d4bc2 <loop+0x4e>
   d4bbe:	f7ff fd4b 	bl	d4658 <_Z11petWatchdogv>
  if (sysStatusWriteNeeded) {
   d4bc2:	4c6a      	ldr	r4, [pc, #424]	; (d4d6c <loop+0x1f8>)
   d4bc4:	7823      	ldrb	r3, [r4, #0]
   d4bc6:	b13b      	cbz	r3, d4bd8 <loop+0x64>
   d4bc8:	2328      	movs	r3, #40	; 0x28
   d4bca:	4a64      	ldr	r2, [pc, #400]	; (d4d5c <loop+0x1e8>)
   d4bcc:	4868      	ldr	r0, [pc, #416]	; (d4d70 <loop+0x1fc>)
   d4bce:	2101      	movs	r1, #1
   d4bd0:	f000 fcd3 	bl	d557a <_ZN6MB85RC9writeDataEjPKhj>
    sysStatusWriteNeeded = false;
   d4bd4:	2300      	movs	r3, #0
   d4bd6:	7023      	strb	r3, [r4, #0]
  if (sensorDataWriteNeeded) {
   d4bd8:	4c66      	ldr	r4, [pc, #408]	; (d4d74 <loop+0x200>)
   d4bda:	7823      	ldrb	r3, [r4, #0]
   d4bdc:	b13b      	cbz	r3, d4bee <loop+0x7a>
   d4bde:	2324      	movs	r3, #36	; 0x24
   d4be0:	4a65      	ldr	r2, [pc, #404]	; (d4d78 <loop+0x204>)
   d4be2:	4863      	ldr	r0, [pc, #396]	; (d4d70 <loop+0x1fc>)
   d4be4:	21a0      	movs	r1, #160	; 0xa0
   d4be6:	f000 fcc8 	bl	d557a <_ZN6MB85RC9writeDataEjPKhj>
    sensorDataWriteNeeded = false;
   d4bea:	2300      	movs	r3, #0
   d4bec:	7023      	strb	r3, [r4, #0]
  if (constantsStatusWriteNeeded) {
   d4bee:	4c63      	ldr	r4, [pc, #396]	; (d4d7c <loop+0x208>)
   d4bf0:	7823      	ldrb	r3, [r4, #0]
   d4bf2:	b13b      	cbz	r3, d4c04 <loop+0x90>
   d4bf4:	2330      	movs	r3, #48	; 0x30
   d4bf6:	4a62      	ldr	r2, [pc, #392]	; (d4d80 <loop+0x20c>)
   d4bf8:	485d      	ldr	r0, [pc, #372]	; (d4d70 <loop+0x1fc>)
   d4bfa:	21f0      	movs	r1, #240	; 0xf0
   d4bfc:	f000 fcbd 	bl	d557a <_ZN6MB85RC9writeDataEjPKhj>
    constantsStatusWriteNeeded = false;
   d4c00:	2300      	movs	r3, #0
   d4c02:	7023      	strb	r3, [r4, #0]
}
   d4c04:	b006      	add	sp, #24
   d4c06:	bd70      	pop	{r4, r5, r6, pc}
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4c08:	4b54      	ldr	r3, [pc, #336]	; (d4d5c <loop+0x1e8>)
   d4c0a:	7a5b      	ldrb	r3, [r3, #9]
   d4c0c:	b12b      	cbz	r3, d4c1a <loop+0xa6>
   d4c0e:	4b54      	ldr	r3, [pc, #336]	; (d4d60 <loop+0x1ec>)
   d4c10:	781b      	ldrb	r3, [r3, #0]
   d4c12:	2b03      	cmp	r3, #3
   d4c14:	d001      	beq.n	d4c1a <loop+0xa6>
   d4c16:	f7ff fd91 	bl	d473c <_Z22publishStateTransitionv>
    if (!takeMeasurements())
   d4c1a:	f7ff ff3d 	bl	d4a98 <_Z16takeMeasurementsv>
   d4c1e:	b908      	cbnz	r0, d4c24 <loop+0xb0>
      state = IDLE_STATE;
   d4c20:	2302      	movs	r3, #2
   d4c22:	e7c5      	b.n	d4bb0 <loop+0x3c>
      state = REPORTING_STATE;
   d4c24:	2304      	movs	r3, #4
   d4c26:	e7c3      	b.n	d4bb0 <loop+0x3c>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();               // Reporting - hourly or on command
   d4c28:	4b4c      	ldr	r3, [pc, #304]	; (d4d5c <loop+0x1e8>)
   d4c2a:	7a5b      	ldrb	r3, [r3, #9]
   d4c2c:	b12b      	cbz	r3, d4c3a <loop+0xc6>
   d4c2e:	4b4c      	ldr	r3, [pc, #304]	; (d4d60 <loop+0x1ec>)
   d4c30:	781b      	ldrb	r3, [r3, #0]
   d4c32:	2b04      	cmp	r3, #4
   d4c34:	d001      	beq.n	d4c3a <loop+0xc6>
   d4c36:	f7ff fd81 	bl	d473c <_Z22publishStateTransitionv>
   d4c3a:	f001 fe87 	bl	d694c <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4c3e:	4605      	mov	r5, r0
   d4c40:	b178      	cbz	r0, d4c62 <loop+0xee>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d4c42:	f002 ffb7 	bl	d7bb4 <_ZN9TimeClass4hourEv>
   d4c46:	280c      	cmp	r0, #12
   d4c48:	d105      	bne.n	d4c56 <loop+0xe2>
   d4c4a:	f001 fe7f 	bl	d694c <spark_cloud_flag_connected>
        if (!connected()) {
   d4c4e:	b110      	cbz	r0, d4c56 <loop+0xe2>
        return spark_sync_time(NULL);
   d4c50:	2000      	movs	r0, #0
   d4c52:	f001 fe9b 	bl	d698c <spark_sync_time>
      takeMeasurements();
   d4c56:	f7ff ff1f 	bl	d4a98 <_Z16takeMeasurementsv>
      sendEvent();                                                                          // Send data to Ubidots
   d4c5a:	f7ff fd25 	bl	d46a8 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d4c5e:	2305      	movs	r3, #5
   d4c60:	e7a6      	b.n	d4bb0 <loop+0x3c>
      publishQueue.publish("DEBUG- Startup","ERROR FROM REPORTING",PRIVATE);
   d4c62:	4e48      	ldr	r6, [pc, #288]	; (d4d84 <loop+0x210>)
   d4c64:	4a48      	ldr	r2, [pc, #288]	; (d4d88 <loop+0x214>)
   d4c66:	7833      	ldrb	r3, [r6, #0]
   d4c68:	4948      	ldr	r1, [pc, #288]	; (d4d8c <loop+0x218>)
   d4c6a:	f88d 0000 	strb.w	r0, [sp]
   d4c6e:	4848      	ldr	r0, [pc, #288]	; (d4d90 <loop+0x21c>)
   d4c70:	f7ff fb7a 	bl	d4368 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4c74:	f001 fe6a 	bl	d694c <spark_cloud_flag_connected>
      publishQueue.publish("DEBUG- PARTICLE CONNECTED",String(Particle.connected()),PRIVATE);
   d4c78:	220a      	movs	r2, #10
   d4c7a:	4601      	mov	r1, r0
   d4c7c:	a802      	add	r0, sp, #8
   d4c7e:	f002 fd9a 	bl	d77b6 <_ZN6StringC1Eih>
   d4c82:	7833      	ldrb	r3, [r6, #0]
   d4c84:	9a02      	ldr	r2, [sp, #8]
   d4c86:	4943      	ldr	r1, [pc, #268]	; (d4d94 <loop+0x220>)
   d4c88:	4841      	ldr	r0, [pc, #260]	; (d4d90 <loop+0x21c>)
   d4c8a:	f88d 5000 	strb.w	r5, [sp]
   d4c8e:	f7ff fb6b 	bl	d4368 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4c92:	a802      	add	r0, sp, #8
   d4c94:	f002 fd04 	bl	d76a0 <_ZN6StringD1Ev>
      state = ERROR_STATE;
   d4c98:	2301      	movs	r3, #1
   d4c9a:	7023      	strb	r3, [r4, #0]
   d4c9c:	f001 fc70 	bl	d6580 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4ca0:	4b3d      	ldr	r3, [pc, #244]	; (d4d98 <loop+0x224>)
   d4ca2:	6018      	str	r0, [r3, #0]
   d4ca4:	e785      	b.n	d4bb2 <loop+0x3e>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4ca6:	4b2d      	ldr	r3, [pc, #180]	; (d4d5c <loop+0x1e8>)
   d4ca8:	7a5b      	ldrb	r3, [r3, #9]
   d4caa:	b12b      	cbz	r3, d4cb8 <loop+0x144>
   d4cac:	4b2c      	ldr	r3, [pc, #176]	; (d4d60 <loop+0x1ec>)
   d4cae:	781b      	ldrb	r3, [r3, #0]
   d4cb0:	2b05      	cmp	r3, #5
   d4cb2:	d001      	beq.n	d4cb8 <loop+0x144>
   d4cb4:	f7ff fd42 	bl	d473c <_Z22publishStateTransitionv>
    if (!dataInFlight && (Time.now() % wakeBoundary))                                       // Response received back to IDLE state - make sure we don't allow repetivie reporting events
   d4cb8:	4b38      	ldr	r3, [pc, #224]	; (d4d9c <loop+0x228>)
   d4cba:	781b      	ldrb	r3, [r3, #0]
   d4cbc:	b943      	cbnz	r3, d4cd0 <loop+0x15c>
   d4cbe:	f002 ff68 	bl	d7b92 <_ZN9TimeClass3nowEv>
   d4cc2:	230a      	movs	r3, #10
   d4cc4:	fb90 f2f3 	sdiv	r2, r0, r3
   d4cc8:	fb02 0313 	mls	r3, r2, r3, r0
   d4ccc:	2b00      	cmp	r3, #0
   d4cce:	d1a7      	bne.n	d4c20 <loop+0xac>
   d4cd0:	f001 fc56 	bl	d6580 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {                                   // If it takes too long - will need to reset
   d4cd4:	4b32      	ldr	r3, [pc, #200]	; (d4da0 <loop+0x22c>)
   d4cd6:	681b      	ldr	r3, [r3, #0]
   d4cd8:	1ac0      	subs	r0, r0, r3
   d4cda:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d4cde:	4298      	cmp	r0, r3
   d4ce0:	f67f af67 	bls.w	d4bb2 <loop+0x3e>
   d4ce4:	f001 fc4c 	bl	d6580 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4ce8:	4d2b      	ldr	r5, [pc, #172]	; (d4d98 <loop+0x224>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4cea:	4a2e      	ldr	r2, [pc, #184]	; (d4da4 <loop+0x230>)
      resetTimeStamp = millis();
   d4cec:	6028      	str	r0, [r5, #0]
   d4cee:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4cf0:	f88d 3000 	strb.w	r3, [sp]
   d4cf4:	4b23      	ldr	r3, [pc, #140]	; (d4d84 <loop+0x210>)
   d4cf6:	492c      	ldr	r1, [pc, #176]	; (d4da8 <loop+0x234>)
   d4cf8:	781b      	ldrb	r3, [r3, #0]
   d4cfa:	4825      	ldr	r0, [pc, #148]	; (d4d90 <loop+0x21c>)
   d4cfc:	f7ff fb34 	bl	d4368 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      state = ERROR_STATE;                                                                  // Response timed out
   d4d00:	2301      	movs	r3, #1
   d4d02:	7023      	strb	r3, [r4, #0]
   d4d04:	f001 fc3c 	bl	d6580 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4d08:	6028      	str	r0, [r5, #0]
   d4d0a:	e752      	b.n	d4bb2 <loop+0x3e>
    if (state != oldState) publishStateTransition();
   d4d0c:	4b14      	ldr	r3, [pc, #80]	; (d4d60 <loop+0x1ec>)
   d4d0e:	781b      	ldrb	r3, [r3, #0]
   d4d10:	2b01      	cmp	r3, #1
   d4d12:	d001      	beq.n	d4d18 <loop+0x1a4>
   d4d14:	f7ff fd12 	bl	d473c <_Z22publishStateTransitionv>
   d4d18:	f001 fc32 	bl	d6580 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d4d1c:	4b1e      	ldr	r3, [pc, #120]	; (d4d98 <loop+0x224>)
   d4d1e:	681b      	ldr	r3, [r3, #0]
   d4d20:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d4d24:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d4d28:	4283      	cmp	r3, r0
   d4d2a:	f4bf af42 	bcs.w	d4bb2 <loop+0x3e>
   d4d2e:	f001 fe0d 	bl	d694c <spark_cloud_flag_connected>
      if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE); // Brodcast Reset Action
   d4d32:	b148      	cbz	r0, d4d48 <loop+0x1d4>
   d4d34:	2300      	movs	r3, #0
   d4d36:	f88d 3000 	strb.w	r3, [sp]
   d4d3a:	4b12      	ldr	r3, [pc, #72]	; (d4d84 <loop+0x210>)
   d4d3c:	4a1b      	ldr	r2, [pc, #108]	; (d4dac <loop+0x238>)
   d4d3e:	781b      	ldrb	r3, [r3, #0]
   d4d40:	491b      	ldr	r1, [pc, #108]	; (d4db0 <loop+0x23c>)
   d4d42:	4813      	ldr	r0, [pc, #76]	; (d4d90 <loop+0x21c>)
   d4d44:	f7ff fb10 	bl	d4368 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      delay(2000);
   d4d48:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4d4c:	f001 fefe 	bl	d6b4c <delay>
      System.reset();
   d4d50:	f002 fda4 	bl	d789c <_ZN11SystemClass5resetEv>
   d4d54:	e72d      	b.n	d4bb2 <loop+0x3e>
   d4d56:	bf00      	nop
   d4d58:	2003e5cd 	.word	0x2003e5cd
   d4d5c:	2003e5d0 	.word	0x2003e5d0
   d4d60:	2003e4ec 	.word	0x2003e4ec
   d4d64:	2003e52c 	.word	0x2003e52c
   d4d68:	2003e5f9 	.word	0x2003e5f9
   d4d6c:	2003e5f8 	.word	0x2003e5f8
   d4d70:	2003e4c0 	.word	0x2003e4c0
   d4d74:	2003e56c 	.word	0x2003e56c
   d4d78:	2003e548 	.word	0x2003e548
   d4d7c:	2003e06a 	.word	0x2003e06a
   d4d80:	2003dd58 	.word	0x2003dd58
   d4d84:	2003e049 	.word	0x2003e049
   d4d88:	000db0da 	.word	0x000db0da
   d4d8c:	000db0ef 	.word	0x000db0ef
   d4d90:	2003e4f0 	.word	0x2003e4f0
   d4d94:	000db0fe 	.word	0x000db0fe
   d4d98:	2003e528 	.word	0x2003e528
   d4d9c:	2003e06b 	.word	0x2003e06b
   d4da0:	2003e5fc 	.word	0x2003e5fc
   d4da4:	000db6f8 	.word	0x000db6f8
   d4da8:	000db118 	.word	0x000db118
   d4dac:	000db131 	.word	0x000db131
   d4db0:	000db145 	.word	0x000db145

000d4db4 <_ZN10CloudClass8variableIA13_cJRdEEEbRKT_DpOT0_>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4db4:	2300      	movs	r3, #0
   d4db6:	2209      	movs	r2, #9
   d4db8:	f001 bdb0 	b.w	d691c <spark_variable>

000d4dbc <setup>:
void setup() {
   d4dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d4dc0:	2100      	movs	r1, #0
void setup() {
   d4dc2:	b09a      	sub	sp, #104	; 0x68
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d4dc4:	2008      	movs	r0, #8
   d4dc6:	f003 f979 	bl	d80bc <pinMode>
  pinMode(donePin,OUTPUT);                                                                  // Allows us to pet the watchdog
   d4dca:	2101      	movs	r1, #1
   d4dcc:	2005      	movs	r0, #5
   d4dce:	f003 f975 	bl	d80bc <pinMode>
  petWatchdog();                                                                            // Pet the watchdog - This will reset the watchdog time period AND 
   d4dd2:	f7ff fc41 	bl	d4658 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                                          // The watchdog timer will signal us and we have to respond
   d4dd6:	2300      	movs	r3, #0
   d4dd8:	9300      	str	r3, [sp, #0]
   d4dda:	2201      	movs	r2, #1
   d4ddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4de0:	49aa      	ldr	r1, [pc, #680]	; (d508c <setup+0x2d0>)
   d4de2:	2008      	movs	r0, #8
   d4de4:	f002 faa8 	bl	d7338 <_Z15attachInterrupttPFvvE13InterruptModeah>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4de8:	4ba9      	ldr	r3, [pc, #676]	; (d5090 <setup+0x2d4>)
   d4dea:	aa0a      	add	r2, sp, #40	; 0x28
   d4dec:	f103 0510 	add.w	r5, r3, #16
   d4df0:	4617      	mov	r7, r2
   d4df2:	6818      	ldr	r0, [r3, #0]
   d4df4:	6859      	ldr	r1, [r3, #4]
   d4df6:	4614      	mov	r4, r2
   d4df8:	c403      	stmia	r4!, {r0, r1}
   d4dfa:	3308      	adds	r3, #8
   d4dfc:	42ab      	cmp	r3, r5
   d4dfe:	4622      	mov	r2, r4
   d4e00:	d1f7      	bne.n	d4df2 <setup+0x36>
   d4e02:	8819      	ldrh	r1, [r3, #0]
   d4e04:	789b      	ldrb	r3, [r3, #2]
   d4e06:	70a3      	strb	r3, [r4, #2]
   d4e08:	222d      	movs	r2, #45	; 0x2d
   d4e0a:	8021      	strh	r1, [r4, #0]
   d4e0c:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
   d4e10:	2100      	movs	r1, #0
  state = INITIALIZATION_STATE;
   d4e12:	4ca0      	ldr	r4, [pc, #640]	; (d5094 <setup+0x2d8>)
   d4e14:	4da0      	ldr	r5, [pc, #640]	; (d5098 <setup+0x2dc>)
   d4e16:	2600      	movs	r6, #0
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4e18:	f004 f874 	bl	d8f04 <memset>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d4e1c:	a802      	add	r0, sp, #8
  state = INITIALIZATION_STATE;
   d4e1e:	7026      	strb	r6, [r4, #0]
   d4e20:	f001 fd9c 	bl	d695c <spark_deviceID>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4e24:	a902      	add	r1, sp, #8
   d4e26:	a806      	add	r0, sp, #24
   d4e28:	f002 fca8 	bl	d777c <_ZN6StringC1ERKS_>
  Particle.subscribe(System.deviceID() + "/hook-response/powermonitoring_hook/", UbidotsHandler, MY_DEVICES);
   d4e2c:	499b      	ldr	r1, [pc, #620]	; (d509c <setup+0x2e0>)
   d4e2e:	a806      	add	r0, sp, #24
   d4e30:	f002 fceb 	bl	d780a <_ZplRK15StringSumHelperPKc>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d4e34:	e9cd 6600 	strd	r6, r6, [sp]
   d4e38:	4999      	ldr	r1, [pc, #612]	; (d50a0 <setup+0x2e4>)
   d4e3a:	6800      	ldr	r0, [r0, #0]
   d4e3c:	4633      	mov	r3, r6
   d4e3e:	4632      	mov	r2, r6
   d4e40:	f001 fd9c 	bl	d697c <spark_subscribe>
class StringSumHelper : public String
   d4e44:	a806      	add	r0, sp, #24
   d4e46:	f002 fc2b 	bl	d76a0 <_ZN6StringD1Ev>
   d4e4a:	a802      	add	r0, sp, #8
   d4e4c:	f002 fc28 	bl	d76a0 <_ZN6StringD1Ev>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4e50:	4994      	ldr	r1, [pc, #592]	; (d50a4 <setup+0x2e8>)
   d4e52:	4895      	ldr	r0, [pc, #596]	; (d50a8 <setup+0x2ec>)
   d4e54:	4633      	mov	r3, r6
   d4e56:	2204      	movs	r2, #4
   d4e58:	f001 fd60 	bl	d691c <spark_variable>
   d4e5c:	4993      	ldr	r1, [pc, #588]	; (d50ac <setup+0x2f0>)
   d4e5e:	4894      	ldr	r0, [pc, #592]	; (d50b0 <setup+0x2f4>)
   d4e60:	4633      	mov	r3, r6
   d4e62:	2204      	movs	r2, #4
   d4e64:	f001 fd5a 	bl	d691c <spark_variable>
   d4e68:	4992      	ldr	r1, [pc, #584]	; (d50b4 <setup+0x2f8>)
   d4e6a:	4893      	ldr	r0, [pc, #588]	; (d50b8 <setup+0x2fc>)
   d4e6c:	4633      	mov	r3, r6
   d4e6e:	2204      	movs	r2, #4
   d4e70:	f001 fd54 	bl	d691c <spark_variable>
   d4e74:	4991      	ldr	r1, [pc, #580]	; (d50bc <setup+0x300>)
   d4e76:	4892      	ldr	r0, [pc, #584]	; (d50c0 <setup+0x304>)
   d4e78:	4633      	mov	r3, r6
   d4e7a:	2202      	movs	r2, #2
   d4e7c:	f001 fd4e 	bl	d691c <spark_variable>
   d4e80:	4633      	mov	r3, r6
   d4e82:	2201      	movs	r2, #1
   d4e84:	498f      	ldr	r1, [pc, #572]	; (d50c4 <setup+0x308>)
   d4e86:	4890      	ldr	r0, [pc, #576]	; (d50c8 <setup+0x30c>)
   d4e88:	f001 fd48 	bl	d691c <spark_variable>
  Particle.variable("Constant One", sensorConstants.sensorOneConstant);
   d4e8c:	498f      	ldr	r1, [pc, #572]	; (d50cc <setup+0x310>)
   d4e8e:	4890      	ldr	r0, [pc, #576]	; (d50d0 <setup+0x314>)
   d4e90:	f7ff ff90 	bl	d4db4 <_ZN10CloudClass8variableIA13_cJRdEEEbRKT_DpOT0_>
  Particle.variable("Constant Two", sensorConstants.sensorTwoConstant);
   d4e94:	498f      	ldr	r1, [pc, #572]	; (d50d4 <setup+0x318>)
   d4e96:	4890      	ldr	r0, [pc, #576]	; (d50d8 <setup+0x31c>)
   d4e98:	f7ff ff8c 	bl	d4db4 <_ZN10CloudClass8variableIA13_cJRdEEEbRKT_DpOT0_>
   d4e9c:	498f      	ldr	r1, [pc, #572]	; (d50dc <setup+0x320>)
   d4e9e:	4890      	ldr	r0, [pc, #576]	; (d50e0 <setup+0x324>)
   d4ea0:	4633      	mov	r3, r6
   d4ea2:	2209      	movs	r2, #9
   d4ea4:	f001 fd3a 	bl	d691c <spark_variable>
   d4ea8:	498e      	ldr	r1, [pc, #568]	; (d50e4 <setup+0x328>)
   d4eaa:	488f      	ldr	r0, [pc, #572]	; (d50e8 <setup+0x32c>)
   d4eac:	4633      	mov	r3, r6
   d4eae:	2209      	movs	r2, #9
   d4eb0:	f001 fd34 	bl	d691c <spark_variable>
   d4eb4:	4633      	mov	r3, r6
   d4eb6:	2209      	movs	r2, #9
   d4eb8:	498c      	ldr	r1, [pc, #560]	; (d50ec <setup+0x330>)
   d4eba:	488d      	ldr	r0, [pc, #564]	; (d50f0 <setup+0x334>)
   d4ebc:	f001 fd2e 	bl	d691c <spark_variable>
  Particle.variable("Constant Six", sensorConstants.sensorSixConstant);
   d4ec0:	498c      	ldr	r1, [pc, #560]	; (d50f4 <setup+0x338>)
   d4ec2:	488d      	ldr	r0, [pc, #564]	; (d50f8 <setup+0x33c>)
   d4ec4:	f7ff ff76 	bl	d4db4 <_ZN10CloudClass8variableIA13_cJRdEEEbRKT_DpOT0_>
        return _function(name, args...);
   d4ec8:	498c      	ldr	r1, [pc, #560]	; (d50fc <setup+0x340>)
   d4eca:	488d      	ldr	r0, [pc, #564]	; (d5100 <setup+0x344>)
   d4ecc:	f7ff fa22 	bl	d4314 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4ed0:	498c      	ldr	r1, [pc, #560]	; (d5104 <setup+0x348>)
   d4ed2:	488d      	ldr	r0, [pc, #564]	; (d5108 <setup+0x34c>)
   d4ed4:	f7ff fa1e 	bl	d4314 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4ed8:	498c      	ldr	r1, [pc, #560]	; (d510c <setup+0x350>)
   d4eda:	488d      	ldr	r0, [pc, #564]	; (d5110 <setup+0x354>)
   d4edc:	f7ff fa1a 	bl	d4314 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4ee0:	498c      	ldr	r1, [pc, #560]	; (d5114 <setup+0x358>)
   d4ee2:	4879      	ldr	r0, [pc, #484]	; (d50c8 <setup+0x30c>)
   d4ee4:	f7ff fa16 	bl	d4314 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4ee8:	498b      	ldr	r1, [pc, #556]	; (d5118 <setup+0x35c>)
   d4eea:	488c      	ldr	r0, [pc, #560]	; (d511c <setup+0x360>)
   d4eec:	f7ff fa12 	bl	d4314 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4ef0:	498b      	ldr	r1, [pc, #556]	; (d5120 <setup+0x364>)
   d4ef2:	488c      	ldr	r0, [pc, #560]	; (d5124 <setup+0x368>)
   d4ef4:	f7ff fa0e 	bl	d4314 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4ef8:	498b      	ldr	r1, [pc, #556]	; (d5128 <setup+0x36c>)
   d4efa:	488c      	ldr	r0, [pc, #560]	; (d512c <setup+0x370>)
   d4efc:	f7ff fa0a 	bl	d4314 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4f00:	498b      	ldr	r1, [pc, #556]	; (d5130 <setup+0x374>)
   d4f02:	488c      	ldr	r0, [pc, #560]	; (d5134 <setup+0x378>)
   d4f04:	f7ff fa06 	bl	d4314 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4f08:	498b      	ldr	r1, [pc, #556]	; (d5138 <setup+0x37c>)
   d4f0a:	488c      	ldr	r0, [pc, #560]	; (d513c <setup+0x380>)
   d4f0c:	f7ff fa02 	bl	d4314 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4f10:	498b      	ldr	r1, [pc, #556]	; (d5140 <setup+0x384>)
   d4f12:	488c      	ldr	r0, [pc, #560]	; (d5144 <setup+0x388>)
   d4f14:	f7ff f9fe 	bl	d4314 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4f18:	498b      	ldr	r1, [pc, #556]	; (d5148 <setup+0x38c>)
   d4f1a:	488c      	ldr	r0, [pc, #560]	; (d514c <setup+0x390>)
   d4f1c:	f7ff f9fa 	bl	d4314 <_ZN10CloudClass9_functionEPKcPFi6StringE>
  rtc.setup();                                                        // Start the real time clock
   d4f20:	488b      	ldr	r0, [pc, #556]	; (d5150 <setup+0x394>)
   d4f22:	f000 fe01 	bl	d5b28 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d4f26:	4631      	mov	r1, r6
   d4f28:	4889      	ldr	r0, [pc, #548]	; (d5150 <setup+0x394>)
   d4f2a:	f000 ff3a 	bl	d5da2 <_ZN8MCP7941010clearAlarmEi>
  fram.begin();                                                                             // Initialize the FRAM module
   d4f2e:	4889      	ldr	r0, [pc, #548]	; (d5154 <setup+0x398>)
   d4f30:	f000 fa96 	bl	d5460 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4f34:	2301      	movs	r3, #1
   d4f36:	4887      	ldr	r0, [pc, #540]	; (d5154 <setup+0x398>)
   d4f38:	aa06      	add	r2, sp, #24
   d4f3a:	4631      	mov	r1, r6
   d4f3c:	f000 fad2 	bl	d54e4 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                                                   // Check to see if the memory map in the sketch matches the data on the chip
   d4f40:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d4f44:	2b09      	cmp	r3, #9
   d4f46:	d060      	beq.n	d500a <setup+0x24e>
    fram.erase();                                                                           // Reset the FRAM to correct the issue
   d4f48:	4882      	ldr	r0, [pc, #520]	; (d5154 <setup+0x398>)
   d4f4a:	f000 fa93 	bl	d5474 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4f4e:	4a82      	ldr	r2, [pc, #520]	; (d5158 <setup+0x39c>)
   d4f50:	4880      	ldr	r0, [pc, #512]	; (d5154 <setup+0x398>)
   d4f52:	2304      	movs	r3, #4
   d4f54:	4631      	mov	r1, r6
   d4f56:	f000 fb10 	bl	d557a <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4f5a:	2301      	movs	r3, #1
   d4f5c:	487d      	ldr	r0, [pc, #500]	; (d5154 <setup+0x398>)
   d4f5e:	aa06      	add	r2, sp, #24
   d4f60:	4631      	mov	r1, r6
   d4f62:	f000 fabf 	bl	d54e4 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;                              // Device will not work without FRAM
   d4f66:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d4f6a:	2b09      	cmp	r3, #9
   d4f6c:	d04a      	beq.n	d5004 <setup+0x248>
   d4f6e:	2301      	movs	r3, #1
   d4f70:	7023      	strb	r3, [r4, #0]
  emon1.current(CT1_PIN,sensorConstants.sensorOneConstant);
   d4f72:	4e56      	ldr	r6, [pc, #344]	; (d50cc <setup+0x310>)
  checkSystemValues();                                                                      // Make sure System values are all in valid range
   d4f74:	f7ff fb46 	bl	d4604 <_Z17checkSystemValuesv>
  emon1.current(CT1_PIN,sensorConstants.sensorOneConstant);
   d4f78:	4b78      	ldr	r3, [pc, #480]	; (d515c <setup+0x3a0>)
   d4f7a:	4879      	ldr	r0, [pc, #484]	; (d5160 <setup+0x3a4>)
   d4f7c:	7819      	ldrb	r1, [r3, #0]
   d4f7e:	ed96 0b00 	vldr	d0, [r6]
   d4f82:	f000 f9cb 	bl	d531c <_ZN13EnergyMonitor7currentEjd>
  emon2.current(CT2_PIN,sensorConstants.sensorTwoConstant);
   d4f86:	4b77      	ldr	r3, [pc, #476]	; (d5164 <setup+0x3a8>)
   d4f88:	4877      	ldr	r0, [pc, #476]	; (d5168 <setup+0x3ac>)
   d4f8a:	7819      	ldrb	r1, [r3, #0]
   d4f8c:	ed96 0b02 	vldr	d0, [r6, #8]
   d4f90:	f000 f9c4 	bl	d531c <_ZN13EnergyMonitor7currentEjd>
  emon3.current(CT3_PIN,sensorConstants.sensorThreeConstant);
   d4f94:	4b75      	ldr	r3, [pc, #468]	; (d516c <setup+0x3b0>)
   d4f96:	4876      	ldr	r0, [pc, #472]	; (d5170 <setup+0x3b4>)
   d4f98:	7819      	ldrb	r1, [r3, #0]
   d4f9a:	ed96 0b04 	vldr	d0, [r6, #16]
   d4f9e:	f000 f9bd 	bl	d531c <_ZN13EnergyMonitor7currentEjd>
  emon4.current(CT4_PIN,sensorConstants.sensorFourConstant);
   d4fa2:	4b74      	ldr	r3, [pc, #464]	; (d5174 <setup+0x3b8>)
   d4fa4:	4874      	ldr	r0, [pc, #464]	; (d5178 <setup+0x3bc>)
   d4fa6:	7819      	ldrb	r1, [r3, #0]
   d4fa8:	ed96 0b06 	vldr	d0, [r6, #24]
   d4fac:	f000 f9b6 	bl	d531c <_ZN13EnergyMonitor7currentEjd>
  emon5.current(CT5_PIN,sensorConstants.sensorFiveConstant);
   d4fb0:	4b72      	ldr	r3, [pc, #456]	; (d517c <setup+0x3c0>)
   d4fb2:	4873      	ldr	r0, [pc, #460]	; (d5180 <setup+0x3c4>)
   d4fb4:	7819      	ldrb	r1, [r3, #0]
   d4fb6:	ed96 0b08 	vldr	d0, [r6, #32]
   d4fba:	f000 f9af 	bl	d531c <_ZN13EnergyMonitor7currentEjd>
  emon6.current(CT6_PIN,sensorConstants.sensorSixConstant);
   d4fbe:	4b71      	ldr	r3, [pc, #452]	; (d5184 <setup+0x3c8>)
   d4fc0:	4871      	ldr	r0, [pc, #452]	; (d5188 <setup+0x3cc>)
   d4fc2:	7819      	ldrb	r1, [r3, #0]
   d4fc4:	ed96 0b0a 	vldr	d0, [r6, #40]	; 0x28
   d4fc8:	f000 f9a8 	bl	d531c <_ZN13EnergyMonitor7currentEjd>
  if (sysStatus.thirdPartySim) {
   d4fcc:	786b      	ldrb	r3, [r5, #1]
   d4fce:	b38b      	cbz	r3, d5034 <setup+0x278>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4fd0:	2000      	movs	r0, #0
   d4fd2:	f001 fae5 	bl	d65a0 <hal_timer_millis>
   d4fd6:	f04f 0a00 	mov.w	sl, #0
   d4fda:	4606      	mov	r6, r0
   d4fdc:	2000      	movs	r0, #0
   d4fde:	f001 fadf 	bl	d65a0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4fe2:	ebb0 0806 	subs.w	r8, r0, r6
   d4fe6:	eb61 090a 	sbc.w	r9, r1, sl
        while (_while() && !_condition()) {
   d4fea:	2300      	movs	r3, #0
   d4fec:	f247 522f 	movw	r2, #29999	; 0x752f
   d4ff0:	454b      	cmp	r3, r9
   d4ff2:	bf08      	it	eq
   d4ff4:	4542      	cmpeq	r2, r8
   d4ff6:	d30f      	bcc.n	d5018 <setup+0x25c>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4ff8:	f001 fca8 	bl	d694c <spark_cloud_flag_connected>
   d4ffc:	b960      	cbnz	r0, d5018 <setup+0x25c>
            spark_process();
   d4ffe:	f001 fc9d 	bl	d693c <spark_process>
        while (_while() && !_condition()) {
   d5002:	e7eb      	b.n	d4fdc <setup+0x220>
      loadSystemDefaults();                                                                 // Out of the box, we need the device to be awake and connected
   d5004:	f7ff fad4 	bl	d45b0 <_Z18loadSystemDefaultsv>
   d5008:	e7b3      	b.n	d4f72 <setup+0x1b6>
   d500a:	2328      	movs	r3, #40	; 0x28
   d500c:	462a      	mov	r2, r5
   d500e:	2101      	movs	r1, #1
   d5010:	4850      	ldr	r0, [pc, #320]	; (d5154 <setup+0x398>)
   d5012:	f000 fa67 	bl	d54e4 <_ZN6MB85RC8readDataEjPhj>
        return t;
   d5016:	e7ac      	b.n	d4f72 <setup+0x1b6>
   d5018:	f001 fc98 	bl	d694c <spark_cloud_flag_connected>
    Particle.keepAlive(sysStatus.keepAlive);                                              // Set the keep alive value
   d501c:	6868      	ldr	r0, [r5, #4]
   d501e:	f7ff f97f 	bl	d4320 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d5022:	686b      	ldr	r3, [r5, #4]
   d5024:	4859      	ldr	r0, [pc, #356]	; (d518c <setup+0x3d0>)
   d5026:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d502a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d502e:	4359      	muls	r1, r3
   d5030:	f7ff f989 	bl	d4346 <_ZN5Timer12changePeriodEjj>
  takeMeasurements();                                                                       // For the benefit of monitoring the device
   d5034:	f7ff fd30 	bl	d4a98 <_Z16takeMeasurementsv>
  if(sysStatus.verboseMode) publishQueue.publish("Startup",StartupMessage,PRIVATE);                       // Let Particle know how the startup process went
   d5038:	7a6b      	ldrb	r3, [r5, #9]
   d503a:	b14b      	cbz	r3, d5050 <setup+0x294>
   d503c:	2300      	movs	r3, #0
   d503e:	f88d 3000 	strb.w	r3, [sp]
   d5042:	4b53      	ldr	r3, [pc, #332]	; (d5190 <setup+0x3d4>)
   d5044:	4953      	ldr	r1, [pc, #332]	; (d5194 <setup+0x3d8>)
   d5046:	781b      	ldrb	r3, [r3, #0]
   d5048:	4853      	ldr	r0, [pc, #332]	; (d5198 <setup+0x3dc>)
   d504a:	463a      	mov	r2, r7
   d504c:	f7ff f98c 	bl	d4368 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5050:	f001 fc7c 	bl	d694c <spark_cloud_flag_connected>
   d5054:	b910      	cbnz	r0, d505c <setup+0x2a0>
            spark_process();
   d5056:	f001 fc71 	bl	d693c <spark_process>
        while (_while() && !_condition()) {
   d505a:	e7f9      	b.n	d5050 <setup+0x294>
   d505c:	f001 fc76 	bl	d694c <spark_cloud_flag_connected>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;                                    // We made it throughgo let's go to idle
   d5060:	7823      	ldrb	r3, [r4, #0]
   d5062:	b90b      	cbnz	r3, d5068 <setup+0x2ac>
   d5064:	2302      	movs	r3, #2
   d5066:	7023      	strb	r3, [r4, #0]
   d5068:	2300      	movs	r3, #0
  publishQueue.publish("DEBUG- Startup",stateNames[state],PRIVATE);
   d506a:	7822      	ldrb	r2, [r4, #0]
   d506c:	494b      	ldr	r1, [pc, #300]	; (d519c <setup+0x3e0>)
   d506e:	f88d 3000 	strb.w	r3, [sp]
   d5072:	4b47      	ldr	r3, [pc, #284]	; (d5190 <setup+0x3d4>)
   d5074:	201a      	movs	r0, #26
   d5076:	fb00 1202 	mla	r2, r0, r2, r1
   d507a:	781b      	ldrb	r3, [r3, #0]
   d507c:	4948      	ldr	r1, [pc, #288]	; (d51a0 <setup+0x3e4>)
   d507e:	4846      	ldr	r0, [pc, #280]	; (d5198 <setup+0x3dc>)
   d5080:	f7ff f972 	bl	d4368 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d5084:	b01a      	add	sp, #104	; 0x68
   d5086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d508a:	bf00      	nop
   d508c:	000d40c9 	.word	0x000d40c9
   d5090:	000db2a4 	.word	0x000db2a4
   d5094:	2003e5cd 	.word	0x2003e5cd
   d5098:	2003e5d0 	.word	0x2003e5d0
   d509c:	000db14b 	.word	0x000db14b
   d50a0:	000d4385 	.word	0x000d4385
   d50a4:	000db2e4 	.word	0x000db2e4
   d50a8:	000db170 	.word	0x000db170
   d50ac:	2003e05a 	.word	0x2003e05a
   d50b0:	000db178 	.word	0x000db178
   d50b4:	2003e04a 	.word	0x2003e04a
   d50b8:	000db180 	.word	0x000db180
   d50bc:	2003e5d4 	.word	0x2003e5d4
   d50c0:	000db18f 	.word	0x000db18f
   d50c4:	2003e5d1 	.word	0x2003e5d1
   d50c8:	000dae98 	.word	0x000dae98
   d50cc:	2003dd58 	.word	0x2003dd58
   d50d0:	000db1bb 	.word	0x000db1bb
   d50d4:	2003dd60 	.word	0x2003dd60
   d50d8:	000db1cc 	.word	0x000db1cc
   d50dc:	2003dd68 	.word	0x2003dd68
   d50e0:	000db1dd 	.word	0x000db1dd
   d50e4:	2003dd70 	.word	0x2003dd70
   d50e8:	000db1f0 	.word	0x000db1f0
   d50ec:	2003dd78 	.word	0x2003dd78
   d50f0:	000db202 	.word	0x000db202
   d50f4:	2003dd80 	.word	0x2003dd80
   d50f8:	000db214 	.word	0x000db214
   d50fc:	000d40f1 	.word	0x000d40f1
   d5100:	000db19e 	.word	0x000db19e
   d5104:	000d4419 	.word	0x000d4419
   d5108:	000db1aa 	.word	0x000db1aa
   d510c:	000d4535 	.word	0x000d4535
   d5110:	000daed3 	.word	0x000daed3
   d5114:	000d4499 	.word	0x000d4499
   d5118:	000d48a1 	.word	0x000d48a1
   d511c:	000db1b7 	.word	0x000db1b7
   d5120:	000d48f5 	.word	0x000d48f5
   d5124:	000db1c8 	.word	0x000db1c8
   d5128:	000d4949 	.word	0x000d4949
   d512c:	000db1d9 	.word	0x000db1d9
   d5130:	000d499d 	.word	0x000d499d
   d5134:	000db1ec 	.word	0x000db1ec
   d5138:	000d49f1 	.word	0x000d49f1
   d513c:	000db1fe 	.word	0x000db1fe
   d5140:	000d4a45 	.word	0x000d4a45
   d5144:	000db210 	.word	0x000db210
   d5148:	000d410d 	.word	0x000d410d
   d514c:	000db221 	.word	0x000db221
   d5150:	2003e52c 	.word	0x2003e52c
   d5154:	2003e4c0 	.word	0x2003e4c0
   d5158:	000db2ec 	.word	0x000db2ec
   d515c:	2003dd50 	.word	0x2003dd50
   d5160:	2003e070 	.word	0x2003e070
   d5164:	2003dd51 	.word	0x2003dd51
   d5168:	2003e128 	.word	0x2003e128
   d516c:	2003dd52 	.word	0x2003dd52
   d5170:	2003e1e0 	.word	0x2003e1e0
   d5174:	2003dd53 	.word	0x2003dd53
   d5178:	2003e298 	.word	0x2003e298
   d517c:	2003dd54 	.word	0x2003dd54
   d5180:	2003e350 	.word	0x2003e350
   d5184:	2003dd55 	.word	0x2003dd55
   d5188:	2003e408 	.word	0x2003e408
   d518c:	2003e4d0 	.word	0x2003e4d0
   d5190:	2003e049 	.word	0x2003e049
   d5194:	000db0f6 	.word	0x000db0f6
   d5198:	2003e4f0 	.word	0x2003e4f0
   d519c:	2003dd88 	.word	0x2003dd88
   d51a0:	000db0ef 	.word	0x000db0ef

000d51a4 <_GLOBAL__sub_I_SystemMode>:

  void getBatteryCharge()
{
  voltage = analogRead(BATT) * 0.0011224;
  snprintf(batteryString, sizeof(batteryString), "%3.1f V", voltage);
}
   d51a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        val_(val) {
   d51a8:	4b44      	ldr	r3, [pc, #272]	; (d52bc <_GLOBAL__sub_I_SystemMode+0x118>)
              error_(SYSTEM_ERROR_NONE) {
   d51aa:	4d45      	ldr	r5, [pc, #276]	; (d52c0 <_GLOBAL__sub_I_SystemMode+0x11c>)
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d51ac:	4f45      	ldr	r7, [pc, #276]	; (d52c4 <_GLOBAL__sub_I_SystemMode+0x120>)
   d51ae:	2601      	movs	r6, #1
   d51b0:	701e      	strb	r6, [r3, #0]
   d51b2:	4b45      	ldr	r3, [pc, #276]	; (d52c8 <_GLOBAL__sub_I_SystemMode+0x124>)
   d51b4:	2202      	movs	r2, #2
   d51b6:	2400      	movs	r4, #0
   d51b8:	701a      	strb	r2, [r3, #0]
    SleepResult() {}
   d51ba:	4b44      	ldr	r3, [pc, #272]	; (d52cc <_GLOBAL__sub_I_SystemMode+0x128>)
   d51bc:	60ab      	str	r3, [r5, #8]
}
   d51be:	b088      	sub	sp, #32
              error_(SYSTEM_ERROR_NONE) {
   d51c0:	602c      	str	r4, [r5, #0]
   d51c2:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d51c4:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d51c6:	4630      	mov	r0, r6
   d51c8:	f001 fb52 	bl	d6870 <set_system_mode>
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d51cc:	463a      	mov	r2, r7
   d51ce:	4940      	ldr	r1, [pc, #256]	; (d52d0 <_GLOBAL__sub_I_SystemMode+0x12c>)
   d51d0:	4628      	mov	r0, r5
   d51d2:	f002 fff5 	bl	d81c0 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   d51d6:	4621      	mov	r1, r4
   d51d8:	4630      	mov	r0, r6
   d51da:	f001 fb59 	bl	d6890 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d51de:	4631      	mov	r1, r6
   d51e0:	2004      	movs	r0, #4
   d51e2:	f001 f9ad 	bl	d6540 <HAL_Feature_Set>
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   d51e6:	f002 ffc3 	bl	d8170 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d51ea:	4d3a      	ldr	r5, [pc, #232]	; (d52d4 <_GLOBAL__sub_I_SystemMode+0x130>)
   d51ec:	4601      	mov	r1, r0
   d51ee:	4623      	mov	r3, r4
   d51f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d51f4:	4628      	mov	r0, r5
   d51f6:	f000 f929 	bl	d544c <_ZN6MB85RCC1ER7TwoWireji>
   d51fa:	4b37      	ldr	r3, [pc, #220]	; (d52d8 <_GLOBAL__sub_I_SystemMode+0x134>)
   d51fc:	602b      	str	r3, [r5, #0]
   d51fe:	463a      	mov	r2, r7
   d5200:	4936      	ldr	r1, [pc, #216]	; (d52dc <_GLOBAL__sub_I_SystemMode+0x138>)
   d5202:	4628      	mov	r0, r5
   d5204:	f002 ffdc 	bl	d81c0 <__aeabi_atexit>
MCP79410 rtc;                                                                               // Rickkas MCP79410 libarary
   d5208:	f002 ffb2 	bl	d8170 <_Z19__fetch_global_Wirev>
   d520c:	4d34      	ldr	r5, [pc, #208]	; (d52e0 <_GLOBAL__sub_I_SystemMode+0x13c>)
   d520e:	4601      	mov	r1, r0
   d5210:	4628      	mov	r0, r5
   d5212:	f000 fb91 	bl	d5938 <_ZN8MCP79410C1ER7TwoWire>
   d5216:	4628      	mov	r0, r5
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d5218:	4d32      	ldr	r5, [pc, #200]	; (d52e4 <_GLOBAL__sub_I_SystemMode+0x140>)
   d521a:	4933      	ldr	r1, [pc, #204]	; (d52e8 <_GLOBAL__sub_I_SystemMode+0x144>)
   d521c:	463a      	mov	r2, r7
   d521e:	f002 ffcf 	bl	d81c0 <__aeabi_atexit>
   d5222:	4932      	ldr	r1, [pc, #200]	; (d52ec <_GLOBAL__sub_I_SystemMode+0x148>)
   d5224:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d5228:	4628      	mov	r0, r5
   d522a:	f000 fffb 	bl	d6224 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d522e:	4b30      	ldr	r3, [pc, #192]	; (d52f0 <_GLOBAL__sub_I_SystemMode+0x14c>)
   d5230:	602b      	str	r3, [r5, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d5232:	463a      	mov	r2, r7
   d5234:	492f      	ldr	r1, [pc, #188]	; (d52f4 <_GLOBAL__sub_I_SystemMode+0x150>)
   d5236:	4628      	mov	r0, r5
   d5238:	f002 ffc2 	bl	d81c0 <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d523c:	4b2e      	ldr	r3, [pc, #184]	; (d52f8 <_GLOBAL__sub_I_SystemMode+0x154>)
   d523e:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5240:	f10d 0810 	add.w	r8, sp, #16
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5244:	4d2d      	ldr	r5, [pc, #180]	; (d52fc <_GLOBAL__sub_I_SystemMode+0x158>)
   d5246:	4b2e      	ldr	r3, [pc, #184]	; (d5300 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d5248:	602b      	str	r3, [r5, #0]
   d524a:	e898 0003 	ldmia.w	r8, {r0, r1}
   d524e:	aa02      	add	r2, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d5250:	f105 030c 	add.w	r3, r5, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5254:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5258:	e893 0003 	ldmia.w	r3, {r0, r1}
   d525c:	e888 0003 	stmia.w	r8, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5260:	e892 0003 	ldmia.w	r2, {r0, r1}
   d5264:	e883 0003 	stmia.w	r3, {r0, r1}
   d5268:	4b26      	ldr	r3, [pc, #152]	; (d5304 <_GLOBAL__sub_I_SystemMode+0x160>)
   d526a:	616b      	str	r3, [r5, #20]
      __a = _GLIBCXX_MOVE(__b);
   d526c:	69ab      	ldr	r3, [r5, #24]
   d526e:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d5270:	4b25      	ldr	r3, [pc, #148]	; (d5308 <_GLOBAL__sub_I_SystemMode+0x164>)
   d5272:	61ab      	str	r3, [r5, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d5274:	4a25      	ldr	r2, [pc, #148]	; (d530c <_GLOBAL__sub_I_SystemMode+0x168>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5276:	712c      	strb	r4, [r5, #4]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d5278:	462b      	mov	r3, r5
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d527a:	60ac      	str	r4, [r5, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d527c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5280:	e9cd 4400 	strd	r4, r4, [sp]
   d5284:	f105 0008 	add.w	r0, r5, #8
      __a = _GLIBCXX_MOVE(__b);
   d5288:	9406      	str	r4, [sp, #24]
   d528a:	f001 f901 	bl	d6490 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d528e:	4640      	mov	r0, r8
   d5290:	f7ff f802 	bl	d4298 <_ZNSt14_Function_baseD1Ev>
Timer keepAliveTimer(1000, keepAliveMessage);
   d5294:	463a      	mov	r2, r7
   d5296:	491e      	ldr	r1, [pc, #120]	; (d5310 <_GLOBAL__sub_I_SystemMode+0x16c>)
   d5298:	4628      	mov	r0, r5
   d529a:	f002 ff91 	bl	d81c0 <__aeabi_atexit>
struct systemStatus_structure {                     
   d529e:	4b1d      	ldr	r3, [pc, #116]	; (d5314 <_GLOBAL__sub_I_SystemMode+0x170>)
   d52a0:	61de      	str	r6, [r3, #28]
   d52a2:	841c      	strh	r4, [r3, #32]
struct sensor_data_struct {                                                               // Here we define the structure for collecting and storing data from the sensors
   d52a4:	4b1c      	ldr	r3, [pc, #112]	; (d5318 <_GLOBAL__sub_I_SystemMode+0x174>)
   d52a6:	2200      	movs	r2, #0
   d52a8:	601a      	str	r2, [r3, #0]
   d52aa:	605a      	str	r2, [r3, #4]
   d52ac:	609a      	str	r2, [r3, #8]
   d52ae:	60da      	str	r2, [r3, #12]
   d52b0:	611a      	str	r2, [r3, #16]
   d52b2:	615a      	str	r2, [r3, #20]
}
   d52b4:	b008      	add	sp, #32
   d52b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d52ba:	bf00      	nop
   d52bc:	2003e049 	.word	0x2003e049
   d52c0:	2003e03c 	.word	0x2003e03c
   d52c4:	2003e038 	.word	0x2003e038
   d52c8:	2003e048 	.word	0x2003e048
   d52cc:	ffff0000 	.word	0xffff0000
   d52d0:	000d4237 	.word	0x000d4237
   d52d4:	2003e4c0 	.word	0x2003e4c0
   d52d8:	000db274 	.word	0x000db274
   d52dc:	000d41d5 	.word	0x000d41d5
   d52e0:	2003e52c 	.word	0x2003e52c
   d52e4:	2003e4f0 	.word	0x2003e4f0
   d52e8:	000d56c3 	.word	0x000d56c3
   d52ec:	2003f400 	.word	0x2003f400
   d52f0:	000db24c 	.word	0x000db24c
   d52f4:	000d41ad 	.word	0x000d41ad
   d52f8:	000d4249 	.word	0x000d4249
   d52fc:	2003e4d0 	.word	0x2003e4d0
   d5300:	000db238 	.word	0x000db238
   d5304:	000d40d9 	.word	0x000d40d9
   d5308:	000d40d5 	.word	0x000d40d5
   d530c:	000d41fd 	.word	0x000d41fd
   d5310:	000d42ad 	.word	0x000d42ad
   d5314:	2003e5d0 	.word	0x2003e5d0
   d5318:	2003e548 	.word	0x2003e548

000d531c <_ZN13EnergyMonitor7currentEjd>:

void EnergyMonitor::current(unsigned int _inPinI, double _ICAL)
{
   inPinI = _inPinI;
   ICAL = _ICAL;
   offsetI = ADC_COUNTS>>1;
   d531c:	4b03      	ldr	r3, [pc, #12]	; (d532c <_ZN13EnergyMonitor7currentEjd+0x10>)
   inPinI = _inPinI;
   d531e:	62c1      	str	r1, [r0, #44]	; 0x2c
   offsetI = ADC_COUNTS>>1;
   d5320:	2200      	movs	r2, #0
   ICAL = _ICAL;
   d5322:	ed80 0b0e 	vstr	d0, [r0, #56]	; 0x38
   offsetI = ADC_COUNTS>>1;
   d5326:	e9c0 231c 	strd	r2, r3, [r0, #112]	; 0x70
}
   d532a:	4770      	bx	lr
   d532c:	40a00000 	.word	0x40a00000

000d5330 <_ZN13EnergyMonitor8calcIrmsEj>:
//--------------------------------------------------------------------------------------       
}

//--------------------------------------------------------------------------------------
double EnergyMonitor::calcIrms(unsigned int Number_of_Samples)
{
   d5330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    sampleI = analogRead(inPinI);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset, 
  //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d5334:	f8df b0c8 	ldr.w	fp, [pc, #200]	; d5400 <_ZN13EnergyMonitor8calcIrmsEj+0xd0>
{
   d5338:	9101      	str	r1, [sp, #4]
   d533a:	4604      	mov	r4, r0
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d533c:	2500      	movs	r5, #0
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d533e:	f04f 0a00 	mov.w	sl, #0
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d5342:	9b01      	ldr	r3, [sp, #4]
   d5344:	429d      	cmp	r5, r3
   d5346:	d02f      	beq.n	d53a8 <_ZN13EnergyMonitor8calcIrmsEj+0x78>
    sampleI = analogRead(inPinI);
   d5348:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
   d534a:	f002 fee1 	bl	d8110 <analogRead>
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d534e:	e9d4 891c 	ldrd	r8, r9, [r4, #112]	; 0x70
    sampleI = analogRead(inPinI);
   d5352:	64e0      	str	r0, [r4, #76]	; 0x4c
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d5354:	f003 f9b8 	bl	d86c8 <__aeabi_i2d>
   d5358:	4642      	mov	r2, r8
   d535a:	464b      	mov	r3, r9
   d535c:	4606      	mov	r6, r0
   d535e:	460f      	mov	r7, r1
   d5360:	f003 f864 	bl	d842c <__aeabi_dsub>
   d5364:	4652      	mov	r2, sl
   d5366:	465b      	mov	r3, fp
   d5368:	f003 fa18 	bl	d879c <__aeabi_dmul>
   d536c:	4642      	mov	r2, r8
   d536e:	464b      	mov	r3, r9
   d5370:	f003 f85e 	bl	d8430 <__adddf3>
   d5374:	4602      	mov	r2, r0
   d5376:	460b      	mov	r3, r1
   d5378:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
  filteredI = sampleI - offsetI;
   d537c:	4630      	mov	r0, r6
   d537e:	4639      	mov	r1, r7
   d5380:	f003 f854 	bl	d842c <__aeabi_dsub>
   d5384:	4602      	mov	r2, r0
   d5386:	460b      	mov	r3, r1
   d5388:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d538c:	f003 fa06 	bl	d879c <__aeabi_dmul>
   d5390:	4602      	mov	r2, r0
   d5392:	460b      	mov	r3, r1
   d5394:	e9c4 2324 	strd	r2, r3, [r4, #144]	; 0x90
    // 2) sum 
    sumI += sqI;
   d5398:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
   d539c:	f003 f848 	bl	d8430 <__adddf3>
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d53a0:	3501      	adds	r5, #1
    sumI += sqI;
   d53a2:	e9c4 0126 	strd	r0, r1, [r4, #152]	; 0x98
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d53a6:	e7cc      	b.n	d5342 <_ZN13EnergyMonitor8calcIrmsEj+0x12>
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d53a8:	a313      	add	r3, pc, #76	; (adr r3, d53f8 <_ZN13EnergyMonitor8calcIrmsEj+0xc8>)
   d53aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d53ae:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
   d53b2:	f003 f9f3 	bl	d879c <__aeabi_dmul>
   d53b6:	4606      	mov	r6, r0
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d53b8:	4628      	mov	r0, r5
  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d53ba:	460f      	mov	r7, r1
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d53bc:	f003 f974 	bl	d86a8 <__aeabi_ui2d>
   d53c0:	4602      	mov	r2, r0
   d53c2:	460b      	mov	r3, r1
   d53c4:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
   d53c8:	f003 fb12 	bl	d89f0 <__aeabi_ddiv>
   d53cc:	ec41 0b10 	vmov	d0, r0, r1
   d53d0:	f002 ff04 	bl	d81dc <sqrt>
   d53d4:	4632      	mov	r2, r6
   d53d6:	463b      	mov	r3, r7
   d53d8:	ec51 0b10 	vmov	r0, r1, d0
   d53dc:	f003 f9de 	bl	d879c <__aeabi_dmul>
   d53e0:	ec41 0b10 	vmov	d0, r0, r1

  //Reset accumulators
  sumI = 0;
   d53e4:	2200      	movs	r2, #0
   d53e6:	2300      	movs	r3, #0
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d53e8:	e9c4 0108 	strd	r0, r1, [r4, #32]
  sumI = 0;
   d53ec:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
//--------------------------------------------------------------------------------------             
 
  return Irms;
}
   d53f0:	b003      	add	sp, #12
   d53f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d53f6:	bf00      	nop
   d53f8:	66666666 	.word	0x66666666
   d53fc:	3f4a6666 	.word	0x3f4a6666
   d5400:	3f500000 	.word	0x3f500000

000d5404 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d5404:	4770      	bx	lr

000d5406 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d5406:	b510      	push	{r4, lr}
}
   d5408:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d540a:	4604      	mov	r4, r0
}
   d540c:	f002 fedd 	bl	d81ca <_ZdlPvj>
   d5410:	4620      	mov	r0, r4
   d5412:	bd10      	pop	{r4, pc}

000d5414 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d5414:	6803      	ldr	r3, [r0, #0]
   d5416:	b2c9      	uxtb	r1, r1
   d5418:	689b      	ldr	r3, [r3, #8]
   d541a:	4718      	bx	r3

000d541c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d541c:	b40e      	push	{r1, r2, r3}
   d541e:	b510      	push	{r4, lr}
   d5420:	b08d      	sub	sp, #52	; 0x34
   d5422:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d5424:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d5426:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d542a:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d542c:	2300      	movs	r3, #0
   d542e:	2020      	movs	r0, #32
   d5430:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5434:	e9cd 4200 	strd	r4, r2, [sp]
   d5438:	201e      	movs	r0, #30
   d543a:	aa04      	add	r2, sp, #16
   d543c:	f001 fa08 	bl	d6850 <log_message_v>
}
   d5440:	b00d      	add	sp, #52	; 0x34
   d5442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5446:	b003      	add	sp, #12
   d5448:	4770      	bx	lr
	...

000d544c <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d544c:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d544e:	4d03      	ldr	r5, [pc, #12]	; (d545c <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d5450:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d5454:	e9c0 5100 	strd	r5, r1, [r0]
}
   d5458:	bd30      	pop	{r4, r5, pc}
   d545a:	bf00      	nop
   d545c:	000db324 	.word	0x000db324

000d5460 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d5460:	6840      	ldr	r0, [r0, #4]
   d5462:	f001 bf1b 	b.w	d729c <_ZN7TwoWire5beginEv>

000d5466 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5466:	b510      	push	{r4, lr}
   d5468:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d546a:	6800      	ldr	r0, [r0, #0]
   d546c:	f001 ff59 	bl	d7322 <_ZN7TwoWire6unlockEv>
   d5470:	4620      	mov	r0, r4
   d5472:	bd10      	pop	{r4, pc}

000d5474 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d5474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5478:	b08a      	sub	sp, #40	; 0x28
   d547a:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d547c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d547e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5480:	f001 ff46 	bl	d7310 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5484:	221e      	movs	r2, #30
   d5486:	2100      	movs	r1, #0
   d5488:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d548a:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d548c:	f003 fd3a 	bl	d8f04 <memset>
		size_t framAddr = 0;
   d5490:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d5492:	b1ef      	cbz	r7, d54d0 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d5494:	6823      	ldr	r3, [r4, #0]
   d5496:	2f1e      	cmp	r7, #30
   d5498:	46b8      	mov	r8, r7
   d549a:	bf28      	it	cs
   d549c:	f04f 081e 	movcs.w	r8, #30
   d54a0:	68dd      	ldr	r5, [r3, #12]
   d54a2:	aa02      	add	r2, sp, #8
   d54a4:	4643      	mov	r3, r8
   d54a6:	4631      	mov	r1, r6
   d54a8:	4620      	mov	r0, r4
   d54aa:	47a8      	blx	r5
			if (!result) {
   d54ac:	4605      	mov	r5, r0
   d54ae:	b958      	cbnz	r0, d54c8 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d54b0:	480a      	ldr	r0, [pc, #40]	; (d54dc <_ZN6MB85RC5eraseEv+0x68>)
   d54b2:	490b      	ldr	r1, [pc, #44]	; (d54e0 <_ZN6MB85RC5eraseEv+0x6c>)
   d54b4:	4632      	mov	r2, r6
   d54b6:	f7ff ffb1 	bl	d541c <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d54ba:	a801      	add	r0, sp, #4
   d54bc:	f7ff ffd3 	bl	d5466 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d54c0:	4628      	mov	r0, r5
   d54c2:	b00a      	add	sp, #40	; 0x28
   d54c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d54c8:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d54cc:	4446      	add	r6, r8
		while(totalLen > 0) {
   d54ce:	e7e0      	b.n	d5492 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d54d0:	a801      	add	r0, sp, #4
   d54d2:	f7ff ffc8 	bl	d5466 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d54d6:	2501      	movs	r5, #1
   d54d8:	e7f2      	b.n	d54c0 <_ZN6MB85RC5eraseEv+0x4c>
   d54da:	bf00      	nop
   d54dc:	2003e614 	.word	0x2003e614
   d54e0:	000db2f0 	.word	0x000db2f0

000d54e4 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d54e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d54e8:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d54ea:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d54ec:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d54ee:	460d      	mov	r5, r1
   d54f0:	4616      	mov	r6, r2
   d54f2:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d54f4:	f001 ff0c 	bl	d7310 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d54f8:	b1a7      	cbz	r7, d5524 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d54fa:	68e1      	ldr	r1, [r4, #12]
   d54fc:	6860      	ldr	r0, [r4, #4]
   d54fe:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5502:	f001 fefe 	bl	d7302 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5506:	0a29      	lsrs	r1, r5, #8
   d5508:	6860      	ldr	r0, [r4, #4]
   d550a:	f7ff ff83 	bl	d5414 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d550e:	4629      	mov	r1, r5
   d5510:	6860      	ldr	r0, [r4, #4]
   d5512:	f7ff ff7f 	bl	d5414 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d5516:	6860      	ldr	r0, [r4, #4]
   d5518:	2100      	movs	r1, #0
   d551a:	f001 fef5 	bl	d7308 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d551e:	b148      	cbz	r0, d5534 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d5520:	2400      	movs	r4, #0
   d5522:	e000      	b.n	d5526 <_ZN6MB85RC8readDataEjPhj+0x42>
   d5524:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5526:	a801      	add	r0, sp, #4
   d5528:	f7ff ff9d 	bl	d5466 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d552c:	4620      	mov	r0, r4
   d552e:	b003      	add	sp, #12
   d5530:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d5534:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d5536:	7b21      	ldrb	r1, [r4, #12]
   d5538:	6860      	ldr	r0, [r4, #4]
   d553a:	46b8      	mov	r8, r7
   d553c:	bf28      	it	cs
   d553e:	f04f 0820 	movcs.w	r8, #32
   d5542:	2301      	movs	r3, #1
   d5544:	4642      	mov	r2, r8
   d5546:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d554a:	f001 fec4 	bl	d72d6 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d554e:	f002 fe0f 	bl	d8170 <_Z19__fetch_global_Wirev>
   d5552:	6803      	ldr	r3, [r0, #0]
   d5554:	691b      	ldr	r3, [r3, #16]
   d5556:	4798      	blx	r3
   d5558:	4540      	cmp	r0, r8
   d555a:	dbe1      	blt.n	d5520 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d555c:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d5560:	f002 fe06 	bl	d8170 <_Z19__fetch_global_Wirev>
   d5564:	6803      	ldr	r3, [r0, #0]
   d5566:	695b      	ldr	r3, [r3, #20]
   d5568:	4798      	blx	r3
   d556a:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d556e:	454e      	cmp	r6, r9
   d5570:	d1f6      	bne.n	d5560 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d5572:	4445      	add	r5, r8
   d5574:	eba7 0708 	sub.w	r7, r7, r8
   d5578:	e7be      	b.n	d54f8 <_ZN6MB85RC8readDataEjPhj+0x14>

000d557a <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d557a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d557e:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5580:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5582:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5584:	460e      	mov	r6, r1
   d5586:	4690      	mov	r8, r2
   d5588:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d558a:	f001 fec1 	bl	d7310 <_ZN7TwoWire4lockEv>
   d558e:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d5592:	f1b9 0f00 	cmp.w	r9, #0
   d5596:	d02a      	beq.n	d55ee <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d5598:	b34d      	cbz	r5, d55ee <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d559a:	68e1      	ldr	r1, [r4, #12]
   d559c:	6860      	ldr	r0, [r4, #4]
   d559e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d55a2:	f001 feae 	bl	d7302 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d55a6:	0a31      	lsrs	r1, r6, #8
   d55a8:	6860      	ldr	r0, [r4, #4]
   d55aa:	f7ff ff33 	bl	d5414 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d55ae:	6860      	ldr	r0, [r4, #4]
   d55b0:	4631      	mov	r1, r6
   d55b2:	f7ff ff2f 	bl	d5414 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d55b6:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d55ba:	4647      	mov	r7, r8
   d55bc:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d55c0:	6860      	ldr	r0, [r4, #4]
   d55c2:	f817 1b01 	ldrb.w	r1, [r7], #1
   d55c6:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d55c8:	3d01      	subs	r5, #1
				wire.write(*data);
   d55ca:	689b      	ldr	r3, [r3, #8]
   d55cc:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d55ce:	4555      	cmp	r5, sl
   d55d0:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d55d4:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d55d6:	d001      	beq.n	d55dc <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d55d8:	2d00      	cmp	r5, #0
   d55da:	d1f1      	bne.n	d55c0 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d55dc:	6860      	ldr	r0, [r4, #4]
   d55de:	2101      	movs	r1, #1
   d55e0:	f001 fe92 	bl	d7308 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d55e4:	2800      	cmp	r0, #0
   d55e6:	d0d7      	beq.n	d5598 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d55e8:	f04f 0900 	mov.w	r9, #0
   d55ec:	e7d1      	b.n	d5592 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d55ee:	a801      	add	r0, sp, #4
   d55f0:	f7ff ff39 	bl	d5466 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d55f4:	4648      	mov	r0, r9
   d55f6:	b003      	add	sp, #12
   d55f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d55fc <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d55fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5600:	b08b      	sub	sp, #44	; 0x2c
   d5602:	460e      	mov	r6, r1
   d5604:	4615      	mov	r5, r2
   d5606:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5608:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d560a:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d560c:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d560e:	f001 fe7f 	bl	d7310 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d5612:	42ae      	cmp	r6, r5
   d5614:	d229      	bcs.n	d566a <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d5616:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d5618:	4425      	add	r5, r4
			while(numBytes > 0) {
   d561a:	b18c      	cbz	r4, d5640 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d561c:	2c1e      	cmp	r4, #30
   d561e:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5620:	f8d8 3000 	ldr.w	r3, [r8]
   d5624:	bf28      	it	cs
   d5626:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d5628:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d562a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d562e:	aa02      	add	r2, sp, #8
   d5630:	463b      	mov	r3, r7
   d5632:	4631      	mov	r1, r6
   d5634:	4640      	mov	r0, r8
				framAddrTo -= count;
   d5636:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d5638:	47c8      	blx	r9
				if (!result) {
   d563a:	b948      	cbnz	r0, d5650 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d563c:	2400      	movs	r4, #0
   d563e:	e000      	b.n	d5642 <_ZN6MB85RC8moveDataEjjj+0x46>
   d5640:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5642:	a801      	add	r0, sp, #4
   d5644:	f7ff ff0f 	bl	d5466 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d5648:	4620      	mov	r0, r4
   d564a:	b00b      	add	sp, #44	; 0x2c
   d564c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d5650:	f8d8 3000 	ldr.w	r3, [r8]
   d5654:	aa02      	add	r2, sp, #8
   d5656:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d565a:	4629      	mov	r1, r5
   d565c:	463b      	mov	r3, r7
   d565e:	4640      	mov	r0, r8
   d5660:	47c8      	blx	r9
				if (!result) {
   d5662:	2800      	cmp	r0, #0
   d5664:	d0ea      	beq.n	d563c <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d5666:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d5668:	e7d7      	b.n	d561a <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d566a:	d9e9      	bls.n	d5640 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d566c:	2c00      	cmp	r4, #0
   d566e:	d0e7      	beq.n	d5640 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d5670:	f8d8 3000 	ldr.w	r3, [r8]
   d5674:	2c1e      	cmp	r4, #30
   d5676:	4627      	mov	r7, r4
   d5678:	bf28      	it	cs
   d567a:	271e      	movcs	r7, #30
   d567c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5680:	aa02      	add	r2, sp, #8
   d5682:	463b      	mov	r3, r7
   d5684:	4631      	mov	r1, r6
   d5686:	4640      	mov	r0, r8
   d5688:	47c8      	blx	r9
				if (!result) {
   d568a:	2800      	cmp	r0, #0
   d568c:	d0d6      	beq.n	d563c <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d568e:	f8d8 3000 	ldr.w	r3, [r8]
   d5692:	aa02      	add	r2, sp, #8
   d5694:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5698:	4629      	mov	r1, r5
   d569a:	463b      	mov	r3, r7
   d569c:	4640      	mov	r0, r8
   d569e:	47c8      	blx	r9
				if (!result) {
   d56a0:	2800      	cmp	r0, #0
   d56a2:	d0cb      	beq.n	d563c <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d56a4:	443e      	add	r6, r7
				framAddrTo += count;
   d56a6:	443d      	add	r5, r7
				numBytes -= count;
   d56a8:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d56aa:	e7df      	b.n	d566c <_ZN6MB85RC8moveDataEjjj+0x70>

000d56ac <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d56ac:	2040      	movs	r0, #64	; 0x40
   d56ae:	4770      	bx	lr

000d56b0 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d56b0:	2000      	movs	r0, #0
   d56b2:	4770      	bx	lr

000d56b4 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d56b4:	2080      	movs	r0, #128	; 0x80
   d56b6:	4770      	bx	lr

000d56b8 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d56b8:	20ff      	movs	r0, #255	; 0xff
   d56ba:	4770      	bx	lr

000d56bc <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d56bc:	4770      	bx	lr

000d56be <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d56be:	4770      	bx	lr

000d56c0 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d56c0:	4770      	bx	lr

000d56c2 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d56c2:	4770      	bx	lr

000d56c4 <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d56c4:	b510      	push	{r4, lr}
}
   d56c6:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d56c8:	4604      	mov	r4, r0
}
   d56ca:	f002 fd7e 	bl	d81ca <_ZdlPvj>
   d56ce:	4620      	mov	r0, r4
   d56d0:	bd10      	pop	{r4, pc}

000d56d2 <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d56d2:	b510      	push	{r4, lr}
}
   d56d4:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d56d6:	4604      	mov	r4, r0
}
   d56d8:	f002 fd77 	bl	d81ca <_ZdlPvj>
   d56dc:	4620      	mov	r0, r4
   d56de:	bd10      	pop	{r4, pc}

000d56e0 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d56e0:	b510      	push	{r4, lr}
}
   d56e2:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d56e4:	4604      	mov	r4, r0
}
   d56e6:	f002 fd70 	bl	d81ca <_ZdlPvj>
   d56ea:	4620      	mov	r0, r4
   d56ec:	bd10      	pop	{r4, pc}

000d56ee <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d56ee:	b510      	push	{r4, lr}
}
   d56f0:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d56f2:	4604      	mov	r4, r0
}
   d56f4:	f002 fd69 	bl	d81ca <_ZdlPvj>
   d56f8:	4620      	mov	r0, r4
   d56fa:	bd10      	pop	{r4, pc}

000d56fc <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d56fc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d5700:	6803      	ldr	r3, [r0, #0]
   d5702:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d5704:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d5706:	4798      	blx	r3
   d5708:	2210      	movs	r2, #16
   d570a:	4601      	mov	r1, r0
   d570c:	4668      	mov	r0, sp
   d570e:	f003 fbf9 	bl	d8f04 <memset>
	size_t len = length();
   d5712:	6823      	ldr	r3, [r4, #0]
   d5714:	4620      	mov	r0, r4
   d5716:	689b      	ldr	r3, [r3, #8]
   d5718:	4798      	blx	r3
	size_t offset = 0;
   d571a:	2500      	movs	r5, #0
	size_t len = length();
   d571c:	4607      	mov	r7, r0
	bool bResult = false;
   d571e:	4628      	mov	r0, r5
	while(offset < len) {
   d5720:	42bd      	cmp	r5, r7
   d5722:	d20e      	bcs.n	d5742 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d5724:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d5726:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d5728:	2e10      	cmp	r6, #16
   d572a:	bf28      	it	cs
   d572c:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d572e:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d5732:	466a      	mov	r2, sp
   d5734:	4633      	mov	r3, r6
   d5736:	4629      	mov	r1, r5
   d5738:	4620      	mov	r0, r4
   d573a:	47c0      	blx	r8
		if (!bResult) {
   d573c:	b108      	cbz	r0, d5742 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d573e:	4435      	add	r5, r6
	while(offset < len) {
   d5740:	e7ee      	b.n	d5720 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d5742:	b004      	add	sp, #16
   d5744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5748 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d5748:	f44f 7380 	mov.w	r3, #256	; 0x100
   d574c:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d574e:	f240 1301 	movw	r3, #257	; 0x101
   d5752:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d5754:	2300      	movs	r3, #0
   d5756:	8203      	strh	r3, [r0, #16]
}
   d5758:	4770      	bx	lr
	...

000d575c <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d575c:	b508      	push	{r3, lr}
   d575e:	4b06      	ldr	r3, [pc, #24]	; (d5778 <_ZN12MCP79410TimeC1Ev+0x1c>)
   d5760:	6003      	str	r3, [r0, #0]
   d5762:	4b06      	ldr	r3, [pc, #24]	; (d577c <_ZN12MCP79410TimeC1Ev+0x20>)
   d5764:	6043      	str	r3, [r0, #4]
   d5766:	f240 7304 	movw	r3, #1796	; 0x704
   d576a:	8103      	strh	r3, [r0, #8]
   d576c:	2300      	movs	r3, #0
   d576e:	7443      	strb	r3, [r0, #17]
	clear();
   d5770:	f7ff ffea 	bl	d5748 <_ZN12MCP79410Time5clearEv>
}
   d5774:	bd08      	pop	{r3, pc}
   d5776:	bf00      	nop
   d5778:	000db404 	.word	0x000db404
   d577c:	03020100 	.word	0x03020100

000d5780 <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5780:	0903      	lsrs	r3, r0, #4
}
   d5782:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5784:	f000 000f 	and.w	r0, r0, #15
}
   d5788:	fb02 0003 	mla	r0, r2, r3, r0
   d578c:	4770      	bx	lr

000d578e <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d578e:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d5790:	7a80      	ldrb	r0, [r0, #10]
   d5792:	f7ff fff5 	bl	d5780 <_ZN12MCP79410Time8bcdToIntEh>
}
   d5796:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d579a:	bd08      	pop	{r3, pc}

000d579c <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d579c:	7ac0      	ldrb	r0, [r0, #11]
   d579e:	f000 001f 	and.w	r0, r0, #31
   d57a2:	f7ff bfed 	b.w	d5780 <_ZN12MCP79410Time8bcdToIntEh>

000d57a6 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d57a6:	7b00      	ldrb	r0, [r0, #12]
   d57a8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d57ac:	f7ff bfe8 	b.w	d5780 <_ZN12MCP79410Time8bcdToIntEh>

000d57b0 <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d57b0:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d57b2:	7b81      	ldrb	r1, [r0, #14]
   d57b4:	064a      	lsls	r2, r1, #25
   d57b6:	d50d      	bpl.n	d57d4 <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d57b8:	f001 001f 	and.w	r0, r1, #31
   d57bc:	f7ff ffe0 	bl	d5780 <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d57c0:	068b      	lsls	r3, r1, #26
   d57c2:	d503      	bpl.n	d57cc <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d57c4:	280c      	cmp	r0, #12
   d57c6:	d000      	beq.n	d57ca <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d57c8:	300c      	adds	r0, #12
}
   d57ca:	bd08      	pop	{r3, pc}
				return 0;
   d57cc:	280c      	cmp	r0, #12
   d57ce:	bf08      	it	eq
   d57d0:	2000      	moveq	r0, #0
   d57d2:	e7fa      	b.n	d57ca <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d57d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d57d8:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d57dc:	f7ff bfd0 	b.w	d5780 <_ZN12MCP79410Time8bcdToIntEh>

000d57e0 <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d57e0:	7bc0      	ldrb	r0, [r0, #15]
   d57e2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d57e6:	f7ff bfcb 	b.w	d5780 <_ZN12MCP79410Time8bcdToIntEh>

000d57ea <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d57ea:	7c00      	ldrb	r0, [r0, #16]
   d57ec:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d57f0:	f7ff bfc6 	b.w	d5780 <_ZN12MCP79410Time8bcdToIntEh>

000d57f4 <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d57f4:	b510      	push	{r4, lr}
   d57f6:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d57f8:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d57fa:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d57fc:	2100      	movs	r1, #0
   d57fe:	a801      	add	r0, sp, #4
   d5800:	f003 fb80 	bl	d8f04 <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d5804:	4620      	mov	r0, r4
   d5806:	f7ff ffc2 	bl	d578e <_ZNK12MCP79410Time7getYearEv>
   d580a:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d580e:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d5810:	4620      	mov	r0, r4
   d5812:	f7ff ffc3 	bl	d579c <_ZNK12MCP79410Time8getMonthEv>
   d5816:	3801      	subs	r0, #1
   d5818:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d581a:	4620      	mov	r0, r4
   d581c:	f7ff ffc3 	bl	d57a6 <_ZNK12MCP79410Time13getDayOfMonthEv>
   d5820:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d5822:	4620      	mov	r0, r4
   d5824:	f7ff ffc4 	bl	d57b0 <_ZNK12MCP79410Time7getHourEv>
   d5828:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d582a:	4620      	mov	r0, r4
   d582c:	f7ff ffd8 	bl	d57e0 <_ZNK12MCP79410Time9getMinuteEv>
   d5830:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d5832:	4620      	mov	r0, r4
   d5834:	f7ff ffd9 	bl	d57ea <_ZNK12MCP79410Time9getSecondEv>
   d5838:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d583a:	a801      	add	r0, sp, #4
   d583c:	f001 f97e 	bl	d6b3c <mktime>
}
   d5840:	b00a      	add	sp, #40	; 0x28
   d5842:	bd10      	pop	{r4, pc}

000d5844 <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d5844:	210a      	movs	r1, #10
   d5846:	fb90 f2f1 	sdiv	r2, r0, r1
   d584a:	fb92 f3f1 	sdiv	r3, r2, r1
   d584e:	fb01 2313 	mls	r3, r1, r3, r2
   d5852:	011b      	lsls	r3, r3, #4
   d5854:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d5856:	fb01 0012 	mls	r0, r1, r2, r0
   d585a:	4318      	orrs	r0, r3
}
   d585c:	b2c0      	uxtb	r0, r0
   d585e:	4770      	bx	lr

000d5860 <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d5860:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d5862:	b510      	push	{r4, lr}
   d5864:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d5866:	fb91 f0f3 	sdiv	r0, r1, r3
   d586a:	fb00 1013 	mls	r0, r0, r3, r1
   d586e:	f7ff ffe9 	bl	d5844 <_ZN12MCP79410Time8intToBcdEi>
   d5872:	72a0      	strb	r0, [r4, #10]
}
   d5874:	bd10      	pop	{r4, pc}

000d5876 <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d5876:	b510      	push	{r4, lr}
   d5878:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d587a:	4608      	mov	r0, r1
   d587c:	f7ff ffe2 	bl	d5844 <_ZN12MCP79410Time8intToBcdEi>
   d5880:	72e0      	strb	r0, [r4, #11]
}
   d5882:	bd10      	pop	{r4, pc}

000d5884 <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d5884:	b510      	push	{r4, lr}
   d5886:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d5888:	4608      	mov	r0, r1
   d588a:	f7ff ffdb 	bl	d5844 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d588e:	7b23      	ldrb	r3, [r4, #12]
   d5890:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d5894:	4318      	orrs	r0, r3
   d5896:	7320      	strb	r0, [r4, #12]
}
   d5898:	bd10      	pop	{r4, pc}

000d589a <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d589a:	b510      	push	{r4, lr}
   d589c:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d589e:	1c48      	adds	r0, r1, #1
   d58a0:	f7ff ffd0 	bl	d5844 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d58a4:	7b63      	ldrb	r3, [r4, #13]
   d58a6:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d58aa:	4318      	orrs	r0, r3
   d58ac:	7360      	strb	r0, [r4, #13]
}
   d58ae:	bd10      	pop	{r4, pc}

000d58b0 <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d58b0:	b510      	push	{r4, lr}
   d58b2:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d58b4:	4608      	mov	r0, r1
   d58b6:	f7ff ffc5 	bl	d5844 <_ZN12MCP79410Time8intToBcdEi>
   d58ba:	73a0      	strb	r0, [r4, #14]
}
   d58bc:	bd10      	pop	{r4, pc}

000d58be <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d58be:	b510      	push	{r4, lr}
   d58c0:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d58c2:	4608      	mov	r0, r1
   d58c4:	f7ff ffbe 	bl	d5844 <_ZN12MCP79410Time8intToBcdEi>
   d58c8:	73e0      	strb	r0, [r4, #15]
}
   d58ca:	bd10      	pop	{r4, pc}

000d58cc <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d58cc:	b510      	push	{r4, lr}
   d58ce:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d58d0:	4608      	mov	r0, r1
   d58d2:	f7ff ffb7 	bl	d5844 <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d58d6:	7c23      	ldrb	r3, [r4, #16]
   d58d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d58dc:	4318      	orrs	r0, r3
   d58de:	7420      	strb	r0, [r4, #16]
}
   d58e0:	bd10      	pop	{r4, pc}

000d58e2 <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d58e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d58e4:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d58e6:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d58e8:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d58ec:	f003 fad0 	bl	d8e90 <gmtime>
   d58f0:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d58f2:	6941      	ldr	r1, [r0, #20]
   d58f4:	4620      	mov	r0, r4
   d58f6:	f7ff ffb3 	bl	d5860 <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d58fa:	6929      	ldr	r1, [r5, #16]
   d58fc:	4620      	mov	r0, r4
   d58fe:	3101      	adds	r1, #1
   d5900:	f7ff ffb9 	bl	d5876 <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d5904:	68e9      	ldr	r1, [r5, #12]
   d5906:	4620      	mov	r0, r4
   d5908:	f7ff ffbc 	bl	d5884 <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d590c:	69a9      	ldr	r1, [r5, #24]
   d590e:	4620      	mov	r0, r4
   d5910:	f7ff ffc3 	bl	d589a <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d5914:	68a9      	ldr	r1, [r5, #8]
   d5916:	4620      	mov	r0, r4
   d5918:	f7ff ffca 	bl	d58b0 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d591c:	6869      	ldr	r1, [r5, #4]
   d591e:	4620      	mov	r0, r4
   d5920:	f7ff ffcd 	bl	d58be <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d5924:	6829      	ldr	r1, [r5, #0]
   d5926:	293b      	cmp	r1, #59	; 0x3b
   d5928:	bfa8      	it	ge
   d592a:	213b      	movge	r1, #59	; 0x3b
   d592c:	4620      	mov	r0, r4
   d592e:	f7ff ffcd 	bl	d58cc <_ZN12MCP79410Time9setSecondEi>
}
   d5932:	b003      	add	sp, #12
   d5934:	bd30      	pop	{r4, r5, pc}
	...

000d5938 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5938:	4a05      	ldr	r2, [pc, #20]	; (d5950 <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d593a:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d593c:	e9c0 2100 	strd	r2, r1, [r0]
   d5940:	4a04      	ldr	r2, [pc, #16]	; (d5954 <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d5942:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5944:	4a04      	ldr	r2, [pc, #16]	; (d5958 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d5946:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5948:	4a04      	ldr	r2, [pc, #16]	; (d595c <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d594a:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d594c:	6142      	str	r2, [r0, #20]
}
   d594e:	4770      	bx	lr
   d5950:	000db438 	.word	0x000db438
   d5954:	03010000 	.word	0x03010000
   d5958:	000db3e0 	.word	0x000db3e0
   d595c:	000db414 	.word	0x000db414

000d5960 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d5960:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5964:	4604      	mov	r4, r0
   d5966:	460f      	mov	r7, r1
   d5968:	4690      	mov	r8, r2
   d596a:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d596c:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d596e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5970:	429e      	cmp	r6, r3
   d5972:	d231      	bcs.n	d59d8 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d5974:	6860      	ldr	r0, [r4, #4]
   d5976:	4639      	mov	r1, r7
   d5978:	f001 fcbf 	bl	d72fa <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d597c:	eb08 0106 	add.w	r1, r8, r6
   d5980:	6860      	ldr	r0, [r4, #4]
   d5982:	f7ff fd47 	bl	d5414 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d5986:	6860      	ldr	r0, [r4, #4]
   d5988:	2100      	movs	r1, #0
   d598a:	f001 fcbd 	bl	d7308 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d598e:	4605      	mov	r5, r0
   d5990:	b9d0      	cbnz	r0, d59c8 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d5992:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d5994:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d5996:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d5998:	2a20      	cmp	r2, #32
   d599a:	f04f 0301 	mov.w	r3, #1
   d599e:	bf28      	it	cs
   d59a0:	2220      	movcs	r2, #32
   d59a2:	4639      	mov	r1, r7
   d59a4:	f001 fc97 	bl	d72d6 <_ZN7TwoWire11requestFromEhjh>
   d59a8:	eb09 0b06 	add.w	fp, r9, r6
   d59ac:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d59ae:	eb0b 0a00 	add.w	sl, fp, r0
   d59b2:	45da      	cmp	sl, fp
   d59b4:	d006      	beq.n	d59c4 <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d59b6:	6860      	ldr	r0, [r4, #4]
   d59b8:	6803      	ldr	r3, [r0, #0]
   d59ba:	695b      	ldr	r3, [r3, #20]
   d59bc:	4798      	blx	r3
   d59be:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d59c2:	e7f6      	b.n	d59b2 <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d59c4:	442e      	add	r6, r5
	while(offset < bufLen) {
   d59c6:	e7d2      	b.n	d596e <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d59c8:	4602      	mov	r2, r0
   d59ca:	4904      	ldr	r1, [pc, #16]	; (d59dc <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d59cc:	4804      	ldr	r0, [pc, #16]	; (d59e0 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d59ce:	f7ff fd25 	bl	d541c <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d59d2:	4628      	mov	r0, r5
   d59d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d59d8:	2500      	movs	r5, #0
	return stat;
   d59da:	e7fa      	b.n	d59d2 <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d59dc:	000db338 	.word	0x000db338
   d59e0:	2003e600 	.word	0x2003e600

000d59e4 <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d59e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d59e8:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d59ec:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d59ee:	6803      	ldr	r3, [r0, #0]
   d59f0:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d59f2:	4605      	mov	r5, r0
   d59f4:	460c      	mov	r4, r1
   d59f6:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d59f8:	4798      	blx	r3
   d59fa:	4580      	cmp	r8, r0
   d59fc:	d80d      	bhi.n	d5a1a <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d59fe:	3420      	adds	r4, #32
   d5a00:	6868      	ldr	r0, [r5, #4]
   d5a02:	9600      	str	r6, [sp, #0]
   d5a04:	463b      	mov	r3, r7
   d5a06:	b2e2      	uxtb	r2, r4
   d5a08:	216f      	movs	r1, #111	; 0x6f
   d5a0a:	f7ff ffa9 	bl	d5960 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d5a0e:	fab0 f080 	clz	r0, r0
   d5a12:	0940      	lsrs	r0, r0, #5
}
   d5a14:	b002      	add	sp, #8
   d5a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d5a1a:	2000      	movs	r0, #0
   d5a1c:	e7fa      	b.n	d5a14 <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d5a1e <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5a1e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d5a22:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5a26:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5a28:	6803      	ldr	r3, [r0, #0]
   d5a2a:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5a2c:	4604      	mov	r4, r0
   d5a2e:	460d      	mov	r5, r1
   d5a30:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d5a32:	4798      	blx	r3
   d5a34:	4580      	cmp	r8, r0
   d5a36:	d80c      	bhi.n	d5a52 <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d5a38:	6860      	ldr	r0, [r4, #4]
   d5a3a:	9600      	str	r6, [sp, #0]
   d5a3c:	463b      	mov	r3, r7
   d5a3e:	b2ea      	uxtb	r2, r5
   d5a40:	2157      	movs	r1, #87	; 0x57
   d5a42:	f7ff ff8d 	bl	d5960 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d5a46:	fab0 f080 	clz	r0, r0
   d5a4a:	0940      	lsrs	r0, r0, #5
}
   d5a4c:	b002      	add	sp, #8
   d5a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d5a52:	2000      	movs	r0, #0
   d5a54:	e7fa      	b.n	d5a4c <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d5a56 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d5a56:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d5a58:	1e1e      	subs	r6, r3, #0
   d5a5a:	bf0c      	ite	eq
   d5a5c:	2307      	moveq	r3, #7
   d5a5e:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d5a60:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d5a62:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d5a64:	ab02      	add	r3, sp, #8
   d5a66:	460a      	mov	r2, r1
   d5a68:	216f      	movs	r1, #111	; 0x6f
   d5a6a:	f7ff ff79 	bl	d5960 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d5a6e:	4605      	mov	r5, r0
   d5a70:	b9a8      	cbnz	r0, d5a9e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d5a72:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d5a76:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d5a78:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d5a7c:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d5a7e:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d5a82:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d5a84:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5a88:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d5a8a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d5a8e:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d5a90:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d5a94:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d5a96:	b92e      	cbnz	r6, d5aa4 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d5a98:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d5a9c:	72a3      	strb	r3, [r4, #10]
}
   d5a9e:	4628      	mov	r0, r5
   d5aa0:	b004      	add	sp, #16
   d5aa2:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d5aa4:	f002 f892 	bl	d7bcc <_ZN9TimeClass4yearEv>
   d5aa8:	f7ff fecc 	bl	d5844 <_ZN12MCP79410Time8intToBcdEi>
   d5aac:	72a0      	strb	r0, [r4, #10]
	return stat;
   d5aae:	e7f6      	b.n	d5a9e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d5ab0 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d5ab0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d5ab2:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d5ab4:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d5ab6:	9300      	str	r3, [sp, #0]
   d5ab8:	216f      	movs	r1, #111	; 0x6f
   d5aba:	ab03      	add	r3, sp, #12
   d5abc:	f7ff ff50 	bl	d5960 <_ZNK8MCP7941010deviceReadEhhPhj>
   d5ac0:	b920      	cbnz	r0, d5acc <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d5ac2:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d5ac6:	b005      	add	sp, #20
   d5ac8:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d5acc:	2000      	movs	r0, #0
   d5ace:	e7fa      	b.n	d5ac6 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d5ad0 <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d5ad0:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d5ad2:	2103      	movs	r1, #3
   d5ad4:	f7ff ffec 	bl	d5ab0 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d5ad8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d5adc:	bd08      	pop	{r3, pc}

000d5ade <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d5ade:	b538      	push	{r3, r4, r5, lr}
   d5ae0:	2300      	movs	r3, #0
   d5ae2:	460c      	mov	r4, r1
   d5ae4:	460a      	mov	r2, r1
   d5ae6:	4619      	mov	r1, r3
   d5ae8:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d5aea:	f7ff ffb4 	bl	d5a56 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d5aee:	b930      	cbnz	r0, d5afe <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d5af0:	7aa3      	ldrb	r3, [r4, #10]
   d5af2:	b123      	cbz	r3, d5afe <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d5af4:	4628      	mov	r0, r5
}
   d5af6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d5afa:	f7ff bfe9 	b.w	d5ad0 <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d5afe:	2000      	movs	r0, #0
   d5b00:	bd38      	pop	{r3, r4, r5, pc}

000d5b02 <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d5b02:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5b04:	4602      	mov	r2, r0
	MCP79410Time time;
   d5b06:	a801      	add	r0, sp, #4
   d5b08:	f7ff fe28 	bl	d575c <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d5b0c:	a901      	add	r1, sp, #4
   d5b0e:	4610      	mov	r0, r2
   d5b10:	f7ff ffe5 	bl	d5ade <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d5b14:	b128      	cbz	r0, d5b22 <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d5b16:	a801      	add	r0, sp, #4
   d5b18:	f7ff fe6c 	bl	d57f4 <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d5b1c:	b007      	add	sp, #28
   d5b1e:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d5b22:	2000      	movs	r0, #0
   d5b24:	4601      	mov	r1, r0
MCP79410Time::~MCP79410Time() {
   d5b26:	e7f9      	b.n	d5b1c <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d5b28 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d5b28:	b5d0      	push	{r4, r6, r7, lr}
   d5b2a:	4604      	mov	r4, r0
   d5b2c:	b086      	sub	sp, #24
	wire.begin();
   d5b2e:	6840      	ldr	r0, [r0, #4]
   d5b30:	f001 fbb4 	bl	d729c <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d5b34:	f002 f810 	bl	d7b58 <_ZN9TimeClass7isValidEv>
   d5b38:	b9e8      	cbnz	r0, d5b76 <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d5b3a:	7ae3      	ldrb	r3, [r4, #11]
   d5b3c:	079b      	lsls	r3, r3, #30
   d5b3e:	d51a      	bpl.n	d5b76 <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d5b40:	4620      	mov	r0, r4
   d5b42:	f7ff ffde 	bl	d5b02 <_ZNK8MCP7941010getRTCTimeEv>
   d5b46:	4606      	mov	r6, r0
   d5b48:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d5b4a:	ea56 0307 	orrs.w	r3, r6, r7
   d5b4e:	d012      	beq.n	d5b76 <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d5b50:	f001 ff09 	bl	d7966 <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d5b54:	4b0a      	ldr	r3, [pc, #40]	; (d5b80 <_ZN8MCP794105setupEv+0x58>)
   d5b56:	490b      	ldr	r1, [pc, #44]	; (d5b84 <_ZN8MCP794105setupEv+0x5c>)
   d5b58:	681b      	ldr	r3, [r3, #0]
   d5b5a:	9300      	str	r3, [sp, #0]
   d5b5c:	4632      	mov	r2, r6
   d5b5e:	463b      	mov	r3, r7
   d5b60:	a802      	add	r0, sp, #8
   d5b62:	f001 ffb7 	bl	d7ad4 <_ZN9TimeClass6formatExPKc>
   d5b66:	4808      	ldr	r0, [pc, #32]	; (d5b88 <_ZN8MCP794105setupEv+0x60>)
   d5b68:	9a02      	ldr	r2, [sp, #8]
   d5b6a:	4908      	ldr	r1, [pc, #32]	; (d5b8c <_ZN8MCP794105setupEv+0x64>)
   d5b6c:	f7ff fc56 	bl	d541c <_ZNK5spark6Logger4infoEPKcz>
   d5b70:	a802      	add	r0, sp, #8
   d5b72:	f001 fd95 	bl	d76a0 <_ZN6StringD1Ev>
	setupDone = true;
   d5b76:	2301      	movs	r3, #1
   d5b78:	7223      	strb	r3, [r4, #8]
}
   d5b7a:	b006      	add	sp, #24
   d5b7c:	bdd0      	pop	{r4, r6, r7, pc}
   d5b7e:	bf00      	nop
   d5b80:	2003de58 	.word	0x2003de58
   d5b84:	2003e640 	.word	0x2003e640
   d5b88:	2003e600 	.word	0x2003e600
   d5b8c:	000db352 	.word	0x000db352

000d5b90 <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d5b90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5b94:	4606      	mov	r6, r0
   d5b96:	4688      	mov	r8, r1
   d5b98:	4691      	mov	r9, r2
   d5b9a:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d5b9c:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d5b9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5ba0:	429d      	cmp	r5, r3
   d5ba2:	d229      	bcs.n	d5bf8 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d5ba4:	6870      	ldr	r0, [r6, #4]
   d5ba6:	4641      	mov	r1, r8
   d5ba8:	f001 fba7 	bl	d72fa <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d5bac:	6870      	ldr	r0, [r6, #4]
   d5bae:	eb09 0105 	add.w	r1, r9, r5
   d5bb2:	f7ff fc2f 	bl	d5414 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d5bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5bb8:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d5bba:	2f1f      	cmp	r7, #31
   d5bbc:	bf28      	it	cs
   d5bbe:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d5bc0:	eb0a 0405 	add.w	r4, sl, r5
   d5bc4:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d5bc8:	6870      	ldr	r0, [r6, #4]
   d5bca:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5bce:	6802      	ldr	r2, [r0, #0]
   d5bd0:	6892      	ldr	r2, [r2, #8]
   d5bd2:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d5bd4:	45a3      	cmp	fp, r4
   d5bd6:	d1f7      	bne.n	d5bc8 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d5bd8:	6870      	ldr	r0, [r6, #4]
   d5bda:	2101      	movs	r1, #1
   d5bdc:	f001 fb94 	bl	d7308 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d5be0:	4604      	mov	r4, r0
   d5be2:	b138      	cbz	r0, d5bf4 <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d5be4:	4602      	mov	r2, r0
   d5be6:	4905      	ldr	r1, [pc, #20]	; (d5bfc <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d5be8:	4805      	ldr	r0, [pc, #20]	; (d5c00 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d5bea:	f7ff fc17 	bl	d541c <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d5bee:	4620      	mov	r0, r4
   d5bf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d5bf4:	443d      	add	r5, r7
	while(offset < bufLen) {
   d5bf6:	e7d2      	b.n	d5b9e <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d5bf8:	2400      	movs	r4, #0
	return stat;
   d5bfa:	e7f8      	b.n	d5bee <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d5bfc:	000db367 	.word	0x000db367
   d5c00:	2003e600 	.word	0x2003e600

000d5c04 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5c04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d5c08:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5c0c:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5c0e:	6803      	ldr	r3, [r0, #0]
   d5c10:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5c12:	4605      	mov	r5, r0
   d5c14:	460c      	mov	r4, r1
   d5c16:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d5c18:	4798      	blx	r3
   d5c1a:	4580      	cmp	r8, r0
   d5c1c:	d80d      	bhi.n	d5c3a <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d5c1e:	3420      	adds	r4, #32
   d5c20:	6868      	ldr	r0, [r5, #4]
   d5c22:	9600      	str	r6, [sp, #0]
   d5c24:	463b      	mov	r3, r7
   d5c26:	b2e2      	uxtb	r2, r4
   d5c28:	216f      	movs	r1, #111	; 0x6f
   d5c2a:	f7ff ffb1 	bl	d5b90 <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d5c2e:	fab0 f080 	clz	r0, r0
   d5c32:	0940      	lsrs	r0, r0, #5
}
   d5c34:	b002      	add	sp, #8
   d5c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d5c3a:	2000      	movs	r0, #0
   d5c3c:	e7fa      	b.n	d5c34 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d5c3e <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d5c3e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d5c40:	7c13      	ldrb	r3, [r2, #16]
   d5c42:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d5c46:	7bd3      	ldrb	r3, [r2, #15]
   d5c48:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d5c4c:	7b93      	ldrb	r3, [r2, #14]
   d5c4e:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d5c52:	7b53      	ldrb	r3, [r2, #13]
   d5c54:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d5c58:	7b13      	ldrb	r3, [r2, #12]
   d5c5a:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d5c5e:	7ad3      	ldrb	r3, [r2, #11]
   d5c60:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d5c64:	7a93      	ldrb	r3, [r2, #10]
   d5c66:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d5c6a:	2307      	movs	r3, #7
   d5c6c:	9300      	str	r3, [sp, #0]
   d5c6e:	460a      	mov	r2, r1
   d5c70:	ab02      	add	r3, sp, #8
   d5c72:	216f      	movs	r1, #111	; 0x6f
   d5c74:	f7ff ff8c 	bl	d5b90 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d5c78:	b005      	add	sp, #20
   d5c7a:	f85d fb04 	ldr.w	pc, [sp], #4

000d5c7e <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d5c7e:	b510      	push	{r4, lr}
   d5c80:	b088      	sub	sp, #32
   d5c82:	4604      	mov	r4, r0
	MCP79410Time time;
   d5c84:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d5c86:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d5c88:	f7ff fd68 	bl	d575c <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d5c8c:	9b01      	ldr	r3, [sp, #4]
   d5c8e:	a803      	add	r0, sp, #12
   d5c90:	f7ff fe27 	bl	d58e2 <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d5c94:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d5c98:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d5c9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d5c9e:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d5ca2:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d5ca6:	b16a      	cbz	r2, d5cc4 <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d5ca8:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d5cac:	aa03      	add	r2, sp, #12
   d5cae:	2100      	movs	r1, #0
   d5cb0:	4620      	mov	r0, r4
   d5cb2:	f88d 3019 	strb.w	r3, [sp, #25]
   d5cb6:	f7ff ffc2 	bl	d5c3e <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d5cba:	fab0 f080 	clz	r0, r0
   d5cbe:	0940      	lsrs	r0, r0, #5
   d5cc0:	b008      	add	sp, #32
   d5cc2:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d5cc4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d5cc8:	e7f0      	b.n	d5cac <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d5ccc <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d5ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5cce:	b087      	sub	sp, #28
   d5cd0:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d5cd2:	f001 ff41 	bl	d7b58 <_ZN9TimeClass7isValidEv>
   d5cd6:	4604      	mov	r4, r0
   d5cd8:	b1e8      	cbz	r0, d5d16 <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d5cda:	f001 ff5a 	bl	d7b92 <_ZN9TimeClass3nowEv>
   d5cde:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d5ce0:	4602      	mov	r2, r0
		time_t now = Time.now();
   d5ce2:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d5ce4:	463b      	mov	r3, r7
   d5ce6:	4628      	mov	r0, r5
   d5ce8:	f7ff ffc9 	bl	d5c7e <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d5cec:	4b0c      	ldr	r3, [pc, #48]	; (d5d20 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d5cee:	490d      	ldr	r1, [pc, #52]	; (d5d24 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d5cf0:	681b      	ldr	r3, [r3, #0]
   d5cf2:	9300      	str	r3, [sp, #0]
   d5cf4:	4632      	mov	r2, r6
   d5cf6:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d5cf8:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d5cfa:	a802      	add	r0, sp, #8
   d5cfc:	f001 feea 	bl	d7ad4 <_ZN9TimeClass6formatExPKc>
   d5d00:	4809      	ldr	r0, [pc, #36]	; (d5d28 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d5d02:	9a02      	ldr	r2, [sp, #8]
   d5d04:	4909      	ldr	r1, [pc, #36]	; (d5d2c <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d5d06:	f7ff fb89 	bl	d541c <_ZNK5spark6Logger4infoEPKcz>
   d5d0a:	a802      	add	r0, sp, #8
   d5d0c:	f001 fcc8 	bl	d76a0 <_ZN6StringD1Ev>
}
   d5d10:	4620      	mov	r0, r4
   d5d12:	b007      	add	sp, #28
   d5d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d5d16:	4906      	ldr	r1, [pc, #24]	; (d5d30 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d5d18:	4803      	ldr	r0, [pc, #12]	; (d5d28 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d5d1a:	f7ff fb7f 	bl	d541c <_ZNK5spark6Logger4infoEPKcz>
   d5d1e:	e7f7      	b.n	d5d10 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d5d20:	2003de58 	.word	0x2003de58
   d5d24:	2003e640 	.word	0x2003e640
   d5d28:	2003e600 	.word	0x2003e600
   d5d2c:	000db382 	.word	0x000db382
   d5d30:	000db398 	.word	0x000db398

000d5d34 <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d5d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d5d36:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d5d38:	4604      	mov	r4, r0
	if (!timeSet) {
   d5d3a:	b99d      	cbnz	r5, d5d64 <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d5d3c:	f001 ff0c 	bl	d7b58 <_ZN9TimeClass7isValidEv>
   d5d40:	b180      	cbz	r0, d5d64 <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d5d42:	2200      	movs	r2, #0
   d5d44:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d5d46:	4669      	mov	r1, sp
   d5d48:	4628      	mov	r0, r5
        tm = 0;
   d5d4a:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d5d4e:	f000 fe2d 	bl	d69ac <spark_sync_time_last>
			if (lastSync != 0) {
   d5d52:	b138      	cbz	r0, d5d64 <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d5d54:	7ae3      	ldrb	r3, [r4, #11]
   d5d56:	07db      	lsls	r3, r3, #31
   d5d58:	d502      	bpl.n	d5d60 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d5d5a:	4620      	mov	r0, r4
   d5d5c:	f7ff ffb6 	bl	d5ccc <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d5d60:	2301      	movs	r3, #1
   d5d62:	7263      	strb	r3, [r4, #9]
}
   d5d64:	b003      	add	sp, #12
   d5d66:	bd30      	pop	{r4, r5, pc}

000d5d68 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d5d68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d5d6a:	2301      	movs	r3, #1
	buf[0] = value;
   d5d6c:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d5d70:	9300      	str	r3, [sp, #0]
   d5d72:	460a      	mov	r2, r1
   d5d74:	ab03      	add	r3, sp, #12
   d5d76:	216f      	movs	r1, #111	; 0x6f
   d5d78:	f7ff ff0a 	bl	d5b90 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d5d7c:	b005      	add	sp, #20
   d5d7e:	f85d fb04 	ldr.w	pc, [sp], #4

000d5d82 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d5d82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d84:	4604      	mov	r4, r0
   d5d86:	460d      	mov	r5, r1
   d5d88:	4617      	mov	r7, r2
   d5d8a:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d5d8c:	f7ff fe90 	bl	d5ab0 <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   d5d90:	ea00 0207 	and.w	r2, r0, r7
	return deviceWriteRegisterByte(addr, value);
   d5d94:	4332      	orrs	r2, r6
   d5d96:	4629      	mov	r1, r5
   d5d98:	4620      	mov	r0, r4
}
   d5d9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   d5d9e:	f7ff bfe3 	b.w	d5d68 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d5da2 <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   d5da2:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   d5da4:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d5da6:	d80c      	bhi.n	d5dc2 <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d5da8:	2900      	cmp	r1, #0
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d5daa:	f04f 0300 	mov.w	r3, #0
   d5dae:	bf14      	ite	ne
   d5db0:	22df      	movne	r2, #223	; 0xdf
   d5db2:	22ef      	moveq	r2, #239	; 0xef
   d5db4:	2107      	movs	r1, #7
   d5db6:	f7ff ffe4 	bl	d5d82 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d5dba:	fab0 f080 	clz	r0, r0
   d5dbe:	0940      	lsrs	r0, r0, #5
}
   d5dc0:	bd08      	pop	{r3, pc}
		return false;
   d5dc2:	2000      	movs	r0, #0
   d5dc4:	e7fc      	b.n	d5dc0 <_ZN8MCP7941010clearAlarmEi+0x1e>

000d5dc6 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d5dc6:	b538      	push	{r3, r4, r5, lr}
   d5dc8:	4604      	mov	r4, r0
   d5dca:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d5dcc:	6860      	ldr	r0, [r4, #4]
   d5dce:	2157      	movs	r1, #87	; 0x57
   d5dd0:	f001 fa93 	bl	d72fa <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d5dd4:	6860      	ldr	r0, [r4, #4]
   d5dd6:	2101      	movs	r1, #1
   d5dd8:	f001 fa96 	bl	d7308 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d5ddc:	b108      	cbz	r0, d5de2 <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d5dde:	3d01      	subs	r5, #1
   d5de0:	d1f4      	bne.n	d5dcc <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d5de2:	bd38      	pop	{r3, r4, r5, pc}

000d5de4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d5de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5de8:	4604      	mov	r4, r0
   d5dea:	460f      	mov	r7, r1
   d5dec:	4616      	mov	r6, r2
   d5dee:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d5df2:	45b0      	cmp	r8, r6
   d5df4:	d020      	beq.n	d5e38 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d5df6:	6860      	ldr	r0, [r4, #4]
   d5df8:	2157      	movs	r1, #87	; 0x57
   d5dfa:	f001 fa7e 	bl	d72fa <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d5dfe:	4639      	mov	r1, r7
   d5e00:	6860      	ldr	r0, [r4, #4]
   d5e02:	f7ff fb07 	bl	d5414 <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d5e06:	6860      	ldr	r0, [r4, #4]
   d5e08:	f816 1b01 	ldrb.w	r1, [r6], #1
   d5e0c:	6803      	ldr	r3, [r0, #0]
   d5e0e:	689b      	ldr	r3, [r3, #8]
   d5e10:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d5e12:	6860      	ldr	r0, [r4, #4]
   d5e14:	2101      	movs	r1, #1
   d5e16:	f001 fa77 	bl	d7308 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d5e1a:	3701      	adds	r7, #1
   d5e1c:	4605      	mov	r5, r0
   d5e1e:	b138      	cbz	r0, d5e30 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d5e20:	4602      	mov	r2, r0
   d5e22:	4906      	ldr	r1, [pc, #24]	; (d5e3c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d5e24:	4806      	ldr	r0, [pc, #24]	; (d5e40 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d5e26:	f7ff faf9 	bl	d541c <_ZNK5spark6Logger4infoEPKcz>
}
   d5e2a:	4628      	mov	r0, r5
   d5e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d5e30:	4620      	mov	r0, r4
   d5e32:	f7ff ffc8 	bl	d5dc6 <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d5e36:	e7dc      	b.n	d5df2 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d5e38:	2500      	movs	r5, #0
	return stat;
   d5e3a:	e7f6      	b.n	d5e2a <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d5e3c:	000db3ad 	.word	0x000db3ad
   d5e40:	2003e600 	.word	0x2003e600

000d5e44 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5e44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d5e46:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5e48:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5e4a:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5e4c:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d5e4e:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5e50:	4604      	mov	r4, r0
   d5e52:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d5e54:	4798      	blx	r3
   d5e56:	4287      	cmp	r7, r0
   d5e58:	d80a      	bhi.n	d5e70 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d5e5a:	9a01      	ldr	r2, [sp, #4]
   d5e5c:	6860      	ldr	r0, [r4, #4]
   d5e5e:	4633      	mov	r3, r6
   d5e60:	b2e9      	uxtb	r1, r5
   d5e62:	f7ff ffbf 	bl	d5de4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d5e66:	fab0 f080 	clz	r0, r0
   d5e6a:	0940      	lsrs	r0, r0, #5
}
   d5e6c:	b003      	add	sp, #12
   d5e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d5e70:	2000      	movs	r0, #0
   d5e72:	e7fb      	b.n	d5e6c <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d5e74 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   d5e74:	4b01      	ldr	r3, [pc, #4]	; (d5e7c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d5e76:	4a02      	ldr	r2, [pc, #8]	; (d5e80 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d5e78:	601a      	str	r2, [r3, #0]
}
   d5e7a:	4770      	bx	lr
   d5e7c:	2003e600 	.word	0x2003e600
   d5e80:	000db3ce 	.word	0x000db3ce

000d5e84 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d5e84:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d5e86:	4603      	mov	r3, r0
	switch (__op)
   d5e88:	d102      	bne.n	d5e90 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d5e8a:	6001      	str	r1, [r0, #0]
      }
   d5e8c:	2000      	movs	r0, #0
   d5e8e:	4770      	bx	lr
	  switch (__op)
   d5e90:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d5e92:	bf04      	itt	eq
   d5e94:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d5e98:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d5e9c:	e7f6      	b.n	d5e8c <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d5e9e <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d5e9e:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d5ea0:	2301      	movs	r3, #1
   d5ea2:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d5ea4:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d5ea6:	4604      	mov	r4, r0
        if (th->func) {
   d5ea8:	b143      	cbz	r3, d5ebc <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d5eaa:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5eac:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d5eae:	2301      	movs	r3, #1
   d5eb0:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d5eb2:	2000      	movs	r0, #0
    }
   d5eb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d5eb8:	f000 bb32 	b.w	d6520 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d5ebc:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d5ebe:	2800      	cmp	r0, #0
   d5ec0:	d0f5      	beq.n	d5eae <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d5ec2:	6883      	ldr	r3, [r0, #8]
   d5ec4:	b90b      	cbnz	r3, d5eca <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d5ec6:	f002 f986 	bl	d81d6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5eca:	68c3      	ldr	r3, [r0, #12]
   d5ecc:	e7ee      	b.n	d5eac <_ZN6Thread3runEPv+0xe>

000d5ece <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5ece:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d5ed0:	6842      	ldr	r2, [r0, #4]
   d5ed2:	4603      	mov	r3, r0
   d5ed4:	1054      	asrs	r4, r2, #1
   d5ed6:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d5eda:	07d2      	lsls	r2, r2, #31
   d5edc:	bf48      	it	mi
   d5ede:	590a      	ldrmi	r2, [r1, r4]
   d5ee0:	681b      	ldr	r3, [r3, #0]
      }
   d5ee2:	f85d 4b04 	ldr.w	r4, [sp], #4
   d5ee6:	bf48      	it	mi
   d5ee8:	58d3      	ldrmi	r3, [r2, r3]
   d5eea:	4718      	bx	r3

000d5eec <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d5eec:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d5eee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d5ef0:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d5ef4:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d5ef6:	3008      	adds	r0, #8
   d5ef8:	f000 faea 	bl	d64d0 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d5efc:	2004      	movs	r0, #4
   d5efe:	f7fe f8ca 	bl	d4096 <_Znwj>
   d5f02:	4605      	mov	r5, r0
   d5f04:	b398      	cbz	r0, d5f6e <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d5f06:	491b      	ldr	r1, [pc, #108]	; (d5f74 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d5f08:	2014      	movs	r0, #20
   d5f0a:	f002 f960 	bl	d81ce <_ZnwjRKSt9nothrow_t>
   d5f0e:	b130      	cbz	r0, d5f1e <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5f10:	2300      	movs	r3, #0
            exited(false) {
   d5f12:	e9c0 3300 	strd	r3, r3, [r0]
   d5f16:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d5f1a:	7403      	strb	r3, [r0, #16]
   d5f1c:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d5f1e:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d5f20:	b1a0      	cbz	r0, d5f4c <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d5f22:	4b15      	ldr	r3, [pc, #84]	; (d5f78 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5f24:	4915      	ldr	r1, [pc, #84]	; (d5f7c <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d5f26:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5f2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d5f2e:	e9cd 0300 	strd	r0, r3, [sp]
   d5f32:	2202      	movs	r2, #2
   d5f34:	4b12      	ldr	r3, [pc, #72]	; (d5f80 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d5f36:	3004      	adds	r0, #4
   d5f38:	f000 fa92 	bl	d6460 <os_thread_create>
   d5f3c:	b930      	cbnz	r0, d5f4c <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d5f3e:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d5f40:	7c1b      	ldrb	r3, [r3, #16]
   d5f42:	b9a3      	cbnz	r3, d5f6e <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d5f44:	2001      	movs	r0, #1
   d5f46:	f000 fb0b 	bl	d6560 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d5f4a:	e7f8      	b.n	d5f3e <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f4c:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5f4e:	2300      	movs	r3, #0
   d5f50:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d5f52:	b164      	cbz	r4, d5f6e <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d5f54:	6827      	ldr	r7, [r4, #0]
   d5f56:	b137      	cbz	r7, d5f66 <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d5f58:	4638      	mov	r0, r7
   d5f5a:	f7fe f99d 	bl	d4298 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d5f5e:	2110      	movs	r1, #16
   d5f60:	4638      	mov	r0, r7
   d5f62:	f002 f932 	bl	d81ca <_ZdlPvj>
   d5f66:	2114      	movs	r1, #20
   d5f68:	4620      	mov	r0, r4
   d5f6a:	f002 f92e 	bl	d81ca <_ZdlPvj>
   d5f6e:	6075      	str	r5, [r6, #4]
}
   d5f70:	b003      	add	sp, #12
   d5f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5f74:	000db6d0 	.word	0x000db6d0
   d5f78:	000d618b 	.word	0x000d618b
   d5f7c:	000db440 	.word	0x000db440
   d5f80:	000d5e9f 	.word	0x000d5e9f

000d5f84 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d5f84:	f247 5130 	movw	r1, #30000	; 0x7530
   d5f88:	4a08      	ldr	r2, [pc, #32]	; (d5fac <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d5f8a:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5f8c:	4908      	ldr	r1, [pc, #32]	; (d5fb0 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d5f8e:	6002      	str	r2, [r0, #0]
   d5f90:	2200      	movs	r2, #0
   d5f92:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d5f96:	4907      	ldr	r1, [pc, #28]	; (d5fb4 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d5f98:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d5f9a:	4907      	ldr	r1, [pc, #28]	; (d5fb8 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d5f9c:	6042      	str	r2, [r0, #4]
   d5f9e:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d5fa2:	6181      	str	r1, [r0, #24]
   d5fa4:	8502      	strh	r2, [r0, #40]	; 0x28
   d5fa6:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d5faa:	4770      	bx	lr
   d5fac:	000db504 	.word	0x000db504
   d5fb0:	000d62f5 	.word	0x000d62f5
   d5fb4:	000d5ecf 	.word	0x000d5ecf
   d5fb8:	000d5e85 	.word	0x000d5e85

000d5fbc <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d5fbc:	b510      	push	{r4, lr}
   d5fbe:	4b04      	ldr	r3, [pc, #16]	; (d5fd0 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d5fc0:	4604      	mov	r4, r0
   d5fc2:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d5fc6:	f7fe f967 	bl	d4298 <_ZNSt14_Function_baseD1Ev>
}
   d5fca:	4620      	mov	r0, r4
   d5fcc:	bd10      	pop	{r4, pc}
   d5fce:	bf00      	nop
   d5fd0:	000db504 	.word	0x000db504

000d5fd4 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d5fd4:	b510      	push	{r4, lr}
   d5fd6:	4b03      	ldr	r3, [pc, #12]	; (d5fe4 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d5fd8:	6003      	str	r3, [r0, #0]
   d5fda:	4604      	mov	r4, r0
   d5fdc:	f7ff ffee 	bl	d5fbc <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d5fe0:	4620      	mov	r0, r4
   d5fe2:	bd10      	pop	{r4, pc}
   d5fe4:	000db52c 	.word	0x000db52c

000d5fe8 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d5fe8:	b510      	push	{r4, lr}
   d5fea:	4604      	mov	r4, r0
}
   d5fec:	f7ff fff2 	bl	d5fd4 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d5ff0:	4620      	mov	r0, r4
   d5ff2:	2138      	movs	r1, #56	; 0x38
   d5ff4:	f002 f8e9 	bl	d81ca <_ZdlPvj>
   d5ff8:	4620      	mov	r0, r4
   d5ffa:	bd10      	pop	{r4, pc}

000d5ffc <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d5ffc:	6880      	ldr	r0, [r0, #8]
   d5ffe:	f000 ba6f 	b.w	d64e0 <os_mutex_lock>

000d6002 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d6002:	6880      	ldr	r0, [r0, #8]
   d6004:	f000 ba74 	b.w	d64f0 <os_mutex_unlock>

000d6008 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d6008:	b510      	push	{r4, lr}
   d600a:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d600c:	6800      	ldr	r0, [r0, #0]
   d600e:	f7ff fff8 	bl	d6002 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d6012:	4620      	mov	r0, r4
   d6014:	bd10      	pop	{r4, pc}

000d6016 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d6016:	b513      	push	{r0, r1, r4, lr}
   d6018:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d601a:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d601c:	f7ff ffee 	bl	d5ffc <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6020:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d6022:	88dc      	ldrh	r4, [r3, #6]
   d6024:	b2a4      	uxth	r4, r4
   d6026:	b10c      	cbz	r4, d602c <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d6028:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d602c:	a801      	add	r0, sp, #4
   d602e:	f7ff ffeb 	bl	d6008 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d6032:	4620      	mov	r0, r4
   d6034:	b002      	add	sp, #8
   d6036:	bd10      	pop	{r4, pc}

000d6038 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d6038:	b513      	push	{r0, r1, r4, lr}
   d603a:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d603c:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d603e:	f7ff ffdd 	bl	d5ffc <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d6042:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d6046:	b943      	cbnz	r3, d605a <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6048:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d604a:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d604c:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d604e:	a801      	add	r0, sp, #4
   d6050:	f7ff ffda 	bl	d6008 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d6054:	4620      	mov	r0, r4
   d6056:	b002      	add	sp, #8
   d6058:	bd10      	pop	{r4, pc}
	bool result = false;
   d605a:	2400      	movs	r4, #0
   d605c:	e7f7      	b.n	d604e <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d605e <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d605e:	b513      	push	{r0, r1, r4, lr}
   d6060:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6062:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6064:	f7ff ffca 	bl	d5ffc <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d6068:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d606a:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d606c:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d606e:	f7ff ffcb 	bl	d6008 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d6072:	4620      	mov	r0, r4
   d6074:	b002      	add	sp, #8
   d6076:	bd10      	pop	{r4, pc}

000d6078 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d6078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d607c:	4699      	mov	r9, r3
   d607e:	b086      	sub	sp, #24
	if (!haveSetup) {
   d6080:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d6084:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d6088:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d608c:	4604      	mov	r4, r0
   d608e:	460f      	mov	r7, r1
   d6090:	4616      	mov	r6, r2
	if (!haveSetup) {
   d6092:	b913      	cbnz	r3, d609a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d6094:	6803      	ldr	r3, [r0, #0]
   d6096:	689b      	ldr	r3, [r3, #8]
   d6098:	4798      	blx	r3
		data = "";
   d609a:	4b31      	ldr	r3, [pc, #196]	; (d6160 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d609c:	4638      	mov	r0, r7
		data = "";
   d609e:	2e00      	cmp	r6, #0
   d60a0:	bf08      	it	eq
   d60a2:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d60a4:	f002 ff89 	bl	d8fba <strlen>
   d60a8:	4605      	mov	r5, r0
   d60aa:	4630      	mov	r0, r6
   d60ac:	f002 ff85 	bl	d8fba <strlen>
   d60b0:	4428      	add	r0, r5
   d60b2:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d60b6:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d60b8:	bf1c      	itt	ne
   d60ba:	f025 0503 	bicne.w	r5, r5, #3
   d60be:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d60c0:	4633      	mov	r3, r6
   d60c2:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d60c6:	e9cd 9a00 	strd	r9, sl, [sp]
   d60ca:	4926      	ldr	r1, [pc, #152]	; (d6164 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d60cc:	4826      	ldr	r0, [pc, #152]	; (d6168 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d60ce:	463a      	mov	r2, r7
   d60d0:	f7ff f9a4 	bl	d541c <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d60d4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d60d6:	3b08      	subs	r3, #8
   d60d8:	42ab      	cmp	r3, r5
   d60da:	d212      	bcs.n	d6102 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d60dc:	2400      	movs	r4, #0
}
   d60de:	4620      	mov	r0, r4
   d60e0:	b006      	add	sp, #24
   d60e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d60e6:	88cb      	ldrh	r3, [r1, #6]
   d60e8:	2b01      	cmp	r3, #1
   d60ea:	d036      	beq.n	d615a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d60ec:	a805      	add	r0, sp, #20
   d60ee:	f7ff ff8b 	bl	d6008 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d60f2:	6823      	ldr	r3, [r4, #0]
   d60f4:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d60f8:	699b      	ldr	r3, [r3, #24]
   d60fa:	4620      	mov	r0, r4
   d60fc:	4798      	blx	r3
   d60fe:	2800      	cmp	r0, #0
   d6100:	d0ec      	beq.n	d60dc <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d6102:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6104:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d6106:	f7ff ff79 	bl	d5ffc <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d610a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d610c:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d610e:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6110:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d6112:	1ad2      	subs	r2, r2, r3
   d6114:	42aa      	cmp	r2, r5
   d6116:	d3e6      	bcc.n	d60e6 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d6118:	ea48 080a 	orr.w	r8, r8, sl
   d611c:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d6120:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d6124:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d6126:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d612a:	4639      	mov	r1, r7
   d612c:	4640      	mov	r0, r8
   d612e:	f002 ff1f 	bl	d8f70 <strcpy>
				cp += strlen(cp) + 1;
   d6132:	4640      	mov	r0, r8
   d6134:	f002 ff41 	bl	d8fba <strlen>
   d6138:	3001      	adds	r0, #1
				strcpy(cp, data);
   d613a:	4631      	mov	r1, r6
   d613c:	4440      	add	r0, r8
   d613e:	f002 ff17 	bl	d8f70 <strcpy>
				nextFree += size;
   d6142:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6144:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d6146:	441d      	add	r5, r3
   d6148:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d614a:	88d3      	ldrh	r3, [r2, #6]
   d614c:	3301      	adds	r3, #1
   d614e:	80d3      	strh	r3, [r2, #6]
				return true;
   d6150:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d6152:	a805      	add	r0, sp, #20
   d6154:	f7ff ff58 	bl	d6008 <_ZN11StMutexLockD1Ev>
   d6158:	e7c1      	b.n	d60de <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d615a:	2400      	movs	r4, #0
   d615c:	e7f9      	b.n	d6152 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d615e:	bf00      	nop
   d6160:	000db6f8 	.word	0x000db6f8
   d6164:	000db452 	.word	0x000db452
   d6168:	2003e604 	.word	0x2003e604

000d616c <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d616c:	b508      	push	{r3, lr}
   d616e:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6170:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d6174:	69a3      	ldr	r3, [r4, #24]
   d6176:	b90b      	cbnz	r3, d617c <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d6178:	f002 f82d 	bl	d81d6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d617c:	69e3      	ldr	r3, [r4, #28]
   d617e:	4621      	mov	r1, r4
   d6180:	4628      	mov	r0, r5
   d6182:	4798      	blx	r3
		os_thread_yield();
   d6184:	f000 f974 	bl	d6470 <os_thread_yield>
	while(true) {
   d6188:	e7f4      	b.n	d6174 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d618a <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d618a:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d618c:	f7ff ffee 	bl	d616c <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d6190 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d6190:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d6192:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d6196:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d6198:	4628      	mov	r0, r5
   d619a:	f002 ff0e 	bl	d8fba <strlen>
   d619e:	3001      	adds	r0, #1
   d61a0:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d61a2:	4628      	mov	r0, r5
   d61a4:	f002 ff09 	bl	d8fba <strlen>
	size_t offset = start - retainedBuffer;
   d61a8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d61aa:	3001      	adds	r0, #1
   d61ac:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d61ae:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d61b0:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d61b4:	bf1c      	itt	ne
   d61b6:	f1c3 0304 	rsbne	r3, r3, #4
   d61ba:	18c0      	addne	r0, r0, r3
}
   d61bc:	bd68      	pop	{r3, r5, r6, pc}

000d61be <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d61be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d61c0:	4604      	mov	r4, r0
   d61c2:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d61c4:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d61c6:	f7ff ff19 	bl	d5ffc <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d61ca:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d61cc:	88fb      	ldrh	r3, [r7, #6]
   d61ce:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d61d2:	b1e6      	cbz	r6, d620e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d61d4:	2b01      	cmp	r3, #1
   d61d6:	d922      	bls.n	d621e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d61d8:	4629      	mov	r1, r5
   d61da:	4620      	mov	r0, r4
   d61dc:	f7ff ffd8 	bl	d6190 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d61e0:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d61e2:	4629      	mov	r1, r5
   d61e4:	4620      	mov	r0, r4
   d61e6:	f7ff ffd3 	bl	d6190 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d61ea:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d61ec:	443a      	add	r2, r7
	if (after > 0) {
   d61ee:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d61f0:	4601      	mov	r1, r0
	size_t len = next - start;
   d61f2:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d61f6:	d002      	beq.n	d61fe <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d61f8:	4628      	mov	r0, r5
   d61fa:	f002 fe69 	bl	d8ed0 <memmove>
	nextFree -= len;
   d61fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d6200:	1b9b      	subs	r3, r3, r6
   d6202:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d6204:	88fb      	ldrh	r3, [r7, #6]
   d6206:	3b01      	subs	r3, #1
   d6208:	80fb      	strh	r3, [r7, #6]
	return true;
   d620a:	2601      	movs	r6, #1
   d620c:	e001      	b.n	d6212 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d620e:	2b00      	cmp	r3, #0
   d6210:	d1e7      	bne.n	d61e2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d6212:	a801      	add	r0, sp, #4
   d6214:	f7ff fef8 	bl	d6008 <_ZN11StMutexLockD1Ev>
}
   d6218:	4630      	mov	r0, r6
   d621a:	b003      	add	sp, #12
   d621c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d621e:	2600      	movs	r6, #0
   d6220:	e7f7      	b.n	d6212 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d6224 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d6224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6228:	460d      	mov	r5, r1
   d622a:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d622c:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d622e:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6230:	f7ff fea8 	bl	d5f84 <_ZN21PublishQueueAsyncBaseC1Ev>
   d6234:	4b15      	ldr	r3, [pc, #84]	; (d628c <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6236:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d623a:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d623c:	4b14      	ldr	r3, [pc, #80]	; (d6290 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d623e:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6240:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6242:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6244:	4698      	mov	r8, r3
   d6246:	d117      	bne.n	d6278 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d6248:	88ab      	ldrh	r3, [r5, #4]
   d624a:	b29b      	uxth	r3, r3
   d624c:	42b3      	cmp	r3, r6
   d624e:	d113      	bne.n	d6278 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6250:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d6254:	6367      	str	r7, [r4, #52]	; 0x34
   d6256:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d625a:	88eb      	ldrh	r3, [r5, #6]
   d625c:	fa1f f289 	uxth.w	r2, r9
   d6260:	b29b      	uxth	r3, r3
   d6262:	429a      	cmp	r2, r3
   d6264:	d20e      	bcs.n	d6284 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d6266:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d6268:	4620      	mov	r0, r4
   d626a:	f7ff ff91 	bl	d6190 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d626e:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d6270:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d6272:	f109 0901 	add.w	r9, r9, #1
   d6276:	d9f0      	bls.n	d625a <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d6278:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d627a:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d627e:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d6280:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d6282:	80eb      	strh	r3, [r5, #6]
}
   d6284:	4620      	mov	r0, r4
   d6286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d628a:	bf00      	nop
   d628c:	000db52c 	.word	0x000db52c
   d6290:	d19cab61 	.word	0xd19cab61

000d6294 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d6294:	b510      	push	{r4, lr}
   d6296:	e9d1 2300 	ldrd	r2, r3, [r1]
   d629a:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d629c:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d629e:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d62a0:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d62a2:	b90a      	cbnz	r2, d62a8 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d62a4:	07d9      	lsls	r1, r3, #31
   d62a6:	d505      	bpl.n	d62b4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d62a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d62ac:	4b0f      	ldr	r3, [pc, #60]	; (d62ec <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d62ae:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d62b0:	4b0f      	ldr	r3, [pc, #60]	; (d62f0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d62b2:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d62b4:	ab02      	add	r3, sp, #8
   d62b6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d62ba:	466a      	mov	r2, sp
   d62bc:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d62c0:	e894 0003 	ldmia.w	r4, {r0, r1}
   d62c4:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d62c8:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d62cc:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d62ce:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d62d2:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d62d4:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d62d6:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d62d8:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d62da:	4618      	mov	r0, r3
   d62dc:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d62de:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d62e0:	9105      	str	r1, [sp, #20]
   d62e2:	f7fd ffd9 	bl	d4298 <_ZNSt14_Function_baseD1Ev>
	}
   d62e6:	4620      	mov	r0, r4
   d62e8:	b006      	add	sp, #24
   d62ea:	bd10      	pop	{r4, pc}
   d62ec:	000d5ecf 	.word	0x000d5ecf
   d62f0:	000d5e85 	.word	0x000d5e85

000d62f4 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d62f4:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d62f6:	4b05      	ldr	r3, [pc, #20]	; (d630c <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d62f8:	9300      	str	r3, [sp, #0]
   d62fa:	4669      	mov	r1, sp
   d62fc:	2300      	movs	r3, #0
   d62fe:	3010      	adds	r0, #16
   d6300:	9301      	str	r3, [sp, #4]
   d6302:	f7ff ffc7 	bl	d6294 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6306:	b003      	add	sp, #12
   d6308:	f85d fb04 	ldr.w	pc, [sp], #4
   d630c:	000d633d 	.word	0x000d633d

000d6310 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d6310:	b513      	push	{r0, r1, r4, lr}
   d6312:	4604      	mov	r4, r0
   d6314:	f000 f934 	bl	d6580 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d6318:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d631a:	1ac0      	subs	r0, r0, r3
   d631c:	68e3      	ldr	r3, [r4, #12]
   d631e:	4298      	cmp	r0, r3
   d6320:	d308      	bcc.n	d6334 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d6322:	4b05      	ldr	r3, [pc, #20]	; (d6338 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d6324:	9300      	str	r3, [sp, #0]
   d6326:	4669      	mov	r1, sp
   d6328:	2300      	movs	r3, #0
   d632a:	f104 0010 	add.w	r0, r4, #16
   d632e:	9301      	str	r3, [sp, #4]
   d6330:	f7ff ffb0 	bl	d6294 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6334:	b002      	add	sp, #8
   d6336:	bd10      	pop	{r4, pc}
   d6338:	000d633d 	.word	0x000d633d

000d633c <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d633c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d6340:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d6344:	b086      	sub	sp, #24
   d6346:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d6348:	2b00      	cmp	r3, #0
   d634a:	d164      	bne.n	d6416 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d634c:	f000 fafe 	bl	d694c <spark_cloud_flag_connected>
   d6350:	2800      	cmp	r0, #0
   d6352:	d060      	beq.n	d6416 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d6354:	f000 f914 	bl	d6580 <HAL_Timer_Get_Milli_Seconds>
   d6358:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d635a:	1ac0      	subs	r0, r0, r3
   d635c:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d6360:	4298      	cmp	r0, r3
   d6362:	d958      	bls.n	d6416 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d6364:	6823      	ldr	r3, [r4, #0]
   d6366:	4620      	mov	r0, r4
   d6368:	695b      	ldr	r3, [r3, #20]
   d636a:	4798      	blx	r3
		if (data) {
   d636c:	4605      	mov	r5, r0
   d636e:	2800      	cmp	r0, #0
   d6370:	d051      	beq.n	d6416 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d6372:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d6376:	2301      	movs	r3, #1
   d6378:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d637c:	4638      	mov	r0, r7
   d637e:	f002 fe1c 	bl	d8fba <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d6382:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6386:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d638a:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d638c:	682b      	ldr	r3, [r5, #0]
   d638e:	492b      	ldr	r1, [pc, #172]	; (d643c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d6390:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d6392:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6394:	4633      	mov	r3, r6
   d6396:	482a      	ldr	r0, [pc, #168]	; (d6440 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6398:	463a      	mov	r2, r7
   d639a:	f7ff f83f 	bl	d541c <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d639e:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d63a0:	f88d 8000 	strb.w	r8, [sp]
   d63a4:	4632      	mov	r2, r6
   d63a6:	4639      	mov	r1, r7
   d63a8:	a802      	add	r0, sp, #8
   d63aa:	f000 fd85 	bl	d6eb8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d63ae:	9d02      	ldr	r5, [sp, #8]
   d63b0:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d63b2:	b91b      	cbnz	r3, d63bc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d63b4:	2001      	movs	r0, #1
   d63b6:	f000 fbc9 	bl	d6b4c <delay>
			while(!request.isDone()) {
   d63ba:	e7f8      	b.n	d63ae <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d63bc:	2000      	movs	r0, #0
   d63be:	f000 fa6f 	bl	d68a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d63c2:	b120      	cbz	r0, d63ce <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d63c4:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d63c6:	b913      	cbnz	r3, d63ce <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d63c8:	f000 fab8 	bl	d693c <spark_process>
    }
   d63cc:	e7fa      	b.n	d63c4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d63ce:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d63d0:	2b01      	cmp	r3, #1
   d63d2:	d123      	bne.n	d641c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d63d4:	491b      	ldr	r1, [pc, #108]	; (d6444 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d63d6:	481a      	ldr	r0, [pc, #104]	; (d6440 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d63d8:	f7ff f820 	bl	d541c <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d63dc:	6823      	ldr	r3, [r4, #0]
   d63de:	2100      	movs	r1, #0
   d63e0:	699b      	ldr	r3, [r3, #24]
   d63e2:	4620      	mov	r0, r4
   d63e4:	4798      	blx	r3
			isSending = false;
   d63e6:	2300      	movs	r3, #0
   d63e8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d63ec:	f000 f8c8 	bl	d6580 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d63f0:	6260      	str	r0, [r4, #36]	; 0x24
	if (_M_pi != nullptr)
   d63f2:	9c03      	ldr	r4, [sp, #12]
   d63f4:	b17c      	cbz	r4, d6416 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d63f6:	6863      	ldr	r3, [r4, #4]
   d63f8:	3b01      	subs	r3, #1
   d63fa:	6063      	str	r3, [r4, #4]
   d63fc:	b95b      	cbnz	r3, d6416 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d63fe:	6823      	ldr	r3, [r4, #0]
   d6400:	4620      	mov	r0, r4
   d6402:	689b      	ldr	r3, [r3, #8]
   d6404:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6406:	68a3      	ldr	r3, [r4, #8]
   d6408:	3b01      	subs	r3, #1
   d640a:	60a3      	str	r3, [r4, #8]
   d640c:	b91b      	cbnz	r3, d6416 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d640e:	6823      	ldr	r3, [r4, #0]
   d6410:	4620      	mov	r0, r4
   d6412:	68db      	ldr	r3, [r3, #12]
   d6414:	4798      	blx	r3
}
   d6416:	b006      	add	sp, #24
   d6418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d641c:	68e2      	ldr	r2, [r4, #12]
   d641e:	490a      	ldr	r1, [pc, #40]	; (d6448 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d6420:	4807      	ldr	r0, [pc, #28]	; (d6440 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6422:	f7fe fffb 	bl	d541c <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d6426:	4b09      	ldr	r3, [pc, #36]	; (d644c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d6428:	9304      	str	r3, [sp, #16]
   d642a:	a904      	add	r1, sp, #16
   d642c:	2300      	movs	r3, #0
   d642e:	f104 0010 	add.w	r0, r4, #16
   d6432:	9305      	str	r3, [sp, #20]
   d6434:	f7ff ff2e 	bl	d6294 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d6438:	e7d5      	b.n	d63e6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d643a:	bf00      	nop
   d643c:	000db493 	.word	0x000db493
   d6440:	2003e604 	.word	0x2003e604
   d6444:	000db4b4 	.word	0x000db4b4
   d6448:	000db4cb 	.word	0x000db4cb
   d644c:	000d6311 	.word	0x000d6311

000d6450 <_GLOBAL__sub_I_pubqLogger>:
   d6450:	4b01      	ldr	r3, [pc, #4]	; (d6458 <_GLOBAL__sub_I_pubqLogger+0x8>)
   d6452:	4a02      	ldr	r2, [pc, #8]	; (d645c <_GLOBAL__sub_I_pubqLogger+0xc>)
   d6454:	601a      	str	r2, [r3, #0]
}
   d6456:	4770      	bx	lr
   d6458:	2003e604 	.word	0x2003e604
   d645c:	000db4f2 	.word	0x000db4f2

000d6460 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d6460:	b508      	push	{r3, lr}
   d6462:	4b02      	ldr	r3, [pc, #8]	; (d646c <os_thread_create+0xc>)
   d6464:	681b      	ldr	r3, [r3, #0]
   d6466:	685b      	ldr	r3, [r3, #4]
   d6468:	9301      	str	r3, [sp, #4]
   d646a:	bd08      	pop	{r3, pc}
   d646c:	00030248 	.word	0x00030248

000d6470 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d6470:	b508      	push	{r3, lr}
   d6472:	4b02      	ldr	r3, [pc, #8]	; (d647c <os_thread_yield+0xc>)
   d6474:	681b      	ldr	r3, [r3, #0]
   d6476:	68db      	ldr	r3, [r3, #12]
   d6478:	9301      	str	r3, [sp, #4]
   d647a:	bd08      	pop	{r3, pc}
   d647c:	00030248 	.word	0x00030248

000d6480 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d6480:	b508      	push	{r3, lr}
   d6482:	4b02      	ldr	r3, [pc, #8]	; (d648c <os_thread_scheduling+0xc>)
   d6484:	681b      	ldr	r3, [r3, #0]
   d6486:	69db      	ldr	r3, [r3, #28]
   d6488:	9301      	str	r3, [sp, #4]
   d648a:	bd08      	pop	{r3, pc}
   d648c:	00030248 	.word	0x00030248

000d6490 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d6490:	b508      	push	{r3, lr}
   d6492:	4b02      	ldr	r3, [pc, #8]	; (d649c <os_timer_create+0xc>)
   d6494:	681b      	ldr	r3, [r3, #0]
   d6496:	6a1b      	ldr	r3, [r3, #32]
   d6498:	9301      	str	r3, [sp, #4]
   d649a:	bd08      	pop	{r3, pc}
   d649c:	00030248 	.word	0x00030248

000d64a0 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d64a0:	b508      	push	{r3, lr}
   d64a2:	4b02      	ldr	r3, [pc, #8]	; (d64ac <os_timer_destroy+0xc>)
   d64a4:	681b      	ldr	r3, [r3, #0]
   d64a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d64a8:	9301      	str	r3, [sp, #4]
   d64aa:	bd08      	pop	{r3, pc}
   d64ac:	00030248 	.word	0x00030248

000d64b0 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d64b0:	b508      	push	{r3, lr}
   d64b2:	4b02      	ldr	r3, [pc, #8]	; (d64bc <os_timer_get_id+0xc>)
   d64b4:	681b      	ldr	r3, [r3, #0]
   d64b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d64b8:	9301      	str	r3, [sp, #4]
   d64ba:	bd08      	pop	{r3, pc}
   d64bc:	00030248 	.word	0x00030248

000d64c0 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d64c0:	b508      	push	{r3, lr}
   d64c2:	4b02      	ldr	r3, [pc, #8]	; (d64cc <os_timer_change+0xc>)
   d64c4:	681b      	ldr	r3, [r3, #0]
   d64c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d64c8:	9301      	str	r3, [sp, #4]
   d64ca:	bd08      	pop	{r3, pc}
   d64cc:	00030248 	.word	0x00030248

000d64d0 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d64d0:	b508      	push	{r3, lr}
   d64d2:	4b02      	ldr	r3, [pc, #8]	; (d64dc <os_mutex_create+0xc>)
   d64d4:	681b      	ldr	r3, [r3, #0]
   d64d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d64d8:	9301      	str	r3, [sp, #4]
   d64da:	bd08      	pop	{r3, pc}
   d64dc:	00030248 	.word	0x00030248

000d64e0 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d64e0:	b508      	push	{r3, lr}
   d64e2:	4b02      	ldr	r3, [pc, #8]	; (d64ec <os_mutex_lock+0xc>)
   d64e4:	681b      	ldr	r3, [r3, #0]
   d64e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d64e8:	9301      	str	r3, [sp, #4]
   d64ea:	bd08      	pop	{r3, pc}
   d64ec:	00030248 	.word	0x00030248

000d64f0 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d64f0:	b508      	push	{r3, lr}
   d64f2:	4b02      	ldr	r3, [pc, #8]	; (d64fc <os_mutex_unlock+0xc>)
   d64f4:	681b      	ldr	r3, [r3, #0]
   d64f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d64f8:	9301      	str	r3, [sp, #4]
   d64fa:	bd08      	pop	{r3, pc}
   d64fc:	00030248 	.word	0x00030248

000d6500 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6500:	b508      	push	{r3, lr}
   d6502:	4b02      	ldr	r3, [pc, #8]	; (d650c <os_mutex_recursive_create+0xc>)
   d6504:	681b      	ldr	r3, [r3, #0]
   d6506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6508:	9301      	str	r3, [sp, #4]
   d650a:	bd08      	pop	{r3, pc}
   d650c:	00030248 	.word	0x00030248

000d6510 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6510:	b508      	push	{r3, lr}
   d6512:	4b02      	ldr	r3, [pc, #8]	; (d651c <os_mutex_recursive_destroy+0xc>)
   d6514:	681b      	ldr	r3, [r3, #0]
   d6516:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6518:	9301      	str	r3, [sp, #4]
   d651a:	bd08      	pop	{r3, pc}
   d651c:	00030248 	.word	0x00030248

000d6520 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d6520:	b508      	push	{r3, lr}
   d6522:	4b02      	ldr	r3, [pc, #8]	; (d652c <os_thread_exit+0xc>)
   d6524:	681b      	ldr	r3, [r3, #0]
   d6526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d6528:	9301      	str	r3, [sp, #4]
   d652a:	bd08      	pop	{r3, pc}
   d652c:	00030248 	.word	0x00030248

000d6530 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d6530:	b508      	push	{r3, lr}
   d6532:	4b02      	ldr	r3, [pc, #8]	; (d653c <os_timer_set_id+0xc>)
   d6534:	681b      	ldr	r3, [r3, #0]
   d6536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d6538:	9301      	str	r3, [sp, #4]
   d653a:	bd08      	pop	{r3, pc}
   d653c:	00030248 	.word	0x00030248

000d6540 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d6540:	b508      	push	{r3, lr}
   d6542:	4b02      	ldr	r3, [pc, #8]	; (d654c <HAL_Feature_Set+0xc>)
   d6544:	681b      	ldr	r3, [r3, #0]
   d6546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6548:	9301      	str	r3, [sp, #4]
   d654a:	bd08      	pop	{r3, pc}
   d654c:	00030234 	.word	0x00030234

000d6550 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6550:	b508      	push	{r3, lr}
   d6552:	4b02      	ldr	r3, [pc, #8]	; (d655c <HAL_RNG_GetRandomNumber+0xc>)
   d6554:	681b      	ldr	r3, [r3, #0]
   d6556:	685b      	ldr	r3, [r3, #4]
   d6558:	9301      	str	r3, [sp, #4]
   d655a:	bd08      	pop	{r3, pc}
   d655c:	00030218 	.word	0x00030218

000d6560 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d6560:	b508      	push	{r3, lr}
   d6562:	4b02      	ldr	r3, [pc, #8]	; (d656c <HAL_Delay_Milliseconds+0xc>)
   d6564:	681b      	ldr	r3, [r3, #0]
   d6566:	689b      	ldr	r3, [r3, #8]
   d6568:	9301      	str	r3, [sp, #4]
   d656a:	bd08      	pop	{r3, pc}
   d656c:	00030218 	.word	0x00030218

000d6570 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6570:	b508      	push	{r3, lr}
   d6572:	4b02      	ldr	r3, [pc, #8]	; (d657c <HAL_Delay_Microseconds+0xc>)
   d6574:	681b      	ldr	r3, [r3, #0]
   d6576:	68db      	ldr	r3, [r3, #12]
   d6578:	9301      	str	r3, [sp, #4]
   d657a:	bd08      	pop	{r3, pc}
   d657c:	00030218 	.word	0x00030218

000d6580 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6580:	b508      	push	{r3, lr}
   d6582:	4b02      	ldr	r3, [pc, #8]	; (d658c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6584:	681b      	ldr	r3, [r3, #0]
   d6586:	695b      	ldr	r3, [r3, #20]
   d6588:	9301      	str	r3, [sp, #4]
   d658a:	bd08      	pop	{r3, pc}
   d658c:	00030218 	.word	0x00030218

000d6590 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d6590:	b508      	push	{r3, lr}
   d6592:	4b02      	ldr	r3, [pc, #8]	; (d659c <hal_rtc_time_is_valid+0xc>)
   d6594:	681b      	ldr	r3, [r3, #0]
   d6596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6598:	9301      	str	r3, [sp, #4]
   d659a:	bd08      	pop	{r3, pc}
   d659c:	00030218 	.word	0x00030218

000d65a0 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d65a0:	b508      	push	{r3, lr}
   d65a2:	4b02      	ldr	r3, [pc, #8]	; (d65ac <hal_timer_millis+0xc>)
   d65a4:	681b      	ldr	r3, [r3, #0]
   d65a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d65a8:	9301      	str	r3, [sp, #4]
   d65aa:	bd08      	pop	{r3, pc}
   d65ac:	00030218 	.word	0x00030218

000d65b0 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d65b0:	b508      	push	{r3, lr}
   d65b2:	4b02      	ldr	r3, [pc, #8]	; (d65bc <hal_rtc_get_time+0xc>)
   d65b4:	681b      	ldr	r3, [r3, #0]
   d65b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d65b8:	9301      	str	r3, [sp, #4]
   d65ba:	bd08      	pop	{r3, pc}
   d65bc:	00030218 	.word	0x00030218

000d65c0 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d65c0:	b508      	push	{r3, lr}
   d65c2:	4b02      	ldr	r3, [pc, #8]	; (d65cc <hal_rtc_set_time+0xc>)
   d65c4:	681b      	ldr	r3, [r3, #0]
   d65c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d65c8:	9301      	str	r3, [sp, #4]
   d65ca:	bd08      	pop	{r3, pc}
   d65cc:	00030218 	.word	0x00030218

000d65d0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d65d0:	b508      	push	{r3, lr}
   d65d2:	4b02      	ldr	r3, [pc, #8]	; (d65dc <HAL_Validate_Pin_Function+0xc>)
   d65d4:	681b      	ldr	r3, [r3, #0]
   d65d6:	685b      	ldr	r3, [r3, #4]
   d65d8:	9301      	str	r3, [sp, #4]
   d65da:	bd08      	pop	{r3, pc}
   d65dc:	0003022c 	.word	0x0003022c

000d65e0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d65e0:	b508      	push	{r3, lr}
   d65e2:	4b02      	ldr	r3, [pc, #8]	; (d65ec <HAL_Pin_Mode+0xc>)
   d65e4:	681b      	ldr	r3, [r3, #0]
   d65e6:	689b      	ldr	r3, [r3, #8]
   d65e8:	9301      	str	r3, [sp, #4]
   d65ea:	bd08      	pop	{r3, pc}
   d65ec:	0003022c 	.word	0x0003022c

000d65f0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d65f0:	b508      	push	{r3, lr}
   d65f2:	4b02      	ldr	r3, [pc, #8]	; (d65fc <HAL_Get_Pin_Mode+0xc>)
   d65f4:	681b      	ldr	r3, [r3, #0]
   d65f6:	68db      	ldr	r3, [r3, #12]
   d65f8:	9301      	str	r3, [sp, #4]
   d65fa:	bd08      	pop	{r3, pc}
   d65fc:	0003022c 	.word	0x0003022c

000d6600 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6600:	b508      	push	{r3, lr}
   d6602:	4b02      	ldr	r3, [pc, #8]	; (d660c <HAL_GPIO_Write+0xc>)
   d6604:	681b      	ldr	r3, [r3, #0]
   d6606:	691b      	ldr	r3, [r3, #16]
   d6608:	9301      	str	r3, [sp, #4]
   d660a:	bd08      	pop	{r3, pc}
   d660c:	0003022c 	.word	0x0003022c

000d6610 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d6610:	b508      	push	{r3, lr}
   d6612:	4b02      	ldr	r3, [pc, #8]	; (d661c <HAL_Interrupts_Attach+0xc>)
   d6614:	681b      	ldr	r3, [r3, #0]
   d6616:	699b      	ldr	r3, [r3, #24]
   d6618:	9301      	str	r3, [sp, #4]
   d661a:	bd08      	pop	{r3, pc}
   d661c:	0003022c 	.word	0x0003022c

000d6620 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d6620:	b508      	push	{r3, lr}
   d6622:	4b02      	ldr	r3, [pc, #8]	; (d662c <HAL_Interrupts_Detach+0xc>)
   d6624:	681b      	ldr	r3, [r3, #0]
   d6626:	69db      	ldr	r3, [r3, #28]
   d6628:	9301      	str	r3, [sp, #4]
   d662a:	bd08      	pop	{r3, pc}
   d662c:	0003022c 	.word	0x0003022c

000d6630 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d6630:	b508      	push	{r3, lr}
   d6632:	4b02      	ldr	r3, [pc, #8]	; (d663c <hal_adc_read+0xc>)
   d6634:	681b      	ldr	r3, [r3, #0]
   d6636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6638:	9301      	str	r3, [sp, #4]
   d663a:	bd08      	pop	{r3, pc}
   d663c:	0003022c 	.word	0x0003022c

000d6640 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d6640:	b508      	push	{r3, lr}
   d6642:	4b02      	ldr	r3, [pc, #8]	; (d664c <hal_i2c_begin+0xc>)
   d6644:	681b      	ldr	r3, [r3, #0]
   d6646:	68db      	ldr	r3, [r3, #12]
   d6648:	9301      	str	r3, [sp, #4]
   d664a:	bd08      	pop	{r3, pc}
   d664c:	00030228 	.word	0x00030228

000d6650 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d6650:	b508      	push	{r3, lr}
   d6652:	4b02      	ldr	r3, [pc, #8]	; (d665c <hal_i2c_begin_transmission+0xc>)
   d6654:	681b      	ldr	r3, [r3, #0]
   d6656:	699b      	ldr	r3, [r3, #24]
   d6658:	9301      	str	r3, [sp, #4]
   d665a:	bd08      	pop	{r3, pc}
   d665c:	00030228 	.word	0x00030228

000d6660 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6660:	b508      	push	{r3, lr}
   d6662:	4b02      	ldr	r3, [pc, #8]	; (d666c <hal_i2c_end_transmission+0xc>)
   d6664:	681b      	ldr	r3, [r3, #0]
   d6666:	69db      	ldr	r3, [r3, #28]
   d6668:	9301      	str	r3, [sp, #4]
   d666a:	bd08      	pop	{r3, pc}
   d666c:	00030228 	.word	0x00030228

000d6670 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6670:	b508      	push	{r3, lr}
   d6672:	4b02      	ldr	r3, [pc, #8]	; (d667c <hal_i2c_write+0xc>)
   d6674:	681b      	ldr	r3, [r3, #0]
   d6676:	6a1b      	ldr	r3, [r3, #32]
   d6678:	9301      	str	r3, [sp, #4]
   d667a:	bd08      	pop	{r3, pc}
   d667c:	00030228 	.word	0x00030228

000d6680 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6680:	b508      	push	{r3, lr}
   d6682:	4b02      	ldr	r3, [pc, #8]	; (d668c <hal_i2c_available+0xc>)
   d6684:	681b      	ldr	r3, [r3, #0]
   d6686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6688:	9301      	str	r3, [sp, #4]
   d668a:	bd08      	pop	{r3, pc}
   d668c:	00030228 	.word	0x00030228

000d6690 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6690:	b508      	push	{r3, lr}
   d6692:	4b02      	ldr	r3, [pc, #8]	; (d669c <hal_i2c_read+0xc>)
   d6694:	681b      	ldr	r3, [r3, #0]
   d6696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6698:	9301      	str	r3, [sp, #4]
   d669a:	bd08      	pop	{r3, pc}
   d669c:	00030228 	.word	0x00030228

000d66a0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d66a0:	b508      	push	{r3, lr}
   d66a2:	4b02      	ldr	r3, [pc, #8]	; (d66ac <hal_i2c_peek+0xc>)
   d66a4:	681b      	ldr	r3, [r3, #0]
   d66a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d66a8:	9301      	str	r3, [sp, #4]
   d66aa:	bd08      	pop	{r3, pc}
   d66ac:	00030228 	.word	0x00030228

000d66b0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d66b0:	b508      	push	{r3, lr}
   d66b2:	4b02      	ldr	r3, [pc, #8]	; (d66bc <hal_i2c_flush+0xc>)
   d66b4:	681b      	ldr	r3, [r3, #0]
   d66b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d66b8:	9301      	str	r3, [sp, #4]
   d66ba:	bd08      	pop	{r3, pc}
   d66bc:	00030228 	.word	0x00030228

000d66c0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d66c0:	b508      	push	{r3, lr}
   d66c2:	4b02      	ldr	r3, [pc, #8]	; (d66cc <hal_i2c_is_enabled+0xc>)
   d66c4:	681b      	ldr	r3, [r3, #0]
   d66c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d66c8:	9301      	str	r3, [sp, #4]
   d66ca:	bd08      	pop	{r3, pc}
   d66cc:	00030228 	.word	0x00030228

000d66d0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d66d0:	b508      	push	{r3, lr}
   d66d2:	4b02      	ldr	r3, [pc, #8]	; (d66dc <hal_i2c_init+0xc>)
   d66d4:	681b      	ldr	r3, [r3, #0]
   d66d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d66d8:	9301      	str	r3, [sp, #4]
   d66da:	bd08      	pop	{r3, pc}
   d66dc:	00030228 	.word	0x00030228

000d66e0 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d66e0:	b508      	push	{r3, lr}
   d66e2:	4b02      	ldr	r3, [pc, #8]	; (d66ec <hal_i2c_lock+0xc>)
   d66e4:	681b      	ldr	r3, [r3, #0]
   d66e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d66e8:	9301      	str	r3, [sp, #4]
   d66ea:	bd08      	pop	{r3, pc}
   d66ec:	00030228 	.word	0x00030228

000d66f0 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d66f0:	b508      	push	{r3, lr}
   d66f2:	4b02      	ldr	r3, [pc, #8]	; (d66fc <hal_i2c_unlock+0xc>)
   d66f4:	681b      	ldr	r3, [r3, #0]
   d66f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d66f8:	9301      	str	r3, [sp, #4]
   d66fa:	bd08      	pop	{r3, pc}
   d66fc:	00030228 	.word	0x00030228

000d6700 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d6700:	b508      	push	{r3, lr}
   d6702:	4b02      	ldr	r3, [pc, #8]	; (d670c <hal_i2c_request_ex+0xc>)
   d6704:	681b      	ldr	r3, [r3, #0]
   d6706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6708:	9301      	str	r3, [sp, #4]
   d670a:	bd08      	pop	{r3, pc}
   d670c:	00030228 	.word	0x00030228

000d6710 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6710:	b508      	push	{r3, lr}
   d6712:	4b02      	ldr	r3, [pc, #8]	; (d671c <inet_inet_ntop+0xc>)
   d6714:	681b      	ldr	r3, [r3, #0]
   d6716:	695b      	ldr	r3, [r3, #20]
   d6718:	9301      	str	r3, [sp, #4]
   d671a:	bd08      	pop	{r3, pc}
   d671c:	00030264 	.word	0x00030264

000d6720 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6720:	b508      	push	{r3, lr}
   d6722:	4b02      	ldr	r3, [pc, #8]	; (d672c <netdb_freeaddrinfo+0xc>)
   d6724:	681b      	ldr	r3, [r3, #0]
   d6726:	689b      	ldr	r3, [r3, #8]
   d6728:	9301      	str	r3, [sp, #4]
   d672a:	bd08      	pop	{r3, pc}
   d672c:	00030268 	.word	0x00030268

000d6730 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6730:	b508      	push	{r3, lr}
   d6732:	4b02      	ldr	r3, [pc, #8]	; (d673c <netdb_getaddrinfo+0xc>)
   d6734:	681b      	ldr	r3, [r3, #0]
   d6736:	68db      	ldr	r3, [r3, #12]
   d6738:	9301      	str	r3, [sp, #4]
   d673a:	bd08      	pop	{r3, pc}
   d673c:	00030268 	.word	0x00030268

000d6740 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6740:	b508      	push	{r3, lr}
   d6742:	4b02      	ldr	r3, [pc, #8]	; (d674c <hal_spi_init+0xc>)
   d6744:	681b      	ldr	r3, [r3, #0]
   d6746:	69db      	ldr	r3, [r3, #28]
   d6748:	9301      	str	r3, [sp, #4]
   d674a:	bd08      	pop	{r3, pc}
   d674c:	00030230 	.word	0x00030230

000d6750 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6750:	b508      	push	{r3, lr}
   d6752:	4b02      	ldr	r3, [pc, #8]	; (d675c <hal_spi_is_enabled+0xc>)
   d6754:	681b      	ldr	r3, [r3, #0]
   d6756:	6a1b      	ldr	r3, [r3, #32]
   d6758:	9301      	str	r3, [sp, #4]
   d675a:	bd08      	pop	{r3, pc}
   d675c:	00030230 	.word	0x00030230

000d6760 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6760:	b508      	push	{r3, lr}
   d6762:	4b02      	ldr	r3, [pc, #8]	; (d676c <hal_usart_init+0xc>)
   d6764:	681b      	ldr	r3, [r3, #0]
   d6766:	681b      	ldr	r3, [r3, #0]
   d6768:	9301      	str	r3, [sp, #4]
   d676a:	bd08      	pop	{r3, pc}
   d676c:	0003023c 	.word	0x0003023c

000d6770 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6770:	b508      	push	{r3, lr}
   d6772:	4b02      	ldr	r3, [pc, #8]	; (d677c <hal_usart_write+0xc>)
   d6774:	681b      	ldr	r3, [r3, #0]
   d6776:	68db      	ldr	r3, [r3, #12]
   d6778:	9301      	str	r3, [sp, #4]
   d677a:	bd08      	pop	{r3, pc}
   d677c:	0003023c 	.word	0x0003023c

000d6780 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6780:	b508      	push	{r3, lr}
   d6782:	4b02      	ldr	r3, [pc, #8]	; (d678c <hal_usart_available+0xc>)
   d6784:	681b      	ldr	r3, [r3, #0]
   d6786:	691b      	ldr	r3, [r3, #16]
   d6788:	9301      	str	r3, [sp, #4]
   d678a:	bd08      	pop	{r3, pc}
   d678c:	0003023c 	.word	0x0003023c

000d6790 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6790:	b508      	push	{r3, lr}
   d6792:	4b02      	ldr	r3, [pc, #8]	; (d679c <hal_usart_read+0xc>)
   d6794:	681b      	ldr	r3, [r3, #0]
   d6796:	695b      	ldr	r3, [r3, #20]
   d6798:	9301      	str	r3, [sp, #4]
   d679a:	bd08      	pop	{r3, pc}
   d679c:	0003023c 	.word	0x0003023c

000d67a0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d67a0:	b508      	push	{r3, lr}
   d67a2:	4b02      	ldr	r3, [pc, #8]	; (d67ac <hal_usart_peek+0xc>)
   d67a4:	681b      	ldr	r3, [r3, #0]
   d67a6:	699b      	ldr	r3, [r3, #24]
   d67a8:	9301      	str	r3, [sp, #4]
   d67aa:	bd08      	pop	{r3, pc}
   d67ac:	0003023c 	.word	0x0003023c

000d67b0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d67b0:	b508      	push	{r3, lr}
   d67b2:	4b02      	ldr	r3, [pc, #8]	; (d67bc <hal_usart_flush+0xc>)
   d67b4:	681b      	ldr	r3, [r3, #0]
   d67b6:	69db      	ldr	r3, [r3, #28]
   d67b8:	9301      	str	r3, [sp, #4]
   d67ba:	bd08      	pop	{r3, pc}
   d67bc:	0003023c 	.word	0x0003023c

000d67c0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d67c0:	b508      	push	{r3, lr}
   d67c2:	4b02      	ldr	r3, [pc, #8]	; (d67cc <hal_usart_is_enabled+0xc>)
   d67c4:	681b      	ldr	r3, [r3, #0]
   d67c6:	6a1b      	ldr	r3, [r3, #32]
   d67c8:	9301      	str	r3, [sp, #4]
   d67ca:	bd08      	pop	{r3, pc}
   d67cc:	0003023c 	.word	0x0003023c

000d67d0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d67d0:	b508      	push	{r3, lr}
   d67d2:	4b02      	ldr	r3, [pc, #8]	; (d67dc <hal_usart_available_data_for_write+0xc>)
   d67d4:	681b      	ldr	r3, [r3, #0]
   d67d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d67d8:	9301      	str	r3, [sp, #4]
   d67da:	bd08      	pop	{r3, pc}
   d67dc:	0003023c 	.word	0x0003023c

000d67e0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d67e0:	b508      	push	{r3, lr}
   d67e2:	4b02      	ldr	r3, [pc, #8]	; (d67ec <HAL_USB_USART_Init+0xc>)
   d67e4:	681b      	ldr	r3, [r3, #0]
   d67e6:	681b      	ldr	r3, [r3, #0]
   d67e8:	9301      	str	r3, [sp, #4]
   d67ea:	bd08      	pop	{r3, pc}
   d67ec:	0003024c 	.word	0x0003024c

000d67f0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d67f0:	b508      	push	{r3, lr}
   d67f2:	4b02      	ldr	r3, [pc, #8]	; (d67fc <HAL_USB_USART_Available_Data+0xc>)
   d67f4:	681b      	ldr	r3, [r3, #0]
   d67f6:	691b      	ldr	r3, [r3, #16]
   d67f8:	9301      	str	r3, [sp, #4]
   d67fa:	bd08      	pop	{r3, pc}
   d67fc:	0003024c 	.word	0x0003024c

000d6800 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6800:	b508      	push	{r3, lr}
   d6802:	4b02      	ldr	r3, [pc, #8]	; (d680c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6804:	681b      	ldr	r3, [r3, #0]
   d6806:	695b      	ldr	r3, [r3, #20]
   d6808:	9301      	str	r3, [sp, #4]
   d680a:	bd08      	pop	{r3, pc}
   d680c:	0003024c 	.word	0x0003024c

000d6810 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6810:	b508      	push	{r3, lr}
   d6812:	4b02      	ldr	r3, [pc, #8]	; (d681c <HAL_USB_USART_Receive_Data+0xc>)
   d6814:	681b      	ldr	r3, [r3, #0]
   d6816:	699b      	ldr	r3, [r3, #24]
   d6818:	9301      	str	r3, [sp, #4]
   d681a:	bd08      	pop	{r3, pc}
   d681c:	0003024c 	.word	0x0003024c

000d6820 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6820:	b508      	push	{r3, lr}
   d6822:	4b02      	ldr	r3, [pc, #8]	; (d682c <HAL_USB_USART_Send_Data+0xc>)
   d6824:	681b      	ldr	r3, [r3, #0]
   d6826:	69db      	ldr	r3, [r3, #28]
   d6828:	9301      	str	r3, [sp, #4]
   d682a:	bd08      	pop	{r3, pc}
   d682c:	0003024c 	.word	0x0003024c

000d6830 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6830:	b508      	push	{r3, lr}
   d6832:	4b02      	ldr	r3, [pc, #8]	; (d683c <HAL_USB_USART_Flush_Data+0xc>)
   d6834:	681b      	ldr	r3, [r3, #0]
   d6836:	6a1b      	ldr	r3, [r3, #32]
   d6838:	9301      	str	r3, [sp, #4]
   d683a:	bd08      	pop	{r3, pc}
   d683c:	0003024c 	.word	0x0003024c

000d6840 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6840:	b508      	push	{r3, lr}
   d6842:	4b02      	ldr	r3, [pc, #8]	; (d684c <panic_+0xc>)
   d6844:	681b      	ldr	r3, [r3, #0]
   d6846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6848:	9301      	str	r3, [sp, #4]
   d684a:	bd08      	pop	{r3, pc}
   d684c:	00030260 	.word	0x00030260

000d6850 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d6850:	b508      	push	{r3, lr}
   d6852:	4b02      	ldr	r3, [pc, #8]	; (d685c <log_message_v+0xc>)
   d6854:	681b      	ldr	r3, [r3, #0]
   d6856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6858:	9301      	str	r3, [sp, #4]
   d685a:	bd08      	pop	{r3, pc}
   d685c:	00030260 	.word	0x00030260

000d6860 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6860:	b508      	push	{r3, lr}
   d6862:	4b02      	ldr	r3, [pc, #8]	; (d686c <system_mode+0xc>)
   d6864:	681b      	ldr	r3, [r3, #0]
   d6866:	681b      	ldr	r3, [r3, #0]
   d6868:	9301      	str	r3, [sp, #4]
   d686a:	bd08      	pop	{r3, pc}
   d686c:	00030220 	.word	0x00030220

000d6870 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6870:	b508      	push	{r3, lr}
   d6872:	4b02      	ldr	r3, [pc, #8]	; (d687c <set_system_mode+0xc>)
   d6874:	681b      	ldr	r3, [r3, #0]
   d6876:	685b      	ldr	r3, [r3, #4]
   d6878:	9301      	str	r3, [sp, #4]
   d687a:	bd08      	pop	{r3, pc}
   d687c:	00030220 	.word	0x00030220

000d6880 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6880:	b508      	push	{r3, lr}
   d6882:	4b02      	ldr	r3, [pc, #8]	; (d688c <system_delay_ms+0xc>)
   d6884:	681b      	ldr	r3, [r3, #0]
   d6886:	695b      	ldr	r3, [r3, #20]
   d6888:	9301      	str	r3, [sp, #4]
   d688a:	bd08      	pop	{r3, pc}
   d688c:	00030220 	.word	0x00030220

000d6890 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6890:	b508      	push	{r3, lr}
   d6892:	4b02      	ldr	r3, [pc, #8]	; (d689c <system_thread_set_state+0xc>)
   d6894:	681b      	ldr	r3, [r3, #0]
   d6896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6898:	9301      	str	r3, [sp, #4]
   d689a:	bd08      	pop	{r3, pc}
   d689c:	00030220 	.word	0x00030220

000d68a0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d68a0:	b508      	push	{r3, lr}
   d68a2:	4b02      	ldr	r3, [pc, #8]	; (d68ac <application_thread_current+0xc>)
   d68a4:	681b      	ldr	r3, [r3, #0]
   d68a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d68a8:	9301      	str	r3, [sp, #4]
   d68aa:	bd08      	pop	{r3, pc}
   d68ac:	00030220 	.word	0x00030220

000d68b0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d68b0:	b508      	push	{r3, lr}
   d68b2:	4b02      	ldr	r3, [pc, #8]	; (d68bc <application_thread_invoke+0xc>)
   d68b4:	681b      	ldr	r3, [r3, #0]
   d68b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d68b8:	9301      	str	r3, [sp, #4]
   d68ba:	bd08      	pop	{r3, pc}
   d68bc:	00030220 	.word	0x00030220

000d68c0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d68c0:	b508      	push	{r3, lr}
   d68c2:	4b02      	ldr	r3, [pc, #8]	; (d68cc <system_thread_get_state+0xc>)
   d68c4:	681b      	ldr	r3, [r3, #0]
   d68c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d68c8:	9301      	str	r3, [sp, #4]
   d68ca:	bd08      	pop	{r3, pc}
   d68cc:	00030220 	.word	0x00030220

000d68d0 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d68d0:	b508      	push	{r3, lr}
   d68d2:	4b02      	ldr	r3, [pc, #8]	; (d68dc <system_notify_time_changed+0xc>)
   d68d4:	681b      	ldr	r3, [r3, #0]
   d68d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d68d8:	9301      	str	r3, [sp, #4]
   d68da:	bd08      	pop	{r3, pc}
   d68dc:	00030220 	.word	0x00030220

000d68e0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d68e0:	b508      	push	{r3, lr}
   d68e2:	4b03      	ldr	r3, [pc, #12]	; (d68f0 <system_ctrl_set_app_request_handler+0x10>)
   d68e4:	681b      	ldr	r3, [r3, #0]
   d68e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d68ea:	9301      	str	r3, [sp, #4]
   d68ec:	bd08      	pop	{r3, pc}
   d68ee:	0000      	.short	0x0000
   d68f0:	00030220 	.word	0x00030220

000d68f4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d68f4:	b508      	push	{r3, lr}
   d68f6:	4b03      	ldr	r3, [pc, #12]	; (d6904 <system_ctrl_set_result+0x10>)
   d68f8:	681b      	ldr	r3, [r3, #0]
   d68fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d68fe:	9301      	str	r3, [sp, #4]
   d6900:	bd08      	pop	{r3, pc}
   d6902:	0000      	.short	0x0000
   d6904:	00030220 	.word	0x00030220

000d6908 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d6908:	b508      	push	{r3, lr}
   d690a:	4b03      	ldr	r3, [pc, #12]	; (d6918 <system_reset+0x10>)
   d690c:	681b      	ldr	r3, [r3, #0]
   d690e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d6912:	9301      	str	r3, [sp, #4]
   d6914:	bd08      	pop	{r3, pc}
   d6916:	0000      	.short	0x0000
   d6918:	00030220 	.word	0x00030220

000d691c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d691c:	b508      	push	{r3, lr}
   d691e:	4b02      	ldr	r3, [pc, #8]	; (d6928 <spark_variable+0xc>)
   d6920:	681b      	ldr	r3, [r3, #0]
   d6922:	681b      	ldr	r3, [r3, #0]
   d6924:	9301      	str	r3, [sp, #4]
   d6926:	bd08      	pop	{r3, pc}
   d6928:	00030244 	.word	0x00030244

000d692c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d692c:	b508      	push	{r3, lr}
   d692e:	4b02      	ldr	r3, [pc, #8]	; (d6938 <spark_function+0xc>)
   d6930:	681b      	ldr	r3, [r3, #0]
   d6932:	685b      	ldr	r3, [r3, #4]
   d6934:	9301      	str	r3, [sp, #4]
   d6936:	bd08      	pop	{r3, pc}
   d6938:	00030244 	.word	0x00030244

000d693c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d693c:	b508      	push	{r3, lr}
   d693e:	4b02      	ldr	r3, [pc, #8]	; (d6948 <spark_process+0xc>)
   d6940:	681b      	ldr	r3, [r3, #0]
   d6942:	689b      	ldr	r3, [r3, #8]
   d6944:	9301      	str	r3, [sp, #4]
   d6946:	bd08      	pop	{r3, pc}
   d6948:	00030244 	.word	0x00030244

000d694c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d694c:	b508      	push	{r3, lr}
   d694e:	4b02      	ldr	r3, [pc, #8]	; (d6958 <spark_cloud_flag_connected+0xc>)
   d6950:	681b      	ldr	r3, [r3, #0]
   d6952:	695b      	ldr	r3, [r3, #20]
   d6954:	9301      	str	r3, [sp, #4]
   d6956:	bd08      	pop	{r3, pc}
   d6958:	00030244 	.word	0x00030244

000d695c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d695c:	b508      	push	{r3, lr}
   d695e:	4b02      	ldr	r3, [pc, #8]	; (d6968 <spark_deviceID+0xc>)
   d6960:	681b      	ldr	r3, [r3, #0]
   d6962:	69db      	ldr	r3, [r3, #28]
   d6964:	9301      	str	r3, [sp, #4]
   d6966:	bd08      	pop	{r3, pc}
   d6968:	00030244 	.word	0x00030244

000d696c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d696c:	b508      	push	{r3, lr}
   d696e:	4b02      	ldr	r3, [pc, #8]	; (d6978 <spark_send_event+0xc>)
   d6970:	681b      	ldr	r3, [r3, #0]
   d6972:	6a1b      	ldr	r3, [r3, #32]
   d6974:	9301      	str	r3, [sp, #4]
   d6976:	bd08      	pop	{r3, pc}
   d6978:	00030244 	.word	0x00030244

000d697c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d697c:	b508      	push	{r3, lr}
   d697e:	4b02      	ldr	r3, [pc, #8]	; (d6988 <spark_subscribe+0xc>)
   d6980:	681b      	ldr	r3, [r3, #0]
   d6982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6984:	9301      	str	r3, [sp, #4]
   d6986:	bd08      	pop	{r3, pc}
   d6988:	00030244 	.word	0x00030244

000d698c <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d698c:	b508      	push	{r3, lr}
   d698e:	4b02      	ldr	r3, [pc, #8]	; (d6998 <spark_sync_time+0xc>)
   d6990:	681b      	ldr	r3, [r3, #0]
   d6992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6994:	9301      	str	r3, [sp, #4]
   d6996:	bd08      	pop	{r3, pc}
   d6998:	00030244 	.word	0x00030244

000d699c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d699c:	b508      	push	{r3, lr}
   d699e:	4b02      	ldr	r3, [pc, #8]	; (d69a8 <spark_sync_time_pending+0xc>)
   d69a0:	681b      	ldr	r3, [r3, #0]
   d69a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d69a4:	9301      	str	r3, [sp, #4]
   d69a6:	bd08      	pop	{r3, pc}
   d69a8:	00030244 	.word	0x00030244

000d69ac <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d69ac:	b508      	push	{r3, lr}
   d69ae:	4b02      	ldr	r3, [pc, #8]	; (d69b8 <spark_sync_time_last+0xc>)
   d69b0:	681b      	ldr	r3, [r3, #0]
   d69b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d69b4:	9301      	str	r3, [sp, #4]
   d69b6:	bd08      	pop	{r3, pc}
   d69b8:	00030244 	.word	0x00030244

000d69bc <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d69bc:	b508      	push	{r3, lr}
   d69be:	4b02      	ldr	r3, [pc, #8]	; (d69c8 <spark_set_connection_property+0xc>)
   d69c0:	681b      	ldr	r3, [r3, #0]
   d69c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d69c4:	9301      	str	r3, [sp, #4]
   d69c6:	bd08      	pop	{r3, pc}
   d69c8:	00030244 	.word	0x00030244

000d69cc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d69cc:	b508      	push	{r3, lr}
   d69ce:	4b02      	ldr	r3, [pc, #8]	; (d69d8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d69d0:	681b      	ldr	r3, [r3, #0]
   d69d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d69d4:	9301      	str	r3, [sp, #4]
   d69d6:	bd08      	pop	{r3, pc}
   d69d8:	00030244 	.word	0x00030244

000d69dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d69dc:	b508      	push	{r3, lr}
   d69de:	4b02      	ldr	r3, [pc, #8]	; (d69e8 <network_connect+0xc>)
   d69e0:	681b      	ldr	r3, [r3, #0]
   d69e2:	685b      	ldr	r3, [r3, #4]
   d69e4:	9301      	str	r3, [sp, #4]
   d69e6:	bd08      	pop	{r3, pc}
   d69e8:	00030240 	.word	0x00030240

000d69ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d69ec:	b508      	push	{r3, lr}
   d69ee:	4b02      	ldr	r3, [pc, #8]	; (d69f8 <network_connecting+0xc>)
   d69f0:	681b      	ldr	r3, [r3, #0]
   d69f2:	689b      	ldr	r3, [r3, #8]
   d69f4:	9301      	str	r3, [sp, #4]
   d69f6:	bd08      	pop	{r3, pc}
   d69f8:	00030240 	.word	0x00030240

000d69fc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d69fc:	b508      	push	{r3, lr}
   d69fe:	4b02      	ldr	r3, [pc, #8]	; (d6a08 <network_disconnect+0xc>)
   d6a00:	681b      	ldr	r3, [r3, #0]
   d6a02:	68db      	ldr	r3, [r3, #12]
   d6a04:	9301      	str	r3, [sp, #4]
   d6a06:	bd08      	pop	{r3, pc}
   d6a08:	00030240 	.word	0x00030240

000d6a0c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6a0c:	b508      	push	{r3, lr}
   d6a0e:	4b02      	ldr	r3, [pc, #8]	; (d6a18 <network_ready+0xc>)
   d6a10:	681b      	ldr	r3, [r3, #0]
   d6a12:	691b      	ldr	r3, [r3, #16]
   d6a14:	9301      	str	r3, [sp, #4]
   d6a16:	bd08      	pop	{r3, pc}
   d6a18:	00030240 	.word	0x00030240

000d6a1c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6a1c:	b508      	push	{r3, lr}
   d6a1e:	4b02      	ldr	r3, [pc, #8]	; (d6a28 <network_on+0xc>)
   d6a20:	681b      	ldr	r3, [r3, #0]
   d6a22:	695b      	ldr	r3, [r3, #20]
   d6a24:	9301      	str	r3, [sp, #4]
   d6a26:	bd08      	pop	{r3, pc}
   d6a28:	00030240 	.word	0x00030240

000d6a2c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6a2c:	b508      	push	{r3, lr}
   d6a2e:	4b02      	ldr	r3, [pc, #8]	; (d6a38 <network_off+0xc>)
   d6a30:	681b      	ldr	r3, [r3, #0]
   d6a32:	699b      	ldr	r3, [r3, #24]
   d6a34:	9301      	str	r3, [sp, #4]
   d6a36:	bd08      	pop	{r3, pc}
   d6a38:	00030240 	.word	0x00030240

000d6a3c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6a3c:	b508      	push	{r3, lr}
   d6a3e:	4b02      	ldr	r3, [pc, #8]	; (d6a48 <network_listen+0xc>)
   d6a40:	681b      	ldr	r3, [r3, #0]
   d6a42:	69db      	ldr	r3, [r3, #28]
   d6a44:	9301      	str	r3, [sp, #4]
   d6a46:	bd08      	pop	{r3, pc}
   d6a48:	00030240 	.word	0x00030240

000d6a4c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6a4c:	b508      	push	{r3, lr}
   d6a4e:	4b02      	ldr	r3, [pc, #8]	; (d6a58 <network_listening+0xc>)
   d6a50:	681b      	ldr	r3, [r3, #0]
   d6a52:	6a1b      	ldr	r3, [r3, #32]
   d6a54:	9301      	str	r3, [sp, #4]
   d6a56:	bd08      	pop	{r3, pc}
   d6a58:	00030240 	.word	0x00030240

000d6a5c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6a5c:	b508      	push	{r3, lr}
   d6a5e:	4b02      	ldr	r3, [pc, #8]	; (d6a68 <network_set_listen_timeout+0xc>)
   d6a60:	681b      	ldr	r3, [r3, #0]
   d6a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6a64:	9301      	str	r3, [sp, #4]
   d6a66:	bd08      	pop	{r3, pc}
   d6a68:	00030240 	.word	0x00030240

000d6a6c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6a6c:	b508      	push	{r3, lr}
   d6a6e:	4b02      	ldr	r3, [pc, #8]	; (d6a78 <network_get_listen_timeout+0xc>)
   d6a70:	681b      	ldr	r3, [r3, #0]
   d6a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6a74:	9301      	str	r3, [sp, #4]
   d6a76:	bd08      	pop	{r3, pc}
   d6a78:	00030240 	.word	0x00030240

000d6a7c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6a7c:	b508      	push	{r3, lr}
   d6a7e:	4b02      	ldr	r3, [pc, #8]	; (d6a88 <malloc+0xc>)
   d6a80:	681b      	ldr	r3, [r3, #0]
   d6a82:	681b      	ldr	r3, [r3, #0]
   d6a84:	9301      	str	r3, [sp, #4]
   d6a86:	bd08      	pop	{r3, pc}
   d6a88:	0003021c 	.word	0x0003021c

000d6a8c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6a8c:	b508      	push	{r3, lr}
   d6a8e:	4b02      	ldr	r3, [pc, #8]	; (d6a98 <free+0xc>)
   d6a90:	681b      	ldr	r3, [r3, #0]
   d6a92:	685b      	ldr	r3, [r3, #4]
   d6a94:	9301      	str	r3, [sp, #4]
   d6a96:	bd08      	pop	{r3, pc}
   d6a98:	0003021c 	.word	0x0003021c

000d6a9c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6a9c:	b508      	push	{r3, lr}
   d6a9e:	4b02      	ldr	r3, [pc, #8]	; (d6aa8 <realloc+0xc>)
   d6aa0:	681b      	ldr	r3, [r3, #0]
   d6aa2:	689b      	ldr	r3, [r3, #8]
   d6aa4:	9301      	str	r3, [sp, #4]
   d6aa6:	bd08      	pop	{r3, pc}
   d6aa8:	0003021c 	.word	0x0003021c

000d6aac <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d6aac:	b508      	push	{r3, lr}
   d6aae:	4b02      	ldr	r3, [pc, #8]	; (d6ab8 <siprintf+0xc>)
   d6ab0:	681b      	ldr	r3, [r3, #0]
   d6ab2:	691b      	ldr	r3, [r3, #16]
   d6ab4:	9301      	str	r3, [sp, #4]
   d6ab6:	bd08      	pop	{r3, pc}
   d6ab8:	0003021c 	.word	0x0003021c

000d6abc <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6abc:	b508      	push	{r3, lr}
   d6abe:	4b02      	ldr	r3, [pc, #8]	; (d6ac8 <snprintf+0xc>)
   d6ac0:	681b      	ldr	r3, [r3, #0]
   d6ac2:	69db      	ldr	r3, [r3, #28]
   d6ac4:	9301      	str	r3, [sp, #4]
   d6ac6:	bd08      	pop	{r3, pc}
   d6ac8:	0003021c 	.word	0x0003021c

000d6acc <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6acc:	b508      	push	{r3, lr}
   d6ace:	4b02      	ldr	r3, [pc, #8]	; (d6ad8 <abort+0xc>)
   d6ad0:	681b      	ldr	r3, [r3, #0]
   d6ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6ad4:	9301      	str	r3, [sp, #4]
   d6ad6:	bd08      	pop	{r3, pc}
   d6ad8:	0003021c 	.word	0x0003021c

000d6adc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6adc:	b508      	push	{r3, lr}
   d6ade:	4b02      	ldr	r3, [pc, #8]	; (d6ae8 <_malloc_r+0xc>)
   d6ae0:	681b      	ldr	r3, [r3, #0]
   d6ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6ae4:	9301      	str	r3, [sp, #4]
   d6ae6:	bd08      	pop	{r3, pc}
   d6ae8:	0003021c 	.word	0x0003021c

000d6aec <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6aec:	b508      	push	{r3, lr}
   d6aee:	4b02      	ldr	r3, [pc, #8]	; (d6af8 <__errno+0xc>)
   d6af0:	681b      	ldr	r3, [r3, #0]
   d6af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6af4:	9301      	str	r3, [sp, #4]
   d6af6:	bd08      	pop	{r3, pc}
   d6af8:	0003021c 	.word	0x0003021c

000d6afc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6afc:	b508      	push	{r3, lr}
   d6afe:	4b02      	ldr	r3, [pc, #8]	; (d6b08 <newlib_impure_ptr_callback+0xc>)
   d6b00:	681b      	ldr	r3, [r3, #0]
   d6b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6b04:	9301      	str	r3, [sp, #4]
   d6b06:	bd08      	pop	{r3, pc}
   d6b08:	0003021c 	.word	0x0003021c

000d6b0c <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d6b0c:	b508      	push	{r3, lr}
   d6b0e:	4b02      	ldr	r3, [pc, #8]	; (d6b18 <strftime+0xc>)
   d6b10:	681b      	ldr	r3, [r3, #0]
   d6b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6b14:	9301      	str	r3, [sp, #4]
   d6b16:	bd08      	pop	{r3, pc}
   d6b18:	0003021c 	.word	0x0003021c

000d6b1c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d6b1c:	b508      	push	{r3, lr}
   d6b1e:	4b02      	ldr	r3, [pc, #8]	; (d6b28 <localtime_r+0xc>)
   d6b20:	681b      	ldr	r3, [r3, #0]
   d6b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6b24:	9301      	str	r3, [sp, #4]
   d6b26:	bd08      	pop	{r3, pc}
   d6b28:	0003021c 	.word	0x0003021c

000d6b2c <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d6b2c:	b508      	push	{r3, lr}
   d6b2e:	4b02      	ldr	r3, [pc, #8]	; (d6b38 <gmtime_r+0xc>)
   d6b30:	681b      	ldr	r3, [r3, #0]
   d6b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6b34:	9301      	str	r3, [sp, #4]
   d6b36:	bd08      	pop	{r3, pc}
   d6b38:	0003021c 	.word	0x0003021c

000d6b3c <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d6b3c:	b508      	push	{r3, lr}
   d6b3e:	4b02      	ldr	r3, [pc, #8]	; (d6b48 <mktime+0xc>)
   d6b40:	681b      	ldr	r3, [r3, #0]
   d6b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6b44:	9301      	str	r3, [sp, #4]
   d6b46:	bd08      	pop	{r3, pc}
   d6b48:	0003021c 	.word	0x0003021c

000d6b4c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6b4c:	2100      	movs	r1, #0
   d6b4e:	f7ff be97 	b.w	d6880 <system_delay_ms>

000d6b52 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d6b52:	b510      	push	{r4, lr}
      if (_M_empty())
   d6b54:	6883      	ldr	r3, [r0, #8]
   d6b56:	4604      	mov	r4, r0
   d6b58:	b90b      	cbnz	r3, d6b5e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d6b5a:	f001 fb3c 	bl	d81d6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6b5e:	68c3      	ldr	r3, [r0, #12]
   d6b60:	4798      	blx	r3
      if (_M_manager)
   d6b62:	68a3      	ldr	r3, [r4, #8]
   d6b64:	b11b      	cbz	r3, d6b6e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6b66:	2203      	movs	r2, #3
   d6b68:	4621      	mov	r1, r4
   d6b6a:	4620      	mov	r0, r4
   d6b6c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d6b6e:	4620      	mov	r0, r4
   d6b70:	2110      	movs	r1, #16
}
   d6b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d6b76:	f001 bb28 	b.w	d81ca <_ZdlPvj>

000d6b7a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6b7a:	b510      	push	{r4, lr}
          _M_dispose();
   d6b7c:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6b7e:	4604      	mov	r4, r0
          _M_dispose();
   d6b80:	689b      	ldr	r3, [r3, #8]
   d6b82:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6b84:	68a3      	ldr	r3, [r4, #8]
   d6b86:	3b01      	subs	r3, #1
   d6b88:	60a3      	str	r3, [r4, #8]
   d6b8a:	b92b      	cbnz	r3, d6b98 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d6b8c:	6823      	ldr	r3, [r4, #0]
   d6b8e:	4620      	mov	r0, r4
   d6b90:	68db      	ldr	r3, [r3, #12]
    }
   d6b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d6b96:	4718      	bx	r3
    }
   d6b98:	bd10      	pop	{r4, pc}

000d6b9a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6b9a:	b510      	push	{r4, lr}
   d6b9c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6b9e:	6800      	ldr	r0, [r0, #0]
   d6ba0:	b108      	cbz	r0, d6ba6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6ba2:	f7ff fcb5 	bl	d6510 <os_mutex_recursive_destroy>
    }
   d6ba6:	4620      	mov	r0, r4
   d6ba8:	bd10      	pop	{r4, pc}

000d6baa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d6baa:	680b      	ldr	r3, [r1, #0]
   d6bac:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6bae:	b113      	cbz	r3, d6bb6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d6bb0:	685a      	ldr	r2, [r3, #4]
   d6bb2:	3201      	adds	r2, #1
   d6bb4:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d6bb6:	4770      	bx	lr

000d6bb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d6bb8:	b510      	push	{r4, lr}
   d6bba:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d6bbc:	6800      	ldr	r0, [r0, #0]
   d6bbe:	b128      	cbz	r0, d6bcc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d6bc0:	6843      	ldr	r3, [r0, #4]
   d6bc2:	3b01      	subs	r3, #1
   d6bc4:	6043      	str	r3, [r0, #4]
   d6bc6:	b90b      	cbnz	r3, d6bcc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d6bc8:	f7ff ffd7 	bl	d6b7a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d6bcc:	4620      	mov	r0, r4
   d6bce:	bd10      	pop	{r4, pc}

000d6bd0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6bd0:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d6bd2:	4c06      	ldr	r4, [pc, #24]	; (d6bec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6bd4:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d6bd6:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6bd8:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6bda:	f7ff fc91 	bl	d6500 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6bde:	4620      	mov	r0, r4
   d6be0:	4a03      	ldr	r2, [pc, #12]	; (d6bf0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6be2:	4904      	ldr	r1, [pc, #16]	; (d6bf4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d6be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6be8:	f001 baea 	b.w	d81c0 <__aeabi_atexit>
   d6bec:	2003e608 	.word	0x2003e608
   d6bf0:	2003e038 	.word	0x2003e038
   d6bf4:	000d6b9b 	.word	0x000d6b9b

000d6bf8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6bf8:	4770      	bx	lr

000d6bfa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d6bfa:	2000      	movs	r0, #0
   d6bfc:	4770      	bx	lr

000d6bfe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6bfe:	b510      	push	{r4, lr}
   d6c00:	2110      	movs	r1, #16
   d6c02:	4604      	mov	r4, r0
   d6c04:	f001 fae1 	bl	d81ca <_ZdlPvj>
   d6c08:	4620      	mov	r0, r4
   d6c0a:	bd10      	pop	{r4, pc}

000d6c0c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d6c0c:	b508      	push	{r3, lr}
      { delete this; }
   d6c0e:	f7ff fff6 	bl	d6bfe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6c12:	bd08      	pop	{r3, pc}

000d6c14 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6c14:	b530      	push	{r4, r5, lr}
        type_(type) {
   d6c16:	2200      	movs	r2, #0
   d6c18:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d6c1c:	6002      	str	r2, [r0, #0]
   d6c1e:	8084      	strh	r4, [r0, #4]
   d6c20:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6c22:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6c24:	680c      	ldr	r4, [r1, #0]
   d6c26:	8085      	strh	r5, [r0, #4]
   d6c28:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6c2a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d6c2c:	bd30      	pop	{r4, r5, pc}

000d6c2e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6c2e:	b510      	push	{r4, lr}
   d6c30:	4604      	mov	r4, r0
    free((void*)msg_);
   d6c32:	6800      	ldr	r0, [r0, #0]
   d6c34:	f7ff ff2a 	bl	d6a8c <free>
}
   d6c38:	4620      	mov	r0, r4
   d6c3a:	bd10      	pop	{r4, pc}

000d6c3c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6c3c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6c3e:	68c4      	ldr	r4, [r0, #12]
   d6c40:	b1f4      	cbz	r4, d6c80 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d6c42:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6c44:	2b02      	cmp	r3, #2
   d6c46:	d103      	bne.n	d6c50 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6c48:	f104 000c 	add.w	r0, r4, #12
   d6c4c:	f7ff ffef 	bl	d6c2e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d6c50:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d6c52:	b135      	cbz	r5, d6c62 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d6c54:	4628      	mov	r0, r5
   d6c56:	f7fd fb1f 	bl	d4298 <_ZNSt14_Function_baseD1Ev>
   d6c5a:	2110      	movs	r1, #16
   d6c5c:	4628      	mov	r0, r5
   d6c5e:	f001 fab4 	bl	d81ca <_ZdlPvj>
   d6c62:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6c64:	b135      	cbz	r5, d6c74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6c66:	4628      	mov	r0, r5
   d6c68:	f7fd fb16 	bl	d4298 <_ZNSt14_Function_baseD1Ev>
   d6c6c:	2110      	movs	r1, #16
   d6c6e:	4628      	mov	r0, r5
   d6c70:	f001 faab 	bl	d81ca <_ZdlPvj>
   d6c74:	4620      	mov	r0, r4
   d6c76:	2114      	movs	r1, #20
   d6c78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6c7c:	f001 baa5 	b.w	d81ca <_ZdlPvj>
   d6c80:	bd38      	pop	{r3, r4, r5, pc}

000d6c82 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d6c82:	b510      	push	{r4, lr}
   d6c84:	b088      	sub	sp, #32
   d6c86:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d6c88:	4668      	mov	r0, sp
   d6c8a:	f000 fd54 	bl	d7736 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d6c8e:	4669      	mov	r1, sp
   d6c90:	a804      	add	r0, sp, #16
   d6c92:	f000 fd73 	bl	d777c <_ZN6StringC1ERKS_>
   d6c96:	a804      	add	r0, sp, #16
   d6c98:	47a0      	blx	r4
   d6c9a:	4604      	mov	r4, r0
   d6c9c:	a804      	add	r0, sp, #16
   d6c9e:	f000 fcff 	bl	d76a0 <_ZN6StringD1Ev>
    String p(param);
   d6ca2:	4668      	mov	r0, sp
   d6ca4:	f000 fcfc 	bl	d76a0 <_ZN6StringD1Ev>
}
   d6ca8:	4620      	mov	r0, r4
   d6caa:	b008      	add	sp, #32
   d6cac:	bd10      	pop	{r4, pc}

000d6cae <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d6cae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d6cb0:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d6cb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d6cb6:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d6cb8:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d6cba:	461a      	mov	r2, r3
   d6cbc:	4669      	mov	r1, sp
   d6cbe:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d6cc0:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d6cc4:	f8ad 4000 	strh.w	r4, [sp]
   d6cc8:	f7ff fe30 	bl	d692c <spark_function>
}
   d6ccc:	b004      	add	sp, #16
   d6cce:	bd10      	pop	{r4, pc}

000d6cd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6cd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6cd2:	460e      	mov	r6, r1
   d6cd4:	4604      	mov	r4, r0
   d6cd6:	f856 3b04 	ldr.w	r3, [r6], #4
   d6cda:	9300      	str	r3, [sp, #0]
   d6cdc:	460d      	mov	r5, r1
   d6cde:	a801      	add	r0, sp, #4
   d6ce0:	4631      	mov	r1, r6
   d6ce2:	f7ff ff62 	bl	d6baa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6ce6:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6ce8:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d6cea:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6cec:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d6cee:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d6cf0:	2300      	movs	r3, #0
   d6cf2:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6cf4:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d6cf6:	f7ff ff5f 	bl	d6bb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6cfa:	4630      	mov	r0, r6
   d6cfc:	f7ff ff5c 	bl	d6bb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d6d00:	4628      	mov	r0, r5
   d6d02:	2108      	movs	r1, #8
   d6d04:	f001 fa61 	bl	d81ca <_ZdlPvj>
        return p;
    }
   d6d08:	4620      	mov	r0, r4
   d6d0a:	b002      	add	sp, #8
   d6d0c:	bd70      	pop	{r4, r5, r6, pc}

000d6d0e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d6d0e:	b513      	push	{r0, r1, r4, lr}
   d6d10:	460b      	mov	r3, r1
   d6d12:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d14:	e9d0 0100 	ldrd	r0, r1, [r0]
   d6d18:	466c      	mov	r4, sp
   d6d1a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6d1e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6d22:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6d26:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6d2a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6d2e:	b002      	add	sp, #8
   d6d30:	bd10      	pop	{r4, pc}

000d6d32 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d6d32:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6d34:	b510      	push	{r4, lr}
      if (_M_empty())
   d6d36:	b90a      	cbnz	r2, d6d3c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6d38:	f001 fa4d 	bl	d81d6 <_ZSt25__throw_bad_function_callv>
    }
   d6d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6d40:	68c3      	ldr	r3, [r0, #12]
   d6d42:	4718      	bx	r3

000d6d44 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6d44:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6d46:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d6d48:	f100 0110 	add.w	r1, r0, #16
   d6d4c:	f7ff fff1 	bl	d6d32 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d6d50:	bd08      	pop	{r3, pc}

000d6d52 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d6d52:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6d54:	b510      	push	{r4, lr}
      if (_M_empty())
   d6d56:	b90a      	cbnz	r2, d6d5c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6d58:	f001 fa3d 	bl	d81d6 <_ZSt25__throw_bad_function_callv>
    }
   d6d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6d60:	68c3      	ldr	r3, [r0, #12]
   d6d62:	4718      	bx	r3

000d6d64 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6d64:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6d66:	6800      	ldr	r0, [r0, #0]
   d6d68:	f100 0110 	add.w	r1, r0, #16
   d6d6c:	f7ff fff1 	bl	d6d52 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d6d70:	bd08      	pop	{r3, pc}
	...

000d6d74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d6d74:	b538      	push	{r3, r4, r5, lr}
   d6d76:	2300      	movs	r3, #0
   d6d78:	4604      	mov	r4, r0
   d6d7a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6d7c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d6d7e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6d80:	f7fd f989 	bl	d4096 <_Znwj>
   d6d84:	b128      	cbz	r0, d6d92 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d6d86:	2301      	movs	r3, #1
   d6d88:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d6d8c:	4b02      	ldr	r3, [pc, #8]	; (d6d98 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6d8e:	6003      	str	r3, [r0, #0]
   d6d90:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6d92:	6020      	str	r0, [r4, #0]
	}
   d6d94:	4620      	mov	r0, r4
   d6d96:	bd38      	pop	{r3, r4, r5, pc}
   d6d98:	000db554 	.word	0x000db554

000d6d9c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d6d9c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6d9e:	2300      	movs	r3, #0
   d6da0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6da2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6da4:	4604      	mov	r4, r0
   d6da6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6da8:	b12b      	cbz	r3, d6db6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6daa:	2202      	movs	r2, #2
   d6dac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6dae:	68eb      	ldr	r3, [r5, #12]
   d6db0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6db2:	68ab      	ldr	r3, [r5, #8]
   d6db4:	60a3      	str	r3, [r4, #8]
    }
   d6db6:	4620      	mov	r0, r4
   d6db8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6dbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d6dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6dbe:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6dc0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6dc2:	4668      	mov	r0, sp
   d6dc4:	f7ff ff26 	bl	d6c14 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6dc8:	f04f 0302 	mov.w	r3, #2
   d6dcc:	e8d4 2f4f 	ldrexb	r2, [r4]
   d6dd0:	2a00      	cmp	r2, #0
   d6dd2:	d103      	bne.n	d6ddc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d6dd4:	e8c4 3f41 	strexb	r1, r3, [r4]
   d6dd8:	2900      	cmp	r1, #0
   d6dda:	d1f7      	bne.n	d6dcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6ddc:	d125      	bne.n	d6e2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d6dde:	f104 050c 	add.w	r5, r4, #12
   d6de2:	4669      	mov	r1, sp
   d6de4:	4628      	mov	r0, r5
   d6de6:	f7ff ff15 	bl	d6c14 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d6dea:	f3bf 8f5b 	dmb	ish
   d6dee:	2301      	movs	r3, #1
   d6df0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6df2:	2000      	movs	r0, #0
   d6df4:	f104 0308 	add.w	r3, r4, #8
   d6df8:	f3bf 8f5b 	dmb	ish
   d6dfc:	e853 6f00 	ldrex	r6, [r3]
   d6e00:	e843 0200 	strex	r2, r0, [r3]
   d6e04:	2a00      	cmp	r2, #0
   d6e06:	d1f9      	bne.n	d6dfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d6e08:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6e0c:	b16e      	cbz	r6, d6e2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d6e0e:	f7ff fd47 	bl	d68a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6e12:	b178      	cbz	r0, d6e34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6e14:	4629      	mov	r1, r5
   d6e16:	4630      	mov	r0, r6
   d6e18:	f7ff ff8b 	bl	d6d32 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d6e1c:	4630      	mov	r0, r6
   d6e1e:	f7fd fa3b 	bl	d4298 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6e22:	2110      	movs	r1, #16
   d6e24:	4630      	mov	r0, r6
   d6e26:	f001 f9d0 	bl	d81ca <_ZdlPvj>
        p_->setError(std::move(error));
   d6e2a:	4668      	mov	r0, sp
   d6e2c:	f7ff feff 	bl	d6c2e <_ZN8particle5ErrorD1Ev>
    }
   d6e30:	b009      	add	sp, #36	; 0x24
   d6e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6e34:	4631      	mov	r1, r6
   d6e36:	a802      	add	r0, sp, #8
   d6e38:	f7ff ffb0 	bl	d6d9c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6e3c:	68e0      	ldr	r0, [r4, #12]
   d6e3e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6e42:	b108      	cbz	r0, d6e48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d6e44:	f002 f89c 	bl	d8f80 <strdup>
        type_(type) {
   d6e48:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6e4a:	2010      	movs	r0, #16
   d6e4c:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6e50:	f7fd f921 	bl	d4096 <_Znwj>
   d6e54:	4605      	mov	r5, r0
   d6e56:	b1e8      	cbz	r0, d6e94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d6e58:	2700      	movs	r7, #0
   d6e5a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6e5c:	2018      	movs	r0, #24
   d6e5e:	f7fd f91a 	bl	d4096 <_Znwj>
   d6e62:	4604      	mov	r4, r0
   d6e64:	b188      	cbz	r0, d6e8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d6e66:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d6e68:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6e6a:	a802      	add	r0, sp, #8
   d6e6c:	f7ff ff4f 	bl	d6d0e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e70:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6e72:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e74:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e76:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6e78:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6e7a:	a906      	add	r1, sp, #24
   d6e7c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e7e:	60e3      	str	r3, [r4, #12]
   d6e80:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d6e84:	9205      	str	r2, [sp, #20]
   d6e86:	f7ff fec5 	bl	d6c14 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d6e8a:	4b08      	ldr	r3, [pc, #32]	; (d6eac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d6e8c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6e8e:	4b08      	ldr	r3, [pc, #32]	; (d6eb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6e90:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6e92:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d6e94:	a806      	add	r0, sp, #24
   d6e96:	f7ff feca 	bl	d6c2e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6e9a:	a802      	add	r0, sp, #8
   d6e9c:	f7fd f9fc 	bl	d4298 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6ea0:	2200      	movs	r2, #0
   d6ea2:	4629      	mov	r1, r5
   d6ea4:	4803      	ldr	r0, [pc, #12]	; (d6eb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d6ea6:	f7ff fd03 	bl	d68b0 <application_thread_invoke>
   d6eaa:	e7b7      	b.n	d6e1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d6eac:	000d6d45 	.word	0x000d6d45
   d6eb0:	000d6fdd 	.word	0x000d6fdd
   d6eb4:	000d6b53 	.word	0x000d6b53

000d6eb8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6ebc:	b08a      	sub	sp, #40	; 0x28
   d6ebe:	4605      	mov	r5, r0
   d6ec0:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d6ec4:	460c      	mov	r4, r1
   d6ec6:	4617      	mov	r7, r2
   d6ec8:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6eca:	f7ff fd3f 	bl	d694c <spark_cloud_flag_connected>
   d6ece:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d6ed0:	4682      	mov	sl, r0
   d6ed2:	bb38      	cbnz	r0, d6f24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d6ed4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6ed8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6eda:	a905      	add	r1, sp, #20
   d6edc:	4630      	mov	r0, r6
   d6ede:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6ee2:	f7ff fe97 	bl	d6c14 <_ZN8particle5ErrorC1EOS0_>
   d6ee6:	2014      	movs	r0, #20
   d6ee8:	f7fd f8d5 	bl	d4096 <_Znwj>
   d6eec:	4604      	mov	r4, r0
   d6eee:	b148      	cbz	r0, d6f04 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6ef0:	2302      	movs	r3, #2
   d6ef2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6ef4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6ef6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6efa:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6efc:	4631      	mov	r1, r6
   d6efe:	300c      	adds	r0, #12
   d6f00:	f7ff fe88 	bl	d6c14 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6f04:	4628      	mov	r0, r5
	: __shared_count(__p)
   d6f06:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6f08:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d6f0c:	f7ff ff32 	bl	d6d74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6f10:	4630      	mov	r0, r6
   d6f12:	f7ff fe8c 	bl	d6c2e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6f16:	a805      	add	r0, sp, #20
   d6f18:	f7ff fe89 	bl	d6c2e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d6f1c:	4628      	mov	r0, r5
   d6f1e:	b00a      	add	sp, #40	; 0x28
   d6f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6f24:	230c      	movs	r3, #12
   d6f26:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6f2a:	2014      	movs	r0, #20
   d6f2c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d6f30:	9307      	str	r3, [sp, #28]
   d6f32:	f7fd f8b0 	bl	d4096 <_Znwj>
   d6f36:	4601      	mov	r1, r0
   d6f38:	b128      	cbz	r0, d6f46 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6f3a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d6f3e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6f42:	f880 a001 	strb.w	sl, [r0, #1]
   d6f46:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6f48:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d6f4a:	f7ff ff13 	bl	d6d74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d6f4e:	4b22      	ldr	r3, [pc, #136]	; (d6fd8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d6f50:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6f52:	2008      	movs	r0, #8
   d6f54:	f7fd f89f 	bl	d4096 <_Znwj>
   d6f58:	4682      	mov	sl, r0
   d6f5a:	b128      	cbz	r0, d6f68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6f5c:	9b03      	ldr	r3, [sp, #12]
   d6f5e:	f840 3b04 	str.w	r3, [r0], #4
   d6f62:	a904      	add	r1, sp, #16
   d6f64:	f7ff fe21 	bl	d6baa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6f68:	9600      	str	r6, [sp, #0]
   d6f6a:	fa5f f389 	uxtb.w	r3, r9
   d6f6e:	4642      	mov	r2, r8
   d6f70:	4639      	mov	r1, r7
   d6f72:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d6f74:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6f78:	f7ff fcf8 	bl	d696c <spark_send_event>
   d6f7c:	b9b8      	cbnz	r0, d6fae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d6f7e:	9b03      	ldr	r3, [sp, #12]
   d6f80:	785b      	ldrb	r3, [r3, #1]
   d6f82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6f86:	b993      	cbnz	r3, d6fae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d6f88:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d6f8c:	a905      	add	r1, sp, #20
   d6f8e:	a803      	add	r0, sp, #12
   d6f90:	9205      	str	r2, [sp, #20]
   d6f92:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6f96:	f7ff ff11 	bl	d6dbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6f9a:	a805      	add	r0, sp, #20
   d6f9c:	f7ff fe47 	bl	d6c2e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6fa0:	a805      	add	r0, sp, #20
   d6fa2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6fa4:	f7ff fe94 	bl	d6cd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d6fa8:	a806      	add	r0, sp, #24
   d6faa:	f7ff fe05 	bl	d6bb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6fae:	9b03      	ldr	r3, [sp, #12]
   d6fb0:	9305      	str	r3, [sp, #20]
   d6fb2:	a904      	add	r1, sp, #16
   d6fb4:	a806      	add	r0, sp, #24
   d6fb6:	f7ff fdf8 	bl	d6baa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6fba:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6fbc:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6fbe:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d6fc0:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d6fc2:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d6fc4:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d6fc6:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d6fc8:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d6fca:	f7ff fdf5 	bl	d6bb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6fce:	a804      	add	r0, sp, #16
   d6fd0:	f7ff fdf2 	bl	d6bb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d6fd4:	e7a2      	b.n	d6f1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d6fd6:	bf00      	nop
   d6fd8:	000d70a1 	.word	0x000d70a1

000d6fdc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d6fdc:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6fe0:	4605      	mov	r5, r0
	  switch (__op)
   d6fe2:	d007      	beq.n	d6ff4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d6fe4:	2a03      	cmp	r2, #3
   d6fe6:	d018      	beq.n	d701a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d6fe8:	2a01      	cmp	r2, #1
   d6fea:	d101      	bne.n	d6ff0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6fec:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6fee:	6003      	str	r3, [r0, #0]
	}
   d6ff0:	2000      	movs	r0, #0
   d6ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6ff4:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d6ff6:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6ff8:	f7fd f84d 	bl	d4096 <_Znwj>
   d6ffc:	4604      	mov	r4, r0
   d6ffe:	b150      	cbz	r0, d7016 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7000:	4631      	mov	r1, r6
   d7002:	f7ff fecb 	bl	d6d9c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d7006:	6930      	ldr	r0, [r6, #16]
   d7008:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d700c:	b108      	cbz	r0, d7012 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d700e:	f001 ffb7 	bl	d8f80 <strdup>
        type_(type) {
   d7012:	6120      	str	r0, [r4, #16]
   d7014:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d7016:	602c      	str	r4, [r5, #0]
	}
   d7018:	e7ea      	b.n	d6ff0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d701a:	6804      	ldr	r4, [r0, #0]
   d701c:	2c00      	cmp	r4, #0
   d701e:	d0e7      	beq.n	d6ff0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d7020:	f104 0010 	add.w	r0, r4, #16
   d7024:	f7ff fe03 	bl	d6c2e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d7028:	4620      	mov	r0, r4
   d702a:	f7fd f935 	bl	d4298 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d702e:	2118      	movs	r1, #24
   d7030:	4620      	mov	r0, r4
   d7032:	f001 f8ca 	bl	d81ca <_ZdlPvj>
   d7036:	e7db      	b.n	d6ff0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d7038 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d7038:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d703a:	2300      	movs	r3, #0
   d703c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d703e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d7040:	4604      	mov	r4, r0
   d7042:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d7044:	b12b      	cbz	r3, d7052 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7046:	2202      	movs	r2, #2
   d7048:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d704a:	68eb      	ldr	r3, [r5, #12]
   d704c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d704e:	68ab      	ldr	r3, [r5, #8]
   d7050:	60a3      	str	r3, [r4, #8]
    }
   d7052:	4620      	mov	r0, r4
   d7054:	bd38      	pop	{r3, r4, r5, pc}

000d7056 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d7056:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7058:	b570      	push	{r4, r5, r6, lr}
   d705a:	4604      	mov	r4, r0
	  switch (__op)
   d705c:	d007      	beq.n	d706e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d705e:	2a03      	cmp	r2, #3
   d7060:	d012      	beq.n	d7088 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d7062:	2a01      	cmp	r2, #1
   d7064:	d101      	bne.n	d706a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d7066:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7068:	6003      	str	r3, [r0, #0]
	}
   d706a:	2000      	movs	r0, #0
   d706c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d706e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d7070:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d7072:	f7fd f810 	bl	d4096 <_Znwj>
   d7076:	4605      	mov	r5, r0
   d7078:	b120      	cbz	r0, d7084 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d707a:	4631      	mov	r1, r6
   d707c:	f7ff ffdc 	bl	d7038 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7080:	7c33      	ldrb	r3, [r6, #16]
   d7082:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d7084:	6025      	str	r5, [r4, #0]
	}
   d7086:	e7f0      	b.n	d706a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d7088:	6804      	ldr	r4, [r0, #0]
   d708a:	2c00      	cmp	r4, #0
   d708c:	d0ed      	beq.n	d706a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d708e:	4620      	mov	r0, r4
   d7090:	f7fd f902 	bl	d4298 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d7094:	2114      	movs	r1, #20
   d7096:	4620      	mov	r0, r4
   d7098:	f001 f897 	bl	d81ca <_ZdlPvj>
   d709c:	e7e5      	b.n	d706a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d70a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d70a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d70a2:	b089      	sub	sp, #36	; 0x24
   d70a4:	4604      	mov	r4, r0
   d70a6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d70a8:	a801      	add	r0, sp, #4
   d70aa:	4611      	mov	r1, r2
   d70ac:	f7ff fe10 	bl	d6cd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d70b0:	b1a4      	cbz	r4, d70dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d70b2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d70b4:	b11d      	cbz	r5, d70be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d70b6:	4628      	mov	r0, r5
   d70b8:	f001 ff62 	bl	d8f80 <strdup>
   d70bc:	4605      	mov	r5, r0
   d70be:	a801      	add	r0, sp, #4
   d70c0:	a903      	add	r1, sp, #12
        type_(type) {
   d70c2:	9503      	str	r5, [sp, #12]
   d70c4:	f8ad 4010 	strh.w	r4, [sp, #16]
   d70c8:	f7ff fe78 	bl	d6dbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d70cc:	a803      	add	r0, sp, #12
   d70ce:	f7ff fdae 	bl	d6c2e <_ZN8particle5ErrorD1Ev>
   d70d2:	a802      	add	r0, sp, #8
   d70d4:	f7ff fd70 	bl	d6bb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d70d8:	b009      	add	sp, #36	; 0x24
   d70da:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d70dc:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d70de:	2301      	movs	r3, #1
   d70e0:	e8d5 2f4f 	ldrexb	r2, [r5]
   d70e4:	2a00      	cmp	r2, #0
   d70e6:	d103      	bne.n	d70f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d70e8:	e8c5 3f41 	strexb	r1, r3, [r5]
   d70ec:	2900      	cmp	r1, #0
   d70ee:	d1f7      	bne.n	d70e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d70f0:	d1ef      	bne.n	d70d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d70f2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d70f4:	f3bf 8f5b 	dmb	ish
   d70f8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d70fa:	1d2b      	adds	r3, r5, #4
   d70fc:	f3bf 8f5b 	dmb	ish
   d7100:	e853 6f00 	ldrex	r6, [r3]
   d7104:	e843 4200 	strex	r2, r4, [r3]
   d7108:	2a00      	cmp	r2, #0
   d710a:	d1f9      	bne.n	d7100 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d710c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d7110:	2e00      	cmp	r6, #0
   d7112:	d0de      	beq.n	d70d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d7114:	4620      	mov	r0, r4
   d7116:	f7ff fbc3 	bl	d68a0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d711a:	4607      	mov	r7, r0
   d711c:	b160      	cbz	r0, d7138 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d711e:	f105 010c 	add.w	r1, r5, #12
   d7122:	4630      	mov	r0, r6
   d7124:	f7ff fe15 	bl	d6d52 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d7128:	4630      	mov	r0, r6
   d712a:	f7fd f8b5 	bl	d4298 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d712e:	2110      	movs	r1, #16
   d7130:	4630      	mov	r0, r6
   d7132:	f001 f84a 	bl	d81ca <_ZdlPvj>
   d7136:	e7cc      	b.n	d70d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7138:	4631      	mov	r1, r6
   d713a:	a803      	add	r0, sp, #12
   d713c:	f7ff ff7c 	bl	d7038 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7140:	7b2b      	ldrb	r3, [r5, #12]
   d7142:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7146:	2010      	movs	r0, #16
   d7148:	f7fc ffa5 	bl	d4096 <_Znwj>
   d714c:	4605      	mov	r5, r0
   d714e:	b1d0      	cbz	r0, d7186 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d7150:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7152:	2014      	movs	r0, #20
   d7154:	f7fc ff9f 	bl	d4096 <_Znwj>
   d7158:	4604      	mov	r4, r0
   d715a:	b178      	cbz	r0, d717c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d715c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d715e:	4601      	mov	r1, r0
   d7160:	a803      	add	r0, sp, #12
   d7162:	f7ff fdd4 	bl	d6d0e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7166:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7168:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d716a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d716c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d716e:	9205      	str	r2, [sp, #20]
   d7170:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7172:	60e3      	str	r3, [r4, #12]
   d7174:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d7178:	9206      	str	r2, [sp, #24]
   d717a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d717c:	4b06      	ldr	r3, [pc, #24]	; (d7198 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d717e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7180:	4b06      	ldr	r3, [pc, #24]	; (d719c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7182:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d7184:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d7186:	a803      	add	r0, sp, #12
   d7188:	f7fd f886 	bl	d4298 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d718c:	2200      	movs	r2, #0
   d718e:	4629      	mov	r1, r5
   d7190:	4803      	ldr	r0, [pc, #12]	; (d71a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d7192:	f7ff fb8d 	bl	d68b0 <application_thread_invoke>
   d7196:	e7c7      	b.n	d7128 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d7198:	000d6d65 	.word	0x000d6d65
   d719c:	000d7057 	.word	0x000d7057
   d71a0:	000d6b53 	.word	0x000d6b53

000d71a4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d71a4:	2200      	movs	r2, #0
   d71a6:	6840      	ldr	r0, [r0, #4]
   d71a8:	4611      	mov	r1, r2
   d71aa:	f7ff bc4f 	b.w	d6a4c <network_listening>

000d71ae <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d71ae:	2200      	movs	r2, #0
   d71b0:	6840      	ldr	r0, [r0, #4]
   d71b2:	4611      	mov	r1, r2
   d71b4:	f7ff bc5a 	b.w	d6a6c <network_get_listen_timeout>

000d71b8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d71b8:	6840      	ldr	r0, [r0, #4]
   d71ba:	2200      	movs	r2, #0
   d71bc:	f7ff bc4e 	b.w	d6a5c <network_set_listen_timeout>

000d71c0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d71c0:	6840      	ldr	r0, [r0, #4]
   d71c2:	2200      	movs	r2, #0
   d71c4:	f081 0101 	eor.w	r1, r1, #1
   d71c8:	f7ff bc38 	b.w	d6a3c <network_listen>

000d71cc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d71cc:	2300      	movs	r3, #0
   d71ce:	6840      	ldr	r0, [r0, #4]
   d71d0:	461a      	mov	r2, r3
   d71d2:	4619      	mov	r1, r3
   d71d4:	f7ff bc2a 	b.w	d6a2c <network_off>

000d71d8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d71d8:	2300      	movs	r3, #0
   d71da:	6840      	ldr	r0, [r0, #4]
   d71dc:	461a      	mov	r2, r3
   d71de:	4619      	mov	r1, r3
   d71e0:	f7ff bc1c 	b.w	d6a1c <network_on>

000d71e4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d71e4:	2200      	movs	r2, #0
   d71e6:	6840      	ldr	r0, [r0, #4]
   d71e8:	4611      	mov	r1, r2
   d71ea:	f7ff bc0f 	b.w	d6a0c <network_ready>

000d71ee <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d71ee:	2200      	movs	r2, #0
   d71f0:	6840      	ldr	r0, [r0, #4]
   d71f2:	4611      	mov	r1, r2
   d71f4:	f7ff bbfa 	b.w	d69ec <network_connecting>

000d71f8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d71f8:	6840      	ldr	r0, [r0, #4]
   d71fa:	2200      	movs	r2, #0
   d71fc:	2102      	movs	r1, #2
   d71fe:	f7ff bbfd 	b.w	d69fc <network_disconnect>

000d7202 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7202:	2300      	movs	r3, #0
   d7204:	6840      	ldr	r0, [r0, #4]
   d7206:	461a      	mov	r2, r3
   d7208:	f7ff bbe8 	b.w	d69dc <network_connect>

000d720c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d720c:	4b02      	ldr	r3, [pc, #8]	; (d7218 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d720e:	2203      	movs	r2, #3
   d7210:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7212:	4a02      	ldr	r2, [pc, #8]	; (d721c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7214:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d7216:	4770      	bx	lr
   d7218:	2003e60c 	.word	0x2003e60c
   d721c:	000db570 	.word	0x000db570

000d7220 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7220:	4770      	bx	lr

000d7222 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7224:	4606      	mov	r6, r0
   d7226:	4615      	mov	r5, r2
   d7228:	460c      	mov	r4, r1
   d722a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d722c:	42bc      	cmp	r4, r7
   d722e:	d006      	beq.n	d723e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7230:	6833      	ldr	r3, [r6, #0]
   d7232:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7236:	689b      	ldr	r3, [r3, #8]
   d7238:	4630      	mov	r0, r6
   d723a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d723c:	e7f6      	b.n	d722c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d723e:	4628      	mov	r0, r5
   d7240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7242 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d7242:	7c00      	ldrb	r0, [r0, #16]
   d7244:	2200      	movs	r2, #0
   d7246:	f7ff ba13 	b.w	d6670 <hal_i2c_write>

000d724a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d724a:	7c00      	ldrb	r0, [r0, #16]
   d724c:	2100      	movs	r1, #0
   d724e:	f7ff ba17 	b.w	d6680 <hal_i2c_available>

000d7252 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d7252:	7c00      	ldrb	r0, [r0, #16]
   d7254:	2100      	movs	r1, #0
   d7256:	f7ff ba1b 	b.w	d6690 <hal_i2c_read>

000d725a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d725a:	7c00      	ldrb	r0, [r0, #16]
   d725c:	2100      	movs	r1, #0
   d725e:	f7ff ba1f 	b.w	d66a0 <hal_i2c_peek>

000d7262 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d7262:	7c00      	ldrb	r0, [r0, #16]
   d7264:	2100      	movs	r1, #0
   d7266:	f7ff ba23 	b.w	d66b0 <hal_i2c_flush>

000d726a <_ZN7TwoWireD0Ev>:
   d726a:	b510      	push	{r4, lr}
   d726c:	2114      	movs	r1, #20
   d726e:	4604      	mov	r4, r0
   d7270:	f000 ffab 	bl	d81ca <_ZdlPvj>
   d7274:	4620      	mov	r0, r4
   d7276:	bd10      	pop	{r4, pc}

000d7278 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7278:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d727a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d727e:	4604      	mov	r4, r0
   d7280:	4608      	mov	r0, r1
   d7282:	2100      	movs	r1, #0
   d7284:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7288:	4b03      	ldr	r3, [pc, #12]	; (d7298 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d728a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d728c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d728e:	4611      	mov	r1, r2
   d7290:	f7ff fa1e 	bl	d66d0 <hal_i2c_init>
}
   d7294:	4620      	mov	r0, r4
   d7296:	bd10      	pop	{r4, pc}
   d7298:	000db5a4 	.word	0x000db5a4

000d729c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d729c:	2300      	movs	r3, #0
   d729e:	7c00      	ldrb	r0, [r0, #16]
   d72a0:	461a      	mov	r2, r3
   d72a2:	4619      	mov	r1, r3
   d72a4:	f7ff b9cc 	b.w	d6640 <hal_i2c_begin>

000d72a8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d72a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d72aa:	2200      	movs	r2, #0
   d72ac:	2314      	movs	r3, #20
   d72ae:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d72b2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d72b6:	780b      	ldrb	r3, [r1, #0]
   d72b8:	f88d 3008 	strb.w	r3, [sp, #8]
   d72bc:	684b      	ldr	r3, [r1, #4]
   d72be:	9303      	str	r3, [sp, #12]
   d72c0:	68cb      	ldr	r3, [r1, #12]
   d72c2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d72c4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d72c6:	7a0b      	ldrb	r3, [r1, #8]
   d72c8:	9305      	str	r3, [sp, #20]
   d72ca:	a901      	add	r1, sp, #4
   d72cc:	f7ff fa18 	bl	d6700 <hal_i2c_request_ex>
}
   d72d0:	b007      	add	sp, #28
   d72d2:	f85d fb04 	ldr.w	pc, [sp], #4

000d72d6 <_ZN7TwoWire11requestFromEhjh>:
{
   d72d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d72d8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d72da:	f88d 1000 	strb.w	r1, [sp]
   d72de:	f04f 0164 	mov.w	r1, #100	; 0x64
   d72e2:	9103      	str	r1, [sp, #12]
   d72e4:	bf18      	it	ne
   d72e6:	2301      	movne	r3, #1
   d72e8:	4669      	mov	r1, sp
    size_ = size;
   d72ea:	9201      	str	r2, [sp, #4]
   d72ec:	f88d 3008 	strb.w	r3, [sp, #8]
   d72f0:	f7ff ffda 	bl	d72a8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d72f4:	b005      	add	sp, #20
   d72f6:	f85d fb04 	ldr.w	pc, [sp], #4

000d72fa <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d72fa:	7c00      	ldrb	r0, [r0, #16]
   d72fc:	2200      	movs	r2, #0
   d72fe:	f7ff b9a7 	b.w	d6650 <hal_i2c_begin_transmission>

000d7302 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7302:	b2c9      	uxtb	r1, r1
   d7304:	f7ff bff9 	b.w	d72fa <_ZN7TwoWire17beginTransmissionEh>

000d7308 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d7308:	7c00      	ldrb	r0, [r0, #16]
   d730a:	2200      	movs	r2, #0
   d730c:	f7ff b9a8 	b.w	d6660 <hal_i2c_end_transmission>

000d7310 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d7310:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d7312:	2100      	movs	r1, #0
   d7314:	7c00      	ldrb	r0, [r0, #16]
   d7316:	f7ff f9e3 	bl	d66e0 <hal_i2c_lock>
}
   d731a:	fab0 f080 	clz	r0, r0
   d731e:	0940      	lsrs	r0, r0, #5
   d7320:	bd08      	pop	{r3, pc}

000d7322 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d7322:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d7324:	2100      	movs	r1, #0
   d7326:	7c00      	ldrb	r0, [r0, #16]
   d7328:	f7ff f9e2 	bl	d66f0 <hal_i2c_unlock>
}
   d732c:	fab0 f080 	clz	r0, r0
   d7330:	0940      	lsrs	r0, r0, #5
   d7332:	bd08      	pop	{r3, pc}

000d7334 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d7334:	4700      	bx	r0
	...

000d7338 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d7338:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d733c:	2400      	movs	r4, #0
{
   d733e:	461d      	mov	r5, r3
   d7340:	460f      	mov	r7, r1
   d7342:	4690      	mov	r8, r2
   d7344:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d7346:	f7ff f96b 	bl	d6620 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d734a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d734c:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d7350:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7354:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d7358:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d735c:	bfa2      	ittt	ge
   d735e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d7362:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d7366:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7368:	4907      	ldr	r1, [pc, #28]	; (d7388 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d736a:	9400      	str	r4, [sp, #0]
   d736c:	4643      	mov	r3, r8
   d736e:	463a      	mov	r2, r7
   d7370:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d7372:	bfa8      	it	ge
   d7374:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7378:	f7ff f94a 	bl	d6610 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d737c:	fab0 f080 	clz	r0, r0
   d7380:	0940      	lsrs	r0, r0, #5
   d7382:	b004      	add	sp, #16
   d7384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7388:	000d7335 	.word	0x000d7335

000d738c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d738c:	4770      	bx	lr

000d738e <_ZN9IPAddressD0Ev>:
   d738e:	b510      	push	{r4, lr}
   d7390:	2118      	movs	r1, #24
   d7392:	4604      	mov	r4, r0
   d7394:	f000 ff19 	bl	d81ca <_ZdlPvj>
   d7398:	4620      	mov	r0, r4
   d739a:	bd10      	pop	{r4, pc}

000d739c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d739c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d739e:	7d03      	ldrb	r3, [r0, #20]
   d73a0:	2b06      	cmp	r3, #6
{
   d73a2:	b08d      	sub	sp, #52	; 0x34
   d73a4:	460e      	mov	r6, r1
   d73a6:	f100 0704 	add.w	r7, r0, #4
   d73aa:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d73ae:	d012      	beq.n	d73d6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d73b0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d73b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d73b8:	220a      	movs	r2, #10
   d73ba:	4630      	mov	r0, r6
   d73bc:	f000 f933 	bl	d7626 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d73c0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d73c2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d73c4:	d019      	beq.n	d73fa <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d73c6:	2c00      	cmp	r4, #0
   d73c8:	d0f4      	beq.n	d73b4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d73ca:	212e      	movs	r1, #46	; 0x2e
   d73cc:	4630      	mov	r0, r6
   d73ce:	f000 f927 	bl	d7620 <_ZN5Print5printEc>
   d73d2:	4404      	add	r4, r0
   d73d4:	e7ee      	b.n	d73b4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d73d6:	232f      	movs	r3, #47	; 0x2f
   d73d8:	466a      	mov	r2, sp
   d73da:	4639      	mov	r1, r7
   d73dc:	200a      	movs	r0, #10
		buf[0] = 0;
   d73de:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d73e2:	f7ff f995 	bl	d6710 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d73e6:	4668      	mov	r0, sp
   d73e8:	f001 fde7 	bl	d8fba <strlen>
   d73ec:	6833      	ldr	r3, [r6, #0]
   d73ee:	4602      	mov	r2, r0
   d73f0:	68db      	ldr	r3, [r3, #12]
   d73f2:	4669      	mov	r1, sp
   d73f4:	4630      	mov	r0, r6
   d73f6:	4798      	blx	r3
   d73f8:	4604      	mov	r4, r0
    }
    return n;
}
   d73fa:	4620      	mov	r0, r4
   d73fc:	b00d      	add	sp, #52	; 0x34
   d73fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7400 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d7400:	b510      	push	{r4, lr}
   d7402:	4b05      	ldr	r3, [pc, #20]	; (d7418 <_ZN9IPAddressC1Ev+0x18>)
   d7404:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7406:	2211      	movs	r2, #17
   d7408:	f840 3b04 	str.w	r3, [r0], #4
   d740c:	2100      	movs	r1, #0
   d740e:	f001 fd79 	bl	d8f04 <memset>
}
   d7412:	4620      	mov	r0, r4
   d7414:	bd10      	pop	{r4, pc}
   d7416:	bf00      	nop
   d7418:	000db5cc 	.word	0x000db5cc

000d741c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d741c:	4603      	mov	r3, r0
   d741e:	4a07      	ldr	r2, [pc, #28]	; (d743c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7420:	b510      	push	{r4, lr}
   d7422:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7426:	f101 0210 	add.w	r2, r1, #16
   d742a:	f851 4b04 	ldr.w	r4, [r1], #4
   d742e:	f843 4b04 	str.w	r4, [r3], #4
   d7432:	4291      	cmp	r1, r2
   d7434:	d1f9      	bne.n	d742a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7436:	780a      	ldrb	r2, [r1, #0]
   d7438:	701a      	strb	r2, [r3, #0]
}
   d743a:	bd10      	pop	{r4, pc}
   d743c:	000db5cc 	.word	0x000db5cc

000d7440 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7440:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7442:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7446:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d744a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d744e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7452:	2304      	movs	r3, #4
   d7454:	6041      	str	r1, [r0, #4]
   d7456:	7503      	strb	r3, [r0, #20]
}
   d7458:	bd10      	pop	{r4, pc}

000d745a <_ZN9IPAddressaSEPKh>:
{
   d745a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d745c:	78cb      	ldrb	r3, [r1, #3]
   d745e:	9300      	str	r3, [sp, #0]
   d7460:	788b      	ldrb	r3, [r1, #2]
   d7462:	784a      	ldrb	r2, [r1, #1]
   d7464:	7809      	ldrb	r1, [r1, #0]
   d7466:	f7ff ffeb 	bl	d7440 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d746a:	b002      	add	sp, #8
   d746c:	bd10      	pop	{r4, pc}
	...

000d7470 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7470:	4b01      	ldr	r3, [pc, #4]	; (d7478 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7472:	4a02      	ldr	r2, [pc, #8]	; (d747c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7474:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7476:	4770      	bx	lr
   d7478:	2003e614 	.word	0x2003e614
   d747c:	000db5d8 	.word	0x000db5d8

000d7480 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7480:	2300      	movs	r3, #0
   d7482:	6840      	ldr	r0, [r0, #4]
   d7484:	461a      	mov	r2, r3
   d7486:	f7ff baa9 	b.w	d69dc <network_connect>

000d748a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d748a:	6840      	ldr	r0, [r0, #4]
   d748c:	2200      	movs	r2, #0
   d748e:	2102      	movs	r1, #2
   d7490:	f7ff bab4 	b.w	d69fc <network_disconnect>

000d7494 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7494:	2200      	movs	r2, #0
   d7496:	6840      	ldr	r0, [r0, #4]
   d7498:	4611      	mov	r1, r2
   d749a:	f7ff baa7 	b.w	d69ec <network_connecting>

000d749e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d749e:	2200      	movs	r2, #0
   d74a0:	6840      	ldr	r0, [r0, #4]
   d74a2:	4611      	mov	r1, r2
   d74a4:	f7ff bab2 	b.w	d6a0c <network_ready>

000d74a8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d74a8:	2300      	movs	r3, #0
   d74aa:	6840      	ldr	r0, [r0, #4]
   d74ac:	461a      	mov	r2, r3
   d74ae:	4619      	mov	r1, r3
   d74b0:	f7ff bab4 	b.w	d6a1c <network_on>

000d74b4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d74b4:	2300      	movs	r3, #0
   d74b6:	6840      	ldr	r0, [r0, #4]
   d74b8:	461a      	mov	r2, r3
   d74ba:	4619      	mov	r1, r3
   d74bc:	f7ff bab6 	b.w	d6a2c <network_off>

000d74c0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d74c0:	6840      	ldr	r0, [r0, #4]
   d74c2:	2200      	movs	r2, #0
   d74c4:	f081 0101 	eor.w	r1, r1, #1
   d74c8:	f7ff bab8 	b.w	d6a3c <network_listen>

000d74cc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d74cc:	6840      	ldr	r0, [r0, #4]
   d74ce:	2200      	movs	r2, #0
   d74d0:	f7ff bac4 	b.w	d6a5c <network_set_listen_timeout>

000d74d4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d74d4:	2200      	movs	r2, #0
   d74d6:	6840      	ldr	r0, [r0, #4]
   d74d8:	4611      	mov	r1, r2
   d74da:	f7ff bac7 	b.w	d6a6c <network_get_listen_timeout>

000d74de <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d74de:	2200      	movs	r2, #0
   d74e0:	6840      	ldr	r0, [r0, #4]
   d74e2:	4611      	mov	r1, r2
   d74e4:	f7ff bab2 	b.w	d6a4c <network_listening>

000d74e8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d74e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d74ec:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d74ee:	b095      	sub	sp, #84	; 0x54
   d74f0:	4616      	mov	r6, r2
   d74f2:	460d      	mov	r5, r1
   d74f4:	4607      	mov	r7, r0
    IPAddress addr;
   d74f6:	f7ff ff83 	bl	d7400 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d74fa:	4621      	mov	r1, r4
   d74fc:	2218      	movs	r2, #24
   d74fe:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7500:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7502:	f001 fcff 	bl	d8f04 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7506:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7508:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d750c:	4621      	mov	r1, r4
   d750e:	466b      	mov	r3, sp
   d7510:	aa0c      	add	r2, sp, #48	; 0x30
   d7512:	4630      	mov	r0, r6
   d7514:	f7ff f90c 	bl	d6730 <netdb_getaddrinfo>
    if (!r) {
   d7518:	4604      	mov	r4, r0
   d751a:	2800      	cmp	r0, #0
   d751c:	d146      	bne.n	d75ac <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d751e:	4602      	mov	r2, r0
   d7520:	2101      	movs	r1, #1
   d7522:	6868      	ldr	r0, [r5, #4]
   d7524:	f7ff fa72 	bl	d6a0c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7528:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d752a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d752c:	4622      	mov	r2, r4
   d752e:	6868      	ldr	r0, [r5, #4]
   d7530:	f7ff fa6c 	bl	d6a0c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7534:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7536:	4681      	mov	r9, r0
        bool ok = false;
   d7538:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d753a:	2e00      	cmp	r6, #0
   d753c:	d036      	beq.n	d75ac <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d753e:	2900      	cmp	r1, #0
   d7540:	d134      	bne.n	d75ac <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7542:	6873      	ldr	r3, [r6, #4]
   d7544:	2b02      	cmp	r3, #2
   d7546:	d003      	beq.n	d7550 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7548:	2b0a      	cmp	r3, #10
   d754a:	d00b      	beq.n	d7564 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d754c:	69f6      	ldr	r6, [r6, #28]
   d754e:	e7f4      	b.n	d753a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7550:	f1b8 0f00 	cmp.w	r8, #0
   d7554:	d004      	beq.n	d7560 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7556:	6971      	ldr	r1, [r6, #20]
   d7558:	4638      	mov	r0, r7
   d755a:	3104      	adds	r1, #4
   d755c:	f7ff ff7d 	bl	d745a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d7560:	4641      	mov	r1, r8
   d7562:	e7f3      	b.n	d754c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7564:	f1b9 0f00 	cmp.w	r9, #0
   d7568:	d101      	bne.n	d756e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d756a:	4649      	mov	r1, r9
   d756c:	e7ee      	b.n	d754c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d756e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7570:	2210      	movs	r2, #16
   d7572:	a801      	add	r0, sp, #4
   d7574:	f001 fcc6 	bl	d8f04 <memset>
                    a.v = 6;
   d7578:	2306      	movs	r3, #6
   d757a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d757e:	ad01      	add	r5, sp, #4
   d7580:	f104 0308 	add.w	r3, r4, #8
   d7584:	3418      	adds	r4, #24
   d7586:	6818      	ldr	r0, [r3, #0]
   d7588:	6859      	ldr	r1, [r3, #4]
   d758a:	462a      	mov	r2, r5
   d758c:	c203      	stmia	r2!, {r0, r1}
   d758e:	3308      	adds	r3, #8
   d7590:	42a3      	cmp	r3, r4
   d7592:	4615      	mov	r5, r2
   d7594:	d1f7      	bne.n	d7586 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d7596:	a901      	add	r1, sp, #4
   d7598:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d759a:	ad07      	add	r5, sp, #28
   d759c:	f7ff ff3e 	bl	d741c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d75a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d75a2:	1d3c      	adds	r4, r7, #4
   d75a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d75a6:	682b      	ldr	r3, [r5, #0]
   d75a8:	7023      	strb	r3, [r4, #0]
   d75aa:	e7de      	b.n	d756a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d75ac:	9800      	ldr	r0, [sp, #0]
   d75ae:	f7ff f8b7 	bl	d6720 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d75b2:	4638      	mov	r0, r7
   d75b4:	b015      	add	sp, #84	; 0x54
   d75b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d75bc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d75bc:	4b02      	ldr	r3, [pc, #8]	; (d75c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d75be:	4a03      	ldr	r2, [pc, #12]	; (d75cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d75c0:	601a      	str	r2, [r3, #0]
   d75c2:	2200      	movs	r2, #0
   d75c4:	605a      	str	r2, [r3, #4]

} // spark
   d75c6:	4770      	bx	lr
   d75c8:	2003e618 	.word	0x2003e618
   d75cc:	000db5e4 	.word	0x000db5e4

000d75d0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d75d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d75d2:	4606      	mov	r6, r0
   d75d4:	460d      	mov	r5, r1
  size_t n = 0;
   d75d6:	188f      	adds	r7, r1, r2
   d75d8:	2400      	movs	r4, #0
  while (size--) {
   d75da:	42bd      	cmp	r5, r7
   d75dc:	d00c      	beq.n	d75f8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d75de:	6833      	ldr	r3, [r6, #0]
   d75e0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d75e4:	689b      	ldr	r3, [r3, #8]
   d75e6:	4630      	mov	r0, r6
   d75e8:	4798      	blx	r3
     if (chunk>=0)
   d75ea:	1e03      	subs	r3, r0, #0
   d75ec:	db01      	blt.n	d75f2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d75ee:	441c      	add	r4, r3
  while (size--) {
   d75f0:	e7f3      	b.n	d75da <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d75f2:	2c00      	cmp	r4, #0
   d75f4:	bf08      	it	eq
   d75f6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d75f8:	4620      	mov	r0, r4
   d75fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d75fc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d75fc:	b513      	push	{r0, r1, r4, lr}
   d75fe:	4604      	mov	r4, r0
    }
   d7600:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d7602:	b159      	cbz	r1, d761c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7604:	9101      	str	r1, [sp, #4]
   d7606:	f001 fcd8 	bl	d8fba <strlen>
   d760a:	6823      	ldr	r3, [r4, #0]
   d760c:	9901      	ldr	r1, [sp, #4]
   d760e:	68db      	ldr	r3, [r3, #12]
   d7610:	4602      	mov	r2, r0
   d7612:	4620      	mov	r0, r4
    }
   d7614:	b002      	add	sp, #8
   d7616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d761a:	4718      	bx	r3
    }
   d761c:	b002      	add	sp, #8
   d761e:	bd10      	pop	{r4, pc}

000d7620 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7620:	6803      	ldr	r3, [r0, #0]
   d7622:	689b      	ldr	r3, [r3, #8]
   d7624:	4718      	bx	r3

000d7626 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7626:	b530      	push	{r4, r5, lr}
   d7628:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d762a:	2300      	movs	r3, #0
   d762c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7630:	2a01      	cmp	r2, #1
   d7632:	bf98      	it	ls
   d7634:	220a      	movls	r2, #10
   d7636:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7638:	460d      	mov	r5, r1
   d763a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d763e:	fb01 5312 	mls	r3, r1, r2, r5
   d7642:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7646:	2b09      	cmp	r3, #9
   d7648:	bf94      	ite	ls
   d764a:	3330      	addls	r3, #48	; 0x30
   d764c:	3337      	addhi	r3, #55	; 0x37
   d764e:	b2db      	uxtb	r3, r3
  } while(n);
   d7650:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7652:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7656:	d9ef      	bls.n	d7638 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7658:	4621      	mov	r1, r4
   d765a:	f7ff ffcf 	bl	d75fc <_ZN5Print5writeEPKc>
}
   d765e:	b00b      	add	sp, #44	; 0x2c
   d7660:	bd30      	pop	{r4, r5, pc}

000d7662 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7662:	b510      	push	{r4, lr}
   d7664:	4604      	mov	r4, r0
   d7666:	f7fc fe17 	bl	d4298 <_ZNSt14_Function_baseD1Ev>
   d766a:	4620      	mov	r0, r4
   d766c:	bd10      	pop	{r4, pc}
	...

000d7670 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7670:	4803      	ldr	r0, [pc, #12]	; (d7680 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7672:	4a04      	ldr	r2, [pc, #16]	; (d7684 <_GLOBAL__sub_I_RGB+0x14>)
   d7674:	4904      	ldr	r1, [pc, #16]	; (d7688 <_GLOBAL__sub_I_RGB+0x18>)
   d7676:	2300      	movs	r3, #0
   d7678:	6083      	str	r3, [r0, #8]
   d767a:	f000 bda1 	b.w	d81c0 <__aeabi_atexit>
   d767e:	bf00      	nop
   d7680:	2003e620 	.word	0x2003e620
   d7684:	2003e038 	.word	0x2003e038
   d7688:	000d7663 	.word	0x000d7663

000d768c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d768c:	b510      	push	{r4, lr}
   d768e:	4604      	mov	r4, r0
   d7690:	4608      	mov	r0, r1
{
    _spi = spi;
   d7692:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d7694:	f7ff f854 	bl	d6740 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7698:	2300      	movs	r3, #0
   d769a:	6063      	str	r3, [r4, #4]
}
   d769c:	4620      	mov	r0, r4
   d769e:	bd10      	pop	{r4, pc}

000d76a0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d76a0:	b510      	push	{r4, lr}
   d76a2:	4604      	mov	r4, r0
{
	free(buffer);
   d76a4:	6800      	ldr	r0, [r0, #0]
   d76a6:	f7ff f9f1 	bl	d6a8c <free>
}
   d76aa:	4620      	mov	r0, r4
   d76ac:	bd10      	pop	{r4, pc}

000d76ae <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d76ae:	b510      	push	{r4, lr}
   d76b0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d76b2:	6800      	ldr	r0, [r0, #0]
   d76b4:	b108      	cbz	r0, d76ba <_ZN6String10invalidateEv+0xc>
   d76b6:	f7ff f9e9 	bl	d6a8c <free>
	buffer = NULL;
   d76ba:	2300      	movs	r3, #0
	capacity = len = 0;
   d76bc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d76c0:	6023      	str	r3, [r4, #0]
}
   d76c2:	bd10      	pop	{r4, pc}

000d76c4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d76c4:	b538      	push	{r3, r4, r5, lr}
   d76c6:	4604      	mov	r4, r0
   d76c8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d76ca:	6800      	ldr	r0, [r0, #0]
   d76cc:	3101      	adds	r1, #1
   d76ce:	f7ff f9e5 	bl	d6a9c <realloc>
	if (newbuffer) {
   d76d2:	b110      	cbz	r0, d76da <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d76d4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d76d8:	2001      	movs	r0, #1
	}
	return 0;
}
   d76da:	bd38      	pop	{r3, r4, r5, pc}

000d76dc <_ZN6String7reserveEj>:
{
   d76dc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d76de:	6803      	ldr	r3, [r0, #0]
{
   d76e0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d76e2:	b123      	cbz	r3, d76ee <_ZN6String7reserveEj+0x12>
   d76e4:	6843      	ldr	r3, [r0, #4]
   d76e6:	428b      	cmp	r3, r1
   d76e8:	d301      	bcc.n	d76ee <_ZN6String7reserveEj+0x12>
   d76ea:	2001      	movs	r0, #1
}
   d76ec:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d76ee:	4620      	mov	r0, r4
   d76f0:	f7ff ffe8 	bl	d76c4 <_ZN6String12changeBufferEj>
   d76f4:	2800      	cmp	r0, #0
   d76f6:	d0f9      	beq.n	d76ec <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d76f8:	68a3      	ldr	r3, [r4, #8]
   d76fa:	2b00      	cmp	r3, #0
   d76fc:	d1f5      	bne.n	d76ea <_ZN6String7reserveEj+0xe>
   d76fe:	6822      	ldr	r2, [r4, #0]
   d7700:	7013      	strb	r3, [r2, #0]
   d7702:	e7f2      	b.n	d76ea <_ZN6String7reserveEj+0xe>

000d7704 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7704:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7706:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d7708:	4611      	mov	r1, r2
   d770a:	9201      	str	r2, [sp, #4]
{
   d770c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d770e:	f7ff ffe5 	bl	d76dc <_ZN6String7reserveEj>
   d7712:	9a01      	ldr	r2, [sp, #4]
   d7714:	b928      	cbnz	r0, d7722 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d7716:	4620      	mov	r0, r4
   d7718:	f7ff ffc9 	bl	d76ae <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d771c:	4620      	mov	r0, r4
   d771e:	b003      	add	sp, #12
   d7720:	bd30      	pop	{r4, r5, pc}
	len = length;
   d7722:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d7724:	4629      	mov	r1, r5
   d7726:	6820      	ldr	r0, [r4, #0]
   d7728:	f001 fbc4 	bl	d8eb4 <memcpy>
	buffer[len] = 0;
   d772c:	6822      	ldr	r2, [r4, #0]
   d772e:	68a3      	ldr	r3, [r4, #8]
   d7730:	2100      	movs	r1, #0
   d7732:	54d1      	strb	r1, [r2, r3]
	return *this;
   d7734:	e7f2      	b.n	d771c <_ZN6String4copyEPKcj+0x18>

000d7736 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d7736:	2300      	movs	r3, #0
String::String(const char *cstr)
   d7738:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d773a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d773e:	4604      	mov	r4, r0
	len = 0;
   d7740:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7742:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d7744:	b141      	cbz	r1, d7758 <_ZN6StringC1EPKc+0x22>
   d7746:	4608      	mov	r0, r1
   d7748:	9101      	str	r1, [sp, #4]
   d774a:	f001 fc36 	bl	d8fba <strlen>
   d774e:	9901      	ldr	r1, [sp, #4]
   d7750:	4602      	mov	r2, r0
   d7752:	4620      	mov	r0, r4
   d7754:	f7ff ffd6 	bl	d7704 <_ZN6String4copyEPKcj>
}
   d7758:	4620      	mov	r0, r4
   d775a:	b002      	add	sp, #8
   d775c:	bd10      	pop	{r4, pc}

000d775e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d775e:	4288      	cmp	r0, r1
{
   d7760:	b510      	push	{r4, lr}
   d7762:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7764:	d005      	beq.n	d7772 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7766:	680b      	ldr	r3, [r1, #0]
   d7768:	b12b      	cbz	r3, d7776 <_ZN6StringaSERKS_+0x18>
   d776a:	688a      	ldr	r2, [r1, #8]
   d776c:	4619      	mov	r1, r3
   d776e:	f7ff ffc9 	bl	d7704 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d7772:	4620      	mov	r0, r4
   d7774:	bd10      	pop	{r4, pc}
	else invalidate();
   d7776:	f7ff ff9a 	bl	d76ae <_ZN6String10invalidateEv>
   d777a:	e7fa      	b.n	d7772 <_ZN6StringaSERKS_+0x14>

000d777c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d777c:	b510      	push	{r4, lr}
	buffer = NULL;
   d777e:	2300      	movs	r3, #0
String::String(const String &value)
   d7780:	4604      	mov	r4, r0
	capacity = 0;
   d7782:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d7786:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7788:	7303      	strb	r3, [r0, #12]
	*this = value;
   d778a:	f7ff ffe8 	bl	d775e <_ZN6StringaSERKS_>
}
   d778e:	4620      	mov	r0, r4
   d7790:	bd10      	pop	{r4, pc}

000d7792 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7792:	b513      	push	{r0, r1, r4, lr}
   d7794:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d7796:	b159      	cbz	r1, d77b0 <_ZN6StringaSEPKc+0x1e>
   d7798:	4608      	mov	r0, r1
   d779a:	9101      	str	r1, [sp, #4]
   d779c:	f001 fc0d 	bl	d8fba <strlen>
   d77a0:	9901      	ldr	r1, [sp, #4]
   d77a2:	4602      	mov	r2, r0
   d77a4:	4620      	mov	r0, r4
   d77a6:	f7ff ffad 	bl	d7704 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d77aa:	4620      	mov	r0, r4
   d77ac:	b002      	add	sp, #8
   d77ae:	bd10      	pop	{r4, pc}
	else invalidate();
   d77b0:	f7ff ff7d 	bl	d76ae <_ZN6String10invalidateEv>
   d77b4:	e7f9      	b.n	d77aa <_ZN6StringaSEPKc+0x18>

000d77b6 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d77b6:	b510      	push	{r4, lr}
   d77b8:	4604      	mov	r4, r0
   d77ba:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d77bc:	2300      	movs	r3, #0
	capacity = 0;
   d77be:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d77c2:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d77c4:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d77c6:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d77c8:	a901      	add	r1, sp, #4
   d77ca:	f000 fb91 	bl	d7ef0 <itoa>
	*this = buf;
   d77ce:	a901      	add	r1, sp, #4
   d77d0:	4620      	mov	r0, r4
   d77d2:	f7ff ffde 	bl	d7792 <_ZN6StringaSEPKc>
}
   d77d6:	4620      	mov	r0, r4
   d77d8:	b00a      	add	sp, #40	; 0x28
   d77da:	bd10      	pop	{r4, pc}

000d77dc <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d77dc:	b570      	push	{r4, r5, r6, lr}
   d77de:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d77e0:	460e      	mov	r6, r1
   d77e2:	b909      	cbnz	r1, d77e8 <_ZN6String6concatEPKcj+0xc>
   d77e4:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d77e6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d77e8:	b16a      	cbz	r2, d7806 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d77ea:	6884      	ldr	r4, [r0, #8]
   d77ec:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d77ee:	4621      	mov	r1, r4
   d77f0:	f7ff ff74 	bl	d76dc <_ZN6String7reserveEj>
   d77f4:	2800      	cmp	r0, #0
   d77f6:	d0f5      	beq.n	d77e4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d77f8:	6828      	ldr	r0, [r5, #0]
   d77fa:	68ab      	ldr	r3, [r5, #8]
   d77fc:	4631      	mov	r1, r6
   d77fe:	4418      	add	r0, r3
   d7800:	f001 fbb6 	bl	d8f70 <strcpy>
	len = newlen;
   d7804:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d7806:	2001      	movs	r0, #1
   d7808:	e7ed      	b.n	d77e6 <_ZN6String6concatEPKcj+0xa>

000d780a <_ZplRK15StringSumHelperPKc>:
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d780a:	b513      	push	{r0, r1, r4, lr}
   d780c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d780e:	b929      	cbnz	r1, d781c <_ZplRK15StringSumHelperPKc+0x12>
   d7810:	4620      	mov	r0, r4
   d7812:	f7ff ff4c 	bl	d76ae <_ZN6String10invalidateEv>
	return a;
}
   d7816:	4620      	mov	r0, r4
   d7818:	b002      	add	sp, #8
   d781a:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d781c:	4608      	mov	r0, r1
   d781e:	9101      	str	r1, [sp, #4]
   d7820:	f001 fbcb 	bl	d8fba <strlen>
   d7824:	9901      	ldr	r1, [sp, #4]
   d7826:	4602      	mov	r2, r0
   d7828:	4620      	mov	r0, r4
   d782a:	f7ff ffd7 	bl	d77dc <_ZN6String6concatEPKcj>
   d782e:	2800      	cmp	r0, #0
   d7830:	d0ee      	beq.n	d7810 <_ZplRK15StringSumHelperPKc+0x6>
   d7832:	e7f0      	b.n	d7816 <_ZplRK15StringSumHelperPKc+0xc>

000d7834 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d7834:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7836:	6882      	ldr	r2, [r0, #8]
   d7838:	b93a      	cbnz	r2, d784a <_ZNK6String6equalsEPKc+0x16>
   d783a:	b121      	cbz	r1, d7846 <_ZNK6String6equalsEPKc+0x12>
   d783c:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d783e:	fab0 f080 	clz	r0, r0
   d7842:	0940      	lsrs	r0, r0, #5
   d7844:	e000      	b.n	d7848 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7846:	2001      	movs	r0, #1
}
   d7848:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d784a:	6800      	ldr	r0, [r0, #0]
   d784c:	b909      	cbnz	r1, d7852 <_ZNK6String6equalsEPKc+0x1e>
   d784e:	7800      	ldrb	r0, [r0, #0]
   d7850:	e7f5      	b.n	d783e <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d7852:	f001 fb83 	bl	d8f5c <strcmp>
   d7856:	e7f2      	b.n	d783e <_ZNK6String6equalsEPKc+0xa>

000d7858 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d7858:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d785a:	6800      	ldr	r0, [r0, #0]
   d785c:	b140      	cbz	r0, d7870 <_ZNK6String7toFloatEv+0x18>
   d785e:	f001 fb01 	bl	d8e64 <atof>
   d7862:	ec51 0b10 	vmov	r0, r1, d0
   d7866:	f001 fa69 	bl	d8d3c <__aeabi_d2f>
   d786a:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d786e:	bd08      	pop	{r3, pc}
	return 0;
   d7870:	ed9f 0a01 	vldr	s0, [pc, #4]	; d7878 <_ZNK6String7toFloatEv+0x20>
   d7874:	e7fb      	b.n	d786e <_ZNK6String7toFloatEv+0x16>
   d7876:	bf00      	nop
   d7878:	00000000 	.word	0x00000000

000d787c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d787c:	b507      	push	{r0, r1, r2, lr}
   d787e:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d7880:	2100      	movs	r1, #0
{
   d7882:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d7884:	9100      	str	r1, [sp, #0]
   d7886:	2001      	movs	r0, #1
   d7888:	218c      	movs	r1, #140	; 0x8c
   d788a:	f7ff f83d 	bl	d6908 <system_reset>
}
   d788e:	b003      	add	sp, #12
   d7890:	f85d fb04 	ldr.w	pc, [sp], #4

000d7894 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d7894:	4601      	mov	r1, r0
    reset(0, flags);
   d7896:	2000      	movs	r0, #0
   d7898:	f7ff bff0 	b.w	d787c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d789c <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d789c:	2000      	movs	r0, #0
   d789e:	f7ff bff9 	b.w	d7894 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d78a4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d78a4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d78a6:	4b09      	ldr	r3, [pc, #36]	; (d78cc <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d78a8:	4c09      	ldr	r4, [pc, #36]	; (d78d0 <_GLOBAL__sub_I_System+0x2c>)
   d78aa:	2202      	movs	r2, #2
   d78ac:	2000      	movs	r0, #0
   d78ae:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d78b0:	4b08      	ldr	r3, [pc, #32]	; (d78d4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d78b2:	6020      	str	r0, [r4, #0]
   d78b4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d78b6:	71a0      	strb	r0, [r4, #6]
   d78b8:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d78ba:	f7fe ffd9 	bl	d6870 <set_system_mode>
SystemClass System;
   d78be:	4620      	mov	r0, r4
   d78c0:	4a05      	ldr	r2, [pc, #20]	; (d78d8 <_GLOBAL__sub_I_System+0x34>)
   d78c2:	4906      	ldr	r1, [pc, #24]	; (d78dc <_GLOBAL__sub_I_System+0x38>)
   d78c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d78c8:	f000 bc7a 	b.w	d81c0 <__aeabi_atexit>
   d78cc:	2003e63c 	.word	0x2003e63c
   d78d0:	2003e630 	.word	0x2003e630
   d78d4:	ffff0000 	.word	0xffff0000
   d78d8:	2003e038 	.word	0x2003e038
   d78dc:	000d4237 	.word	0x000d4237

000d78e0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d78e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d78e4:	4a15      	ldr	r2, [pc, #84]	; (d793c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d78e6:	f8df 8060 	ldr.w	r8, [pc, #96]	; d7948 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d78ea:	e9d2 3200 	ldrd	r3, r2, [r2]
   d78ee:	18c0      	adds	r0, r0, r3
   d78f0:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d78f4:	4a12      	ldr	r2, [pc, #72]	; (d7940 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d78f6:	e9d2 3200 	ldrd	r3, r2, [r2]
   d78fa:	18c6      	adds	r6, r0, r3
   d78fc:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d7900:	e9d8 2300 	ldrd	r2, r3, [r8]
   d7904:	42bb      	cmp	r3, r7
   d7906:	bf08      	it	eq
   d7908:	42b2      	cmpeq	r2, r6
{
   d790a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d790c:	d013      	beq.n	d7936 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d790e:	a903      	add	r1, sp, #12
   d7910:	4668      	mov	r0, sp
   d7912:	e9cd 6700 	strd	r6, r7, [sp]
   d7916:	f7ff f901 	bl	d6b1c <localtime_r>
	calendar_time.tm_year += 1900;
   d791a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d791c:	4d09      	ldr	r5, [pc, #36]	; (d7944 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d791e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7922:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d7924:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7928:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d792a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d792c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d792e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7932:	6823      	ldr	r3, [r4, #0]
   d7934:	602b      	str	r3, [r5, #0]
    }
}
   d7936:	b00c      	add	sp, #48	; 0x30
   d7938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d793c:	2003e678 	.word	0x2003e678
   d7940:	2003e670 	.word	0x2003e670
   d7944:	2003e648 	.word	0x2003e648
   d7948:	2003e680 	.word	0x2003e680

000d794c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d794c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d794e:	2000      	movs	r0, #0
   d7950:	f7ff f824 	bl	d699c <spark_sync_time_pending>
   d7954:	b128      	cbz	r0, d7962 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7956:	f7fe fff9 	bl	d694c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d795a:	f080 0001 	eor.w	r0, r0, #1
   d795e:	b2c0      	uxtb	r0, r0
    }
   d7960:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7962:	2001      	movs	r0, #1
   d7964:	e7fc      	b.n	d7960 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d7966 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d7966:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d7968:	4602      	mov	r2, r0
   d796a:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d796c:	4668      	mov	r0, sp
    struct timeval tv = {
   d796e:	2100      	movs	r1, #0
    };
   d7970:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d7974:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d7978:	f7fe fe22 	bl	d65c0 <hal_rtc_set_time>
   d797c:	4602      	mov	r2, r0
   d797e:	b910      	cbnz	r0, d7986 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d7980:	4601      	mov	r1, r0
   d7982:	f7fe ffa5 	bl	d68d0 <system_notify_time_changed>
    }
}
   d7986:	b005      	add	sp, #20
   d7988:	f85d fb04 	ldr.w	pc, [sp], #4

000d798c <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d798c:	b530      	push	{r4, r5, lr}
   d798e:	4604      	mov	r4, r0
    t += time_zone_cache;
   d7990:	4818      	ldr	r0, [pc, #96]	; (d79f4 <_ZN9TimeClass7timeStrEx+0x68>)
   d7992:	e9d0 1000 	ldrd	r1, r0, [r0]
   d7996:	1852      	adds	r2, r2, r1
   d7998:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d799c:	4816      	ldr	r0, [pc, #88]	; (d79f8 <_ZN9TimeClass7timeStrEx+0x6c>)
   d799e:	e9d0 1000 	ldrd	r1, r0, [r0]
   d79a2:	1852      	adds	r2, r2, r1
{
   d79a4:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d79a6:	eb40 0303 	adc.w	r3, r0, r3
   d79aa:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d79ae:	2224      	movs	r2, #36	; 0x24
   d79b0:	eb0d 0002 	add.w	r0, sp, r2
   d79b4:	2100      	movs	r1, #0
   d79b6:	f001 faa5 	bl	d8f04 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d79ba:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d79bc:	a909      	add	r1, sp, #36	; 0x24
   d79be:	4668      	mov	r0, sp
   d79c0:	f7ff f8ac 	bl	d6b1c <localtime_r>
    char ascstr[26] = {};
   d79c4:	2216      	movs	r2, #22
   d79c6:	4629      	mov	r1, r5
   d79c8:	a803      	add	r0, sp, #12
   d79ca:	9502      	str	r5, [sp, #8]
   d79cc:	f001 fa9a 	bl	d8f04 <memset>
    asctime_r(&calendar_time, ascstr);
   d79d0:	a902      	add	r1, sp, #8
   d79d2:	a809      	add	r0, sp, #36	; 0x24
   d79d4:	f001 fa20 	bl	d8e18 <asctime_r>
    int len = strlen(ascstr);
   d79d8:	a802      	add	r0, sp, #8
   d79da:	f001 faee 	bl	d8fba <strlen>
    ascstr[len-1] = 0; // remove final newline
   d79de:	ab12      	add	r3, sp, #72	; 0x48
   d79e0:	4418      	add	r0, r3
    return String(ascstr);
   d79e2:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d79e4:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d79e8:	4620      	mov	r0, r4
   d79ea:	f7ff fea4 	bl	d7736 <_ZN6StringC1EPKc>
}
   d79ee:	4620      	mov	r0, r4
   d79f0:	b013      	add	sp, #76	; 0x4c
   d79f2:	bd30      	pop	{r4, r5, pc}
   d79f4:	2003e678 	.word	0x2003e678
   d79f8:	2003e670 	.word	0x2003e670

000d79fc <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d79fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7a00:	b0a5      	sub	sp, #148	; 0x94
   d7a02:	4607      	mov	r7, r0
   d7a04:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d7a06:	a814      	add	r0, sp, #80	; 0x50
{
   d7a08:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d7a0a:	223f      	movs	r2, #63	; 0x3f
{
   d7a0c:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d7a0e:	f001 faee 	bl	d8fee <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d7a12:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d7a14:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d7a16:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d7a1a:	f001 face 	bl	d8fba <strlen>
   d7a1e:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d7a20:	bb5d      	cbnz	r5, d7a7a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d7a22:	492a      	ldr	r1, [pc, #168]	; (d7acc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d7a24:	a803      	add	r0, sp, #12
   d7a26:	f001 faa3 	bl	d8f70 <strcpy>
   d7a2a:	ae14      	add	r6, sp, #80	; 0x50
{
   d7a2c:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d7a2e:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d7a32:	45ab      	cmp	fp, r5
   d7a34:	d936      	bls.n	d7aa4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d7a36:	46b1      	mov	r9, r6
   d7a38:	f105 0a01 	add.w	sl, r5, #1
   d7a3c:	f819 3b01 	ldrb.w	r3, [r9], #1
   d7a40:	2b25      	cmp	r3, #37	; 0x25
   d7a42:	d117      	bne.n	d7a74 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d7a44:	7873      	ldrb	r3, [r6, #1]
   d7a46:	2b7a      	cmp	r3, #122	; 0x7a
   d7a48:	d114      	bne.n	d7a74 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d7a4a:	a803      	add	r0, sp, #12
   d7a4c:	f001 fab5 	bl	d8fba <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d7a50:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d7a52:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d7a54:	1828      	adds	r0, r5, r0
   d7a56:	4418      	add	r0, r3
   d7a58:	ebab 0205 	sub.w	r2, fp, r5
   d7a5c:	1cb1      	adds	r1, r6, #2
   d7a5e:	f001 fa29 	bl	d8eb4 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d7a62:	4622      	mov	r2, r4
   d7a64:	a903      	add	r1, sp, #12
   d7a66:	4630      	mov	r0, r6
   d7a68:	f001 fa24 	bl	d8eb4 <memcpy>
            len = strlen(format_str);
   d7a6c:	a814      	add	r0, sp, #80	; 0x50
   d7a6e:	f001 faa4 	bl	d8fba <strlen>
   d7a72:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d7a74:	464e      	mov	r6, r9
   d7a76:	4655      	mov	r5, sl
   d7a78:	e7d9      	b.n	d7a2e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d7a7a:	213c      	movs	r1, #60	; 0x3c
   d7a7c:	fb95 f3f1 	sdiv	r3, r5, r1
   d7a80:	2b00      	cmp	r3, #0
   d7a82:	bfb8      	it	lt
   d7a84:	425b      	neglt	r3, r3
   d7a86:	fbb3 f2f1 	udiv	r2, r3, r1
   d7a8a:	fb01 3312 	mls	r3, r1, r2, r3
   d7a8e:	9300      	str	r3, [sp, #0]
   d7a90:	4a0f      	ldr	r2, [pc, #60]	; (d7ad0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d7a92:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d7a96:	2110      	movs	r1, #16
   d7a98:	a803      	add	r0, sp, #12
   d7a9a:	fb95 f3f3 	sdiv	r3, r5, r3
   d7a9e:	f7ff f80d 	bl	d6abc <snprintf>
   d7aa2:	e7c2      	b.n	d7a2a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d7aa4:	2100      	movs	r1, #0
   d7aa6:	222e      	movs	r2, #46	; 0x2e
   d7aa8:	a808      	add	r0, sp, #32
   d7aaa:	9107      	str	r1, [sp, #28]
   d7aac:	f001 fa2a 	bl	d8f04 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d7ab0:	4643      	mov	r3, r8
   d7ab2:	aa14      	add	r2, sp, #80	; 0x50
   d7ab4:	2132      	movs	r1, #50	; 0x32
   d7ab6:	a807      	add	r0, sp, #28
   d7ab8:	f7ff f828 	bl	d6b0c <strftime>
    return String(buf);
   d7abc:	a907      	add	r1, sp, #28
   d7abe:	4638      	mov	r0, r7
   d7ac0:	f7ff fe39 	bl	d7736 <_ZN6StringC1EPKc>
}
   d7ac4:	4638      	mov	r0, r7
   d7ac6:	b025      	add	sp, #148	; 0x94
   d7ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7acc:	000db610 	.word	0x000db610
   d7ad0:	000db612 	.word	0x000db612

000d7ad4 <_ZN9TimeClass6formatExPKc>:
{
   d7ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7ad6:	b08d      	sub	sp, #52	; 0x34
   d7ad8:	e9cd 2300 	strd	r2, r3, [sp]
   d7adc:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d7ade:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d7ae0:	b915      	cbnz	r5, d7ae8 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d7ae2:	4b19      	ldr	r3, [pc, #100]	; (d7b48 <_ZN9TimeClass6formatExPKc+0x74>)
   d7ae4:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d7ae6:	b12d      	cbz	r5, d7af4 <_ZN9TimeClass6formatExPKc+0x20>
   d7ae8:	4b18      	ldr	r3, [pc, #96]	; (d7b4c <_ZN9TimeClass6formatExPKc+0x78>)
   d7aea:	4628      	mov	r0, r5
   d7aec:	6819      	ldr	r1, [r3, #0]
   d7aee:	f001 fa35 	bl	d8f5c <strcmp>
   d7af2:	b938      	cbnz	r0, d7b04 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d7af4:	e9dd 2300 	ldrd	r2, r3, [sp]
   d7af8:	4620      	mov	r0, r4
   d7afa:	f7ff ff47 	bl	d798c <_ZN9TimeClass7timeStrEx>
}
   d7afe:	4620      	mov	r0, r4
   d7b00:	b00d      	add	sp, #52	; 0x34
   d7b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d7b04:	4e12      	ldr	r6, [pc, #72]	; (d7b50 <_ZN9TimeClass6formatExPKc+0x7c>)
   d7b06:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d7b08:	4f12      	ldr	r7, [pc, #72]	; (d7b54 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d7b0a:	e9d6 3200 	ldrd	r3, r2, [r6]
   d7b0e:	185b      	adds	r3, r3, r1
   d7b10:	9901      	ldr	r1, [sp, #4]
   d7b12:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d7b16:	e9d7 0100 	ldrd	r0, r1, [r7]
   d7b1a:	181b      	adds	r3, r3, r0
   d7b1c:	eb41 0202 	adc.w	r2, r1, r2
   d7b20:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d7b24:	2100      	movs	r1, #0
   d7b26:	2224      	movs	r2, #36	; 0x24
   d7b28:	a803      	add	r0, sp, #12
   d7b2a:	f001 f9eb 	bl	d8f04 <memset>
    localtime_r(&t, &calendar_time);
   d7b2e:	a903      	add	r1, sp, #12
   d7b30:	4668      	mov	r0, sp
   d7b32:	f7fe fff3 	bl	d6b1c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d7b36:	6832      	ldr	r2, [r6, #0]
   d7b38:	683b      	ldr	r3, [r7, #0]
   d7b3a:	a903      	add	r1, sp, #12
   d7b3c:	4413      	add	r3, r2
   d7b3e:	4620      	mov	r0, r4
   d7b40:	462a      	mov	r2, r5
   d7b42:	f7ff ff5b 	bl	d79fc <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d7b46:	e7da      	b.n	d7afe <_ZN9TimeClass6formatExPKc+0x2a>
   d7b48:	2003e644 	.word	0x2003e644
   d7b4c:	2003de58 	.word	0x2003de58
   d7b50:	2003e678 	.word	0x2003e678
   d7b54:	2003e670 	.word	0x2003e670

000d7b58 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d7b58:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d7b5a:	2000      	movs	r0, #0
   d7b5c:	f7fe fd18 	bl	d6590 <hal_rtc_time_is_valid>
    if (rtcstate)
   d7b60:	4604      	mov	r4, r0
   d7b62:	b9a0      	cbnz	r0, d7b8e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d7b64:	f7fe fe7c 	bl	d6860 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7b68:	2801      	cmp	r0, #1
   d7b6a:	d110      	bne.n	d7b8e <_ZN9TimeClass7isValidEv+0x36>
   d7b6c:	4620      	mov	r0, r4
   d7b6e:	f7fe fea7 	bl	d68c0 <system_thread_get_state>
   d7b72:	b960      	cbnz	r0, d7b8e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d7b74:	f7ff feea 	bl	d794c <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7b78:	b910      	cbnz	r0, d7b80 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d7b7a:	f7fe fedf 	bl	d693c <spark_process>
        while (_while() && !_condition()) {
   d7b7e:	e7f9      	b.n	d7b74 <_ZN9TimeClass7isValidEv+0x1c>
   d7b80:	f7ff fee4 	bl	d794c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d7b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d7b88:	2000      	movs	r0, #0
   d7b8a:	f7fe bd01 	b.w	d6590 <hal_rtc_time_is_valid>
}
   d7b8e:	4620      	mov	r0, r4
   d7b90:	bd10      	pop	{r4, pc}

000d7b92 <_ZN9TimeClass3nowEv>:
{
   d7b92:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d7b94:	f7ff ffe0 	bl	d7b58 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d7b98:	2210      	movs	r2, #16
   d7b9a:	2100      	movs	r1, #0
   d7b9c:	4668      	mov	r0, sp
   d7b9e:	f001 f9b1 	bl	d8f04 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d7ba2:	2100      	movs	r1, #0
   d7ba4:	4668      	mov	r0, sp
   d7ba6:	f7fe fd03 	bl	d65b0 <hal_rtc_get_time>
}
   d7baa:	9800      	ldr	r0, [sp, #0]
   d7bac:	b005      	add	sp, #20
   d7bae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7bb4 <_ZN9TimeClass4hourEv>:
{
   d7bb4:	b508      	push	{r3, lr}
	return hour(now());
   d7bb6:	f7ff ffec 	bl	d7b92 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d7bba:	17c1      	asrs	r1, r0, #31
   d7bbc:	f7ff fe90 	bl	d78e0 <_ZL22Refresh_UnixTime_Cachex>
}
   d7bc0:	4b01      	ldr	r3, [pc, #4]	; (d7bc8 <_ZN9TimeClass4hourEv+0x14>)
   d7bc2:	6898      	ldr	r0, [r3, #8]
   d7bc4:	bd08      	pop	{r3, pc}
   d7bc6:	bf00      	nop
   d7bc8:	2003e648 	.word	0x2003e648

000d7bcc <_ZN9TimeClass4yearEv>:
{
   d7bcc:	b508      	push	{r3, lr}
	return year(now());
   d7bce:	f7ff ffe0 	bl	d7b92 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d7bd2:	17c1      	asrs	r1, r0, #31
   d7bd4:	f7ff fe84 	bl	d78e0 <_ZL22Refresh_UnixTime_Cachex>
}
   d7bd8:	4b01      	ldr	r3, [pc, #4]	; (d7be0 <_ZN9TimeClass4yearEv+0x14>)
   d7bda:	6958      	ldr	r0, [r3, #20]
   d7bdc:	bd08      	pop	{r3, pc}
   d7bde:	bf00      	nop
   d7be0:	2003e648 	.word	0x2003e648

000d7be4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7be4:	4b02      	ldr	r3, [pc, #8]	; (d7bf0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7be6:	681a      	ldr	r2, [r3, #0]
   d7be8:	4b02      	ldr	r3, [pc, #8]	; (d7bf4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7bea:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7bec:	4770      	bx	lr
   d7bee:	bf00      	nop
   d7bf0:	2003de58 	.word	0x2003de58
   d7bf4:	2003e644 	.word	0x2003e644

000d7bf8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7bf8:	4770      	bx	lr

000d7bfa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7bfa:	7441      	strb	r1, [r0, #17]
}
   d7bfc:	4770      	bx	lr

000d7bfe <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d7bfe:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7c00:	7c00      	ldrb	r0, [r0, #16]
   d7c02:	f7fe fde5 	bl	d67d0 <hal_usart_available_data_for_write>
}
   d7c06:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7c0a:	bd08      	pop	{r3, pc}

000d7c0c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7c0c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7c0e:	7c00      	ldrb	r0, [r0, #16]
   d7c10:	f7fe fdb6 	bl	d6780 <hal_usart_available>
}
   d7c14:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7c18:	bd08      	pop	{r3, pc}

000d7c1a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7c1a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7c1c:	7c00      	ldrb	r0, [r0, #16]
   d7c1e:	f7fe fdbf 	bl	d67a0 <hal_usart_peek>
}
   d7c22:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7c26:	bd08      	pop	{r3, pc}

000d7c28 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7c28:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d7c2a:	7c00      	ldrb	r0, [r0, #16]
   d7c2c:	f7fe fdb0 	bl	d6790 <hal_usart_read>
}
   d7c30:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7c34:	bd08      	pop	{r3, pc}

000d7c36 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d7c36:	7c00      	ldrb	r0, [r0, #16]
   d7c38:	f7fe bdba 	b.w	d67b0 <hal_usart_flush>

000d7c3c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7c3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7c3e:	7c45      	ldrb	r5, [r0, #17]
{
   d7c40:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7c42:	b12d      	cbz	r5, d7c50 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d7c44:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7c46:	b003      	add	sp, #12
   d7c48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7c4c:	f7fe bd90 	b.w	d6770 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7c50:	7c00      	ldrb	r0, [r0, #16]
   d7c52:	9101      	str	r1, [sp, #4]
   d7c54:	f7fe fdbc 	bl	d67d0 <hal_usart_available_data_for_write>
   d7c58:	2800      	cmp	r0, #0
   d7c5a:	9901      	ldr	r1, [sp, #4]
   d7c5c:	dcf2      	bgt.n	d7c44 <_ZN11USARTSerial5writeEh+0x8>
}
   d7c5e:	4628      	mov	r0, r5
   d7c60:	b003      	add	sp, #12
   d7c62:	bd30      	pop	{r4, r5, pc}

000d7c64 <_ZN11USARTSerialD0Ev>:
   d7c64:	b510      	push	{r4, lr}
   d7c66:	2114      	movs	r1, #20
   d7c68:	4604      	mov	r4, r0
   d7c6a:	f000 faae 	bl	d81ca <_ZdlPvj>
   d7c6e:	4620      	mov	r0, r4
   d7c70:	bd10      	pop	{r4, pc}
	...

000d7c74 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7c74:	b510      	push	{r4, lr}
   d7c76:	f04f 0c00 	mov.w	ip, #0
   d7c7a:	4604      	mov	r4, r0
   d7c7c:	4608      	mov	r0, r1
   d7c7e:	4611      	mov	r1, r2
   d7c80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7c84:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7c88:	4a04      	ldr	r2, [pc, #16]	; (d7c9c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d7c8a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7c8c:	2201      	movs	r2, #1
  _serial = serial;
   d7c8e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7c90:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7c92:	461a      	mov	r2, r3
   d7c94:	f7fe fd64 	bl	d6760 <hal_usart_init>
}
   d7c98:	4620      	mov	r0, r4
   d7c9a:	bd10      	pop	{r4, pc}
   d7c9c:	000db644 	.word	0x000db644

000d7ca0 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7ca0:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7ca2:	4c0e      	ldr	r4, [pc, #56]	; (d7cdc <_Z22__fetch_global_Serial1v+0x3c>)
   d7ca4:	7821      	ldrb	r1, [r4, #0]
   d7ca6:	f3bf 8f5b 	dmb	ish
   d7caa:	f011 0101 	ands.w	r1, r1, #1
   d7cae:	d112      	bne.n	d7cd6 <_Z22__fetch_global_Serial1v+0x36>
   d7cb0:	4620      	mov	r0, r4
   d7cb2:	9101      	str	r1, [sp, #4]
   d7cb4:	f7fc fa00 	bl	d40b8 <__cxa_guard_acquire>
   d7cb8:	9901      	ldr	r1, [sp, #4]
   d7cba:	b160      	cbz	r0, d7cd6 <_Z22__fetch_global_Serial1v+0x36>
   d7cbc:	4a08      	ldr	r2, [pc, #32]	; (d7ce0 <_Z22__fetch_global_Serial1v+0x40>)
   d7cbe:	4b09      	ldr	r3, [pc, #36]	; (d7ce4 <_Z22__fetch_global_Serial1v+0x44>)
   d7cc0:	4809      	ldr	r0, [pc, #36]	; (d7ce8 <_Z22__fetch_global_Serial1v+0x48>)
   d7cc2:	f7ff ffd7 	bl	d7c74 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7cc6:	4620      	mov	r0, r4
   d7cc8:	f7fc f9fb 	bl	d40c2 <__cxa_guard_release>
   d7ccc:	4a07      	ldr	r2, [pc, #28]	; (d7cec <_Z22__fetch_global_Serial1v+0x4c>)
   d7cce:	4908      	ldr	r1, [pc, #32]	; (d7cf0 <_Z22__fetch_global_Serial1v+0x50>)
   d7cd0:	4805      	ldr	r0, [pc, #20]	; (d7ce8 <_Z22__fetch_global_Serial1v+0x48>)
   d7cd2:	f000 fa75 	bl	d81c0 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7cd6:	4804      	ldr	r0, [pc, #16]	; (d7ce8 <_Z22__fetch_global_Serial1v+0x48>)
   d7cd8:	b002      	add	sp, #8
   d7cda:	bd10      	pop	{r4, pc}
   d7cdc:	2003e688 	.word	0x2003e688
   d7ce0:	2003e68c 	.word	0x2003e68c
   d7ce4:	2003e710 	.word	0x2003e710
   d7ce8:	2003e794 	.word	0x2003e794
   d7cec:	2003e038 	.word	0x2003e038
   d7cf0:	000d7bf9 	.word	0x000d7bf9

000d7cf4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7cf4:	7441      	strb	r1, [r0, #17]
}
   d7cf6:	4770      	bx	lr

000d7cf8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7cf8:	4770      	bx	lr

000d7cfa <_ZN9USBSerial4readEv>:
{
   d7cfa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7cfc:	2100      	movs	r1, #0
   d7cfe:	7c00      	ldrb	r0, [r0, #16]
   d7d00:	f7fe fd86 	bl	d6810 <HAL_USB_USART_Receive_Data>
}
   d7d04:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7d08:	bd08      	pop	{r3, pc}

000d7d0a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d7d0a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7d0c:	2101      	movs	r1, #1
   d7d0e:	7c00      	ldrb	r0, [r0, #16]
   d7d10:	f7fe fd7e 	bl	d6810 <HAL_USB_USART_Receive_Data>
}
   d7d14:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7d18:	bd08      	pop	{r3, pc}

000d7d1a <_ZN9USBSerial17availableForWriteEv>:
{
   d7d1a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7d1c:	7c00      	ldrb	r0, [r0, #16]
   d7d1e:	f7fe fd6f 	bl	d6800 <HAL_USB_USART_Available_Data_For_Write>
}
   d7d22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7d26:	bd08      	pop	{r3, pc}

000d7d28 <_ZN9USBSerial9availableEv>:
{
   d7d28:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7d2a:	7c00      	ldrb	r0, [r0, #16]
   d7d2c:	f7fe fd60 	bl	d67f0 <HAL_USB_USART_Available_Data>
}
   d7d30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7d34:	bd08      	pop	{r3, pc}

000d7d36 <_ZN9USBSerial5writeEh>:
{
   d7d36:	b513      	push	{r0, r1, r4, lr}
   d7d38:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7d3a:	7c00      	ldrb	r0, [r0, #16]
{
   d7d3c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7d3e:	f7fe fd5f 	bl	d6800 <HAL_USB_USART_Available_Data_For_Write>
   d7d42:	2800      	cmp	r0, #0
   d7d44:	9901      	ldr	r1, [sp, #4]
   d7d46:	dc01      	bgt.n	d7d4c <_ZN9USBSerial5writeEh+0x16>
   d7d48:	7c60      	ldrb	r0, [r4, #17]
   d7d4a:	b120      	cbz	r0, d7d56 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7d4c:	7c20      	ldrb	r0, [r4, #16]
   d7d4e:	f7fe fd67 	bl	d6820 <HAL_USB_USART_Send_Data>
   d7d52:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d7d56:	b002      	add	sp, #8
   d7d58:	bd10      	pop	{r4, pc}

000d7d5a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d7d5a:	7c00      	ldrb	r0, [r0, #16]
   d7d5c:	f7fe bd68 	b.w	d6830 <HAL_USB_USART_Flush_Data>

000d7d60 <_ZN9USBSerialD0Ev>:
   d7d60:	b510      	push	{r4, lr}
   d7d62:	2114      	movs	r1, #20
   d7d64:	4604      	mov	r4, r0
   d7d66:	f000 fa30 	bl	d81ca <_ZdlPvj>
   d7d6a:	4620      	mov	r0, r4
   d7d6c:	bd10      	pop	{r4, pc}
	...

000d7d70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7d70:	b510      	push	{r4, lr}
   d7d72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7d76:	4604      	mov	r4, r0
   d7d78:	4608      	mov	r0, r1
   d7d7a:	2100      	movs	r1, #0
   d7d7c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7d80:	4b04      	ldr	r3, [pc, #16]	; (d7d94 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7d82:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7d84:	2301      	movs	r3, #1
  _serial = serial;
   d7d86:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7d88:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d7d8a:	4611      	mov	r1, r2
   d7d8c:	f7fe fd28 	bl	d67e0 <HAL_USB_USART_Init>
}
   d7d90:	4620      	mov	r0, r4
   d7d92:	bd10      	pop	{r4, pc}
   d7d94:	000db674 	.word	0x000db674

000d7d98 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7d98:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7d9a:	2214      	movs	r2, #20
{
   d7d9c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7d9e:	2100      	movs	r1, #0
   d7da0:	f001 f8b0 	bl	d8f04 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7da4:	4620      	mov	r0, r4
   d7da6:	bd10      	pop	{r4, pc}

000d7da8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7da8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7daa:	4c10      	ldr	r4, [pc, #64]	; (d7dec <_Z16_fetch_usbserialv+0x44>)
{
   d7dac:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7dae:	a803      	add	r0, sp, #12
   d7db0:	f7ff fff2 	bl	d7d98 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7db4:	7821      	ldrb	r1, [r4, #0]
   d7db6:	f3bf 8f5b 	dmb	ish
   d7dba:	f011 0101 	ands.w	r1, r1, #1
   d7dbe:	d111      	bne.n	d7de4 <_Z16_fetch_usbserialv+0x3c>
   d7dc0:	4620      	mov	r0, r4
   d7dc2:	9101      	str	r1, [sp, #4]
   d7dc4:	f7fc f978 	bl	d40b8 <__cxa_guard_acquire>
   d7dc8:	9901      	ldr	r1, [sp, #4]
   d7dca:	b158      	cbz	r0, d7de4 <_Z16_fetch_usbserialv+0x3c>
   d7dcc:	aa03      	add	r2, sp, #12
   d7dce:	4808      	ldr	r0, [pc, #32]	; (d7df0 <_Z16_fetch_usbserialv+0x48>)
   d7dd0:	f7ff ffce 	bl	d7d70 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7dd4:	4620      	mov	r0, r4
   d7dd6:	f7fc f974 	bl	d40c2 <__cxa_guard_release>
   d7dda:	4a06      	ldr	r2, [pc, #24]	; (d7df4 <_Z16_fetch_usbserialv+0x4c>)
   d7ddc:	4906      	ldr	r1, [pc, #24]	; (d7df8 <_Z16_fetch_usbserialv+0x50>)
   d7dde:	4804      	ldr	r0, [pc, #16]	; (d7df0 <_Z16_fetch_usbserialv+0x48>)
   d7de0:	f000 f9ee 	bl	d81c0 <__aeabi_atexit>
	return _usbserial;
}
   d7de4:	4802      	ldr	r0, [pc, #8]	; (d7df0 <_Z16_fetch_usbserialv+0x48>)
   d7de6:	b008      	add	sp, #32
   d7de8:	bd10      	pop	{r4, pc}
   d7dea:	bf00      	nop
   d7dec:	2003e7a8 	.word	0x2003e7a8
   d7df0:	2003e7ac 	.word	0x2003e7ac
   d7df4:	2003e038 	.word	0x2003e038
   d7df8:	000d7cf9 	.word	0x000d7cf9

000d7dfc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7dfc:	2200      	movs	r2, #0
   d7dfe:	6840      	ldr	r0, [r0, #4]
   d7e00:	4611      	mov	r1, r2
   d7e02:	f7fe be03 	b.w	d6a0c <network_ready>

000d7e06 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7e06:	2200      	movs	r2, #0
   d7e08:	6840      	ldr	r0, [r0, #4]
   d7e0a:	4611      	mov	r1, r2
   d7e0c:	f7fe be1e 	b.w	d6a4c <network_listening>

000d7e10 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7e10:	2200      	movs	r2, #0
   d7e12:	6840      	ldr	r0, [r0, #4]
   d7e14:	4611      	mov	r1, r2
   d7e16:	f7fe be29 	b.w	d6a6c <network_get_listen_timeout>

000d7e1a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7e1a:	6840      	ldr	r0, [r0, #4]
   d7e1c:	2200      	movs	r2, #0
   d7e1e:	f7fe be1d 	b.w	d6a5c <network_set_listen_timeout>

000d7e22 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7e22:	6840      	ldr	r0, [r0, #4]
   d7e24:	2200      	movs	r2, #0
   d7e26:	f081 0101 	eor.w	r1, r1, #1
   d7e2a:	f7fe be07 	b.w	d6a3c <network_listen>

000d7e2e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7e2e:	2300      	movs	r3, #0
   d7e30:	6840      	ldr	r0, [r0, #4]
   d7e32:	461a      	mov	r2, r3
   d7e34:	4619      	mov	r1, r3
   d7e36:	f7fe bdf9 	b.w	d6a2c <network_off>

000d7e3a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7e3a:	2300      	movs	r3, #0
   d7e3c:	6840      	ldr	r0, [r0, #4]
   d7e3e:	461a      	mov	r2, r3
   d7e40:	4619      	mov	r1, r3
   d7e42:	f7fe bdeb 	b.w	d6a1c <network_on>

000d7e46 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7e46:	2200      	movs	r2, #0
   d7e48:	6840      	ldr	r0, [r0, #4]
   d7e4a:	4611      	mov	r1, r2
   d7e4c:	f7fe bdce 	b.w	d69ec <network_connecting>

000d7e50 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7e50:	6840      	ldr	r0, [r0, #4]
   d7e52:	2200      	movs	r2, #0
   d7e54:	2102      	movs	r1, #2
   d7e56:	f7fe bdd1 	b.w	d69fc <network_disconnect>

000d7e5a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7e5a:	2300      	movs	r3, #0
   d7e5c:	6840      	ldr	r0, [r0, #4]
   d7e5e:	461a      	mov	r2, r3
   d7e60:	f7fe bdbc 	b.w	d69dc <network_connect>

000d7e64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7e64:	4b02      	ldr	r3, [pc, #8]	; (d7e70 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7e66:	2204      	movs	r2, #4
   d7e68:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7e6a:	4a02      	ldr	r2, [pc, #8]	; (d7e74 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7e6c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d7e6e:	4770      	bx	lr
   d7e70:	2003e7c0 	.word	0x2003e7c0
   d7e74:	000db6a4 	.word	0x000db6a4

000d7e78 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d7e78:	b510      	push	{r4, lr}
   d7e7a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d7e7c:	f001 f89d 	bl	d8fba <strlen>
   d7e80:	3801      	subs	r0, #1
   d7e82:	1823      	adds	r3, r4, r0
   d7e84:	4620      	mov	r0, r4
	while(i<j){
   d7e86:	4283      	cmp	r3, r0
   d7e88:	d906      	bls.n	d7e98 <_Z11str_reversePc+0x20>
		c = *i;
   d7e8a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d7e8c:	7819      	ldrb	r1, [r3, #0]
   d7e8e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d7e92:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d7e96:	e7f6      	b.n	d7e86 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d7e98:	bd10      	pop	{r4, pc}

000d7e9a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d7e9a:	b570      	push	{r4, r5, r6, lr}
   d7e9c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d7e9e:	1e91      	subs	r1, r2, #2
   d7ea0:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d7ea2:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d7ea4:	d822      	bhi.n	d7eec <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d7ea6:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d7ea8:	b16d      	cbz	r5, d7ec6 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d7eaa:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d7eae:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d7eb2:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d7eb4:	2d09      	cmp	r5, #9
                *ptr += '0';
   d7eb6:	bf94      	ite	ls
   d7eb8:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d7eba:	3157      	addhi	r1, #87	; 0x57
   d7ebc:	b2c9      	uxtb	r1, r1
   d7ebe:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d7ec2:	4635      	mov	r5, r6
	while(a){
   d7ec4:	e7f0      	b.n	d7ea8 <ultoa+0xe>
   d7ec6:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d7ec8:	4423      	add	r3, r4
            *ptr++ = '0';
   d7eca:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d7ecc:	4293      	cmp	r3, r2
   d7ece:	d902      	bls.n	d7ed6 <ultoa+0x3c>
            *ptr++ = '0';
   d7ed0:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d7ed4:	e7fa      	b.n	d7ecc <ultoa+0x32>
   d7ed6:	1a1a      	subs	r2, r3, r0
   d7ed8:	4283      	cmp	r3, r0
   d7eda:	bf38      	it	cc
   d7edc:	2200      	movcc	r2, #0

	*ptr = '\0';
   d7ede:	2300      	movs	r3, #0
   d7ee0:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d7ee2:	4620      	mov	r0, r4
   d7ee4:	f7ff ffc8 	bl	d7e78 <_Z11str_reversePc>
	return buffer;
   d7ee8:	4620      	mov	r0, r4
}
   d7eea:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d7eec:	2000      	movs	r0, #0
   d7eee:	e7fc      	b.n	d7eea <ultoa+0x50>

000d7ef0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d7ef0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d7ef2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d7ef4:	460c      	mov	r4, r1
   d7ef6:	4615      	mov	r5, r2
	if(a<0){
   d7ef8:	da0e      	bge.n	d7f18 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d7efa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d7efe:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d7f02:	bf14      	ite	ne
   d7f04:	4258      	negne	r0, r3
   d7f06:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d7f08:	2301      	movs	r3, #1
		*buffer = '-';
   d7f0a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d7f0c:	462a      	mov	r2, r5
   d7f0e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d7f10:	f7ff ffc3 	bl	d7e9a <ultoa>
	}
	return buffer;
}
   d7f14:	4620      	mov	r0, r4
   d7f16:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d7f18:	2301      	movs	r3, #1
   d7f1a:	e7f9      	b.n	d7f10 <itoa+0x20>

000d7f1c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7f1c:	4b01      	ldr	r3, [pc, #4]	; (d7f24 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d7f1e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7f20:	4770      	bx	lr
   d7f22:	bf00      	nop
   d7f24:	2003de60 	.word	0x2003de60

000d7f28 <serialEventRun>:
{
   d7f28:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7f2a:	4b0b      	ldr	r3, [pc, #44]	; (d7f58 <serialEventRun+0x30>)
   d7f2c:	b143      	cbz	r3, d7f40 <serialEventRun+0x18>
   d7f2e:	f7ff ff3b 	bl	d7da8 <_Z16_fetch_usbserialv>
   d7f32:	6803      	ldr	r3, [r0, #0]
   d7f34:	691b      	ldr	r3, [r3, #16]
   d7f36:	4798      	blx	r3
   d7f38:	2800      	cmp	r0, #0
   d7f3a:	dd01      	ble.n	d7f40 <serialEventRun+0x18>
        serialEvent();
   d7f3c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7f40:	4b06      	ldr	r3, [pc, #24]	; (d7f5c <serialEventRun+0x34>)
   d7f42:	b143      	cbz	r3, d7f56 <serialEventRun+0x2e>
   d7f44:	f7ff feac 	bl	d7ca0 <_Z22__fetch_global_Serial1v>
   d7f48:	6803      	ldr	r3, [r0, #0]
   d7f4a:	691b      	ldr	r3, [r3, #16]
   d7f4c:	4798      	blx	r3
   d7f4e:	2800      	cmp	r0, #0
   d7f50:	dd01      	ble.n	d7f56 <serialEventRun+0x2e>
        serialEvent1();
   d7f52:	f3af 8000 	nop.w
}
   d7f56:	bd08      	pop	{r3, pc}
	...

000d7f60 <_post_loop>:
{
   d7f60:	b508      	push	{r3, lr}
	serialEventRun();
   d7f62:	f7ff ffe1 	bl	d7f28 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7f66:	f7fe fb0b 	bl	d6580 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7f6a:	4b01      	ldr	r3, [pc, #4]	; (d7f70 <_post_loop+0x10>)
   d7f6c:	6018      	str	r0, [r3, #0]
}
   d7f6e:	bd08      	pop	{r3, pc}
   d7f70:	2003e7dc 	.word	0x2003e7dc

000d7f74 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7f74:	4802      	ldr	r0, [pc, #8]	; (d7f80 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7f76:	4a03      	ldr	r2, [pc, #12]	; (d7f84 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7f78:	4903      	ldr	r1, [pc, #12]	; (d7f88 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7f7a:	1a12      	subs	r2, r2, r0
   d7f7c:	f000 bf9a 	b.w	d8eb4 <memcpy>
   d7f80:	2003f400 	.word	0x2003f400
   d7f84:	2003fc04 	.word	0x2003fc04
   d7f88:	000db9d0 	.word	0x000db9d0

000d7f8c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7f8c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7f8e:	2300      	movs	r3, #0
   d7f90:	9300      	str	r3, [sp, #0]
   d7f92:	461a      	mov	r2, r3
   d7f94:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7f98:	f7fe fcac 	bl	d68f4 <system_ctrl_set_result>
}
   d7f9c:	b003      	add	sp, #12
   d7f9e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7fa4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d7fa4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7fa6:	8843      	ldrh	r3, [r0, #2]
   d7fa8:	2b0a      	cmp	r3, #10
   d7faa:	d008      	beq.n	d7fbe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7fac:	2b50      	cmp	r3, #80	; 0x50
   d7fae:	d10b      	bne.n	d7fc8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d7fb0:	4b09      	ldr	r3, [pc, #36]	; (d7fd8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7fb2:	681b      	ldr	r3, [r3, #0]
   d7fb4:	b14b      	cbz	r3, d7fca <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d7fb6:	b003      	add	sp, #12
   d7fb8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7fbc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d7fbe:	f7ff ffe5 	bl	d7f8c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d7fc2:	b003      	add	sp, #12
   d7fc4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7fc8:	2300      	movs	r3, #0
   d7fca:	9300      	str	r3, [sp, #0]
   d7fcc:	461a      	mov	r2, r3
   d7fce:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7fd2:	f7fe fc8f 	bl	d68f4 <system_ctrl_set_result>
}
   d7fd6:	e7f4      	b.n	d7fc2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7fd8:	2003e7cc 	.word	0x2003e7cc

000d7fdc <module_user_init_hook>:
{
   d7fdc:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7fde:	4c12      	ldr	r4, [pc, #72]	; (d8028 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7fe0:	4812      	ldr	r0, [pc, #72]	; (d802c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7fe2:	4d13      	ldr	r5, [pc, #76]	; (d8030 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7fe4:	2100      	movs	r1, #0
   d7fe6:	f7fe fd89 	bl	d6afc <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7fea:	6823      	ldr	r3, [r4, #0]
   d7fec:	42ab      	cmp	r3, r5
   d7fee:	4b11      	ldr	r3, [pc, #68]	; (d8034 <module_user_init_hook+0x58>)
   d7ff0:	bf0c      	ite	eq
   d7ff2:	2201      	moveq	r2, #1
   d7ff4:	2200      	movne	r2, #0
   d7ff6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7ff8:	d002      	beq.n	d8000 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d7ffa:	f7ff ffbb 	bl	d7f74 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7ffe:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8000:	f7fe faa6 	bl	d6550 <HAL_RNG_GetRandomNumber>
   d8004:	4604      	mov	r4, r0
    srand(seed);
   d8006:	f000 ff85 	bl	d8f14 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d800a:	4b0b      	ldr	r3, [pc, #44]	; (d8038 <module_user_init_hook+0x5c>)
   d800c:	b113      	cbz	r3, d8014 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d800e:	4620      	mov	r0, r4
   d8010:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8014:	2100      	movs	r1, #0
   d8016:	4808      	ldr	r0, [pc, #32]	; (d8038 <module_user_init_hook+0x5c>)
   d8018:	f7fe fcd8 	bl	d69cc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d801c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8020:	4806      	ldr	r0, [pc, #24]	; (d803c <module_user_init_hook+0x60>)
   d8022:	2100      	movs	r1, #0
   d8024:	f7fe bc5c 	b.w	d68e0 <system_ctrl_set_app_request_handler>
   d8028:	2003fc00 	.word	0x2003fc00
   d802c:	000d7f1d 	.word	0x000d7f1d
   d8030:	9a271c1e 	.word	0x9a271c1e
   d8034:	2003e7c8 	.word	0x2003e7c8
   d8038:	00000000 	.word	0x00000000
   d803c:	000d7fa5 	.word	0x000d7fa5

000d8040 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d8040:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d8042:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d8044:	d902      	bls.n	d804c <pinAvailable+0xc>
    return false;
   d8046:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d8048:	b002      	add	sp, #8
   d804a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d804c:	f1a0 030b 	sub.w	r3, r0, #11
   d8050:	2b02      	cmp	r3, #2
   d8052:	d81a      	bhi.n	d808a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8054:	4c17      	ldr	r4, [pc, #92]	; (d80b4 <pinAvailable+0x74>)
   d8056:	7821      	ldrb	r1, [r4, #0]
   d8058:	f3bf 8f5b 	dmb	ish
   d805c:	f011 0101 	ands.w	r1, r1, #1
   d8060:	d10b      	bne.n	d807a <pinAvailable+0x3a>
   d8062:	4620      	mov	r0, r4
   d8064:	9101      	str	r1, [sp, #4]
   d8066:	f7fc f827 	bl	d40b8 <__cxa_guard_acquire>
   d806a:	9901      	ldr	r1, [sp, #4]
   d806c:	b128      	cbz	r0, d807a <pinAvailable+0x3a>
   d806e:	4812      	ldr	r0, [pc, #72]	; (d80b8 <pinAvailable+0x78>)
   d8070:	f7ff fb0c 	bl	d768c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d8074:	4620      	mov	r0, r4
   d8076:	f7fc f824 	bl	d40c2 <__cxa_guard_release>
   d807a:	4b0f      	ldr	r3, [pc, #60]	; (d80b8 <pinAvailable+0x78>)
   d807c:	7818      	ldrb	r0, [r3, #0]
   d807e:	f7fe fb67 	bl	d6750 <hal_spi_is_enabled>
   d8082:	2800      	cmp	r0, #0
   d8084:	d1df      	bne.n	d8046 <pinAvailable+0x6>
  return true; // 'pin' is available
   d8086:	2001      	movs	r0, #1
   d8088:	e7de      	b.n	d8048 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d808a:	2801      	cmp	r0, #1
   d808c:	d809      	bhi.n	d80a2 <pinAvailable+0x62>
   d808e:	f000 f86f 	bl	d8170 <_Z19__fetch_global_Wirev>
   d8092:	2100      	movs	r1, #0
   d8094:	7c00      	ldrb	r0, [r0, #16]
   d8096:	f7fe fb13 	bl	d66c0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d809a:	f080 0001 	eor.w	r0, r0, #1
   d809e:	b2c0      	uxtb	r0, r0
   d80a0:	e7d2      	b.n	d8048 <pinAvailable+0x8>
   d80a2:	3809      	subs	r0, #9
   d80a4:	2801      	cmp	r0, #1
   d80a6:	d8ee      	bhi.n	d8086 <pinAvailable+0x46>
   d80a8:	f7ff fdfa 	bl	d7ca0 <_Z22__fetch_global_Serial1v>
   d80ac:	7c00      	ldrb	r0, [r0, #16]
   d80ae:	f7fe fb87 	bl	d67c0 <hal_usart_is_enabled>
   d80b2:	e7f2      	b.n	d809a <pinAvailable+0x5a>
   d80b4:	2003e7d0 	.word	0x2003e7d0
   d80b8:	2003e7d4 	.word	0x2003e7d4

000d80bc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d80bc:	2823      	cmp	r0, #35	; 0x23
{
   d80be:	b538      	push	{r3, r4, r5, lr}
   d80c0:	4604      	mov	r4, r0
   d80c2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d80c4:	d80a      	bhi.n	d80dc <pinMode+0x20>
   d80c6:	29ff      	cmp	r1, #255	; 0xff
   d80c8:	d008      	beq.n	d80dc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d80ca:	f7ff ffb9 	bl	d8040 <pinAvailable>
   d80ce:	b128      	cbz	r0, d80dc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d80d0:	4629      	mov	r1, r5
   d80d2:	4620      	mov	r0, r4
}
   d80d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d80d8:	f7fe ba82 	b.w	d65e0 <HAL_Pin_Mode>
}
   d80dc:	bd38      	pop	{r3, r4, r5, pc}

000d80de <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d80de:	b538      	push	{r3, r4, r5, lr}
   d80e0:	4604      	mov	r4, r0
   d80e2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d80e4:	f7fe fa84 	bl	d65f0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d80e8:	28ff      	cmp	r0, #255	; 0xff
   d80ea:	d010      	beq.n	d810e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d80ec:	2806      	cmp	r0, #6
   d80ee:	d804      	bhi.n	d80fa <digitalWrite+0x1c>
   d80f0:	234d      	movs	r3, #77	; 0x4d
   d80f2:	fa23 f000 	lsr.w	r0, r3, r0
   d80f6:	07c3      	lsls	r3, r0, #31
   d80f8:	d409      	bmi.n	d810e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d80fa:	4620      	mov	r0, r4
   d80fc:	f7ff ffa0 	bl	d8040 <pinAvailable>
   d8100:	b128      	cbz	r0, d810e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8102:	4629      	mov	r1, r5
   d8104:	4620      	mov	r0, r4
}
   d8106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d810a:	f7fe ba79 	b.w	d6600 <HAL_GPIO_Write>
}
   d810e:	bd38      	pop	{r3, r4, r5, pc}

000d8110 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d8110:	280d      	cmp	r0, #13
{
   d8112:	b510      	push	{r4, lr}
   d8114:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8116:	bf9c      	itt	ls
   d8118:	340e      	addls	r4, #14
   d811a:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d811c:	4620      	mov	r0, r4
   d811e:	f7ff ff8f 	bl	d8040 <pinAvailable>
   d8122:	b150      	cbz	r0, d813a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8124:	2103      	movs	r1, #3
   d8126:	4620      	mov	r0, r4
   d8128:	f7fe fa52 	bl	d65d0 <HAL_Validate_Pin_Function>
   d812c:	2803      	cmp	r0, #3
   d812e:	d104      	bne.n	d813a <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d8130:	4620      	mov	r0, r4
}
   d8132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d8136:	f7fe ba7b 	b.w	d6630 <hal_adc_read>
}
   d813a:	2000      	movs	r0, #0
   d813c:	bd10      	pop	{r4, pc}
	...

000d8140 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d8140:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d8142:	2300      	movs	r3, #0
   d8144:	2520      	movs	r5, #32
   d8146:	8043      	strh	r3, [r0, #2]
   d8148:	2314      	movs	r3, #20
{
   d814a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d814c:	8003      	strh	r3, [r0, #0]
   d814e:	6085      	str	r5, [r0, #8]
   d8150:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8152:	4906      	ldr	r1, [pc, #24]	; (d816c <_Z17acquireWireBufferv+0x2c>)
   d8154:	4628      	mov	r0, r5
   d8156:	f000 f83c 	bl	d81d2 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d815a:	4904      	ldr	r1, [pc, #16]	; (d816c <_Z17acquireWireBufferv+0x2c>)
	};
   d815c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d815e:	4628      	mov	r0, r5
   d8160:	f000 f837 	bl	d81d2 <_ZnajRKSt9nothrow_t>
	};
   d8164:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d8166:	4620      	mov	r0, r4
   d8168:	bd38      	pop	{r3, r4, r5, pc}
   d816a:	bf00      	nop
   d816c:	000db6d0 	.word	0x000db6d0

000d8170 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8170:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8172:	4d0f      	ldr	r5, [pc, #60]	; (d81b0 <_Z19__fetch_global_Wirev+0x40>)
   d8174:	7829      	ldrb	r1, [r5, #0]
   d8176:	f3bf 8f5b 	dmb	ish
   d817a:	f011 0401 	ands.w	r4, r1, #1
{
   d817e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8180:	d113      	bne.n	d81aa <_Z19__fetch_global_Wirev+0x3a>
   d8182:	4628      	mov	r0, r5
   d8184:	f7fb ff98 	bl	d40b8 <__cxa_guard_acquire>
   d8188:	b178      	cbz	r0, d81aa <_Z19__fetch_global_Wirev+0x3a>
   d818a:	a801      	add	r0, sp, #4
   d818c:	f7ff ffd8 	bl	d8140 <_Z17acquireWireBufferv>
   d8190:	aa01      	add	r2, sp, #4
   d8192:	4621      	mov	r1, r4
   d8194:	4807      	ldr	r0, [pc, #28]	; (d81b4 <_Z19__fetch_global_Wirev+0x44>)
   d8196:	f7ff f86f 	bl	d7278 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d819a:	4628      	mov	r0, r5
   d819c:	f7fb ff91 	bl	d40c2 <__cxa_guard_release>
   d81a0:	4a05      	ldr	r2, [pc, #20]	; (d81b8 <_Z19__fetch_global_Wirev+0x48>)
   d81a2:	4906      	ldr	r1, [pc, #24]	; (d81bc <_Z19__fetch_global_Wirev+0x4c>)
   d81a4:	4803      	ldr	r0, [pc, #12]	; (d81b4 <_Z19__fetch_global_Wirev+0x44>)
   d81a6:	f000 f80b 	bl	d81c0 <__aeabi_atexit>
	return wire;
}
   d81aa:	4802      	ldr	r0, [pc, #8]	; (d81b4 <_Z19__fetch_global_Wirev+0x44>)
   d81ac:	b007      	add	sp, #28
   d81ae:	bd30      	pop	{r4, r5, pc}
   d81b0:	2003e7e0 	.word	0x2003e7e0
   d81b4:	2003e7e4 	.word	0x2003e7e4
   d81b8:	2003e038 	.word	0x2003e038
   d81bc:	000d7221 	.word	0x000d7221

000d81c0 <__aeabi_atexit>:
   d81c0:	460b      	mov	r3, r1
   d81c2:	4601      	mov	r1, r0
   d81c4:	4618      	mov	r0, r3
   d81c6:	f000 be55 	b.w	d8e74 <__cxa_atexit>

000d81ca <_ZdlPvj>:
   d81ca:	f7fb bf68 	b.w	d409e <_ZdlPv>

000d81ce <_ZnwjRKSt9nothrow_t>:
   d81ce:	f7fb bf62 	b.w	d4096 <_Znwj>

000d81d2 <_ZnajRKSt9nothrow_t>:
   d81d2:	f7fb bf62 	b.w	d409a <_Znaj>

000d81d6 <_ZSt25__throw_bad_function_callv>:
   d81d6:	b508      	push	{r3, lr}
   d81d8:	f7fe fc78 	bl	d6acc <abort>

000d81dc <sqrt>:
   d81dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d81e0:	ed2d 8b02 	vpush	{d8}
   d81e4:	b08b      	sub	sp, #44	; 0x2c
   d81e6:	ec55 4b10 	vmov	r4, r5, d0
   d81ea:	f000 f855 	bl	d8298 <__ieee754_sqrt>
   d81ee:	4b28      	ldr	r3, [pc, #160]	; (d8290 <sqrt+0xb4>)
   d81f0:	eeb0 8a40 	vmov.f32	s16, s0
   d81f4:	eef0 8a60 	vmov.f32	s17, s1
   d81f8:	f993 7000 	ldrsb.w	r7, [r3]
   d81fc:	1c7b      	adds	r3, r7, #1
   d81fe:	d012      	beq.n	d8226 <sqrt+0x4a>
   d8200:	4622      	mov	r2, r4
   d8202:	462b      	mov	r3, r5
   d8204:	4620      	mov	r0, r4
   d8206:	4629      	mov	r1, r5
   d8208:	f000 fd62 	bl	d8cd0 <__aeabi_dcmpun>
   d820c:	4606      	mov	r6, r0
   d820e:	b950      	cbnz	r0, d8226 <sqrt+0x4a>
   d8210:	f04f 0800 	mov.w	r8, #0
   d8214:	f04f 0900 	mov.w	r9, #0
   d8218:	4620      	mov	r0, r4
   d821a:	4629      	mov	r1, r5
   d821c:	4642      	mov	r2, r8
   d821e:	464b      	mov	r3, r9
   d8220:	f000 fd2e 	bl	d8c80 <__aeabi_dcmplt>
   d8224:	b940      	cbnz	r0, d8238 <sqrt+0x5c>
   d8226:	eeb0 0a48 	vmov.f32	s0, s16
   d822a:	eef0 0a68 	vmov.f32	s1, s17
   d822e:	b00b      	add	sp, #44	; 0x2c
   d8230:	ecbd 8b02 	vpop	{d8}
   d8234:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8238:	4b16      	ldr	r3, [pc, #88]	; (d8294 <sqrt+0xb8>)
   d823a:	9608      	str	r6, [sp, #32]
   d823c:	2201      	movs	r2, #1
   d823e:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8242:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d8246:	9200      	str	r2, [sp, #0]
   d8248:	9301      	str	r3, [sp, #4]
   d824a:	b197      	cbz	r7, d8272 <sqrt+0x96>
   d824c:	4642      	mov	r2, r8
   d824e:	464b      	mov	r3, r9
   d8250:	4640      	mov	r0, r8
   d8252:	4649      	mov	r1, r9
   d8254:	f000 fbcc 	bl	d89f0 <__aeabi_ddiv>
   d8258:	2f02      	cmp	r7, #2
   d825a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d825e:	d10a      	bne.n	d8276 <sqrt+0x9a>
   d8260:	f7fe fc44 	bl	d6aec <__errno>
   d8264:	2321      	movs	r3, #33	; 0x21
   d8266:	6003      	str	r3, [r0, #0]
   d8268:	9b08      	ldr	r3, [sp, #32]
   d826a:	b963      	cbnz	r3, d8286 <sqrt+0xaa>
   d826c:	ed9d 8b06 	vldr	d8, [sp, #24]
   d8270:	e7d9      	b.n	d8226 <sqrt+0x4a>
   d8272:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d8276:	4668      	mov	r0, sp
   d8278:	f000 f8d2 	bl	d8420 <matherr>
   d827c:	2800      	cmp	r0, #0
   d827e:	d0ef      	beq.n	d8260 <sqrt+0x84>
   d8280:	9b08      	ldr	r3, [sp, #32]
   d8282:	2b00      	cmp	r3, #0
   d8284:	d0f2      	beq.n	d826c <sqrt+0x90>
   d8286:	f7fe fc31 	bl	d6aec <__errno>
   d828a:	9b08      	ldr	r3, [sp, #32]
   d828c:	6003      	str	r3, [r0, #0]
   d828e:	e7ed      	b.n	d826c <sqrt+0x90>
   d8290:	2003de5c 	.word	0x2003de5c
   d8294:	000db6d4 	.word	0x000db6d4

000d8298 <__ieee754_sqrt>:
   d8298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d829c:	4a5f      	ldr	r2, [pc, #380]	; (d841c <__ieee754_sqrt+0x184>)
   d829e:	ec57 6b10 	vmov	r6, r7, d0
   d82a2:	43ba      	bics	r2, r7
   d82a4:	f000 8098 	beq.w	d83d8 <__ieee754_sqrt+0x140>
   d82a8:	2f00      	cmp	r7, #0
   d82aa:	ee10 4a10 	vmov	r4, s0
   d82ae:	463b      	mov	r3, r7
   d82b0:	dd4e      	ble.n	d8350 <__ieee754_sqrt+0xb8>
   d82b2:	1539      	asrs	r1, r7, #20
   d82b4:	d05b      	beq.n	d836e <__ieee754_sqrt+0xd6>
   d82b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d82ba:	07ca      	lsls	r2, r1, #31
   d82bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d82c0:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d82c4:	d403      	bmi.n	d82ce <__ieee754_sqrt+0x36>
   d82c6:	005b      	lsls	r3, r3, #1
   d82c8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d82cc:	0064      	lsls	r4, r4, #1
   d82ce:	0fe2      	lsrs	r2, r4, #31
   d82d0:	f04f 0c00 	mov.w	ip, #0
   d82d4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d82d8:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d82dc:	0064      	lsls	r4, r4, #1
   d82de:	4666      	mov	r6, ip
   d82e0:	2516      	movs	r5, #22
   d82e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d82e6:	18b1      	adds	r1, r6, r2
   d82e8:	4299      	cmp	r1, r3
   d82ea:	dc02      	bgt.n	d82f2 <__ieee754_sqrt+0x5a>
   d82ec:	1a5b      	subs	r3, r3, r1
   d82ee:	188e      	adds	r6, r1, r2
   d82f0:	4494      	add	ip, r2
   d82f2:	005b      	lsls	r3, r3, #1
   d82f4:	3d01      	subs	r5, #1
   d82f6:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d82fa:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d82fe:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8302:	d1f0      	bne.n	d82e6 <__ieee754_sqrt+0x4e>
   d8304:	462f      	mov	r7, r5
   d8306:	2020      	movs	r0, #32
   d8308:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d830c:	e009      	b.n	d8322 <__ieee754_sqrt+0x8a>
   d830e:	d03e      	beq.n	d838e <__ieee754_sqrt+0xf6>
   d8310:	0fe1      	lsrs	r1, r4, #31
   d8312:	3801      	subs	r0, #1
   d8314:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d8318:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d831c:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8320:	d03e      	beq.n	d83a0 <__ieee754_sqrt+0x108>
   d8322:	42b3      	cmp	r3, r6
   d8324:	eb02 0105 	add.w	r1, r2, r5
   d8328:	ddf1      	ble.n	d830e <__ieee754_sqrt+0x76>
   d832a:	2900      	cmp	r1, #0
   d832c:	eb01 0502 	add.w	r5, r1, r2
   d8330:	db09      	blt.n	d8346 <__ieee754_sqrt+0xae>
   d8332:	46b0      	mov	r8, r6
   d8334:	1b9b      	subs	r3, r3, r6
   d8336:	42a1      	cmp	r1, r4
   d8338:	bf88      	it	hi
   d833a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   d833e:	1a64      	subs	r4, r4, r1
   d8340:	4417      	add	r7, r2
   d8342:	4646      	mov	r6, r8
   d8344:	e7e4      	b.n	d8310 <__ieee754_sqrt+0x78>
   d8346:	2d00      	cmp	r5, #0
   d8348:	dbf3      	blt.n	d8332 <__ieee754_sqrt+0x9a>
   d834a:	f106 0801 	add.w	r8, r6, #1
   d834e:	e7f1      	b.n	d8334 <__ieee754_sqrt+0x9c>
   d8350:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d8354:	4332      	orrs	r2, r6
   d8356:	d036      	beq.n	d83c6 <__ieee754_sqrt+0x12e>
   d8358:	2f00      	cmp	r7, #0
   d835a:	d14d      	bne.n	d83f8 <__ieee754_sqrt+0x160>
   d835c:	4639      	mov	r1, r7
   d835e:	0ae2      	lsrs	r2, r4, #11
   d8360:	3915      	subs	r1, #21
   d8362:	0564      	lsls	r4, r4, #21
   d8364:	4613      	mov	r3, r2
   d8366:	2a00      	cmp	r2, #0
   d8368:	d0f9      	beq.n	d835e <__ieee754_sqrt+0xc6>
   d836a:	02d7      	lsls	r7, r2, #11
   d836c:	d451      	bmi.n	d8412 <__ieee754_sqrt+0x17a>
   d836e:	2000      	movs	r0, #0
   d8370:	005b      	lsls	r3, r3, #1
   d8372:	02de      	lsls	r6, r3, #11
   d8374:	4605      	mov	r5, r0
   d8376:	f100 0001 	add.w	r0, r0, #1
   d837a:	d5f9      	bpl.n	d8370 <__ieee754_sqrt+0xd8>
   d837c:	461a      	mov	r2, r3
   d837e:	4623      	mov	r3, r4
   d8380:	4084      	lsls	r4, r0
   d8382:	f1c0 0020 	rsb	r0, r0, #32
   d8386:	40c3      	lsrs	r3, r0
   d8388:	4313      	orrs	r3, r2
   d838a:	1b49      	subs	r1, r1, r5
   d838c:	e793      	b.n	d82b6 <__ieee754_sqrt+0x1e>
   d838e:	42a1      	cmp	r1, r4
   d8390:	d8be      	bhi.n	d8310 <__ieee754_sqrt+0x78>
   d8392:	2900      	cmp	r1, #0
   d8394:	eb01 0502 	add.w	r5, r1, r2
   d8398:	dbd5      	blt.n	d8346 <__ieee754_sqrt+0xae>
   d839a:	4698      	mov	r8, r3
   d839c:	2300      	movs	r3, #0
   d839e:	e7ce      	b.n	d833e <__ieee754_sqrt+0xa6>
   d83a0:	4323      	orrs	r3, r4
   d83a2:	d112      	bne.n	d83ca <__ieee754_sqrt+0x132>
   d83a4:	0878      	lsrs	r0, r7, #1
   d83a6:	ea4f 016c 	mov.w	r1, ip, asr #1
   d83aa:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d83ae:	f01c 0f01 	tst.w	ip, #1
   d83b2:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d83b6:	bf18      	it	ne
   d83b8:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d83bc:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d83c0:	4602      	mov	r2, r0
   d83c2:	ec43 2b10 	vmov	d0, r2, r3
   d83c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d83ca:	1c7b      	adds	r3, r7, #1
   d83cc:	bf16      	itet	ne
   d83ce:	1c78      	addne	r0, r7, #1
   d83d0:	f10c 0c01 	addeq.w	ip, ip, #1
   d83d4:	0840      	lsrne	r0, r0, #1
   d83d6:	e7e6      	b.n	d83a6 <__ieee754_sqrt+0x10e>
   d83d8:	ee10 2a10 	vmov	r2, s0
   d83dc:	ee10 0a10 	vmov	r0, s0
   d83e0:	463b      	mov	r3, r7
   d83e2:	4639      	mov	r1, r7
   d83e4:	f000 f9da 	bl	d879c <__aeabi_dmul>
   d83e8:	4632      	mov	r2, r6
   d83ea:	463b      	mov	r3, r7
   d83ec:	f000 f820 	bl	d8430 <__adddf3>
   d83f0:	ec41 0b10 	vmov	d0, r0, r1
   d83f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d83f8:	ee10 2a10 	vmov	r2, s0
   d83fc:	4630      	mov	r0, r6
   d83fe:	4639      	mov	r1, r7
   d8400:	f000 f814 	bl	d842c <__aeabi_dsub>
   d8404:	4602      	mov	r2, r0
   d8406:	460b      	mov	r3, r1
   d8408:	f000 faf2 	bl	d89f0 <__aeabi_ddiv>
   d840c:	ec41 0b10 	vmov	d0, r0, r1
   d8410:	e7d9      	b.n	d83c6 <__ieee754_sqrt+0x12e>
   d8412:	4623      	mov	r3, r4
   d8414:	2020      	movs	r0, #32
   d8416:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d841a:	e7b4      	b.n	d8386 <__ieee754_sqrt+0xee>
   d841c:	7ff00000 	.word	0x7ff00000

000d8420 <matherr>:
   d8420:	2000      	movs	r0, #0
   d8422:	4770      	bx	lr

000d8424 <__aeabi_drsub>:
   d8424:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8428:	e002      	b.n	d8430 <__adddf3>
   d842a:	bf00      	nop

000d842c <__aeabi_dsub>:
   d842c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8430 <__adddf3>:
   d8430:	b530      	push	{r4, r5, lr}
   d8432:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8436:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d843a:	ea94 0f05 	teq	r4, r5
   d843e:	bf08      	it	eq
   d8440:	ea90 0f02 	teqeq	r0, r2
   d8444:	bf1f      	itttt	ne
   d8446:	ea54 0c00 	orrsne.w	ip, r4, r0
   d844a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d844e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8456:	f000 80e2 	beq.w	d861e <__adddf3+0x1ee>
   d845a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d845e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8462:	bfb8      	it	lt
   d8464:	426d      	neglt	r5, r5
   d8466:	dd0c      	ble.n	d8482 <__adddf3+0x52>
   d8468:	442c      	add	r4, r5
   d846a:	ea80 0202 	eor.w	r2, r0, r2
   d846e:	ea81 0303 	eor.w	r3, r1, r3
   d8472:	ea82 0000 	eor.w	r0, r2, r0
   d8476:	ea83 0101 	eor.w	r1, r3, r1
   d847a:	ea80 0202 	eor.w	r2, r0, r2
   d847e:	ea81 0303 	eor.w	r3, r1, r3
   d8482:	2d36      	cmp	r5, #54	; 0x36
   d8484:	bf88      	it	hi
   d8486:	bd30      	pophi	{r4, r5, pc}
   d8488:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d848c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8490:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8498:	d002      	beq.n	d84a0 <__adddf3+0x70>
   d849a:	4240      	negs	r0, r0
   d849c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d84a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d84a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d84a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d84ac:	d002      	beq.n	d84b4 <__adddf3+0x84>
   d84ae:	4252      	negs	r2, r2
   d84b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d84b4:	ea94 0f05 	teq	r4, r5
   d84b8:	f000 80a7 	beq.w	d860a <__adddf3+0x1da>
   d84bc:	f1a4 0401 	sub.w	r4, r4, #1
   d84c0:	f1d5 0e20 	rsbs	lr, r5, #32
   d84c4:	db0d      	blt.n	d84e2 <__adddf3+0xb2>
   d84c6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d84ca:	fa22 f205 	lsr.w	r2, r2, r5
   d84ce:	1880      	adds	r0, r0, r2
   d84d0:	f141 0100 	adc.w	r1, r1, #0
   d84d4:	fa03 f20e 	lsl.w	r2, r3, lr
   d84d8:	1880      	adds	r0, r0, r2
   d84da:	fa43 f305 	asr.w	r3, r3, r5
   d84de:	4159      	adcs	r1, r3
   d84e0:	e00e      	b.n	d8500 <__adddf3+0xd0>
   d84e2:	f1a5 0520 	sub.w	r5, r5, #32
   d84e6:	f10e 0e20 	add.w	lr, lr, #32
   d84ea:	2a01      	cmp	r2, #1
   d84ec:	fa03 fc0e 	lsl.w	ip, r3, lr
   d84f0:	bf28      	it	cs
   d84f2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d84f6:	fa43 f305 	asr.w	r3, r3, r5
   d84fa:	18c0      	adds	r0, r0, r3
   d84fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8500:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8504:	d507      	bpl.n	d8516 <__adddf3+0xe6>
   d8506:	f04f 0e00 	mov.w	lr, #0
   d850a:	f1dc 0c00 	rsbs	ip, ip, #0
   d850e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8512:	eb6e 0101 	sbc.w	r1, lr, r1
   d8516:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d851a:	d31b      	bcc.n	d8554 <__adddf3+0x124>
   d851c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8520:	d30c      	bcc.n	d853c <__adddf3+0x10c>
   d8522:	0849      	lsrs	r1, r1, #1
   d8524:	ea5f 0030 	movs.w	r0, r0, rrx
   d8528:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d852c:	f104 0401 	add.w	r4, r4, #1
   d8530:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8534:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8538:	f080 809a 	bcs.w	d8670 <__adddf3+0x240>
   d853c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8540:	bf08      	it	eq
   d8542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8546:	f150 0000 	adcs.w	r0, r0, #0
   d854a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d854e:	ea41 0105 	orr.w	r1, r1, r5
   d8552:	bd30      	pop	{r4, r5, pc}
   d8554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8558:	4140      	adcs	r0, r0
   d855a:	eb41 0101 	adc.w	r1, r1, r1
   d855e:	3c01      	subs	r4, #1
   d8560:	bf28      	it	cs
   d8562:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d8566:	d2e9      	bcs.n	d853c <__adddf3+0x10c>
   d8568:	f091 0f00 	teq	r1, #0
   d856c:	bf04      	itt	eq
   d856e:	4601      	moveq	r1, r0
   d8570:	2000      	moveq	r0, #0
   d8572:	fab1 f381 	clz	r3, r1
   d8576:	bf08      	it	eq
   d8578:	3320      	addeq	r3, #32
   d857a:	f1a3 030b 	sub.w	r3, r3, #11
   d857e:	f1b3 0220 	subs.w	r2, r3, #32
   d8582:	da0c      	bge.n	d859e <__adddf3+0x16e>
   d8584:	320c      	adds	r2, #12
   d8586:	dd08      	ble.n	d859a <__adddf3+0x16a>
   d8588:	f102 0c14 	add.w	ip, r2, #20
   d858c:	f1c2 020c 	rsb	r2, r2, #12
   d8590:	fa01 f00c 	lsl.w	r0, r1, ip
   d8594:	fa21 f102 	lsr.w	r1, r1, r2
   d8598:	e00c      	b.n	d85b4 <__adddf3+0x184>
   d859a:	f102 0214 	add.w	r2, r2, #20
   d859e:	bfd8      	it	le
   d85a0:	f1c2 0c20 	rsble	ip, r2, #32
   d85a4:	fa01 f102 	lsl.w	r1, r1, r2
   d85a8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d85ac:	bfdc      	itt	le
   d85ae:	ea41 010c 	orrle.w	r1, r1, ip
   d85b2:	4090      	lslle	r0, r2
   d85b4:	1ae4      	subs	r4, r4, r3
   d85b6:	bfa2      	ittt	ge
   d85b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d85bc:	4329      	orrge	r1, r5
   d85be:	bd30      	popge	{r4, r5, pc}
   d85c0:	ea6f 0404 	mvn.w	r4, r4
   d85c4:	3c1f      	subs	r4, #31
   d85c6:	da1c      	bge.n	d8602 <__adddf3+0x1d2>
   d85c8:	340c      	adds	r4, #12
   d85ca:	dc0e      	bgt.n	d85ea <__adddf3+0x1ba>
   d85cc:	f104 0414 	add.w	r4, r4, #20
   d85d0:	f1c4 0220 	rsb	r2, r4, #32
   d85d4:	fa20 f004 	lsr.w	r0, r0, r4
   d85d8:	fa01 f302 	lsl.w	r3, r1, r2
   d85dc:	ea40 0003 	orr.w	r0, r0, r3
   d85e0:	fa21 f304 	lsr.w	r3, r1, r4
   d85e4:	ea45 0103 	orr.w	r1, r5, r3
   d85e8:	bd30      	pop	{r4, r5, pc}
   d85ea:	f1c4 040c 	rsb	r4, r4, #12
   d85ee:	f1c4 0220 	rsb	r2, r4, #32
   d85f2:	fa20 f002 	lsr.w	r0, r0, r2
   d85f6:	fa01 f304 	lsl.w	r3, r1, r4
   d85fa:	ea40 0003 	orr.w	r0, r0, r3
   d85fe:	4629      	mov	r1, r5
   d8600:	bd30      	pop	{r4, r5, pc}
   d8602:	fa21 f004 	lsr.w	r0, r1, r4
   d8606:	4629      	mov	r1, r5
   d8608:	bd30      	pop	{r4, r5, pc}
   d860a:	f094 0f00 	teq	r4, #0
   d860e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8612:	bf06      	itte	eq
   d8614:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8618:	3401      	addeq	r4, #1
   d861a:	3d01      	subne	r5, #1
   d861c:	e74e      	b.n	d84bc <__adddf3+0x8c>
   d861e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8622:	bf18      	it	ne
   d8624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8628:	d029      	beq.n	d867e <__adddf3+0x24e>
   d862a:	ea94 0f05 	teq	r4, r5
   d862e:	bf08      	it	eq
   d8630:	ea90 0f02 	teqeq	r0, r2
   d8634:	d005      	beq.n	d8642 <__adddf3+0x212>
   d8636:	ea54 0c00 	orrs.w	ip, r4, r0
   d863a:	bf04      	itt	eq
   d863c:	4619      	moveq	r1, r3
   d863e:	4610      	moveq	r0, r2
   d8640:	bd30      	pop	{r4, r5, pc}
   d8642:	ea91 0f03 	teq	r1, r3
   d8646:	bf1e      	ittt	ne
   d8648:	2100      	movne	r1, #0
   d864a:	2000      	movne	r0, #0
   d864c:	bd30      	popne	{r4, r5, pc}
   d864e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8652:	d105      	bne.n	d8660 <__adddf3+0x230>
   d8654:	0040      	lsls	r0, r0, #1
   d8656:	4149      	adcs	r1, r1
   d8658:	bf28      	it	cs
   d865a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d865e:	bd30      	pop	{r4, r5, pc}
   d8660:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8664:	bf3c      	itt	cc
   d8666:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d866a:	bd30      	popcc	{r4, r5, pc}
   d866c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8670:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8674:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8678:	f04f 0000 	mov.w	r0, #0
   d867c:	bd30      	pop	{r4, r5, pc}
   d867e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8682:	bf1a      	itte	ne
   d8684:	4619      	movne	r1, r3
   d8686:	4610      	movne	r0, r2
   d8688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d868c:	bf1c      	itt	ne
   d868e:	460b      	movne	r3, r1
   d8690:	4602      	movne	r2, r0
   d8692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8696:	bf06      	itte	eq
   d8698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d869c:	ea91 0f03 	teqeq	r1, r3
   d86a0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d86a4:	bd30      	pop	{r4, r5, pc}
   d86a6:	bf00      	nop

000d86a8 <__aeabi_ui2d>:
   d86a8:	f090 0f00 	teq	r0, #0
   d86ac:	bf04      	itt	eq
   d86ae:	2100      	moveq	r1, #0
   d86b0:	4770      	bxeq	lr
   d86b2:	b530      	push	{r4, r5, lr}
   d86b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d86b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d86bc:	f04f 0500 	mov.w	r5, #0
   d86c0:	f04f 0100 	mov.w	r1, #0
   d86c4:	e750      	b.n	d8568 <__adddf3+0x138>
   d86c6:	bf00      	nop

000d86c8 <__aeabi_i2d>:
   d86c8:	f090 0f00 	teq	r0, #0
   d86cc:	bf04      	itt	eq
   d86ce:	2100      	moveq	r1, #0
   d86d0:	4770      	bxeq	lr
   d86d2:	b530      	push	{r4, r5, lr}
   d86d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d86d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d86dc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d86e0:	bf48      	it	mi
   d86e2:	4240      	negmi	r0, r0
   d86e4:	f04f 0100 	mov.w	r1, #0
   d86e8:	e73e      	b.n	d8568 <__adddf3+0x138>
   d86ea:	bf00      	nop

000d86ec <__aeabi_f2d>:
   d86ec:	0042      	lsls	r2, r0, #1
   d86ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d86f2:	ea4f 0131 	mov.w	r1, r1, rrx
   d86f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d86fa:	bf1f      	itttt	ne
   d86fc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8700:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8704:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8708:	4770      	bxne	lr
   d870a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d870e:	bf08      	it	eq
   d8710:	4770      	bxeq	lr
   d8712:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8716:	bf04      	itt	eq
   d8718:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d871c:	4770      	bxeq	lr
   d871e:	b530      	push	{r4, r5, lr}
   d8720:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8724:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8728:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d872c:	e71c      	b.n	d8568 <__adddf3+0x138>
   d872e:	bf00      	nop

000d8730 <__aeabi_ul2d>:
   d8730:	ea50 0201 	orrs.w	r2, r0, r1
   d8734:	bf08      	it	eq
   d8736:	4770      	bxeq	lr
   d8738:	b530      	push	{r4, r5, lr}
   d873a:	f04f 0500 	mov.w	r5, #0
   d873e:	e00a      	b.n	d8756 <__aeabi_l2d+0x16>

000d8740 <__aeabi_l2d>:
   d8740:	ea50 0201 	orrs.w	r2, r0, r1
   d8744:	bf08      	it	eq
   d8746:	4770      	bxeq	lr
   d8748:	b530      	push	{r4, r5, lr}
   d874a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d874e:	d502      	bpl.n	d8756 <__aeabi_l2d+0x16>
   d8750:	4240      	negs	r0, r0
   d8752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8756:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d875a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d875e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8762:	f43f aed8 	beq.w	d8516 <__adddf3+0xe6>
   d8766:	f04f 0203 	mov.w	r2, #3
   d876a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d876e:	bf18      	it	ne
   d8770:	3203      	addne	r2, #3
   d8772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8776:	bf18      	it	ne
   d8778:	3203      	addne	r2, #3
   d877a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d877e:	f1c2 0320 	rsb	r3, r2, #32
   d8782:	fa00 fc03 	lsl.w	ip, r0, r3
   d8786:	fa20 f002 	lsr.w	r0, r0, r2
   d878a:	fa01 fe03 	lsl.w	lr, r1, r3
   d878e:	ea40 000e 	orr.w	r0, r0, lr
   d8792:	fa21 f102 	lsr.w	r1, r1, r2
   d8796:	4414      	add	r4, r2
   d8798:	e6bd      	b.n	d8516 <__adddf3+0xe6>
   d879a:	bf00      	nop

000d879c <__aeabi_dmul>:
   d879c:	b570      	push	{r4, r5, r6, lr}
   d879e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d87a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d87a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d87aa:	bf1d      	ittte	ne
   d87ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d87b0:	ea94 0f0c 	teqne	r4, ip
   d87b4:	ea95 0f0c 	teqne	r5, ip
   d87b8:	f000 f8de 	bleq	d8978 <__aeabi_dmul+0x1dc>
   d87bc:	442c      	add	r4, r5
   d87be:	ea81 0603 	eor.w	r6, r1, r3
   d87c2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d87c6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d87ca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d87ce:	bf18      	it	ne
   d87d0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d87d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d87d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d87dc:	d038      	beq.n	d8850 <__aeabi_dmul+0xb4>
   d87de:	fba0 ce02 	umull	ip, lr, r0, r2
   d87e2:	f04f 0500 	mov.w	r5, #0
   d87e6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d87ea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d87ee:	fbe0 e503 	umlal	lr, r5, r0, r3
   d87f2:	f04f 0600 	mov.w	r6, #0
   d87f6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d87fa:	f09c 0f00 	teq	ip, #0
   d87fe:	bf18      	it	ne
   d8800:	f04e 0e01 	orrne.w	lr, lr, #1
   d8804:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8808:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d880c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8810:	d204      	bcs.n	d881c <__aeabi_dmul+0x80>
   d8812:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8816:	416d      	adcs	r5, r5
   d8818:	eb46 0606 	adc.w	r6, r6, r6
   d881c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8820:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8824:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8828:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d882c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8830:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8834:	bf88      	it	hi
   d8836:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d883a:	d81e      	bhi.n	d887a <__aeabi_dmul+0xde>
   d883c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8840:	bf08      	it	eq
   d8842:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8846:	f150 0000 	adcs.w	r0, r0, #0
   d884a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d884e:	bd70      	pop	{r4, r5, r6, pc}
   d8850:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8854:	ea46 0101 	orr.w	r1, r6, r1
   d8858:	ea40 0002 	orr.w	r0, r0, r2
   d885c:	ea81 0103 	eor.w	r1, r1, r3
   d8860:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8864:	bfc2      	ittt	gt
   d8866:	ebd4 050c 	rsbsgt	r5, r4, ip
   d886a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d886e:	bd70      	popgt	{r4, r5, r6, pc}
   d8870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8874:	f04f 0e00 	mov.w	lr, #0
   d8878:	3c01      	subs	r4, #1
   d887a:	f300 80ab 	bgt.w	d89d4 <__aeabi_dmul+0x238>
   d887e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8882:	bfde      	ittt	le
   d8884:	2000      	movle	r0, #0
   d8886:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d888a:	bd70      	pople	{r4, r5, r6, pc}
   d888c:	f1c4 0400 	rsb	r4, r4, #0
   d8890:	3c20      	subs	r4, #32
   d8892:	da35      	bge.n	d8900 <__aeabi_dmul+0x164>
   d8894:	340c      	adds	r4, #12
   d8896:	dc1b      	bgt.n	d88d0 <__aeabi_dmul+0x134>
   d8898:	f104 0414 	add.w	r4, r4, #20
   d889c:	f1c4 0520 	rsb	r5, r4, #32
   d88a0:	fa00 f305 	lsl.w	r3, r0, r5
   d88a4:	fa20 f004 	lsr.w	r0, r0, r4
   d88a8:	fa01 f205 	lsl.w	r2, r1, r5
   d88ac:	ea40 0002 	orr.w	r0, r0, r2
   d88b0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d88b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d88b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d88bc:	fa21 f604 	lsr.w	r6, r1, r4
   d88c0:	eb42 0106 	adc.w	r1, r2, r6
   d88c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d88c8:	bf08      	it	eq
   d88ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d88ce:	bd70      	pop	{r4, r5, r6, pc}
   d88d0:	f1c4 040c 	rsb	r4, r4, #12
   d88d4:	f1c4 0520 	rsb	r5, r4, #32
   d88d8:	fa00 f304 	lsl.w	r3, r0, r4
   d88dc:	fa20 f005 	lsr.w	r0, r0, r5
   d88e0:	fa01 f204 	lsl.w	r2, r1, r4
   d88e4:	ea40 0002 	orr.w	r0, r0, r2
   d88e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d88ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d88f0:	f141 0100 	adc.w	r1, r1, #0
   d88f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d88f8:	bf08      	it	eq
   d88fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d88fe:	bd70      	pop	{r4, r5, r6, pc}
   d8900:	f1c4 0520 	rsb	r5, r4, #32
   d8904:	fa00 f205 	lsl.w	r2, r0, r5
   d8908:	ea4e 0e02 	orr.w	lr, lr, r2
   d890c:	fa20 f304 	lsr.w	r3, r0, r4
   d8910:	fa01 f205 	lsl.w	r2, r1, r5
   d8914:	ea43 0302 	orr.w	r3, r3, r2
   d8918:	fa21 f004 	lsr.w	r0, r1, r4
   d891c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8920:	fa21 f204 	lsr.w	r2, r1, r4
   d8924:	ea20 0002 	bic.w	r0, r0, r2
   d8928:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d892c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8930:	bf08      	it	eq
   d8932:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8936:	bd70      	pop	{r4, r5, r6, pc}
   d8938:	f094 0f00 	teq	r4, #0
   d893c:	d10f      	bne.n	d895e <__aeabi_dmul+0x1c2>
   d893e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8942:	0040      	lsls	r0, r0, #1
   d8944:	eb41 0101 	adc.w	r1, r1, r1
   d8948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d894c:	bf08      	it	eq
   d894e:	3c01      	subeq	r4, #1
   d8950:	d0f7      	beq.n	d8942 <__aeabi_dmul+0x1a6>
   d8952:	ea41 0106 	orr.w	r1, r1, r6
   d8956:	f095 0f00 	teq	r5, #0
   d895a:	bf18      	it	ne
   d895c:	4770      	bxne	lr
   d895e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8962:	0052      	lsls	r2, r2, #1
   d8964:	eb43 0303 	adc.w	r3, r3, r3
   d8968:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d896c:	bf08      	it	eq
   d896e:	3d01      	subeq	r5, #1
   d8970:	d0f7      	beq.n	d8962 <__aeabi_dmul+0x1c6>
   d8972:	ea43 0306 	orr.w	r3, r3, r6
   d8976:	4770      	bx	lr
   d8978:	ea94 0f0c 	teq	r4, ip
   d897c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8980:	bf18      	it	ne
   d8982:	ea95 0f0c 	teqne	r5, ip
   d8986:	d00c      	beq.n	d89a2 <__aeabi_dmul+0x206>
   d8988:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d898c:	bf18      	it	ne
   d898e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8992:	d1d1      	bne.n	d8938 <__aeabi_dmul+0x19c>
   d8994:	ea81 0103 	eor.w	r1, r1, r3
   d8998:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d899c:	f04f 0000 	mov.w	r0, #0
   d89a0:	bd70      	pop	{r4, r5, r6, pc}
   d89a2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d89a6:	bf06      	itte	eq
   d89a8:	4610      	moveq	r0, r2
   d89aa:	4619      	moveq	r1, r3
   d89ac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d89b0:	d019      	beq.n	d89e6 <__aeabi_dmul+0x24a>
   d89b2:	ea94 0f0c 	teq	r4, ip
   d89b6:	d102      	bne.n	d89be <__aeabi_dmul+0x222>
   d89b8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d89bc:	d113      	bne.n	d89e6 <__aeabi_dmul+0x24a>
   d89be:	ea95 0f0c 	teq	r5, ip
   d89c2:	d105      	bne.n	d89d0 <__aeabi_dmul+0x234>
   d89c4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d89c8:	bf1c      	itt	ne
   d89ca:	4610      	movne	r0, r2
   d89cc:	4619      	movne	r1, r3
   d89ce:	d10a      	bne.n	d89e6 <__aeabi_dmul+0x24a>
   d89d0:	ea81 0103 	eor.w	r1, r1, r3
   d89d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d89d8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d89dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d89e0:	f04f 0000 	mov.w	r0, #0
   d89e4:	bd70      	pop	{r4, r5, r6, pc}
   d89e6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d89ea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d89ee:	bd70      	pop	{r4, r5, r6, pc}

000d89f0 <__aeabi_ddiv>:
   d89f0:	b570      	push	{r4, r5, r6, lr}
   d89f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d89f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d89fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d89fe:	bf1d      	ittte	ne
   d8a00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8a04:	ea94 0f0c 	teqne	r4, ip
   d8a08:	ea95 0f0c 	teqne	r5, ip
   d8a0c:	f000 f8a7 	bleq	d8b5e <__aeabi_ddiv+0x16e>
   d8a10:	eba4 0405 	sub.w	r4, r4, r5
   d8a14:	ea81 0e03 	eor.w	lr, r1, r3
   d8a18:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8a1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8a20:	f000 8088 	beq.w	d8b34 <__aeabi_ddiv+0x144>
   d8a24:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8a28:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8a2c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8a30:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8a34:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8a38:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8a3c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8a40:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8a44:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8a48:	429d      	cmp	r5, r3
   d8a4a:	bf08      	it	eq
   d8a4c:	4296      	cmpeq	r6, r2
   d8a4e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8a52:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8a56:	d202      	bcs.n	d8a5e <__aeabi_ddiv+0x6e>
   d8a58:	085b      	lsrs	r3, r3, #1
   d8a5a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8a5e:	1ab6      	subs	r6, r6, r2
   d8a60:	eb65 0503 	sbc.w	r5, r5, r3
   d8a64:	085b      	lsrs	r3, r3, #1
   d8a66:	ea4f 0232 	mov.w	r2, r2, rrx
   d8a6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8a6e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8a72:	ebb6 0e02 	subs.w	lr, r6, r2
   d8a76:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8a7a:	bf22      	ittt	cs
   d8a7c:	1ab6      	subcs	r6, r6, r2
   d8a7e:	4675      	movcs	r5, lr
   d8a80:	ea40 000c 	orrcs.w	r0, r0, ip
   d8a84:	085b      	lsrs	r3, r3, #1
   d8a86:	ea4f 0232 	mov.w	r2, r2, rrx
   d8a8a:	ebb6 0e02 	subs.w	lr, r6, r2
   d8a8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8a92:	bf22      	ittt	cs
   d8a94:	1ab6      	subcs	r6, r6, r2
   d8a96:	4675      	movcs	r5, lr
   d8a98:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8a9c:	085b      	lsrs	r3, r3, #1
   d8a9e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8aa2:	ebb6 0e02 	subs.w	lr, r6, r2
   d8aa6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8aaa:	bf22      	ittt	cs
   d8aac:	1ab6      	subcs	r6, r6, r2
   d8aae:	4675      	movcs	r5, lr
   d8ab0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8ab4:	085b      	lsrs	r3, r3, #1
   d8ab6:	ea4f 0232 	mov.w	r2, r2, rrx
   d8aba:	ebb6 0e02 	subs.w	lr, r6, r2
   d8abe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8ac2:	bf22      	ittt	cs
   d8ac4:	1ab6      	subcs	r6, r6, r2
   d8ac6:	4675      	movcs	r5, lr
   d8ac8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8acc:	ea55 0e06 	orrs.w	lr, r5, r6
   d8ad0:	d018      	beq.n	d8b04 <__aeabi_ddiv+0x114>
   d8ad2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8ad6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8ada:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8ade:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8ae2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8ae6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8aea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8aee:	d1c0      	bne.n	d8a72 <__aeabi_ddiv+0x82>
   d8af0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8af4:	d10b      	bne.n	d8b0e <__aeabi_ddiv+0x11e>
   d8af6:	ea41 0100 	orr.w	r1, r1, r0
   d8afa:	f04f 0000 	mov.w	r0, #0
   d8afe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8b02:	e7b6      	b.n	d8a72 <__aeabi_ddiv+0x82>
   d8b04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8b08:	bf04      	itt	eq
   d8b0a:	4301      	orreq	r1, r0
   d8b0c:	2000      	moveq	r0, #0
   d8b0e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8b12:	bf88      	it	hi
   d8b14:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8b18:	f63f aeaf 	bhi.w	d887a <__aeabi_dmul+0xde>
   d8b1c:	ebb5 0c03 	subs.w	ip, r5, r3
   d8b20:	bf04      	itt	eq
   d8b22:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8b26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8b2a:	f150 0000 	adcs.w	r0, r0, #0
   d8b2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8b32:	bd70      	pop	{r4, r5, r6, pc}
   d8b34:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8b38:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8b3c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8b40:	bfc2      	ittt	gt
   d8b42:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8b46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8b4a:	bd70      	popgt	{r4, r5, r6, pc}
   d8b4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8b50:	f04f 0e00 	mov.w	lr, #0
   d8b54:	3c01      	subs	r4, #1
   d8b56:	e690      	b.n	d887a <__aeabi_dmul+0xde>
   d8b58:	ea45 0e06 	orr.w	lr, r5, r6
   d8b5c:	e68d      	b.n	d887a <__aeabi_dmul+0xde>
   d8b5e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8b62:	ea94 0f0c 	teq	r4, ip
   d8b66:	bf08      	it	eq
   d8b68:	ea95 0f0c 	teqeq	r5, ip
   d8b6c:	f43f af3b 	beq.w	d89e6 <__aeabi_dmul+0x24a>
   d8b70:	ea94 0f0c 	teq	r4, ip
   d8b74:	d10a      	bne.n	d8b8c <__aeabi_ddiv+0x19c>
   d8b76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8b7a:	f47f af34 	bne.w	d89e6 <__aeabi_dmul+0x24a>
   d8b7e:	ea95 0f0c 	teq	r5, ip
   d8b82:	f47f af25 	bne.w	d89d0 <__aeabi_dmul+0x234>
   d8b86:	4610      	mov	r0, r2
   d8b88:	4619      	mov	r1, r3
   d8b8a:	e72c      	b.n	d89e6 <__aeabi_dmul+0x24a>
   d8b8c:	ea95 0f0c 	teq	r5, ip
   d8b90:	d106      	bne.n	d8ba0 <__aeabi_ddiv+0x1b0>
   d8b92:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8b96:	f43f aefd 	beq.w	d8994 <__aeabi_dmul+0x1f8>
   d8b9a:	4610      	mov	r0, r2
   d8b9c:	4619      	mov	r1, r3
   d8b9e:	e722      	b.n	d89e6 <__aeabi_dmul+0x24a>
   d8ba0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8ba4:	bf18      	it	ne
   d8ba6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8baa:	f47f aec5 	bne.w	d8938 <__aeabi_dmul+0x19c>
   d8bae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8bb2:	f47f af0d 	bne.w	d89d0 <__aeabi_dmul+0x234>
   d8bb6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8bba:	f47f aeeb 	bne.w	d8994 <__aeabi_dmul+0x1f8>
   d8bbe:	e712      	b.n	d89e6 <__aeabi_dmul+0x24a>

000d8bc0 <__gedf2>:
   d8bc0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8bc4:	e006      	b.n	d8bd4 <__cmpdf2+0x4>
   d8bc6:	bf00      	nop

000d8bc8 <__ledf2>:
   d8bc8:	f04f 0c01 	mov.w	ip, #1
   d8bcc:	e002      	b.n	d8bd4 <__cmpdf2+0x4>
   d8bce:	bf00      	nop

000d8bd0 <__cmpdf2>:
   d8bd0:	f04f 0c01 	mov.w	ip, #1
   d8bd4:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8bd8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8bdc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8be0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8be4:	bf18      	it	ne
   d8be6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8bea:	d01b      	beq.n	d8c24 <__cmpdf2+0x54>
   d8bec:	b001      	add	sp, #4
   d8bee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8bf2:	bf0c      	ite	eq
   d8bf4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8bf8:	ea91 0f03 	teqne	r1, r3
   d8bfc:	bf02      	ittt	eq
   d8bfe:	ea90 0f02 	teqeq	r0, r2
   d8c02:	2000      	moveq	r0, #0
   d8c04:	4770      	bxeq	lr
   d8c06:	f110 0f00 	cmn.w	r0, #0
   d8c0a:	ea91 0f03 	teq	r1, r3
   d8c0e:	bf58      	it	pl
   d8c10:	4299      	cmppl	r1, r3
   d8c12:	bf08      	it	eq
   d8c14:	4290      	cmpeq	r0, r2
   d8c16:	bf2c      	ite	cs
   d8c18:	17d8      	asrcs	r0, r3, #31
   d8c1a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8c1e:	f040 0001 	orr.w	r0, r0, #1
   d8c22:	4770      	bx	lr
   d8c24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8c28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8c2c:	d102      	bne.n	d8c34 <__cmpdf2+0x64>
   d8c2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8c32:	d107      	bne.n	d8c44 <__cmpdf2+0x74>
   d8c34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8c38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8c3c:	d1d6      	bne.n	d8bec <__cmpdf2+0x1c>
   d8c3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8c42:	d0d3      	beq.n	d8bec <__cmpdf2+0x1c>
   d8c44:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8c48:	4770      	bx	lr
   d8c4a:	bf00      	nop

000d8c4c <__aeabi_cdrcmple>:
   d8c4c:	4684      	mov	ip, r0
   d8c4e:	4610      	mov	r0, r2
   d8c50:	4662      	mov	r2, ip
   d8c52:	468c      	mov	ip, r1
   d8c54:	4619      	mov	r1, r3
   d8c56:	4663      	mov	r3, ip
   d8c58:	e000      	b.n	d8c5c <__aeabi_cdcmpeq>
   d8c5a:	bf00      	nop

000d8c5c <__aeabi_cdcmpeq>:
   d8c5c:	b501      	push	{r0, lr}
   d8c5e:	f7ff ffb7 	bl	d8bd0 <__cmpdf2>
   d8c62:	2800      	cmp	r0, #0
   d8c64:	bf48      	it	mi
   d8c66:	f110 0f00 	cmnmi.w	r0, #0
   d8c6a:	bd01      	pop	{r0, pc}

000d8c6c <__aeabi_dcmpeq>:
   d8c6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8c70:	f7ff fff4 	bl	d8c5c <__aeabi_cdcmpeq>
   d8c74:	bf0c      	ite	eq
   d8c76:	2001      	moveq	r0, #1
   d8c78:	2000      	movne	r0, #0
   d8c7a:	f85d fb08 	ldr.w	pc, [sp], #8
   d8c7e:	bf00      	nop

000d8c80 <__aeabi_dcmplt>:
   d8c80:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8c84:	f7ff ffea 	bl	d8c5c <__aeabi_cdcmpeq>
   d8c88:	bf34      	ite	cc
   d8c8a:	2001      	movcc	r0, #1
   d8c8c:	2000      	movcs	r0, #0
   d8c8e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8c92:	bf00      	nop

000d8c94 <__aeabi_dcmple>:
   d8c94:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8c98:	f7ff ffe0 	bl	d8c5c <__aeabi_cdcmpeq>
   d8c9c:	bf94      	ite	ls
   d8c9e:	2001      	movls	r0, #1
   d8ca0:	2000      	movhi	r0, #0
   d8ca2:	f85d fb08 	ldr.w	pc, [sp], #8
   d8ca6:	bf00      	nop

000d8ca8 <__aeabi_dcmpge>:
   d8ca8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8cac:	f7ff ffce 	bl	d8c4c <__aeabi_cdrcmple>
   d8cb0:	bf94      	ite	ls
   d8cb2:	2001      	movls	r0, #1
   d8cb4:	2000      	movhi	r0, #0
   d8cb6:	f85d fb08 	ldr.w	pc, [sp], #8
   d8cba:	bf00      	nop

000d8cbc <__aeabi_dcmpgt>:
   d8cbc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8cc0:	f7ff ffc4 	bl	d8c4c <__aeabi_cdrcmple>
   d8cc4:	bf34      	ite	cc
   d8cc6:	2001      	movcc	r0, #1
   d8cc8:	2000      	movcs	r0, #0
   d8cca:	f85d fb08 	ldr.w	pc, [sp], #8
   d8cce:	bf00      	nop

000d8cd0 <__aeabi_dcmpun>:
   d8cd0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8cd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8cd8:	d102      	bne.n	d8ce0 <__aeabi_dcmpun+0x10>
   d8cda:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8cde:	d10a      	bne.n	d8cf6 <__aeabi_dcmpun+0x26>
   d8ce0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8ce4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8ce8:	d102      	bne.n	d8cf0 <__aeabi_dcmpun+0x20>
   d8cea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8cee:	d102      	bne.n	d8cf6 <__aeabi_dcmpun+0x26>
   d8cf0:	f04f 0000 	mov.w	r0, #0
   d8cf4:	4770      	bx	lr
   d8cf6:	f04f 0001 	mov.w	r0, #1
   d8cfa:	4770      	bx	lr

000d8cfc <__aeabi_d2uiz>:
   d8cfc:	004a      	lsls	r2, r1, #1
   d8cfe:	d211      	bcs.n	d8d24 <__aeabi_d2uiz+0x28>
   d8d00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8d04:	d211      	bcs.n	d8d2a <__aeabi_d2uiz+0x2e>
   d8d06:	d50d      	bpl.n	d8d24 <__aeabi_d2uiz+0x28>
   d8d08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8d0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8d10:	d40e      	bmi.n	d8d30 <__aeabi_d2uiz+0x34>
   d8d12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8d16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8d1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8d1e:	fa23 f002 	lsr.w	r0, r3, r2
   d8d22:	4770      	bx	lr
   d8d24:	f04f 0000 	mov.w	r0, #0
   d8d28:	4770      	bx	lr
   d8d2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8d2e:	d102      	bne.n	d8d36 <__aeabi_d2uiz+0x3a>
   d8d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8d34:	4770      	bx	lr
   d8d36:	f04f 0000 	mov.w	r0, #0
   d8d3a:	4770      	bx	lr

000d8d3c <__aeabi_d2f>:
   d8d3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8d40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8d44:	bf24      	itt	cs
   d8d46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8d4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8d4e:	d90d      	bls.n	d8d6c <__aeabi_d2f+0x30>
   d8d50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8d54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8d58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8d5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8d60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8d64:	bf08      	it	eq
   d8d66:	f020 0001 	biceq.w	r0, r0, #1
   d8d6a:	4770      	bx	lr
   d8d6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8d70:	d121      	bne.n	d8db6 <__aeabi_d2f+0x7a>
   d8d72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8d76:	bfbc      	itt	lt
   d8d78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8d7c:	4770      	bxlt	lr
   d8d7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8d82:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8d86:	f1c2 0218 	rsb	r2, r2, #24
   d8d8a:	f1c2 0c20 	rsb	ip, r2, #32
   d8d8e:	fa10 f30c 	lsls.w	r3, r0, ip
   d8d92:	fa20 f002 	lsr.w	r0, r0, r2
   d8d96:	bf18      	it	ne
   d8d98:	f040 0001 	orrne.w	r0, r0, #1
   d8d9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8da0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8da4:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8da8:	ea40 000c 	orr.w	r0, r0, ip
   d8dac:	fa23 f302 	lsr.w	r3, r3, r2
   d8db0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8db4:	e7cc      	b.n	d8d50 <__aeabi_d2f+0x14>
   d8db6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8dba:	d107      	bne.n	d8dcc <__aeabi_d2f+0x90>
   d8dbc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8dc0:	bf1e      	ittt	ne
   d8dc2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8dc6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8dca:	4770      	bxne	lr
   d8dcc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8dd0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8dd4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8dd8:	4770      	bx	lr
   d8dda:	bf00      	nop

000d8ddc <__aeabi_d2ulz>:
   d8ddc:	b5d0      	push	{r4, r6, r7, lr}
   d8dde:	4b0c      	ldr	r3, [pc, #48]	; (d8e10 <__aeabi_d2ulz+0x34>)
   d8de0:	2200      	movs	r2, #0
   d8de2:	4606      	mov	r6, r0
   d8de4:	460f      	mov	r7, r1
   d8de6:	f7ff fcd9 	bl	d879c <__aeabi_dmul>
   d8dea:	f7ff ff87 	bl	d8cfc <__aeabi_d2uiz>
   d8dee:	4604      	mov	r4, r0
   d8df0:	f7ff fc5a 	bl	d86a8 <__aeabi_ui2d>
   d8df4:	4b07      	ldr	r3, [pc, #28]	; (d8e14 <__aeabi_d2ulz+0x38>)
   d8df6:	2200      	movs	r2, #0
   d8df8:	f7ff fcd0 	bl	d879c <__aeabi_dmul>
   d8dfc:	4602      	mov	r2, r0
   d8dfe:	460b      	mov	r3, r1
   d8e00:	4630      	mov	r0, r6
   d8e02:	4639      	mov	r1, r7
   d8e04:	f7ff fb12 	bl	d842c <__aeabi_dsub>
   d8e08:	f7ff ff78 	bl	d8cfc <__aeabi_d2uiz>
   d8e0c:	4621      	mov	r1, r4
   d8e0e:	bdd0      	pop	{r4, r6, r7, pc}
   d8e10:	3df00000 	.word	0x3df00000
   d8e14:	41f00000 	.word	0x41f00000

000d8e18 <asctime_r>:
   d8e18:	b510      	push	{r4, lr}
   d8e1a:	460c      	mov	r4, r1
   d8e1c:	6941      	ldr	r1, [r0, #20]
   d8e1e:	6903      	ldr	r3, [r0, #16]
   d8e20:	6982      	ldr	r2, [r0, #24]
   d8e22:	b086      	sub	sp, #24
   d8e24:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d8e28:	9104      	str	r1, [sp, #16]
   d8e2a:	6801      	ldr	r1, [r0, #0]
   d8e2c:	9103      	str	r1, [sp, #12]
   d8e2e:	6841      	ldr	r1, [r0, #4]
   d8e30:	9102      	str	r1, [sp, #8]
   d8e32:	6881      	ldr	r1, [r0, #8]
   d8e34:	9101      	str	r1, [sp, #4]
   d8e36:	68c1      	ldr	r1, [r0, #12]
   d8e38:	9100      	str	r1, [sp, #0]
   d8e3a:	4907      	ldr	r1, [pc, #28]	; (d8e58 <asctime_r+0x40>)
   d8e3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d8e40:	440b      	add	r3, r1
   d8e42:	4906      	ldr	r1, [pc, #24]	; (d8e5c <asctime_r+0x44>)
   d8e44:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d8e48:	440a      	add	r2, r1
   d8e4a:	4620      	mov	r0, r4
   d8e4c:	4904      	ldr	r1, [pc, #16]	; (d8e60 <asctime_r+0x48>)
   d8e4e:	f7fd fe2d 	bl	d6aac <siprintf>
   d8e52:	4620      	mov	r0, r4
   d8e54:	b006      	add	sp, #24
   d8e56:	bd10      	pop	{r4, pc}
   d8e58:	000db70e 	.word	0x000db70e
   d8e5c:	000db6f9 	.word	0x000db6f9
   d8e60:	000db6d9 	.word	0x000db6d9

000d8e64 <atof>:
   d8e64:	2100      	movs	r1, #0
   d8e66:	f000 befd 	b.w	d9c64 <strtod>

000d8e6a <atoi>:
   d8e6a:	220a      	movs	r2, #10
   d8e6c:	2100      	movs	r1, #0
   d8e6e:	f000 bf7f 	b.w	d9d70 <strtol>
	...

000d8e74 <__cxa_atexit>:
   d8e74:	b510      	push	{r4, lr}
   d8e76:	4c05      	ldr	r4, [pc, #20]	; (d8e8c <__cxa_atexit+0x18>)
   d8e78:	4613      	mov	r3, r2
   d8e7a:	b12c      	cbz	r4, d8e88 <__cxa_atexit+0x14>
   d8e7c:	460a      	mov	r2, r1
   d8e7e:	4601      	mov	r1, r0
   d8e80:	2002      	movs	r0, #2
   d8e82:	f3af 8000 	nop.w
   d8e86:	bd10      	pop	{r4, pc}
   d8e88:	4620      	mov	r0, r4
   d8e8a:	e7fc      	b.n	d8e86 <__cxa_atexit+0x12>
   d8e8c:	00000000 	.word	0x00000000

000d8e90 <gmtime>:
   d8e90:	b538      	push	{r3, r4, r5, lr}
   d8e92:	4b07      	ldr	r3, [pc, #28]	; (d8eb0 <gmtime+0x20>)
   d8e94:	681d      	ldr	r5, [r3, #0]
   d8e96:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   d8e98:	4604      	mov	r4, r0
   d8e9a:	b91b      	cbnz	r3, d8ea4 <gmtime+0x14>
   d8e9c:	2024      	movs	r0, #36	; 0x24
   d8e9e:	f7fd fded 	bl	d6a7c <malloc>
   d8ea2:	63e8      	str	r0, [r5, #60]	; 0x3c
   d8ea4:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   d8ea6:	4620      	mov	r0, r4
   d8ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8eac:	f7fd be3e 	b.w	d6b2c <gmtime_r>
   d8eb0:	2003de60 	.word	0x2003de60

000d8eb4 <memcpy>:
   d8eb4:	440a      	add	r2, r1
   d8eb6:	4291      	cmp	r1, r2
   d8eb8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8ebc:	d100      	bne.n	d8ec0 <memcpy+0xc>
   d8ebe:	4770      	bx	lr
   d8ec0:	b510      	push	{r4, lr}
   d8ec2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8ec6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8eca:	4291      	cmp	r1, r2
   d8ecc:	d1f9      	bne.n	d8ec2 <memcpy+0xe>
   d8ece:	bd10      	pop	{r4, pc}

000d8ed0 <memmove>:
   d8ed0:	4288      	cmp	r0, r1
   d8ed2:	b510      	push	{r4, lr}
   d8ed4:	eb01 0402 	add.w	r4, r1, r2
   d8ed8:	d902      	bls.n	d8ee0 <memmove+0x10>
   d8eda:	4284      	cmp	r4, r0
   d8edc:	4623      	mov	r3, r4
   d8ede:	d807      	bhi.n	d8ef0 <memmove+0x20>
   d8ee0:	1e43      	subs	r3, r0, #1
   d8ee2:	42a1      	cmp	r1, r4
   d8ee4:	d008      	beq.n	d8ef8 <memmove+0x28>
   d8ee6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8eea:	f803 2f01 	strb.w	r2, [r3, #1]!
   d8eee:	e7f8      	b.n	d8ee2 <memmove+0x12>
   d8ef0:	4402      	add	r2, r0
   d8ef2:	4601      	mov	r1, r0
   d8ef4:	428a      	cmp	r2, r1
   d8ef6:	d100      	bne.n	d8efa <memmove+0x2a>
   d8ef8:	bd10      	pop	{r4, pc}
   d8efa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8efe:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d8f02:	e7f7      	b.n	d8ef4 <memmove+0x24>

000d8f04 <memset>:
   d8f04:	4402      	add	r2, r0
   d8f06:	4603      	mov	r3, r0
   d8f08:	4293      	cmp	r3, r2
   d8f0a:	d100      	bne.n	d8f0e <memset+0xa>
   d8f0c:	4770      	bx	lr
   d8f0e:	f803 1b01 	strb.w	r1, [r3], #1
   d8f12:	e7f9      	b.n	d8f08 <memset+0x4>

000d8f14 <srand>:
   d8f14:	b538      	push	{r3, r4, r5, lr}
   d8f16:	4b0d      	ldr	r3, [pc, #52]	; (d8f4c <srand+0x38>)
   d8f18:	681d      	ldr	r5, [r3, #0]
   d8f1a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8f1c:	4604      	mov	r4, r0
   d8f1e:	b97b      	cbnz	r3, d8f40 <srand+0x2c>
   d8f20:	2018      	movs	r0, #24
   d8f22:	f7fd fdab 	bl	d6a7c <malloc>
   d8f26:	4a0a      	ldr	r2, [pc, #40]	; (d8f50 <srand+0x3c>)
   d8f28:	4b0a      	ldr	r3, [pc, #40]	; (d8f54 <srand+0x40>)
   d8f2a:	63a8      	str	r0, [r5, #56]	; 0x38
   d8f2c:	e9c0 2300 	strd	r2, r3, [r0]
   d8f30:	4b09      	ldr	r3, [pc, #36]	; (d8f58 <srand+0x44>)
   d8f32:	6083      	str	r3, [r0, #8]
   d8f34:	230b      	movs	r3, #11
   d8f36:	8183      	strh	r3, [r0, #12]
   d8f38:	2201      	movs	r2, #1
   d8f3a:	2300      	movs	r3, #0
   d8f3c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8f40:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8f42:	2200      	movs	r2, #0
   d8f44:	611c      	str	r4, [r3, #16]
   d8f46:	615a      	str	r2, [r3, #20]
   d8f48:	bd38      	pop	{r3, r4, r5, pc}
   d8f4a:	bf00      	nop
   d8f4c:	2003de60 	.word	0x2003de60
   d8f50:	abcd330e 	.word	0xabcd330e
   d8f54:	e66d1234 	.word	0xe66d1234
   d8f58:	0005deec 	.word	0x0005deec

000d8f5c <strcmp>:
   d8f5c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8f60:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8f64:	2a01      	cmp	r2, #1
   d8f66:	bf28      	it	cs
   d8f68:	429a      	cmpcs	r2, r3
   d8f6a:	d0f7      	beq.n	d8f5c <strcmp>
   d8f6c:	1ad0      	subs	r0, r2, r3
   d8f6e:	4770      	bx	lr

000d8f70 <strcpy>:
   d8f70:	4603      	mov	r3, r0
   d8f72:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8f76:	f803 2b01 	strb.w	r2, [r3], #1
   d8f7a:	2a00      	cmp	r2, #0
   d8f7c:	d1f9      	bne.n	d8f72 <strcpy+0x2>
   d8f7e:	4770      	bx	lr

000d8f80 <strdup>:
   d8f80:	4b02      	ldr	r3, [pc, #8]	; (d8f8c <strdup+0xc>)
   d8f82:	4601      	mov	r1, r0
   d8f84:	6818      	ldr	r0, [r3, #0]
   d8f86:	f000 b803 	b.w	d8f90 <_strdup_r>
   d8f8a:	bf00      	nop
   d8f8c:	2003de60 	.word	0x2003de60

000d8f90 <_strdup_r>:
   d8f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8f92:	4604      	mov	r4, r0
   d8f94:	4608      	mov	r0, r1
   d8f96:	460d      	mov	r5, r1
   d8f98:	f000 f80f 	bl	d8fba <strlen>
   d8f9c:	1c42      	adds	r2, r0, #1
   d8f9e:	4611      	mov	r1, r2
   d8fa0:	4620      	mov	r0, r4
   d8fa2:	9201      	str	r2, [sp, #4]
   d8fa4:	f7fd fd9a 	bl	d6adc <_malloc_r>
   d8fa8:	4604      	mov	r4, r0
   d8faa:	b118      	cbz	r0, d8fb4 <_strdup_r+0x24>
   d8fac:	9a01      	ldr	r2, [sp, #4]
   d8fae:	4629      	mov	r1, r5
   d8fb0:	f7ff ff80 	bl	d8eb4 <memcpy>
   d8fb4:	4620      	mov	r0, r4
   d8fb6:	b003      	add	sp, #12
   d8fb8:	bd30      	pop	{r4, r5, pc}

000d8fba <strlen>:
   d8fba:	4603      	mov	r3, r0
   d8fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8fc0:	2a00      	cmp	r2, #0
   d8fc2:	d1fb      	bne.n	d8fbc <strlen+0x2>
   d8fc4:	1a18      	subs	r0, r3, r0
   d8fc6:	3801      	subs	r0, #1
   d8fc8:	4770      	bx	lr

000d8fca <strncmp>:
   d8fca:	b510      	push	{r4, lr}
   d8fcc:	b16a      	cbz	r2, d8fea <strncmp+0x20>
   d8fce:	3901      	subs	r1, #1
   d8fd0:	1884      	adds	r4, r0, r2
   d8fd2:	f810 3b01 	ldrb.w	r3, [r0], #1
   d8fd6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d8fda:	4293      	cmp	r3, r2
   d8fdc:	d103      	bne.n	d8fe6 <strncmp+0x1c>
   d8fde:	42a0      	cmp	r0, r4
   d8fe0:	d001      	beq.n	d8fe6 <strncmp+0x1c>
   d8fe2:	2b00      	cmp	r3, #0
   d8fe4:	d1f5      	bne.n	d8fd2 <strncmp+0x8>
   d8fe6:	1a98      	subs	r0, r3, r2
   d8fe8:	bd10      	pop	{r4, pc}
   d8fea:	4610      	mov	r0, r2
   d8fec:	e7fc      	b.n	d8fe8 <strncmp+0x1e>

000d8fee <strncpy>:
   d8fee:	b510      	push	{r4, lr}
   d8ff0:	3901      	subs	r1, #1
   d8ff2:	4603      	mov	r3, r0
   d8ff4:	b132      	cbz	r2, d9004 <strncpy+0x16>
   d8ff6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8ffa:	f803 4b01 	strb.w	r4, [r3], #1
   d8ffe:	3a01      	subs	r2, #1
   d9000:	2c00      	cmp	r4, #0
   d9002:	d1f7      	bne.n	d8ff4 <strncpy+0x6>
   d9004:	441a      	add	r2, r3
   d9006:	2100      	movs	r1, #0
   d9008:	4293      	cmp	r3, r2
   d900a:	d100      	bne.n	d900e <strncpy+0x20>
   d900c:	bd10      	pop	{r4, pc}
   d900e:	f803 1b01 	strb.w	r1, [r3], #1
   d9012:	e7f9      	b.n	d9008 <strncpy+0x1a>

000d9014 <sulp>:
   d9014:	b570      	push	{r4, r5, r6, lr}
   d9016:	4604      	mov	r4, r0
   d9018:	460d      	mov	r5, r1
   d901a:	ec45 4b10 	vmov	d0, r4, r5
   d901e:	4616      	mov	r6, r2
   d9020:	f001 fd1c 	bl	daa5c <__ulp>
   d9024:	ec51 0b10 	vmov	r0, r1, d0
   d9028:	b17e      	cbz	r6, d904a <sulp+0x36>
   d902a:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d902e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9032:	2b00      	cmp	r3, #0
   d9034:	dd09      	ble.n	d904a <sulp+0x36>
   d9036:	051b      	lsls	r3, r3, #20
   d9038:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d903c:	2400      	movs	r4, #0
   d903e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d9042:	4622      	mov	r2, r4
   d9044:	462b      	mov	r3, r5
   d9046:	f7ff fba9 	bl	d879c <__aeabi_dmul>
   d904a:	bd70      	pop	{r4, r5, r6, pc}
   d904c:	0000      	movs	r0, r0
	...

000d9050 <_strtod_l>:
   d9050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9054:	b0a3      	sub	sp, #140	; 0x8c
   d9056:	461f      	mov	r7, r3
   d9058:	2300      	movs	r3, #0
   d905a:	931e      	str	r3, [sp, #120]	; 0x78
   d905c:	4ba4      	ldr	r3, [pc, #656]	; (d92f0 <_strtod_l+0x2a0>)
   d905e:	9219      	str	r2, [sp, #100]	; 0x64
   d9060:	681b      	ldr	r3, [r3, #0]
   d9062:	9307      	str	r3, [sp, #28]
   d9064:	4604      	mov	r4, r0
   d9066:	4618      	mov	r0, r3
   d9068:	4688      	mov	r8, r1
   d906a:	f7ff ffa6 	bl	d8fba <strlen>
   d906e:	f04f 0a00 	mov.w	sl, #0
   d9072:	4605      	mov	r5, r0
   d9074:	f04f 0b00 	mov.w	fp, #0
   d9078:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d907c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d907e:	781a      	ldrb	r2, [r3, #0]
   d9080:	2a2b      	cmp	r2, #43	; 0x2b
   d9082:	d04c      	beq.n	d911e <_strtod_l+0xce>
   d9084:	d839      	bhi.n	d90fa <_strtod_l+0xaa>
   d9086:	2a0d      	cmp	r2, #13
   d9088:	d832      	bhi.n	d90f0 <_strtod_l+0xa0>
   d908a:	2a08      	cmp	r2, #8
   d908c:	d832      	bhi.n	d90f4 <_strtod_l+0xa4>
   d908e:	2a00      	cmp	r2, #0
   d9090:	d03c      	beq.n	d910c <_strtod_l+0xbc>
   d9092:	2300      	movs	r3, #0
   d9094:	930e      	str	r3, [sp, #56]	; 0x38
   d9096:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d9098:	7833      	ldrb	r3, [r6, #0]
   d909a:	2b30      	cmp	r3, #48	; 0x30
   d909c:	f040 80b4 	bne.w	d9208 <_strtod_l+0x1b8>
   d90a0:	7873      	ldrb	r3, [r6, #1]
   d90a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d90a6:	2b58      	cmp	r3, #88	; 0x58
   d90a8:	d16c      	bne.n	d9184 <_strtod_l+0x134>
   d90aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d90ac:	9301      	str	r3, [sp, #4]
   d90ae:	ab1e      	add	r3, sp, #120	; 0x78
   d90b0:	9702      	str	r7, [sp, #8]
   d90b2:	9300      	str	r3, [sp, #0]
   d90b4:	4a8f      	ldr	r2, [pc, #572]	; (d92f4 <_strtod_l+0x2a4>)
   d90b6:	ab1f      	add	r3, sp, #124	; 0x7c
   d90b8:	a91d      	add	r1, sp, #116	; 0x74
   d90ba:	4620      	mov	r0, r4
   d90bc:	f000 feca 	bl	d9e54 <__gethex>
   d90c0:	f010 0707 	ands.w	r7, r0, #7
   d90c4:	4605      	mov	r5, r0
   d90c6:	d005      	beq.n	d90d4 <_strtod_l+0x84>
   d90c8:	2f06      	cmp	r7, #6
   d90ca:	d12a      	bne.n	d9122 <_strtod_l+0xd2>
   d90cc:	3601      	adds	r6, #1
   d90ce:	2300      	movs	r3, #0
   d90d0:	961d      	str	r6, [sp, #116]	; 0x74
   d90d2:	930e      	str	r3, [sp, #56]	; 0x38
   d90d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d90d6:	2b00      	cmp	r3, #0
   d90d8:	f040 8596 	bne.w	d9c08 <_strtod_l+0xbb8>
   d90dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d90de:	b1db      	cbz	r3, d9118 <_strtod_l+0xc8>
   d90e0:	4652      	mov	r2, sl
   d90e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d90e6:	ec43 2b10 	vmov	d0, r2, r3
   d90ea:	b023      	add	sp, #140	; 0x8c
   d90ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d90f0:	2a20      	cmp	r2, #32
   d90f2:	d1ce      	bne.n	d9092 <_strtod_l+0x42>
   d90f4:	3301      	adds	r3, #1
   d90f6:	931d      	str	r3, [sp, #116]	; 0x74
   d90f8:	e7c0      	b.n	d907c <_strtod_l+0x2c>
   d90fa:	2a2d      	cmp	r2, #45	; 0x2d
   d90fc:	d1c9      	bne.n	d9092 <_strtod_l+0x42>
   d90fe:	2201      	movs	r2, #1
   d9100:	920e      	str	r2, [sp, #56]	; 0x38
   d9102:	1c5a      	adds	r2, r3, #1
   d9104:	921d      	str	r2, [sp, #116]	; 0x74
   d9106:	785b      	ldrb	r3, [r3, #1]
   d9108:	2b00      	cmp	r3, #0
   d910a:	d1c4      	bne.n	d9096 <_strtod_l+0x46>
   d910c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d910e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d9112:	2b00      	cmp	r3, #0
   d9114:	f040 8576 	bne.w	d9c04 <_strtod_l+0xbb4>
   d9118:	4652      	mov	r2, sl
   d911a:	465b      	mov	r3, fp
   d911c:	e7e3      	b.n	d90e6 <_strtod_l+0x96>
   d911e:	2200      	movs	r2, #0
   d9120:	e7ee      	b.n	d9100 <_strtod_l+0xb0>
   d9122:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d9124:	b13a      	cbz	r2, d9136 <_strtod_l+0xe6>
   d9126:	2135      	movs	r1, #53	; 0x35
   d9128:	a820      	add	r0, sp, #128	; 0x80
   d912a:	f001 fd96 	bl	dac5a <__copybits>
   d912e:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9130:	4620      	mov	r0, r4
   d9132:	f001 f9cb 	bl	da4cc <_Bfree>
   d9136:	3f01      	subs	r7, #1
   d9138:	2f05      	cmp	r7, #5
   d913a:	d807      	bhi.n	d914c <_strtod_l+0xfc>
   d913c:	e8df f007 	tbb	[pc, r7]
   d9140:	1d180b0e 	.word	0x1d180b0e
   d9144:	030e      	.short	0x030e
   d9146:	f04f 0b00 	mov.w	fp, #0
   d914a:	46da      	mov	sl, fp
   d914c:	0728      	lsls	r0, r5, #28
   d914e:	d5c1      	bpl.n	d90d4 <_strtod_l+0x84>
   d9150:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d9154:	e7be      	b.n	d90d4 <_strtod_l+0x84>
   d9156:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d915a:	e7f7      	b.n	d914c <_strtod_l+0xfc>
   d915c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d9160:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d9162:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d9166:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d916a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d916e:	e7ed      	b.n	d914c <_strtod_l+0xfc>
   d9170:	f8df b184 	ldr.w	fp, [pc, #388]	; d92f8 <_strtod_l+0x2a8>
   d9174:	f04f 0a00 	mov.w	sl, #0
   d9178:	e7e8      	b.n	d914c <_strtod_l+0xfc>
   d917a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d917e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9182:	e7e3      	b.n	d914c <_strtod_l+0xfc>
   d9184:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9186:	1c5a      	adds	r2, r3, #1
   d9188:	921d      	str	r2, [sp, #116]	; 0x74
   d918a:	785b      	ldrb	r3, [r3, #1]
   d918c:	2b30      	cmp	r3, #48	; 0x30
   d918e:	d0f9      	beq.n	d9184 <_strtod_l+0x134>
   d9190:	2b00      	cmp	r3, #0
   d9192:	d09f      	beq.n	d90d4 <_strtod_l+0x84>
   d9194:	2301      	movs	r3, #1
   d9196:	f04f 0900 	mov.w	r9, #0
   d919a:	9304      	str	r3, [sp, #16]
   d919c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d919e:	930a      	str	r3, [sp, #40]	; 0x28
   d91a0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d91a4:	464f      	mov	r7, r9
   d91a6:	220a      	movs	r2, #10
   d91a8:	981d      	ldr	r0, [sp, #116]	; 0x74
   d91aa:	7806      	ldrb	r6, [r0, #0]
   d91ac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d91b0:	b2d9      	uxtb	r1, r3
   d91b2:	2909      	cmp	r1, #9
   d91b4:	d92a      	bls.n	d920c <_strtod_l+0x1bc>
   d91b6:	9907      	ldr	r1, [sp, #28]
   d91b8:	462a      	mov	r2, r5
   d91ba:	f7ff ff06 	bl	d8fca <strncmp>
   d91be:	b398      	cbz	r0, d9228 <_strtod_l+0x1d8>
   d91c0:	2000      	movs	r0, #0
   d91c2:	4633      	mov	r3, r6
   d91c4:	463d      	mov	r5, r7
   d91c6:	9007      	str	r0, [sp, #28]
   d91c8:	4602      	mov	r2, r0
   d91ca:	2b65      	cmp	r3, #101	; 0x65
   d91cc:	d001      	beq.n	d91d2 <_strtod_l+0x182>
   d91ce:	2b45      	cmp	r3, #69	; 0x45
   d91d0:	d118      	bne.n	d9204 <_strtod_l+0x1b4>
   d91d2:	b91d      	cbnz	r5, d91dc <_strtod_l+0x18c>
   d91d4:	9b04      	ldr	r3, [sp, #16]
   d91d6:	4303      	orrs	r3, r0
   d91d8:	d098      	beq.n	d910c <_strtod_l+0xbc>
   d91da:	2500      	movs	r5, #0
   d91dc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d91e0:	f108 0301 	add.w	r3, r8, #1
   d91e4:	931d      	str	r3, [sp, #116]	; 0x74
   d91e6:	f898 3001 	ldrb.w	r3, [r8, #1]
   d91ea:	2b2b      	cmp	r3, #43	; 0x2b
   d91ec:	d075      	beq.n	d92da <_strtod_l+0x28a>
   d91ee:	2b2d      	cmp	r3, #45	; 0x2d
   d91f0:	d07b      	beq.n	d92ea <_strtod_l+0x29a>
   d91f2:	f04f 0c00 	mov.w	ip, #0
   d91f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d91fa:	2909      	cmp	r1, #9
   d91fc:	f240 8082 	bls.w	d9304 <_strtod_l+0x2b4>
   d9200:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d9204:	2600      	movs	r6, #0
   d9206:	e09d      	b.n	d9344 <_strtod_l+0x2f4>
   d9208:	2300      	movs	r3, #0
   d920a:	e7c4      	b.n	d9196 <_strtod_l+0x146>
   d920c:	2f08      	cmp	r7, #8
   d920e:	bfd8      	it	le
   d9210:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d9212:	f100 0001 	add.w	r0, r0, #1
   d9216:	bfda      	itte	le
   d9218:	fb02 3301 	mlale	r3, r2, r1, r3
   d921c:	9309      	strle	r3, [sp, #36]	; 0x24
   d921e:	fb02 3909 	mlagt	r9, r2, r9, r3
   d9222:	3701      	adds	r7, #1
   d9224:	901d      	str	r0, [sp, #116]	; 0x74
   d9226:	e7bf      	b.n	d91a8 <_strtod_l+0x158>
   d9228:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d922a:	195a      	adds	r2, r3, r5
   d922c:	921d      	str	r2, [sp, #116]	; 0x74
   d922e:	5d5b      	ldrb	r3, [r3, r5]
   d9230:	2f00      	cmp	r7, #0
   d9232:	d037      	beq.n	d92a4 <_strtod_l+0x254>
   d9234:	9007      	str	r0, [sp, #28]
   d9236:	463d      	mov	r5, r7
   d9238:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d923c:	2a09      	cmp	r2, #9
   d923e:	d912      	bls.n	d9266 <_strtod_l+0x216>
   d9240:	2201      	movs	r2, #1
   d9242:	e7c2      	b.n	d91ca <_strtod_l+0x17a>
   d9244:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9246:	1c5a      	adds	r2, r3, #1
   d9248:	921d      	str	r2, [sp, #116]	; 0x74
   d924a:	785b      	ldrb	r3, [r3, #1]
   d924c:	3001      	adds	r0, #1
   d924e:	2b30      	cmp	r3, #48	; 0x30
   d9250:	d0f8      	beq.n	d9244 <_strtod_l+0x1f4>
   d9252:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d9256:	2a08      	cmp	r2, #8
   d9258:	f200 84db 	bhi.w	d9c12 <_strtod_l+0xbc2>
   d925c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d925e:	9007      	str	r0, [sp, #28]
   d9260:	2000      	movs	r0, #0
   d9262:	920a      	str	r2, [sp, #40]	; 0x28
   d9264:	4605      	mov	r5, r0
   d9266:	3b30      	subs	r3, #48	; 0x30
   d9268:	f100 0201 	add.w	r2, r0, #1
   d926c:	d014      	beq.n	d9298 <_strtod_l+0x248>
   d926e:	9907      	ldr	r1, [sp, #28]
   d9270:	4411      	add	r1, r2
   d9272:	9107      	str	r1, [sp, #28]
   d9274:	462a      	mov	r2, r5
   d9276:	eb00 0e05 	add.w	lr, r0, r5
   d927a:	210a      	movs	r1, #10
   d927c:	4572      	cmp	r2, lr
   d927e:	d113      	bne.n	d92a8 <_strtod_l+0x258>
   d9280:	182a      	adds	r2, r5, r0
   d9282:	2a08      	cmp	r2, #8
   d9284:	f105 0501 	add.w	r5, r5, #1
   d9288:	4405      	add	r5, r0
   d928a:	dc1c      	bgt.n	d92c6 <_strtod_l+0x276>
   d928c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d928e:	220a      	movs	r2, #10
   d9290:	fb02 3301 	mla	r3, r2, r1, r3
   d9294:	9309      	str	r3, [sp, #36]	; 0x24
   d9296:	2200      	movs	r2, #0
   d9298:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d929a:	1c59      	adds	r1, r3, #1
   d929c:	911d      	str	r1, [sp, #116]	; 0x74
   d929e:	785b      	ldrb	r3, [r3, #1]
   d92a0:	4610      	mov	r0, r2
   d92a2:	e7c9      	b.n	d9238 <_strtod_l+0x1e8>
   d92a4:	4638      	mov	r0, r7
   d92a6:	e7d2      	b.n	d924e <_strtod_l+0x1fe>
   d92a8:	2a08      	cmp	r2, #8
   d92aa:	dc04      	bgt.n	d92b6 <_strtod_l+0x266>
   d92ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d92ae:	434e      	muls	r6, r1
   d92b0:	9609      	str	r6, [sp, #36]	; 0x24
   d92b2:	3201      	adds	r2, #1
   d92b4:	e7e2      	b.n	d927c <_strtod_l+0x22c>
   d92b6:	f102 0c01 	add.w	ip, r2, #1
   d92ba:	f1bc 0f10 	cmp.w	ip, #16
   d92be:	bfd8      	it	le
   d92c0:	fb01 f909 	mulle.w	r9, r1, r9
   d92c4:	e7f5      	b.n	d92b2 <_strtod_l+0x262>
   d92c6:	2d10      	cmp	r5, #16
   d92c8:	bfdc      	itt	le
   d92ca:	220a      	movle	r2, #10
   d92cc:	fb02 3909 	mlale	r9, r2, r9, r3
   d92d0:	e7e1      	b.n	d9296 <_strtod_l+0x246>
   d92d2:	2300      	movs	r3, #0
   d92d4:	9307      	str	r3, [sp, #28]
   d92d6:	2201      	movs	r2, #1
   d92d8:	e77c      	b.n	d91d4 <_strtod_l+0x184>
   d92da:	f04f 0c00 	mov.w	ip, #0
   d92de:	f108 0302 	add.w	r3, r8, #2
   d92e2:	931d      	str	r3, [sp, #116]	; 0x74
   d92e4:	f898 3002 	ldrb.w	r3, [r8, #2]
   d92e8:	e785      	b.n	d91f6 <_strtod_l+0x1a6>
   d92ea:	f04f 0c01 	mov.w	ip, #1
   d92ee:	e7f6      	b.n	d92de <_strtod_l+0x28e>
   d92f0:	000db894 	.word	0x000db894
   d92f4:	000db740 	.word	0x000db740
   d92f8:	7ff00000 	.word	0x7ff00000
   d92fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d92fe:	1c59      	adds	r1, r3, #1
   d9300:	911d      	str	r1, [sp, #116]	; 0x74
   d9302:	785b      	ldrb	r3, [r3, #1]
   d9304:	2b30      	cmp	r3, #48	; 0x30
   d9306:	d0f9      	beq.n	d92fc <_strtod_l+0x2ac>
   d9308:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d930c:	2908      	cmp	r1, #8
   d930e:	f63f af79 	bhi.w	d9204 <_strtod_l+0x1b4>
   d9312:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d9316:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9318:	9308      	str	r3, [sp, #32]
   d931a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d931c:	1c59      	adds	r1, r3, #1
   d931e:	911d      	str	r1, [sp, #116]	; 0x74
   d9320:	785b      	ldrb	r3, [r3, #1]
   d9322:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d9326:	2e09      	cmp	r6, #9
   d9328:	d937      	bls.n	d939a <_strtod_l+0x34a>
   d932a:	9e08      	ldr	r6, [sp, #32]
   d932c:	1b89      	subs	r1, r1, r6
   d932e:	2908      	cmp	r1, #8
   d9330:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d9334:	dc02      	bgt.n	d933c <_strtod_l+0x2ec>
   d9336:	4576      	cmp	r6, lr
   d9338:	bfa8      	it	ge
   d933a:	4676      	movge	r6, lr
   d933c:	f1bc 0f00 	cmp.w	ip, #0
   d9340:	d000      	beq.n	d9344 <_strtod_l+0x2f4>
   d9342:	4276      	negs	r6, r6
   d9344:	2d00      	cmp	r5, #0
   d9346:	d14f      	bne.n	d93e8 <_strtod_l+0x398>
   d9348:	9904      	ldr	r1, [sp, #16]
   d934a:	4301      	orrs	r1, r0
   d934c:	f47f aec2 	bne.w	d90d4 <_strtod_l+0x84>
   d9350:	2a00      	cmp	r2, #0
   d9352:	f47f aedb 	bne.w	d910c <_strtod_l+0xbc>
   d9356:	2b69      	cmp	r3, #105	; 0x69
   d9358:	d027      	beq.n	d93aa <_strtod_l+0x35a>
   d935a:	dc24      	bgt.n	d93a6 <_strtod_l+0x356>
   d935c:	2b49      	cmp	r3, #73	; 0x49
   d935e:	d024      	beq.n	d93aa <_strtod_l+0x35a>
   d9360:	2b4e      	cmp	r3, #78	; 0x4e
   d9362:	f47f aed3 	bne.w	d910c <_strtod_l+0xbc>
   d9366:	499e      	ldr	r1, [pc, #632]	; (d95e0 <_strtod_l+0x590>)
   d9368:	a81d      	add	r0, sp, #116	; 0x74
   d936a:	f000 ffb9 	bl	da2e0 <__match>
   d936e:	2800      	cmp	r0, #0
   d9370:	f43f aecc 	beq.w	d910c <_strtod_l+0xbc>
   d9374:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9376:	781b      	ldrb	r3, [r3, #0]
   d9378:	2b28      	cmp	r3, #40	; 0x28
   d937a:	d12d      	bne.n	d93d8 <_strtod_l+0x388>
   d937c:	4999      	ldr	r1, [pc, #612]	; (d95e4 <_strtod_l+0x594>)
   d937e:	aa20      	add	r2, sp, #128	; 0x80
   d9380:	a81d      	add	r0, sp, #116	; 0x74
   d9382:	f000 ffc1 	bl	da308 <__hexnan>
   d9386:	2805      	cmp	r0, #5
   d9388:	d126      	bne.n	d93d8 <_strtod_l+0x388>
   d938a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d938c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d9390:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d9394:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d9398:	e69c      	b.n	d90d4 <_strtod_l+0x84>
   d939a:	210a      	movs	r1, #10
   d939c:	fb01 3e0e 	mla	lr, r1, lr, r3
   d93a0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d93a4:	e7b9      	b.n	d931a <_strtod_l+0x2ca>
   d93a6:	2b6e      	cmp	r3, #110	; 0x6e
   d93a8:	e7db      	b.n	d9362 <_strtod_l+0x312>
   d93aa:	498f      	ldr	r1, [pc, #572]	; (d95e8 <_strtod_l+0x598>)
   d93ac:	a81d      	add	r0, sp, #116	; 0x74
   d93ae:	f000 ff97 	bl	da2e0 <__match>
   d93b2:	2800      	cmp	r0, #0
   d93b4:	f43f aeaa 	beq.w	d910c <_strtod_l+0xbc>
   d93b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d93ba:	498c      	ldr	r1, [pc, #560]	; (d95ec <_strtod_l+0x59c>)
   d93bc:	3b01      	subs	r3, #1
   d93be:	a81d      	add	r0, sp, #116	; 0x74
   d93c0:	931d      	str	r3, [sp, #116]	; 0x74
   d93c2:	f000 ff8d 	bl	da2e0 <__match>
   d93c6:	b910      	cbnz	r0, d93ce <_strtod_l+0x37e>
   d93c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d93ca:	3301      	adds	r3, #1
   d93cc:	931d      	str	r3, [sp, #116]	; 0x74
   d93ce:	f8df b22c 	ldr.w	fp, [pc, #556]	; d95fc <_strtod_l+0x5ac>
   d93d2:	f04f 0a00 	mov.w	sl, #0
   d93d6:	e67d      	b.n	d90d4 <_strtod_l+0x84>
   d93d8:	4885      	ldr	r0, [pc, #532]	; (d95f0 <_strtod_l+0x5a0>)
   d93da:	f001 fc91 	bl	dad00 <nan>
   d93de:	ed8d 0b04 	vstr	d0, [sp, #16]
   d93e2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d93e6:	e675      	b.n	d90d4 <_strtod_l+0x84>
   d93e8:	9b07      	ldr	r3, [sp, #28]
   d93ea:	9809      	ldr	r0, [sp, #36]	; 0x24
   d93ec:	1af3      	subs	r3, r6, r3
   d93ee:	2f00      	cmp	r7, #0
   d93f0:	bf08      	it	eq
   d93f2:	462f      	moveq	r7, r5
   d93f4:	2d10      	cmp	r5, #16
   d93f6:	9308      	str	r3, [sp, #32]
   d93f8:	46a8      	mov	r8, r5
   d93fa:	bfa8      	it	ge
   d93fc:	f04f 0810 	movge.w	r8, #16
   d9400:	f7ff f952 	bl	d86a8 <__aeabi_ui2d>
   d9404:	2d09      	cmp	r5, #9
   d9406:	4682      	mov	sl, r0
   d9408:	468b      	mov	fp, r1
   d940a:	dd13      	ble.n	d9434 <_strtod_l+0x3e4>
   d940c:	4b79      	ldr	r3, [pc, #484]	; (d95f4 <_strtod_l+0x5a4>)
   d940e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d9412:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d9416:	f7ff f9c1 	bl	d879c <__aeabi_dmul>
   d941a:	4682      	mov	sl, r0
   d941c:	4648      	mov	r0, r9
   d941e:	468b      	mov	fp, r1
   d9420:	f7ff f942 	bl	d86a8 <__aeabi_ui2d>
   d9424:	4602      	mov	r2, r0
   d9426:	460b      	mov	r3, r1
   d9428:	4650      	mov	r0, sl
   d942a:	4659      	mov	r1, fp
   d942c:	f7ff f800 	bl	d8430 <__adddf3>
   d9430:	4682      	mov	sl, r0
   d9432:	468b      	mov	fp, r1
   d9434:	2d0f      	cmp	r5, #15
   d9436:	dc38      	bgt.n	d94aa <_strtod_l+0x45a>
   d9438:	9b08      	ldr	r3, [sp, #32]
   d943a:	2b00      	cmp	r3, #0
   d943c:	f43f ae4a 	beq.w	d90d4 <_strtod_l+0x84>
   d9440:	dd24      	ble.n	d948c <_strtod_l+0x43c>
   d9442:	2b16      	cmp	r3, #22
   d9444:	dc0b      	bgt.n	d945e <_strtod_l+0x40e>
   d9446:	4d6b      	ldr	r5, [pc, #428]	; (d95f4 <_strtod_l+0x5a4>)
   d9448:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d944c:	e9d5 0100 	ldrd	r0, r1, [r5]
   d9450:	4652      	mov	r2, sl
   d9452:	465b      	mov	r3, fp
   d9454:	f7ff f9a2 	bl	d879c <__aeabi_dmul>
   d9458:	4682      	mov	sl, r0
   d945a:	468b      	mov	fp, r1
   d945c:	e63a      	b.n	d90d4 <_strtod_l+0x84>
   d945e:	9a08      	ldr	r2, [sp, #32]
   d9460:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d9464:	4293      	cmp	r3, r2
   d9466:	db20      	blt.n	d94aa <_strtod_l+0x45a>
   d9468:	4c62      	ldr	r4, [pc, #392]	; (d95f4 <_strtod_l+0x5a4>)
   d946a:	f1c5 050f 	rsb	r5, r5, #15
   d946e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d9472:	4652      	mov	r2, sl
   d9474:	465b      	mov	r3, fp
   d9476:	e9d1 0100 	ldrd	r0, r1, [r1]
   d947a:	f7ff f98f 	bl	d879c <__aeabi_dmul>
   d947e:	9b08      	ldr	r3, [sp, #32]
   d9480:	1b5d      	subs	r5, r3, r5
   d9482:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d9486:	e9d4 2300 	ldrd	r2, r3, [r4]
   d948a:	e7e3      	b.n	d9454 <_strtod_l+0x404>
   d948c:	9b08      	ldr	r3, [sp, #32]
   d948e:	3316      	adds	r3, #22
   d9490:	db0b      	blt.n	d94aa <_strtod_l+0x45a>
   d9492:	9b07      	ldr	r3, [sp, #28]
   d9494:	4a57      	ldr	r2, [pc, #348]	; (d95f4 <_strtod_l+0x5a4>)
   d9496:	1b9e      	subs	r6, r3, r6
   d9498:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d949c:	e9d6 2300 	ldrd	r2, r3, [r6]
   d94a0:	4650      	mov	r0, sl
   d94a2:	4659      	mov	r1, fp
   d94a4:	f7ff faa4 	bl	d89f0 <__aeabi_ddiv>
   d94a8:	e7d6      	b.n	d9458 <_strtod_l+0x408>
   d94aa:	9b08      	ldr	r3, [sp, #32]
   d94ac:	eba5 0808 	sub.w	r8, r5, r8
   d94b0:	4498      	add	r8, r3
   d94b2:	f1b8 0f00 	cmp.w	r8, #0
   d94b6:	dd71      	ble.n	d959c <_strtod_l+0x54c>
   d94b8:	f018 030f 	ands.w	r3, r8, #15
   d94bc:	d00a      	beq.n	d94d4 <_strtod_l+0x484>
   d94be:	494d      	ldr	r1, [pc, #308]	; (d95f4 <_strtod_l+0x5a4>)
   d94c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d94c4:	4652      	mov	r2, sl
   d94c6:	465b      	mov	r3, fp
   d94c8:	e9d1 0100 	ldrd	r0, r1, [r1]
   d94cc:	f7ff f966 	bl	d879c <__aeabi_dmul>
   d94d0:	4682      	mov	sl, r0
   d94d2:	468b      	mov	fp, r1
   d94d4:	f038 080f 	bics.w	r8, r8, #15
   d94d8:	d04d      	beq.n	d9576 <_strtod_l+0x526>
   d94da:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d94de:	dd22      	ble.n	d9526 <_strtod_l+0x4d6>
   d94e0:	2500      	movs	r5, #0
   d94e2:	462e      	mov	r6, r5
   d94e4:	9509      	str	r5, [sp, #36]	; 0x24
   d94e6:	9507      	str	r5, [sp, #28]
   d94e8:	2322      	movs	r3, #34	; 0x22
   d94ea:	f8df b110 	ldr.w	fp, [pc, #272]	; d95fc <_strtod_l+0x5ac>
   d94ee:	6023      	str	r3, [r4, #0]
   d94f0:	f04f 0a00 	mov.w	sl, #0
   d94f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d94f6:	2b00      	cmp	r3, #0
   d94f8:	f43f adec 	beq.w	d90d4 <_strtod_l+0x84>
   d94fc:	991e      	ldr	r1, [sp, #120]	; 0x78
   d94fe:	4620      	mov	r0, r4
   d9500:	f000 ffe4 	bl	da4cc <_Bfree>
   d9504:	9907      	ldr	r1, [sp, #28]
   d9506:	4620      	mov	r0, r4
   d9508:	f000 ffe0 	bl	da4cc <_Bfree>
   d950c:	4631      	mov	r1, r6
   d950e:	4620      	mov	r0, r4
   d9510:	f000 ffdc 	bl	da4cc <_Bfree>
   d9514:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9516:	4620      	mov	r0, r4
   d9518:	f000 ffd8 	bl	da4cc <_Bfree>
   d951c:	4629      	mov	r1, r5
   d951e:	4620      	mov	r0, r4
   d9520:	f000 ffd4 	bl	da4cc <_Bfree>
   d9524:	e5d6      	b.n	d90d4 <_strtod_l+0x84>
   d9526:	2300      	movs	r3, #0
   d9528:	ea4f 1828 	mov.w	r8, r8, asr #4
   d952c:	4650      	mov	r0, sl
   d952e:	4659      	mov	r1, fp
   d9530:	4699      	mov	r9, r3
   d9532:	f1b8 0f01 	cmp.w	r8, #1
   d9536:	dc21      	bgt.n	d957c <_strtod_l+0x52c>
   d9538:	b10b      	cbz	r3, d953e <_strtod_l+0x4ee>
   d953a:	4682      	mov	sl, r0
   d953c:	468b      	mov	fp, r1
   d953e:	4b2e      	ldr	r3, [pc, #184]	; (d95f8 <_strtod_l+0x5a8>)
   d9540:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d9544:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d9548:	4652      	mov	r2, sl
   d954a:	465b      	mov	r3, fp
   d954c:	e9d9 0100 	ldrd	r0, r1, [r9]
   d9550:	f7ff f924 	bl	d879c <__aeabi_dmul>
   d9554:	4b29      	ldr	r3, [pc, #164]	; (d95fc <_strtod_l+0x5ac>)
   d9556:	460a      	mov	r2, r1
   d9558:	400b      	ands	r3, r1
   d955a:	4929      	ldr	r1, [pc, #164]	; (d9600 <_strtod_l+0x5b0>)
   d955c:	428b      	cmp	r3, r1
   d955e:	4682      	mov	sl, r0
   d9560:	d8be      	bhi.n	d94e0 <_strtod_l+0x490>
   d9562:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d9566:	428b      	cmp	r3, r1
   d9568:	bf86      	itte	hi
   d956a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d9604 <_strtod_l+0x5b4>
   d956e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d9572:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d9576:	2300      	movs	r3, #0
   d9578:	9304      	str	r3, [sp, #16]
   d957a:	e081      	b.n	d9680 <_strtod_l+0x630>
   d957c:	f018 0f01 	tst.w	r8, #1
   d9580:	d007      	beq.n	d9592 <_strtod_l+0x542>
   d9582:	4b1d      	ldr	r3, [pc, #116]	; (d95f8 <_strtod_l+0x5a8>)
   d9584:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d9588:	e9d3 2300 	ldrd	r2, r3, [r3]
   d958c:	f7ff f906 	bl	d879c <__aeabi_dmul>
   d9590:	2301      	movs	r3, #1
   d9592:	f109 0901 	add.w	r9, r9, #1
   d9596:	ea4f 0868 	mov.w	r8, r8, asr #1
   d959a:	e7ca      	b.n	d9532 <_strtod_l+0x4e2>
   d959c:	d0eb      	beq.n	d9576 <_strtod_l+0x526>
   d959e:	f1c8 0800 	rsb	r8, r8, #0
   d95a2:	f018 020f 	ands.w	r2, r8, #15
   d95a6:	d00a      	beq.n	d95be <_strtod_l+0x56e>
   d95a8:	4b12      	ldr	r3, [pc, #72]	; (d95f4 <_strtod_l+0x5a4>)
   d95aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d95ae:	4650      	mov	r0, sl
   d95b0:	4659      	mov	r1, fp
   d95b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d95b6:	f7ff fa1b 	bl	d89f0 <__aeabi_ddiv>
   d95ba:	4682      	mov	sl, r0
   d95bc:	468b      	mov	fp, r1
   d95be:	ea5f 1828 	movs.w	r8, r8, asr #4
   d95c2:	d0d8      	beq.n	d9576 <_strtod_l+0x526>
   d95c4:	f1b8 0f1f 	cmp.w	r8, #31
   d95c8:	dd1e      	ble.n	d9608 <_strtod_l+0x5b8>
   d95ca:	2500      	movs	r5, #0
   d95cc:	462e      	mov	r6, r5
   d95ce:	9509      	str	r5, [sp, #36]	; 0x24
   d95d0:	9507      	str	r5, [sp, #28]
   d95d2:	2322      	movs	r3, #34	; 0x22
   d95d4:	f04f 0a00 	mov.w	sl, #0
   d95d8:	f04f 0b00 	mov.w	fp, #0
   d95dc:	6023      	str	r3, [r4, #0]
   d95de:	e789      	b.n	d94f4 <_strtod_l+0x4a4>
   d95e0:	000db73b 	.word	0x000db73b
   d95e4:	000db754 	.word	0x000db754
   d95e8:	000db732 	.word	0x000db732
   d95ec:	000db735 	.word	0x000db735
   d95f0:	000db6f8 	.word	0x000db6f8
   d95f4:	000db8d0 	.word	0x000db8d0
   d95f8:	000db8a8 	.word	0x000db8a8
   d95fc:	7ff00000 	.word	0x7ff00000
   d9600:	7ca00000 	.word	0x7ca00000
   d9604:	7fefffff 	.word	0x7fefffff
   d9608:	f018 0310 	ands.w	r3, r8, #16
   d960c:	bf18      	it	ne
   d960e:	236a      	movne	r3, #106	; 0x6a
   d9610:	f8df 93b4 	ldr.w	r9, [pc, #948]	; d99c8 <_strtod_l+0x978>
   d9614:	9304      	str	r3, [sp, #16]
   d9616:	4650      	mov	r0, sl
   d9618:	4659      	mov	r1, fp
   d961a:	2300      	movs	r3, #0
   d961c:	f018 0f01 	tst.w	r8, #1
   d9620:	d004      	beq.n	d962c <_strtod_l+0x5dc>
   d9622:	e9d9 2300 	ldrd	r2, r3, [r9]
   d9626:	f7ff f8b9 	bl	d879c <__aeabi_dmul>
   d962a:	2301      	movs	r3, #1
   d962c:	ea5f 0868 	movs.w	r8, r8, asr #1
   d9630:	f109 0908 	add.w	r9, r9, #8
   d9634:	d1f2      	bne.n	d961c <_strtod_l+0x5cc>
   d9636:	b10b      	cbz	r3, d963c <_strtod_l+0x5ec>
   d9638:	4682      	mov	sl, r0
   d963a:	468b      	mov	fp, r1
   d963c:	9b04      	ldr	r3, [sp, #16]
   d963e:	b1bb      	cbz	r3, d9670 <_strtod_l+0x620>
   d9640:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d9644:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9648:	2b00      	cmp	r3, #0
   d964a:	4659      	mov	r1, fp
   d964c:	dd10      	ble.n	d9670 <_strtod_l+0x620>
   d964e:	2b1f      	cmp	r3, #31
   d9650:	f340 8128 	ble.w	d98a4 <_strtod_l+0x854>
   d9654:	2b34      	cmp	r3, #52	; 0x34
   d9656:	bfde      	ittt	le
   d9658:	3b20      	suble	r3, #32
   d965a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d965e:	fa02 f303 	lslle.w	r3, r2, r3
   d9662:	f04f 0a00 	mov.w	sl, #0
   d9666:	bfcc      	ite	gt
   d9668:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d966c:	ea03 0b01 	andle.w	fp, r3, r1
   d9670:	2200      	movs	r2, #0
   d9672:	2300      	movs	r3, #0
   d9674:	4650      	mov	r0, sl
   d9676:	4659      	mov	r1, fp
   d9678:	f7ff faf8 	bl	d8c6c <__aeabi_dcmpeq>
   d967c:	2800      	cmp	r0, #0
   d967e:	d1a4      	bne.n	d95ca <_strtod_l+0x57a>
   d9680:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9682:	9300      	str	r3, [sp, #0]
   d9684:	990a      	ldr	r1, [sp, #40]	; 0x28
   d9686:	462b      	mov	r3, r5
   d9688:	463a      	mov	r2, r7
   d968a:	4620      	mov	r0, r4
   d968c:	f000 ff73 	bl	da576 <__s2b>
   d9690:	9009      	str	r0, [sp, #36]	; 0x24
   d9692:	2800      	cmp	r0, #0
   d9694:	f43f af24 	beq.w	d94e0 <_strtod_l+0x490>
   d9698:	9b07      	ldr	r3, [sp, #28]
   d969a:	1b9e      	subs	r6, r3, r6
   d969c:	9b08      	ldr	r3, [sp, #32]
   d969e:	2b00      	cmp	r3, #0
   d96a0:	bfb4      	ite	lt
   d96a2:	4633      	movlt	r3, r6
   d96a4:	2300      	movge	r3, #0
   d96a6:	9310      	str	r3, [sp, #64]	; 0x40
   d96a8:	9b08      	ldr	r3, [sp, #32]
   d96aa:	2500      	movs	r5, #0
   d96ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d96b0:	9318      	str	r3, [sp, #96]	; 0x60
   d96b2:	462e      	mov	r6, r5
   d96b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d96b6:	4620      	mov	r0, r4
   d96b8:	6859      	ldr	r1, [r3, #4]
   d96ba:	f000 fed3 	bl	da464 <_Balloc>
   d96be:	9007      	str	r0, [sp, #28]
   d96c0:	2800      	cmp	r0, #0
   d96c2:	f43f af11 	beq.w	d94e8 <_strtod_l+0x498>
   d96c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d96c8:	691a      	ldr	r2, [r3, #16]
   d96ca:	3202      	adds	r2, #2
   d96cc:	f103 010c 	add.w	r1, r3, #12
   d96d0:	0092      	lsls	r2, r2, #2
   d96d2:	300c      	adds	r0, #12
   d96d4:	f7ff fbee 	bl	d8eb4 <memcpy>
   d96d8:	ec4b ab10 	vmov	d0, sl, fp
   d96dc:	aa20      	add	r2, sp, #128	; 0x80
   d96de:	a91f      	add	r1, sp, #124	; 0x7c
   d96e0:	4620      	mov	r0, r4
   d96e2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   d96e6:	f001 fa35 	bl	dab54 <__d2b>
   d96ea:	901e      	str	r0, [sp, #120]	; 0x78
   d96ec:	2800      	cmp	r0, #0
   d96ee:	f43f aefb 	beq.w	d94e8 <_strtod_l+0x498>
   d96f2:	2101      	movs	r1, #1
   d96f4:	4620      	mov	r0, r4
   d96f6:	f000 ffcc 	bl	da692 <__i2b>
   d96fa:	4606      	mov	r6, r0
   d96fc:	2800      	cmp	r0, #0
   d96fe:	f43f aef3 	beq.w	d94e8 <_strtod_l+0x498>
   d9702:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d9704:	9904      	ldr	r1, [sp, #16]
   d9706:	2b00      	cmp	r3, #0
   d9708:	bfab      	itete	ge
   d970a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   d970c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   d970e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   d9710:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   d9714:	bfac      	ite	ge
   d9716:	eb03 0902 	addge.w	r9, r3, r2
   d971a:	1ad7      	sublt	r7, r2, r3
   d971c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   d971e:	eba3 0801 	sub.w	r8, r3, r1
   d9722:	4490      	add	r8, r2
   d9724:	4ba3      	ldr	r3, [pc, #652]	; (d99b4 <_strtod_l+0x964>)
   d9726:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d972a:	4598      	cmp	r8, r3
   d972c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   d9730:	f280 80cc 	bge.w	d98cc <_strtod_l+0x87c>
   d9734:	eba3 0308 	sub.w	r3, r3, r8
   d9738:	2b1f      	cmp	r3, #31
   d973a:	eba2 0203 	sub.w	r2, r2, r3
   d973e:	f04f 0101 	mov.w	r1, #1
   d9742:	f300 80b6 	bgt.w	d98b2 <_strtod_l+0x862>
   d9746:	fa01 f303 	lsl.w	r3, r1, r3
   d974a:	9311      	str	r3, [sp, #68]	; 0x44
   d974c:	2300      	movs	r3, #0
   d974e:	930c      	str	r3, [sp, #48]	; 0x30
   d9750:	eb09 0802 	add.w	r8, r9, r2
   d9754:	9b04      	ldr	r3, [sp, #16]
   d9756:	45c1      	cmp	r9, r8
   d9758:	4417      	add	r7, r2
   d975a:	441f      	add	r7, r3
   d975c:	464b      	mov	r3, r9
   d975e:	bfa8      	it	ge
   d9760:	4643      	movge	r3, r8
   d9762:	42bb      	cmp	r3, r7
   d9764:	bfa8      	it	ge
   d9766:	463b      	movge	r3, r7
   d9768:	2b00      	cmp	r3, #0
   d976a:	bfc2      	ittt	gt
   d976c:	eba8 0803 	subgt.w	r8, r8, r3
   d9770:	1aff      	subgt	r7, r7, r3
   d9772:	eba9 0903 	subgt.w	r9, r9, r3
   d9776:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d9778:	2b00      	cmp	r3, #0
   d977a:	dd17      	ble.n	d97ac <_strtod_l+0x75c>
   d977c:	4631      	mov	r1, r6
   d977e:	461a      	mov	r2, r3
   d9780:	4620      	mov	r0, r4
   d9782:	f001 f82b 	bl	da7dc <__pow5mult>
   d9786:	4606      	mov	r6, r0
   d9788:	2800      	cmp	r0, #0
   d978a:	f43f aead 	beq.w	d94e8 <_strtod_l+0x498>
   d978e:	4601      	mov	r1, r0
   d9790:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d9792:	4620      	mov	r0, r4
   d9794:	f000 ff86 	bl	da6a4 <__multiply>
   d9798:	900f      	str	r0, [sp, #60]	; 0x3c
   d979a:	2800      	cmp	r0, #0
   d979c:	f43f aea4 	beq.w	d94e8 <_strtod_l+0x498>
   d97a0:	991e      	ldr	r1, [sp, #120]	; 0x78
   d97a2:	4620      	mov	r0, r4
   d97a4:	f000 fe92 	bl	da4cc <_Bfree>
   d97a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d97aa:	931e      	str	r3, [sp, #120]	; 0x78
   d97ac:	f1b8 0f00 	cmp.w	r8, #0
   d97b0:	f300 8091 	bgt.w	d98d6 <_strtod_l+0x886>
   d97b4:	9b08      	ldr	r3, [sp, #32]
   d97b6:	2b00      	cmp	r3, #0
   d97b8:	dd08      	ble.n	d97cc <_strtod_l+0x77c>
   d97ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d97bc:	9907      	ldr	r1, [sp, #28]
   d97be:	4620      	mov	r0, r4
   d97c0:	f001 f80c 	bl	da7dc <__pow5mult>
   d97c4:	9007      	str	r0, [sp, #28]
   d97c6:	2800      	cmp	r0, #0
   d97c8:	f43f ae8e 	beq.w	d94e8 <_strtod_l+0x498>
   d97cc:	2f00      	cmp	r7, #0
   d97ce:	dd08      	ble.n	d97e2 <_strtod_l+0x792>
   d97d0:	9907      	ldr	r1, [sp, #28]
   d97d2:	463a      	mov	r2, r7
   d97d4:	4620      	mov	r0, r4
   d97d6:	f001 f84f 	bl	da878 <__lshift>
   d97da:	9007      	str	r0, [sp, #28]
   d97dc:	2800      	cmp	r0, #0
   d97de:	f43f ae83 	beq.w	d94e8 <_strtod_l+0x498>
   d97e2:	f1b9 0f00 	cmp.w	r9, #0
   d97e6:	dd08      	ble.n	d97fa <_strtod_l+0x7aa>
   d97e8:	4631      	mov	r1, r6
   d97ea:	464a      	mov	r2, r9
   d97ec:	4620      	mov	r0, r4
   d97ee:	f001 f843 	bl	da878 <__lshift>
   d97f2:	4606      	mov	r6, r0
   d97f4:	2800      	cmp	r0, #0
   d97f6:	f43f ae77 	beq.w	d94e8 <_strtod_l+0x498>
   d97fa:	9a07      	ldr	r2, [sp, #28]
   d97fc:	991e      	ldr	r1, [sp, #120]	; 0x78
   d97fe:	4620      	mov	r0, r4
   d9800:	f001 f8b5 	bl	da96e <__mdiff>
   d9804:	4605      	mov	r5, r0
   d9806:	2800      	cmp	r0, #0
   d9808:	f43f ae6e 	beq.w	d94e8 <_strtod_l+0x498>
   d980c:	68c3      	ldr	r3, [r0, #12]
   d980e:	930f      	str	r3, [sp, #60]	; 0x3c
   d9810:	2300      	movs	r3, #0
   d9812:	60c3      	str	r3, [r0, #12]
   d9814:	4631      	mov	r1, r6
   d9816:	f001 f88e 	bl	da936 <__mcmp>
   d981a:	2800      	cmp	r0, #0
   d981c:	da65      	bge.n	d98ea <_strtod_l+0x89a>
   d981e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9820:	ea53 030a 	orrs.w	r3, r3, sl
   d9824:	f040 8087 	bne.w	d9936 <_strtod_l+0x8e6>
   d9828:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d982c:	2b00      	cmp	r3, #0
   d982e:	f040 8082 	bne.w	d9936 <_strtod_l+0x8e6>
   d9832:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9836:	0d1b      	lsrs	r3, r3, #20
   d9838:	051b      	lsls	r3, r3, #20
   d983a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d983e:	d97a      	bls.n	d9936 <_strtod_l+0x8e6>
   d9840:	696b      	ldr	r3, [r5, #20]
   d9842:	b913      	cbnz	r3, d984a <_strtod_l+0x7fa>
   d9844:	692b      	ldr	r3, [r5, #16]
   d9846:	2b01      	cmp	r3, #1
   d9848:	dd75      	ble.n	d9936 <_strtod_l+0x8e6>
   d984a:	4629      	mov	r1, r5
   d984c:	2201      	movs	r2, #1
   d984e:	4620      	mov	r0, r4
   d9850:	f001 f812 	bl	da878 <__lshift>
   d9854:	4631      	mov	r1, r6
   d9856:	4605      	mov	r5, r0
   d9858:	f001 f86d 	bl	da936 <__mcmp>
   d985c:	2800      	cmp	r0, #0
   d985e:	dd6a      	ble.n	d9936 <_strtod_l+0x8e6>
   d9860:	9904      	ldr	r1, [sp, #16]
   d9862:	4a55      	ldr	r2, [pc, #340]	; (d99b8 <_strtod_l+0x968>)
   d9864:	465b      	mov	r3, fp
   d9866:	2900      	cmp	r1, #0
   d9868:	f000 8085 	beq.w	d9976 <_strtod_l+0x926>
   d986c:	ea02 010b 	and.w	r1, r2, fp
   d9870:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   d9874:	dc7f      	bgt.n	d9976 <_strtod_l+0x926>
   d9876:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   d987a:	f77f aeaa 	ble.w	d95d2 <_strtod_l+0x582>
   d987e:	4a4f      	ldr	r2, [pc, #316]	; (d99bc <_strtod_l+0x96c>)
   d9880:	2300      	movs	r3, #0
   d9882:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   d9886:	4650      	mov	r0, sl
   d9888:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   d988c:	4659      	mov	r1, fp
   d988e:	f7fe ff85 	bl	d879c <__aeabi_dmul>
   d9892:	460b      	mov	r3, r1
   d9894:	4303      	orrs	r3, r0
   d9896:	bf08      	it	eq
   d9898:	2322      	moveq	r3, #34	; 0x22
   d989a:	4682      	mov	sl, r0
   d989c:	468b      	mov	fp, r1
   d989e:	bf08      	it	eq
   d98a0:	6023      	streq	r3, [r4, #0]
   d98a2:	e62b      	b.n	d94fc <_strtod_l+0x4ac>
   d98a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d98a8:	fa02 f303 	lsl.w	r3, r2, r3
   d98ac:	ea03 0a0a 	and.w	sl, r3, sl
   d98b0:	e6de      	b.n	d9670 <_strtod_l+0x620>
   d98b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   d98b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   d98ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   d98be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   d98c2:	fa01 f308 	lsl.w	r3, r1, r8
   d98c6:	930c      	str	r3, [sp, #48]	; 0x30
   d98c8:	9111      	str	r1, [sp, #68]	; 0x44
   d98ca:	e741      	b.n	d9750 <_strtod_l+0x700>
   d98cc:	2300      	movs	r3, #0
   d98ce:	930c      	str	r3, [sp, #48]	; 0x30
   d98d0:	2301      	movs	r3, #1
   d98d2:	9311      	str	r3, [sp, #68]	; 0x44
   d98d4:	e73c      	b.n	d9750 <_strtod_l+0x700>
   d98d6:	991e      	ldr	r1, [sp, #120]	; 0x78
   d98d8:	4642      	mov	r2, r8
   d98da:	4620      	mov	r0, r4
   d98dc:	f000 ffcc 	bl	da878 <__lshift>
   d98e0:	901e      	str	r0, [sp, #120]	; 0x78
   d98e2:	2800      	cmp	r0, #0
   d98e4:	f47f af66 	bne.w	d97b4 <_strtod_l+0x764>
   d98e8:	e5fe      	b.n	d94e8 <_strtod_l+0x498>
   d98ea:	465f      	mov	r7, fp
   d98ec:	d16e      	bne.n	d99cc <_strtod_l+0x97c>
   d98ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d98f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d98f4:	b342      	cbz	r2, d9948 <_strtod_l+0x8f8>
   d98f6:	4a32      	ldr	r2, [pc, #200]	; (d99c0 <_strtod_l+0x970>)
   d98f8:	4293      	cmp	r3, r2
   d98fa:	d128      	bne.n	d994e <_strtod_l+0x8fe>
   d98fc:	9b04      	ldr	r3, [sp, #16]
   d98fe:	4650      	mov	r0, sl
   d9900:	b1eb      	cbz	r3, d993e <_strtod_l+0x8ee>
   d9902:	4a2d      	ldr	r2, [pc, #180]	; (d99b8 <_strtod_l+0x968>)
   d9904:	403a      	ands	r2, r7
   d9906:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   d990a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d990e:	d819      	bhi.n	d9944 <_strtod_l+0x8f4>
   d9910:	0d12      	lsrs	r2, r2, #20
   d9912:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   d9916:	fa01 f303 	lsl.w	r3, r1, r3
   d991a:	4298      	cmp	r0, r3
   d991c:	d117      	bne.n	d994e <_strtod_l+0x8fe>
   d991e:	4b29      	ldr	r3, [pc, #164]	; (d99c4 <_strtod_l+0x974>)
   d9920:	429f      	cmp	r7, r3
   d9922:	d102      	bne.n	d992a <_strtod_l+0x8da>
   d9924:	3001      	adds	r0, #1
   d9926:	f43f addf 	beq.w	d94e8 <_strtod_l+0x498>
   d992a:	4b23      	ldr	r3, [pc, #140]	; (d99b8 <_strtod_l+0x968>)
   d992c:	403b      	ands	r3, r7
   d992e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d9932:	f04f 0a00 	mov.w	sl, #0
   d9936:	9b04      	ldr	r3, [sp, #16]
   d9938:	2b00      	cmp	r3, #0
   d993a:	d1a0      	bne.n	d987e <_strtod_l+0x82e>
   d993c:	e5de      	b.n	d94fc <_strtod_l+0x4ac>
   d993e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9942:	e7ea      	b.n	d991a <_strtod_l+0x8ca>
   d9944:	460b      	mov	r3, r1
   d9946:	e7e8      	b.n	d991a <_strtod_l+0x8ca>
   d9948:	ea53 030a 	orrs.w	r3, r3, sl
   d994c:	d088      	beq.n	d9860 <_strtod_l+0x810>
   d994e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9950:	b1db      	cbz	r3, d998a <_strtod_l+0x93a>
   d9952:	423b      	tst	r3, r7
   d9954:	d0ef      	beq.n	d9936 <_strtod_l+0x8e6>
   d9956:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9958:	9a04      	ldr	r2, [sp, #16]
   d995a:	4650      	mov	r0, sl
   d995c:	4659      	mov	r1, fp
   d995e:	b1c3      	cbz	r3, d9992 <_strtod_l+0x942>
   d9960:	f7ff fb58 	bl	d9014 <sulp>
   d9964:	4602      	mov	r2, r0
   d9966:	460b      	mov	r3, r1
   d9968:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d996c:	f7fe fd60 	bl	d8430 <__adddf3>
   d9970:	4682      	mov	sl, r0
   d9972:	468b      	mov	fp, r1
   d9974:	e7df      	b.n	d9936 <_strtod_l+0x8e6>
   d9976:	4013      	ands	r3, r2
   d9978:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d997c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d9980:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d9984:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9988:	e7d5      	b.n	d9936 <_strtod_l+0x8e6>
   d998a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d998c:	ea13 0f0a 	tst.w	r3, sl
   d9990:	e7e0      	b.n	d9954 <_strtod_l+0x904>
   d9992:	f7ff fb3f 	bl	d9014 <sulp>
   d9996:	4602      	mov	r2, r0
   d9998:	460b      	mov	r3, r1
   d999a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d999e:	f7fe fd45 	bl	d842c <__aeabi_dsub>
   d99a2:	2200      	movs	r2, #0
   d99a4:	2300      	movs	r3, #0
   d99a6:	4682      	mov	sl, r0
   d99a8:	468b      	mov	fp, r1
   d99aa:	f7ff f95f 	bl	d8c6c <__aeabi_dcmpeq>
   d99ae:	2800      	cmp	r0, #0
   d99b0:	d0c1      	beq.n	d9936 <_strtod_l+0x8e6>
   d99b2:	e60e      	b.n	d95d2 <_strtod_l+0x582>
   d99b4:	fffffc02 	.word	0xfffffc02
   d99b8:	7ff00000 	.word	0x7ff00000
   d99bc:	39500000 	.word	0x39500000
   d99c0:	000fffff 	.word	0x000fffff
   d99c4:	7fefffff 	.word	0x7fefffff
   d99c8:	000db768 	.word	0x000db768
   d99cc:	4631      	mov	r1, r6
   d99ce:	4628      	mov	r0, r5
   d99d0:	f001 f910 	bl	dabf4 <__ratio>
   d99d4:	ec59 8b10 	vmov	r8, r9, d0
   d99d8:	ee10 0a10 	vmov	r0, s0
   d99dc:	2200      	movs	r2, #0
   d99de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d99e2:	4649      	mov	r1, r9
   d99e4:	f7ff f956 	bl	d8c94 <__aeabi_dcmple>
   d99e8:	2800      	cmp	r0, #0
   d99ea:	d07c      	beq.n	d9ae6 <_strtod_l+0xa96>
   d99ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d99ee:	2b00      	cmp	r3, #0
   d99f0:	d04c      	beq.n	d9a8c <_strtod_l+0xa3c>
   d99f2:	4b95      	ldr	r3, [pc, #596]	; (d9c48 <_strtod_l+0xbf8>)
   d99f4:	2200      	movs	r2, #0
   d99f6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d99fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; d9c48 <_strtod_l+0xbf8>
   d99fe:	f04f 0800 	mov.w	r8, #0
   d9a02:	4b92      	ldr	r3, [pc, #584]	; (d9c4c <_strtod_l+0xbfc>)
   d9a04:	403b      	ands	r3, r7
   d9a06:	9311      	str	r3, [sp, #68]	; 0x44
   d9a08:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9a0a:	4b91      	ldr	r3, [pc, #580]	; (d9c50 <_strtod_l+0xc00>)
   d9a0c:	429a      	cmp	r2, r3
   d9a0e:	f040 80b2 	bne.w	d9b76 <_strtod_l+0xb26>
   d9a12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9a16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9a1a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   d9a1e:	ec4b ab10 	vmov	d0, sl, fp
   d9a22:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   d9a26:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d9a2a:	f001 f817 	bl	daa5c <__ulp>
   d9a2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9a32:	ec53 2b10 	vmov	r2, r3, d0
   d9a36:	f7fe feb1 	bl	d879c <__aeabi_dmul>
   d9a3a:	4652      	mov	r2, sl
   d9a3c:	465b      	mov	r3, fp
   d9a3e:	f7fe fcf7 	bl	d8430 <__adddf3>
   d9a42:	460b      	mov	r3, r1
   d9a44:	4981      	ldr	r1, [pc, #516]	; (d9c4c <_strtod_l+0xbfc>)
   d9a46:	4a83      	ldr	r2, [pc, #524]	; (d9c54 <_strtod_l+0xc04>)
   d9a48:	4019      	ands	r1, r3
   d9a4a:	4291      	cmp	r1, r2
   d9a4c:	4682      	mov	sl, r0
   d9a4e:	d95e      	bls.n	d9b0e <_strtod_l+0xabe>
   d9a50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d9a52:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   d9a56:	4293      	cmp	r3, r2
   d9a58:	d103      	bne.n	d9a62 <_strtod_l+0xa12>
   d9a5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9a5c:	3301      	adds	r3, #1
   d9a5e:	f43f ad43 	beq.w	d94e8 <_strtod_l+0x498>
   d9a62:	f8df b1fc 	ldr.w	fp, [pc, #508]	; d9c60 <_strtod_l+0xc10>
   d9a66:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9a6a:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9a6c:	4620      	mov	r0, r4
   d9a6e:	f000 fd2d 	bl	da4cc <_Bfree>
   d9a72:	9907      	ldr	r1, [sp, #28]
   d9a74:	4620      	mov	r0, r4
   d9a76:	f000 fd29 	bl	da4cc <_Bfree>
   d9a7a:	4631      	mov	r1, r6
   d9a7c:	4620      	mov	r0, r4
   d9a7e:	f000 fd25 	bl	da4cc <_Bfree>
   d9a82:	4629      	mov	r1, r5
   d9a84:	4620      	mov	r0, r4
   d9a86:	f000 fd21 	bl	da4cc <_Bfree>
   d9a8a:	e613      	b.n	d96b4 <_strtod_l+0x664>
   d9a8c:	f1ba 0f00 	cmp.w	sl, #0
   d9a90:	d11b      	bne.n	d9aca <_strtod_l+0xa7a>
   d9a92:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9a96:	b9f3      	cbnz	r3, d9ad6 <_strtod_l+0xa86>
   d9a98:	4b6b      	ldr	r3, [pc, #428]	; (d9c48 <_strtod_l+0xbf8>)
   d9a9a:	2200      	movs	r2, #0
   d9a9c:	4640      	mov	r0, r8
   d9a9e:	4649      	mov	r1, r9
   d9aa0:	f7ff f8ee 	bl	d8c80 <__aeabi_dcmplt>
   d9aa4:	b9d0      	cbnz	r0, d9adc <_strtod_l+0xa8c>
   d9aa6:	4640      	mov	r0, r8
   d9aa8:	4649      	mov	r1, r9
   d9aaa:	4b6b      	ldr	r3, [pc, #428]	; (d9c58 <_strtod_l+0xc08>)
   d9aac:	2200      	movs	r2, #0
   d9aae:	f7fe fe75 	bl	d879c <__aeabi_dmul>
   d9ab2:	4680      	mov	r8, r0
   d9ab4:	4689      	mov	r9, r1
   d9ab6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d9aba:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   d9abe:	931b      	str	r3, [sp, #108]	; 0x6c
   d9ac0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   d9ac4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9ac8:	e79b      	b.n	d9a02 <_strtod_l+0x9b2>
   d9aca:	f1ba 0f01 	cmp.w	sl, #1
   d9ace:	d102      	bne.n	d9ad6 <_strtod_l+0xa86>
   d9ad0:	2f00      	cmp	r7, #0
   d9ad2:	f43f ad7e 	beq.w	d95d2 <_strtod_l+0x582>
   d9ad6:	4b61      	ldr	r3, [pc, #388]	; (d9c5c <_strtod_l+0xc0c>)
   d9ad8:	2200      	movs	r2, #0
   d9ada:	e78c      	b.n	d99f6 <_strtod_l+0x9a6>
   d9adc:	f8df 9178 	ldr.w	r9, [pc, #376]	; d9c58 <_strtod_l+0xc08>
   d9ae0:	f04f 0800 	mov.w	r8, #0
   d9ae4:	e7e7      	b.n	d9ab6 <_strtod_l+0xa66>
   d9ae6:	4b5c      	ldr	r3, [pc, #368]	; (d9c58 <_strtod_l+0xc08>)
   d9ae8:	4640      	mov	r0, r8
   d9aea:	4649      	mov	r1, r9
   d9aec:	2200      	movs	r2, #0
   d9aee:	f7fe fe55 	bl	d879c <__aeabi_dmul>
   d9af2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9af4:	4680      	mov	r8, r0
   d9af6:	4689      	mov	r9, r1
   d9af8:	b933      	cbnz	r3, d9b08 <_strtod_l+0xab8>
   d9afa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9afe:	9012      	str	r0, [sp, #72]	; 0x48
   d9b00:	9313      	str	r3, [sp, #76]	; 0x4c
   d9b02:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   d9b06:	e7dd      	b.n	d9ac4 <_strtod_l+0xa74>
   d9b08:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   d9b0c:	e7f9      	b.n	d9b02 <_strtod_l+0xab2>
   d9b0e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   d9b12:	9b04      	ldr	r3, [sp, #16]
   d9b14:	2b00      	cmp	r3, #0
   d9b16:	d1a8      	bne.n	d9a6a <_strtod_l+0xa1a>
   d9b18:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9b1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9b1e:	0d1b      	lsrs	r3, r3, #20
   d9b20:	051b      	lsls	r3, r3, #20
   d9b22:	429a      	cmp	r2, r3
   d9b24:	d1a1      	bne.n	d9a6a <_strtod_l+0xa1a>
   d9b26:	4640      	mov	r0, r8
   d9b28:	4649      	mov	r1, r9
   d9b2a:	f001 f8ff 	bl	dad2c <__aeabi_d2lz>
   d9b2e:	f7fe fe07 	bl	d8740 <__aeabi_l2d>
   d9b32:	4602      	mov	r2, r0
   d9b34:	460b      	mov	r3, r1
   d9b36:	4640      	mov	r0, r8
   d9b38:	4649      	mov	r1, r9
   d9b3a:	f7fe fc77 	bl	d842c <__aeabi_dsub>
   d9b3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d9b40:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9b44:	ea43 030a 	orr.w	r3, r3, sl
   d9b48:	4313      	orrs	r3, r2
   d9b4a:	4680      	mov	r8, r0
   d9b4c:	4689      	mov	r9, r1
   d9b4e:	d053      	beq.n	d9bf8 <_strtod_l+0xba8>
   d9b50:	a335      	add	r3, pc, #212	; (adr r3, d9c28 <_strtod_l+0xbd8>)
   d9b52:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9b56:	f7ff f893 	bl	d8c80 <__aeabi_dcmplt>
   d9b5a:	2800      	cmp	r0, #0
   d9b5c:	f47f acce 	bne.w	d94fc <_strtod_l+0x4ac>
   d9b60:	a333      	add	r3, pc, #204	; (adr r3, d9c30 <_strtod_l+0xbe0>)
   d9b62:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9b66:	4640      	mov	r0, r8
   d9b68:	4649      	mov	r1, r9
   d9b6a:	f7ff f8a7 	bl	d8cbc <__aeabi_dcmpgt>
   d9b6e:	2800      	cmp	r0, #0
   d9b70:	f43f af7b 	beq.w	d9a6a <_strtod_l+0xa1a>
   d9b74:	e4c2      	b.n	d94fc <_strtod_l+0x4ac>
   d9b76:	9b04      	ldr	r3, [sp, #16]
   d9b78:	b333      	cbz	r3, d9bc8 <_strtod_l+0xb78>
   d9b7a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d9b7c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d9b80:	d822      	bhi.n	d9bc8 <_strtod_l+0xb78>
   d9b82:	a32d      	add	r3, pc, #180	; (adr r3, d9c38 <_strtod_l+0xbe8>)
   d9b84:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9b88:	4640      	mov	r0, r8
   d9b8a:	4649      	mov	r1, r9
   d9b8c:	f7ff f882 	bl	d8c94 <__aeabi_dcmple>
   d9b90:	b1a0      	cbz	r0, d9bbc <_strtod_l+0xb6c>
   d9b92:	4649      	mov	r1, r9
   d9b94:	4640      	mov	r0, r8
   d9b96:	f7ff f8b1 	bl	d8cfc <__aeabi_d2uiz>
   d9b9a:	2801      	cmp	r0, #1
   d9b9c:	bf38      	it	cc
   d9b9e:	2001      	movcc	r0, #1
   d9ba0:	f7fe fd82 	bl	d86a8 <__aeabi_ui2d>
   d9ba4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9ba6:	4680      	mov	r8, r0
   d9ba8:	4689      	mov	r9, r1
   d9baa:	bb13      	cbnz	r3, d9bf2 <_strtod_l+0xba2>
   d9bac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9bb0:	9014      	str	r0, [sp, #80]	; 0x50
   d9bb2:	9315      	str	r3, [sp, #84]	; 0x54
   d9bb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   d9bb8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9bbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d9bbe:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9bc0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   d9bc4:	1a9b      	subs	r3, r3, r2
   d9bc6:	930d      	str	r3, [sp, #52]	; 0x34
   d9bc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9bcc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   d9bd0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d9bd4:	f000 ff42 	bl	daa5c <__ulp>
   d9bd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9bdc:	ec53 2b10 	vmov	r2, r3, d0
   d9be0:	f7fe fddc 	bl	d879c <__aeabi_dmul>
   d9be4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9be8:	f7fe fc22 	bl	d8430 <__adddf3>
   d9bec:	4682      	mov	sl, r0
   d9bee:	468b      	mov	fp, r1
   d9bf0:	e78f      	b.n	d9b12 <_strtod_l+0xac2>
   d9bf2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   d9bf6:	e7dd      	b.n	d9bb4 <_strtod_l+0xb64>
   d9bf8:	a311      	add	r3, pc, #68	; (adr r3, d9c40 <_strtod_l+0xbf0>)
   d9bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9bfe:	f7ff f83f 	bl	d8c80 <__aeabi_dcmplt>
   d9c02:	e7b4      	b.n	d9b6e <_strtod_l+0xb1e>
   d9c04:	2300      	movs	r3, #0
   d9c06:	930e      	str	r3, [sp, #56]	; 0x38
   d9c08:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d9c0a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9c0c:	6013      	str	r3, [r2, #0]
   d9c0e:	f7ff ba65 	b.w	d90dc <_strtod_l+0x8c>
   d9c12:	2b65      	cmp	r3, #101	; 0x65
   d9c14:	f43f ab5d 	beq.w	d92d2 <_strtod_l+0x282>
   d9c18:	2b45      	cmp	r3, #69	; 0x45
   d9c1a:	f43f ab5a 	beq.w	d92d2 <_strtod_l+0x282>
   d9c1e:	2201      	movs	r2, #1
   d9c20:	f7ff bb92 	b.w	d9348 <_strtod_l+0x2f8>
   d9c24:	f3af 8000 	nop.w
   d9c28:	94a03595 	.word	0x94a03595
   d9c2c:	3fdfffff 	.word	0x3fdfffff
   d9c30:	35afe535 	.word	0x35afe535
   d9c34:	3fe00000 	.word	0x3fe00000
   d9c38:	ffc00000 	.word	0xffc00000
   d9c3c:	41dfffff 	.word	0x41dfffff
   d9c40:	94a03595 	.word	0x94a03595
   d9c44:	3fcfffff 	.word	0x3fcfffff
   d9c48:	3ff00000 	.word	0x3ff00000
   d9c4c:	7ff00000 	.word	0x7ff00000
   d9c50:	7fe00000 	.word	0x7fe00000
   d9c54:	7c9fffff 	.word	0x7c9fffff
   d9c58:	3fe00000 	.word	0x3fe00000
   d9c5c:	bff00000 	.word	0xbff00000
   d9c60:	7fefffff 	.word	0x7fefffff

000d9c64 <strtod>:
   d9c64:	460a      	mov	r2, r1
   d9c66:	4601      	mov	r1, r0
   d9c68:	4802      	ldr	r0, [pc, #8]	; (d9c74 <strtod+0x10>)
   d9c6a:	4b03      	ldr	r3, [pc, #12]	; (d9c78 <strtod+0x14>)
   d9c6c:	6800      	ldr	r0, [r0, #0]
   d9c6e:	f7ff b9ef 	b.w	d9050 <_strtod_l>
   d9c72:	bf00      	nop
   d9c74:	2003de60 	.word	0x2003de60
   d9c78:	2003dec8 	.word	0x2003dec8

000d9c7c <_strtol_l.isra.0>:
   d9c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9c80:	4e3a      	ldr	r6, [pc, #232]	; (d9d6c <_strtol_l.isra.0+0xf0>)
   d9c82:	4686      	mov	lr, r0
   d9c84:	468c      	mov	ip, r1
   d9c86:	4660      	mov	r0, ip
   d9c88:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9c8c:	5da5      	ldrb	r5, [r4, r6]
   d9c8e:	f015 0508 	ands.w	r5, r5, #8
   d9c92:	d1f8      	bne.n	d9c86 <_strtol_l.isra.0+0xa>
   d9c94:	2c2d      	cmp	r4, #45	; 0x2d
   d9c96:	d133      	bne.n	d9d00 <_strtol_l.isra.0+0x84>
   d9c98:	f89c 4000 	ldrb.w	r4, [ip]
   d9c9c:	f04f 0801 	mov.w	r8, #1
   d9ca0:	f100 0c02 	add.w	ip, r0, #2
   d9ca4:	2b00      	cmp	r3, #0
   d9ca6:	d05c      	beq.n	d9d62 <_strtol_l.isra.0+0xe6>
   d9ca8:	2b10      	cmp	r3, #16
   d9caa:	d10c      	bne.n	d9cc6 <_strtol_l.isra.0+0x4a>
   d9cac:	2c30      	cmp	r4, #48	; 0x30
   d9cae:	d10a      	bne.n	d9cc6 <_strtol_l.isra.0+0x4a>
   d9cb0:	f89c 0000 	ldrb.w	r0, [ip]
   d9cb4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9cb8:	2858      	cmp	r0, #88	; 0x58
   d9cba:	d14d      	bne.n	d9d58 <_strtol_l.isra.0+0xdc>
   d9cbc:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d9cc0:	2310      	movs	r3, #16
   d9cc2:	f10c 0c02 	add.w	ip, ip, #2
   d9cc6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d9cca:	3f01      	subs	r7, #1
   d9ccc:	2600      	movs	r6, #0
   d9cce:	fbb7 f9f3 	udiv	r9, r7, r3
   d9cd2:	4630      	mov	r0, r6
   d9cd4:	fb03 7a19 	mls	sl, r3, r9, r7
   d9cd8:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d9cdc:	2d09      	cmp	r5, #9
   d9cde:	d818      	bhi.n	d9d12 <_strtol_l.isra.0+0x96>
   d9ce0:	462c      	mov	r4, r5
   d9ce2:	42a3      	cmp	r3, r4
   d9ce4:	dd24      	ble.n	d9d30 <_strtol_l.isra.0+0xb4>
   d9ce6:	1c75      	adds	r5, r6, #1
   d9ce8:	d007      	beq.n	d9cfa <_strtol_l.isra.0+0x7e>
   d9cea:	4581      	cmp	r9, r0
   d9cec:	d31d      	bcc.n	d9d2a <_strtol_l.isra.0+0xae>
   d9cee:	d101      	bne.n	d9cf4 <_strtol_l.isra.0+0x78>
   d9cf0:	45a2      	cmp	sl, r4
   d9cf2:	db1a      	blt.n	d9d2a <_strtol_l.isra.0+0xae>
   d9cf4:	fb00 4003 	mla	r0, r0, r3, r4
   d9cf8:	2601      	movs	r6, #1
   d9cfa:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9cfe:	e7eb      	b.n	d9cd8 <_strtol_l.isra.0+0x5c>
   d9d00:	2c2b      	cmp	r4, #43	; 0x2b
   d9d02:	bf08      	it	eq
   d9d04:	f89c 4000 	ldrbeq.w	r4, [ip]
   d9d08:	46a8      	mov	r8, r5
   d9d0a:	bf08      	it	eq
   d9d0c:	f100 0c02 	addeq.w	ip, r0, #2
   d9d10:	e7c8      	b.n	d9ca4 <_strtol_l.isra.0+0x28>
   d9d12:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d9d16:	2d19      	cmp	r5, #25
   d9d18:	d801      	bhi.n	d9d1e <_strtol_l.isra.0+0xa2>
   d9d1a:	3c37      	subs	r4, #55	; 0x37
   d9d1c:	e7e1      	b.n	d9ce2 <_strtol_l.isra.0+0x66>
   d9d1e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d9d22:	2d19      	cmp	r5, #25
   d9d24:	d804      	bhi.n	d9d30 <_strtol_l.isra.0+0xb4>
   d9d26:	3c57      	subs	r4, #87	; 0x57
   d9d28:	e7db      	b.n	d9ce2 <_strtol_l.isra.0+0x66>
   d9d2a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d9d2e:	e7e4      	b.n	d9cfa <_strtol_l.isra.0+0x7e>
   d9d30:	1c73      	adds	r3, r6, #1
   d9d32:	d106      	bne.n	d9d42 <_strtol_l.isra.0+0xc6>
   d9d34:	2322      	movs	r3, #34	; 0x22
   d9d36:	f8ce 3000 	str.w	r3, [lr]
   d9d3a:	4638      	mov	r0, r7
   d9d3c:	b942      	cbnz	r2, d9d50 <_strtol_l.isra.0+0xd4>
   d9d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9d42:	f1b8 0f00 	cmp.w	r8, #0
   d9d46:	d000      	beq.n	d9d4a <_strtol_l.isra.0+0xce>
   d9d48:	4240      	negs	r0, r0
   d9d4a:	2a00      	cmp	r2, #0
   d9d4c:	d0f7      	beq.n	d9d3e <_strtol_l.isra.0+0xc2>
   d9d4e:	b10e      	cbz	r6, d9d54 <_strtol_l.isra.0+0xd8>
   d9d50:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d9d54:	6011      	str	r1, [r2, #0]
   d9d56:	e7f2      	b.n	d9d3e <_strtol_l.isra.0+0xc2>
   d9d58:	2430      	movs	r4, #48	; 0x30
   d9d5a:	2b00      	cmp	r3, #0
   d9d5c:	d1b3      	bne.n	d9cc6 <_strtol_l.isra.0+0x4a>
   d9d5e:	2308      	movs	r3, #8
   d9d60:	e7b1      	b.n	d9cc6 <_strtol_l.isra.0+0x4a>
   d9d62:	2c30      	cmp	r4, #48	; 0x30
   d9d64:	d0a4      	beq.n	d9cb0 <_strtol_l.isra.0+0x34>
   d9d66:	230a      	movs	r3, #10
   d9d68:	e7ad      	b.n	d9cc6 <_strtol_l.isra.0+0x4a>
   d9d6a:	bf00      	nop
   d9d6c:	000db791 	.word	0x000db791

000d9d70 <strtol>:
   d9d70:	4613      	mov	r3, r2
   d9d72:	460a      	mov	r2, r1
   d9d74:	4601      	mov	r1, r0
   d9d76:	4802      	ldr	r0, [pc, #8]	; (d9d80 <strtol+0x10>)
   d9d78:	6800      	ldr	r0, [r0, #0]
   d9d7a:	f7ff bf7f 	b.w	d9c7c <_strtol_l.isra.0>
   d9d7e:	bf00      	nop
   d9d80:	2003de60 	.word	0x2003de60

000d9d84 <rshift>:
   d9d84:	6903      	ldr	r3, [r0, #16]
   d9d86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   d9d8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9d8e:	ea4f 1261 	mov.w	r2, r1, asr #5
   d9d92:	f100 0414 	add.w	r4, r0, #20
   d9d96:	dd45      	ble.n	d9e24 <rshift+0xa0>
   d9d98:	f011 011f 	ands.w	r1, r1, #31
   d9d9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   d9da0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   d9da4:	d10c      	bne.n	d9dc0 <rshift+0x3c>
   d9da6:	f100 0710 	add.w	r7, r0, #16
   d9daa:	4629      	mov	r1, r5
   d9dac:	42b1      	cmp	r1, r6
   d9dae:	d334      	bcc.n	d9e1a <rshift+0x96>
   d9db0:	1a9b      	subs	r3, r3, r2
   d9db2:	009b      	lsls	r3, r3, #2
   d9db4:	1eea      	subs	r2, r5, #3
   d9db6:	4296      	cmp	r6, r2
   d9db8:	bf38      	it	cc
   d9dba:	2300      	movcc	r3, #0
   d9dbc:	4423      	add	r3, r4
   d9dbe:	e015      	b.n	d9dec <rshift+0x68>
   d9dc0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   d9dc4:	f1c1 0820 	rsb	r8, r1, #32
   d9dc8:	40cf      	lsrs	r7, r1
   d9dca:	f105 0e04 	add.w	lr, r5, #4
   d9dce:	46a1      	mov	r9, r4
   d9dd0:	4576      	cmp	r6, lr
   d9dd2:	46f4      	mov	ip, lr
   d9dd4:	d815      	bhi.n	d9e02 <rshift+0x7e>
   d9dd6:	1a9b      	subs	r3, r3, r2
   d9dd8:	009a      	lsls	r2, r3, #2
   d9dda:	3a04      	subs	r2, #4
   d9ddc:	3501      	adds	r5, #1
   d9dde:	42ae      	cmp	r6, r5
   d9de0:	bf38      	it	cc
   d9de2:	2200      	movcc	r2, #0
   d9de4:	18a3      	adds	r3, r4, r2
   d9de6:	50a7      	str	r7, [r4, r2]
   d9de8:	b107      	cbz	r7, d9dec <rshift+0x68>
   d9dea:	3304      	adds	r3, #4
   d9dec:	1b1a      	subs	r2, r3, r4
   d9dee:	42a3      	cmp	r3, r4
   d9df0:	ea4f 02a2 	mov.w	r2, r2, asr #2
   d9df4:	bf08      	it	eq
   d9df6:	2300      	moveq	r3, #0
   d9df8:	6102      	str	r2, [r0, #16]
   d9dfa:	bf08      	it	eq
   d9dfc:	6143      	streq	r3, [r0, #20]
   d9dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9e02:	f8dc c000 	ldr.w	ip, [ip]
   d9e06:	fa0c fc08 	lsl.w	ip, ip, r8
   d9e0a:	ea4c 0707 	orr.w	r7, ip, r7
   d9e0e:	f849 7b04 	str.w	r7, [r9], #4
   d9e12:	f85e 7b04 	ldr.w	r7, [lr], #4
   d9e16:	40cf      	lsrs	r7, r1
   d9e18:	e7da      	b.n	d9dd0 <rshift+0x4c>
   d9e1a:	f851 cb04 	ldr.w	ip, [r1], #4
   d9e1e:	f847 cf04 	str.w	ip, [r7, #4]!
   d9e22:	e7c3      	b.n	d9dac <rshift+0x28>
   d9e24:	4623      	mov	r3, r4
   d9e26:	e7e1      	b.n	d9dec <rshift+0x68>

000d9e28 <__hexdig_fun>:
   d9e28:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d9e2c:	2b09      	cmp	r3, #9
   d9e2e:	d802      	bhi.n	d9e36 <__hexdig_fun+0xe>
   d9e30:	3820      	subs	r0, #32
   d9e32:	b2c0      	uxtb	r0, r0
   d9e34:	4770      	bx	lr
   d9e36:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d9e3a:	2b05      	cmp	r3, #5
   d9e3c:	d801      	bhi.n	d9e42 <__hexdig_fun+0x1a>
   d9e3e:	3847      	subs	r0, #71	; 0x47
   d9e40:	e7f7      	b.n	d9e32 <__hexdig_fun+0xa>
   d9e42:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d9e46:	2b05      	cmp	r3, #5
   d9e48:	d801      	bhi.n	d9e4e <__hexdig_fun+0x26>
   d9e4a:	3827      	subs	r0, #39	; 0x27
   d9e4c:	e7f1      	b.n	d9e32 <__hexdig_fun+0xa>
   d9e4e:	2000      	movs	r0, #0
   d9e50:	4770      	bx	lr
	...

000d9e54 <__gethex>:
   d9e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9e58:	ed2d 8b02 	vpush	{d8}
   d9e5c:	b089      	sub	sp, #36	; 0x24
   d9e5e:	ee08 0a10 	vmov	s16, r0
   d9e62:	9304      	str	r3, [sp, #16]
   d9e64:	4bbc      	ldr	r3, [pc, #752]	; (da158 <__gethex+0x304>)
   d9e66:	681b      	ldr	r3, [r3, #0]
   d9e68:	9301      	str	r3, [sp, #4]
   d9e6a:	4618      	mov	r0, r3
   d9e6c:	468b      	mov	fp, r1
   d9e6e:	4690      	mov	r8, r2
   d9e70:	f7ff f8a3 	bl	d8fba <strlen>
   d9e74:	9b01      	ldr	r3, [sp, #4]
   d9e76:	f8db 2000 	ldr.w	r2, [fp]
   d9e7a:	4403      	add	r3, r0
   d9e7c:	4682      	mov	sl, r0
   d9e7e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d9e82:	9305      	str	r3, [sp, #20]
   d9e84:	1c93      	adds	r3, r2, #2
   d9e86:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   d9e8a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   d9e8e:	32fe      	adds	r2, #254	; 0xfe
   d9e90:	18d1      	adds	r1, r2, r3
   d9e92:	461f      	mov	r7, r3
   d9e94:	f813 0b01 	ldrb.w	r0, [r3], #1
   d9e98:	9100      	str	r1, [sp, #0]
   d9e9a:	2830      	cmp	r0, #48	; 0x30
   d9e9c:	d0f8      	beq.n	d9e90 <__gethex+0x3c>
   d9e9e:	f7ff ffc3 	bl	d9e28 <__hexdig_fun>
   d9ea2:	4604      	mov	r4, r0
   d9ea4:	2800      	cmp	r0, #0
   d9ea6:	d13a      	bne.n	d9f1e <__gethex+0xca>
   d9ea8:	9901      	ldr	r1, [sp, #4]
   d9eaa:	4652      	mov	r2, sl
   d9eac:	4638      	mov	r0, r7
   d9eae:	f7ff f88c 	bl	d8fca <strncmp>
   d9eb2:	4605      	mov	r5, r0
   d9eb4:	2800      	cmp	r0, #0
   d9eb6:	d168      	bne.n	d9f8a <__gethex+0x136>
   d9eb8:	f817 000a 	ldrb.w	r0, [r7, sl]
   d9ebc:	eb07 060a 	add.w	r6, r7, sl
   d9ec0:	f7ff ffb2 	bl	d9e28 <__hexdig_fun>
   d9ec4:	2800      	cmp	r0, #0
   d9ec6:	d062      	beq.n	d9f8e <__gethex+0x13a>
   d9ec8:	4633      	mov	r3, r6
   d9eca:	7818      	ldrb	r0, [r3, #0]
   d9ecc:	2830      	cmp	r0, #48	; 0x30
   d9ece:	461f      	mov	r7, r3
   d9ed0:	f103 0301 	add.w	r3, r3, #1
   d9ed4:	d0f9      	beq.n	d9eca <__gethex+0x76>
   d9ed6:	f7ff ffa7 	bl	d9e28 <__hexdig_fun>
   d9eda:	2301      	movs	r3, #1
   d9edc:	fab0 f480 	clz	r4, r0
   d9ee0:	0964      	lsrs	r4, r4, #5
   d9ee2:	4635      	mov	r5, r6
   d9ee4:	9300      	str	r3, [sp, #0]
   d9ee6:	463a      	mov	r2, r7
   d9ee8:	4616      	mov	r6, r2
   d9eea:	3201      	adds	r2, #1
   d9eec:	7830      	ldrb	r0, [r6, #0]
   d9eee:	f7ff ff9b 	bl	d9e28 <__hexdig_fun>
   d9ef2:	2800      	cmp	r0, #0
   d9ef4:	d1f8      	bne.n	d9ee8 <__gethex+0x94>
   d9ef6:	9901      	ldr	r1, [sp, #4]
   d9ef8:	4652      	mov	r2, sl
   d9efa:	4630      	mov	r0, r6
   d9efc:	f7ff f865 	bl	d8fca <strncmp>
   d9f00:	b980      	cbnz	r0, d9f24 <__gethex+0xd0>
   d9f02:	b94d      	cbnz	r5, d9f18 <__gethex+0xc4>
   d9f04:	eb06 050a 	add.w	r5, r6, sl
   d9f08:	462a      	mov	r2, r5
   d9f0a:	4616      	mov	r6, r2
   d9f0c:	3201      	adds	r2, #1
   d9f0e:	7830      	ldrb	r0, [r6, #0]
   d9f10:	f7ff ff8a 	bl	d9e28 <__hexdig_fun>
   d9f14:	2800      	cmp	r0, #0
   d9f16:	d1f8      	bne.n	d9f0a <__gethex+0xb6>
   d9f18:	1bad      	subs	r5, r5, r6
   d9f1a:	00ad      	lsls	r5, r5, #2
   d9f1c:	e004      	b.n	d9f28 <__gethex+0xd4>
   d9f1e:	2400      	movs	r4, #0
   d9f20:	4625      	mov	r5, r4
   d9f22:	e7e0      	b.n	d9ee6 <__gethex+0x92>
   d9f24:	2d00      	cmp	r5, #0
   d9f26:	d1f7      	bne.n	d9f18 <__gethex+0xc4>
   d9f28:	7833      	ldrb	r3, [r6, #0]
   d9f2a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d9f2e:	2b50      	cmp	r3, #80	; 0x50
   d9f30:	d13b      	bne.n	d9faa <__gethex+0x156>
   d9f32:	7873      	ldrb	r3, [r6, #1]
   d9f34:	2b2b      	cmp	r3, #43	; 0x2b
   d9f36:	d02c      	beq.n	d9f92 <__gethex+0x13e>
   d9f38:	2b2d      	cmp	r3, #45	; 0x2d
   d9f3a:	d02e      	beq.n	d9f9a <__gethex+0x146>
   d9f3c:	1c71      	adds	r1, r6, #1
   d9f3e:	f04f 0900 	mov.w	r9, #0
   d9f42:	7808      	ldrb	r0, [r1, #0]
   d9f44:	f7ff ff70 	bl	d9e28 <__hexdig_fun>
   d9f48:	1e43      	subs	r3, r0, #1
   d9f4a:	b2db      	uxtb	r3, r3
   d9f4c:	2b18      	cmp	r3, #24
   d9f4e:	d82c      	bhi.n	d9faa <__gethex+0x156>
   d9f50:	f1a0 0210 	sub.w	r2, r0, #16
   d9f54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d9f58:	f7ff ff66 	bl	d9e28 <__hexdig_fun>
   d9f5c:	1e43      	subs	r3, r0, #1
   d9f5e:	b2db      	uxtb	r3, r3
   d9f60:	2b18      	cmp	r3, #24
   d9f62:	d91d      	bls.n	d9fa0 <__gethex+0x14c>
   d9f64:	f1b9 0f00 	cmp.w	r9, #0
   d9f68:	d000      	beq.n	d9f6c <__gethex+0x118>
   d9f6a:	4252      	negs	r2, r2
   d9f6c:	4415      	add	r5, r2
   d9f6e:	f8cb 1000 	str.w	r1, [fp]
   d9f72:	b1e4      	cbz	r4, d9fae <__gethex+0x15a>
   d9f74:	9b00      	ldr	r3, [sp, #0]
   d9f76:	2b00      	cmp	r3, #0
   d9f78:	bf14      	ite	ne
   d9f7a:	2700      	movne	r7, #0
   d9f7c:	2706      	moveq	r7, #6
   d9f7e:	4638      	mov	r0, r7
   d9f80:	b009      	add	sp, #36	; 0x24
   d9f82:	ecbd 8b02 	vpop	{d8}
   d9f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9f8a:	463e      	mov	r6, r7
   d9f8c:	4625      	mov	r5, r4
   d9f8e:	2401      	movs	r4, #1
   d9f90:	e7ca      	b.n	d9f28 <__gethex+0xd4>
   d9f92:	f04f 0900 	mov.w	r9, #0
   d9f96:	1cb1      	adds	r1, r6, #2
   d9f98:	e7d3      	b.n	d9f42 <__gethex+0xee>
   d9f9a:	f04f 0901 	mov.w	r9, #1
   d9f9e:	e7fa      	b.n	d9f96 <__gethex+0x142>
   d9fa0:	230a      	movs	r3, #10
   d9fa2:	fb03 0202 	mla	r2, r3, r2, r0
   d9fa6:	3a10      	subs	r2, #16
   d9fa8:	e7d4      	b.n	d9f54 <__gethex+0x100>
   d9faa:	4631      	mov	r1, r6
   d9fac:	e7df      	b.n	d9f6e <__gethex+0x11a>
   d9fae:	1bf3      	subs	r3, r6, r7
   d9fb0:	3b01      	subs	r3, #1
   d9fb2:	4621      	mov	r1, r4
   d9fb4:	2b07      	cmp	r3, #7
   d9fb6:	dc52      	bgt.n	da05e <__gethex+0x20a>
   d9fb8:	ee18 0a10 	vmov	r0, s16
   d9fbc:	f000 fa52 	bl	da464 <_Balloc>
   d9fc0:	f04f 0b00 	mov.w	fp, #0
   d9fc4:	f100 0914 	add.w	r9, r0, #20
   d9fc8:	f1ca 0301 	rsb	r3, sl, #1
   d9fcc:	4604      	mov	r4, r0
   d9fce:	f8cd 9008 	str.w	r9, [sp, #8]
   d9fd2:	f8cd b000 	str.w	fp, [sp]
   d9fd6:	9306      	str	r3, [sp, #24]
   d9fd8:	42b7      	cmp	r7, r6
   d9fda:	d343      	bcc.n	da064 <__gethex+0x210>
   d9fdc:	9802      	ldr	r0, [sp, #8]
   d9fde:	9b00      	ldr	r3, [sp, #0]
   d9fe0:	f840 3b04 	str.w	r3, [r0], #4
   d9fe4:	eba0 0009 	sub.w	r0, r0, r9
   d9fe8:	1080      	asrs	r0, r0, #2
   d9fea:	0146      	lsls	r6, r0, #5
   d9fec:	6120      	str	r0, [r4, #16]
   d9fee:	4618      	mov	r0, r3
   d9ff0:	f000 faff 	bl	da5f2 <__hi0bits>
   d9ff4:	1a30      	subs	r0, r6, r0
   d9ff6:	f8d8 6000 	ldr.w	r6, [r8]
   d9ffa:	42b0      	cmp	r0, r6
   d9ffc:	dd66      	ble.n	da0cc <__gethex+0x278>
   d9ffe:	1b87      	subs	r7, r0, r6
   da000:	4639      	mov	r1, r7
   da002:	4620      	mov	r0, r4
   da004:	f000 fe4c 	bl	daca0 <__any_on>
   da008:	4682      	mov	sl, r0
   da00a:	b1a8      	cbz	r0, da038 <__gethex+0x1e4>
   da00c:	1e7b      	subs	r3, r7, #1
   da00e:	1159      	asrs	r1, r3, #5
   da010:	f003 021f 	and.w	r2, r3, #31
   da014:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   da018:	f04f 0a01 	mov.w	sl, #1
   da01c:	fa0a f202 	lsl.w	r2, sl, r2
   da020:	420a      	tst	r2, r1
   da022:	d009      	beq.n	da038 <__gethex+0x1e4>
   da024:	4553      	cmp	r3, sl
   da026:	dd05      	ble.n	da034 <__gethex+0x1e0>
   da028:	1eb9      	subs	r1, r7, #2
   da02a:	4620      	mov	r0, r4
   da02c:	f000 fe38 	bl	daca0 <__any_on>
   da030:	2800      	cmp	r0, #0
   da032:	d148      	bne.n	da0c6 <__gethex+0x272>
   da034:	f04f 0a02 	mov.w	sl, #2
   da038:	4639      	mov	r1, r7
   da03a:	4620      	mov	r0, r4
   da03c:	f7ff fea2 	bl	d9d84 <rshift>
   da040:	443d      	add	r5, r7
   da042:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da046:	42ab      	cmp	r3, r5
   da048:	da4f      	bge.n	da0ea <__gethex+0x296>
   da04a:	ee18 0a10 	vmov	r0, s16
   da04e:	4621      	mov	r1, r4
   da050:	f000 fa3c 	bl	da4cc <_Bfree>
   da054:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da056:	2300      	movs	r3, #0
   da058:	6013      	str	r3, [r2, #0]
   da05a:	27a3      	movs	r7, #163	; 0xa3
   da05c:	e78f      	b.n	d9f7e <__gethex+0x12a>
   da05e:	3101      	adds	r1, #1
   da060:	105b      	asrs	r3, r3, #1
   da062:	e7a7      	b.n	d9fb4 <__gethex+0x160>
   da064:	1e73      	subs	r3, r6, #1
   da066:	9a05      	ldr	r2, [sp, #20]
   da068:	9303      	str	r3, [sp, #12]
   da06a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   da06e:	4293      	cmp	r3, r2
   da070:	d019      	beq.n	da0a6 <__gethex+0x252>
   da072:	f1bb 0f20 	cmp.w	fp, #32
   da076:	d107      	bne.n	da088 <__gethex+0x234>
   da078:	9b02      	ldr	r3, [sp, #8]
   da07a:	9a00      	ldr	r2, [sp, #0]
   da07c:	f843 2b04 	str.w	r2, [r3], #4
   da080:	9302      	str	r3, [sp, #8]
   da082:	2300      	movs	r3, #0
   da084:	9300      	str	r3, [sp, #0]
   da086:	469b      	mov	fp, r3
   da088:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   da08c:	f7ff fecc 	bl	d9e28 <__hexdig_fun>
   da090:	9b00      	ldr	r3, [sp, #0]
   da092:	f000 000f 	and.w	r0, r0, #15
   da096:	fa00 f00b 	lsl.w	r0, r0, fp
   da09a:	4303      	orrs	r3, r0
   da09c:	9300      	str	r3, [sp, #0]
   da09e:	f10b 0b04 	add.w	fp, fp, #4
   da0a2:	9b03      	ldr	r3, [sp, #12]
   da0a4:	e00d      	b.n	da0c2 <__gethex+0x26e>
   da0a6:	9b03      	ldr	r3, [sp, #12]
   da0a8:	9a06      	ldr	r2, [sp, #24]
   da0aa:	4413      	add	r3, r2
   da0ac:	42bb      	cmp	r3, r7
   da0ae:	d3e0      	bcc.n	da072 <__gethex+0x21e>
   da0b0:	4618      	mov	r0, r3
   da0b2:	9901      	ldr	r1, [sp, #4]
   da0b4:	9307      	str	r3, [sp, #28]
   da0b6:	4652      	mov	r2, sl
   da0b8:	f7fe ff87 	bl	d8fca <strncmp>
   da0bc:	9b07      	ldr	r3, [sp, #28]
   da0be:	2800      	cmp	r0, #0
   da0c0:	d1d7      	bne.n	da072 <__gethex+0x21e>
   da0c2:	461e      	mov	r6, r3
   da0c4:	e788      	b.n	d9fd8 <__gethex+0x184>
   da0c6:	f04f 0a03 	mov.w	sl, #3
   da0ca:	e7b5      	b.n	da038 <__gethex+0x1e4>
   da0cc:	da0a      	bge.n	da0e4 <__gethex+0x290>
   da0ce:	1a37      	subs	r7, r6, r0
   da0d0:	4621      	mov	r1, r4
   da0d2:	ee18 0a10 	vmov	r0, s16
   da0d6:	463a      	mov	r2, r7
   da0d8:	f000 fbce 	bl	da878 <__lshift>
   da0dc:	1bed      	subs	r5, r5, r7
   da0de:	4604      	mov	r4, r0
   da0e0:	f100 0914 	add.w	r9, r0, #20
   da0e4:	f04f 0a00 	mov.w	sl, #0
   da0e8:	e7ab      	b.n	da042 <__gethex+0x1ee>
   da0ea:	f8d8 0004 	ldr.w	r0, [r8, #4]
   da0ee:	42a8      	cmp	r0, r5
   da0f0:	dd6d      	ble.n	da1ce <__gethex+0x37a>
   da0f2:	1b45      	subs	r5, r0, r5
   da0f4:	42ae      	cmp	r6, r5
   da0f6:	dc31      	bgt.n	da15c <__gethex+0x308>
   da0f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
   da0fc:	2b02      	cmp	r3, #2
   da0fe:	d023      	beq.n	da148 <__gethex+0x2f4>
   da100:	2b03      	cmp	r3, #3
   da102:	d025      	beq.n	da150 <__gethex+0x2fc>
   da104:	2b01      	cmp	r3, #1
   da106:	d115      	bne.n	da134 <__gethex+0x2e0>
   da108:	42ae      	cmp	r6, r5
   da10a:	d113      	bne.n	da134 <__gethex+0x2e0>
   da10c:	2e01      	cmp	r6, #1
   da10e:	d10b      	bne.n	da128 <__gethex+0x2d4>
   da110:	9a04      	ldr	r2, [sp, #16]
   da112:	f8d8 3004 	ldr.w	r3, [r8, #4]
   da116:	6013      	str	r3, [r2, #0]
   da118:	2301      	movs	r3, #1
   da11a:	6123      	str	r3, [r4, #16]
   da11c:	f8c9 3000 	str.w	r3, [r9]
   da120:	9b14      	ldr	r3, [sp, #80]	; 0x50
   da122:	2762      	movs	r7, #98	; 0x62
   da124:	601c      	str	r4, [r3, #0]
   da126:	e72a      	b.n	d9f7e <__gethex+0x12a>
   da128:	1e71      	subs	r1, r6, #1
   da12a:	4620      	mov	r0, r4
   da12c:	f000 fdb8 	bl	daca0 <__any_on>
   da130:	2800      	cmp	r0, #0
   da132:	d1ed      	bne.n	da110 <__gethex+0x2bc>
   da134:	ee18 0a10 	vmov	r0, s16
   da138:	4621      	mov	r1, r4
   da13a:	f000 f9c7 	bl	da4cc <_Bfree>
   da13e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da140:	2300      	movs	r3, #0
   da142:	6013      	str	r3, [r2, #0]
   da144:	2750      	movs	r7, #80	; 0x50
   da146:	e71a      	b.n	d9f7e <__gethex+0x12a>
   da148:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da14a:	2b00      	cmp	r3, #0
   da14c:	d1f2      	bne.n	da134 <__gethex+0x2e0>
   da14e:	e7df      	b.n	da110 <__gethex+0x2bc>
   da150:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da152:	2b00      	cmp	r3, #0
   da154:	d1dc      	bne.n	da110 <__gethex+0x2bc>
   da156:	e7ed      	b.n	da134 <__gethex+0x2e0>
   da158:	000db894 	.word	0x000db894
   da15c:	1e6f      	subs	r7, r5, #1
   da15e:	f1ba 0f00 	cmp.w	sl, #0
   da162:	d131      	bne.n	da1c8 <__gethex+0x374>
   da164:	b127      	cbz	r7, da170 <__gethex+0x31c>
   da166:	4639      	mov	r1, r7
   da168:	4620      	mov	r0, r4
   da16a:	f000 fd99 	bl	daca0 <__any_on>
   da16e:	4682      	mov	sl, r0
   da170:	117b      	asrs	r3, r7, #5
   da172:	2101      	movs	r1, #1
   da174:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   da178:	f007 071f 	and.w	r7, r7, #31
   da17c:	fa01 f707 	lsl.w	r7, r1, r7
   da180:	421f      	tst	r7, r3
   da182:	4629      	mov	r1, r5
   da184:	4620      	mov	r0, r4
   da186:	bf18      	it	ne
   da188:	f04a 0a02 	orrne.w	sl, sl, #2
   da18c:	1b76      	subs	r6, r6, r5
   da18e:	f7ff fdf9 	bl	d9d84 <rshift>
   da192:	f8d8 5004 	ldr.w	r5, [r8, #4]
   da196:	2702      	movs	r7, #2
   da198:	f1ba 0f00 	cmp.w	sl, #0
   da19c:	d048      	beq.n	da230 <__gethex+0x3dc>
   da19e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   da1a2:	2b02      	cmp	r3, #2
   da1a4:	d015      	beq.n	da1d2 <__gethex+0x37e>
   da1a6:	2b03      	cmp	r3, #3
   da1a8:	d017      	beq.n	da1da <__gethex+0x386>
   da1aa:	2b01      	cmp	r3, #1
   da1ac:	d109      	bne.n	da1c2 <__gethex+0x36e>
   da1ae:	f01a 0f02 	tst.w	sl, #2
   da1b2:	d006      	beq.n	da1c2 <__gethex+0x36e>
   da1b4:	f8d9 0000 	ldr.w	r0, [r9]
   da1b8:	ea4a 0a00 	orr.w	sl, sl, r0
   da1bc:	f01a 0f01 	tst.w	sl, #1
   da1c0:	d10e      	bne.n	da1e0 <__gethex+0x38c>
   da1c2:	f047 0710 	orr.w	r7, r7, #16
   da1c6:	e033      	b.n	da230 <__gethex+0x3dc>
   da1c8:	f04f 0a01 	mov.w	sl, #1
   da1cc:	e7d0      	b.n	da170 <__gethex+0x31c>
   da1ce:	2701      	movs	r7, #1
   da1d0:	e7e2      	b.n	da198 <__gethex+0x344>
   da1d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da1d4:	f1c3 0301 	rsb	r3, r3, #1
   da1d8:	9315      	str	r3, [sp, #84]	; 0x54
   da1da:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da1dc:	2b00      	cmp	r3, #0
   da1de:	d0f0      	beq.n	da1c2 <__gethex+0x36e>
   da1e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   da1e4:	f104 0314 	add.w	r3, r4, #20
   da1e8:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   da1ec:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   da1f0:	f04f 0c00 	mov.w	ip, #0
   da1f4:	4618      	mov	r0, r3
   da1f6:	f853 2b04 	ldr.w	r2, [r3], #4
   da1fa:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   da1fe:	d01c      	beq.n	da23a <__gethex+0x3e6>
   da200:	3201      	adds	r2, #1
   da202:	6002      	str	r2, [r0, #0]
   da204:	2f02      	cmp	r7, #2
   da206:	f104 0314 	add.w	r3, r4, #20
   da20a:	d13a      	bne.n	da282 <__gethex+0x42e>
   da20c:	f8d8 2000 	ldr.w	r2, [r8]
   da210:	3a01      	subs	r2, #1
   da212:	42b2      	cmp	r2, r6
   da214:	d10a      	bne.n	da22c <__gethex+0x3d8>
   da216:	1171      	asrs	r1, r6, #5
   da218:	2201      	movs	r2, #1
   da21a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   da21e:	f006 061f 	and.w	r6, r6, #31
   da222:	fa02 f606 	lsl.w	r6, r2, r6
   da226:	421e      	tst	r6, r3
   da228:	bf18      	it	ne
   da22a:	4617      	movne	r7, r2
   da22c:	f047 0720 	orr.w	r7, r7, #32
   da230:	9b14      	ldr	r3, [sp, #80]	; 0x50
   da232:	601c      	str	r4, [r3, #0]
   da234:	9b04      	ldr	r3, [sp, #16]
   da236:	601d      	str	r5, [r3, #0]
   da238:	e6a1      	b.n	d9f7e <__gethex+0x12a>
   da23a:	4299      	cmp	r1, r3
   da23c:	f843 cc04 	str.w	ip, [r3, #-4]
   da240:	d8d8      	bhi.n	da1f4 <__gethex+0x3a0>
   da242:	68a3      	ldr	r3, [r4, #8]
   da244:	4599      	cmp	r9, r3
   da246:	db14      	blt.n	da272 <__gethex+0x41e>
   da248:	6861      	ldr	r1, [r4, #4]
   da24a:	ee18 0a10 	vmov	r0, s16
   da24e:	3101      	adds	r1, #1
   da250:	f000 f908 	bl	da464 <_Balloc>
   da254:	6922      	ldr	r2, [r4, #16]
   da256:	3202      	adds	r2, #2
   da258:	f104 010c 	add.w	r1, r4, #12
   da25c:	4682      	mov	sl, r0
   da25e:	0092      	lsls	r2, r2, #2
   da260:	300c      	adds	r0, #12
   da262:	f7fe fe27 	bl	d8eb4 <memcpy>
   da266:	4621      	mov	r1, r4
   da268:	ee18 0a10 	vmov	r0, s16
   da26c:	f000 f92e 	bl	da4cc <_Bfree>
   da270:	4654      	mov	r4, sl
   da272:	6923      	ldr	r3, [r4, #16]
   da274:	1c5a      	adds	r2, r3, #1
   da276:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   da27a:	6122      	str	r2, [r4, #16]
   da27c:	2201      	movs	r2, #1
   da27e:	615a      	str	r2, [r3, #20]
   da280:	e7c0      	b.n	da204 <__gethex+0x3b0>
   da282:	6922      	ldr	r2, [r4, #16]
   da284:	454a      	cmp	r2, r9
   da286:	dd0b      	ble.n	da2a0 <__gethex+0x44c>
   da288:	2101      	movs	r1, #1
   da28a:	4620      	mov	r0, r4
   da28c:	f7ff fd7a 	bl	d9d84 <rshift>
   da290:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da294:	3501      	adds	r5, #1
   da296:	42ab      	cmp	r3, r5
   da298:	f6ff aed7 	blt.w	da04a <__gethex+0x1f6>
   da29c:	2701      	movs	r7, #1
   da29e:	e7c5      	b.n	da22c <__gethex+0x3d8>
   da2a0:	f016 061f 	ands.w	r6, r6, #31
   da2a4:	d0fa      	beq.n	da29c <__gethex+0x448>
   da2a6:	449b      	add	fp, r3
   da2a8:	f1c6 0620 	rsb	r6, r6, #32
   da2ac:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   da2b0:	f000 f99f 	bl	da5f2 <__hi0bits>
   da2b4:	42b0      	cmp	r0, r6
   da2b6:	dbe7      	blt.n	da288 <__gethex+0x434>
   da2b8:	e7f0      	b.n	da29c <__gethex+0x448>
   da2ba:	bf00      	nop

000da2bc <L_shift>:
   da2bc:	f1c2 0208 	rsb	r2, r2, #8
   da2c0:	0092      	lsls	r2, r2, #2
   da2c2:	b570      	push	{r4, r5, r6, lr}
   da2c4:	f1c2 0620 	rsb	r6, r2, #32
   da2c8:	6843      	ldr	r3, [r0, #4]
   da2ca:	6804      	ldr	r4, [r0, #0]
   da2cc:	fa03 f506 	lsl.w	r5, r3, r6
   da2d0:	432c      	orrs	r4, r5
   da2d2:	40d3      	lsrs	r3, r2
   da2d4:	6004      	str	r4, [r0, #0]
   da2d6:	f840 3f04 	str.w	r3, [r0, #4]!
   da2da:	4288      	cmp	r0, r1
   da2dc:	d3f4      	bcc.n	da2c8 <L_shift+0xc>
   da2de:	bd70      	pop	{r4, r5, r6, pc}

000da2e0 <__match>:
   da2e0:	b530      	push	{r4, r5, lr}
   da2e2:	6803      	ldr	r3, [r0, #0]
   da2e4:	3301      	adds	r3, #1
   da2e6:	f811 4b01 	ldrb.w	r4, [r1], #1
   da2ea:	b914      	cbnz	r4, da2f2 <__match+0x12>
   da2ec:	6003      	str	r3, [r0, #0]
   da2ee:	2001      	movs	r0, #1
   da2f0:	bd30      	pop	{r4, r5, pc}
   da2f2:	f813 2b01 	ldrb.w	r2, [r3], #1
   da2f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   da2fa:	2d19      	cmp	r5, #25
   da2fc:	bf98      	it	ls
   da2fe:	3220      	addls	r2, #32
   da300:	42a2      	cmp	r2, r4
   da302:	d0f0      	beq.n	da2e6 <__match+0x6>
   da304:	2000      	movs	r0, #0
   da306:	e7f3      	b.n	da2f0 <__match+0x10>

000da308 <__hexnan>:
   da308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da30c:	680b      	ldr	r3, [r1, #0]
   da30e:	6801      	ldr	r1, [r0, #0]
   da310:	115e      	asrs	r6, r3, #5
   da312:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   da316:	f013 031f 	ands.w	r3, r3, #31
   da31a:	b087      	sub	sp, #28
   da31c:	bf18      	it	ne
   da31e:	3604      	addne	r6, #4
   da320:	2500      	movs	r5, #0
   da322:	1f37      	subs	r7, r6, #4
   da324:	4682      	mov	sl, r0
   da326:	4690      	mov	r8, r2
   da328:	9301      	str	r3, [sp, #4]
   da32a:	f846 5c04 	str.w	r5, [r6, #-4]
   da32e:	46b9      	mov	r9, r7
   da330:	463c      	mov	r4, r7
   da332:	9502      	str	r5, [sp, #8]
   da334:	46ab      	mov	fp, r5
   da336:	784a      	ldrb	r2, [r1, #1]
   da338:	1c4b      	adds	r3, r1, #1
   da33a:	9303      	str	r3, [sp, #12]
   da33c:	b342      	cbz	r2, da390 <__hexnan+0x88>
   da33e:	4610      	mov	r0, r2
   da340:	9105      	str	r1, [sp, #20]
   da342:	9204      	str	r2, [sp, #16]
   da344:	f7ff fd70 	bl	d9e28 <__hexdig_fun>
   da348:	2800      	cmp	r0, #0
   da34a:	d14f      	bne.n	da3ec <__hexnan+0xe4>
   da34c:	9a04      	ldr	r2, [sp, #16]
   da34e:	9905      	ldr	r1, [sp, #20]
   da350:	2a20      	cmp	r2, #32
   da352:	d818      	bhi.n	da386 <__hexnan+0x7e>
   da354:	9b02      	ldr	r3, [sp, #8]
   da356:	459b      	cmp	fp, r3
   da358:	dd13      	ble.n	da382 <__hexnan+0x7a>
   da35a:	454c      	cmp	r4, r9
   da35c:	d206      	bcs.n	da36c <__hexnan+0x64>
   da35e:	2d07      	cmp	r5, #7
   da360:	dc04      	bgt.n	da36c <__hexnan+0x64>
   da362:	462a      	mov	r2, r5
   da364:	4649      	mov	r1, r9
   da366:	4620      	mov	r0, r4
   da368:	f7ff ffa8 	bl	da2bc <L_shift>
   da36c:	4544      	cmp	r4, r8
   da36e:	d950      	bls.n	da412 <__hexnan+0x10a>
   da370:	2300      	movs	r3, #0
   da372:	f1a4 0904 	sub.w	r9, r4, #4
   da376:	f844 3c04 	str.w	r3, [r4, #-4]
   da37a:	f8cd b008 	str.w	fp, [sp, #8]
   da37e:	464c      	mov	r4, r9
   da380:	461d      	mov	r5, r3
   da382:	9903      	ldr	r1, [sp, #12]
   da384:	e7d7      	b.n	da336 <__hexnan+0x2e>
   da386:	2a29      	cmp	r2, #41	; 0x29
   da388:	d156      	bne.n	da438 <__hexnan+0x130>
   da38a:	3102      	adds	r1, #2
   da38c:	f8ca 1000 	str.w	r1, [sl]
   da390:	f1bb 0f00 	cmp.w	fp, #0
   da394:	d050      	beq.n	da438 <__hexnan+0x130>
   da396:	454c      	cmp	r4, r9
   da398:	d206      	bcs.n	da3a8 <__hexnan+0xa0>
   da39a:	2d07      	cmp	r5, #7
   da39c:	dc04      	bgt.n	da3a8 <__hexnan+0xa0>
   da39e:	462a      	mov	r2, r5
   da3a0:	4649      	mov	r1, r9
   da3a2:	4620      	mov	r0, r4
   da3a4:	f7ff ff8a 	bl	da2bc <L_shift>
   da3a8:	4544      	cmp	r4, r8
   da3aa:	d934      	bls.n	da416 <__hexnan+0x10e>
   da3ac:	f1a8 0204 	sub.w	r2, r8, #4
   da3b0:	4623      	mov	r3, r4
   da3b2:	f853 1b04 	ldr.w	r1, [r3], #4
   da3b6:	f842 1f04 	str.w	r1, [r2, #4]!
   da3ba:	429f      	cmp	r7, r3
   da3bc:	d2f9      	bcs.n	da3b2 <__hexnan+0xaa>
   da3be:	1b3b      	subs	r3, r7, r4
   da3c0:	f023 0303 	bic.w	r3, r3, #3
   da3c4:	3304      	adds	r3, #4
   da3c6:	3401      	adds	r4, #1
   da3c8:	3e03      	subs	r6, #3
   da3ca:	42b4      	cmp	r4, r6
   da3cc:	bf88      	it	hi
   da3ce:	2304      	movhi	r3, #4
   da3d0:	4443      	add	r3, r8
   da3d2:	2200      	movs	r2, #0
   da3d4:	f843 2b04 	str.w	r2, [r3], #4
   da3d8:	429f      	cmp	r7, r3
   da3da:	d2fb      	bcs.n	da3d4 <__hexnan+0xcc>
   da3dc:	683b      	ldr	r3, [r7, #0]
   da3de:	b91b      	cbnz	r3, da3e8 <__hexnan+0xe0>
   da3e0:	4547      	cmp	r7, r8
   da3e2:	d127      	bne.n	da434 <__hexnan+0x12c>
   da3e4:	2301      	movs	r3, #1
   da3e6:	603b      	str	r3, [r7, #0]
   da3e8:	2005      	movs	r0, #5
   da3ea:	e026      	b.n	da43a <__hexnan+0x132>
   da3ec:	3501      	adds	r5, #1
   da3ee:	2d08      	cmp	r5, #8
   da3f0:	f10b 0b01 	add.w	fp, fp, #1
   da3f4:	dd06      	ble.n	da404 <__hexnan+0xfc>
   da3f6:	4544      	cmp	r4, r8
   da3f8:	d9c3      	bls.n	da382 <__hexnan+0x7a>
   da3fa:	2300      	movs	r3, #0
   da3fc:	f844 3c04 	str.w	r3, [r4, #-4]
   da400:	2501      	movs	r5, #1
   da402:	3c04      	subs	r4, #4
   da404:	6822      	ldr	r2, [r4, #0]
   da406:	f000 000f 	and.w	r0, r0, #15
   da40a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   da40e:	6022      	str	r2, [r4, #0]
   da410:	e7b7      	b.n	da382 <__hexnan+0x7a>
   da412:	2508      	movs	r5, #8
   da414:	e7b5      	b.n	da382 <__hexnan+0x7a>
   da416:	9b01      	ldr	r3, [sp, #4]
   da418:	2b00      	cmp	r3, #0
   da41a:	d0df      	beq.n	da3dc <__hexnan+0xd4>
   da41c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da420:	f1c3 0320 	rsb	r3, r3, #32
   da424:	fa22 f303 	lsr.w	r3, r2, r3
   da428:	f856 2c04 	ldr.w	r2, [r6, #-4]
   da42c:	401a      	ands	r2, r3
   da42e:	f846 2c04 	str.w	r2, [r6, #-4]
   da432:	e7d3      	b.n	da3dc <__hexnan+0xd4>
   da434:	3f04      	subs	r7, #4
   da436:	e7d1      	b.n	da3dc <__hexnan+0xd4>
   da438:	2004      	movs	r0, #4
   da43a:	b007      	add	sp, #28
   da43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000da440 <__ascii_mbtowc>:
   da440:	b082      	sub	sp, #8
   da442:	b901      	cbnz	r1, da446 <__ascii_mbtowc+0x6>
   da444:	a901      	add	r1, sp, #4
   da446:	b142      	cbz	r2, da45a <__ascii_mbtowc+0x1a>
   da448:	b14b      	cbz	r3, da45e <__ascii_mbtowc+0x1e>
   da44a:	7813      	ldrb	r3, [r2, #0]
   da44c:	600b      	str	r3, [r1, #0]
   da44e:	7812      	ldrb	r2, [r2, #0]
   da450:	1e10      	subs	r0, r2, #0
   da452:	bf18      	it	ne
   da454:	2001      	movne	r0, #1
   da456:	b002      	add	sp, #8
   da458:	4770      	bx	lr
   da45a:	4610      	mov	r0, r2
   da45c:	e7fb      	b.n	da456 <__ascii_mbtowc+0x16>
   da45e:	f06f 0001 	mvn.w	r0, #1
   da462:	e7f8      	b.n	da456 <__ascii_mbtowc+0x16>

000da464 <_Balloc>:
   da464:	b570      	push	{r4, r5, r6, lr}
   da466:	6a46      	ldr	r6, [r0, #36]	; 0x24
   da468:	4604      	mov	r4, r0
   da46a:	460d      	mov	r5, r1
   da46c:	b93e      	cbnz	r6, da47e <_Balloc+0x1a>
   da46e:	2010      	movs	r0, #16
   da470:	f7fc fb04 	bl	d6a7c <malloc>
   da474:	e9c0 6601 	strd	r6, r6, [r0, #4]
   da478:	6260      	str	r0, [r4, #36]	; 0x24
   da47a:	6006      	str	r6, [r0, #0]
   da47c:	60c6      	str	r6, [r0, #12]
   da47e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   da480:	68f3      	ldr	r3, [r6, #12]
   da482:	b183      	cbz	r3, da4a6 <_Balloc+0x42>
   da484:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da486:	68db      	ldr	r3, [r3, #12]
   da488:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   da48c:	b9b8      	cbnz	r0, da4be <_Balloc+0x5a>
   da48e:	2101      	movs	r1, #1
   da490:	fa01 f605 	lsl.w	r6, r1, r5
   da494:	1d72      	adds	r2, r6, #5
   da496:	0092      	lsls	r2, r2, #2
   da498:	4620      	mov	r0, r4
   da49a:	f000 fc22 	bl	dace2 <_calloc_r>
   da49e:	b160      	cbz	r0, da4ba <_Balloc+0x56>
   da4a0:	e9c0 5601 	strd	r5, r6, [r0, #4]
   da4a4:	e00e      	b.n	da4c4 <_Balloc+0x60>
   da4a6:	2221      	movs	r2, #33	; 0x21
   da4a8:	2104      	movs	r1, #4
   da4aa:	4620      	mov	r0, r4
   da4ac:	f000 fc19 	bl	dace2 <_calloc_r>
   da4b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da4b2:	60f0      	str	r0, [r6, #12]
   da4b4:	68db      	ldr	r3, [r3, #12]
   da4b6:	2b00      	cmp	r3, #0
   da4b8:	d1e4      	bne.n	da484 <_Balloc+0x20>
   da4ba:	2000      	movs	r0, #0
   da4bc:	bd70      	pop	{r4, r5, r6, pc}
   da4be:	6802      	ldr	r2, [r0, #0]
   da4c0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   da4c4:	2300      	movs	r3, #0
   da4c6:	e9c0 3303 	strd	r3, r3, [r0, #12]
   da4ca:	e7f7      	b.n	da4bc <_Balloc+0x58>

000da4cc <_Bfree>:
   da4cc:	b570      	push	{r4, r5, r6, lr}
   da4ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
   da4d0:	4605      	mov	r5, r0
   da4d2:	460c      	mov	r4, r1
   da4d4:	b93e      	cbnz	r6, da4e6 <_Bfree+0x1a>
   da4d6:	2010      	movs	r0, #16
   da4d8:	f7fc fad0 	bl	d6a7c <malloc>
   da4dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   da4e0:	6268      	str	r0, [r5, #36]	; 0x24
   da4e2:	6006      	str	r6, [r0, #0]
   da4e4:	60c6      	str	r6, [r0, #12]
   da4e6:	b13c      	cbz	r4, da4f8 <_Bfree+0x2c>
   da4e8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   da4ea:	6862      	ldr	r2, [r4, #4]
   da4ec:	68db      	ldr	r3, [r3, #12]
   da4ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   da4f2:	6021      	str	r1, [r4, #0]
   da4f4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   da4f8:	bd70      	pop	{r4, r5, r6, pc}

000da4fa <__multadd>:
   da4fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da4fe:	690e      	ldr	r6, [r1, #16]
   da500:	4607      	mov	r7, r0
   da502:	4698      	mov	r8, r3
   da504:	460c      	mov	r4, r1
   da506:	f101 0014 	add.w	r0, r1, #20
   da50a:	2300      	movs	r3, #0
   da50c:	6805      	ldr	r5, [r0, #0]
   da50e:	b2a9      	uxth	r1, r5
   da510:	fb02 8101 	mla	r1, r2, r1, r8
   da514:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   da518:	0c2d      	lsrs	r5, r5, #16
   da51a:	fb02 c505 	mla	r5, r2, r5, ip
   da51e:	b289      	uxth	r1, r1
   da520:	3301      	adds	r3, #1
   da522:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   da526:	429e      	cmp	r6, r3
   da528:	f840 1b04 	str.w	r1, [r0], #4
   da52c:	ea4f 4815 	mov.w	r8, r5, lsr #16
   da530:	dcec      	bgt.n	da50c <__multadd+0x12>
   da532:	f1b8 0f00 	cmp.w	r8, #0
   da536:	d01b      	beq.n	da570 <__multadd+0x76>
   da538:	68a3      	ldr	r3, [r4, #8]
   da53a:	42b3      	cmp	r3, r6
   da53c:	dc12      	bgt.n	da564 <__multadd+0x6a>
   da53e:	6861      	ldr	r1, [r4, #4]
   da540:	4638      	mov	r0, r7
   da542:	3101      	adds	r1, #1
   da544:	f7ff ff8e 	bl	da464 <_Balloc>
   da548:	6922      	ldr	r2, [r4, #16]
   da54a:	3202      	adds	r2, #2
   da54c:	f104 010c 	add.w	r1, r4, #12
   da550:	4605      	mov	r5, r0
   da552:	0092      	lsls	r2, r2, #2
   da554:	300c      	adds	r0, #12
   da556:	f7fe fcad 	bl	d8eb4 <memcpy>
   da55a:	4621      	mov	r1, r4
   da55c:	4638      	mov	r0, r7
   da55e:	f7ff ffb5 	bl	da4cc <_Bfree>
   da562:	462c      	mov	r4, r5
   da564:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   da568:	3601      	adds	r6, #1
   da56a:	f8c3 8014 	str.w	r8, [r3, #20]
   da56e:	6126      	str	r6, [r4, #16]
   da570:	4620      	mov	r0, r4
   da572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da576 <__s2b>:
   da576:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da57a:	460c      	mov	r4, r1
   da57c:	4615      	mov	r5, r2
   da57e:	461f      	mov	r7, r3
   da580:	2209      	movs	r2, #9
   da582:	3308      	adds	r3, #8
   da584:	4606      	mov	r6, r0
   da586:	fb93 f3f2 	sdiv	r3, r3, r2
   da58a:	2100      	movs	r1, #0
   da58c:	2201      	movs	r2, #1
   da58e:	429a      	cmp	r2, r3
   da590:	db20      	blt.n	da5d4 <__s2b+0x5e>
   da592:	4630      	mov	r0, r6
   da594:	f7ff ff66 	bl	da464 <_Balloc>
   da598:	9b08      	ldr	r3, [sp, #32]
   da59a:	6143      	str	r3, [r0, #20]
   da59c:	2d09      	cmp	r5, #9
   da59e:	f04f 0301 	mov.w	r3, #1
   da5a2:	6103      	str	r3, [r0, #16]
   da5a4:	dd19      	ble.n	da5da <__s2b+0x64>
   da5a6:	f104 0909 	add.w	r9, r4, #9
   da5aa:	46c8      	mov	r8, r9
   da5ac:	442c      	add	r4, r5
   da5ae:	f818 3b01 	ldrb.w	r3, [r8], #1
   da5b2:	4601      	mov	r1, r0
   da5b4:	3b30      	subs	r3, #48	; 0x30
   da5b6:	220a      	movs	r2, #10
   da5b8:	4630      	mov	r0, r6
   da5ba:	f7ff ff9e 	bl	da4fa <__multadd>
   da5be:	45a0      	cmp	r8, r4
   da5c0:	d1f5      	bne.n	da5ae <__s2b+0x38>
   da5c2:	f1a5 0408 	sub.w	r4, r5, #8
   da5c6:	444c      	add	r4, r9
   da5c8:	1b2d      	subs	r5, r5, r4
   da5ca:	1963      	adds	r3, r4, r5
   da5cc:	42bb      	cmp	r3, r7
   da5ce:	db07      	blt.n	da5e0 <__s2b+0x6a>
   da5d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da5d4:	0052      	lsls	r2, r2, #1
   da5d6:	3101      	adds	r1, #1
   da5d8:	e7d9      	b.n	da58e <__s2b+0x18>
   da5da:	340a      	adds	r4, #10
   da5dc:	2509      	movs	r5, #9
   da5de:	e7f3      	b.n	da5c8 <__s2b+0x52>
   da5e0:	f814 3b01 	ldrb.w	r3, [r4], #1
   da5e4:	4601      	mov	r1, r0
   da5e6:	3b30      	subs	r3, #48	; 0x30
   da5e8:	220a      	movs	r2, #10
   da5ea:	4630      	mov	r0, r6
   da5ec:	f7ff ff85 	bl	da4fa <__multadd>
   da5f0:	e7eb      	b.n	da5ca <__s2b+0x54>

000da5f2 <__hi0bits>:
   da5f2:	0c03      	lsrs	r3, r0, #16
   da5f4:	041b      	lsls	r3, r3, #16
   da5f6:	b9d3      	cbnz	r3, da62e <__hi0bits+0x3c>
   da5f8:	0400      	lsls	r0, r0, #16
   da5fa:	2310      	movs	r3, #16
   da5fc:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   da600:	bf04      	itt	eq
   da602:	0200      	lsleq	r0, r0, #8
   da604:	3308      	addeq	r3, #8
   da606:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   da60a:	bf04      	itt	eq
   da60c:	0100      	lsleq	r0, r0, #4
   da60e:	3304      	addeq	r3, #4
   da610:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   da614:	bf04      	itt	eq
   da616:	0080      	lsleq	r0, r0, #2
   da618:	3302      	addeq	r3, #2
   da61a:	2800      	cmp	r0, #0
   da61c:	db05      	blt.n	da62a <__hi0bits+0x38>
   da61e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   da622:	f103 0301 	add.w	r3, r3, #1
   da626:	bf08      	it	eq
   da628:	2320      	moveq	r3, #32
   da62a:	4618      	mov	r0, r3
   da62c:	4770      	bx	lr
   da62e:	2300      	movs	r3, #0
   da630:	e7e4      	b.n	da5fc <__hi0bits+0xa>

000da632 <__lo0bits>:
   da632:	6803      	ldr	r3, [r0, #0]
   da634:	f013 0207 	ands.w	r2, r3, #7
   da638:	4601      	mov	r1, r0
   da63a:	d00b      	beq.n	da654 <__lo0bits+0x22>
   da63c:	07da      	lsls	r2, r3, #31
   da63e:	d424      	bmi.n	da68a <__lo0bits+0x58>
   da640:	0798      	lsls	r0, r3, #30
   da642:	bf49      	itett	mi
   da644:	085b      	lsrmi	r3, r3, #1
   da646:	089b      	lsrpl	r3, r3, #2
   da648:	2001      	movmi	r0, #1
   da64a:	600b      	strmi	r3, [r1, #0]
   da64c:	bf5c      	itt	pl
   da64e:	600b      	strpl	r3, [r1, #0]
   da650:	2002      	movpl	r0, #2
   da652:	4770      	bx	lr
   da654:	b298      	uxth	r0, r3
   da656:	b9b0      	cbnz	r0, da686 <__lo0bits+0x54>
   da658:	0c1b      	lsrs	r3, r3, #16
   da65a:	2010      	movs	r0, #16
   da65c:	f013 0fff 	tst.w	r3, #255	; 0xff
   da660:	bf04      	itt	eq
   da662:	0a1b      	lsreq	r3, r3, #8
   da664:	3008      	addeq	r0, #8
   da666:	071a      	lsls	r2, r3, #28
   da668:	bf04      	itt	eq
   da66a:	091b      	lsreq	r3, r3, #4
   da66c:	3004      	addeq	r0, #4
   da66e:	079a      	lsls	r2, r3, #30
   da670:	bf04      	itt	eq
   da672:	089b      	lsreq	r3, r3, #2
   da674:	3002      	addeq	r0, #2
   da676:	07da      	lsls	r2, r3, #31
   da678:	d403      	bmi.n	da682 <__lo0bits+0x50>
   da67a:	085b      	lsrs	r3, r3, #1
   da67c:	f100 0001 	add.w	r0, r0, #1
   da680:	d005      	beq.n	da68e <__lo0bits+0x5c>
   da682:	600b      	str	r3, [r1, #0]
   da684:	4770      	bx	lr
   da686:	4610      	mov	r0, r2
   da688:	e7e8      	b.n	da65c <__lo0bits+0x2a>
   da68a:	2000      	movs	r0, #0
   da68c:	4770      	bx	lr
   da68e:	2020      	movs	r0, #32
   da690:	4770      	bx	lr

000da692 <__i2b>:
   da692:	b510      	push	{r4, lr}
   da694:	460c      	mov	r4, r1
   da696:	2101      	movs	r1, #1
   da698:	f7ff fee4 	bl	da464 <_Balloc>
   da69c:	2201      	movs	r2, #1
   da69e:	6144      	str	r4, [r0, #20]
   da6a0:	6102      	str	r2, [r0, #16]
   da6a2:	bd10      	pop	{r4, pc}

000da6a4 <__multiply>:
   da6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da6a8:	4615      	mov	r5, r2
   da6aa:	690a      	ldr	r2, [r1, #16]
   da6ac:	692b      	ldr	r3, [r5, #16]
   da6ae:	429a      	cmp	r2, r3
   da6b0:	bfb8      	it	lt
   da6b2:	460b      	movlt	r3, r1
   da6b4:	460c      	mov	r4, r1
   da6b6:	bfbc      	itt	lt
   da6b8:	462c      	movlt	r4, r5
   da6ba:	461d      	movlt	r5, r3
   da6bc:	6927      	ldr	r7, [r4, #16]
   da6be:	f8d5 9010 	ldr.w	r9, [r5, #16]
   da6c2:	68a3      	ldr	r3, [r4, #8]
   da6c4:	6861      	ldr	r1, [r4, #4]
   da6c6:	eb07 0609 	add.w	r6, r7, r9
   da6ca:	42b3      	cmp	r3, r6
   da6cc:	bfb8      	it	lt
   da6ce:	3101      	addlt	r1, #1
   da6d0:	b085      	sub	sp, #20
   da6d2:	f7ff fec7 	bl	da464 <_Balloc>
   da6d6:	f100 0114 	add.w	r1, r0, #20
   da6da:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   da6de:	460b      	mov	r3, r1
   da6e0:	2200      	movs	r2, #0
   da6e2:	4543      	cmp	r3, r8
   da6e4:	d31d      	bcc.n	da722 <__multiply+0x7e>
   da6e6:	f104 0314 	add.w	r3, r4, #20
   da6ea:	f105 0214 	add.w	r2, r5, #20
   da6ee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   da6f2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   da6f6:	9302      	str	r3, [sp, #8]
   da6f8:	1b3b      	subs	r3, r7, r4
   da6fa:	3b15      	subs	r3, #21
   da6fc:	f023 0303 	bic.w	r3, r3, #3
   da700:	3304      	adds	r3, #4
   da702:	f104 0515 	add.w	r5, r4, #21
   da706:	42af      	cmp	r7, r5
   da708:	bf38      	it	cc
   da70a:	2304      	movcc	r3, #4
   da70c:	9301      	str	r3, [sp, #4]
   da70e:	9b02      	ldr	r3, [sp, #8]
   da710:	9203      	str	r2, [sp, #12]
   da712:	4293      	cmp	r3, r2
   da714:	d808      	bhi.n	da728 <__multiply+0x84>
   da716:	2e00      	cmp	r6, #0
   da718:	dc5a      	bgt.n	da7d0 <__multiply+0x12c>
   da71a:	6106      	str	r6, [r0, #16]
   da71c:	b005      	add	sp, #20
   da71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da722:	f843 2b04 	str.w	r2, [r3], #4
   da726:	e7dc      	b.n	da6e2 <__multiply+0x3e>
   da728:	f8b2 a000 	ldrh.w	sl, [r2]
   da72c:	f1ba 0f00 	cmp.w	sl, #0
   da730:	d024      	beq.n	da77c <__multiply+0xd8>
   da732:	f104 0e14 	add.w	lr, r4, #20
   da736:	4689      	mov	r9, r1
   da738:	f04f 0c00 	mov.w	ip, #0
   da73c:	f85e 5b04 	ldr.w	r5, [lr], #4
   da740:	f8d9 b000 	ldr.w	fp, [r9]
   da744:	b2ab      	uxth	r3, r5
   da746:	fa1f fb8b 	uxth.w	fp, fp
   da74a:	fb0a b303 	mla	r3, sl, r3, fp
   da74e:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   da752:	f8d9 5000 	ldr.w	r5, [r9]
   da756:	4463      	add	r3, ip
   da758:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   da75c:	fb0a c50b 	mla	r5, sl, fp, ip
   da760:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   da764:	b29b      	uxth	r3, r3
   da766:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   da76a:	4577      	cmp	r7, lr
   da76c:	f849 3b04 	str.w	r3, [r9], #4
   da770:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   da774:	d8e2      	bhi.n	da73c <__multiply+0x98>
   da776:	9b01      	ldr	r3, [sp, #4]
   da778:	f841 c003 	str.w	ip, [r1, r3]
   da77c:	9b03      	ldr	r3, [sp, #12]
   da77e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   da782:	3204      	adds	r2, #4
   da784:	f1b9 0f00 	cmp.w	r9, #0
   da788:	d020      	beq.n	da7cc <__multiply+0x128>
   da78a:	680b      	ldr	r3, [r1, #0]
   da78c:	f104 0c14 	add.w	ip, r4, #20
   da790:	468e      	mov	lr, r1
   da792:	f04f 0a00 	mov.w	sl, #0
   da796:	f8bc 5000 	ldrh.w	r5, [ip]
   da79a:	f8be b002 	ldrh.w	fp, [lr, #2]
   da79e:	fb09 b505 	mla	r5, r9, r5, fp
   da7a2:	44aa      	add	sl, r5
   da7a4:	b29b      	uxth	r3, r3
   da7a6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   da7aa:	f84e 3b04 	str.w	r3, [lr], #4
   da7ae:	f85c 3b04 	ldr.w	r3, [ip], #4
   da7b2:	f8be 5000 	ldrh.w	r5, [lr]
   da7b6:	0c1b      	lsrs	r3, r3, #16
   da7b8:	fb09 5303 	mla	r3, r9, r3, r5
   da7bc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   da7c0:	4567      	cmp	r7, ip
   da7c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   da7c6:	d8e6      	bhi.n	da796 <__multiply+0xf2>
   da7c8:	9d01      	ldr	r5, [sp, #4]
   da7ca:	514b      	str	r3, [r1, r5]
   da7cc:	3104      	adds	r1, #4
   da7ce:	e79e      	b.n	da70e <__multiply+0x6a>
   da7d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   da7d4:	2b00      	cmp	r3, #0
   da7d6:	d1a0      	bne.n	da71a <__multiply+0x76>
   da7d8:	3e01      	subs	r6, #1
   da7da:	e79c      	b.n	da716 <__multiply+0x72>

000da7dc <__pow5mult>:
   da7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da7e0:	4615      	mov	r5, r2
   da7e2:	f012 0203 	ands.w	r2, r2, #3
   da7e6:	4606      	mov	r6, r0
   da7e8:	460f      	mov	r7, r1
   da7ea:	d007      	beq.n	da7fc <__pow5mult+0x20>
   da7ec:	4c21      	ldr	r4, [pc, #132]	; (da874 <__pow5mult+0x98>)
   da7ee:	3a01      	subs	r2, #1
   da7f0:	2300      	movs	r3, #0
   da7f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   da7f6:	f7ff fe80 	bl	da4fa <__multadd>
   da7fa:	4607      	mov	r7, r0
   da7fc:	10ad      	asrs	r5, r5, #2
   da7fe:	d035      	beq.n	da86c <__pow5mult+0x90>
   da800:	6a74      	ldr	r4, [r6, #36]	; 0x24
   da802:	b93c      	cbnz	r4, da814 <__pow5mult+0x38>
   da804:	2010      	movs	r0, #16
   da806:	f7fc f939 	bl	d6a7c <malloc>
   da80a:	e9c0 4401 	strd	r4, r4, [r0, #4]
   da80e:	6270      	str	r0, [r6, #36]	; 0x24
   da810:	6004      	str	r4, [r0, #0]
   da812:	60c4      	str	r4, [r0, #12]
   da814:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   da818:	f8d8 4008 	ldr.w	r4, [r8, #8]
   da81c:	b94c      	cbnz	r4, da832 <__pow5mult+0x56>
   da81e:	f240 2171 	movw	r1, #625	; 0x271
   da822:	4630      	mov	r0, r6
   da824:	f7ff ff35 	bl	da692 <__i2b>
   da828:	2300      	movs	r3, #0
   da82a:	f8c8 0008 	str.w	r0, [r8, #8]
   da82e:	4604      	mov	r4, r0
   da830:	6003      	str	r3, [r0, #0]
   da832:	f04f 0900 	mov.w	r9, #0
   da836:	07eb      	lsls	r3, r5, #31
   da838:	d50a      	bpl.n	da850 <__pow5mult+0x74>
   da83a:	4639      	mov	r1, r7
   da83c:	4622      	mov	r2, r4
   da83e:	4630      	mov	r0, r6
   da840:	f7ff ff30 	bl	da6a4 <__multiply>
   da844:	4639      	mov	r1, r7
   da846:	4680      	mov	r8, r0
   da848:	4630      	mov	r0, r6
   da84a:	f7ff fe3f 	bl	da4cc <_Bfree>
   da84e:	4647      	mov	r7, r8
   da850:	106d      	asrs	r5, r5, #1
   da852:	d00b      	beq.n	da86c <__pow5mult+0x90>
   da854:	6820      	ldr	r0, [r4, #0]
   da856:	b938      	cbnz	r0, da868 <__pow5mult+0x8c>
   da858:	4622      	mov	r2, r4
   da85a:	4621      	mov	r1, r4
   da85c:	4630      	mov	r0, r6
   da85e:	f7ff ff21 	bl	da6a4 <__multiply>
   da862:	6020      	str	r0, [r4, #0]
   da864:	f8c0 9000 	str.w	r9, [r0]
   da868:	4604      	mov	r4, r0
   da86a:	e7e4      	b.n	da836 <__pow5mult+0x5a>
   da86c:	4638      	mov	r0, r7
   da86e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da872:	bf00      	nop
   da874:	000db998 	.word	0x000db998

000da878 <__lshift>:
   da878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da87c:	460c      	mov	r4, r1
   da87e:	6849      	ldr	r1, [r1, #4]
   da880:	6923      	ldr	r3, [r4, #16]
   da882:	eb03 1862 	add.w	r8, r3, r2, asr #5
   da886:	68a3      	ldr	r3, [r4, #8]
   da888:	4607      	mov	r7, r0
   da88a:	4691      	mov	r9, r2
   da88c:	ea4f 1a62 	mov.w	sl, r2, asr #5
   da890:	f108 0601 	add.w	r6, r8, #1
   da894:	42b3      	cmp	r3, r6
   da896:	db3f      	blt.n	da918 <__lshift+0xa0>
   da898:	4638      	mov	r0, r7
   da89a:	f7ff fde3 	bl	da464 <_Balloc>
   da89e:	2300      	movs	r3, #0
   da8a0:	4605      	mov	r5, r0
   da8a2:	f100 0114 	add.w	r1, r0, #20
   da8a6:	f100 0210 	add.w	r2, r0, #16
   da8aa:	4618      	mov	r0, r3
   da8ac:	4553      	cmp	r3, sl
   da8ae:	db36      	blt.n	da91e <__lshift+0xa6>
   da8b0:	6920      	ldr	r0, [r4, #16]
   da8b2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   da8b6:	f104 0314 	add.w	r3, r4, #20
   da8ba:	f019 091f 	ands.w	r9, r9, #31
   da8be:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   da8c2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   da8c6:	d02e      	beq.n	da926 <__lshift+0xae>
   da8c8:	f1c9 0e20 	rsb	lr, r9, #32
   da8cc:	468a      	mov	sl, r1
   da8ce:	2200      	movs	r2, #0
   da8d0:	6818      	ldr	r0, [r3, #0]
   da8d2:	fa00 f009 	lsl.w	r0, r0, r9
   da8d6:	4302      	orrs	r2, r0
   da8d8:	f84a 2b04 	str.w	r2, [sl], #4
   da8dc:	f853 2b04 	ldr.w	r2, [r3], #4
   da8e0:	459c      	cmp	ip, r3
   da8e2:	fa22 f20e 	lsr.w	r2, r2, lr
   da8e6:	d8f3      	bhi.n	da8d0 <__lshift+0x58>
   da8e8:	ebac 0304 	sub.w	r3, ip, r4
   da8ec:	3b15      	subs	r3, #21
   da8ee:	f023 0303 	bic.w	r3, r3, #3
   da8f2:	3304      	adds	r3, #4
   da8f4:	f104 0015 	add.w	r0, r4, #21
   da8f8:	4560      	cmp	r0, ip
   da8fa:	bf88      	it	hi
   da8fc:	2304      	movhi	r3, #4
   da8fe:	50ca      	str	r2, [r1, r3]
   da900:	b10a      	cbz	r2, da906 <__lshift+0x8e>
   da902:	f108 0602 	add.w	r6, r8, #2
   da906:	3e01      	subs	r6, #1
   da908:	4638      	mov	r0, r7
   da90a:	612e      	str	r6, [r5, #16]
   da90c:	4621      	mov	r1, r4
   da90e:	f7ff fddd 	bl	da4cc <_Bfree>
   da912:	4628      	mov	r0, r5
   da914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da918:	3101      	adds	r1, #1
   da91a:	005b      	lsls	r3, r3, #1
   da91c:	e7ba      	b.n	da894 <__lshift+0x1c>
   da91e:	f842 0f04 	str.w	r0, [r2, #4]!
   da922:	3301      	adds	r3, #1
   da924:	e7c2      	b.n	da8ac <__lshift+0x34>
   da926:	3904      	subs	r1, #4
   da928:	f853 2b04 	ldr.w	r2, [r3], #4
   da92c:	f841 2f04 	str.w	r2, [r1, #4]!
   da930:	459c      	cmp	ip, r3
   da932:	d8f9      	bhi.n	da928 <__lshift+0xb0>
   da934:	e7e7      	b.n	da906 <__lshift+0x8e>

000da936 <__mcmp>:
   da936:	b530      	push	{r4, r5, lr}
   da938:	6902      	ldr	r2, [r0, #16]
   da93a:	690c      	ldr	r4, [r1, #16]
   da93c:	1b12      	subs	r2, r2, r4
   da93e:	d10e      	bne.n	da95e <__mcmp+0x28>
   da940:	f100 0314 	add.w	r3, r0, #20
   da944:	3114      	adds	r1, #20
   da946:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   da94a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   da94e:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   da952:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   da956:	42a5      	cmp	r5, r4
   da958:	d003      	beq.n	da962 <__mcmp+0x2c>
   da95a:	d305      	bcc.n	da968 <__mcmp+0x32>
   da95c:	2201      	movs	r2, #1
   da95e:	4610      	mov	r0, r2
   da960:	bd30      	pop	{r4, r5, pc}
   da962:	4283      	cmp	r3, r0
   da964:	d3f3      	bcc.n	da94e <__mcmp+0x18>
   da966:	e7fa      	b.n	da95e <__mcmp+0x28>
   da968:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da96c:	e7f7      	b.n	da95e <__mcmp+0x28>

000da96e <__mdiff>:
   da96e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da972:	460c      	mov	r4, r1
   da974:	4606      	mov	r6, r0
   da976:	4611      	mov	r1, r2
   da978:	4620      	mov	r0, r4
   da97a:	4617      	mov	r7, r2
   da97c:	f7ff ffdb 	bl	da936 <__mcmp>
   da980:	1e05      	subs	r5, r0, #0
   da982:	d108      	bne.n	da996 <__mdiff+0x28>
   da984:	4629      	mov	r1, r5
   da986:	4630      	mov	r0, r6
   da988:	f7ff fd6c 	bl	da464 <_Balloc>
   da98c:	2301      	movs	r3, #1
   da98e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   da992:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da996:	bfa4      	itt	ge
   da998:	463b      	movge	r3, r7
   da99a:	4627      	movge	r7, r4
   da99c:	4630      	mov	r0, r6
   da99e:	6879      	ldr	r1, [r7, #4]
   da9a0:	bfa6      	itte	ge
   da9a2:	461c      	movge	r4, r3
   da9a4:	2500      	movge	r5, #0
   da9a6:	2501      	movlt	r5, #1
   da9a8:	f7ff fd5c 	bl	da464 <_Balloc>
   da9ac:	693e      	ldr	r6, [r7, #16]
   da9ae:	60c5      	str	r5, [r0, #12]
   da9b0:	6925      	ldr	r5, [r4, #16]
   da9b2:	f107 0114 	add.w	r1, r7, #20
   da9b6:	f104 0914 	add.w	r9, r4, #20
   da9ba:	f100 0e14 	add.w	lr, r0, #20
   da9be:	f107 0210 	add.w	r2, r7, #16
   da9c2:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   da9c6:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   da9ca:	46f2      	mov	sl, lr
   da9cc:	2700      	movs	r7, #0
   da9ce:	f859 3b04 	ldr.w	r3, [r9], #4
   da9d2:	f852 bf04 	ldr.w	fp, [r2, #4]!
   da9d6:	fa1f f883 	uxth.w	r8, r3
   da9da:	fa17 f78b 	uxtah	r7, r7, fp
   da9de:	0c1b      	lsrs	r3, r3, #16
   da9e0:	eba7 0808 	sub.w	r8, r7, r8
   da9e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   da9e8:	eb03 4328 	add.w	r3, r3, r8, asr #16
   da9ec:	fa1f f888 	uxth.w	r8, r8
   da9f0:	141f      	asrs	r7, r3, #16
   da9f2:	454d      	cmp	r5, r9
   da9f4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   da9f8:	f84a 3b04 	str.w	r3, [sl], #4
   da9fc:	d8e7      	bhi.n	da9ce <__mdiff+0x60>
   da9fe:	1b2b      	subs	r3, r5, r4
   daa00:	3b15      	subs	r3, #21
   daa02:	f023 0303 	bic.w	r3, r3, #3
   daa06:	3304      	adds	r3, #4
   daa08:	3415      	adds	r4, #21
   daa0a:	42a5      	cmp	r5, r4
   daa0c:	bf38      	it	cc
   daa0e:	2304      	movcc	r3, #4
   daa10:	4419      	add	r1, r3
   daa12:	4473      	add	r3, lr
   daa14:	469e      	mov	lr, r3
   daa16:	460d      	mov	r5, r1
   daa18:	4565      	cmp	r5, ip
   daa1a:	d30e      	bcc.n	daa3a <__mdiff+0xcc>
   daa1c:	f10c 0203 	add.w	r2, ip, #3
   daa20:	1a52      	subs	r2, r2, r1
   daa22:	f022 0203 	bic.w	r2, r2, #3
   daa26:	3903      	subs	r1, #3
   daa28:	458c      	cmp	ip, r1
   daa2a:	bf38      	it	cc
   daa2c:	2200      	movcc	r2, #0
   daa2e:	441a      	add	r2, r3
   daa30:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   daa34:	b17b      	cbz	r3, daa56 <__mdiff+0xe8>
   daa36:	6106      	str	r6, [r0, #16]
   daa38:	e7ab      	b.n	da992 <__mdiff+0x24>
   daa3a:	f855 8b04 	ldr.w	r8, [r5], #4
   daa3e:	fa17 f488 	uxtah	r4, r7, r8
   daa42:	1422      	asrs	r2, r4, #16
   daa44:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   daa48:	b2a4      	uxth	r4, r4
   daa4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   daa4e:	f84e 4b04 	str.w	r4, [lr], #4
   daa52:	1417      	asrs	r7, r2, #16
   daa54:	e7e0      	b.n	daa18 <__mdiff+0xaa>
   daa56:	3e01      	subs	r6, #1
   daa58:	e7ea      	b.n	daa30 <__mdiff+0xc2>
	...

000daa5c <__ulp>:
   daa5c:	b082      	sub	sp, #8
   daa5e:	ed8d 0b00 	vstr	d0, [sp]
   daa62:	9b01      	ldr	r3, [sp, #4]
   daa64:	4912      	ldr	r1, [pc, #72]	; (daab0 <__ulp+0x54>)
   daa66:	4019      	ands	r1, r3
   daa68:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   daa6c:	2900      	cmp	r1, #0
   daa6e:	dd05      	ble.n	daa7c <__ulp+0x20>
   daa70:	2200      	movs	r2, #0
   daa72:	460b      	mov	r3, r1
   daa74:	ec43 2b10 	vmov	d0, r2, r3
   daa78:	b002      	add	sp, #8
   daa7a:	4770      	bx	lr
   daa7c:	4249      	negs	r1, r1
   daa7e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   daa82:	ea4f 5021 	mov.w	r0, r1, asr #20
   daa86:	f04f 0200 	mov.w	r2, #0
   daa8a:	f04f 0300 	mov.w	r3, #0
   daa8e:	da04      	bge.n	daa9a <__ulp+0x3e>
   daa90:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   daa94:	fa41 f300 	asr.w	r3, r1, r0
   daa98:	e7ec      	b.n	daa74 <__ulp+0x18>
   daa9a:	f1a0 0114 	sub.w	r1, r0, #20
   daa9e:	291e      	cmp	r1, #30
   daaa0:	bfda      	itte	le
   daaa2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   daaa6:	fa20 f101 	lsrle.w	r1, r0, r1
   daaaa:	2101      	movgt	r1, #1
   daaac:	460a      	mov	r2, r1
   daaae:	e7e1      	b.n	daa74 <__ulp+0x18>
   daab0:	7ff00000 	.word	0x7ff00000

000daab4 <__b2d>:
   daab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   daab6:	6905      	ldr	r5, [r0, #16]
   daab8:	f100 0714 	add.w	r7, r0, #20
   daabc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   daac0:	1f2e      	subs	r6, r5, #4
   daac2:	f855 4c04 	ldr.w	r4, [r5, #-4]
   daac6:	4620      	mov	r0, r4
   daac8:	f7ff fd93 	bl	da5f2 <__hi0bits>
   daacc:	f1c0 0320 	rsb	r3, r0, #32
   daad0:	280a      	cmp	r0, #10
   daad2:	f8df c07c 	ldr.w	ip, [pc, #124]	; dab50 <__b2d+0x9c>
   daad6:	600b      	str	r3, [r1, #0]
   daad8:	dc14      	bgt.n	dab04 <__b2d+0x50>
   daada:	f1c0 0e0b 	rsb	lr, r0, #11
   daade:	fa24 f10e 	lsr.w	r1, r4, lr
   daae2:	42b7      	cmp	r7, r6
   daae4:	ea41 030c 	orr.w	r3, r1, ip
   daae8:	bf34      	ite	cc
   daaea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   daaee:	2100      	movcs	r1, #0
   daaf0:	3015      	adds	r0, #21
   daaf2:	fa04 f000 	lsl.w	r0, r4, r0
   daaf6:	fa21 f10e 	lsr.w	r1, r1, lr
   daafa:	ea40 0201 	orr.w	r2, r0, r1
   daafe:	ec43 2b10 	vmov	d0, r2, r3
   dab02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   dab04:	42b7      	cmp	r7, r6
   dab06:	bf3a      	itte	cc
   dab08:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   dab0c:	f1a5 0608 	subcc.w	r6, r5, #8
   dab10:	2100      	movcs	r1, #0
   dab12:	380b      	subs	r0, #11
   dab14:	d017      	beq.n	dab46 <__b2d+0x92>
   dab16:	f1c0 0c20 	rsb	ip, r0, #32
   dab1a:	fa04 f500 	lsl.w	r5, r4, r0
   dab1e:	42be      	cmp	r6, r7
   dab20:	fa21 f40c 	lsr.w	r4, r1, ip
   dab24:	ea45 0504 	orr.w	r5, r5, r4
   dab28:	bf8c      	ite	hi
   dab2a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   dab2e:	2400      	movls	r4, #0
   dab30:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   dab34:	fa01 f000 	lsl.w	r0, r1, r0
   dab38:	fa24 f40c 	lsr.w	r4, r4, ip
   dab3c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   dab40:	ea40 0204 	orr.w	r2, r0, r4
   dab44:	e7db      	b.n	daafe <__b2d+0x4a>
   dab46:	ea44 030c 	orr.w	r3, r4, ip
   dab4a:	460a      	mov	r2, r1
   dab4c:	e7d7      	b.n	daafe <__b2d+0x4a>
   dab4e:	bf00      	nop
   dab50:	3ff00000 	.word	0x3ff00000

000dab54 <__d2b>:
   dab54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   dab58:	4689      	mov	r9, r1
   dab5a:	2101      	movs	r1, #1
   dab5c:	ec57 6b10 	vmov	r6, r7, d0
   dab60:	4690      	mov	r8, r2
   dab62:	f7ff fc7f 	bl	da464 <_Balloc>
   dab66:	f3c7 550a 	ubfx	r5, r7, #20, #11
   dab6a:	4604      	mov	r4, r0
   dab6c:	f3c7 0313 	ubfx	r3, r7, #0, #20
   dab70:	bb35      	cbnz	r5, dabc0 <__d2b+0x6c>
   dab72:	2e00      	cmp	r6, #0
   dab74:	9301      	str	r3, [sp, #4]
   dab76:	d028      	beq.n	dabca <__d2b+0x76>
   dab78:	4668      	mov	r0, sp
   dab7a:	9600      	str	r6, [sp, #0]
   dab7c:	f7ff fd59 	bl	da632 <__lo0bits>
   dab80:	9900      	ldr	r1, [sp, #0]
   dab82:	b300      	cbz	r0, dabc6 <__d2b+0x72>
   dab84:	9a01      	ldr	r2, [sp, #4]
   dab86:	f1c0 0320 	rsb	r3, r0, #32
   dab8a:	fa02 f303 	lsl.w	r3, r2, r3
   dab8e:	430b      	orrs	r3, r1
   dab90:	40c2      	lsrs	r2, r0
   dab92:	6163      	str	r3, [r4, #20]
   dab94:	9201      	str	r2, [sp, #4]
   dab96:	9b01      	ldr	r3, [sp, #4]
   dab98:	61a3      	str	r3, [r4, #24]
   dab9a:	2b00      	cmp	r3, #0
   dab9c:	bf14      	ite	ne
   dab9e:	2202      	movne	r2, #2
   daba0:	2201      	moveq	r2, #1
   daba2:	6122      	str	r2, [r4, #16]
   daba4:	b1d5      	cbz	r5, dabdc <__d2b+0x88>
   daba6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   dabaa:	4405      	add	r5, r0
   dabac:	f8c9 5000 	str.w	r5, [r9]
   dabb0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   dabb4:	f8c8 0000 	str.w	r0, [r8]
   dabb8:	4620      	mov	r0, r4
   dabba:	b003      	add	sp, #12
   dabbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   dabc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   dabc4:	e7d5      	b.n	dab72 <__d2b+0x1e>
   dabc6:	6161      	str	r1, [r4, #20]
   dabc8:	e7e5      	b.n	dab96 <__d2b+0x42>
   dabca:	a801      	add	r0, sp, #4
   dabcc:	f7ff fd31 	bl	da632 <__lo0bits>
   dabd0:	9b01      	ldr	r3, [sp, #4]
   dabd2:	6163      	str	r3, [r4, #20]
   dabd4:	2201      	movs	r2, #1
   dabd6:	6122      	str	r2, [r4, #16]
   dabd8:	3020      	adds	r0, #32
   dabda:	e7e3      	b.n	daba4 <__d2b+0x50>
   dabdc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   dabe0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   dabe4:	f8c9 0000 	str.w	r0, [r9]
   dabe8:	6918      	ldr	r0, [r3, #16]
   dabea:	f7ff fd02 	bl	da5f2 <__hi0bits>
   dabee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   dabf2:	e7df      	b.n	dabb4 <__d2b+0x60>

000dabf4 <__ratio>:
   dabf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dabf8:	4688      	mov	r8, r1
   dabfa:	4669      	mov	r1, sp
   dabfc:	4681      	mov	r9, r0
   dabfe:	f7ff ff59 	bl	daab4 <__b2d>
   dac02:	a901      	add	r1, sp, #4
   dac04:	4640      	mov	r0, r8
   dac06:	ec55 4b10 	vmov	r4, r5, d0
   dac0a:	f7ff ff53 	bl	daab4 <__b2d>
   dac0e:	f8d9 3010 	ldr.w	r3, [r9, #16]
   dac12:	f8d8 2010 	ldr.w	r2, [r8, #16]
   dac16:	eba3 0c02 	sub.w	ip, r3, r2
   dac1a:	e9dd 3200 	ldrd	r3, r2, [sp]
   dac1e:	1a9b      	subs	r3, r3, r2
   dac20:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   dac24:	ec51 0b10 	vmov	r0, r1, d0
   dac28:	2b00      	cmp	r3, #0
   dac2a:	bfd6      	itet	le
   dac2c:	460a      	movle	r2, r1
   dac2e:	462a      	movgt	r2, r5
   dac30:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   dac34:	468b      	mov	fp, r1
   dac36:	462f      	mov	r7, r5
   dac38:	bfd4      	ite	le
   dac3a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   dac3e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   dac42:	4620      	mov	r0, r4
   dac44:	ee10 2a10 	vmov	r2, s0
   dac48:	465b      	mov	r3, fp
   dac4a:	4639      	mov	r1, r7
   dac4c:	f7fd fed0 	bl	d89f0 <__aeabi_ddiv>
   dac50:	ec41 0b10 	vmov	d0, r0, r1
   dac54:	b003      	add	sp, #12
   dac56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dac5a <__copybits>:
   dac5a:	3901      	subs	r1, #1
   dac5c:	b570      	push	{r4, r5, r6, lr}
   dac5e:	1149      	asrs	r1, r1, #5
   dac60:	6914      	ldr	r4, [r2, #16]
   dac62:	3101      	adds	r1, #1
   dac64:	f102 0314 	add.w	r3, r2, #20
   dac68:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   dac6c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   dac70:	1f05      	subs	r5, r0, #4
   dac72:	42a3      	cmp	r3, r4
   dac74:	d30c      	bcc.n	dac90 <__copybits+0x36>
   dac76:	1aa3      	subs	r3, r4, r2
   dac78:	3b11      	subs	r3, #17
   dac7a:	f023 0303 	bic.w	r3, r3, #3
   dac7e:	3211      	adds	r2, #17
   dac80:	42a2      	cmp	r2, r4
   dac82:	bf88      	it	hi
   dac84:	2300      	movhi	r3, #0
   dac86:	4418      	add	r0, r3
   dac88:	2300      	movs	r3, #0
   dac8a:	4288      	cmp	r0, r1
   dac8c:	d305      	bcc.n	dac9a <__copybits+0x40>
   dac8e:	bd70      	pop	{r4, r5, r6, pc}
   dac90:	f853 6b04 	ldr.w	r6, [r3], #4
   dac94:	f845 6f04 	str.w	r6, [r5, #4]!
   dac98:	e7eb      	b.n	dac72 <__copybits+0x18>
   dac9a:	f840 3b04 	str.w	r3, [r0], #4
   dac9e:	e7f4      	b.n	dac8a <__copybits+0x30>

000daca0 <__any_on>:
   daca0:	f100 0214 	add.w	r2, r0, #20
   daca4:	6900      	ldr	r0, [r0, #16]
   daca6:	114b      	asrs	r3, r1, #5
   daca8:	4298      	cmp	r0, r3
   dacaa:	b510      	push	{r4, lr}
   dacac:	db11      	blt.n	dacd2 <__any_on+0x32>
   dacae:	dd0a      	ble.n	dacc6 <__any_on+0x26>
   dacb0:	f011 011f 	ands.w	r1, r1, #31
   dacb4:	d007      	beq.n	dacc6 <__any_on+0x26>
   dacb6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dacba:	fa24 f001 	lsr.w	r0, r4, r1
   dacbe:	fa00 f101 	lsl.w	r1, r0, r1
   dacc2:	428c      	cmp	r4, r1
   dacc4:	d10b      	bne.n	dacde <__any_on+0x3e>
   dacc6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dacca:	4293      	cmp	r3, r2
   daccc:	d803      	bhi.n	dacd6 <__any_on+0x36>
   dacce:	2000      	movs	r0, #0
   dacd0:	bd10      	pop	{r4, pc}
   dacd2:	4603      	mov	r3, r0
   dacd4:	e7f7      	b.n	dacc6 <__any_on+0x26>
   dacd6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dacda:	2900      	cmp	r1, #0
   dacdc:	d0f5      	beq.n	dacca <__any_on+0x2a>
   dacde:	2001      	movs	r0, #1
   dace0:	e7f6      	b.n	dacd0 <__any_on+0x30>

000dace2 <_calloc_r>:
   dace2:	b513      	push	{r0, r1, r4, lr}
   dace4:	434a      	muls	r2, r1
   dace6:	4611      	mov	r1, r2
   dace8:	9201      	str	r2, [sp, #4]
   dacea:	f7fb fef7 	bl	d6adc <_malloc_r>
   dacee:	4604      	mov	r4, r0
   dacf0:	b118      	cbz	r0, dacfa <_calloc_r+0x18>
   dacf2:	9a01      	ldr	r2, [sp, #4]
   dacf4:	2100      	movs	r1, #0
   dacf6:	f7fe f905 	bl	d8f04 <memset>
   dacfa:	4620      	mov	r0, r4
   dacfc:	b002      	add	sp, #8
   dacfe:	bd10      	pop	{r4, pc}

000dad00 <nan>:
   dad00:	ed9f 0b01 	vldr	d0, [pc, #4]	; dad08 <nan+0x8>
   dad04:	4770      	bx	lr
   dad06:	bf00      	nop
   dad08:	00000000 	.word	0x00000000
   dad0c:	7ff80000 	.word	0x7ff80000

000dad10 <__ascii_wctomb>:
   dad10:	b149      	cbz	r1, dad26 <__ascii_wctomb+0x16>
   dad12:	2aff      	cmp	r2, #255	; 0xff
   dad14:	bf85      	ittet	hi
   dad16:	238a      	movhi	r3, #138	; 0x8a
   dad18:	6003      	strhi	r3, [r0, #0]
   dad1a:	700a      	strbls	r2, [r1, #0]
   dad1c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   dad20:	bf98      	it	ls
   dad22:	2001      	movls	r0, #1
   dad24:	4770      	bx	lr
   dad26:	4608      	mov	r0, r1
   dad28:	4770      	bx	lr
	...

000dad2c <__aeabi_d2lz>:
   dad2c:	b538      	push	{r3, r4, r5, lr}
   dad2e:	2200      	movs	r2, #0
   dad30:	2300      	movs	r3, #0
   dad32:	4604      	mov	r4, r0
   dad34:	460d      	mov	r5, r1
   dad36:	f7fd ffa3 	bl	d8c80 <__aeabi_dcmplt>
   dad3a:	b928      	cbnz	r0, dad48 <__aeabi_d2lz+0x1c>
   dad3c:	4620      	mov	r0, r4
   dad3e:	4629      	mov	r1, r5
   dad40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dad44:	f7fe b84a 	b.w	d8ddc <__aeabi_d2ulz>
   dad48:	4620      	mov	r0, r4
   dad4a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   dad4e:	f7fe f845 	bl	d8ddc <__aeabi_d2ulz>
   dad52:	4240      	negs	r0, r0
   dad54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dad58:	bd38      	pop	{r3, r4, r5, pc}
   dad5a:	bf00      	nop

000dad5c <dynalib_user>:
   dad5c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dad6c:	0000 0000 6e55 6e6b 776f 006e 6f4e 2074     ....Unknown.Not 
   dad7c:	6843 7261 6967 676e 4300 6168 6772 6465     Charging.Charged
   dad8c:	4400 7369 6863 7261 6967 676e 4600 7561     .Discharging.Fau
   dad9c:	746c 4400 6369 6e6f 656e 7463 6465 3100     lt.Diconnected.1
   dadac:	4500 616e 6c62 6465 5320 6e65 6f73 2072     .Enabled Sensor 
   dadbc:	6e4f 0065 6e45 6261 656c 2064 6553 736e     One.Enabled Sens
   dadcc:	726f 5420 6f77 4500 616e 6c62 6465 5320     or Two.Enabled S
   daddc:	6e65 6f73 2072 6854 6572 0065 6e45 6261     ensor Three.Enab
   dadec:	656c 2064 6553 736e 726f 4620 756f 0072     led Sensor Four.
   dadfc:	6e45 6261 656c 2064 6553 736e 726f 4620     Enabled Sensor F
   dae0c:	7669 0065 6e45 6261 656c 2064 6553 736e     ive.Enabled Sens
   dae1c:	726f 5320 7869 2a00 4e00 206f 6144 6174     or Six.*.No Data
   dae2c:	5200 7365 6f70 736e 2065 6552 6563 7669     .Response Receiv
   dae3c:	6465 5500 6b6e 6f6e 6e77 7220 7365 6f70     ed.Unknown respo
   dae4c:	736e 2065 6572 6563 6976 6465 2520 0069     nse recevied %i.
   dae5c:	6255 6469 746f 2073 6f48 6b6f 5300 7465     Ubidots Hook.Set
   dae6c:	5620 7265 6f62 6573 4d20 646f 0065 0030      Verbose Mode.0.
   dae7c:	6c43 6165 6572 2064 6556 6272 736f 2065     Cleared Verbose 
   dae8c:	6f4d 6564 5300 7465 7420 206f 7233 2064     Mode.Set to 3rd 
   dae9c:	6150 7472 2079 6953 006d 6553 2074 6f74     Party Sim.Set to
   daeac:	5020 7261 6974 6c63 2065 6953 006d 654b      Particle Sim.Ke
   daebc:	7065 4120 696c 6576 7320 7465 7420 206f     ep Alive set to 
   daecc:	6925 7320 6365 4b00 6565 2070 6c41 7669     %i sec.Keep Aliv
   daedc:	0065 6f4c 6461 6e69 2067 7953 7473 6d65     e.Loading System
   daeec:	4420 6665 7561 746c 0073 6550 7474 6465      Defaults.Petted
   daefc:	5700 7461 6863 6f64 0067 227b 6573 736e     .Watchdog.{"sens
   daf0c:	726f 6e4f 2265 253a 2e34 6631 202c 7322     orOne":%4.1f, "s
   daf1c:	6e65 6f73 5472 6f77 3a22 3425 312e 2c66     ensorTwo":%4.1f,
   daf2c:	2020 7322 6e65 6f73 5472 7268 6565 3a22       "sensorThree":
   daf3c:	3425 312e 2c66 2020 7322 6e65 6f73 4672     %4.1f,  "sensorF
   daf4c:	756f 2272 253a 2e34 6631 202c 2220 6573     our":%4.1f,  "se
   daf5c:	736e 726f 6946 6576 3a22 3425 312e 2c66     nsorFive":%4.1f,
   daf6c:	7322 6e65 6f73 5372 7869 3a22 3425 312e     "sensorSix":%4.1
   daf7c:	7d66 7000 776f 7265 6f6d 696e 6f74 6972     f}.powermonitori
   daf8c:	676e 685f 6f6f 006b 7246 6d6f 2520 2073     ng_hook.From %s 
   daf9c:	6f74 2520 0073 7453 7461 2065 7254 6e61     to %s.State Tran
   dafac:	6973 6974 6e6f 4300 2054 6e4f 3a65 2520     sition.CT One: %
   dafbc:	2e33 6631 4300 2054 7754 206f 3325 312e     3.1f.CT Two %3.1
   dafcc:	0066 5443 5420 7268 6565 203a 3325 312e     f.CT Three: %3.1
   dafdc:	0066 6553 736e 726f 4620 756f 2072 6f43     f.Sensor Four Co
   dafec:	736e 6174 746e 3a20 2520 2e33 6631 5300     nstant : %3.1f.S
   daffc:	6e65 6f73 2072 6946 6576 4320 6e6f 7473     ensor Five Const
   db00c:	6e61 2074 203a 3325 312e 0066 6553 736e     ant : %3.1f.Sens
   db01c:	726f 5320 7869 4320 6e6f 7473 6e61 2074     or Six Constant 
   db02c:	203a 3325 312e 0066 6f43 736e 6174 746e     : %3.1f.Constant
   db03c:	4f20 656e 5620 6c61 6575 7320 7465 7420      One Value set t
   db04c:	206f 4300 6e6f 7473 6e61 2074 7754 206f     o .Constant Two 
   db05c:	6156 756c 2065 6573 2074 6f74 0020 6f43     Value set to .Co
   db06c:	736e 6174 746e 5420 7268 6565 5620 6c61     nstant Three Val
   db07c:	6575 7320 7465 7420 206f 4300 6e6f 7473     ue set to .Const
   db08c:	6e61 2074 6f46 7275 5620 6c61 6575 7320     ant Four Value s
   db09c:	7465 7420 206f 4300 6e6f 7473 6e61 2074     et to .Constant 
   db0ac:	6946 6576 5620 6c61 6575 7320 7465 7420     Five Value set t
   db0bc:	206f 4300 6e6f 7473 6e61 2074 6953 2078     o .Constant Six 
   db0cc:	6156 756c 2065 6573 2074 6f74 0020 5245     Value set to .ER
   db0dc:	4f52 2052 5246 4d4f 5220 5045 524f 4954     ROR FROM REPORTI
   db0ec:	474e 4400 4245 4755 202d 7453 7261 7574     NG.DEBUG- Startu
   db0fc:	0070 4544 5542 2d47 5020 5241 4954 4c43     p.DEBUG- PARTICL
   db10c:	2045 4f43 4e4e 4345 4554 0044 7073 7261     E CONNECTED.spar
   db11c:	2f6b 6564 6976 6563 732f 7365 6973 6e6f     k/device/session
   db12c:	652f 646e 4500 7272 726f 5320 6174 6574     /end.Error State
   db13c:	2d20 5220 7365 7465 5300 6174 6574 2f00      - Reset.State./
   db14c:	6f68 6b6f 722d 7365 6f70 736e 2f65 6f70     hook-response/po
   db15c:	6577 6d72 6e6f 7469 726f 6e69 5f67 6f68     wermonitoring_ho
   db16c:	6b6f 002f 6552 656c 7361 0065 6142 7474     ok/.Release.Batt
   db17c:	7265 0079 6142 7474 7265 4379 6e6f 6574     ery.BatteryConte
   db18c:	7478 4b00 6565 2070 6c41 7669 2065 6553     xt.Keep Alive Se
   db19c:	0063 654d 7361 7275 2d65 6f4e 0077 6556     c.Measure-Now.Ve
   db1ac:	6272 736f 2d65 6f4d 6564 5300 7465 4320     rbose-Mode.Set C
   db1bc:	6e6f 7473 6e61 2074 6e4f 0065 6553 2074     onstant One.Set 
   db1cc:	6f43 736e 6174 746e 5420 6f77 5300 7465     Constant Two.Set
   db1dc:	4320 6e6f 7473 6e61 2074 6854 6572 0065      Constant Three.
   db1ec:	6553 2074 6f43 736e 6174 746e 4620 756f     Set Constant Fou
   db1fc:	0072 6553 2074 6f43 736e 6174 746e 4620     r.Set Constant F
   db20c:	7669 0065 6553 2074 6f43 736e 6174 746e     ive.Set Constant
   db21c:	5320 7869 4500 616e 6c62 2065 6553 736e      Six.Enable Sens
   db22c:	726f 0000                                   or..

000db230 <_ZTV5Timer>:
	...
   db238:	42ad 000d 4301 000d 41a1 000d               .B...C...A..

000db244 <_ZTV17PublishQueueAsync>:
	...
   db24c:	41ad 000d 41c1 000d 5eed 000d 6079 000d     .A...A...^..y`..
   db25c:	6039 000d 6017 000d 61bf 000d 605f 000d     9`...`...a.._`..

000db26c <_ZTV8MB85RC64>:
	...
   db274:	41d5 000d 41e9 000d 54e5 000d 557b 000d     .A...A...T..{U..
   db284:	55fd 000d ad70 000d ad78 000d ad7c 000d     .U..p...x...|...
   db294:	ad85 000d ad8d 000d ad99 000d ad9f 000d     ................
   db2a4:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   db2b4:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000db2e4 <_ZL13releaseNumber>:
   db2e4:	2e31 3430 0000 0000                         1.04....

000db2ec <_ZL17FRAMversionNumber>:
   db2ec:	0009 0000 7277 7469 4465 7461 2061 6166     ....writeData fa
   db2fc:	6c69 6465 6420 7275 6e69 2067 7265 7361     iled during eras
   db30c:	2065 7266 6d61 6441 7264 253d 0075 0000     e framAddr=%u...

000db31c <_ZTV6MB85RC>:
	...
   db324:	5405 000d 5407 000d 54e5 000d 557b 000d     .T...T...T..{U..
   db334:	55fd 000d 6564 6976 6563 6552 6461 6620     .U..deviceRead f
   db344:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   db354:	2074 6954 656d 6620 6f72 206d 5452 2043     t Time from RTC 
   db364:	7325 6400 7665 6369 5765 6972 6574 6620     %s.deviceWrite f
   db374:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   db384:	2074 5452 2043 7266 6d6f 6320 6f6c 6475     t RTC from cloud
   db394:	2520 0073 6c63 756f 2064 6974 656d 6e20      %s.cloud time n
   db3a4:	746f 7620 6c61 6469 6400 7665 6369 5765     ot valid.deviceW
   db3b4:	6972 6574 4545 5250 4d4f 6620 6961 656c     riteEEPROM faile
   db3c4:	2064 7473 7461 253d 0064 7061 2e70 7472     d stat=%d.app.rt
   db3d4:	0063 0000                                   c...

000db3d8 <_ZTV12MCP79410SRAM>:
	...
   db3e0:	56bd 000d 56d3 000d 56ad 000d 56b1 000d     .V...V...V...V..
   db3f0:	56fd 000d 59e5 000d 5c05 000d               .V...Y...\..

000db3fc <_ZTV12MCP79410Time>:
	...
   db404:	56c1 000d 56c5 000d                         .V...V..

000db40c <_ZTV14MCP79410EEPROM>:
	...
   db414:	56bf 000d 56e1 000d 56b5 000d 56b9 000d     .V...V...V...V..
   db424:	56fd 000d 5a1f 000d 5e45 000d               .V...Z..E^..

000db430 <_ZTV8MCP79410>:
	...
   db438:	56c3 000d 56ef 000d 7550 6c62 7369 5168     .V...V..PublishQ
   db448:	6575 6575 7341 6e79 0063 7571 7565 6965     ueueAsync.queuei
   db458:	676e 6520 6576 746e 614e 656d 253d 2073     ng eventName=%s 
   db468:	6164 6174 253d 2073 7474 3d6c 6425 6620     data=%s ttl=%d f
   db478:	616c 7367 3d31 6425 6620 616c 7367 3d32     lags1=%d flags2=
   db488:	6425 7320 7a69 3d65 6425 7000 6275 696c     %d size=%d.publi
   db498:	6873 6e69 2067 7325 2520 2073 7474 3d6c     shing %s %s ttl=
   db4a8:	6425 6620 616c 7367 253d 0078 7570 6c62     %d flags=%x.publ
   db4b8:	7369 6568 2064 7573 6363 7365 6673 6c75     ished successful
   db4c8:	796c 7000 6275 696c 6873 6465 6620 6961     ly.published fai
   db4d8:	656c 2c64 7720 6c69 206c 6572 7274 2079     led, will retry 
   db4e8:	6e69 2520 756c 6d20 0073 7061 2e70 7570     in %lu ms.app.pu
   db4f8:	7162 0000                                   bq..

000db4fc <_ZTV21PublishQueueAsyncBase>:
	...
   db50c:	5eed 000d 40a5 000d 40a5 000d 40a5 000d     .^...@...@...@..
   db51c:	40a5 000d 40a5 000d                         .@...@..

000db524 <_ZTV25PublishQueueAsyncRetained>:
	...
   db52c:	5fd5 000d 5fe9 000d 5eed 000d 6079 000d     ._..._...^..y`..
   db53c:	6039 000d 6017 000d 61bf 000d 605f 000d     9`...`...a.._`..

000db54c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   db554:	6bf9 000d 6bff 000d 6c3d 000d 6c0d 000d     .k...k..=l...l..
   db564:	6bfb 000d                                   .k..

000db568 <_ZTVN5spark13EthernetClassE>:
	...
   db570:	7203 000d 71f9 000d 71ef 000d 71e5 000d     .r...q...q...q..
   db580:	71d9 000d 71cd 000d 71c1 000d 71b9 000d     .q...q...q...q..
   db590:	71af 000d 71a5 000d 74e9 000d               .q...q...t..

000db59c <_ZTV7TwoWire>:
	...
   db5a4:	7221 000d 726b 000d 7243 000d 7223 000d     !r..kr..Cr..#r..
   db5b4:	724b 000d 7253 000d 725b 000d 7263 000d     Kr..Sr..[r..cr..

000db5c4 <_ZTV9IPAddress>:
	...
   db5cc:	739d 000d 738d 000d 738f 000d 7061 0070     .s...s...s..app.

000db5dc <_ZTVN5spark12NetworkClassE>:
	...
   db5e4:	7481 000d 748b 000d 7495 000d 749f 000d     .t...t...t...t..
   db5f4:	74a9 000d 74b5 000d 74c1 000d 74cd 000d     .t...t...t...t..
   db604:	74d5 000d 74df 000d 74e9 000d 005a 2b25     .t...t...t..Z.%+
   db614:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   db624:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   db634:	6974 656d 0000 0000                         time....

000db63c <_ZTV11USARTSerial>:
	...
   db644:	7bf9 000d 7c65 000d 7c3d 000d 75d1 000d     .{..e|..=|...u..
   db654:	7c0d 000d 7c29 000d 7c1b 000d 7c37 000d     .|..)|...|..7|..
   db664:	7bfb 000d 7bff 000d                         .{...{..

000db66c <_ZTV9USBSerial>:
	...
   db674:	7cf9 000d 7d61 000d 7d37 000d 75d1 000d     .|..a}..7}...u..
   db684:	7d29 000d 7cfb 000d 7d0b 000d 7d5b 000d     )}...|...}..[}..
   db694:	7d1b 000d 7cf5 000d                         .}...|..

000db69c <_ZTVN5spark9WiFiClassE>:
	...
   db6a4:	7e5b 000d 7e51 000d 7e47 000d 7dfd 000d     [~..Q~..G~...}..
   db6b4:	7e3b 000d 7e2f 000d 7e23 000d 7e1b 000d     ;~../~..#~...~..
   db6c4:	7e11 000d 7e07 000d 74e9 000d               .~...~...t..

000db6d0 <_ZSt7nothrow>:
   db6d0:	0000 0000 7173 7472 2500 332e 2073 2e25     ....sqrt.%.3s %.
   db6e0:	7333 3325 2064 2e25 6432 253a 322e 3a64     3s%3d %.2d:%.2d:
   db6f0:	2e25 6432 2520 0a64                          %.2d %d..

000db6f9 <day_name.6145>:
   db6f9:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   db709:	6972 6153                                    riSat

000db70e <mon_name.6146>:
   db70e:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   db71e:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   db72e:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000db740 <fpi.7566>:
   db740:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   db750:	0000 0000                                   ....

000db754 <fpinan.7602>:
   db754:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   db764:	0000 0000                                   ....

000db768 <tinytens>:
   db768:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   db778:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   db788:	6f43 64ac 0628 1168                         Co.d(.h.

000db790 <_ctype_>:
   db790:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   db7a0:	2020 2020 2020 2020 2020 2020 2020 2020                     
   db7b0:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   db7c0:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   db7d0:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   db7e0:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   db7f0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   db800:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   db810:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   db890:	2e00 0000                                   ....

000db894 <_C_numeric_locale>:
   db894:	b891 000d b6f8 000d dec4 2003 0043 4f50     ........... C.PO
   db8a4:	4953 0058                                   SIX.

000db8a8 <__mprec_bigtens>:
   db8a8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   db8b8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   db8c8:	bf3c 7f73 4fdd 7515                         <.s..O.u

000db8d0 <__mprec_tens>:
   db8d0:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   db8e0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   db8f0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   db900:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   db910:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   db920:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   db930:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   db940:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   db950:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   db960:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   db970:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   db980:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   db990:	9db4 79d9 7843 44ea                         ...yCx.D

000db998 <p05.7490>:
   db998:	0005 0000 0019 0000 007d 0000               ........}...

000db9a4 <link_const_variable_data_end>:
   db9a4:	000d51a5 	.word	0x000d51a5
   db9a8:	000d5e75 	.word	0x000d5e75
   db9ac:	000d6451 	.word	0x000d6451
   db9b0:	000d6bd1 	.word	0x000d6bd1
   db9b4:	000d720d 	.word	0x000d720d
   db9b8:	000d7471 	.word	0x000d7471
   db9bc:	000d75bd 	.word	0x000d75bd
   db9c0:	000d7671 	.word	0x000d7671
   db9c4:	000d78a5 	.word	0x000d78a5
   db9c8:	000d7be5 	.word	0x000d7be5
   db9cc:	000d7e65 	.word	0x000d7e65
