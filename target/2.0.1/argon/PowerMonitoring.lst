
/Users/abdulhannanmustajab/Desktop/IoT/Power-Monitoring/PowerMonitoring/target/2.0.1/argon/PowerMonitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008230  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  2003f400  000dc250  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002ec  2003dbb0  000dca54  0001dbb0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000958  2003dea0  2003dea0  0002dea0  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000dcd40  000dcd40  0002cd40  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000dcd68  000dcd68  0002cd68  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001ab8e4  00000000  00000000  0002cd6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001b619  00000000  00000000  001d8650  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00032aa7  00000000  00000000  001f3c69  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002ec0  00000000  00000000  00226710  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008990  00000000  00000000  002295d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003f007  00000000  00000000  00231f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00046e3b  00000000  00000000  00270f67  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0011396a  00000000  00000000  002b7da2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000089a4  00000000  00000000  003cb70c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fa3f 	bl	d94b4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fa61 	bl	d9504 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dbb0 	.word	0x2003dbb0
   d404c:	000dca54 	.word	0x000dca54
   d4050:	2003de9c 	.word	0x2003de9c
   d4054:	2003dea0 	.word	0x2003dea0
   d4058:	2003e7f8 	.word	0x2003e7f8

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f004 fabb 	bl	d85dc <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dc224 	.word	0x000dc224
   d4080:	000dc250 	.word	0x000dc250

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 b88c 	b.w	d51a0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 ff4b 	bl	d4f24 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f004 ba65 	b.w	d8560 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 bff1 	b.w	d707c <malloc>

000d409a <_Znaj>:
   d409a:	f002 bfef 	b.w	d707c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 bff5 	b.w	d708c <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 fec8 	bl	d6e40 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d6b71 	.word	0x000d6b71

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z11watchdogISRv>:
}


void watchdogISR()
{
  watchdogFlag = true;
   d40c8:	4b01      	ldr	r3, [pc, #4]	; (d40d0 <_Z11watchdogISRv+0x8>)
   d40ca:	2201      	movs	r2, #1
   d40cc:	701a      	strb	r2, [r3, #0]
}
   d40ce:	4770      	bx	lr
   d40d0:	2003e5fd 	.word	0x2003e5fd

000d40d4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40d4:	6803      	ldr	r3, [r0, #0]
   d40d6:	4718      	bx	r3

000d40d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40d8:	2a01      	cmp	r2, #1
   d40da:	d003      	beq.n	d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40dc:	2a02      	cmp	r2, #2
   d40de:	d003      	beq.n	d40e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40e0:	2000      	movs	r0, #0
   d40e2:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40e4:	6001      	str	r1, [r0, #0]
	      break;
   d40e6:	e7fb      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40e8:	680b      	ldr	r3, [r1, #0]
   d40ea:	6003      	str	r3, [r0, #0]
	}
   d40ec:	e7f8      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	...

000d40f0 <_Z10measureNow6String>:
  return 1;
}


int measureNow(String command) // Function to force sending data in current hour
{
   d40f0:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40f2:	4904      	ldr	r1, [pc, #16]	; (d4104 <_Z10measureNow6String+0x14>)
   d40f4:	f003 fe9e 	bl	d7e34 <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d40f8:	b118      	cbz	r0, d4102 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d40fa:	4b03      	ldr	r3, [pc, #12]	; (d4108 <_Z10measureNow6String+0x18>)
   d40fc:	2203      	movs	r2, #3
   d40fe:	701a      	strb	r2, [r3, #0]
    return 1;
   d4100:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4102:	bd08      	pop	{r3, pc}
   d4104:	000db3ab 	.word	0x000db3ab
   d4108:	2003e5d1 	.word	0x2003e5d1

000d410c <_Z12enableSensor6String>:

/* 
  EnableSensor (String Sensor)
  This function takes in the sensor number as integer and enables or disable the sensor accordingly.
*/
int enableSensor(String Sensor){
   d410c:	b570      	push	{r4, r5, r6, lr}
   d410e:	b0c2      	sub	sp, #264	; 0x108
  char * pEND;
  char data[256];
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4110:	6800      	ldr	r0, [r0, #0]
   d4112:	220a      	movs	r2, #10
   d4114:	a901      	add	r1, sp, #4
   d4116:	f006 f92b 	bl	da370 <strtol>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d411a:	1e43      	subs	r3, r0, #1
   d411c:	2b06      	cmp	r3, #6
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d411e:	4604      	mov	r4, r0
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d4120:	d82b      	bhi.n	d417a <_Z12enableSensor6String+0x6e>
 
  if (tempSensor == 1){
   d4122:	2801      	cmp	r0, #1
   d4124:	4b16      	ldr	r3, [pc, #88]	; (d4180 <_Z12enableSensor6String+0x74>)
   d4126:	4e17      	ldr	r6, [pc, #92]	; (d4184 <_Z12enableSensor6String+0x78>)
   d4128:	d108      	bne.n	d413c <_Z12enableSensor6String+0x30>
    sysStatus.sensorOneConnected = true;
   d412a:	7718      	strb	r0, [r3, #28]
    snprintf(data, sizeof(data), "Enabled Sensor One");
   d412c:	4916      	ldr	r1, [pc, #88]	; (d4188 <_Z12enableSensor6String+0x7c>)
   d412e:	a802      	add	r0, sp, #8
   d4130:	f005 fa1e 	bl	d9570 <strcpy>
    sysStatusWriteNeeded = true;  
   d4134:	7034      	strb	r4, [r6, #0]
    sysStatus.sensorSixConnected = true;
    snprintf(data, sizeof(data), "Enabled Sensor Six");
    sysStatusWriteNeeded = true; 
    return 1;      
  }
}
   d4136:	4620      	mov	r0, r4
   d4138:	b042      	add	sp, #264	; 0x108
   d413a:	bd70      	pop	{r4, r5, r6, pc}
  } else if (tempSensor == 2){
   d413c:	2802      	cmp	r0, #2
   d413e:	f04f 0501 	mov.w	r5, #1
   d4142:	d107      	bne.n	d4154 <_Z12enableSensor6String+0x48>
    snprintf(data, sizeof(data), "Enabled Sensor Two");
   d4144:	4911      	ldr	r1, [pc, #68]	; (d418c <_Z12enableSensor6String+0x80>)
    sysStatus.sensorTwoConnected = true;
   d4146:	775d      	strb	r5, [r3, #29]
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d4148:	a802      	add	r0, sp, #8
   d414a:	f005 fa11 	bl	d9570 <strcpy>
    return 1;      
   d414e:	462c      	mov	r4, r5
    sysStatusWriteNeeded = true; 
   d4150:	7035      	strb	r5, [r6, #0]
    return 1;      
   d4152:	e7f0      	b.n	d4136 <_Z12enableSensor6String+0x2a>
  else if (tempSensor == 3){
   d4154:	2803      	cmp	r0, #3
   d4156:	d102      	bne.n	d415e <_Z12enableSensor6String+0x52>
    snprintf(data, sizeof(data), "Enabled Sensor Three");
   d4158:	490d      	ldr	r1, [pc, #52]	; (d4190 <_Z12enableSensor6String+0x84>)
    sysStatus.sensorThreeConnected = true;
   d415a:	779d      	strb	r5, [r3, #30]
    snprintf(data, sizeof(data), "Enabled Sensor Three");
   d415c:	e7f4      	b.n	d4148 <_Z12enableSensor6String+0x3c>
  else if (tempSensor == 4){
   d415e:	2804      	cmp	r0, #4
   d4160:	d102      	bne.n	d4168 <_Z12enableSensor6String+0x5c>
    snprintf(data, sizeof(data), "Enabled Sensor Four");
   d4162:	490c      	ldr	r1, [pc, #48]	; (d4194 <_Z12enableSensor6String+0x88>)
    sysStatus.sensorFourConnected = true;
   d4164:	77dd      	strb	r5, [r3, #31]
    snprintf(data, sizeof(data), "Enabled Sensor Four");
   d4166:	e7ef      	b.n	d4148 <_Z12enableSensor6String+0x3c>
  else if (tempSensor == 5){
   d4168:	2805      	cmp	r0, #5
    snprintf(data, sizeof(data), "Enabled Sensor Five");
   d416a:	bf0b      	itete	eq
   d416c:	490a      	ldreq	r1, [pc, #40]	; (d4198 <_Z12enableSensor6String+0x8c>)
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d416e:	490b      	ldrne	r1, [pc, #44]	; (d419c <_Z12enableSensor6String+0x90>)
    sysStatus.sensorFiveConnected = true;
   d4170:	f883 5020 	strbeq.w	r5, [r3, #32]
    sysStatus.sensorSixConnected = true;
   d4174:	f883 5021 	strbne.w	r5, [r3, #33]	; 0x21
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d4178:	e7e6      	b.n	d4148 <_Z12enableSensor6String+0x3c>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d417a:	2400      	movs	r4, #0
   d417c:	e7db      	b.n	d4136 <_Z12enableSensor6String+0x2a>
   d417e:	bf00      	nop
   d4180:	2003e5d4 	.word	0x2003e5d4
   d4184:	2003e5fc 	.word	0x2003e5fc
   d4188:	000db3ad 	.word	0x000db3ad
   d418c:	000db3c0 	.word	0x000db3c0
   d4190:	000db3d3 	.word	0x000db3d3
   d4194:	000db3e8 	.word	0x000db3e8
   d4198:	000db3fc 	.word	0x000db3fc
   d419c:	000db410 	.word	0x000db410

000d41a0 <_Z13disableSensor6String>:

/* 
  EnableSensor (String Sensor)
  This function takes in the sensor number as integer and enables or disable the sensor accordingly.
*/
int disableSensor(String Sensor){
   d41a0:	b530      	push	{r4, r5, lr}
   d41a2:	b0c3      	sub	sp, #268	; 0x10c
  char * pEND;
  char data[256];
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d41a4:	6800      	ldr	r0, [r0, #0]
   d41a6:	220a      	movs	r2, #10
   d41a8:	a901      	add	r1, sp, #4
   d41aa:	f006 f8e1 	bl	da370 <strtol>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d41ae:	1e43      	subs	r3, r0, #1
   d41b0:	2b06      	cmp	r3, #6
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d41b2:	4604      	mov	r4, r0
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d41b4:	f04f 0300 	mov.w	r3, #0
   d41b8:	d828      	bhi.n	d420c <_Z13disableSensor6String+0x6c>
 
  if (tempSensor == 1){
   d41ba:	2801      	cmp	r0, #1
   d41bc:	4a14      	ldr	r2, [pc, #80]	; (d4210 <_Z13disableSensor6String+0x70>)
   d41be:	4d15      	ldr	r5, [pc, #84]	; (d4214 <_Z13disableSensor6String+0x74>)
   d41c0:	d108      	bne.n	d41d4 <_Z13disableSensor6String+0x34>
    sysStatus.sensorOneConnected = false;
    snprintf(data, sizeof(data), "Disabled Sensor One");
   d41c2:	4915      	ldr	r1, [pc, #84]	; (d4218 <_Z13disableSensor6String+0x78>)
    sysStatus.sensorOneConnected = false;
   d41c4:	7713      	strb	r3, [r2, #28]
    snprintf(data, sizeof(data), "Disabled Sensor One");
   d41c6:	a802      	add	r0, sp, #8
   d41c8:	f005 f9d2 	bl	d9570 <strcpy>
    return 1;   
  }
  else if (tempSensor == 6){
    sysStatus.sensorSixConnected = false;
    snprintf(data, sizeof(data), "Disabled Sensor Six");
    sysStatusWriteNeeded = true; 
   d41cc:	702c      	strb	r4, [r5, #0]
    return 1;      
  }
}
   d41ce:	4620      	mov	r0, r4
   d41d0:	b043      	add	sp, #268	; 0x10c
   d41d2:	bd30      	pop	{r4, r5, pc}
  } else if (tempSensor == 2){
   d41d4:	2802      	cmp	r0, #2
   d41d6:	d106      	bne.n	d41e6 <_Z13disableSensor6String+0x46>
    snprintf(data, sizeof(data), "Disabled Sensor Two");
   d41d8:	4910      	ldr	r1, [pc, #64]	; (d421c <_Z13disableSensor6String+0x7c>)
    sysStatus.sensorTwoConnected = false;
   d41da:	7753      	strb	r3, [r2, #29]
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d41dc:	a802      	add	r0, sp, #8
   d41de:	f005 f9c7 	bl	d9570 <strcpy>
    sysStatusWriteNeeded = true; 
   d41e2:	2401      	movs	r4, #1
   d41e4:	e7f2      	b.n	d41cc <_Z13disableSensor6String+0x2c>
  else if (tempSensor == 3){
   d41e6:	2803      	cmp	r0, #3
   d41e8:	d102      	bne.n	d41f0 <_Z13disableSensor6String+0x50>
    snprintf(data, sizeof(data), "Disabled Sensor Three");
   d41ea:	490d      	ldr	r1, [pc, #52]	; (d4220 <_Z13disableSensor6String+0x80>)
    sysStatus.sensorThreeConnected = false;
   d41ec:	7793      	strb	r3, [r2, #30]
    snprintf(data, sizeof(data), "Disabled Sensor Three");
   d41ee:	e7f5      	b.n	d41dc <_Z13disableSensor6String+0x3c>
  else if (tempSensor == 4){
   d41f0:	2804      	cmp	r0, #4
   d41f2:	d102      	bne.n	d41fa <_Z13disableSensor6String+0x5a>
    snprintf(data, sizeof(data), "Disabled Sensor Four");
   d41f4:	490b      	ldr	r1, [pc, #44]	; (d4224 <_Z13disableSensor6String+0x84>)
    sysStatus.sensorFourConnected = false;
   d41f6:	77d3      	strb	r3, [r2, #31]
    snprintf(data, sizeof(data), "Disabled Sensor Four");
   d41f8:	e7f0      	b.n	d41dc <_Z13disableSensor6String+0x3c>
  else if (tempSensor == 5){
   d41fa:	2805      	cmp	r0, #5
    snprintf(data, sizeof(data), "Disabled Sensor Five");
   d41fc:	bf0b      	itete	eq
   d41fe:	490a      	ldreq	r1, [pc, #40]	; (d4228 <_Z13disableSensor6String+0x88>)
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d4200:	490a      	ldrne	r1, [pc, #40]	; (d422c <_Z13disableSensor6String+0x8c>)
    sysStatus.sensorFiveConnected = false;
   d4202:	f882 3020 	strbeq.w	r3, [r2, #32]
    sysStatus.sensorSixConnected = false;
   d4206:	f882 3021 	strbne.w	r3, [r2, #33]	; 0x21
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d420a:	e7e7      	b.n	d41dc <_Z13disableSensor6String+0x3c>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d420c:	461c      	mov	r4, r3
   d420e:	e7de      	b.n	d41ce <_Z13disableSensor6String+0x2e>
   d4210:	2003e5d4 	.word	0x2003e5d4
   d4214:	2003e5fc 	.word	0x2003e5fc
   d4218:	000db423 	.word	0x000db423
   d421c:	000db437 	.word	0x000db437
   d4220:	000db44b 	.word	0x000db44b
   d4224:	000db461 	.word	0x000db461
   d4228:	000db476 	.word	0x000db476
   d422c:	000db48b 	.word	0x000db48b

000d4230 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4230:	6943      	ldr	r3, [r0, #20]
   d4232:	b113      	cbz	r3, d423a <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4234:	6983      	ldr	r3, [r0, #24]
   d4236:	300c      	adds	r0, #12
   d4238:	4718      	bx	r3
            callback();
        }
    }
   d423a:	4770      	bx	lr

000d423c <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d423c:	b510      	push	{r4, lr}
   d423e:	4b03      	ldr	r3, [pc, #12]	; (d424c <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d4240:	6003      	str	r3, [r0, #0]
   d4242:	4604      	mov	r4, r0
   d4244:	f002 f9c6 	bl	d65d4 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d4248:	4620      	mov	r0, r4
   d424a:	bd10      	pop	{r4, pc}
   d424c:	000dbac8 	.word	0x000dbac8

000d4250 <_ZN17PublishQueueAsyncD0Ev>:
   d4250:	b510      	push	{r4, lr}
   d4252:	4604      	mov	r4, r0
   d4254:	f7ff fff2 	bl	d423c <_ZN17PublishQueueAsyncD1Ev>
   d4258:	4620      	mov	r0, r4
   d425a:	2138      	movs	r1, #56	; 0x38
   d425c:	f004 fab5 	bl	d87ca <_ZdlPvj>
   d4260:	4620      	mov	r0, r4
   d4262:	bd10      	pop	{r4, pc}

000d4264 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4264:	b510      	push	{r4, lr}
   d4266:	4b03      	ldr	r3, [pc, #12]	; (d4274 <_ZN8MB85RC64D1Ev+0x10>)
   d4268:	6003      	str	r3, [r0, #0]
   d426a:	4604      	mov	r4, r0
   d426c:	f001 fbca 	bl	d5a04 <_ZN6MB85RCD1Ev>
   d4270:	4620      	mov	r0, r4
   d4272:	bd10      	pop	{r4, pc}
   d4274:	000dbaf0 	.word	0x000dbaf0

000d4278 <_ZN8MB85RC64D0Ev>:
   d4278:	b510      	push	{r4, lr}
   d427a:	4604      	mov	r4, r0
   d427c:	f7ff fff2 	bl	d4264 <_ZN8MB85RC64D1Ev>
   d4280:	4620      	mov	r0, r4
   d4282:	2110      	movs	r1, #16
   d4284:	f004 faa1 	bl	d87ca <_ZdlPvj>
   d4288:	4620      	mov	r0, r4
   d428a:	bd10      	pop	{r4, pc}

000d428c <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d428c:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d428e:	2100      	movs	r1, #0
   d4290:	4604      	mov	r4, r0
   d4292:	4608      	mov	r0, r1
   d4294:	f002 fbf4 	bl	d6a80 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4298:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d429a:	4620      	mov	r0, r4
   d429c:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d429e:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d42a0:	f002 fc06 	bl	d6ab0 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d42a4:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d42a6:	b10c      	cbz	r4, d42ac <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d42a8:	2301      	movs	r3, #1
   d42aa:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d42ac:	2100      	movs	r1, #0
   d42ae:	2001      	movs	r0, #1
   d42b0:	f002 fbe6 	bl	d6a80 <os_thread_scheduling>
            }
        }
        if (t) {
   d42b4:	b12c      	cbz	r4, d42c2 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d42b6:	6823      	ldr	r3, [r4, #0]
   d42b8:	4620      	mov	r0, r4
   d42ba:	689b      	ldr	r3, [r3, #8]
   d42bc:	4798      	blx	r3
            t->running = false;
   d42be:	2300      	movs	r3, #0
   d42c0:	7123      	strb	r3, [r4, #4]
        }
    }
   d42c2:	b002      	add	sp, #8
   d42c4:	bd10      	pop	{r4, pc}

000d42c6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d42c6:	b510      	push	{r4, lr}
   d42c8:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d42ca:	6800      	ldr	r0, [r0, #0]
   d42cc:	b108      	cbz	r0, d42d2 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d42ce:	f002 fedd 	bl	d708c <free>
class SystemClass {
   d42d2:	4620      	mov	r0, r4
   d42d4:	bd10      	pop	{r4, pc}
	...

000d42d8 <_Z16keepAliveMessagev>:
void keepAliveMessage() {
   d42d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d42da:	4b10      	ldr	r3, [pc, #64]	; (d431c <_Z16keepAliveMessagev+0x44>)
   d42dc:	4a10      	ldr	r2, [pc, #64]	; (d4320 <_Z16keepAliveMessagev+0x48>)
   d42de:	781b      	ldrb	r3, [r3, #0]
   d42e0:	7812      	ldrb	r2, [r2, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d42e2:	4910      	ldr	r1, [pc, #64]	; (d4324 <_Z16keepAliveMessagev+0x4c>)
   d42e4:	4313      	orrs	r3, r2
   d42e6:	f88d 3000 	strb.w	r3, [sp]
   d42ea:	2200      	movs	r2, #0
   d42ec:	233c      	movs	r3, #60	; 0x3c
   d42ee:	a802      	add	r0, sp, #8
   d42f0:	f003 f8e2 	bl	d74b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d42f4:	9c03      	ldr	r4, [sp, #12]
   d42f6:	b17c      	cbz	r4, d4318 <_Z16keepAliveMessagev+0x40>
      if (--_M_use_count == 0)
   d42f8:	6863      	ldr	r3, [r4, #4]
   d42fa:	3b01      	subs	r3, #1
   d42fc:	6063      	str	r3, [r4, #4]
   d42fe:	b95b      	cbnz	r3, d4318 <_Z16keepAliveMessagev+0x40>
          _M_dispose();
   d4300:	6823      	ldr	r3, [r4, #0]
   d4302:	4620      	mov	r0, r4
   d4304:	689b      	ldr	r3, [r3, #8]
   d4306:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4308:	68a3      	ldr	r3, [r4, #8]
   d430a:	3b01      	subs	r3, #1
   d430c:	60a3      	str	r3, [r4, #8]
   d430e:	b91b      	cbnz	r3, d4318 <_Z16keepAliveMessagev+0x40>
            _M_destroy();
   d4310:	6823      	ldr	r3, [r4, #0]
   d4312:	4620      	mov	r0, r4
   d4314:	68db      	ldr	r3, [r3, #12]
   d4316:	4798      	blx	r3
}
   d4318:	b004      	add	sp, #16
   d431a:	bd10      	pop	{r4, pc}
   d431c:	2003df90 	.word	0x2003df90
   d4320:	2003df91 	.word	0x2003df91
   d4324:	000db49f 	.word	0x000db49f

000d4328 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4328:	b510      	push	{r4, lr}
      if (_M_manager)
   d432a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d432c:	4604      	mov	r4, r0
      if (_M_manager)
   d432e:	b113      	cbz	r3, d4336 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4330:	2203      	movs	r2, #3
   d4332:	4601      	mov	r1, r0
   d4334:	4798      	blx	r3
    }
   d4336:	4620      	mov	r0, r4
   d4338:	bd10      	pop	{r4, pc}
	...

000d433c <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d433c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d433e:	4b13      	ldr	r3, [pc, #76]	; (d438c <_ZN5TimerD1Ev+0x50>)
   d4340:	6003      	str	r3, [r0, #0]
   d4342:	4604      	mov	r4, r0
        if (handle) {
   d4344:	6880      	ldr	r0, [r0, #8]
   d4346:	b1c8      	cbz	r0, d437c <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4348:	2500      	movs	r5, #0
   d434a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d434e:	e9cd 3500 	strd	r3, r5, [sp]
   d4352:	2102      	movs	r1, #2
   d4354:	462b      	mov	r3, r5
   d4356:	462a      	mov	r2, r5
   d4358:	f002 fbb2 	bl	d6ac0 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   d435c:	68a0      	ldr	r0, [r4, #8]
   d435e:	4629      	mov	r1, r5
   d4360:	f002 fbe6 	bl	d6b30 <os_timer_set_id>
            while (running) {
   d4364:	7923      	ldrb	r3, [r4, #4]
   d4366:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d436a:	b113      	cbz	r3, d4372 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d436c:	f002 fb80 	bl	d6a70 <os_thread_yield>
            while (running) {
   d4370:	e7f8      	b.n	d4364 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   d4372:	68a0      	ldr	r0, [r4, #8]
   d4374:	4629      	mov	r1, r5
   d4376:	f002 fb93 	bl	d6aa0 <os_timer_destroy>
            handle = nullptr;
   d437a:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d437c:	f104 000c 	add.w	r0, r4, #12
   d4380:	f7ff ffd2 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
    }
   d4384:	4620      	mov	r0, r4
   d4386:	b003      	add	sp, #12
   d4388:	bd30      	pop	{r4, r5, pc}
   d438a:	bf00      	nop
   d438c:	000dbab4 	.word	0x000dbab4

000d4390 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d4390:	b510      	push	{r4, lr}
   d4392:	4604      	mov	r4, r0
    }
   d4394:	f7ff ffd2 	bl	d433c <_ZN5TimerD1Ev>
   d4398:	4620      	mov	r0, r4
   d439a:	211c      	movs	r1, #28
   d439c:	f004 fa15 	bl	d87ca <_ZdlPvj>
   d43a0:	4620      	mov	r0, r4
   d43a2:	bd10      	pop	{r4, pc}

000d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>:
    static bool _function(const char *funcKey, user_function_int_str_t* func)
   d43a4:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d43a6:	4801      	ldr	r0, [pc, #4]	; (d43ac <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
   d43a8:	f002 bf81 	b.w	d72ae <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d43ac:	000d7283 	.word	0x000d7283

000d43b0 <_ZN10CloudClass9keepAliveEj>:
    		spark_process();
    }
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
   d43b0:	b507      	push	{r0, r1, r2, lr}
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d43b2:	2208      	movs	r2, #8
        particle::protocol::connection_properties_t conn_prop = {0};
   d43b4:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   d43b6:	f8ad 2000 	strh.w	r2, [sp]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d43ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d43be:	2201      	movs	r2, #1
   d43c0:	9201      	str	r2, [sp, #4]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d43c2:	4341      	muls	r1, r0
   d43c4:	466a      	mov	r2, sp
   d43c6:	4618      	mov	r0, r3
        particle::protocol::connection_properties_t conn_prop = {0};
   d43c8:	f8ad 3002 	strh.w	r3, [sp, #2]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d43cc:	f002 fdf6 	bl	d6fbc <spark_set_connection_property>
    }
   d43d0:	b003      	add	sp, #12
   d43d2:	f85d fb04 	ldr.w	pc, [sp], #4

000d43d6 <_ZN5Timer12changePeriodEjj>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d43d6:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d43d8:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d43da:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d43dc:	2100      	movs	r1, #0
   d43de:	b140      	cbz	r0, d43f2 <_ZN5Timer12changePeriodEjj+0x1c>
   d43e0:	e9cd 2100 	strd	r2, r1, [sp]
   d43e4:	460a      	mov	r2, r1
   d43e6:	2103      	movs	r1, #3
   d43e8:	f002 fb6a 	bl	d6ac0 <os_timer_change>
   d43ec:	fab0 f080 	clz	r0, r0
   d43f0:	0940      	lsrs	r0, r0, #5
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d43f2:	b003      	add	sp, #12
   d43f4:	f85d fb04 	ldr.w	pc, [sp], #4

000d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d43f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d43fa:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d43fc:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4400:	f88d 3000 	strb.w	r3, [sp]
   d4404:	f88d 5004 	strb.w	r5, [sp, #4]
   d4408:	68e4      	ldr	r4, [r4, #12]
   d440a:	233c      	movs	r3, #60	; 0x3c
   d440c:	47a0      	blx	r4
	}
   d440e:	b003      	add	sp, #12
   d4410:	bd30      	pop	{r4, r5, pc}
	...

000d4414 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4414:	b510      	push	{r4, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d4416:	780b      	ldrb	r3, [r1, #0]
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4418:	b092      	sub	sp, #72	; 0x48
   d441a:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d441c:	b97b      	cbnz	r3, d443e <_Z14UbidotsHandlerPKcS0_+0x2a>
    snprintf(responseString, sizeof(responseString),"No Data");
   d441e:	4919      	ldr	r1, [pc, #100]	; (d4484 <_Z14UbidotsHandlerPKcS0_+0x70>)
   d4420:	a802      	add	r0, sp, #8
   d4422:	f005 f8a5 	bl	d9570 <strcpy>
        val_(0) {
   d4426:	2300      	movs	r3, #0
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
   d4428:	f88d 3000 	strb.w	r3, [sp]
   d442c:	4b16      	ldr	r3, [pc, #88]	; (d4488 <_Z14UbidotsHandlerPKcS0_+0x74>)
   d442e:	4917      	ldr	r1, [pc, #92]	; (d448c <_Z14UbidotsHandlerPKcS0_+0x78>)
   d4430:	781b      	ldrb	r3, [r3, #0]
   d4432:	4817      	ldr	r0, [pc, #92]	; (d4490 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4434:	aa02      	add	r2, sp, #8
   d4436:	f7ff ffdf 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d443a:	b012      	add	sp, #72	; 0x48
   d443c:	bd10      	pop	{r4, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d443e:	4608      	mov	r0, r1
   d4440:	f005 f813 	bl	d946a <atoi>
   d4444:	28c8      	cmp	r0, #200	; 0xc8
   d4446:	d10e      	bne.n	d4466 <_Z14UbidotsHandlerPKcS0_+0x52>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4448:	4912      	ldr	r1, [pc, #72]	; (d4494 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d444a:	a802      	add	r0, sp, #8
   d444c:	f005 f890 	bl	d9570 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4450:	f003 fe9f 	bl	d8192 <_ZN9TimeClass3nowEv>
   d4454:	4b10      	ldr	r3, [pc, #64]	; (d4498 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d4456:	6198      	str	r0, [r3, #24]
    sysStatusWriteNeeded = true;
   d4458:	4b10      	ldr	r3, [pc, #64]	; (d449c <_Z14UbidotsHandlerPKcS0_+0x88>)
   d445a:	2201      	movs	r2, #1
   d445c:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d445e:	4b10      	ldr	r3, [pc, #64]	; (d44a0 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d4460:	2200      	movs	r2, #0
   d4462:	701a      	strb	r2, [r3, #0]
   d4464:	e7df      	b.n	d4426 <_Z14UbidotsHandlerPKcS0_+0x12>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4466:	4620      	mov	r0, r4
   d4468:	f004 ffff 	bl	d946a <atoi>
   d446c:	28c9      	cmp	r0, #201	; 0xc9
   d446e:	d0eb      	beq.n	d4448 <_Z14UbidotsHandlerPKcS0_+0x34>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d4470:	4620      	mov	r0, r4
   d4472:	f004 fffa 	bl	d946a <atoi>
   d4476:	4a0b      	ldr	r2, [pc, #44]	; (d44a4 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d4478:	4603      	mov	r3, r0
   d447a:	2140      	movs	r1, #64	; 0x40
   d447c:	a802      	add	r0, sp, #8
   d447e:	f002 fe1d 	bl	d70bc <snprintf>
   d4482:	e7d0      	b.n	d4426 <_Z14UbidotsHandlerPKcS0_+0x12>
   d4484:	000db4a1 	.word	0x000db4a1
   d4488:	2003df91 	.word	0x2003df91
   d448c:	000db4d8 	.word	0x000db4d8
   d4490:	2003e438 	.word	0x2003e438
   d4494:	000db4a9 	.word	0x000db4a9
   d4498:	2003e5d4 	.word	0x2003e5d4
   d449c:	2003e5fc 	.word	0x2003e5fc
   d44a0:	2003dfb3 	.word	0x2003dfb3
   d44a4:	000db4bb 	.word	0x000db4bb

000d44a8 <_Z16setThirdPartySim6String>:
{
   d44a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d44aa:	491c      	ldr	r1, [pc, #112]	; (d451c <_Z16setThirdPartySim6String+0x74>)
   d44ac:	4605      	mov	r5, r0
   d44ae:	f003 fcc1 	bl	d7e34 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d44b2:	4604      	mov	r4, r0
   d44b4:	b300      	cbz	r0, d44f8 <_Z16setThirdPartySim6String+0x50>
    sysStatus.thirdPartySim = true;
   d44b6:	4c1a      	ldr	r4, [pc, #104]	; (d4520 <_Z16setThirdPartySim6String+0x78>)
   d44b8:	2301      	movs	r3, #1
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d44ba:	6860      	ldr	r0, [r4, #4]
    sysStatus.thirdPartySim = true;
   d44bc:	7063      	strb	r3, [r4, #1]
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d44be:	f7ff ff77 	bl	d43b0 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d44c2:	6863      	ldr	r3, [r4, #4]
   d44c4:	4817      	ldr	r0, [pc, #92]	; (d4524 <_Z16setThirdPartySim6String+0x7c>)
   d44c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d44ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d44ce:	4359      	muls	r1, r3
   d44d0:	f7ff ff81 	bl	d43d6 <_ZN5Timer12changePeriodEjj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d44d4:	f002 fd3a 	bl	d6f4c <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to 3rd Party Sim", PRIVATE);
   d44d8:	b148      	cbz	r0, d44ee <_Z16setThirdPartySim6String+0x46>
   d44da:	2300      	movs	r3, #0
   d44dc:	f88d 3000 	strb.w	r3, [sp]
   d44e0:	4b11      	ldr	r3, [pc, #68]	; (d4528 <_Z16setThirdPartySim6String+0x80>)
   d44e2:	4a12      	ldr	r2, [pc, #72]	; (d452c <_Z16setThirdPartySim6String+0x84>)
   d44e4:	781b      	ldrb	r3, [r3, #0]
   d44e6:	4912      	ldr	r1, [pc, #72]	; (d4530 <_Z16setThirdPartySim6String+0x88>)
   d44e8:	4812      	ldr	r0, [pc, #72]	; (d4534 <_Z16setThirdPartySim6String+0x8c>)
   d44ea:	f7ff ff85 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d44ee:	4b12      	ldr	r3, [pc, #72]	; (d4538 <_Z16setThirdPartySim6String+0x90>)
   d44f0:	2001      	movs	r0, #1
   d44f2:	7018      	strb	r0, [r3, #0]
}
   d44f4:	b003      	add	sp, #12
   d44f6:	bd30      	pop	{r4, r5, pc}
   d44f8:	4910      	ldr	r1, [pc, #64]	; (d453c <_Z16setThirdPartySim6String+0x94>)
   d44fa:	4628      	mov	r0, r5
   d44fc:	f003 fc9a 	bl	d7e34 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4500:	2800      	cmp	r0, #0
   d4502:	d0f7      	beq.n	d44f4 <_Z16setThirdPartySim6String+0x4c>
    sysStatus.thirdPartySim = false;
   d4504:	4b06      	ldr	r3, [pc, #24]	; (d4520 <_Z16setThirdPartySim6String+0x78>)
   d4506:	705c      	strb	r4, [r3, #1]
   d4508:	f002 fd20 	bl	d6f4c <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
   d450c:	2800      	cmp	r0, #0
   d450e:	d0ee      	beq.n	d44ee <_Z16setThirdPartySim6String+0x46>
   d4510:	4b05      	ldr	r3, [pc, #20]	; (d4528 <_Z16setThirdPartySim6String+0x80>)
   d4512:	f88d 4000 	strb.w	r4, [sp]
   d4516:	781b      	ldrb	r3, [r3, #0]
   d4518:	4a09      	ldr	r2, [pc, #36]	; (d4540 <_Z16setThirdPartySim6String+0x98>)
   d451a:	e7e4      	b.n	d44e6 <_Z16setThirdPartySim6String+0x3e>
   d451c:	000db3ab 	.word	0x000db3ab
   d4520:	2003e5d4 	.word	0x2003e5d4
   d4524:	2003e418 	.word	0x2003e418
   d4528:	2003df91 	.word	0x2003df91
   d452c:	000db4e5 	.word	0x000db4e5
   d4530:	000db555 	.word	0x000db555
   d4534:	2003e438 	.word	0x2003e438
   d4538:	2003e5fc 	.word	0x2003e5fc
   d453c:	000db4fa 	.word	0x000db4fa
   d4540:	000db4fc 	.word	0x000db4fc

000d4544 <_Z12setKeepAlive6String>:
{
   d4544:	b510      	push	{r4, lr}
   d4546:	b0c4      	sub	sp, #272	; 0x110
  int tempTime = strtol(command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4548:	6800      	ldr	r0, [r0, #0]
   d454a:	220a      	movs	r2, #10
   d454c:	a903      	add	r1, sp, #12
   d454e:	f005 ff0f 	bl	da370 <strtol>
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d4552:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   d4556:	d822      	bhi.n	d459e <_Z12setKeepAlive6String+0x5a>
  sysStatus.keepAlive = tempTime;
   d4558:	4c12      	ldr	r4, [pc, #72]	; (d45a4 <_Z12setKeepAlive6String+0x60>)
   d455a:	6060      	str	r0, [r4, #4]
  Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d455c:	f7ff ff28 	bl	d43b0 <_ZN10CloudClass9keepAliveEj>
  keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d4560:	6863      	ldr	r3, [r4, #4]
   d4562:	4811      	ldr	r0, [pc, #68]	; (d45a8 <_Z12setKeepAlive6String+0x64>)
   d4564:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4568:	4359      	muls	r1, r3
   d456a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d456e:	f7ff ff32 	bl	d43d6 <_ZN5Timer12changePeriodEjj>
  snprintf(data, sizeof(data), "Keep Alive set to %i sec",sysStatus.keepAlive);
   d4572:	6863      	ldr	r3, [r4, #4]
   d4574:	4a0d      	ldr	r2, [pc, #52]	; (d45ac <_Z12setKeepAlive6String+0x68>)
   d4576:	f44f 7180 	mov.w	r1, #256	; 0x100
   d457a:	a804      	add	r0, sp, #16
   d457c:	f002 fd9e 	bl	d70bc <snprintf>
   d4580:	2300      	movs	r3, #0
  publishQueue.publish("Keep Alive",data, PRIVATE);
   d4582:	f88d 3000 	strb.w	r3, [sp]
   d4586:	4b0a      	ldr	r3, [pc, #40]	; (d45b0 <_Z12setKeepAlive6String+0x6c>)
   d4588:	490a      	ldr	r1, [pc, #40]	; (d45b4 <_Z12setKeepAlive6String+0x70>)
   d458a:	781b      	ldrb	r3, [r3, #0]
   d458c:	480a      	ldr	r0, [pc, #40]	; (d45b8 <_Z12setKeepAlive6String+0x74>)
   d458e:	aa04      	add	r2, sp, #16
   d4590:	f7ff ff32 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatusWriteNeeded = true;                                                           // Need to store to FRAM back in the main loop
   d4594:	4b09      	ldr	r3, [pc, #36]	; (d45bc <_Z12setKeepAlive6String+0x78>)
   d4596:	2001      	movs	r0, #1
   d4598:	7018      	strb	r0, [r3, #0]
}
   d459a:	b044      	add	sp, #272	; 0x110
   d459c:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d459e:	2000      	movs	r0, #0
   d45a0:	e7fb      	b.n	d459a <_Z12setKeepAlive6String+0x56>
   d45a2:	bf00      	nop
   d45a4:	2003e5d4 	.word	0x2003e5d4
   d45a8:	2003e418 	.word	0x2003e418
   d45ac:	000db510 	.word	0x000db510
   d45b0:	2003df91 	.word	0x2003df91
   d45b4:	000db529 	.word	0x000db529
   d45b8:	2003e438 	.word	0x2003e438
   d45bc:	2003e5fc 	.word	0x2003e5fc

000d45c0 <_Z14setVerboseMode6String>:
{
   d45c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d45c2:	4916      	ldr	r1, [pc, #88]	; (d461c <_Z14setVerboseMode6String+0x5c>)
   d45c4:	4605      	mov	r5, r0
   d45c6:	f003 fc35 	bl	d7e34 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d45ca:	4604      	mov	r4, r0
   d45cc:	b188      	cbz	r0, d45f2 <_Z14setVerboseMode6String+0x32>
    sysStatus.verboseMode = true;
   d45ce:	4b14      	ldr	r3, [pc, #80]	; (d4620 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d45d0:	4a14      	ldr	r2, [pc, #80]	; (d4624 <_Z14setVerboseMode6String+0x64>)
   d45d2:	4915      	ldr	r1, [pc, #84]	; (d4628 <_Z14setVerboseMode6String+0x68>)
   d45d4:	4815      	ldr	r0, [pc, #84]	; (d462c <_Z14setVerboseMode6String+0x6c>)
    sysStatus.verboseMode = true;
   d45d6:	2401      	movs	r4, #1
   d45d8:	725c      	strb	r4, [r3, #9]
   d45da:	2300      	movs	r3, #0
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d45dc:	f88d 3000 	strb.w	r3, [sp]
   d45e0:	4b13      	ldr	r3, [pc, #76]	; (d4630 <_Z14setVerboseMode6String+0x70>)
   d45e2:	781b      	ldrb	r3, [r3, #0]
   d45e4:	f7ff ff08 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d45e8:	4b12      	ldr	r3, [pc, #72]	; (d4634 <_Z14setVerboseMode6String+0x74>)
    return 1;
   d45ea:	4620      	mov	r0, r4
    sysStatusWriteNeeded = true;
   d45ec:	701c      	strb	r4, [r3, #0]
}
   d45ee:	b003      	add	sp, #12
   d45f0:	bd30      	pop	{r4, r5, pc}
   d45f2:	4911      	ldr	r1, [pc, #68]	; (d4638 <_Z14setVerboseMode6String+0x78>)
   d45f4:	4628      	mov	r0, r5
   d45f6:	f003 fc1d 	bl	d7e34 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d45fa:	2800      	cmp	r0, #0
   d45fc:	d0f7      	beq.n	d45ee <_Z14setVerboseMode6String+0x2e>
    sysStatus.verboseMode = false;
   d45fe:	4b08      	ldr	r3, [pc, #32]	; (d4620 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4600:	4a0e      	ldr	r2, [pc, #56]	; (d463c <_Z14setVerboseMode6String+0x7c>)
    sysStatus.verboseMode = false;
   d4602:	725c      	strb	r4, [r3, #9]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4604:	4b0a      	ldr	r3, [pc, #40]	; (d4630 <_Z14setVerboseMode6String+0x70>)
   d4606:	f88d 4000 	strb.w	r4, [sp]
   d460a:	781b      	ldrb	r3, [r3, #0]
   d460c:	4906      	ldr	r1, [pc, #24]	; (d4628 <_Z14setVerboseMode6String+0x68>)
   d460e:	4807      	ldr	r0, [pc, #28]	; (d462c <_Z14setVerboseMode6String+0x6c>)
   d4610:	f7ff fef2 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d4614:	4b07      	ldr	r3, [pc, #28]	; (d4634 <_Z14setVerboseMode6String+0x74>)
   d4616:	2001      	movs	r0, #1
   d4618:	7018      	strb	r0, [r3, #0]
    return 1;
   d461a:	e7e8      	b.n	d45ee <_Z14setVerboseMode6String+0x2e>
   d461c:	000db3ab 	.word	0x000db3ab
   d4620:	2003e5d4 	.word	0x2003e5d4
   d4624:	000db534 	.word	0x000db534
   d4628:	000db555 	.word	0x000db555
   d462c:	2003e438 	.word	0x2003e438
   d4630:	2003df91 	.word	0x2003df91
   d4634:	2003e5fc 	.word	0x2003e5fc
   d4638:	000db4fa 	.word	0x000db4fa
   d463c:	000db545 	.word	0x000db545

000d4640 <_Z16setOperatingMode6String>:

int setOperatingMode(String Sensor){
   d4640:	b500      	push	{lr}
   d4642:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4644:	6800      	ldr	r0, [r0, #0]
   d4646:	220a      	movs	r2, #10
   d4648:	a903      	add	r1, sp, #12
   d464a:	f005 fe91 	bl	da370 <strtol>
  if ((tempSensor < 0) || (tempSensor >4) ) return 0;
   d464e:	2804      	cmp	r0, #4
   d4650:	d819      	bhi.n	d4686 <_Z16setOperatingMode6String+0x46>
  else{
    sysStatus.operatingMode = tempSensor;
   d4652:	4b0e      	ldr	r3, [pc, #56]	; (d468c <_Z16setOperatingMode6String+0x4c>)
    snprintf(data, sizeof(data), "Operation Mode %i",tempSensor);
   d4654:	4a0e      	ldr	r2, [pc, #56]	; (d4690 <_Z16setOperatingMode6String+0x50>)
    sysStatus.operatingMode = tempSensor;
   d4656:	f883 0022 	strb.w	r0, [r3, #34]	; 0x22
    snprintf(data, sizeof(data), "Operation Mode %i",tempSensor);
   d465a:	f44f 7180 	mov.w	r1, #256	; 0x100
   d465e:	4603      	mov	r3, r0
   d4660:	a804      	add	r0, sp, #16
   d4662:	f002 fd2b 	bl	d70bc <snprintf>
   d4666:	2300      	movs	r3, #0
    publishQueue.publish("Mode",data,PRIVATE);
   d4668:	f88d 3000 	strb.w	r3, [sp]
   d466c:	4b09      	ldr	r3, [pc, #36]	; (d4694 <_Z16setOperatingMode6String+0x54>)
   d466e:	490a      	ldr	r1, [pc, #40]	; (d4698 <_Z16setOperatingMode6String+0x58>)
   d4670:	781b      	ldrb	r3, [r3, #0]
   d4672:	480a      	ldr	r0, [pc, #40]	; (d469c <_Z16setOperatingMode6String+0x5c>)
   d4674:	aa04      	add	r2, sp, #16
   d4676:	f7ff febf 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;  
   d467a:	4b09      	ldr	r3, [pc, #36]	; (d46a0 <_Z16setOperatingMode6String+0x60>)
   d467c:	2001      	movs	r0, #1
   d467e:	7018      	strb	r0, [r3, #0]
    return 1; 
  }
}
   d4680:	b045      	add	sp, #276	; 0x114
   d4682:	f85d fb04 	ldr.w	pc, [sp], #4
  if ((tempSensor < 0) || (tempSensor >4) ) return 0;
   d4686:	2000      	movs	r0, #0
   d4688:	e7fa      	b.n	d4680 <_Z16setOperatingMode6String+0x40>
   d468a:	bf00      	nop
   d468c:	2003e5d4 	.word	0x2003e5d4
   d4690:	000db55a 	.word	0x000db55a
   d4694:	2003df91 	.word	0x2003df91
   d4698:	000db555 	.word	0x000db555
   d469c:	2003e438 	.word	0x2003e438
   d46a0:	2003e5fc 	.word	0x2003e5fc

000d46a4 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                                                 // Default settings for the device - connected, not-low power and always on
   d46a4:	b507      	push	{r0, r1, r2, lr}
   d46a6:	f002 fc51 	bl	d6f4c <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d46aa:	b148      	cbz	r0, d46c0 <_Z18loadSystemDefaultsv+0x1c>
   d46ac:	2300      	movs	r3, #0
   d46ae:	f88d 3000 	strb.w	r3, [sp]
   d46b2:	4b0b      	ldr	r3, [pc, #44]	; (d46e0 <_Z18loadSystemDefaultsv+0x3c>)
   d46b4:	4a0b      	ldr	r2, [pc, #44]	; (d46e4 <_Z18loadSystemDefaultsv+0x40>)
   d46b6:	781b      	ldrb	r3, [r3, #0]
   d46b8:	490b      	ldr	r1, [pc, #44]	; (d46e8 <_Z18loadSystemDefaultsv+0x44>)
   d46ba:	480c      	ldr	r0, [pc, #48]	; (d46ec <_Z18loadSystemDefaultsv+0x48>)
   d46bc:	f7ff fe9c 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.keepAlive = 120;
   d46c0:	4a0b      	ldr	r2, [pc, #44]	; (d46f0 <_Z18loadSystemDefaultsv+0x4c>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d46c2:	480c      	ldr	r0, [pc, #48]	; (d46f4 <_Z18loadSystemDefaultsv+0x50>)
   d46c4:	2378      	movs	r3, #120	; 0x78
   d46c6:	6053      	str	r3, [r2, #4]
  sysStatus.verboseMode = false;
   d46c8:	2300      	movs	r3, #0
  sysStatus.structuresVersion = 1;
   d46ca:	2101      	movs	r1, #1
  sysStatus.verboseMode = false;
   d46cc:	7253      	strb	r3, [r2, #9]
  sysStatus.lowBatteryMode = false;
   d46ce:	7293      	strb	r3, [r2, #10]
   d46d0:	2328      	movs	r3, #40	; 0x28
  sysStatus.structuresVersion = 1;
   d46d2:	8011      	strh	r1, [r2, #0]
}
   d46d4:	b003      	add	sp, #12
   d46d6:	f85d eb04 	ldr.w	lr, [sp], #4
   d46da:	f001 ba4e 	b.w	d5b7a <_ZN6MB85RC9writeDataEjPKhj>
   d46de:	bf00      	nop
   d46e0:	2003df91 	.word	0x2003df91
   d46e4:	000db56c 	.word	0x000db56c
   d46e8:	000db555 	.word	0x000db555
   d46ec:	2003e438 	.word	0x2003e438
   d46f0:	2003e5d4 	.word	0x2003e5d4
   d46f4:	2003e408 	.word	0x2003e408

000d46f8 <_Z17checkSystemValuesv>:
void checkSystemValues() {                                                                  // Checks to ensure that all system values are in reasonable range 
   d46f8:	b510      	push	{r4, lr}
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d46fa:	4c12      	ldr	r4, [pc, #72]	; (d4744 <_Z17checkSystemValuesv+0x4c>)
   d46fc:	7a23      	ldrb	r3, [r4, #8]
   d46fe:	2b01      	cmp	r3, #1
   d4700:	d904      	bls.n	d470c <_Z17checkSystemValuesv+0x14>
   d4702:	f002 fc23 	bl	d6f4c <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d4706:	b1d8      	cbz	r0, d4740 <_Z17checkSystemValuesv+0x48>
   d4708:	2301      	movs	r3, #1
   d470a:	7223      	strb	r3, [r4, #8]
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   d470c:	6863      	ldr	r3, [r4, #4]
   d470e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   d4712:	bf84      	itt	hi
   d4714:	f44f 7316 	movhi.w	r3, #600	; 0x258
   d4718:	6063      	strhi	r3, [r4, #4]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = true;
   d471a:	7a63      	ldrb	r3, [r4, #9]
   d471c:	2b01      	cmp	r3, #1
   d471e:	bf84      	itt	hi
   d4720:	2301      	movhi	r3, #1
   d4722:	7263      	strbhi	r3, [r4, #9]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
   d4724:	7aa3      	ldrb	r3, [r4, #10]
   d4726:	2b01      	cmp	r3, #1
   d4728:	bf84      	itt	hi
   d472a:	2300      	movhi	r3, #0
   d472c:	72a3      	strbhi	r3, [r4, #10]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d472e:	6963      	ldr	r3, [r4, #20]
   d4730:	2bff      	cmp	r3, #255	; 0xff
   d4732:	bf84      	itt	hi
   d4734:	2300      	movhi	r3, #0
   d4736:	6163      	strhi	r3, [r4, #20]
  sysStatusWriteNeeded = true;
   d4738:	4b03      	ldr	r3, [pc, #12]	; (d4748 <_Z17checkSystemValuesv+0x50>)
   d473a:	2201      	movs	r2, #1
   d473c:	701a      	strb	r2, [r3, #0]
}
   d473e:	bd10      	pop	{r4, pc}
    else sysStatus.connectedStatus = false;
   d4740:	7220      	strb	r0, [r4, #8]
   d4742:	e7e3      	b.n	d470c <_Z17checkSystemValuesv+0x14>
   d4744:	2003e5d4 	.word	0x2003e5d4
   d4748:	2003e5fc 	.word	0x2003e5fc

000d474c <_Z11petWatchdogv>:
{
   d474c:	b507      	push	{r0, r1, r2, lr}
  digitalWrite(donePin, HIGH);                                                              // Pet the watchdog
   d474e:	2101      	movs	r1, #1
   d4750:	2005      	movs	r0, #5
   d4752:	f003 ffc4 	bl	d86de <digitalWrite>
  digitalWrite(donePin, LOW);
   d4756:	2100      	movs	r1, #0
   d4758:	2005      	movs	r0, #5
   d475a:	f003 ffc0 	bl	d86de <digitalWrite>
  watchdogFlag = false;
   d475e:	4a09      	ldr	r2, [pc, #36]	; (d4784 <_Z11petWatchdogv+0x38>)
   d4760:	2300      	movs	r3, #0
   d4762:	7013      	strb	r3, [r2, #0]
  if (Particle.connected && sysStatus.verboseMode) publishQueue.publish("Watchdog","Petted",PRIVATE);
   d4764:	4a08      	ldr	r2, [pc, #32]	; (d4788 <_Z11petWatchdogv+0x3c>)
   d4766:	7a52      	ldrb	r2, [r2, #9]
   d4768:	b142      	cbz	r2, d477c <_Z11petWatchdogv+0x30>
   d476a:	f88d 3000 	strb.w	r3, [sp]
   d476e:	4b07      	ldr	r3, [pc, #28]	; (d478c <_Z11petWatchdogv+0x40>)
   d4770:	4a07      	ldr	r2, [pc, #28]	; (d4790 <_Z11petWatchdogv+0x44>)
   d4772:	781b      	ldrb	r3, [r3, #0]
   d4774:	4907      	ldr	r1, [pc, #28]	; (d4794 <_Z11petWatchdogv+0x48>)
   d4776:	4808      	ldr	r0, [pc, #32]	; (d4798 <_Z11petWatchdogv+0x4c>)
   d4778:	f7ff fe3e 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d477c:	b003      	add	sp, #12
   d477e:	f85d fb04 	ldr.w	pc, [sp], #4
   d4782:	bf00      	nop
   d4784:	2003e5fd 	.word	0x2003e5fd
   d4788:	2003e5d4 	.word	0x2003e5d4
   d478c:	2003df91 	.word	0x2003df91
   d4790:	000db584 	.word	0x000db584
   d4794:	000db58b 	.word	0x000db58b
   d4798:	2003e438 	.word	0x2003e438

000d479c <_Z9sendEventv>:
{
   d479c:	b510      	push	{r4, lr}
  if (sysStatus.operatingMode == 1){
   d479e:	4b52      	ldr	r3, [pc, #328]	; (d48e8 <_Z9sendEventv+0x14c>)
   d47a0:	4c52      	ldr	r4, [pc, #328]	; (d48ec <_Z9sendEventv+0x150>)
   d47a2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
   d47a6:	2b01      	cmp	r3, #1
{
   d47a8:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
  if (sysStatus.operatingMode == 1){
   d47ac:	d143      	bne.n	d4836 <_Z9sendEventv+0x9a>
    snprintf(data, sizeof(data), "{\"sensorOne\":%4.1f, \"sensorTwo\":%4.1f,  \"sensorThree\":%4.1f,  \"sensorFour\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"ThreePhaseR\":%4.1f,\"ThreePhaseS\":%4.1f,\"ThreePhaseT\":%4.1f,\"Mode\":1}", sensorData.sensorOneCurrent,sensorData.sensorTwoCurrent,sensorData.sensorThreeCurrent,sensorData.sensorFourCurrent,sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d47ae:	6960      	ldr	r0, [r4, #20]
   d47b0:	f004 fa9c 	bl	d8cec <__aeabi_f2d>
   d47b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d47b8:	6920      	ldr	r0, [r4, #16]
   d47ba:	f004 fa97 	bl	d8cec <__aeabi_f2d>
   d47be:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d47c2:	68e0      	ldr	r0, [r4, #12]
   d47c4:	f004 fa92 	bl	d8cec <__aeabi_f2d>
   d47c8:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d47cc:	68a0      	ldr	r0, [r4, #8]
   d47ce:	f004 fa8d 	bl	d8cec <__aeabi_f2d>
   d47d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d47d6:	6860      	ldr	r0, [r4, #4]
   d47d8:	f004 fa88 	bl	d8cec <__aeabi_f2d>
   d47dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d47e0:	6820      	ldr	r0, [r4, #0]
   d47e2:	f004 fa83 	bl	d8cec <__aeabi_f2d>
   d47e6:	e9cd 0100 	strd	r0, r1, [sp]
   d47ea:	4a41      	ldr	r2, [pc, #260]	; (d48f0 <_Z9sendEventv+0x154>)
    snprintf(data, sizeof(data), "{\"SensorOneR\":%4.1f, \"SensorOneS\":%4.1f,  \"SensorOneT\":%4.1f,  \"SensorOneN\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":4}", sensorData.Four_ThreePhaseLoad_I[0] ,sensorData.Four_ThreePhaseLoad_I[1],sensorData.Four_ThreePhaseLoad_I[2],sensorData.Four_ThreePhaseLoad_I[3],sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d47ec:	f44f 7100 	mov.w	r1, #512	; 0x200
   d47f0:	a80c      	add	r0, sp, #48	; 0x30
   d47f2:	f002 fc63 	bl	d70bc <snprintf>
   d47f6:	2300      	movs	r3, #0
  publishQueue.publish("powermonitoring_hook", data, PRIVATE);
   d47f8:	f88d 3000 	strb.w	r3, [sp]
   d47fc:	4b3d      	ldr	r3, [pc, #244]	; (d48f4 <_Z9sendEventv+0x158>)
   d47fe:	493e      	ldr	r1, [pc, #248]	; (d48f8 <_Z9sendEventv+0x15c>)
   d4800:	781b      	ldrb	r3, [r3, #0]
   d4802:	483e      	ldr	r0, [pc, #248]	; (d48fc <_Z9sendEventv+0x160>)
   d4804:	aa0c      	add	r2, sp, #48	; 0x30
   d4806:	f7ff fdf7 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sensorData.sensorOnePrevious = sensorData.sensorOneCurrent;
   d480a:	6823      	ldr	r3, [r4, #0]
   d480c:	61a3      	str	r3, [r4, #24]
  sensorData.sensorTwoPrevious = sensorData.sensorTwoCurrent;
   d480e:	6863      	ldr	r3, [r4, #4]
   d4810:	61e3      	str	r3, [r4, #28]
  sensorData.sensorThreePrevious = sensorData.sensorThreeCurrent;
   d4812:	68a3      	ldr	r3, [r4, #8]
   d4814:	6223      	str	r3, [r4, #32]
  sensorData.sensorFourPrevious = sensorData.sensorFourCurrent;
   d4816:	68e3      	ldr	r3, [r4, #12]
   d4818:	6263      	str	r3, [r4, #36]	; 0x24
  sensorData.sensorFivePrevious = sensorData.sensorFiveCurrent;
   d481a:	6923      	ldr	r3, [r4, #16]
   d481c:	62a3      	str	r3, [r4, #40]	; 0x28
  sensorData.sensorSixPrevious = sensorData.sensorSixCurrent;
   d481e:	6963      	ldr	r3, [r4, #20]
   d4820:	62e3      	str	r3, [r4, #44]	; 0x2c
  dataInFlight = true;                                                                      // set the data inflight flag
   d4822:	4b37      	ldr	r3, [pc, #220]	; (d4900 <_Z9sendEventv+0x164>)
   d4824:	2201      	movs	r2, #1
   d4826:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4828:	f002 f9aa 	bl	d6b80 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d482c:	4b35      	ldr	r3, [pc, #212]	; (d4904 <_Z9sendEventv+0x168>)
   d482e:	6018      	str	r0, [r3, #0]
}
   d4830:	f50d 7d0c 	add.w	sp, sp, #560	; 0x230
   d4834:	bd10      	pop	{r4, pc}
  } else if (sysStatus.operatingMode == 2){
   d4836:	2b02      	cmp	r3, #2
   d4838:	d119      	bne.n	d486e <_Z9sendEventv+0xd2>
    snprintf(data, sizeof(data), "{\"SensorOneR\":%4.1f, \"SensorOneS\":%4.1f,  \"SensorOneT\":%4.1f,  \"sensorTwoR\":%4.1f,  \"sensorTwoS\":%4.1f,\"sensorTwoT\":%4.1f,\"Mode\":2}", sensorData.I_ThreePhaseLoad_One[0],sensorData.I_ThreePhaseLoad_One[1],sensorData.I_ThreePhaseLoad_One[2],sensorData.I_ThreePhaseLoad_Two[0],sensorData.I_ThreePhaseLoad_Two[1],sensorData.I_ThreePhaseLoad_Two[2]);
   d483a:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
   d483e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d4842:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
   d4846:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d484a:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d484e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d4852:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
   d4856:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d485a:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   d485e:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d4862:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   d4866:	e9cd 2300 	strd	r2, r3, [sp]
   d486a:	4a27      	ldr	r2, [pc, #156]	; (d4908 <_Z9sendEventv+0x16c>)
   d486c:	e7be      	b.n	d47ec <_Z9sendEventv+0x50>
  }else if (sysStatus.operatingMode == 3){
   d486e:	2b03      	cmp	r3, #3
   d4870:	d11c      	bne.n	d48ac <_Z9sendEventv+0x110>
    snprintf(data, sizeof(data), "{\"SensorOneR\":%4.1f, \"SensorOneS\":%4.1f,  \"SensorOneT\":%4.1f,  \"sensorFour\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":3}", sensorData.I_ThreePhaseLoad_One[0],sensorData.I_ThreePhaseLoad_One[1],sensorData.I_ThreePhaseLoad_One[2],sensorData.sensorFourCurrent,sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d4872:	6960      	ldr	r0, [r4, #20]
   d4874:	f004 fa3a 	bl	d8cec <__aeabi_f2d>
   d4878:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d487c:	6920      	ldr	r0, [r4, #16]
   d487e:	f004 fa35 	bl	d8cec <__aeabi_f2d>
   d4882:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d4886:	68e0      	ldr	r0, [r4, #12]
   d4888:	f004 fa30 	bl	d8cec <__aeabi_f2d>
   d488c:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
   d4890:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d4894:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   d4898:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d489c:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   d48a0:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d48a4:	e9cd 2300 	strd	r2, r3, [sp]
   d48a8:	4a18      	ldr	r2, [pc, #96]	; (d490c <_Z9sendEventv+0x170>)
   d48aa:	e79f      	b.n	d47ec <_Z9sendEventv+0x50>
  }else if (sysStatus.operatingMode == 4){
   d48ac:	2b04      	cmp	r3, #4
   d48ae:	d1a2      	bne.n	d47f6 <_Z9sendEventv+0x5a>
    snprintf(data, sizeof(data), "{\"SensorOneR\":%4.1f, \"SensorOneS\":%4.1f,  \"SensorOneT\":%4.1f,  \"SensorOneN\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":4}", sensorData.Four_ThreePhaseLoad_I[0] ,sensorData.Four_ThreePhaseLoad_I[1],sensorData.Four_ThreePhaseLoad_I[2],sensorData.Four_ThreePhaseLoad_I[3],sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d48b0:	6960      	ldr	r0, [r4, #20]
   d48b2:	f004 fa1b 	bl	d8cec <__aeabi_f2d>
   d48b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d48ba:	6920      	ldr	r0, [r4, #16]
   d48bc:	f004 fa16 	bl	d8cec <__aeabi_f2d>
   d48c0:	e9d4 232a 	ldrd	r2, r3, [r4, #168]	; 0xa8
   d48c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d48c8:	e9d4 2328 	ldrd	r2, r3, [r4, #160]	; 0xa0
   d48cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d48d0:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	; 0x98
   d48d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d48d8:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
   d48dc:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d48e0:	e9cd 2300 	strd	r2, r3, [sp]
   d48e4:	4a0a      	ldr	r2, [pc, #40]	; (d4910 <_Z9sendEventv+0x174>)
   d48e6:	e781      	b.n	d47ec <_Z9sendEventv+0x50>
   d48e8:	2003e5d4 	.word	0x2003e5d4
   d48ec:	2003e490 	.word	0x2003e490
   d48f0:	000db594 	.word	0x000db594
   d48f4:	2003df91 	.word	0x2003df91
   d48f8:	000db7dc 	.word	0x000db7dc
   d48fc:	2003e438 	.word	0x2003e438
   d4900:	2003dfb3 	.word	0x2003dfb3
   d4904:	2003e600 	.word	0x2003e600
   d4908:	000db652 	.word	0x000db652
   d490c:	000db6d6 	.word	0x000db6d6
   d4910:	000db759 	.word	0x000db759

000d4914 <_Z22publishStateTransitionv>:
{
   d4914:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4916:	4d11      	ldr	r5, [pc, #68]	; (d495c <_Z22publishStateTransitionv+0x48>)
   d4918:	4c11      	ldr	r4, [pc, #68]	; (d4960 <_Z22publishStateTransitionv+0x4c>)
   d491a:	4912      	ldr	r1, [pc, #72]	; (d4964 <_Z22publishStateTransitionv+0x50>)
   d491c:	782a      	ldrb	r2, [r5, #0]
   d491e:	7820      	ldrb	r0, [r4, #0]
{
   d4920:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4922:	231a      	movs	r3, #26
   d4924:	fb03 1202 	mla	r2, r3, r2, r1
   d4928:	9200      	str	r2, [sp, #0]
   d492a:	fb03 1300 	mla	r3, r3, r0, r1
   d492e:	4a0e      	ldr	r2, [pc, #56]	; (d4968 <_Z22publishStateTransitionv+0x54>)
   d4930:	2128      	movs	r1, #40	; 0x28
   d4932:	a802      	add	r0, sp, #8
   d4934:	f002 fbc2 	bl	d70bc <snprintf>
  oldState = state;
   d4938:	782b      	ldrb	r3, [r5, #0]
   d493a:	7023      	strb	r3, [r4, #0]
   d493c:	f002 fb06 	bl	d6f4c <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d4940:	b148      	cbz	r0, d4956 <_Z22publishStateTransitionv+0x42>
   d4942:	2300      	movs	r3, #0
   d4944:	f88d 3000 	strb.w	r3, [sp]
   d4948:	4b08      	ldr	r3, [pc, #32]	; (d496c <_Z22publishStateTransitionv+0x58>)
   d494a:	4909      	ldr	r1, [pc, #36]	; (d4970 <_Z22publishStateTransitionv+0x5c>)
   d494c:	781b      	ldrb	r3, [r3, #0]
   d494e:	4809      	ldr	r0, [pc, #36]	; (d4974 <_Z22publishStateTransitionv+0x60>)
   d4950:	aa02      	add	r2, sp, #8
   d4952:	f7ff fd51 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4956:	b00d      	add	sp, #52	; 0x34
   d4958:	bd30      	pop	{r4, r5, pc}
   d495a:	bf00      	nop
   d495c:	2003e5d1 	.word	0x2003e5d1
   d4960:	2003e434 	.word	0x2003e434
   d4964:	2003dbf0 	.word	0x2003dbf0
   d4968:	000db7f1 	.word	0x000db7f1
   d496c:	2003df91 	.word	0x2003df91
   d4970:	000db7ff 	.word	0x000db7ff
   d4974:	2003e438 	.word	0x2003e438

000d4978 <_Z17getBatteryContextv>:
{
   d4978:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d497a:	4d0d      	ldr	r5, [pc, #52]	; (d49b0 <_Z17getBatteryContextv+0x38>)
   d497c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   d497e:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4980:	ac01      	add	r4, sp, #4
   d4982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4984:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d4988:	4b0a      	ldr	r3, [pc, #40]	; (d49b4 <_Z17getBatteryContextv+0x3c>)
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d498a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d498e:	7c1b      	ldrb	r3, [r3, #16]
   d4990:	4809      	ldr	r0, [pc, #36]	; (d49b8 <_Z17getBatteryContextv+0x40>)
   d4992:	aa08      	add	r2, sp, #32
   d4994:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d4998:	2110      	movs	r1, #16
   d499a:	f853 3c1c 	ldr.w	r3, [r3, #-28]
   d499e:	4a07      	ldr	r2, [pc, #28]	; (d49bc <_Z17getBatteryContextv+0x44>)
   d49a0:	f002 fb8c 	bl	d70bc <snprintf>
  sysStatusWriteNeeded = true;
   d49a4:	4b06      	ldr	r3, [pc, #24]	; (d49c0 <_Z17getBatteryContextv+0x48>)
   d49a6:	2201      	movs	r2, #1
   d49a8:	701a      	strb	r2, [r3, #0]
}
   d49aa:	b009      	add	sp, #36	; 0x24
   d49ac:	bd30      	pop	{r4, r5, pc}
   d49ae:	bf00      	nop
   d49b0:	000dbb04 	.word	0x000dbb04
   d49b4:	2003e5d4 	.word	0x2003e5d4
   d49b8:	2003df92 	.word	0x2003df92
   d49bc:	000dbbe0 	.word	0x000dbbe0
   d49c0:	2003e5fc 	.word	0x2003e5fc

000d49c4 <_Z20updateConstantValuesv>:
{   
   d49c4:	b513      	push	{r0, r1, r4, lr}
    snprintf(sensorOneConstantStr,sizeof(sensorOneConstantStr),"CT One: %3.1f", sensorConstants.sensorOneConstant);
   d49c6:	4c1e      	ldr	r4, [pc, #120]	; (d4a40 <_Z20updateConstantValuesv+0x7c>)
   d49c8:	481e      	ldr	r0, [pc, #120]	; (d4a44 <_Z20updateConstantValuesv+0x80>)
   d49ca:	e9d4 2300 	ldrd	r2, r3, [r4]
   d49ce:	2110      	movs	r1, #16
   d49d0:	e9cd 2300 	strd	r2, r3, [sp]
   d49d4:	4a1c      	ldr	r2, [pc, #112]	; (d4a48 <_Z20updateConstantValuesv+0x84>)
   d49d6:	f002 fb71 	bl	d70bc <snprintf>
    snprintf(sensorTwoConstantStr,sizeof(sensorTwoConstantStr),"CT Two %3.1f", sensorConstants.sensorTwoConstant);
   d49da:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   d49de:	2110      	movs	r1, #16
   d49e0:	e9cd 2300 	strd	r2, r3, [sp]
   d49e4:	4819      	ldr	r0, [pc, #100]	; (d4a4c <_Z20updateConstantValuesv+0x88>)
   d49e6:	4a1a      	ldr	r2, [pc, #104]	; (d4a50 <_Z20updateConstantValuesv+0x8c>)
   d49e8:	f002 fb68 	bl	d70bc <snprintf>
    snprintf(sensorThreeConstantStr,sizeof(sensorThreeConstantStr),"CT Three: %3.1f", sensorConstants.sensorThreeConstant);
   d49ec:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   d49f0:	2110      	movs	r1, #16
   d49f2:	e9cd 2300 	strd	r2, r3, [sp]
   d49f6:	4817      	ldr	r0, [pc, #92]	; (d4a54 <_Z20updateConstantValuesv+0x90>)
   d49f8:	4a17      	ldr	r2, [pc, #92]	; (d4a58 <_Z20updateConstantValuesv+0x94>)
   d49fa:	f002 fb5f 	bl	d70bc <snprintf>
    snprintf(sensorFourConstantStr,sizeof(sensorFourConstantStr),"Sensor Four Constant : %3.1f", sensorConstants.sensorFourConstant);
   d49fe:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   d4a02:	2110      	movs	r1, #16
   d4a04:	e9cd 2300 	strd	r2, r3, [sp]
   d4a08:	4814      	ldr	r0, [pc, #80]	; (d4a5c <_Z20updateConstantValuesv+0x98>)
   d4a0a:	4a15      	ldr	r2, [pc, #84]	; (d4a60 <_Z20updateConstantValuesv+0x9c>)
   d4a0c:	f002 fb56 	bl	d70bc <snprintf>
    snprintf(sensorFiveConstantStr,sizeof(sensorFiveConstantStr),"Sensor Five Constant : %3.1f", sensorConstants.sensorFiveConstant);
   d4a10:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   d4a14:	2110      	movs	r1, #16
   d4a16:	e9cd 2300 	strd	r2, r3, [sp]
   d4a1a:	4812      	ldr	r0, [pc, #72]	; (d4a64 <_Z20updateConstantValuesv+0xa0>)
   d4a1c:	4a12      	ldr	r2, [pc, #72]	; (d4a68 <_Z20updateConstantValuesv+0xa4>)
   d4a1e:	f002 fb4d 	bl	d70bc <snprintf>
    snprintf(sensorSixConstantStr,sizeof(sensorSixConstantStr),"Sensor Six Constant : %3.1f", sensorConstants.sensorSixConstant);
   d4a22:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   d4a26:	2110      	movs	r1, #16
   d4a28:	e9cd 2300 	strd	r2, r3, [sp]
   d4a2c:	480f      	ldr	r0, [pc, #60]	; (d4a6c <_Z20updateConstantValuesv+0xa8>)
   d4a2e:	4a10      	ldr	r2, [pc, #64]	; (d4a70 <_Z20updateConstantValuesv+0xac>)
   d4a30:	f002 fb44 	bl	d70bc <snprintf>
    constantsStatusWriteNeeded = true;                                                         // This function is called when there is a change so, we need to update the FRAM
   d4a34:	4b0f      	ldr	r3, [pc, #60]	; (d4a74 <_Z20updateConstantValuesv+0xb0>)
   d4a36:	2201      	movs	r2, #1
   d4a38:	701a      	strb	r2, [r3, #0]
} 
   d4a3a:	b002      	add	sp, #8
   d4a3c:	bd10      	pop	{r4, pc}
   d4a3e:	bf00      	nop
   d4a40:	2003dbc0 	.word	0x2003dbc0
   d4a44:	2003e591 	.word	0x2003e591
   d4a48:	000db810 	.word	0x000db810
   d4a4c:	2003e5c1 	.word	0x2003e5c1
   d4a50:	000db81e 	.word	0x000db81e
   d4a54:	2003e5b1 	.word	0x2003e5b1
   d4a58:	000db82b 	.word	0x000db82b
   d4a5c:	2003e581 	.word	0x2003e581
   d4a60:	000db83b 	.word	0x000db83b
   d4a64:	2003e571 	.word	0x2003e571
   d4a68:	000db858 	.word	0x000db858
   d4a6c:	2003e5a1 	.word	0x2003e5a1
   d4a70:	000db875 	.word	0x000db875
   d4a74:	2003dfb2 	.word	0x2003dfb2

000d4a78 <_Z14setConstantOne6String>:
int setConstantOne(String command){
   d4a78:	b510      	push	{r4, lr}
   d4a7a:	b086      	sub	sp, #24
   d4a7c:	4604      	mov	r4, r0
  sensorConstants.sensorOneConstant = command.toFloat();
   d4a7e:	f003 f9eb 	bl	d7e58 <_ZNK6String7toFloatEv>
   d4a82:	ee10 0a10 	vmov	r0, s0
   d4a86:	f004 f931 	bl	d8cec <__aeabi_f2d>
   d4a8a:	4b0c      	ldr	r3, [pc, #48]	; (d4abc <_Z14setConstantOne6String+0x44>)
   d4a8c:	e9c3 0100 	strd	r0, r1, [r3]
  publishQueue.publish("Constant One Value set to ",String(command),PRIVATE);
   d4a90:	4621      	mov	r1, r4
   d4a92:	a802      	add	r0, sp, #8
   d4a94:	f003 f972 	bl	d7d7c <_ZN6StringC1ERKS_>
   d4a98:	2300      	movs	r3, #0
   d4a9a:	f88d 3000 	strb.w	r3, [sp]
   d4a9e:	4b08      	ldr	r3, [pc, #32]	; (d4ac0 <_Z14setConstantOne6String+0x48>)
   d4aa0:	9a02      	ldr	r2, [sp, #8]
   d4aa2:	781b      	ldrb	r3, [r3, #0]
   d4aa4:	4907      	ldr	r1, [pc, #28]	; (d4ac4 <_Z14setConstantOne6String+0x4c>)
   d4aa6:	4808      	ldr	r0, [pc, #32]	; (d4ac8 <_Z14setConstantOne6String+0x50>)
   d4aa8:	f7ff fca6 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4aac:	a802      	add	r0, sp, #8
   d4aae:	f003 f8f7 	bl	d7ca0 <_ZN6StringD1Ev>
  updateConstantValues();
   d4ab2:	f7ff ff87 	bl	d49c4 <_Z20updateConstantValuesv>
}
   d4ab6:	2001      	movs	r0, #1
   d4ab8:	b006      	add	sp, #24
   d4aba:	bd10      	pop	{r4, pc}
   d4abc:	2003dbc0 	.word	0x2003dbc0
   d4ac0:	2003df91 	.word	0x2003df91
   d4ac4:	000db891 	.word	0x000db891
   d4ac8:	2003e438 	.word	0x2003e438

000d4acc <_Z14setConstantTwo6String>:
int setConstantTwo(String command){
   d4acc:	b510      	push	{r4, lr}
   d4ace:	b086      	sub	sp, #24
   d4ad0:	4604      	mov	r4, r0
  sensorConstants.sensorTwoConstant = command.toFloat();
   d4ad2:	f003 f9c1 	bl	d7e58 <_ZNK6String7toFloatEv>
   d4ad6:	ee10 0a10 	vmov	r0, s0
   d4ada:	f004 f907 	bl	d8cec <__aeabi_f2d>
   d4ade:	4b0c      	ldr	r3, [pc, #48]	; (d4b10 <_Z14setConstantTwo6String+0x44>)
   d4ae0:	e9c3 0102 	strd	r0, r1, [r3, #8]
  publishQueue.publish("Constant Two Value set to ",String(command),PRIVATE);
   d4ae4:	4621      	mov	r1, r4
   d4ae6:	a802      	add	r0, sp, #8
   d4ae8:	f003 f948 	bl	d7d7c <_ZN6StringC1ERKS_>
   d4aec:	2300      	movs	r3, #0
   d4aee:	f88d 3000 	strb.w	r3, [sp]
   d4af2:	4b08      	ldr	r3, [pc, #32]	; (d4b14 <_Z14setConstantTwo6String+0x48>)
   d4af4:	9a02      	ldr	r2, [sp, #8]
   d4af6:	781b      	ldrb	r3, [r3, #0]
   d4af8:	4907      	ldr	r1, [pc, #28]	; (d4b18 <_Z14setConstantTwo6String+0x4c>)
   d4afa:	4808      	ldr	r0, [pc, #32]	; (d4b1c <_Z14setConstantTwo6String+0x50>)
   d4afc:	f7ff fc7c 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4b00:	a802      	add	r0, sp, #8
   d4b02:	f003 f8cd 	bl	d7ca0 <_ZN6StringD1Ev>
  updateConstantValues();
   d4b06:	f7ff ff5d 	bl	d49c4 <_Z20updateConstantValuesv>
}
   d4b0a:	2001      	movs	r0, #1
   d4b0c:	b006      	add	sp, #24
   d4b0e:	bd10      	pop	{r4, pc}
   d4b10:	2003dbc0 	.word	0x2003dbc0
   d4b14:	2003df91 	.word	0x2003df91
   d4b18:	000db8ac 	.word	0x000db8ac
   d4b1c:	2003e438 	.word	0x2003e438

000d4b20 <_Z16setConstantThree6String>:
int setConstantThree(String command){
   d4b20:	b510      	push	{r4, lr}
   d4b22:	b086      	sub	sp, #24
   d4b24:	4604      	mov	r4, r0
  sensorConstants.sensorThreeConstant = command.toFloat();
   d4b26:	f003 f997 	bl	d7e58 <_ZNK6String7toFloatEv>
   d4b2a:	ee10 0a10 	vmov	r0, s0
   d4b2e:	f004 f8dd 	bl	d8cec <__aeabi_f2d>
   d4b32:	4b0c      	ldr	r3, [pc, #48]	; (d4b64 <_Z16setConstantThree6String+0x44>)
   d4b34:	e9c3 0104 	strd	r0, r1, [r3, #16]
  publishQueue.publish("Constant Three Value set to ",String(command),PRIVATE);
   d4b38:	4621      	mov	r1, r4
   d4b3a:	a802      	add	r0, sp, #8
   d4b3c:	f003 f91e 	bl	d7d7c <_ZN6StringC1ERKS_>
   d4b40:	2300      	movs	r3, #0
   d4b42:	f88d 3000 	strb.w	r3, [sp]
   d4b46:	4b08      	ldr	r3, [pc, #32]	; (d4b68 <_Z16setConstantThree6String+0x48>)
   d4b48:	9a02      	ldr	r2, [sp, #8]
   d4b4a:	781b      	ldrb	r3, [r3, #0]
   d4b4c:	4907      	ldr	r1, [pc, #28]	; (d4b6c <_Z16setConstantThree6String+0x4c>)
   d4b4e:	4808      	ldr	r0, [pc, #32]	; (d4b70 <_Z16setConstantThree6String+0x50>)
   d4b50:	f7ff fc52 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4b54:	a802      	add	r0, sp, #8
   d4b56:	f003 f8a3 	bl	d7ca0 <_ZN6StringD1Ev>
  updateConstantValues();
   d4b5a:	f7ff ff33 	bl	d49c4 <_Z20updateConstantValuesv>
}
   d4b5e:	2001      	movs	r0, #1
   d4b60:	b006      	add	sp, #24
   d4b62:	bd10      	pop	{r4, pc}
   d4b64:	2003dbc0 	.word	0x2003dbc0
   d4b68:	2003df91 	.word	0x2003df91
   d4b6c:	000db8c7 	.word	0x000db8c7
   d4b70:	2003e438 	.word	0x2003e438

000d4b74 <_Z15setConstantFour6String>:
int setConstantFour(String command){
   d4b74:	b510      	push	{r4, lr}
   d4b76:	b086      	sub	sp, #24
   d4b78:	4604      	mov	r4, r0
  sensorConstants.sensorFourConstant = command.toFloat();
   d4b7a:	f003 f96d 	bl	d7e58 <_ZNK6String7toFloatEv>
   d4b7e:	ee10 0a10 	vmov	r0, s0
   d4b82:	f004 f8b3 	bl	d8cec <__aeabi_f2d>
   d4b86:	4b0c      	ldr	r3, [pc, #48]	; (d4bb8 <_Z15setConstantFour6String+0x44>)
   d4b88:	e9c3 0106 	strd	r0, r1, [r3, #24]
  publishQueue.publish("Constant Four Value set to ",String(command),PRIVATE);
   d4b8c:	4621      	mov	r1, r4
   d4b8e:	a802      	add	r0, sp, #8
   d4b90:	f003 f8f4 	bl	d7d7c <_ZN6StringC1ERKS_>
   d4b94:	2300      	movs	r3, #0
   d4b96:	f88d 3000 	strb.w	r3, [sp]
   d4b9a:	4b08      	ldr	r3, [pc, #32]	; (d4bbc <_Z15setConstantFour6String+0x48>)
   d4b9c:	9a02      	ldr	r2, [sp, #8]
   d4b9e:	781b      	ldrb	r3, [r3, #0]
   d4ba0:	4907      	ldr	r1, [pc, #28]	; (d4bc0 <_Z15setConstantFour6String+0x4c>)
   d4ba2:	4808      	ldr	r0, [pc, #32]	; (d4bc4 <_Z15setConstantFour6String+0x50>)
   d4ba4:	f7ff fc28 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4ba8:	a802      	add	r0, sp, #8
   d4baa:	f003 f879 	bl	d7ca0 <_ZN6StringD1Ev>
  updateConstantValues();
   d4bae:	f7ff ff09 	bl	d49c4 <_Z20updateConstantValuesv>
}
   d4bb2:	2001      	movs	r0, #1
   d4bb4:	b006      	add	sp, #24
   d4bb6:	bd10      	pop	{r4, pc}
   d4bb8:	2003dbc0 	.word	0x2003dbc0
   d4bbc:	2003df91 	.word	0x2003df91
   d4bc0:	000db8e4 	.word	0x000db8e4
   d4bc4:	2003e438 	.word	0x2003e438

000d4bc8 <_Z15setConstantFive6String>:
int setConstantFive(String command){
   d4bc8:	b510      	push	{r4, lr}
   d4bca:	b086      	sub	sp, #24
   d4bcc:	4604      	mov	r4, r0
  sensorConstants.sensorFiveConstant = command.toFloat();
   d4bce:	f003 f943 	bl	d7e58 <_ZNK6String7toFloatEv>
   d4bd2:	ee10 0a10 	vmov	r0, s0
   d4bd6:	f004 f889 	bl	d8cec <__aeabi_f2d>
   d4bda:	4b0c      	ldr	r3, [pc, #48]	; (d4c0c <_Z15setConstantFive6String+0x44>)
   d4bdc:	e9c3 0108 	strd	r0, r1, [r3, #32]
  publishQueue.publish("Constant Five Value set to ",String(command),PRIVATE);
   d4be0:	4621      	mov	r1, r4
   d4be2:	a802      	add	r0, sp, #8
   d4be4:	f003 f8ca 	bl	d7d7c <_ZN6StringC1ERKS_>
   d4be8:	2300      	movs	r3, #0
   d4bea:	f88d 3000 	strb.w	r3, [sp]
   d4bee:	4b08      	ldr	r3, [pc, #32]	; (d4c10 <_Z15setConstantFive6String+0x48>)
   d4bf0:	9a02      	ldr	r2, [sp, #8]
   d4bf2:	781b      	ldrb	r3, [r3, #0]
   d4bf4:	4907      	ldr	r1, [pc, #28]	; (d4c14 <_Z15setConstantFive6String+0x4c>)
   d4bf6:	4808      	ldr	r0, [pc, #32]	; (d4c18 <_Z15setConstantFive6String+0x50>)
   d4bf8:	f7ff fbfe 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4bfc:	a802      	add	r0, sp, #8
   d4bfe:	f003 f84f 	bl	d7ca0 <_ZN6StringD1Ev>
  updateConstantValues();
   d4c02:	f7ff fedf 	bl	d49c4 <_Z20updateConstantValuesv>
}
   d4c06:	2001      	movs	r0, #1
   d4c08:	b006      	add	sp, #24
   d4c0a:	bd10      	pop	{r4, pc}
   d4c0c:	2003dbc0 	.word	0x2003dbc0
   d4c10:	2003df91 	.word	0x2003df91
   d4c14:	000db900 	.word	0x000db900
   d4c18:	2003e438 	.word	0x2003e438

000d4c1c <_Z14setConstantSix6String>:
int setConstantSix(String command){
   d4c1c:	b510      	push	{r4, lr}
   d4c1e:	b086      	sub	sp, #24
   d4c20:	4604      	mov	r4, r0
  sensorConstants.sensorSixConstant = command.toFloat();
   d4c22:	f003 f919 	bl	d7e58 <_ZNK6String7toFloatEv>
   d4c26:	ee10 0a10 	vmov	r0, s0
   d4c2a:	f004 f85f 	bl	d8cec <__aeabi_f2d>
   d4c2e:	4b0c      	ldr	r3, [pc, #48]	; (d4c60 <_Z14setConstantSix6String+0x44>)
   d4c30:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
  publishQueue.publish("Constant Six Value set to ",String(command),PRIVATE);
   d4c34:	4621      	mov	r1, r4
   d4c36:	a802      	add	r0, sp, #8
   d4c38:	f003 f8a0 	bl	d7d7c <_ZN6StringC1ERKS_>
   d4c3c:	2300      	movs	r3, #0
   d4c3e:	f88d 3000 	strb.w	r3, [sp]
   d4c42:	4b08      	ldr	r3, [pc, #32]	; (d4c64 <_Z14setConstantSix6String+0x48>)
   d4c44:	9a02      	ldr	r2, [sp, #8]
   d4c46:	781b      	ldrb	r3, [r3, #0]
   d4c48:	4907      	ldr	r1, [pc, #28]	; (d4c68 <_Z14setConstantSix6String+0x4c>)
   d4c4a:	4808      	ldr	r0, [pc, #32]	; (d4c6c <_Z14setConstantSix6String+0x50>)
   d4c4c:	f7ff fbd4 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4c50:	a802      	add	r0, sp, #8
   d4c52:	f003 f825 	bl	d7ca0 <_ZN6StringD1Ev>
  updateConstantValues();
   d4c56:	f7ff feb5 	bl	d49c4 <_Z20updateConstantValuesv>
}
   d4c5a:	2001      	movs	r0, #1
   d4c5c:	b006      	add	sp, #24
   d4c5e:	bd10      	pop	{r4, pc}
   d4c60:	2003dbc0 	.word	0x2003dbc0
   d4c64:	2003df91 	.word	0x2003df91
   d4c68:	000db91c 	.word	0x000db91c
   d4c6c:	2003e438 	.word	0x2003e438

000d4c70 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPdS2_>:
//---------------------------------------------------------------------------------------------Three Phase

// Wires=3 for 3-Wires: R,S,T
// Wires=4 for 4 wires: R,S,T and N

void Three_Phase_Monitor(uint8_t Wires,Load_Monitor::CT_Property_Struct Load_Name[],double *Current_rms_per_Phase,double *Power_rms_per_Phase){
   d4c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c74:	b083      	sub	sp, #12
   uint8_t p=0;
   p=Wires;
   double i_rms_per_Phase[p]={0};
   d4c76:	466c      	mov	r4, sp
   d4c78:	eba4 04c0 	sub.w	r4, r4, r0, lsl #3
void Three_Phase_Monitor(uint8_t Wires,Load_Monitor::CT_Property_Struct Load_Name[],double *Current_rms_per_Phase,double *Power_rms_per_Phase){
   d4c7c:	af02      	add	r7, sp, #8
   double i_rms_per_Phase[p]={0};
   d4c7e:	46a5      	mov	sp, r4
   d4c80:	ad02      	add	r5, sp, #8
   d4c82:	f04f 0a00 	mov.w	sl, #0
   d4c86:	f04f 0b00 	mov.w	fp, #0
   d4c8a:	46ac      	mov	ip, r5
   d4c8c:	e8ec ab02 	strd	sl, fp, [ip], #8
   d4c90:	ea4f 09c0 	mov.w	r9, r0, lsl #3
   d4c94:	3802      	subs	r0, #2
   d4c96:	2800      	cmp	r0, #0
   d4c98:	da24      	bge.n	d4ce4 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPdS2_+0x74>
   
  for (uint8_t i=0;i<p;i++){

   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d4c9a:	f8df b05c 	ldr.w	fp, [pc, #92]	; d4cf8 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPdS2_+0x88>
  
  Current_rms_per_Phase[i]=i_rms_per_Phase[i];
  Power_rms_per_Phase[i]=((i_rms_per_Phase[i]*Vrms)/1000); //in kW
   d4c9e:	f8df a05c 	ldr.w	sl, [pc, #92]	; d4cfc <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPdS2_+0x8c>
   d4ca2:	460c      	mov	r4, r1
   d4ca4:	4690      	mov	r8, r2
   d4ca6:	461e      	mov	r6, r3
   d4ca8:	44a9      	add	r9, r5
  for (uint8_t i=0;i<p;i++){
   d4caa:	454d      	cmp	r5, r9
   d4cac:	d01e      	beq.n	d4cec <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPdS2_+0x7c>
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d4cae:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   d4cb2:	e88d 0003 	stmia.w	sp, {r0, r1}
   d4cb6:	4658      	mov	r0, fp
   d4cb8:	e894 000c 	ldmia.w	r4, {r2, r3}
   d4cbc:	f000 fdb8 	bl	d5830 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE>
  Current_rms_per_Phase[i]=i_rms_per_Phase[i];
   d4cc0:	eca8 0b02 	vstmia	r8!, {d0}
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d4cc4:	eca5 0b02 	vstmia	r5!, {d0}
  Power_rms_per_Phase[i]=((i_rms_per_Phase[i]*Vrms)/1000); //in kW
   d4cc8:	e9da 2300 	ldrd	r2, r3, [sl]
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d4ccc:	ec51 0b10 	vmov	r0, r1, d0
  Power_rms_per_Phase[i]=((i_rms_per_Phase[i]*Vrms)/1000); //in kW
   d4cd0:	f004 f864 	bl	d8d9c <__aeabi_dmul>
   d4cd4:	4b07      	ldr	r3, [pc, #28]	; (d4cf4 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPdS2_+0x84>)
   d4cd6:	2200      	movs	r2, #0
   d4cd8:	f004 f98a 	bl	d8ff0 <__aeabi_ddiv>
   d4cdc:	3410      	adds	r4, #16
   d4cde:	e8e6 0102 	strd	r0, r1, [r6], #8
  for (uint8_t i=0;i<p;i++){
   d4ce2:	e7e2      	b.n	d4caa <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPdS2_+0x3a>
   double i_rms_per_Phase[p]={0};
   d4ce4:	e8ec ab02 	strd	sl, fp, [ip], #8
   d4ce8:	3801      	subs	r0, #1
   d4cea:	e7d4      	b.n	d4c96 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPdS2_+0x26>
    
  }
  
}
   d4cec:	3704      	adds	r7, #4
   d4cee:	46bd      	mov	sp, r7
   d4cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4cf4:	408f4000 	.word	0x408f4000
   d4cf8:	2003dea8 	.word	0x2003dea8
   d4cfc:	2003dbb8 	.word	0x2003dbb8

000d4d00 <_Z16takeMeasurementsv>:


// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() 
{
   d4d00:	b538      	push	{r3, r4, r5, lr}
    sensorData.validData = false;
   d4d02:	4c7c      	ldr	r4, [pc, #496]	; (d4ef4 <_Z16takeMeasurementsv+0x1f4>)
    
    getBatteryContext();     
    
    // If operatingMode is '1'. All single phase
    if ((sysStatus.operatingMode) == 1){
   d4d04:	4d7c      	ldr	r5, [pc, #496]	; (d4ef8 <_Z16takeMeasurementsv+0x1f8>)
    sensorData.validData = false;
   d4d06:	2300      	movs	r3, #0
   d4d08:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
    getBatteryContext();     
   d4d0c:	f7ff fe34 	bl	d4978 <_Z17getBatteryContextv>
    if ((sysStatus.operatingMode) == 1){
   d4d10:	f895 0022 	ldrb.w	r0, [r5, #34]	; 0x22
   d4d14:	2801      	cmp	r0, #1
   d4d16:	d14a      	bne.n	d4dae <_Z16takeMeasurementsv+0xae>
      if (sysStatus.sensorOneConnected) sensorData.sensorOneCurrent =   emon1.calcIrms(1480);
   d4d18:	7f2b      	ldrb	r3, [r5, #28]
   d4d1a:	b14b      	cbz	r3, d4d30 <_Z16takeMeasurementsv+0x30>
   d4d1c:	4877      	ldr	r0, [pc, #476]	; (d4efc <_Z16takeMeasurementsv+0x1fc>)
   d4d1e:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4d22:	f000 fe05 	bl	d5930 <_ZN13EnergyMonitor8calcIrmsEj>
   d4d26:	ec51 0b10 	vmov	r0, r1, d0
   d4d2a:	f004 fb07 	bl	d933c <__aeabi_d2f>
   d4d2e:	6020      	str	r0, [r4, #0]
      if (sysStatus.sensorTwoConnected) sensorData.sensorTwoCurrent =   emon2.calcIrms(1480);
   d4d30:	7f6b      	ldrb	r3, [r5, #29]
   d4d32:	b14b      	cbz	r3, d4d48 <_Z16takeMeasurementsv+0x48>
   d4d34:	4872      	ldr	r0, [pc, #456]	; (d4f00 <_Z16takeMeasurementsv+0x200>)
   d4d36:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4d3a:	f000 fdf9 	bl	d5930 <_ZN13EnergyMonitor8calcIrmsEj>
   d4d3e:	ec51 0b10 	vmov	r0, r1, d0
   d4d42:	f004 fafb 	bl	d933c <__aeabi_d2f>
   d4d46:	6060      	str	r0, [r4, #4]
      if (sysStatus.sensorThreeConnected) sensorData.sensorThreeCurrent=  emon3.calcIrms(1480);
   d4d48:	7fab      	ldrb	r3, [r5, #30]
   d4d4a:	b14b      	cbz	r3, d4d60 <_Z16takeMeasurementsv+0x60>
   d4d4c:	486d      	ldr	r0, [pc, #436]	; (d4f04 <_Z16takeMeasurementsv+0x204>)
   d4d4e:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4d52:	f000 fded 	bl	d5930 <_ZN13EnergyMonitor8calcIrmsEj>
   d4d56:	ec51 0b10 	vmov	r0, r1, d0
   d4d5a:	f004 faef 	bl	d933c <__aeabi_d2f>
   d4d5e:	60a0      	str	r0, [r4, #8]
    else if (sysStatus.operatingMode == 3){
      // Load for three phase with 3 Wires.
      Three_Phase_Monitor(3,ThreePhaseLoadOne,sensorData.I_ThreePhaseLoad_One,sensorData.P_ThreePhaseLoad_One);
      
      // CT4 to CT6 are available for single phase operation.
      if (sysStatus.sensorFourConnected) sensorData.sensorFourCurrent =  emon4.calcIrms(1480);
   d4d60:	7feb      	ldrb	r3, [r5, #31]
   d4d62:	b14b      	cbz	r3, d4d78 <_Z16takeMeasurementsv+0x78>
   d4d64:	4868      	ldr	r0, [pc, #416]	; (d4f08 <_Z16takeMeasurementsv+0x208>)
   d4d66:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4d6a:	f000 fde1 	bl	d5930 <_ZN13EnergyMonitor8calcIrmsEj>
   d4d6e:	ec51 0b10 	vmov	r0, r1, d0
   d4d72:	f004 fae3 	bl	d933c <__aeabi_d2f>
   d4d76:	60e0      	str	r0, [r4, #12]
    else if (sysStatus.operatingMode == 4){
      // Load for three phase with 3 Wires.
      Three_Phase_Monitor(4,ThreePhaseLoadFourWires,sensorData.Four_ThreePhaseLoad_I,sensorData.Four_ThreePhaseLoad_P);
      
      // CT5 & CT6 are available for single phase operation.
      if (sysStatus.sensorFiveConnected) sensorData.sensorFiveCurrent =  emon5.calcIrms(1480);               
   d4d78:	f895 3020 	ldrb.w	r3, [r5, #32]
   d4d7c:	b14b      	cbz	r3, d4d92 <_Z16takeMeasurementsv+0x92>
   d4d7e:	4863      	ldr	r0, [pc, #396]	; (d4f0c <_Z16takeMeasurementsv+0x20c>)
   d4d80:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4d84:	f000 fdd4 	bl	d5930 <_ZN13EnergyMonitor8calcIrmsEj>
   d4d88:	ec51 0b10 	vmov	r0, r1, d0
   d4d8c:	f004 fad6 	bl	d933c <__aeabi_d2f>
   d4d90:	6120      	str	r0, [r4, #16]
      if (sysStatus.sensorSixConnected) sensorData.sensorSixCurrent =   emon6.calcIrms(1480);  
   d4d92:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d4d96:	b1eb      	cbz	r3, d4dd4 <_Z16takeMeasurementsv+0xd4>
   d4d98:	485d      	ldr	r0, [pc, #372]	; (d4f10 <_Z16takeMeasurementsv+0x210>)
   d4d9a:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4d9e:	f000 fdc7 	bl	d5930 <_ZN13EnergyMonitor8calcIrmsEj>
   d4da2:	ec51 0b10 	vmov	r0, r1, d0
   d4da6:	f004 fac9 	bl	d933c <__aeabi_d2f>
   d4daa:	6160      	str	r0, [r4, #20]
   d4dac:	e012      	b.n	d4dd4 <_Z16takeMeasurementsv+0xd4>
    else if ((sysStatus.operatingMode) == 2){
   d4dae:	2802      	cmp	r0, #2
   d4db0:	f040 8089 	bne.w	d4ec6 <_Z16takeMeasurementsv+0x1c6>
      Three_Phase_Monitor(3,ThreePhaseLoadOne,sensorData.I_ThreePhaseLoad_One,sensorData.P_ThreePhaseLoad_One);
   d4db4:	4957      	ldr	r1, [pc, #348]	; (d4f14 <_Z16takeMeasurementsv+0x214>)
   d4db6:	f104 0348 	add.w	r3, r4, #72	; 0x48
   d4dba:	f104 0230 	add.w	r2, r4, #48	; 0x30
   d4dbe:	2003      	movs	r0, #3
   d4dc0:	f7ff ff56 	bl	d4c70 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPdS2_>
      Three_Phase_Monitor(3,ThreePhaseLoadTwo,sensorData.I_ThreePhaseLoad_Two,sensorData.P_ThreePhaseLoad_Two);
   d4dc4:	4954      	ldr	r1, [pc, #336]	; (d4f18 <_Z16takeMeasurementsv+0x218>)
   d4dc6:	f104 0378 	add.w	r3, r4, #120	; 0x78
   d4dca:	f104 0260 	add.w	r2, r4, #96	; 0x60
   d4dce:	2003      	movs	r0, #3
   d4dd0:	f7ff ff4e 	bl	d4c70 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPdS2_>
    }

    if (((abs(sensorData.sensorOneCurrent)-(sensorData.sensorOnePrevious)) >= 0.5) || ((abs(sensorData.sensorTwoCurrent)-(sensorData.sensorTwoPrevious)) >= 0.5) || ((abs(sensorData.sensorThreeCurrent)-(sensorData.sensorThreePrevious)) >= 0.5) || ((abs(sensorData.sensorFourCurrent)-(sensorData.sensorFourPrevious)) >= 0.5) || ((abs(sensorData.sensorFiveCurrent)-(sensorData.sensorFivePrevious)) >= 0.5) || ((abs(sensorData.sensorSixCurrent)-(sensorData.sensorSixPrevious)) >= 0.5)) {
   d4dd4:	edd4 7a00 	vldr	s15, [r4]
   d4dd8:	ed94 7a06 	vldr	s14, [r4, #24]
   d4ddc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4de4:	bfd8      	it	le
   d4de6:	eef1 7a67 	vnegle.f32	s15, s15
   d4dea:	ee37 7ac7 	vsub.f32	s14, s15, s14
   d4dee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   d4df2:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4dfa:	da59      	bge.n	d4eb0 <_Z16takeMeasurementsv+0x1b0>
   d4dfc:	ed94 7a01 	vldr	s14, [r4, #4]
   d4e00:	edd4 6a07 	vldr	s13, [r4, #28]
   d4e04:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e0c:	bfd8      	it	le
   d4e0e:	eeb1 7a47 	vnegle.f32	s14, s14
   d4e12:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4e16:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e1e:	da47      	bge.n	d4eb0 <_Z16takeMeasurementsv+0x1b0>
   d4e20:	ed94 7a02 	vldr	s14, [r4, #8]
   d4e24:	edd4 6a08 	vldr	s13, [r4, #32]
   d4e28:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e30:	bfd8      	it	le
   d4e32:	eeb1 7a47 	vnegle.f32	s14, s14
   d4e36:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4e3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e42:	da35      	bge.n	d4eb0 <_Z16takeMeasurementsv+0x1b0>
   d4e44:	ed94 7a03 	vldr	s14, [r4, #12]
   d4e48:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
   d4e4c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e54:	bfd8      	it	le
   d4e56:	eeb1 7a47 	vnegle.f32	s14, s14
   d4e5a:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4e5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e66:	da23      	bge.n	d4eb0 <_Z16takeMeasurementsv+0x1b0>
   d4e68:	ed94 7a04 	vldr	s14, [r4, #16]
   d4e6c:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
   d4e70:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e78:	bfd8      	it	le
   d4e7a:	eeb1 7a47 	vnegle.f32	s14, s14
   d4e7e:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4e82:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e8a:	da11      	bge.n	d4eb0 <_Z16takeMeasurementsv+0x1b0>
   d4e8c:	ed94 7a05 	vldr	s14, [r4, #20]
   d4e90:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
   d4e94:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e9c:	bfd8      	it	le
   d4e9e:	eeb1 7a47 	vnegle.f32	s14, s14
   d4ea2:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4ea6:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4eae:	db1f      	blt.n	d4ef0 <_Z16takeMeasurementsv+0x1f0>
      // Indicate that this is a valid data array and store it
      sensorData.validData = true;
   d4eb0:	2501      	movs	r5, #1
   d4eb2:	f884 50d8 	strb.w	r5, [r4, #216]	; 0xd8
      sensorData.timeStamp = Time.now();
   d4eb6:	f003 f96c 	bl	d8192 <_ZN9TimeClass3nowEv>
      sensorDataWriteNeeded = true;
   d4eba:	4b18      	ldr	r3, [pc, #96]	; (d4f1c <_Z16takeMeasurementsv+0x21c>)
      sensorData.timeStamp = Time.now();
   d4ebc:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
      sensorDataWriteNeeded = true;
   d4ec0:	701d      	strb	r5, [r3, #0]
      return 1;
   d4ec2:	4628      	mov	r0, r5
      } else return 0;
  }
   d4ec4:	bd38      	pop	{r3, r4, r5, pc}
    else if (sysStatus.operatingMode == 3){
   d4ec6:	2803      	cmp	r0, #3
   d4ec8:	d107      	bne.n	d4eda <_Z16takeMeasurementsv+0x1da>
      Three_Phase_Monitor(3,ThreePhaseLoadOne,sensorData.I_ThreePhaseLoad_One,sensorData.P_ThreePhaseLoad_One);
   d4eca:	4912      	ldr	r1, [pc, #72]	; (d4f14 <_Z16takeMeasurementsv+0x214>)
   d4ecc:	f104 0348 	add.w	r3, r4, #72	; 0x48
   d4ed0:	f104 0230 	add.w	r2, r4, #48	; 0x30
   d4ed4:	f7ff fecc 	bl	d4c70 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPdS2_>
   d4ed8:	e742      	b.n	d4d60 <_Z16takeMeasurementsv+0x60>
    else if (sysStatus.operatingMode == 4){
   d4eda:	2804      	cmp	r0, #4
   d4edc:	f47f af7a 	bne.w	d4dd4 <_Z16takeMeasurementsv+0xd4>
      Three_Phase_Monitor(4,ThreePhaseLoadFourWires,sensorData.Four_ThreePhaseLoad_I,sensorData.Four_ThreePhaseLoad_P);
   d4ee0:	490f      	ldr	r1, [pc, #60]	; (d4f20 <_Z16takeMeasurementsv+0x220>)
   d4ee2:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
   d4ee6:	f104 0290 	add.w	r2, r4, #144	; 0x90
   d4eea:	f7ff fec1 	bl	d4c70 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPdS2_>
   d4eee:	e743      	b.n	d4d78 <_Z16takeMeasurementsv+0x78>
      } else return 0;
   d4ef0:	2000      	movs	r0, #0
   d4ef2:	e7e7      	b.n	d4ec4 <_Z16takeMeasurementsv+0x1c4>
   d4ef4:	2003e490 	.word	0x2003e490
   d4ef8:	2003e5d4 	.word	0x2003e5d4
   d4efc:	2003dfb8 	.word	0x2003dfb8
   d4f00:	2003e070 	.word	0x2003e070
   d4f04:	2003e128 	.word	0x2003e128
   d4f08:	2003e1e0 	.word	0x2003e1e0
   d4f0c:	2003e298 	.word	0x2003e298
   d4f10:	2003e350 	.word	0x2003e350
   d4f14:	2003df30 	.word	0x2003df30
   d4f18:	2003df60 	.word	0x2003df60
   d4f1c:	2003e570 	.word	0x2003e570
   d4f20:	2003def0 	.word	0x2003def0

000d4f24 <loop>:
void loop() {
   d4f24:	b570      	push	{r4, r5, r6, lr}
  switch(state) {
   d4f26:	4c85      	ldr	r4, [pc, #532]	; (d513c <loop+0x218>)
   d4f28:	7823      	ldrb	r3, [r4, #0]
   d4f2a:	3b01      	subs	r3, #1
void loop() {
   d4f2c:	b086      	sub	sp, #24
   d4f2e:	2b05      	cmp	r3, #5
   d4f30:	d81a      	bhi.n	d4f68 <loop+0x44>
   d4f32:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4f36:	00dd      	.short	0x00dd
   d4f38:	005f0006 	.word	0x005f0006
   d4f3c:	0044006b 	.word	0x0044006b
   d4f40:	00aa      	.short	0x00aa
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4f42:	4b7f      	ldr	r3, [pc, #508]	; (d5140 <loop+0x21c>)
   d4f44:	7a5b      	ldrb	r3, [r3, #9]
   d4f46:	b12b      	cbz	r3, d4f54 <loop+0x30>
   d4f48:	4b7e      	ldr	r3, [pc, #504]	; (d5144 <loop+0x220>)
   d4f4a:	781b      	ldrb	r3, [r3, #0]
   d4f4c:	2b02      	cmp	r3, #2
   d4f4e:	d001      	beq.n	d4f54 <loop+0x30>
   d4f50:	f7ff fce0 	bl	d4914 <_Z22publishStateTransitionv>
    if (!(Time.now() % wakeBoundary)) state = REPORTING_DETERMINATION;                                                     
   d4f54:	f003 f91d 	bl	d8192 <_ZN9TimeClass3nowEv>
   d4f58:	230a      	movs	r3, #10
   d4f5a:	fb90 f2f3 	sdiv	r2, r0, r3
   d4f5e:	fb02 0313 	mls	r3, r2, r3, r0
   d4f62:	b90b      	cbnz	r3, d4f68 <loop+0x44>
   d4f64:	2305      	movs	r3, #5
    else state = IDLE_STATE;
   d4f66:	7023      	strb	r3, [r4, #0]
  rtc.loop();                                                                               // keeps the clock up to date
   d4f68:	4877      	ldr	r0, [pc, #476]	; (d5148 <loop+0x224>)
   d4f6a:	f001 f9e3 	bl	d6334 <_ZN8MCP794104loopEv>
  if (watchdogFlag) petWatchdog();                                                          // Watchdog flag is raised - time to pet the watchdog
   d4f6e:	4b77      	ldr	r3, [pc, #476]	; (d514c <loop+0x228>)
   d4f70:	781b      	ldrb	r3, [r3, #0]
   d4f72:	b10b      	cbz	r3, d4f78 <loop+0x54>
   d4f74:	f7ff fbea 	bl	d474c <_Z11petWatchdogv>
  if (sysStatusWriteNeeded) {
   d4f78:	4c75      	ldr	r4, [pc, #468]	; (d5150 <loop+0x22c>)
   d4f7a:	7823      	ldrb	r3, [r4, #0]
   d4f7c:	b13b      	cbz	r3, d4f8e <loop+0x6a>
   d4f7e:	2328      	movs	r3, #40	; 0x28
   d4f80:	4a6f      	ldr	r2, [pc, #444]	; (d5140 <loop+0x21c>)
   d4f82:	4874      	ldr	r0, [pc, #464]	; (d5154 <loop+0x230>)
   d4f84:	2101      	movs	r1, #1
   d4f86:	f000 fdf8 	bl	d5b7a <_ZN6MB85RC9writeDataEjPKhj>
    sysStatusWriteNeeded = false;
   d4f8a:	2300      	movs	r3, #0
   d4f8c:	7023      	strb	r3, [r4, #0]
  if (sensorDataWriteNeeded) {
   d4f8e:	4c72      	ldr	r4, [pc, #456]	; (d5158 <loop+0x234>)
   d4f90:	7823      	ldrb	r3, [r4, #0]
   d4f92:	b13b      	cbz	r3, d4fa4 <loop+0x80>
   d4f94:	23e0      	movs	r3, #224	; 0xe0
   d4f96:	4a71      	ldr	r2, [pc, #452]	; (d515c <loop+0x238>)
   d4f98:	486e      	ldr	r0, [pc, #440]	; (d5154 <loop+0x230>)
   d4f9a:	21a0      	movs	r1, #160	; 0xa0
   d4f9c:	f000 fded 	bl	d5b7a <_ZN6MB85RC9writeDataEjPKhj>
    sensorDataWriteNeeded = false;
   d4fa0:	2300      	movs	r3, #0
   d4fa2:	7023      	strb	r3, [r4, #0]
  if (constantsStatusWriteNeeded) {
   d4fa4:	4c6e      	ldr	r4, [pc, #440]	; (d5160 <loop+0x23c>)
   d4fa6:	7823      	ldrb	r3, [r4, #0]
   d4fa8:	b13b      	cbz	r3, d4fba <loop+0x96>
   d4faa:	2330      	movs	r3, #48	; 0x30
   d4fac:	4a6d      	ldr	r2, [pc, #436]	; (d5164 <loop+0x240>)
   d4fae:	4869      	ldr	r0, [pc, #420]	; (d5154 <loop+0x230>)
   d4fb0:	21f0      	movs	r1, #240	; 0xf0
   d4fb2:	f000 fde2 	bl	d5b7a <_ZN6MB85RC9writeDataEjPKhj>
    constantsStatusWriteNeeded = false;
   d4fb6:	2300      	movs	r3, #0
   d4fb8:	7023      	strb	r3, [r4, #0]
}
   d4fba:	b006      	add	sp, #24
   d4fbc:	bd70      	pop	{r4, r5, r6, pc}
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4fbe:	4b60      	ldr	r3, [pc, #384]	; (d5140 <loop+0x21c>)
   d4fc0:	7a5b      	ldrb	r3, [r3, #9]
   d4fc2:	b12b      	cbz	r3, d4fd0 <loop+0xac>
   d4fc4:	4b5f      	ldr	r3, [pc, #380]	; (d5144 <loop+0x220>)
   d4fc6:	781b      	ldrb	r3, [r3, #0]
   d4fc8:	2b05      	cmp	r3, #5
   d4fca:	d001      	beq.n	d4fd0 <loop+0xac>
   d4fcc:	f7ff fca2 	bl	d4914 <_Z22publishStateTransitionv>
    if (takeMeasurements()) state = REPORTING_STATE;
   d4fd0:	f7ff fe96 	bl	d4d00 <_Z16takeMeasurementsv>
   d4fd4:	b108      	cbz	r0, d4fda <loop+0xb6>
    state = REPORTING_STATE;
   d4fd6:	2304      	movs	r3, #4
   d4fd8:	e7c5      	b.n	d4f66 <loop+0x42>
    else if (!(Time.now() % reportingBoundary)) state = MEASURING_STATE;
   d4fda:	f003 f8da 	bl	d8192 <_ZN9TimeClass3nowEv>
   d4fde:	f44f 7316 	mov.w	r3, #600	; 0x258
   d4fe2:	fb90 f2f3 	sdiv	r2, r0, r3
   d4fe6:	fb02 0313 	mls	r3, r2, r3, r0
   d4fea:	b90b      	cbnz	r3, d4ff0 <loop+0xcc>
   d4fec:	2303      	movs	r3, #3
   d4fee:	e7ba      	b.n	d4f66 <loop+0x42>
    else state = IDLE_STATE;
   d4ff0:	2302      	movs	r3, #2
   d4ff2:	e7b8      	b.n	d4f66 <loop+0x42>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4ff4:	4b52      	ldr	r3, [pc, #328]	; (d5140 <loop+0x21c>)
   d4ff6:	7a5b      	ldrb	r3, [r3, #9]
   d4ff8:	b12b      	cbz	r3, d5006 <loop+0xe2>
   d4ffa:	4b52      	ldr	r3, [pc, #328]	; (d5144 <loop+0x220>)
   d4ffc:	781b      	ldrb	r3, [r3, #0]
   d4ffe:	2b03      	cmp	r3, #3
   d5000:	d001      	beq.n	d5006 <loop+0xe2>
   d5002:	f7ff fc87 	bl	d4914 <_Z22publishStateTransitionv>
    takeMeasurements();
   d5006:	f7ff fe7b 	bl	d4d00 <_Z16takeMeasurementsv>
   d500a:	e7e4      	b.n	d4fd6 <loop+0xb2>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();               // Reporting - hourly or on command
   d500c:	4b4c      	ldr	r3, [pc, #304]	; (d5140 <loop+0x21c>)
   d500e:	7a5b      	ldrb	r3, [r3, #9]
   d5010:	b12b      	cbz	r3, d501e <loop+0xfa>
   d5012:	4b4c      	ldr	r3, [pc, #304]	; (d5144 <loop+0x220>)
   d5014:	781b      	ldrb	r3, [r3, #0]
   d5016:	2b04      	cmp	r3, #4
   d5018:	d001      	beq.n	d501e <loop+0xfa>
   d501a:	f7ff fc7b 	bl	d4914 <_Z22publishStateTransitionv>
   d501e:	f001 ff95 	bl	d6f4c <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d5022:	4605      	mov	r5, r0
   d5024:	b178      	cbz	r0, d5046 <loop+0x122>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d5026:	f003 f8c5 	bl	d81b4 <_ZN9TimeClass4hourEv>
   d502a:	280c      	cmp	r0, #12
   d502c:	d105      	bne.n	d503a <loop+0x116>
   d502e:	f001 ff8d 	bl	d6f4c <spark_cloud_flag_connected>
        if (!connected()) {
   d5032:	b110      	cbz	r0, d503a <loop+0x116>
        return spark_sync_time(NULL);
   d5034:	2000      	movs	r0, #0
   d5036:	f001 ffa9 	bl	d6f8c <spark_sync_time>
      takeMeasurements();
   d503a:	f7ff fe61 	bl	d4d00 <_Z16takeMeasurementsv>
      sendEvent();                                                                          // Send data to Ubidots
   d503e:	f7ff fbad 	bl	d479c <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d5042:	2306      	movs	r3, #6
   d5044:	e78f      	b.n	d4f66 <loop+0x42>
      publishQueue.publish("DEBUG- Startup","ERROR FROM REPORTING",PRIVATE);
   d5046:	4e48      	ldr	r6, [pc, #288]	; (d5168 <loop+0x244>)
   d5048:	4a48      	ldr	r2, [pc, #288]	; (d516c <loop+0x248>)
   d504a:	7833      	ldrb	r3, [r6, #0]
   d504c:	4948      	ldr	r1, [pc, #288]	; (d5170 <loop+0x24c>)
   d504e:	f88d 0000 	strb.w	r0, [sp]
   d5052:	4848      	ldr	r0, [pc, #288]	; (d5174 <loop+0x250>)
   d5054:	f7ff f9d0 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5058:	f001 ff78 	bl	d6f4c <spark_cloud_flag_connected>
      publishQueue.publish("DEBUG- PARTICLE CONNECTED",String(Particle.connected()),PRIVATE);
   d505c:	220a      	movs	r2, #10
   d505e:	4601      	mov	r1, r0
   d5060:	a802      	add	r0, sp, #8
   d5062:	f002 fea8 	bl	d7db6 <_ZN6StringC1Eih>
   d5066:	7833      	ldrb	r3, [r6, #0]
   d5068:	9a02      	ldr	r2, [sp, #8]
   d506a:	4943      	ldr	r1, [pc, #268]	; (d5178 <loop+0x254>)
   d506c:	4841      	ldr	r0, [pc, #260]	; (d5174 <loop+0x250>)
   d506e:	f88d 5000 	strb.w	r5, [sp]
   d5072:	f7ff f9c1 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5076:	a802      	add	r0, sp, #8
   d5078:	f002 fe12 	bl	d7ca0 <_ZN6StringD1Ev>
      state = ERROR_STATE;
   d507c:	2301      	movs	r3, #1
   d507e:	7023      	strb	r3, [r4, #0]
   d5080:	f001 fd7e 	bl	d6b80 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5084:	4b3d      	ldr	r3, [pc, #244]	; (d517c <loop+0x258>)
   d5086:	6018      	str	r0, [r3, #0]
   d5088:	e76e      	b.n	d4f68 <loop+0x44>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d508a:	4b2d      	ldr	r3, [pc, #180]	; (d5140 <loop+0x21c>)
   d508c:	7a5b      	ldrb	r3, [r3, #9]
   d508e:	b12b      	cbz	r3, d509c <loop+0x178>
   d5090:	4b2c      	ldr	r3, [pc, #176]	; (d5144 <loop+0x220>)
   d5092:	781b      	ldrb	r3, [r3, #0]
   d5094:	2b06      	cmp	r3, #6
   d5096:	d001      	beq.n	d509c <loop+0x178>
   d5098:	f7ff fc3c 	bl	d4914 <_Z22publishStateTransitionv>
    if (!dataInFlight && (Time.now() % wakeBoundary))                                       // Response received back to IDLE state - make sure we don't allow repetivie reporting events
   d509c:	4b38      	ldr	r3, [pc, #224]	; (d5180 <loop+0x25c>)
   d509e:	781b      	ldrb	r3, [r3, #0]
   d50a0:	b943      	cbnz	r3, d50b4 <loop+0x190>
   d50a2:	f003 f876 	bl	d8192 <_ZN9TimeClass3nowEv>
   d50a6:	230a      	movs	r3, #10
   d50a8:	fb90 f2f3 	sdiv	r2, r0, r3
   d50ac:	fb02 0313 	mls	r3, r2, r3, r0
   d50b0:	2b00      	cmp	r3, #0
   d50b2:	d19d      	bne.n	d4ff0 <loop+0xcc>
   d50b4:	f001 fd64 	bl	d6b80 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {                                   // If it takes too long - will need to reset
   d50b8:	4b32      	ldr	r3, [pc, #200]	; (d5184 <loop+0x260>)
   d50ba:	681b      	ldr	r3, [r3, #0]
   d50bc:	1ac0      	subs	r0, r0, r3
   d50be:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d50c2:	4298      	cmp	r0, r3
   d50c4:	f67f af50 	bls.w	d4f68 <loop+0x44>
   d50c8:	f001 fd5a 	bl	d6b80 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d50cc:	4d2b      	ldr	r5, [pc, #172]	; (d517c <loop+0x258>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d50ce:	4a2e      	ldr	r2, [pc, #184]	; (d5188 <loop+0x264>)
      resetTimeStamp = millis();
   d50d0:	6028      	str	r0, [r5, #0]
   d50d2:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d50d4:	f88d 3000 	strb.w	r3, [sp]
   d50d8:	4b23      	ldr	r3, [pc, #140]	; (d5168 <loop+0x244>)
   d50da:	492c      	ldr	r1, [pc, #176]	; (d518c <loop+0x268>)
   d50dc:	781b      	ldrb	r3, [r3, #0]
   d50de:	4825      	ldr	r0, [pc, #148]	; (d5174 <loop+0x250>)
   d50e0:	f7ff f98a 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      state = ERROR_STATE;                                                                  // Response timed out
   d50e4:	2301      	movs	r3, #1
   d50e6:	7023      	strb	r3, [r4, #0]
   d50e8:	f001 fd4a 	bl	d6b80 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d50ec:	6028      	str	r0, [r5, #0]
   d50ee:	e73b      	b.n	d4f68 <loop+0x44>
    if (state != oldState) publishStateTransition();
   d50f0:	4b14      	ldr	r3, [pc, #80]	; (d5144 <loop+0x220>)
   d50f2:	781b      	ldrb	r3, [r3, #0]
   d50f4:	2b01      	cmp	r3, #1
   d50f6:	d001      	beq.n	d50fc <loop+0x1d8>
   d50f8:	f7ff fc0c 	bl	d4914 <_Z22publishStateTransitionv>
   d50fc:	f001 fd40 	bl	d6b80 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d5100:	4b1e      	ldr	r3, [pc, #120]	; (d517c <loop+0x258>)
   d5102:	681b      	ldr	r3, [r3, #0]
   d5104:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d5108:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d510c:	4283      	cmp	r3, r0
   d510e:	f4bf af2b 	bcs.w	d4f68 <loop+0x44>
   d5112:	f001 ff1b 	bl	d6f4c <spark_cloud_flag_connected>
      if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE); // Brodcast Reset Action
   d5116:	b148      	cbz	r0, d512c <loop+0x208>
   d5118:	2300      	movs	r3, #0
   d511a:	f88d 3000 	strb.w	r3, [sp]
   d511e:	4b12      	ldr	r3, [pc, #72]	; (d5168 <loop+0x244>)
   d5120:	4a1b      	ldr	r2, [pc, #108]	; (d5190 <loop+0x26c>)
   d5122:	781b      	ldrb	r3, [r3, #0]
   d5124:	491b      	ldr	r1, [pc, #108]	; (d5194 <loop+0x270>)
   d5126:	4813      	ldr	r0, [pc, #76]	; (d5174 <loop+0x250>)
   d5128:	f7ff f966 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      delay(2000);
   d512c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5130:	f002 f80c 	bl	d714c <delay>
      System.reset();
   d5134:	f002 feb2 	bl	d7e9c <_ZN11SystemClass5resetEv>
   d5138:	e716      	b.n	d4f68 <loop+0x44>
   d513a:	bf00      	nop
   d513c:	2003e5d1 	.word	0x2003e5d1
   d5140:	2003e5d4 	.word	0x2003e5d4
   d5144:	2003e434 	.word	0x2003e434
   d5148:	2003e474 	.word	0x2003e474
   d514c:	2003e5fd 	.word	0x2003e5fd
   d5150:	2003e5fc 	.word	0x2003e5fc
   d5154:	2003e408 	.word	0x2003e408
   d5158:	2003e570 	.word	0x2003e570
   d515c:	2003e490 	.word	0x2003e490
   d5160:	2003dfb2 	.word	0x2003dfb2
   d5164:	2003dbc0 	.word	0x2003dbc0
   d5168:	2003df91 	.word	0x2003df91
   d516c:	000db937 	.word	0x000db937
   d5170:	000db94c 	.word	0x000db94c
   d5174:	2003e438 	.word	0x2003e438
   d5178:	000db95b 	.word	0x000db95b
   d517c:	2003e470 	.word	0x2003e470
   d5180:	2003dfb3 	.word	0x2003dfb3
   d5184:	2003e600 	.word	0x2003e600
   d5188:	000dbf74 	.word	0x000dbf74
   d518c:	000db975 	.word	0x000db975
   d5190:	000db98e 	.word	0x000db98e
   d5194:	000db9a2 	.word	0x000db9a2

000d5198 <_ZN10CloudClass8variableIA13_cJRdEEEbRKT_DpOT0_>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5198:	2300      	movs	r3, #0
   d519a:	2209      	movs	r2, #9
   d519c:	f001 bebe 	b.w	d6f1c <spark_variable>

000d51a0 <setup>:
void setup() {
   d51a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d51a4:	2100      	movs	r1, #0
void setup() {
   d51a6:	b09a      	sub	sp, #104	; 0x68
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d51a8:	2008      	movs	r0, #8
   d51aa:	f003 fa87 	bl	d86bc <pinMode>
  pinMode(donePin,OUTPUT);                                                                  // Allows us to pet the watchdog
   d51ae:	2101      	movs	r1, #1
   d51b0:	2005      	movs	r0, #5
   d51b2:	f003 fa83 	bl	d86bc <pinMode>
  petWatchdog();                                                                            // Pet the watchdog - This will reset the watchdog time period AND 
   d51b6:	f7ff fac9 	bl	d474c <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                                          // The watchdog timer will signal us and we have to respond
   d51ba:	2300      	movs	r3, #0
   d51bc:	9300      	str	r3, [sp, #0]
   d51be:	2201      	movs	r2, #1
   d51c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d51c4:	49ae      	ldr	r1, [pc, #696]	; (d5480 <setup+0x2e0>)
   d51c6:	2008      	movs	r0, #8
   d51c8:	f002 fbb6 	bl	d7938 <_Z15attachInterrupttPFvvE13InterruptModeah>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d51cc:	4bad      	ldr	r3, [pc, #692]	; (d5484 <setup+0x2e4>)
   d51ce:	aa0a      	add	r2, sp, #40	; 0x28
   d51d0:	f103 0510 	add.w	r5, r3, #16
   d51d4:	4617      	mov	r7, r2
   d51d6:	6818      	ldr	r0, [r3, #0]
   d51d8:	6859      	ldr	r1, [r3, #4]
   d51da:	4614      	mov	r4, r2
   d51dc:	c403      	stmia	r4!, {r0, r1}
   d51de:	3308      	adds	r3, #8
   d51e0:	42ab      	cmp	r3, r5
   d51e2:	4622      	mov	r2, r4
   d51e4:	d1f7      	bne.n	d51d6 <setup+0x36>
   d51e6:	8819      	ldrh	r1, [r3, #0]
   d51e8:	789b      	ldrb	r3, [r3, #2]
   d51ea:	70a3      	strb	r3, [r4, #2]
   d51ec:	222d      	movs	r2, #45	; 0x2d
   d51ee:	8021      	strh	r1, [r4, #0]
   d51f0:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
   d51f4:	2100      	movs	r1, #0
  state = INITIALIZATION_STATE;
   d51f6:	4ca4      	ldr	r4, [pc, #656]	; (d5488 <setup+0x2e8>)
   d51f8:	4da4      	ldr	r5, [pc, #656]	; (d548c <setup+0x2ec>)
   d51fa:	2600      	movs	r6, #0
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d51fc:	f004 f982 	bl	d9504 <memset>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d5200:	a802      	add	r0, sp, #8
  state = INITIALIZATION_STATE;
   d5202:	7026      	strb	r6, [r4, #0]
   d5204:	f001 feaa 	bl	d6f5c <spark_deviceID>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d5208:	a902      	add	r1, sp, #8
   d520a:	a806      	add	r0, sp, #24
   d520c:	f002 fdb6 	bl	d7d7c <_ZN6StringC1ERKS_>
  Particle.subscribe(System.deviceID() + "/hook-response/powermonitoring_hook/", UbidotsHandler, MY_DEVICES);
   d5210:	499f      	ldr	r1, [pc, #636]	; (d5490 <setup+0x2f0>)
   d5212:	a806      	add	r0, sp, #24
   d5214:	f002 fdf9 	bl	d7e0a <_ZplRK15StringSumHelperPKc>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d5218:	e9cd 6600 	strd	r6, r6, [sp]
   d521c:	499d      	ldr	r1, [pc, #628]	; (d5494 <setup+0x2f4>)
   d521e:	6800      	ldr	r0, [r0, #0]
   d5220:	4633      	mov	r3, r6
   d5222:	4632      	mov	r2, r6
   d5224:	f001 feaa 	bl	d6f7c <spark_subscribe>
class StringSumHelper : public String
   d5228:	a806      	add	r0, sp, #24
   d522a:	f002 fd39 	bl	d7ca0 <_ZN6StringD1Ev>
   d522e:	a802      	add	r0, sp, #8
   d5230:	f002 fd36 	bl	d7ca0 <_ZN6StringD1Ev>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5234:	4998      	ldr	r1, [pc, #608]	; (d5498 <setup+0x2f8>)
   d5236:	4899      	ldr	r0, [pc, #612]	; (d549c <setup+0x2fc>)
   d5238:	4633      	mov	r3, r6
   d523a:	2204      	movs	r2, #4
   d523c:	f001 fe6e 	bl	d6f1c <spark_variable>
   d5240:	4997      	ldr	r1, [pc, #604]	; (d54a0 <setup+0x300>)
   d5242:	4898      	ldr	r0, [pc, #608]	; (d54a4 <setup+0x304>)
   d5244:	4633      	mov	r3, r6
   d5246:	2204      	movs	r2, #4
   d5248:	f001 fe68 	bl	d6f1c <spark_variable>
   d524c:	4996      	ldr	r1, [pc, #600]	; (d54a8 <setup+0x308>)
   d524e:	4897      	ldr	r0, [pc, #604]	; (d54ac <setup+0x30c>)
   d5250:	4633      	mov	r3, r6
   d5252:	2204      	movs	r2, #4
   d5254:	f001 fe62 	bl	d6f1c <spark_variable>
   d5258:	4995      	ldr	r1, [pc, #596]	; (d54b0 <setup+0x310>)
   d525a:	4896      	ldr	r0, [pc, #600]	; (d54b4 <setup+0x314>)
   d525c:	4633      	mov	r3, r6
   d525e:	2202      	movs	r2, #2
   d5260:	f001 fe5c 	bl	d6f1c <spark_variable>
   d5264:	4633      	mov	r3, r6
   d5266:	2201      	movs	r2, #1
   d5268:	4993      	ldr	r1, [pc, #588]	; (d54b8 <setup+0x318>)
   d526a:	4894      	ldr	r0, [pc, #592]	; (d54bc <setup+0x31c>)
   d526c:	f001 fe56 	bl	d6f1c <spark_variable>
  Particle.variable("Constant One", sensorConstants.sensorOneConstant);
   d5270:	4993      	ldr	r1, [pc, #588]	; (d54c0 <setup+0x320>)
   d5272:	4894      	ldr	r0, [pc, #592]	; (d54c4 <setup+0x324>)
   d5274:	f7ff ff90 	bl	d5198 <_ZN10CloudClass8variableIA13_cJRdEEEbRKT_DpOT0_>
  Particle.variable("Constant Two", sensorConstants.sensorTwoConstant);
   d5278:	4993      	ldr	r1, [pc, #588]	; (d54c8 <setup+0x328>)
   d527a:	4894      	ldr	r0, [pc, #592]	; (d54cc <setup+0x32c>)
   d527c:	f7ff ff8c 	bl	d5198 <_ZN10CloudClass8variableIA13_cJRdEEEbRKT_DpOT0_>
   d5280:	4993      	ldr	r1, [pc, #588]	; (d54d0 <setup+0x330>)
   d5282:	4894      	ldr	r0, [pc, #592]	; (d54d4 <setup+0x334>)
   d5284:	4633      	mov	r3, r6
   d5286:	2209      	movs	r2, #9
   d5288:	f001 fe48 	bl	d6f1c <spark_variable>
   d528c:	4992      	ldr	r1, [pc, #584]	; (d54d8 <setup+0x338>)
   d528e:	4893      	ldr	r0, [pc, #588]	; (d54dc <setup+0x33c>)
   d5290:	4633      	mov	r3, r6
   d5292:	2209      	movs	r2, #9
   d5294:	f001 fe42 	bl	d6f1c <spark_variable>
   d5298:	4633      	mov	r3, r6
   d529a:	2209      	movs	r2, #9
   d529c:	4990      	ldr	r1, [pc, #576]	; (d54e0 <setup+0x340>)
   d529e:	4891      	ldr	r0, [pc, #580]	; (d54e4 <setup+0x344>)
   d52a0:	f001 fe3c 	bl	d6f1c <spark_variable>
  Particle.variable("Constant Six", sensorConstants.sensorSixConstant);
   d52a4:	4990      	ldr	r1, [pc, #576]	; (d54e8 <setup+0x348>)
   d52a6:	4891      	ldr	r0, [pc, #580]	; (d54ec <setup+0x34c>)
   d52a8:	f7ff ff76 	bl	d5198 <_ZN10CloudClass8variableIA13_cJRdEEEbRKT_DpOT0_>
        return _function(name, args...);
   d52ac:	4990      	ldr	r1, [pc, #576]	; (d54f0 <setup+0x350>)
   d52ae:	4891      	ldr	r0, [pc, #580]	; (d54f4 <setup+0x354>)
   d52b0:	f7ff f878 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52b4:	4990      	ldr	r1, [pc, #576]	; (d54f8 <setup+0x358>)
   d52b6:	4891      	ldr	r0, [pc, #580]	; (d54fc <setup+0x35c>)
   d52b8:	f7ff f874 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52bc:	4990      	ldr	r1, [pc, #576]	; (d5500 <setup+0x360>)
   d52be:	4891      	ldr	r0, [pc, #580]	; (d5504 <setup+0x364>)
   d52c0:	f7ff f870 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52c4:	4990      	ldr	r1, [pc, #576]	; (d5508 <setup+0x368>)
   d52c6:	487d      	ldr	r0, [pc, #500]	; (d54bc <setup+0x31c>)
   d52c8:	f7ff f86c 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52cc:	498f      	ldr	r1, [pc, #572]	; (d550c <setup+0x36c>)
   d52ce:	4890      	ldr	r0, [pc, #576]	; (d5510 <setup+0x370>)
   d52d0:	f7ff f868 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52d4:	498f      	ldr	r1, [pc, #572]	; (d5514 <setup+0x374>)
   d52d6:	4890      	ldr	r0, [pc, #576]	; (d5518 <setup+0x378>)
   d52d8:	f7ff f864 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52dc:	498f      	ldr	r1, [pc, #572]	; (d551c <setup+0x37c>)
   d52de:	4890      	ldr	r0, [pc, #576]	; (d5520 <setup+0x380>)
   d52e0:	f7ff f860 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52e4:	498f      	ldr	r1, [pc, #572]	; (d5524 <setup+0x384>)
   d52e6:	4890      	ldr	r0, [pc, #576]	; (d5528 <setup+0x388>)
   d52e8:	f7ff f85c 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52ec:	498f      	ldr	r1, [pc, #572]	; (d552c <setup+0x38c>)
   d52ee:	4890      	ldr	r0, [pc, #576]	; (d5530 <setup+0x390>)
   d52f0:	f7ff f858 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52f4:	498f      	ldr	r1, [pc, #572]	; (d5534 <setup+0x394>)
   d52f6:	4890      	ldr	r0, [pc, #576]	; (d5538 <setup+0x398>)
   d52f8:	f7ff f854 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52fc:	498f      	ldr	r1, [pc, #572]	; (d553c <setup+0x39c>)
   d52fe:	4890      	ldr	r0, [pc, #576]	; (d5540 <setup+0x3a0>)
   d5300:	f7ff f850 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5304:	498f      	ldr	r1, [pc, #572]	; (d5544 <setup+0x3a4>)
   d5306:	4890      	ldr	r0, [pc, #576]	; (d5548 <setup+0x3a8>)
   d5308:	f7ff f84c 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d530c:	498f      	ldr	r1, [pc, #572]	; (d554c <setup+0x3ac>)
   d530e:	4890      	ldr	r0, [pc, #576]	; (d5550 <setup+0x3b0>)
   d5310:	f7ff f848 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
  rtc.setup();                                                        // Start the real time clock
   d5314:	488f      	ldr	r0, [pc, #572]	; (d5554 <setup+0x3b4>)
   d5316:	f000 ff07 	bl	d6128 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d531a:	4631      	mov	r1, r6
   d531c:	488d      	ldr	r0, [pc, #564]	; (d5554 <setup+0x3b4>)
   d531e:	f001 f840 	bl	d63a2 <_ZN8MCP7941010clearAlarmEi>
  fram.begin();                                                                             // Initialize the FRAM module
   d5322:	488d      	ldr	r0, [pc, #564]	; (d5558 <setup+0x3b8>)
   d5324:	f000 fb9c 	bl	d5a60 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5328:	2301      	movs	r3, #1
   d532a:	488b      	ldr	r0, [pc, #556]	; (d5558 <setup+0x3b8>)
   d532c:	aa06      	add	r2, sp, #24
   d532e:	4631      	mov	r1, r6
   d5330:	f000 fbd8 	bl	d5ae4 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                                                   // Check to see if the memory map in the sketch matches the data on the chip
   d5334:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5338:	2b0b      	cmp	r3, #11
   d533a:	d060      	beq.n	d53fe <setup+0x25e>
    fram.erase();                                                                           // Reset the FRAM to correct the issue
   d533c:	4886      	ldr	r0, [pc, #536]	; (d5558 <setup+0x3b8>)
   d533e:	f000 fb99 	bl	d5a74 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5342:	4a86      	ldr	r2, [pc, #536]	; (d555c <setup+0x3bc>)
   d5344:	4884      	ldr	r0, [pc, #528]	; (d5558 <setup+0x3b8>)
   d5346:	2304      	movs	r3, #4
   d5348:	4631      	mov	r1, r6
   d534a:	f000 fc16 	bl	d5b7a <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d534e:	2301      	movs	r3, #1
   d5350:	4881      	ldr	r0, [pc, #516]	; (d5558 <setup+0x3b8>)
   d5352:	aa06      	add	r2, sp, #24
   d5354:	4631      	mov	r1, r6
   d5356:	f000 fbc5 	bl	d5ae4 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;                              // Device will not work without FRAM
   d535a:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d535e:	2b0b      	cmp	r3, #11
   d5360:	d04a      	beq.n	d53f8 <setup+0x258>
   d5362:	2301      	movs	r3, #1
   d5364:	7023      	strb	r3, [r4, #0]
  emon1.current(CT1_PIN,sensorConstants.sensorOneConstant);
   d5366:	4e56      	ldr	r6, [pc, #344]	; (d54c0 <setup+0x320>)
  checkSystemValues();                                                                      // Make sure System values are all in valid range
   d5368:	f7ff f9c6 	bl	d46f8 <_Z17checkSystemValuesv>
  emon1.current(CT1_PIN,sensorConstants.sensorOneConstant);
   d536c:	4b7c      	ldr	r3, [pc, #496]	; (d5560 <setup+0x3c0>)
   d536e:	487d      	ldr	r0, [pc, #500]	; (d5564 <setup+0x3c4>)
   d5370:	7819      	ldrb	r1, [r3, #0]
   d5372:	ed96 0b00 	vldr	d0, [r6]
   d5376:	f000 facf 	bl	d5918 <_ZN13EnergyMonitor7currentEjd>
  emon2.current(CT2_PIN,sensorConstants.sensorTwoConstant);
   d537a:	4b7b      	ldr	r3, [pc, #492]	; (d5568 <setup+0x3c8>)
   d537c:	487b      	ldr	r0, [pc, #492]	; (d556c <setup+0x3cc>)
   d537e:	7819      	ldrb	r1, [r3, #0]
   d5380:	ed96 0b02 	vldr	d0, [r6, #8]
   d5384:	f000 fac8 	bl	d5918 <_ZN13EnergyMonitor7currentEjd>
  emon3.current(CT3_PIN,sensorConstants.sensorThreeConstant);
   d5388:	4b79      	ldr	r3, [pc, #484]	; (d5570 <setup+0x3d0>)
   d538a:	487a      	ldr	r0, [pc, #488]	; (d5574 <setup+0x3d4>)
   d538c:	7819      	ldrb	r1, [r3, #0]
   d538e:	ed96 0b04 	vldr	d0, [r6, #16]
   d5392:	f000 fac1 	bl	d5918 <_ZN13EnergyMonitor7currentEjd>
  emon4.current(CT4_PIN,sensorConstants.sensorFourConstant);
   d5396:	4b78      	ldr	r3, [pc, #480]	; (d5578 <setup+0x3d8>)
   d5398:	4878      	ldr	r0, [pc, #480]	; (d557c <setup+0x3dc>)
   d539a:	7819      	ldrb	r1, [r3, #0]
   d539c:	ed96 0b06 	vldr	d0, [r6, #24]
   d53a0:	f000 faba 	bl	d5918 <_ZN13EnergyMonitor7currentEjd>
  emon5.current(CT5_PIN,sensorConstants.sensorFiveConstant);
   d53a4:	4b76      	ldr	r3, [pc, #472]	; (d5580 <setup+0x3e0>)
   d53a6:	4877      	ldr	r0, [pc, #476]	; (d5584 <setup+0x3e4>)
   d53a8:	7819      	ldrb	r1, [r3, #0]
   d53aa:	ed96 0b08 	vldr	d0, [r6, #32]
   d53ae:	f000 fab3 	bl	d5918 <_ZN13EnergyMonitor7currentEjd>
  emon6.current(CT6_PIN,sensorConstants.sensorSixConstant);
   d53b2:	4b75      	ldr	r3, [pc, #468]	; (d5588 <setup+0x3e8>)
   d53b4:	4875      	ldr	r0, [pc, #468]	; (d558c <setup+0x3ec>)
   d53b6:	7819      	ldrb	r1, [r3, #0]
   d53b8:	ed96 0b0a 	vldr	d0, [r6, #40]	; 0x28
   d53bc:	f000 faac 	bl	d5918 <_ZN13EnergyMonitor7currentEjd>
  if (sysStatus.thirdPartySim) {
   d53c0:	786b      	ldrb	r3, [r5, #1]
   d53c2:	b38b      	cbz	r3, d5428 <setup+0x288>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d53c4:	2000      	movs	r0, #0
   d53c6:	f001 fbeb 	bl	d6ba0 <hal_timer_millis>
   d53ca:	f04f 0a00 	mov.w	sl, #0
   d53ce:	4606      	mov	r6, r0
   d53d0:	2000      	movs	r0, #0
   d53d2:	f001 fbe5 	bl	d6ba0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d53d6:	ebb0 0806 	subs.w	r8, r0, r6
   d53da:	eb61 090a 	sbc.w	r9, r1, sl
        while (_while() && !_condition()) {
   d53de:	2300      	movs	r3, #0
   d53e0:	f247 522f 	movw	r2, #29999	; 0x752f
   d53e4:	454b      	cmp	r3, r9
   d53e6:	bf08      	it	eq
   d53e8:	4542      	cmpeq	r2, r8
   d53ea:	d30f      	bcc.n	d540c <setup+0x26c>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d53ec:	f001 fdae 	bl	d6f4c <spark_cloud_flag_connected>
   d53f0:	b960      	cbnz	r0, d540c <setup+0x26c>
            spark_process();
   d53f2:	f001 fda3 	bl	d6f3c <spark_process>
        while (_while() && !_condition()) {
   d53f6:	e7eb      	b.n	d53d0 <setup+0x230>
      loadSystemDefaults();                                                                 // Out of the box, we need the device to be awake and connected
   d53f8:	f7ff f954 	bl	d46a4 <_Z18loadSystemDefaultsv>
   d53fc:	e7b3      	b.n	d5366 <setup+0x1c6>
   d53fe:	2328      	movs	r3, #40	; 0x28
   d5400:	462a      	mov	r2, r5
   d5402:	2101      	movs	r1, #1
   d5404:	4854      	ldr	r0, [pc, #336]	; (d5558 <setup+0x3b8>)
   d5406:	f000 fb6d 	bl	d5ae4 <_ZN6MB85RC8readDataEjPhj>
        return t;
   d540a:	e7ac      	b.n	d5366 <setup+0x1c6>
   d540c:	f001 fd9e 	bl	d6f4c <spark_cloud_flag_connected>
    Particle.keepAlive(sysStatus.keepAlive);                                              // Set the keep alive value
   d5410:	6868      	ldr	r0, [r5, #4]
   d5412:	f7fe ffcd 	bl	d43b0 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d5416:	686b      	ldr	r3, [r5, #4]
   d5418:	485d      	ldr	r0, [pc, #372]	; (d5590 <setup+0x3f0>)
   d541a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d541e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d5422:	4359      	muls	r1, r3
   d5424:	f7fe ffd7 	bl	d43d6 <_ZN5Timer12changePeriodEjj>
  takeMeasurements();                                                                       // For the benefit of monitoring the device
   d5428:	f7ff fc6a 	bl	d4d00 <_Z16takeMeasurementsv>
  if(sysStatus.verboseMode) publishQueue.publish("Startup",StartupMessage,PRIVATE);                       // Let Particle know how the startup process went
   d542c:	7a6b      	ldrb	r3, [r5, #9]
   d542e:	b14b      	cbz	r3, d5444 <setup+0x2a4>
   d5430:	2300      	movs	r3, #0
   d5432:	f88d 3000 	strb.w	r3, [sp]
   d5436:	4b57      	ldr	r3, [pc, #348]	; (d5594 <setup+0x3f4>)
   d5438:	4957      	ldr	r1, [pc, #348]	; (d5598 <setup+0x3f8>)
   d543a:	781b      	ldrb	r3, [r3, #0]
   d543c:	4857      	ldr	r0, [pc, #348]	; (d559c <setup+0x3fc>)
   d543e:	463a      	mov	r2, r7
   d5440:	f7fe ffda 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5444:	f001 fd82 	bl	d6f4c <spark_cloud_flag_connected>
   d5448:	b910      	cbnz	r0, d5450 <setup+0x2b0>
            spark_process();
   d544a:	f001 fd77 	bl	d6f3c <spark_process>
        while (_while() && !_condition()) {
   d544e:	e7f9      	b.n	d5444 <setup+0x2a4>
   d5450:	f001 fd7c 	bl	d6f4c <spark_cloud_flag_connected>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;                                    // We made it throughgo let's go to idle
   d5454:	7823      	ldrb	r3, [r4, #0]
   d5456:	b90b      	cbnz	r3, d545c <setup+0x2bc>
   d5458:	2302      	movs	r3, #2
   d545a:	7023      	strb	r3, [r4, #0]
   d545c:	2300      	movs	r3, #0
  publishQueue.publish("DEBUG- Startup",stateNames[state],PRIVATE);
   d545e:	7822      	ldrb	r2, [r4, #0]
   d5460:	494f      	ldr	r1, [pc, #316]	; (d55a0 <setup+0x400>)
   d5462:	f88d 3000 	strb.w	r3, [sp]
   d5466:	4b4b      	ldr	r3, [pc, #300]	; (d5594 <setup+0x3f4>)
   d5468:	201a      	movs	r0, #26
   d546a:	fb00 1202 	mla	r2, r0, r2, r1
   d546e:	781b      	ldrb	r3, [r3, #0]
   d5470:	494c      	ldr	r1, [pc, #304]	; (d55a4 <setup+0x404>)
   d5472:	484a      	ldr	r0, [pc, #296]	; (d559c <setup+0x3fc>)
   d5474:	f7fe ffc0 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d5478:	b01a      	add	sp, #104	; 0x68
   d547a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d547e:	bf00      	nop
   d5480:	000d40c9 	.word	0x000d40c9
   d5484:	000dbb20 	.word	0x000dbb20
   d5488:	2003e5d1 	.word	0x2003e5d1
   d548c:	2003e5d4 	.word	0x2003e5d4
   d5490:	000db9a8 	.word	0x000db9a8
   d5494:	000d4415 	.word	0x000d4415
   d5498:	000dbb60 	.word	0x000dbb60
   d549c:	000db9cd 	.word	0x000db9cd
   d54a0:	2003dfa2 	.word	0x2003dfa2
   d54a4:	000db9d5 	.word	0x000db9d5
   d54a8:	2003df92 	.word	0x2003df92
   d54ac:	000db9dd 	.word	0x000db9dd
   d54b0:	2003e5d8 	.word	0x2003e5d8
   d54b4:	000db9ec 	.word	0x000db9ec
   d54b8:	2003e5d5 	.word	0x2003e5d5
   d54bc:	000db4ec 	.word	0x000db4ec
   d54c0:	2003dbc0 	.word	0x2003dbc0
   d54c4:	000dba18 	.word	0x000dba18
   d54c8:	2003dbc8 	.word	0x2003dbc8
   d54cc:	000dba29 	.word	0x000dba29
   d54d0:	2003dbd0 	.word	0x2003dbd0
   d54d4:	000dba3a 	.word	0x000dba3a
   d54d8:	2003dbd8 	.word	0x2003dbd8
   d54dc:	000dba4d 	.word	0x000dba4d
   d54e0:	2003dbe0 	.word	0x2003dbe0
   d54e4:	000dba5f 	.word	0x000dba5f
   d54e8:	2003dbe8 	.word	0x2003dbe8
   d54ec:	000dba71 	.word	0x000dba71
   d54f0:	000d40f1 	.word	0x000d40f1
   d54f4:	000db9fb 	.word	0x000db9fb
   d54f8:	000d45c1 	.word	0x000d45c1
   d54fc:	000dba07 	.word	0x000dba07
   d5500:	000d4545 	.word	0x000d4545
   d5504:	000db529 	.word	0x000db529
   d5508:	000d44a9 	.word	0x000d44a9
   d550c:	000d4a79 	.word	0x000d4a79
   d5510:	000dba14 	.word	0x000dba14
   d5514:	000d4acd 	.word	0x000d4acd
   d5518:	000dba25 	.word	0x000dba25
   d551c:	000d4b21 	.word	0x000d4b21
   d5520:	000dba36 	.word	0x000dba36
   d5524:	000d4b75 	.word	0x000d4b75
   d5528:	000dba49 	.word	0x000dba49
   d552c:	000d4bc9 	.word	0x000d4bc9
   d5530:	000dba5b 	.word	0x000dba5b
   d5534:	000d4c1d 	.word	0x000d4c1d
   d5538:	000dba6d 	.word	0x000dba6d
   d553c:	000d410d 	.word	0x000d410d
   d5540:	000dba7e 	.word	0x000dba7e
   d5544:	000d41a1 	.word	0x000d41a1
   d5548:	000dba8c 	.word	0x000dba8c
   d554c:	000d4641 	.word	0x000d4641
   d5550:	000dba9b 	.word	0x000dba9b
   d5554:	2003e474 	.word	0x2003e474
   d5558:	2003e408 	.word	0x2003e408
   d555c:	000dbb68 	.word	0x000dbb68
   d5560:	2003dbb0 	.word	0x2003dbb0
   d5564:	2003dfb8 	.word	0x2003dfb8
   d5568:	2003dbb1 	.word	0x2003dbb1
   d556c:	2003e070 	.word	0x2003e070
   d5570:	2003dbb2 	.word	0x2003dbb2
   d5574:	2003e128 	.word	0x2003e128
   d5578:	2003dbb3 	.word	0x2003dbb3
   d557c:	2003e1e0 	.word	0x2003e1e0
   d5580:	2003dbb4 	.word	0x2003dbb4
   d5584:	2003e298 	.word	0x2003e298
   d5588:	2003dbb5 	.word	0x2003dbb5
   d558c:	2003e350 	.word	0x2003e350
   d5590:	2003e418 	.word	0x2003e418
   d5594:	2003df91 	.word	0x2003df91
   d5598:	000db953 	.word	0x000db953
   d559c:	2003e438 	.word	0x2003e438
   d55a0:	2003dbf0 	.word	0x2003dbf0
   d55a4:	000db94c 	.word	0x000db94c

000d55a8 <_GLOBAL__sub_I_SystemMode>:

  void getBatteryCharge()
{
  voltage = analogRead(BATT) * 0.0011224;
  snprintf(batteryString, sizeof(batteryString), "%3.1f V", voltage);
}
   d55a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        val_(val) {
   d55ac:	4b7d      	ldr	r3, [pc, #500]	; (d57a4 <_GLOBAL__sub_I_SystemMode+0x1fc>)
              error_(SYSTEM_ERROR_NONE) {
   d55ae:	4c7e      	ldr	r4, [pc, #504]	; (d57a8 <_GLOBAL__sub_I_SystemMode+0x200>)
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d55b0:	4f7e      	ldr	r7, [pc, #504]	; (d57ac <_GLOBAL__sub_I_SystemMode+0x204>)
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d55b2:	f8df a270 	ldr.w	sl, [pc, #624]	; d5824 <_GLOBAL__sub_I_SystemMode+0x27c>
   d55b6:	2601      	movs	r6, #1
   d55b8:	701e      	strb	r6, [r3, #0]
   d55ba:	4b7d      	ldr	r3, [pc, #500]	; (d57b0 <_GLOBAL__sub_I_SystemMode+0x208>)
   d55bc:	2202      	movs	r2, #2
   d55be:	2500      	movs	r5, #0
   d55c0:	701a      	strb	r2, [r3, #0]
    SleepResult() {}
   d55c2:	4b7c      	ldr	r3, [pc, #496]	; (d57b4 <_GLOBAL__sub_I_SystemMode+0x20c>)
   d55c4:	60a3      	str	r3, [r4, #8]
}
   d55c6:	b089      	sub	sp, #36	; 0x24
              error_(SYSTEM_ERROR_NONE) {
   d55c8:	6025      	str	r5, [r4, #0]
   d55ca:	80a5      	strh	r5, [r4, #4]
    SleepResult() {}
   d55cc:	71a5      	strb	r5, [r4, #6]
        set_system_mode(mode);
   d55ce:	4630      	mov	r0, r6
   d55d0:	f001 fc4e 	bl	d6e70 <set_system_mode>
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d55d4:	463a      	mov	r2, r7
   d55d6:	4978      	ldr	r1, [pc, #480]	; (d57b8 <_GLOBAL__sub_I_SystemMode+0x210>)
   d55d8:	4620      	mov	r0, r4
   d55da:	f003 f8f1 	bl	d87c0 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   d55de:	4629      	mov	r1, r5
   d55e0:	4630      	mov	r0, r6
   d55e2:	f001 fc55 	bl	d6e90 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d55e6:	4631      	mov	r1, r6
   d55e8:	2004      	movs	r0, #4
   d55ea:	f001 faa9 	bl	d6b40 <HAL_Feature_Set>
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   d55ee:	f003 f8bf 	bl	d8770 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d55f2:	4c72      	ldr	r4, [pc, #456]	; (d57bc <_GLOBAL__sub_I_SystemMode+0x214>)
   d55f4:	4601      	mov	r1, r0
   d55f6:	462b      	mov	r3, r5
   d55f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d55fc:	4620      	mov	r0, r4
   d55fe:	f000 fa25 	bl	d5a4c <_ZN6MB85RCC1ER7TwoWireji>
   d5602:	4b6f      	ldr	r3, [pc, #444]	; (d57c0 <_GLOBAL__sub_I_SystemMode+0x218>)
   d5604:	6023      	str	r3, [r4, #0]
   d5606:	463a      	mov	r2, r7
   d5608:	496e      	ldr	r1, [pc, #440]	; (d57c4 <_GLOBAL__sub_I_SystemMode+0x21c>)
   d560a:	4620      	mov	r0, r4
   d560c:	f003 f8d8 	bl	d87c0 <__aeabi_atexit>
MCP79410 rtc;                                                                               // Rickkas MCP79410 libarary
   d5610:	f003 f8ae 	bl	d8770 <_Z19__fetch_global_Wirev>
   d5614:	4c6c      	ldr	r4, [pc, #432]	; (d57c8 <_GLOBAL__sub_I_SystemMode+0x220>)
   d5616:	4601      	mov	r1, r0
   d5618:	4620      	mov	r0, r4
   d561a:	f000 fc8d 	bl	d5f38 <_ZN8MCP79410C1ER7TwoWire>
   d561e:	4620      	mov	r0, r4
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d5620:	4c6a      	ldr	r4, [pc, #424]	; (d57cc <_GLOBAL__sub_I_SystemMode+0x224>)
   d5622:	496b      	ldr	r1, [pc, #428]	; (d57d0 <_GLOBAL__sub_I_SystemMode+0x228>)
   d5624:	463a      	mov	r2, r7
   d5626:	f003 f8cb 	bl	d87c0 <__aeabi_atexit>
   d562a:	496a      	ldr	r1, [pc, #424]	; (d57d4 <_GLOBAL__sub_I_SystemMode+0x22c>)
   d562c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d5630:	4620      	mov	r0, r4
   d5632:	f001 f8f7 	bl	d6824 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d5636:	4b68      	ldr	r3, [pc, #416]	; (d57d8 <_GLOBAL__sub_I_SystemMode+0x230>)
   d5638:	6023      	str	r3, [r4, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d563a:	463a      	mov	r2, r7
   d563c:	4967      	ldr	r1, [pc, #412]	; (d57dc <_GLOBAL__sub_I_SystemMode+0x234>)
   d563e:	4620      	mov	r0, r4
   d5640:	f003 f8be 	bl	d87c0 <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5644:	4b66      	ldr	r3, [pc, #408]	; (d57e0 <_GLOBAL__sub_I_SystemMode+0x238>)
   d5646:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5648:	f10d 0810 	add.w	r8, sp, #16
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d564c:	4c65      	ldr	r4, [pc, #404]	; (d57e4 <_GLOBAL__sub_I_SystemMode+0x23c>)
   d564e:	4b66      	ldr	r3, [pc, #408]	; (d57e8 <_GLOBAL__sub_I_SystemMode+0x240>)
   d5650:	6023      	str	r3, [r4, #0]
   d5652:	e898 0003 	ldmia.w	r8, {r0, r1}
   d5656:	aa02      	add	r2, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d5658:	f104 030c 	add.w	r3, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d565c:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5660:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5664:	e888 0003 	stmia.w	r8, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5668:	e892 0003 	ldmia.w	r2, {r0, r1}
   d566c:	e883 0003 	stmia.w	r3, {r0, r1}
   d5670:	4b5e      	ldr	r3, [pc, #376]	; (d57ec <_GLOBAL__sub_I_SystemMode+0x244>)
   d5672:	6163      	str	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5674:	69a3      	ldr	r3, [r4, #24]
   d5676:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d5678:	4b5d      	ldr	r3, [pc, #372]	; (d57f0 <_GLOBAL__sub_I_SystemMode+0x248>)
   d567a:	7125      	strb	r5, [r4, #4]
   d567c:	60a5      	str	r5, [r4, #8]
   d567e:	61a3      	str	r3, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d5680:	4a5c      	ldr	r2, [pc, #368]	; (d57f4 <_GLOBAL__sub_I_SystemMode+0x24c>)
      __a = _GLIBCXX_MOVE(__b);
   d5682:	9506      	str	r5, [sp, #24]
   d5684:	4623      	mov	r3, r4
   d5686:	e9cd 5500 	strd	r5, r5, [sp]
   d568a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d568e:	f104 0008 	add.w	r0, r4, #8
   d5692:	f001 f9fd 	bl	d6a90 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d5696:	4640      	mov	r0, r8
   d5698:	f7fe fe46 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
Timer keepAliveTimer(1000, keepAliveMessage);
   d569c:	463a      	mov	r2, r7
   d569e:	4956      	ldr	r1, [pc, #344]	; (d57f8 <_GLOBAL__sub_I_SystemMode+0x250>)
   d56a0:	4620      	mov	r0, r4
   d56a2:	f003 f88d 	bl	d87c0 <__aeabi_atexit>
struct systemStatus_structure {                     
   d56a6:	4b55      	ldr	r3, [pc, #340]	; (d57fc <_GLOBAL__sub_I_SystemMode+0x254>)
struct sensor_data_struct {                                                               // Here we define the structure for collecting and storing data from the sensors
   d56a8:	4c55      	ldr	r4, [pc, #340]	; (d5800 <_GLOBAL__sub_I_SystemMode+0x258>)
struct systemStatus_structure {                     
   d56aa:	61de      	str	r6, [r3, #28]
   d56ac:	841d      	strh	r5, [r3, #32]
   d56ae:	f883 6022 	strb.w	r6, [r3, #34]	; 0x22
struct sensor_data_struct {                                                               // Here we define the structure for collecting and storing data from the sensors
   d56b2:	2300      	movs	r3, #0
   d56b4:	6023      	str	r3, [r4, #0]
   d56b6:	6063      	str	r3, [r4, #4]
   d56b8:	60a3      	str	r3, [r4, #8]
   d56ba:	60e3      	str	r3, [r4, #12]
   d56bc:	6123      	str	r3, [r4, #16]
   d56be:	6163      	str	r3, [r4, #20]
   d56c0:	61a3      	str	r3, [r4, #24]
   d56c2:	61e3      	str	r3, [r4, #28]
   d56c4:	6223      	str	r3, [r4, #32]
   d56c6:	6263      	str	r3, [r4, #36]	; 0x24
   d56c8:	62a3      	str	r3, [r4, #40]	; 0x28
   d56ca:	62e3      	str	r3, [r4, #44]	; 0x2c
   d56cc:	4629      	mov	r1, r5
   d56ce:	2218      	movs	r2, #24
   d56d0:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d56d4:	f003 ff16 	bl	d9504 <memset>
   d56d8:	4629      	mov	r1, r5
   d56da:	2218      	movs	r2, #24
   d56dc:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d56e0:	f003 ff10 	bl	d9504 <memset>
   d56e4:	4629      	mov	r1, r5
   d56e6:	2218      	movs	r2, #24
   d56e8:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d56ec:	f003 ff0a 	bl	d9504 <memset>
   d56f0:	4629      	mov	r1, r5
   d56f2:	2218      	movs	r2, #24
   d56f4:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d56f8:	f003 ff04 	bl	d9504 <memset>
   d56fc:	4629      	mov	r1, r5
   d56fe:	2220      	movs	r2, #32
   d5700:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d5704:	f003 fefe 	bl	d9504 <memset>
   d5708:	4629      	mov	r1, r5
   d570a:	2220      	movs	r2, #32
   d570c:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   d5710:	f003 fef8 	bl	d9504 <memset>
        {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d5714:	4a3b      	ldr	r2, [pc, #236]	; (d5804 <_GLOBAL__sub_I_SystemMode+0x25c>)
        {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d5716:	493c      	ldr	r1, [pc, #240]	; (d5808 <_GLOBAL__sub_I_SystemMode+0x260>)
        {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d5718:	4b3c      	ldr	r3, [pc, #240]	; (d580c <_GLOBAL__sub_I_SystemMode+0x264>)
        {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d571a:	f891 c000 	ldrb.w	ip, [r1]
        {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d571e:	493c      	ldr	r1, [pc, #240]	; (d5810 <_GLOBAL__sub_I_SystemMode+0x268>)
        {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d5720:	f893 e000 	ldrb.w	lr, [r3]
  };
   d5724:	4b3b      	ldr	r3, [pc, #236]	; (d5814 <_GLOBAL__sub_I_SystemMode+0x26c>)
        {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d5726:	780d      	ldrb	r5, [r1, #0]
  };
   d5728:	f8c3 e000 	str.w	lr, [r3]
        {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d572c:	ed92 7b00 	vldr	d7, [r2]
        {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d5730:	e9d2 8902 	ldrd	r8, r9, [r2, #8]
        {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d5734:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
  };
   d5738:	ed83 7b02 	vstr	d7, [r3, #8]
   d573c:	e9c3 8906 	strd	r8, r9, [r3, #24]
   d5740:	e9c3 670a 	strd	r6, r7, [r3, #40]	; 0x28
   d5744:	f8c3 c010 	str.w	ip, [r3, #16]
   d5748:	621d      	str	r5, [r3, #32]
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d574a:	4b33      	ldr	r3, [pc, #204]	; (d5818 <_GLOBAL__sub_I_SystemMode+0x270>)
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d574c:	f89a a000 	ldrb.w	sl, [sl]
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d5750:	781c      	ldrb	r4, [r3, #0]
  };
   d5752:	4b32      	ldr	r3, [pc, #200]	; (d581c <_GLOBAL__sub_I_SystemMode+0x274>)
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d5754:	f8c3 a010 	str.w	sl, [r3, #16]
  };
   d5758:	e9d2 ab08 	ldrd	sl, fp, [r2, #32]
   d575c:	e9c3 ab06 	strd	sl, fp, [r3, #24]
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d5760:	f8df a0c4 	ldr.w	sl, [pc, #196]	; d5828 <_GLOBAL__sub_I_SystemMode+0x280>
  };
   d5764:	601c      	str	r4, [r3, #0]
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d5766:	f89a a000 	ldrb.w	sl, [sl]
   d576a:	f8c3 a020 	str.w	sl, [r3, #32]
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d576e:	e9d2 0106 	ldrd	r0, r1, [r2, #24]
  };
   d5772:	e9d2 ab0a 	ldrd	sl, fp, [r2, #40]	; 0x28
   d5776:	e9c3 0102 	strd	r0, r1, [r3, #8]
   d577a:	e9c3 ab0a 	strd	sl, fp, [r3, #40]	; 0x28
   };
   d577e:	4b28      	ldr	r3, [pc, #160]	; (d5820 <_GLOBAL__sub_I_SystemMode+0x278>)
   d5780:	ed83 7b02 	vstr	d7, [r3, #8]
   d5784:	e9c3 8906 	strd	r8, r9, [r3, #24]
   d5788:	e9c3 670a 	strd	r6, r7, [r3, #40]	; 0x28
   d578c:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
   d5790:	f8c3 e000 	str.w	lr, [r3]
   d5794:	f8c3 c010 	str.w	ip, [r3, #16]
   d5798:	621d      	str	r5, [r3, #32]
   d579a:	631c      	str	r4, [r3, #48]	; 0x30
}
   d579c:	b009      	add	sp, #36	; 0x24
   d579e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d57a2:	bf00      	nop
   d57a4:	2003df91 	.word	0x2003df91
   d57a8:	2003dee0 	.word	0x2003dee0
   d57ac:	2003dea0 	.word	0x2003dea0
   d57b0:	2003df90 	.word	0x2003df90
   d57b4:	ffff0000 	.word	0xffff0000
   d57b8:	000d42c7 	.word	0x000d42c7
   d57bc:	2003e408 	.word	0x2003e408
   d57c0:	000dbaf0 	.word	0x000dbaf0
   d57c4:	000d4265 	.word	0x000d4265
   d57c8:	2003e474 	.word	0x2003e474
   d57cc:	2003e438 	.word	0x2003e438
   d57d0:	000d5cc3 	.word	0x000d5cc3
   d57d4:	2003f400 	.word	0x2003f400
   d57d8:	000dbac8 	.word	0x000dbac8
   d57dc:	000d423d 	.word	0x000d423d
   d57e0:	000d42d9 	.word	0x000d42d9
   d57e4:	2003e418 	.word	0x2003e418
   d57e8:	000dbab4 	.word	0x000dbab4
   d57ec:	000d40d9 	.word	0x000d40d9
   d57f0:	000d40d5 	.word	0x000d40d5
   d57f4:	000d428d 	.word	0x000d428d
   d57f8:	000d433d 	.word	0x000d433d
   d57fc:	2003e5d4 	.word	0x2003e5d4
   d5800:	2003e490 	.word	0x2003e490
   d5804:	2003dbc0 	.word	0x2003dbc0
   d5808:	2003dbb1 	.word	0x2003dbb1
   d580c:	2003dbb0 	.word	0x2003dbb0
   d5810:	2003dbb2 	.word	0x2003dbb2
   d5814:	2003df30 	.word	0x2003df30
   d5818:	2003dbb3 	.word	0x2003dbb3
   d581c:	2003df60 	.word	0x2003df60
   d5820:	2003def0 	.word	0x2003def0
   d5824:	2003dbb4 	.word	0x2003dbb4
   d5828:	2003dbb5 	.word	0x2003dbb5
   d582c:	00000000 	.word	0x00000000

000d5830 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE>:
#include "WProgram.h"
#endif


//--------------------------------------------------------------------------------------
double Load_Monitor::calcIrms(CT_Property_Struct data){
   d5830:	b082      	sub	sp, #8
   d5832:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5836:	a90a      	add	r1, sp, #40	; 0x28
   d5838:	e881 000c 	stmia.w	r1, {r2, r3}
    
    double Irms=0;
    
    offsetI = ADC_COUNTS>>1;
   d583c:	4b34      	ldr	r3, [pc, #208]	; (d5910 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xe0>)
  {
    sampleI = analogRead(data.CT_PIN);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset,
    //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d583e:	f8df b0d4 	ldr.w	fp, [pc, #212]	; d5914 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xe4>
    offsetI = ADC_COUNTS>>1;
   d5842:	2200      	movs	r2, #0
   d5844:	e9c0 2304 	strd	r2, r3, [r0, #16]
double Load_Monitor::calcIrms(CT_Property_Struct data){
   d5848:	4604      	mov	r4, r0
    offsetI = ADC_COUNTS>>1;
   d584a:	f240 657e 	movw	r5, #1662	; 0x67e
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d584e:	f04f 0a00 	mov.w	sl, #0
    sampleI = analogRead(data.CT_PIN);
   d5852:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
   d5856:	f002 ff5b 	bl	d8710 <analogRead>
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d585a:	e9d4 8904 	ldrd	r8, r9, [r4, #16]
    sampleI = analogRead(data.CT_PIN);
   d585e:	6020      	str	r0, [r4, #0]
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d5860:	f003 fa32 	bl	d8cc8 <__aeabi_i2d>
   d5864:	4642      	mov	r2, r8
   d5866:	464b      	mov	r3, r9
   d5868:	4606      	mov	r6, r0
   d586a:	460f      	mov	r7, r1
   d586c:	f003 f8de 	bl	d8a2c <__aeabi_dsub>
   d5870:	4652      	mov	r2, sl
   d5872:	465b      	mov	r3, fp
   d5874:	f003 fa92 	bl	d8d9c <__aeabi_dmul>
   d5878:	4642      	mov	r2, r8
   d587a:	464b      	mov	r3, r9
   d587c:	f003 f8d8 	bl	d8a30 <__adddf3>
   d5880:	4602      	mov	r2, r0
   d5882:	460b      	mov	r3, r1
   d5884:	e9c4 2304 	strd	r2, r3, [r4, #16]
    filteredI = sampleI - offsetI;
   d5888:	4630      	mov	r0, r6
   d588a:	4639      	mov	r1, r7
   d588c:	f003 f8ce 	bl	d8a2c <__aeabi_dsub>
   d5890:	4602      	mov	r2, r0
   d5892:	460b      	mov	r3, r1
   d5894:	e9c4 2302 	strd	r2, r3, [r4, #8]

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d5898:	f003 fa80 	bl	d8d9c <__aeabi_dmul>
   d589c:	4602      	mov	r2, r0
   d589e:	460b      	mov	r3, r1
   d58a0:	e9c4 2306 	strd	r2, r3, [r4, #24]
    // 2) sum
    sumI += sqI;
   d58a4:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   d58a8:	f003 f8c2 	bl	d8a30 <__adddf3>
  for (unsigned int n = 0; n < 1662 /*Number_of_Samples*/; n++)
   d58ac:	3d01      	subs	r5, #1
    sumI += sqI;
   d58ae:	4606      	mov	r6, r0
   d58b0:	460f      	mov	r7, r1
   d58b2:	e9c4 6708 	strd	r6, r7, [r4, #32]
  for (unsigned int n = 0; n < 1662 /*Number_of_Samples*/; n++)
   d58b6:	d1cc      	bne.n	d5852 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0x22>
  }

  double I_RATIO = data.ICAL*((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d58b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d58bc:	a310      	add	r3, pc, #64	; (adr r3, d5900 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xd0>)
   d58be:	e9d3 2300 	ldrd	r2, r3, [r3]
   d58c2:	f003 fa6b 	bl	d8d9c <__aeabi_dmul>
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d58c6:	a310      	add	r3, pc, #64	; (adr r3, d5908 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xd8>)
   d58c8:	e9d3 2300 	ldrd	r2, r3, [r3]
  double I_RATIO = data.ICAL*((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d58cc:	4680      	mov	r8, r0
   d58ce:	4689      	mov	r9, r1
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d58d0:	4630      	mov	r0, r6
   d58d2:	4639      	mov	r1, r7
   d58d4:	f003 fb8c 	bl	d8ff0 <__aeabi_ddiv>
   d58d8:	ec41 0b10 	vmov	d0, r0, r1
   d58dc:	f002 ff7e 	bl	d87dc <sqrt>

  //Reset accumulators
  sumI = 0;
   d58e0:	2200      	movs	r2, #0
   d58e2:	2300      	movs	r3, #0
   d58e4:	e9c4 2308 	strd	r2, r3, [r4, #32]
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d58e8:	ec51 0b10 	vmov	r0, r1, d0
   d58ec:	4642      	mov	r2, r8
   d58ee:	464b      	mov	r3, r9
   d58f0:	f003 fa54 	bl	d8d9c <__aeabi_dmul>
  //--------------------------------------------------------------------------------------

  return Irms;
}
   d58f4:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d58f8:	ec41 0b10 	vmov	d0, r0, r1
   d58fc:	b002      	add	sp, #8
   d58fe:	4770      	bx	lr
   d5900:	66666666 	.word	0x66666666
   d5904:	3f4a6666 	.word	0x3f4a6666
   d5908:	00000000 	.word	0x00000000
   d590c:	4099f800 	.word	0x4099f800
   d5910:	40a00000 	.word	0x40a00000
   d5914:	3f500000 	.word	0x3f500000

000d5918 <_ZN13EnergyMonitor7currentEjd>:

void EnergyMonitor::current(unsigned int _inPinI, double _ICAL)
{
   inPinI = _inPinI;
   ICAL = _ICAL;
   offsetI = ADC_COUNTS>>1;
   d5918:	4b03      	ldr	r3, [pc, #12]	; (d5928 <_ZN13EnergyMonitor7currentEjd+0x10>)
   inPinI = _inPinI;
   d591a:	62c1      	str	r1, [r0, #44]	; 0x2c
   offsetI = ADC_COUNTS>>1;
   d591c:	2200      	movs	r2, #0
   ICAL = _ICAL;
   d591e:	ed80 0b0e 	vstr	d0, [r0, #56]	; 0x38
   offsetI = ADC_COUNTS>>1;
   d5922:	e9c0 231c 	strd	r2, r3, [r0, #112]	; 0x70
}
   d5926:	4770      	bx	lr
   d5928:	40a00000 	.word	0x40a00000
   d592c:	00000000 	.word	0x00000000

000d5930 <_ZN13EnergyMonitor8calcIrmsEj>:
//--------------------------------------------------------------------------------------       
}

//--------------------------------------------------------------------------------------
double EnergyMonitor::calcIrms(unsigned int Number_of_Samples)
{
   d5930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    sampleI = analogRead(inPinI);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset, 
  //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d5934:	f8df b0c8 	ldr.w	fp, [pc, #200]	; d5a00 <_ZN13EnergyMonitor8calcIrmsEj+0xd0>
{
   d5938:	9101      	str	r1, [sp, #4]
   d593a:	4604      	mov	r4, r0
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d593c:	2500      	movs	r5, #0
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d593e:	f04f 0a00 	mov.w	sl, #0
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d5942:	9b01      	ldr	r3, [sp, #4]
   d5944:	429d      	cmp	r5, r3
   d5946:	d02f      	beq.n	d59a8 <_ZN13EnergyMonitor8calcIrmsEj+0x78>
    sampleI = analogRead(inPinI);
   d5948:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
   d594a:	f002 fee1 	bl	d8710 <analogRead>
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d594e:	e9d4 891c 	ldrd	r8, r9, [r4, #112]	; 0x70
    sampleI = analogRead(inPinI);
   d5952:	64e0      	str	r0, [r4, #76]	; 0x4c
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d5954:	f003 f9b8 	bl	d8cc8 <__aeabi_i2d>
   d5958:	4642      	mov	r2, r8
   d595a:	464b      	mov	r3, r9
   d595c:	4606      	mov	r6, r0
   d595e:	460f      	mov	r7, r1
   d5960:	f003 f864 	bl	d8a2c <__aeabi_dsub>
   d5964:	4652      	mov	r2, sl
   d5966:	465b      	mov	r3, fp
   d5968:	f003 fa18 	bl	d8d9c <__aeabi_dmul>
   d596c:	4642      	mov	r2, r8
   d596e:	464b      	mov	r3, r9
   d5970:	f003 f85e 	bl	d8a30 <__adddf3>
   d5974:	4602      	mov	r2, r0
   d5976:	460b      	mov	r3, r1
   d5978:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
  filteredI = sampleI - offsetI;
   d597c:	4630      	mov	r0, r6
   d597e:	4639      	mov	r1, r7
   d5980:	f003 f854 	bl	d8a2c <__aeabi_dsub>
   d5984:	4602      	mov	r2, r0
   d5986:	460b      	mov	r3, r1
   d5988:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d598c:	f003 fa06 	bl	d8d9c <__aeabi_dmul>
   d5990:	4602      	mov	r2, r0
   d5992:	460b      	mov	r3, r1
   d5994:	e9c4 2324 	strd	r2, r3, [r4, #144]	; 0x90
    // 2) sum 
    sumI += sqI;
   d5998:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
   d599c:	f003 f848 	bl	d8a30 <__adddf3>
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d59a0:	3501      	adds	r5, #1
    sumI += sqI;
   d59a2:	e9c4 0126 	strd	r0, r1, [r4, #152]	; 0x98
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d59a6:	e7cc      	b.n	d5942 <_ZN13EnergyMonitor8calcIrmsEj+0x12>
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d59a8:	a313      	add	r3, pc, #76	; (adr r3, d59f8 <_ZN13EnergyMonitor8calcIrmsEj+0xc8>)
   d59aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d59ae:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
   d59b2:	f003 f9f3 	bl	d8d9c <__aeabi_dmul>
   d59b6:	4606      	mov	r6, r0
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d59b8:	4628      	mov	r0, r5
  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d59ba:	460f      	mov	r7, r1
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d59bc:	f003 f974 	bl	d8ca8 <__aeabi_ui2d>
   d59c0:	4602      	mov	r2, r0
   d59c2:	460b      	mov	r3, r1
   d59c4:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
   d59c8:	f003 fb12 	bl	d8ff0 <__aeabi_ddiv>
   d59cc:	ec41 0b10 	vmov	d0, r0, r1
   d59d0:	f002 ff04 	bl	d87dc <sqrt>
   d59d4:	4632      	mov	r2, r6
   d59d6:	463b      	mov	r3, r7
   d59d8:	ec51 0b10 	vmov	r0, r1, d0
   d59dc:	f003 f9de 	bl	d8d9c <__aeabi_dmul>
   d59e0:	ec41 0b10 	vmov	d0, r0, r1

  //Reset accumulators
  sumI = 0;
   d59e4:	2200      	movs	r2, #0
   d59e6:	2300      	movs	r3, #0
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d59e8:	e9c4 0108 	strd	r0, r1, [r4, #32]
  sumI = 0;
   d59ec:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
//--------------------------------------------------------------------------------------             
 
  return Irms;
}
   d59f0:	b003      	add	sp, #12
   d59f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d59f6:	bf00      	nop
   d59f8:	66666666 	.word	0x66666666
   d59fc:	3f4a6666 	.word	0x3f4a6666
   d5a00:	3f500000 	.word	0x3f500000

000d5a04 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d5a04:	4770      	bx	lr

000d5a06 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d5a06:	b510      	push	{r4, lr}
}
   d5a08:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d5a0a:	4604      	mov	r4, r0
}
   d5a0c:	f002 fedd 	bl	d87ca <_ZdlPvj>
   d5a10:	4620      	mov	r0, r4
   d5a12:	bd10      	pop	{r4, pc}

000d5a14 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d5a14:	6803      	ldr	r3, [r0, #0]
   d5a16:	b2c9      	uxtb	r1, r1
   d5a18:	689b      	ldr	r3, [r3, #8]
   d5a1a:	4718      	bx	r3

000d5a1c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5a1c:	b40e      	push	{r1, r2, r3}
   d5a1e:	b510      	push	{r4, lr}
   d5a20:	b08d      	sub	sp, #52	; 0x34
   d5a22:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d5a24:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d5a26:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d5a2a:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d5a2c:	2300      	movs	r3, #0
   d5a2e:	2020      	movs	r0, #32
   d5a30:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5a34:	e9cd 4200 	strd	r4, r2, [sp]
   d5a38:	201e      	movs	r0, #30
   d5a3a:	aa04      	add	r2, sp, #16
   d5a3c:	f001 fa08 	bl	d6e50 <log_message_v>
}
   d5a40:	b00d      	add	sp, #52	; 0x34
   d5a42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5a46:	b003      	add	sp, #12
   d5a48:	4770      	bx	lr
	...

000d5a4c <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d5a4c:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d5a4e:	4d03      	ldr	r5, [pc, #12]	; (d5a5c <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d5a50:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d5a54:	e9c0 5100 	strd	r5, r1, [r0]
}
   d5a58:	bd30      	pop	{r4, r5, pc}
   d5a5a:	bf00      	nop
   d5a5c:	000dbba0 	.word	0x000dbba0

000d5a60 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d5a60:	6840      	ldr	r0, [r0, #4]
   d5a62:	f001 bf1b 	b.w	d789c <_ZN7TwoWire5beginEv>

000d5a66 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5a66:	b510      	push	{r4, lr}
   d5a68:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d5a6a:	6800      	ldr	r0, [r0, #0]
   d5a6c:	f001 ff59 	bl	d7922 <_ZN7TwoWire6unlockEv>
   d5a70:	4620      	mov	r0, r4
   d5a72:	bd10      	pop	{r4, pc}

000d5a74 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d5a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5a78:	b08a      	sub	sp, #40	; 0x28
   d5a7a:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d5a7c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5a7e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5a80:	f001 ff46 	bl	d7910 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5a84:	221e      	movs	r2, #30
   d5a86:	2100      	movs	r1, #0
   d5a88:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d5a8a:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d5a8c:	f003 fd3a 	bl	d9504 <memset>
		size_t framAddr = 0;
   d5a90:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d5a92:	b1ef      	cbz	r7, d5ad0 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d5a94:	6823      	ldr	r3, [r4, #0]
   d5a96:	2f1e      	cmp	r7, #30
   d5a98:	46b8      	mov	r8, r7
   d5a9a:	bf28      	it	cs
   d5a9c:	f04f 081e 	movcs.w	r8, #30
   d5aa0:	68dd      	ldr	r5, [r3, #12]
   d5aa2:	aa02      	add	r2, sp, #8
   d5aa4:	4643      	mov	r3, r8
   d5aa6:	4631      	mov	r1, r6
   d5aa8:	4620      	mov	r0, r4
   d5aaa:	47a8      	blx	r5
			if (!result) {
   d5aac:	4605      	mov	r5, r0
   d5aae:	b958      	cbnz	r0, d5ac8 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d5ab0:	480a      	ldr	r0, [pc, #40]	; (d5adc <_ZN6MB85RC5eraseEv+0x68>)
   d5ab2:	490b      	ldr	r1, [pc, #44]	; (d5ae0 <_ZN6MB85RC5eraseEv+0x6c>)
   d5ab4:	4632      	mov	r2, r6
   d5ab6:	f7ff ffb1 	bl	d5a1c <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d5aba:	a801      	add	r0, sp, #4
   d5abc:	f7ff ffd3 	bl	d5a66 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d5ac0:	4628      	mov	r0, r5
   d5ac2:	b00a      	add	sp, #40	; 0x28
   d5ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d5ac8:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d5acc:	4446      	add	r6, r8
		while(totalLen > 0) {
   d5ace:	e7e0      	b.n	d5a92 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d5ad0:	a801      	add	r0, sp, #4
   d5ad2:	f7ff ffc8 	bl	d5a66 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d5ad6:	2501      	movs	r5, #1
   d5ad8:	e7f2      	b.n	d5ac0 <_ZN6MB85RC5eraseEv+0x4c>
   d5ada:	bf00      	nop
   d5adc:	2003e618 	.word	0x2003e618
   d5ae0:	000dbb6c 	.word	0x000dbb6c

000d5ae4 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5ae4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5ae8:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5aea:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5aec:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5aee:	460d      	mov	r5, r1
   d5af0:	4616      	mov	r6, r2
   d5af2:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d5af4:	f001 ff0c 	bl	d7910 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d5af8:	b1a7      	cbz	r7, d5b24 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5afa:	68e1      	ldr	r1, [r4, #12]
   d5afc:	6860      	ldr	r0, [r4, #4]
   d5afe:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5b02:	f001 fefe 	bl	d7902 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5b06:	0a29      	lsrs	r1, r5, #8
   d5b08:	6860      	ldr	r0, [r4, #4]
   d5b0a:	f7ff ff83 	bl	d5a14 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5b0e:	4629      	mov	r1, r5
   d5b10:	6860      	ldr	r0, [r4, #4]
   d5b12:	f7ff ff7f 	bl	d5a14 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d5b16:	6860      	ldr	r0, [r4, #4]
   d5b18:	2100      	movs	r1, #0
   d5b1a:	f001 fef5 	bl	d7908 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5b1e:	b148      	cbz	r0, d5b34 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d5b20:	2400      	movs	r4, #0
   d5b22:	e000      	b.n	d5b26 <_ZN6MB85RC8readDataEjPhj+0x42>
   d5b24:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5b26:	a801      	add	r0, sp, #4
   d5b28:	f7ff ff9d 	bl	d5a66 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d5b2c:	4620      	mov	r0, r4
   d5b2e:	b003      	add	sp, #12
   d5b30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d5b34:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d5b36:	7b21      	ldrb	r1, [r4, #12]
   d5b38:	6860      	ldr	r0, [r4, #4]
   d5b3a:	46b8      	mov	r8, r7
   d5b3c:	bf28      	it	cs
   d5b3e:	f04f 0820 	movcs.w	r8, #32
   d5b42:	2301      	movs	r3, #1
   d5b44:	4642      	mov	r2, r8
   d5b46:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5b4a:	f001 fec4 	bl	d78d6 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d5b4e:	f002 fe0f 	bl	d8770 <_Z19__fetch_global_Wirev>
   d5b52:	6803      	ldr	r3, [r0, #0]
   d5b54:	691b      	ldr	r3, [r3, #16]
   d5b56:	4798      	blx	r3
   d5b58:	4540      	cmp	r0, r8
   d5b5a:	dbe1      	blt.n	d5b20 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d5b5c:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d5b60:	f002 fe06 	bl	d8770 <_Z19__fetch_global_Wirev>
   d5b64:	6803      	ldr	r3, [r0, #0]
   d5b66:	695b      	ldr	r3, [r3, #20]
   d5b68:	4798      	blx	r3
   d5b6a:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d5b6e:	454e      	cmp	r6, r9
   d5b70:	d1f6      	bne.n	d5b60 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d5b72:	4445      	add	r5, r8
   d5b74:	eba7 0708 	sub.w	r7, r7, r8
   d5b78:	e7be      	b.n	d5af8 <_ZN6MB85RC8readDataEjPhj+0x14>

000d5b7a <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5b7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5b7e:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5b80:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5b82:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5b84:	460e      	mov	r6, r1
   d5b86:	4690      	mov	r8, r2
   d5b88:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d5b8a:	f001 fec1 	bl	d7910 <_ZN7TwoWire4lockEv>
   d5b8e:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d5b92:	f1b9 0f00 	cmp.w	r9, #0
   d5b96:	d02a      	beq.n	d5bee <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d5b98:	b34d      	cbz	r5, d5bee <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5b9a:	68e1      	ldr	r1, [r4, #12]
   d5b9c:	6860      	ldr	r0, [r4, #4]
   d5b9e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5ba2:	f001 feae 	bl	d7902 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5ba6:	0a31      	lsrs	r1, r6, #8
   d5ba8:	6860      	ldr	r0, [r4, #4]
   d5baa:	f7ff ff33 	bl	d5a14 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5bae:	6860      	ldr	r0, [r4, #4]
   d5bb0:	4631      	mov	r1, r6
   d5bb2:	f7ff ff2f 	bl	d5a14 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5bb6:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d5bba:	4647      	mov	r7, r8
   d5bbc:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d5bc0:	6860      	ldr	r0, [r4, #4]
   d5bc2:	f817 1b01 	ldrb.w	r1, [r7], #1
   d5bc6:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d5bc8:	3d01      	subs	r5, #1
				wire.write(*data);
   d5bca:	689b      	ldr	r3, [r3, #8]
   d5bcc:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5bce:	4555      	cmp	r5, sl
   d5bd0:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d5bd4:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5bd6:	d001      	beq.n	d5bdc <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d5bd8:	2d00      	cmp	r5, #0
   d5bda:	d1f1      	bne.n	d5bc0 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d5bdc:	6860      	ldr	r0, [r4, #4]
   d5bde:	2101      	movs	r1, #1
   d5be0:	f001 fe92 	bl	d7908 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5be4:	2800      	cmp	r0, #0
   d5be6:	d0d7      	beq.n	d5b98 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d5be8:	f04f 0900 	mov.w	r9, #0
   d5bec:	e7d1      	b.n	d5b92 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d5bee:	a801      	add	r0, sp, #4
   d5bf0:	f7ff ff39 	bl	d5a66 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d5bf4:	4648      	mov	r0, r9
   d5bf6:	b003      	add	sp, #12
   d5bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5bfc <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5c00:	b08b      	sub	sp, #44	; 0x2c
   d5c02:	460e      	mov	r6, r1
   d5c04:	4615      	mov	r5, r2
   d5c06:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5c08:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5c0a:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5c0c:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d5c0e:	f001 fe7f 	bl	d7910 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d5c12:	42ae      	cmp	r6, r5
   d5c14:	d229      	bcs.n	d5c6a <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d5c16:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d5c18:	4425      	add	r5, r4
			while(numBytes > 0) {
   d5c1a:	b18c      	cbz	r4, d5c40 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d5c1c:	2c1e      	cmp	r4, #30
   d5c1e:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5c20:	f8d8 3000 	ldr.w	r3, [r8]
   d5c24:	bf28      	it	cs
   d5c26:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d5c28:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d5c2a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5c2e:	aa02      	add	r2, sp, #8
   d5c30:	463b      	mov	r3, r7
   d5c32:	4631      	mov	r1, r6
   d5c34:	4640      	mov	r0, r8
				framAddrTo -= count;
   d5c36:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d5c38:	47c8      	blx	r9
				if (!result) {
   d5c3a:	b948      	cbnz	r0, d5c50 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5c3c:	2400      	movs	r4, #0
   d5c3e:	e000      	b.n	d5c42 <_ZN6MB85RC8moveDataEjjj+0x46>
   d5c40:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5c42:	a801      	add	r0, sp, #4
   d5c44:	f7ff ff0f 	bl	d5a66 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d5c48:	4620      	mov	r0, r4
   d5c4a:	b00b      	add	sp, #44	; 0x2c
   d5c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d5c50:	f8d8 3000 	ldr.w	r3, [r8]
   d5c54:	aa02      	add	r2, sp, #8
   d5c56:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5c5a:	4629      	mov	r1, r5
   d5c5c:	463b      	mov	r3, r7
   d5c5e:	4640      	mov	r0, r8
   d5c60:	47c8      	blx	r9
				if (!result) {
   d5c62:	2800      	cmp	r0, #0
   d5c64:	d0ea      	beq.n	d5c3c <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d5c66:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d5c68:	e7d7      	b.n	d5c1a <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d5c6a:	d9e9      	bls.n	d5c40 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d5c6c:	2c00      	cmp	r4, #0
   d5c6e:	d0e7      	beq.n	d5c40 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d5c70:	f8d8 3000 	ldr.w	r3, [r8]
   d5c74:	2c1e      	cmp	r4, #30
   d5c76:	4627      	mov	r7, r4
   d5c78:	bf28      	it	cs
   d5c7a:	271e      	movcs	r7, #30
   d5c7c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5c80:	aa02      	add	r2, sp, #8
   d5c82:	463b      	mov	r3, r7
   d5c84:	4631      	mov	r1, r6
   d5c86:	4640      	mov	r0, r8
   d5c88:	47c8      	blx	r9
				if (!result) {
   d5c8a:	2800      	cmp	r0, #0
   d5c8c:	d0d6      	beq.n	d5c3c <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d5c8e:	f8d8 3000 	ldr.w	r3, [r8]
   d5c92:	aa02      	add	r2, sp, #8
   d5c94:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5c98:	4629      	mov	r1, r5
   d5c9a:	463b      	mov	r3, r7
   d5c9c:	4640      	mov	r0, r8
   d5c9e:	47c8      	blx	r9
				if (!result) {
   d5ca0:	2800      	cmp	r0, #0
   d5ca2:	d0cb      	beq.n	d5c3c <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d5ca4:	443e      	add	r6, r7
				framAddrTo += count;
   d5ca6:	443d      	add	r5, r7
				numBytes -= count;
   d5ca8:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d5caa:	e7df      	b.n	d5c6c <_ZN6MB85RC8moveDataEjjj+0x70>

000d5cac <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d5cac:	2040      	movs	r0, #64	; 0x40
   d5cae:	4770      	bx	lr

000d5cb0 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d5cb0:	2000      	movs	r0, #0
   d5cb2:	4770      	bx	lr

000d5cb4 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d5cb4:	2080      	movs	r0, #128	; 0x80
   d5cb6:	4770      	bx	lr

000d5cb8 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d5cb8:	20ff      	movs	r0, #255	; 0xff
   d5cba:	4770      	bx	lr

000d5cbc <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d5cbc:	4770      	bx	lr

000d5cbe <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d5cbe:	4770      	bx	lr

000d5cc0 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d5cc0:	4770      	bx	lr

000d5cc2 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d5cc2:	4770      	bx	lr

000d5cc4 <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d5cc4:	b510      	push	{r4, lr}
}
   d5cc6:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d5cc8:	4604      	mov	r4, r0
}
   d5cca:	f002 fd7e 	bl	d87ca <_ZdlPvj>
   d5cce:	4620      	mov	r0, r4
   d5cd0:	bd10      	pop	{r4, pc}

000d5cd2 <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d5cd2:	b510      	push	{r4, lr}
}
   d5cd4:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d5cd6:	4604      	mov	r4, r0
}
   d5cd8:	f002 fd77 	bl	d87ca <_ZdlPvj>
   d5cdc:	4620      	mov	r0, r4
   d5cde:	bd10      	pop	{r4, pc}

000d5ce0 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d5ce0:	b510      	push	{r4, lr}
}
   d5ce2:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d5ce4:	4604      	mov	r4, r0
}
   d5ce6:	f002 fd70 	bl	d87ca <_ZdlPvj>
   d5cea:	4620      	mov	r0, r4
   d5cec:	bd10      	pop	{r4, pc}

000d5cee <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d5cee:	b510      	push	{r4, lr}
}
   d5cf0:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d5cf2:	4604      	mov	r4, r0
}
   d5cf4:	f002 fd69 	bl	d87ca <_ZdlPvj>
   d5cf8:	4620      	mov	r0, r4
   d5cfa:	bd10      	pop	{r4, pc}

000d5cfc <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d5cfc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d5d00:	6803      	ldr	r3, [r0, #0]
   d5d02:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d5d04:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d5d06:	4798      	blx	r3
   d5d08:	2210      	movs	r2, #16
   d5d0a:	4601      	mov	r1, r0
   d5d0c:	4668      	mov	r0, sp
   d5d0e:	f003 fbf9 	bl	d9504 <memset>
	size_t len = length();
   d5d12:	6823      	ldr	r3, [r4, #0]
   d5d14:	4620      	mov	r0, r4
   d5d16:	689b      	ldr	r3, [r3, #8]
   d5d18:	4798      	blx	r3
	size_t offset = 0;
   d5d1a:	2500      	movs	r5, #0
	size_t len = length();
   d5d1c:	4607      	mov	r7, r0
	bool bResult = false;
   d5d1e:	4628      	mov	r0, r5
	while(offset < len) {
   d5d20:	42bd      	cmp	r5, r7
   d5d22:	d20e      	bcs.n	d5d42 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d5d24:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d5d26:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d5d28:	2e10      	cmp	r6, #16
   d5d2a:	bf28      	it	cs
   d5d2c:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d5d2e:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d5d32:	466a      	mov	r2, sp
   d5d34:	4633      	mov	r3, r6
   d5d36:	4629      	mov	r1, r5
   d5d38:	4620      	mov	r0, r4
   d5d3a:	47c0      	blx	r8
		if (!bResult) {
   d5d3c:	b108      	cbz	r0, d5d42 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d5d3e:	4435      	add	r5, r6
	while(offset < len) {
   d5d40:	e7ee      	b.n	d5d20 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d5d42:	b004      	add	sp, #16
   d5d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5d48 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d5d48:	f44f 7380 	mov.w	r3, #256	; 0x100
   d5d4c:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d5d4e:	f240 1301 	movw	r3, #257	; 0x101
   d5d52:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d5d54:	2300      	movs	r3, #0
   d5d56:	8203      	strh	r3, [r0, #16]
}
   d5d58:	4770      	bx	lr
	...

000d5d5c <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d5d5c:	b508      	push	{r3, lr}
   d5d5e:	4b06      	ldr	r3, [pc, #24]	; (d5d78 <_ZN12MCP79410TimeC1Ev+0x1c>)
   d5d60:	6003      	str	r3, [r0, #0]
   d5d62:	4b06      	ldr	r3, [pc, #24]	; (d5d7c <_ZN12MCP79410TimeC1Ev+0x20>)
   d5d64:	6043      	str	r3, [r0, #4]
   d5d66:	f240 7304 	movw	r3, #1796	; 0x704
   d5d6a:	8103      	strh	r3, [r0, #8]
   d5d6c:	2300      	movs	r3, #0
   d5d6e:	7443      	strb	r3, [r0, #17]
	clear();
   d5d70:	f7ff ffea 	bl	d5d48 <_ZN12MCP79410Time5clearEv>
}
   d5d74:	bd08      	pop	{r3, pc}
   d5d76:	bf00      	nop
   d5d78:	000dbc80 	.word	0x000dbc80
   d5d7c:	03020100 	.word	0x03020100

000d5d80 <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5d80:	0903      	lsrs	r3, r0, #4
}
   d5d82:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5d84:	f000 000f 	and.w	r0, r0, #15
}
   d5d88:	fb02 0003 	mla	r0, r2, r3, r0
   d5d8c:	4770      	bx	lr

000d5d8e <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d5d8e:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d5d90:	7a80      	ldrb	r0, [r0, #10]
   d5d92:	f7ff fff5 	bl	d5d80 <_ZN12MCP79410Time8bcdToIntEh>
}
   d5d96:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d5d9a:	bd08      	pop	{r3, pc}

000d5d9c <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d5d9c:	7ac0      	ldrb	r0, [r0, #11]
   d5d9e:	f000 001f 	and.w	r0, r0, #31
   d5da2:	f7ff bfed 	b.w	d5d80 <_ZN12MCP79410Time8bcdToIntEh>

000d5da6 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d5da6:	7b00      	ldrb	r0, [r0, #12]
   d5da8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d5dac:	f7ff bfe8 	b.w	d5d80 <_ZN12MCP79410Time8bcdToIntEh>

000d5db0 <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d5db0:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d5db2:	7b81      	ldrb	r1, [r0, #14]
   d5db4:	064a      	lsls	r2, r1, #25
   d5db6:	d50d      	bpl.n	d5dd4 <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d5db8:	f001 001f 	and.w	r0, r1, #31
   d5dbc:	f7ff ffe0 	bl	d5d80 <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d5dc0:	068b      	lsls	r3, r1, #26
   d5dc2:	d503      	bpl.n	d5dcc <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d5dc4:	280c      	cmp	r0, #12
   d5dc6:	d000      	beq.n	d5dca <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d5dc8:	300c      	adds	r0, #12
}
   d5dca:	bd08      	pop	{r3, pc}
				return 0;
   d5dcc:	280c      	cmp	r0, #12
   d5dce:	bf08      	it	eq
   d5dd0:	2000      	moveq	r0, #0
   d5dd2:	e7fa      	b.n	d5dca <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d5dd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d5dd8:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d5ddc:	f7ff bfd0 	b.w	d5d80 <_ZN12MCP79410Time8bcdToIntEh>

000d5de0 <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d5de0:	7bc0      	ldrb	r0, [r0, #15]
   d5de2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5de6:	f7ff bfcb 	b.w	d5d80 <_ZN12MCP79410Time8bcdToIntEh>

000d5dea <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d5dea:	7c00      	ldrb	r0, [r0, #16]
   d5dec:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5df0:	f7ff bfc6 	b.w	d5d80 <_ZN12MCP79410Time8bcdToIntEh>

000d5df4 <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d5df4:	b510      	push	{r4, lr}
   d5df6:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d5df8:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d5dfa:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d5dfc:	2100      	movs	r1, #0
   d5dfe:	a801      	add	r0, sp, #4
   d5e00:	f003 fb80 	bl	d9504 <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d5e04:	4620      	mov	r0, r4
   d5e06:	f7ff ffc2 	bl	d5d8e <_ZNK12MCP79410Time7getYearEv>
   d5e0a:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d5e0e:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d5e10:	4620      	mov	r0, r4
   d5e12:	f7ff ffc3 	bl	d5d9c <_ZNK12MCP79410Time8getMonthEv>
   d5e16:	3801      	subs	r0, #1
   d5e18:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d5e1a:	4620      	mov	r0, r4
   d5e1c:	f7ff ffc3 	bl	d5da6 <_ZNK12MCP79410Time13getDayOfMonthEv>
   d5e20:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d5e22:	4620      	mov	r0, r4
   d5e24:	f7ff ffc4 	bl	d5db0 <_ZNK12MCP79410Time7getHourEv>
   d5e28:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d5e2a:	4620      	mov	r0, r4
   d5e2c:	f7ff ffd8 	bl	d5de0 <_ZNK12MCP79410Time9getMinuteEv>
   d5e30:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d5e32:	4620      	mov	r0, r4
   d5e34:	f7ff ffd9 	bl	d5dea <_ZNK12MCP79410Time9getSecondEv>
   d5e38:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d5e3a:	a801      	add	r0, sp, #4
   d5e3c:	f001 f97e 	bl	d713c <mktime>
}
   d5e40:	b00a      	add	sp, #40	; 0x28
   d5e42:	bd10      	pop	{r4, pc}

000d5e44 <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d5e44:	210a      	movs	r1, #10
   d5e46:	fb90 f2f1 	sdiv	r2, r0, r1
   d5e4a:	fb92 f3f1 	sdiv	r3, r2, r1
   d5e4e:	fb01 2313 	mls	r3, r1, r3, r2
   d5e52:	011b      	lsls	r3, r3, #4
   d5e54:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d5e56:	fb01 0012 	mls	r0, r1, r2, r0
   d5e5a:	4318      	orrs	r0, r3
}
   d5e5c:	b2c0      	uxtb	r0, r0
   d5e5e:	4770      	bx	lr

000d5e60 <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d5e60:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d5e62:	b510      	push	{r4, lr}
   d5e64:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d5e66:	fb91 f0f3 	sdiv	r0, r1, r3
   d5e6a:	fb00 1013 	mls	r0, r0, r3, r1
   d5e6e:	f7ff ffe9 	bl	d5e44 <_ZN12MCP79410Time8intToBcdEi>
   d5e72:	72a0      	strb	r0, [r4, #10]
}
   d5e74:	bd10      	pop	{r4, pc}

000d5e76 <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d5e76:	b510      	push	{r4, lr}
   d5e78:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d5e7a:	4608      	mov	r0, r1
   d5e7c:	f7ff ffe2 	bl	d5e44 <_ZN12MCP79410Time8intToBcdEi>
   d5e80:	72e0      	strb	r0, [r4, #11]
}
   d5e82:	bd10      	pop	{r4, pc}

000d5e84 <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d5e84:	b510      	push	{r4, lr}
   d5e86:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d5e88:	4608      	mov	r0, r1
   d5e8a:	f7ff ffdb 	bl	d5e44 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d5e8e:	7b23      	ldrb	r3, [r4, #12]
   d5e90:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d5e94:	4318      	orrs	r0, r3
   d5e96:	7320      	strb	r0, [r4, #12]
}
   d5e98:	bd10      	pop	{r4, pc}

000d5e9a <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d5e9a:	b510      	push	{r4, lr}
   d5e9c:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d5e9e:	1c48      	adds	r0, r1, #1
   d5ea0:	f7ff ffd0 	bl	d5e44 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d5ea4:	7b63      	ldrb	r3, [r4, #13]
   d5ea6:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d5eaa:	4318      	orrs	r0, r3
   d5eac:	7360      	strb	r0, [r4, #13]
}
   d5eae:	bd10      	pop	{r4, pc}

000d5eb0 <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d5eb0:	b510      	push	{r4, lr}
   d5eb2:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d5eb4:	4608      	mov	r0, r1
   d5eb6:	f7ff ffc5 	bl	d5e44 <_ZN12MCP79410Time8intToBcdEi>
   d5eba:	73a0      	strb	r0, [r4, #14]
}
   d5ebc:	bd10      	pop	{r4, pc}

000d5ebe <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d5ebe:	b510      	push	{r4, lr}
   d5ec0:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d5ec2:	4608      	mov	r0, r1
   d5ec4:	f7ff ffbe 	bl	d5e44 <_ZN12MCP79410Time8intToBcdEi>
   d5ec8:	73e0      	strb	r0, [r4, #15]
}
   d5eca:	bd10      	pop	{r4, pc}

000d5ecc <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d5ecc:	b510      	push	{r4, lr}
   d5ece:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d5ed0:	4608      	mov	r0, r1
   d5ed2:	f7ff ffb7 	bl	d5e44 <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d5ed6:	7c23      	ldrb	r3, [r4, #16]
   d5ed8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d5edc:	4318      	orrs	r0, r3
   d5ede:	7420      	strb	r0, [r4, #16]
}
   d5ee0:	bd10      	pop	{r4, pc}

000d5ee2 <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d5ee2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5ee4:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d5ee6:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d5ee8:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d5eec:	f003 fad0 	bl	d9490 <gmtime>
   d5ef0:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d5ef2:	6941      	ldr	r1, [r0, #20]
   d5ef4:	4620      	mov	r0, r4
   d5ef6:	f7ff ffb3 	bl	d5e60 <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d5efa:	6929      	ldr	r1, [r5, #16]
   d5efc:	4620      	mov	r0, r4
   d5efe:	3101      	adds	r1, #1
   d5f00:	f7ff ffb9 	bl	d5e76 <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d5f04:	68e9      	ldr	r1, [r5, #12]
   d5f06:	4620      	mov	r0, r4
   d5f08:	f7ff ffbc 	bl	d5e84 <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d5f0c:	69a9      	ldr	r1, [r5, #24]
   d5f0e:	4620      	mov	r0, r4
   d5f10:	f7ff ffc3 	bl	d5e9a <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d5f14:	68a9      	ldr	r1, [r5, #8]
   d5f16:	4620      	mov	r0, r4
   d5f18:	f7ff ffca 	bl	d5eb0 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d5f1c:	6869      	ldr	r1, [r5, #4]
   d5f1e:	4620      	mov	r0, r4
   d5f20:	f7ff ffcd 	bl	d5ebe <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d5f24:	6829      	ldr	r1, [r5, #0]
   d5f26:	293b      	cmp	r1, #59	; 0x3b
   d5f28:	bfa8      	it	ge
   d5f2a:	213b      	movge	r1, #59	; 0x3b
   d5f2c:	4620      	mov	r0, r4
   d5f2e:	f7ff ffcd 	bl	d5ecc <_ZN12MCP79410Time9setSecondEi>
}
   d5f32:	b003      	add	sp, #12
   d5f34:	bd30      	pop	{r4, r5, pc}
	...

000d5f38 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5f38:	4a05      	ldr	r2, [pc, #20]	; (d5f50 <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d5f3a:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5f3c:	e9c0 2100 	strd	r2, r1, [r0]
   d5f40:	4a04      	ldr	r2, [pc, #16]	; (d5f54 <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d5f42:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5f44:	4a04      	ldr	r2, [pc, #16]	; (d5f58 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d5f46:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5f48:	4a04      	ldr	r2, [pc, #16]	; (d5f5c <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d5f4a:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5f4c:	6142      	str	r2, [r0, #20]
}
   d5f4e:	4770      	bx	lr
   d5f50:	000dbcb4 	.word	0x000dbcb4
   d5f54:	03010000 	.word	0x03010000
   d5f58:	000dbc5c 	.word	0x000dbc5c
   d5f5c:	000dbc90 	.word	0x000dbc90

000d5f60 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d5f60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5f64:	4604      	mov	r4, r0
   d5f66:	460f      	mov	r7, r1
   d5f68:	4690      	mov	r8, r2
   d5f6a:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d5f6c:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d5f6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5f70:	429e      	cmp	r6, r3
   d5f72:	d231      	bcs.n	d5fd8 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d5f74:	6860      	ldr	r0, [r4, #4]
   d5f76:	4639      	mov	r1, r7
   d5f78:	f001 fcbf 	bl	d78fa <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d5f7c:	eb08 0106 	add.w	r1, r8, r6
   d5f80:	6860      	ldr	r0, [r4, #4]
   d5f82:	f7ff fd47 	bl	d5a14 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d5f86:	6860      	ldr	r0, [r4, #4]
   d5f88:	2100      	movs	r1, #0
   d5f8a:	f001 fcbd 	bl	d7908 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d5f8e:	4605      	mov	r5, r0
   d5f90:	b9d0      	cbnz	r0, d5fc8 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d5f92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d5f94:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d5f96:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d5f98:	2a20      	cmp	r2, #32
   d5f9a:	f04f 0301 	mov.w	r3, #1
   d5f9e:	bf28      	it	cs
   d5fa0:	2220      	movcs	r2, #32
   d5fa2:	4639      	mov	r1, r7
   d5fa4:	f001 fc97 	bl	d78d6 <_ZN7TwoWire11requestFromEhjh>
   d5fa8:	eb09 0b06 	add.w	fp, r9, r6
   d5fac:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d5fae:	eb0b 0a00 	add.w	sl, fp, r0
   d5fb2:	45da      	cmp	sl, fp
   d5fb4:	d006      	beq.n	d5fc4 <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d5fb6:	6860      	ldr	r0, [r4, #4]
   d5fb8:	6803      	ldr	r3, [r0, #0]
   d5fba:	695b      	ldr	r3, [r3, #20]
   d5fbc:	4798      	blx	r3
   d5fbe:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d5fc2:	e7f6      	b.n	d5fb2 <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d5fc4:	442e      	add	r6, r5
	while(offset < bufLen) {
   d5fc6:	e7d2      	b.n	d5f6e <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d5fc8:	4602      	mov	r2, r0
   d5fca:	4904      	ldr	r1, [pc, #16]	; (d5fdc <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d5fcc:	4804      	ldr	r0, [pc, #16]	; (d5fe0 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d5fce:	f7ff fd25 	bl	d5a1c <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d5fd2:	4628      	mov	r0, r5
   d5fd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5fd8:	2500      	movs	r5, #0
	return stat;
   d5fda:	e7fa      	b.n	d5fd2 <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d5fdc:	000dbbb4 	.word	0x000dbbb4
   d5fe0:	2003e604 	.word	0x2003e604

000d5fe4 <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5fe4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d5fe8:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5fec:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5fee:	6803      	ldr	r3, [r0, #0]
   d5ff0:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5ff2:	4605      	mov	r5, r0
   d5ff4:	460c      	mov	r4, r1
   d5ff6:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d5ff8:	4798      	blx	r3
   d5ffa:	4580      	cmp	r8, r0
   d5ffc:	d80d      	bhi.n	d601a <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d5ffe:	3420      	adds	r4, #32
   d6000:	6868      	ldr	r0, [r5, #4]
   d6002:	9600      	str	r6, [sp, #0]
   d6004:	463b      	mov	r3, r7
   d6006:	b2e2      	uxtb	r2, r4
   d6008:	216f      	movs	r1, #111	; 0x6f
   d600a:	f7ff ffa9 	bl	d5f60 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d600e:	fab0 f080 	clz	r0, r0
   d6012:	0940      	lsrs	r0, r0, #5
}
   d6014:	b002      	add	sp, #8
   d6016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d601a:	2000      	movs	r0, #0
   d601c:	e7fa      	b.n	d6014 <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d601e <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d601e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6022:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6026:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6028:	6803      	ldr	r3, [r0, #0]
   d602a:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d602c:	4604      	mov	r4, r0
   d602e:	460d      	mov	r5, r1
   d6030:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6032:	4798      	blx	r3
   d6034:	4580      	cmp	r8, r0
   d6036:	d80c      	bhi.n	d6052 <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d6038:	6860      	ldr	r0, [r4, #4]
   d603a:	9600      	str	r6, [sp, #0]
   d603c:	463b      	mov	r3, r7
   d603e:	b2ea      	uxtb	r2, r5
   d6040:	2157      	movs	r1, #87	; 0x57
   d6042:	f7ff ff8d 	bl	d5f60 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d6046:	fab0 f080 	clz	r0, r0
   d604a:	0940      	lsrs	r0, r0, #5
}
   d604c:	b002      	add	sp, #8
   d604e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6052:	2000      	movs	r0, #0
   d6054:	e7fa      	b.n	d604c <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d6056 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6056:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d6058:	1e1e      	subs	r6, r3, #0
   d605a:	bf0c      	ite	eq
   d605c:	2307      	moveq	r3, #7
   d605e:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6060:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6062:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6064:	ab02      	add	r3, sp, #8
   d6066:	460a      	mov	r2, r1
   d6068:	216f      	movs	r1, #111	; 0x6f
   d606a:	f7ff ff79 	bl	d5f60 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d606e:	4605      	mov	r5, r0
   d6070:	b9a8      	cbnz	r0, d609e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d6072:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d6076:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d6078:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d607c:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d607e:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d6082:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d6084:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6088:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d608a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d608e:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d6090:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6094:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d6096:	b92e      	cbnz	r6, d60a4 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d6098:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d609c:	72a3      	strb	r3, [r4, #10]
}
   d609e:	4628      	mov	r0, r5
   d60a0:	b004      	add	sp, #16
   d60a2:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d60a4:	f002 f892 	bl	d81cc <_ZN9TimeClass4yearEv>
   d60a8:	f7ff fecc 	bl	d5e44 <_ZN12MCP79410Time8intToBcdEi>
   d60ac:	72a0      	strb	r0, [r4, #10]
	return stat;
   d60ae:	e7f6      	b.n	d609e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d60b0 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d60b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d60b2:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d60b4:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d60b6:	9300      	str	r3, [sp, #0]
   d60b8:	216f      	movs	r1, #111	; 0x6f
   d60ba:	ab03      	add	r3, sp, #12
   d60bc:	f7ff ff50 	bl	d5f60 <_ZNK8MCP7941010deviceReadEhhPhj>
   d60c0:	b920      	cbnz	r0, d60cc <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d60c2:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d60c6:	b005      	add	sp, #20
   d60c8:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d60cc:	2000      	movs	r0, #0
   d60ce:	e7fa      	b.n	d60c6 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d60d0 <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d60d0:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d60d2:	2103      	movs	r1, #3
   d60d4:	f7ff ffec 	bl	d60b0 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d60d8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d60dc:	bd08      	pop	{r3, pc}

000d60de <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d60de:	b538      	push	{r3, r4, r5, lr}
   d60e0:	2300      	movs	r3, #0
   d60e2:	460c      	mov	r4, r1
   d60e4:	460a      	mov	r2, r1
   d60e6:	4619      	mov	r1, r3
   d60e8:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d60ea:	f7ff ffb4 	bl	d6056 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d60ee:	b930      	cbnz	r0, d60fe <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d60f0:	7aa3      	ldrb	r3, [r4, #10]
   d60f2:	b123      	cbz	r3, d60fe <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d60f4:	4628      	mov	r0, r5
}
   d60f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d60fa:	f7ff bfe9 	b.w	d60d0 <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d60fe:	2000      	movs	r0, #0
   d6100:	bd38      	pop	{r3, r4, r5, pc}

000d6102 <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d6102:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6104:	4602      	mov	r2, r0
	MCP79410Time time;
   d6106:	a801      	add	r0, sp, #4
   d6108:	f7ff fe28 	bl	d5d5c <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d610c:	a901      	add	r1, sp, #4
   d610e:	4610      	mov	r0, r2
   d6110:	f7ff ffe5 	bl	d60de <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d6114:	b128      	cbz	r0, d6122 <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d6116:	a801      	add	r0, sp, #4
   d6118:	f7ff fe6c 	bl	d5df4 <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d611c:	b007      	add	sp, #28
   d611e:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d6122:	2000      	movs	r0, #0
   d6124:	4601      	mov	r1, r0
MCP79410Time::~MCP79410Time() {
   d6126:	e7f9      	b.n	d611c <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d6128 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d6128:	b5d0      	push	{r4, r6, r7, lr}
   d612a:	4604      	mov	r4, r0
   d612c:	b086      	sub	sp, #24
	wire.begin();
   d612e:	6840      	ldr	r0, [r0, #4]
   d6130:	f001 fbb4 	bl	d789c <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d6134:	f002 f810 	bl	d8158 <_ZN9TimeClass7isValidEv>
   d6138:	b9e8      	cbnz	r0, d6176 <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d613a:	7ae3      	ldrb	r3, [r4, #11]
   d613c:	079b      	lsls	r3, r3, #30
   d613e:	d51a      	bpl.n	d6176 <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d6140:	4620      	mov	r0, r4
   d6142:	f7ff ffde 	bl	d6102 <_ZNK8MCP7941010getRTCTimeEv>
   d6146:	4606      	mov	r6, r0
   d6148:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d614a:	ea56 0307 	orrs.w	r3, r6, r7
   d614e:	d012      	beq.n	d6176 <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d6150:	f001 ff09 	bl	d7f66 <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d6154:	4b0a      	ldr	r3, [pc, #40]	; (d6180 <_ZN8MCP794105setupEv+0x58>)
   d6156:	490b      	ldr	r1, [pc, #44]	; (d6184 <_ZN8MCP794105setupEv+0x5c>)
   d6158:	681b      	ldr	r3, [r3, #0]
   d615a:	9300      	str	r3, [sp, #0]
   d615c:	4632      	mov	r2, r6
   d615e:	463b      	mov	r3, r7
   d6160:	a802      	add	r0, sp, #8
   d6162:	f001 ffb7 	bl	d80d4 <_ZN9TimeClass6formatExPKc>
   d6166:	4808      	ldr	r0, [pc, #32]	; (d6188 <_ZN8MCP794105setupEv+0x60>)
   d6168:	9a02      	ldr	r2, [sp, #8]
   d616a:	4908      	ldr	r1, [pc, #32]	; (d618c <_ZN8MCP794105setupEv+0x64>)
   d616c:	f7ff fc56 	bl	d5a1c <_ZNK5spark6Logger4infoEPKcz>
   d6170:	a802      	add	r0, sp, #8
   d6172:	f001 fd95 	bl	d7ca0 <_ZN6StringD1Ev>
	setupDone = true;
   d6176:	2301      	movs	r3, #1
   d6178:	7223      	strb	r3, [r4, #8]
}
   d617a:	b006      	add	sp, #24
   d617c:	bdd0      	pop	{r4, r6, r7, pc}
   d617e:	bf00      	nop
   d6180:	2003dcc0 	.word	0x2003dcc0
   d6184:	2003e644 	.word	0x2003e644
   d6188:	2003e604 	.word	0x2003e604
   d618c:	000dbbce 	.word	0x000dbbce

000d6190 <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d6190:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6194:	4606      	mov	r6, r0
   d6196:	4688      	mov	r8, r1
   d6198:	4691      	mov	r9, r2
   d619a:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d619c:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d619e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d61a0:	429d      	cmp	r5, r3
   d61a2:	d229      	bcs.n	d61f8 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d61a4:	6870      	ldr	r0, [r6, #4]
   d61a6:	4641      	mov	r1, r8
   d61a8:	f001 fba7 	bl	d78fa <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d61ac:	6870      	ldr	r0, [r6, #4]
   d61ae:	eb09 0105 	add.w	r1, r9, r5
   d61b2:	f7ff fc2f 	bl	d5a14 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d61b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d61b8:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d61ba:	2f1f      	cmp	r7, #31
   d61bc:	bf28      	it	cs
   d61be:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d61c0:	eb0a 0405 	add.w	r4, sl, r5
   d61c4:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d61c8:	6870      	ldr	r0, [r6, #4]
   d61ca:	f814 1b01 	ldrb.w	r1, [r4], #1
   d61ce:	6802      	ldr	r2, [r0, #0]
   d61d0:	6892      	ldr	r2, [r2, #8]
   d61d2:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d61d4:	45a3      	cmp	fp, r4
   d61d6:	d1f7      	bne.n	d61c8 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d61d8:	6870      	ldr	r0, [r6, #4]
   d61da:	2101      	movs	r1, #1
   d61dc:	f001 fb94 	bl	d7908 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d61e0:	4604      	mov	r4, r0
   d61e2:	b138      	cbz	r0, d61f4 <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d61e4:	4602      	mov	r2, r0
   d61e6:	4905      	ldr	r1, [pc, #20]	; (d61fc <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d61e8:	4805      	ldr	r0, [pc, #20]	; (d6200 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d61ea:	f7ff fc17 	bl	d5a1c <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d61ee:	4620      	mov	r0, r4
   d61f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d61f4:	443d      	add	r5, r7
	while(offset < bufLen) {
   d61f6:	e7d2      	b.n	d619e <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d61f8:	2400      	movs	r4, #0
	return stat;
   d61fa:	e7f8      	b.n	d61ee <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d61fc:	000dbbe3 	.word	0x000dbbe3
   d6200:	2003e604 	.word	0x2003e604

000d6204 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6204:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6208:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d620c:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d620e:	6803      	ldr	r3, [r0, #0]
   d6210:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6212:	4605      	mov	r5, r0
   d6214:	460c      	mov	r4, r1
   d6216:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6218:	4798      	blx	r3
   d621a:	4580      	cmp	r8, r0
   d621c:	d80d      	bhi.n	d623a <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d621e:	3420      	adds	r4, #32
   d6220:	6868      	ldr	r0, [r5, #4]
   d6222:	9600      	str	r6, [sp, #0]
   d6224:	463b      	mov	r3, r7
   d6226:	b2e2      	uxtb	r2, r4
   d6228:	216f      	movs	r1, #111	; 0x6f
   d622a:	f7ff ffb1 	bl	d6190 <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d622e:	fab0 f080 	clz	r0, r0
   d6232:	0940      	lsrs	r0, r0, #5
}
   d6234:	b002      	add	sp, #8
   d6236:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d623a:	2000      	movs	r0, #0
   d623c:	e7fa      	b.n	d6234 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d623e <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d623e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d6240:	7c13      	ldrb	r3, [r2, #16]
   d6242:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d6246:	7bd3      	ldrb	r3, [r2, #15]
   d6248:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d624c:	7b93      	ldrb	r3, [r2, #14]
   d624e:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d6252:	7b53      	ldrb	r3, [r2, #13]
   d6254:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d6258:	7b13      	ldrb	r3, [r2, #12]
   d625a:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d625e:	7ad3      	ldrb	r3, [r2, #11]
   d6260:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d6264:	7a93      	ldrb	r3, [r2, #10]
   d6266:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d626a:	2307      	movs	r3, #7
   d626c:	9300      	str	r3, [sp, #0]
   d626e:	460a      	mov	r2, r1
   d6270:	ab02      	add	r3, sp, #8
   d6272:	216f      	movs	r1, #111	; 0x6f
   d6274:	f7ff ff8c 	bl	d6190 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d6278:	b005      	add	sp, #20
   d627a:	f85d fb04 	ldr.w	pc, [sp], #4

000d627e <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d627e:	b510      	push	{r4, lr}
   d6280:	b088      	sub	sp, #32
   d6282:	4604      	mov	r4, r0
	MCP79410Time time;
   d6284:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d6286:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d6288:	f7ff fd68 	bl	d5d5c <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d628c:	9b01      	ldr	r3, [sp, #4]
   d628e:	a803      	add	r0, sp, #12
   d6290:	f7ff fe27 	bl	d5ee2 <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d6294:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d6298:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d629a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d629e:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d62a2:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d62a6:	b16a      	cbz	r2, d62c4 <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d62a8:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d62ac:	aa03      	add	r2, sp, #12
   d62ae:	2100      	movs	r1, #0
   d62b0:	4620      	mov	r0, r4
   d62b2:	f88d 3019 	strb.w	r3, [sp, #25]
   d62b6:	f7ff ffc2 	bl	d623e <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d62ba:	fab0 f080 	clz	r0, r0
   d62be:	0940      	lsrs	r0, r0, #5
   d62c0:	b008      	add	sp, #32
   d62c2:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d62c4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d62c8:	e7f0      	b.n	d62ac <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d62cc <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d62cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d62ce:	b087      	sub	sp, #28
   d62d0:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d62d2:	f001 ff41 	bl	d8158 <_ZN9TimeClass7isValidEv>
   d62d6:	4604      	mov	r4, r0
   d62d8:	b1e8      	cbz	r0, d6316 <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d62da:	f001 ff5a 	bl	d8192 <_ZN9TimeClass3nowEv>
   d62de:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d62e0:	4602      	mov	r2, r0
		time_t now = Time.now();
   d62e2:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d62e4:	463b      	mov	r3, r7
   d62e6:	4628      	mov	r0, r5
   d62e8:	f7ff ffc9 	bl	d627e <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d62ec:	4b0c      	ldr	r3, [pc, #48]	; (d6320 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d62ee:	490d      	ldr	r1, [pc, #52]	; (d6324 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d62f0:	681b      	ldr	r3, [r3, #0]
   d62f2:	9300      	str	r3, [sp, #0]
   d62f4:	4632      	mov	r2, r6
   d62f6:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d62f8:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d62fa:	a802      	add	r0, sp, #8
   d62fc:	f001 feea 	bl	d80d4 <_ZN9TimeClass6formatExPKc>
   d6300:	4809      	ldr	r0, [pc, #36]	; (d6328 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d6302:	9a02      	ldr	r2, [sp, #8]
   d6304:	4909      	ldr	r1, [pc, #36]	; (d632c <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d6306:	f7ff fb89 	bl	d5a1c <_ZNK5spark6Logger4infoEPKcz>
   d630a:	a802      	add	r0, sp, #8
   d630c:	f001 fcc8 	bl	d7ca0 <_ZN6StringD1Ev>
}
   d6310:	4620      	mov	r0, r4
   d6312:	b007      	add	sp, #28
   d6314:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d6316:	4906      	ldr	r1, [pc, #24]	; (d6330 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d6318:	4803      	ldr	r0, [pc, #12]	; (d6328 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d631a:	f7ff fb7f 	bl	d5a1c <_ZNK5spark6Logger4infoEPKcz>
   d631e:	e7f7      	b.n	d6310 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d6320:	2003dcc0 	.word	0x2003dcc0
   d6324:	2003e644 	.word	0x2003e644
   d6328:	2003e604 	.word	0x2003e604
   d632c:	000dbbfe 	.word	0x000dbbfe
   d6330:	000dbc14 	.word	0x000dbc14

000d6334 <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d6334:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d6336:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d6338:	4604      	mov	r4, r0
	if (!timeSet) {
   d633a:	b99d      	cbnz	r5, d6364 <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d633c:	f001 ff0c 	bl	d8158 <_ZN9TimeClass7isValidEv>
   d6340:	b180      	cbz	r0, d6364 <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d6342:	2200      	movs	r2, #0
   d6344:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d6346:	4669      	mov	r1, sp
   d6348:	4628      	mov	r0, r5
        tm = 0;
   d634a:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d634e:	f000 fe2d 	bl	d6fac <spark_sync_time_last>
			if (lastSync != 0) {
   d6352:	b138      	cbz	r0, d6364 <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d6354:	7ae3      	ldrb	r3, [r4, #11]
   d6356:	07db      	lsls	r3, r3, #31
   d6358:	d502      	bpl.n	d6360 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d635a:	4620      	mov	r0, r4
   d635c:	f7ff ffb6 	bl	d62cc <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d6360:	2301      	movs	r3, #1
   d6362:	7263      	strb	r3, [r4, #9]
}
   d6364:	b003      	add	sp, #12
   d6366:	bd30      	pop	{r4, r5, pc}

000d6368 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d6368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d636a:	2301      	movs	r3, #1
	buf[0] = value;
   d636c:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d6370:	9300      	str	r3, [sp, #0]
   d6372:	460a      	mov	r2, r1
   d6374:	ab03      	add	r3, sp, #12
   d6376:	216f      	movs	r1, #111	; 0x6f
   d6378:	f7ff ff0a 	bl	d6190 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d637c:	b005      	add	sp, #20
   d637e:	f85d fb04 	ldr.w	pc, [sp], #4

000d6382 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d6382:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6384:	4604      	mov	r4, r0
   d6386:	460d      	mov	r5, r1
   d6388:	4617      	mov	r7, r2
   d638a:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d638c:	f7ff fe90 	bl	d60b0 <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   d6390:	ea00 0207 	and.w	r2, r0, r7
	return deviceWriteRegisterByte(addr, value);
   d6394:	4332      	orrs	r2, r6
   d6396:	4629      	mov	r1, r5
   d6398:	4620      	mov	r0, r4
}
   d639a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   d639e:	f7ff bfe3 	b.w	d6368 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d63a2 <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   d63a2:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   d63a4:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d63a6:	d80c      	bhi.n	d63c2 <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d63a8:	2900      	cmp	r1, #0
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d63aa:	f04f 0300 	mov.w	r3, #0
   d63ae:	bf14      	ite	ne
   d63b0:	22df      	movne	r2, #223	; 0xdf
   d63b2:	22ef      	moveq	r2, #239	; 0xef
   d63b4:	2107      	movs	r1, #7
   d63b6:	f7ff ffe4 	bl	d6382 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d63ba:	fab0 f080 	clz	r0, r0
   d63be:	0940      	lsrs	r0, r0, #5
}
   d63c0:	bd08      	pop	{r3, pc}
		return false;
   d63c2:	2000      	movs	r0, #0
   d63c4:	e7fc      	b.n	d63c0 <_ZN8MCP7941010clearAlarmEi+0x1e>

000d63c6 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d63c6:	b538      	push	{r3, r4, r5, lr}
   d63c8:	4604      	mov	r4, r0
   d63ca:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d63cc:	6860      	ldr	r0, [r4, #4]
   d63ce:	2157      	movs	r1, #87	; 0x57
   d63d0:	f001 fa93 	bl	d78fa <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d63d4:	6860      	ldr	r0, [r4, #4]
   d63d6:	2101      	movs	r1, #1
   d63d8:	f001 fa96 	bl	d7908 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d63dc:	b108      	cbz	r0, d63e2 <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d63de:	3d01      	subs	r5, #1
   d63e0:	d1f4      	bne.n	d63cc <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d63e2:	bd38      	pop	{r3, r4, r5, pc}

000d63e4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d63e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d63e8:	4604      	mov	r4, r0
   d63ea:	460f      	mov	r7, r1
   d63ec:	4616      	mov	r6, r2
   d63ee:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d63f2:	45b0      	cmp	r8, r6
   d63f4:	d020      	beq.n	d6438 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d63f6:	6860      	ldr	r0, [r4, #4]
   d63f8:	2157      	movs	r1, #87	; 0x57
   d63fa:	f001 fa7e 	bl	d78fa <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d63fe:	4639      	mov	r1, r7
   d6400:	6860      	ldr	r0, [r4, #4]
   d6402:	f7ff fb07 	bl	d5a14 <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d6406:	6860      	ldr	r0, [r4, #4]
   d6408:	f816 1b01 	ldrb.w	r1, [r6], #1
   d640c:	6803      	ldr	r3, [r0, #0]
   d640e:	689b      	ldr	r3, [r3, #8]
   d6410:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d6412:	6860      	ldr	r0, [r4, #4]
   d6414:	2101      	movs	r1, #1
   d6416:	f001 fa77 	bl	d7908 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d641a:	3701      	adds	r7, #1
   d641c:	4605      	mov	r5, r0
   d641e:	b138      	cbz	r0, d6430 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d6420:	4602      	mov	r2, r0
   d6422:	4906      	ldr	r1, [pc, #24]	; (d643c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d6424:	4806      	ldr	r0, [pc, #24]	; (d6440 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d6426:	f7ff faf9 	bl	d5a1c <_ZNK5spark6Logger4infoEPKcz>
}
   d642a:	4628      	mov	r0, r5
   d642c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d6430:	4620      	mov	r0, r4
   d6432:	f7ff ffc8 	bl	d63c6 <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d6436:	e7dc      	b.n	d63f2 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d6438:	2500      	movs	r5, #0
	return stat;
   d643a:	e7f6      	b.n	d642a <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d643c:	000dbc29 	.word	0x000dbc29
   d6440:	2003e604 	.word	0x2003e604

000d6444 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d6446:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6448:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d644a:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d644c:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d644e:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6450:	4604      	mov	r4, r0
   d6452:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d6454:	4798      	blx	r3
   d6456:	4287      	cmp	r7, r0
   d6458:	d80a      	bhi.n	d6470 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d645a:	9a01      	ldr	r2, [sp, #4]
   d645c:	6860      	ldr	r0, [r4, #4]
   d645e:	4633      	mov	r3, r6
   d6460:	b2e9      	uxtb	r1, r5
   d6462:	f7ff ffbf 	bl	d63e4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d6466:	fab0 f080 	clz	r0, r0
   d646a:	0940      	lsrs	r0, r0, #5
}
   d646c:	b003      	add	sp, #12
   d646e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d6470:	2000      	movs	r0, #0
   d6472:	e7fb      	b.n	d646c <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d6474 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   d6474:	4b01      	ldr	r3, [pc, #4]	; (d647c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d6476:	4a02      	ldr	r2, [pc, #8]	; (d6480 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d6478:	601a      	str	r2, [r3, #0]
}
   d647a:	4770      	bx	lr
   d647c:	2003e604 	.word	0x2003e604
   d6480:	000dbc4a 	.word	0x000dbc4a

000d6484 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d6484:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d6486:	4603      	mov	r3, r0
	switch (__op)
   d6488:	d102      	bne.n	d6490 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d648a:	6001      	str	r1, [r0, #0]
      }
   d648c:	2000      	movs	r0, #0
   d648e:	4770      	bx	lr
	  switch (__op)
   d6490:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d6492:	bf04      	itt	eq
   d6494:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d6498:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d649c:	e7f6      	b.n	d648c <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d649e <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d649e:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d64a0:	2301      	movs	r3, #1
   d64a2:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d64a4:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d64a6:	4604      	mov	r4, r0
        if (th->func) {
   d64a8:	b143      	cbz	r3, d64bc <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d64aa:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d64ac:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d64ae:	2301      	movs	r3, #1
   d64b0:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d64b2:	2000      	movs	r0, #0
    }
   d64b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d64b8:	f000 bb32 	b.w	d6b20 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d64bc:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d64be:	2800      	cmp	r0, #0
   d64c0:	d0f5      	beq.n	d64ae <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d64c2:	6883      	ldr	r3, [r0, #8]
   d64c4:	b90b      	cbnz	r3, d64ca <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d64c6:	f002 f986 	bl	d87d6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d64ca:	68c3      	ldr	r3, [r0, #12]
   d64cc:	e7ee      	b.n	d64ac <_ZN6Thread3runEPv+0xe>

000d64ce <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d64ce:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d64d0:	6842      	ldr	r2, [r0, #4]
   d64d2:	4603      	mov	r3, r0
   d64d4:	1054      	asrs	r4, r2, #1
   d64d6:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d64da:	07d2      	lsls	r2, r2, #31
   d64dc:	bf48      	it	mi
   d64de:	590a      	ldrmi	r2, [r1, r4]
   d64e0:	681b      	ldr	r3, [r3, #0]
      }
   d64e2:	f85d 4b04 	ldr.w	r4, [sp], #4
   d64e6:	bf48      	it	mi
   d64e8:	58d3      	ldrmi	r3, [r2, r3]
   d64ea:	4718      	bx	r3

000d64ec <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d64ec:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d64ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d64f0:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d64f4:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d64f6:	3008      	adds	r0, #8
   d64f8:	f000 faea 	bl	d6ad0 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d64fc:	2004      	movs	r0, #4
   d64fe:	f7fd fdca 	bl	d4096 <_Znwj>
   d6502:	4605      	mov	r5, r0
   d6504:	b398      	cbz	r0, d656e <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d6506:	491b      	ldr	r1, [pc, #108]	; (d6574 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d6508:	2014      	movs	r0, #20
   d650a:	f002 f960 	bl	d87ce <_ZnwjRKSt9nothrow_t>
   d650e:	b130      	cbz	r0, d651e <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6510:	2300      	movs	r3, #0
            exited(false) {
   d6512:	e9c0 3300 	strd	r3, r3, [r0]
   d6516:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d651a:	7403      	strb	r3, [r0, #16]
   d651c:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d651e:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d6520:	b1a0      	cbz	r0, d654c <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d6522:	4b15      	ldr	r3, [pc, #84]	; (d6578 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6524:	4915      	ldr	r1, [pc, #84]	; (d657c <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d6526:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d652a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d652e:	e9cd 0300 	strd	r0, r3, [sp]
   d6532:	2202      	movs	r2, #2
   d6534:	4b12      	ldr	r3, [pc, #72]	; (d6580 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d6536:	3004      	adds	r0, #4
   d6538:	f000 fa92 	bl	d6a60 <os_thread_create>
   d653c:	b930      	cbnz	r0, d654c <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d653e:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d6540:	7c1b      	ldrb	r3, [r3, #16]
   d6542:	b9a3      	cbnz	r3, d656e <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d6544:	2001      	movs	r0, #1
   d6546:	f000 fb0b 	bl	d6b60 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d654a:	e7f8      	b.n	d653e <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d654c:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d654e:	2300      	movs	r3, #0
   d6550:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d6552:	b164      	cbz	r4, d656e <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d6554:	6827      	ldr	r7, [r4, #0]
   d6556:	b137      	cbz	r7, d6566 <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d6558:	4638      	mov	r0, r7
   d655a:	f7fd fee5 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d655e:	2110      	movs	r1, #16
   d6560:	4638      	mov	r0, r7
   d6562:	f002 f932 	bl	d87ca <_ZdlPvj>
   d6566:	2114      	movs	r1, #20
   d6568:	4620      	mov	r0, r4
   d656a:	f002 f92e 	bl	d87ca <_ZdlPvj>
   d656e:	6075      	str	r5, [r6, #4]
}
   d6570:	b003      	add	sp, #12
   d6572:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6574:	000dbf4c 	.word	0x000dbf4c
   d6578:	000d678b 	.word	0x000d678b
   d657c:	000dbcbc 	.word	0x000dbcbc
   d6580:	000d649f 	.word	0x000d649f

000d6584 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d6584:	f247 5130 	movw	r1, #30000	; 0x7530
   d6588:	4a08      	ldr	r2, [pc, #32]	; (d65ac <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d658a:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d658c:	4908      	ldr	r1, [pc, #32]	; (d65b0 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d658e:	6002      	str	r2, [r0, #0]
   d6590:	2200      	movs	r2, #0
   d6592:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6596:	4907      	ldr	r1, [pc, #28]	; (d65b4 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d6598:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d659a:	4907      	ldr	r1, [pc, #28]	; (d65b8 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d659c:	6042      	str	r2, [r0, #4]
   d659e:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d65a2:	6181      	str	r1, [r0, #24]
   d65a4:	8502      	strh	r2, [r0, #40]	; 0x28
   d65a6:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d65aa:	4770      	bx	lr
   d65ac:	000dbd80 	.word	0x000dbd80
   d65b0:	000d68f5 	.word	0x000d68f5
   d65b4:	000d64cf 	.word	0x000d64cf
   d65b8:	000d6485 	.word	0x000d6485

000d65bc <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d65bc:	b510      	push	{r4, lr}
   d65be:	4b04      	ldr	r3, [pc, #16]	; (d65d0 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d65c0:	4604      	mov	r4, r0
   d65c2:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d65c6:	f7fd feaf 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
}
   d65ca:	4620      	mov	r0, r4
   d65cc:	bd10      	pop	{r4, pc}
   d65ce:	bf00      	nop
   d65d0:	000dbd80 	.word	0x000dbd80

000d65d4 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d65d4:	b510      	push	{r4, lr}
   d65d6:	4b03      	ldr	r3, [pc, #12]	; (d65e4 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d65d8:	6003      	str	r3, [r0, #0]
   d65da:	4604      	mov	r4, r0
   d65dc:	f7ff ffee 	bl	d65bc <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d65e0:	4620      	mov	r0, r4
   d65e2:	bd10      	pop	{r4, pc}
   d65e4:	000dbda8 	.word	0x000dbda8

000d65e8 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d65e8:	b510      	push	{r4, lr}
   d65ea:	4604      	mov	r4, r0
}
   d65ec:	f7ff fff2 	bl	d65d4 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d65f0:	4620      	mov	r0, r4
   d65f2:	2138      	movs	r1, #56	; 0x38
   d65f4:	f002 f8e9 	bl	d87ca <_ZdlPvj>
   d65f8:	4620      	mov	r0, r4
   d65fa:	bd10      	pop	{r4, pc}

000d65fc <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d65fc:	6880      	ldr	r0, [r0, #8]
   d65fe:	f000 ba6f 	b.w	d6ae0 <os_mutex_lock>

000d6602 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d6602:	6880      	ldr	r0, [r0, #8]
   d6604:	f000 ba74 	b.w	d6af0 <os_mutex_unlock>

000d6608 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d6608:	b510      	push	{r4, lr}
   d660a:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d660c:	6800      	ldr	r0, [r0, #0]
   d660e:	f7ff fff8 	bl	d6602 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d6612:	4620      	mov	r0, r4
   d6614:	bd10      	pop	{r4, pc}

000d6616 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d6616:	b513      	push	{r0, r1, r4, lr}
   d6618:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d661a:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d661c:	f7ff ffee 	bl	d65fc <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6620:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d6622:	88dc      	ldrh	r4, [r3, #6]
   d6624:	b2a4      	uxth	r4, r4
   d6626:	b10c      	cbz	r4, d662c <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d6628:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d662c:	a801      	add	r0, sp, #4
   d662e:	f7ff ffeb 	bl	d6608 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d6632:	4620      	mov	r0, r4
   d6634:	b002      	add	sp, #8
   d6636:	bd10      	pop	{r4, pc}

000d6638 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d6638:	b513      	push	{r0, r1, r4, lr}
   d663a:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d663c:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d663e:	f7ff ffdd 	bl	d65fc <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d6642:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d6646:	b943      	cbnz	r3, d665a <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6648:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d664a:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d664c:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d664e:	a801      	add	r0, sp, #4
   d6650:	f7ff ffda 	bl	d6608 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d6654:	4620      	mov	r0, r4
   d6656:	b002      	add	sp, #8
   d6658:	bd10      	pop	{r4, pc}
	bool result = false;
   d665a:	2400      	movs	r4, #0
   d665c:	e7f7      	b.n	d664e <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d665e <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d665e:	b513      	push	{r0, r1, r4, lr}
   d6660:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6662:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6664:	f7ff ffca 	bl	d65fc <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d6668:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d666a:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d666c:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d666e:	f7ff ffcb 	bl	d6608 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d6672:	4620      	mov	r0, r4
   d6674:	b002      	add	sp, #8
   d6676:	bd10      	pop	{r4, pc}

000d6678 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d6678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d667c:	4699      	mov	r9, r3
   d667e:	b086      	sub	sp, #24
	if (!haveSetup) {
   d6680:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d6684:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d6688:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d668c:	4604      	mov	r4, r0
   d668e:	460f      	mov	r7, r1
   d6690:	4616      	mov	r6, r2
	if (!haveSetup) {
   d6692:	b913      	cbnz	r3, d669a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d6694:	6803      	ldr	r3, [r0, #0]
   d6696:	689b      	ldr	r3, [r3, #8]
   d6698:	4798      	blx	r3
		data = "";
   d669a:	4b31      	ldr	r3, [pc, #196]	; (d6760 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d669c:	4638      	mov	r0, r7
		data = "";
   d669e:	2e00      	cmp	r6, #0
   d66a0:	bf08      	it	eq
   d66a2:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d66a4:	f002 ff89 	bl	d95ba <strlen>
   d66a8:	4605      	mov	r5, r0
   d66aa:	4630      	mov	r0, r6
   d66ac:	f002 ff85 	bl	d95ba <strlen>
   d66b0:	4428      	add	r0, r5
   d66b2:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d66b6:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d66b8:	bf1c      	itt	ne
   d66ba:	f025 0503 	bicne.w	r5, r5, #3
   d66be:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d66c0:	4633      	mov	r3, r6
   d66c2:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d66c6:	e9cd 9a00 	strd	r9, sl, [sp]
   d66ca:	4926      	ldr	r1, [pc, #152]	; (d6764 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d66cc:	4826      	ldr	r0, [pc, #152]	; (d6768 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d66ce:	463a      	mov	r2, r7
   d66d0:	f7ff f9a4 	bl	d5a1c <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d66d4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d66d6:	3b08      	subs	r3, #8
   d66d8:	42ab      	cmp	r3, r5
   d66da:	d212      	bcs.n	d6702 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d66dc:	2400      	movs	r4, #0
}
   d66de:	4620      	mov	r0, r4
   d66e0:	b006      	add	sp, #24
   d66e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d66e6:	88cb      	ldrh	r3, [r1, #6]
   d66e8:	2b01      	cmp	r3, #1
   d66ea:	d036      	beq.n	d675a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d66ec:	a805      	add	r0, sp, #20
   d66ee:	f7ff ff8b 	bl	d6608 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d66f2:	6823      	ldr	r3, [r4, #0]
   d66f4:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d66f8:	699b      	ldr	r3, [r3, #24]
   d66fa:	4620      	mov	r0, r4
   d66fc:	4798      	blx	r3
   d66fe:	2800      	cmp	r0, #0
   d6700:	d0ec      	beq.n	d66dc <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d6702:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6704:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d6706:	f7ff ff79 	bl	d65fc <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d670a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d670c:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d670e:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6710:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d6712:	1ad2      	subs	r2, r2, r3
   d6714:	42aa      	cmp	r2, r5
   d6716:	d3e6      	bcc.n	d66e6 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d6718:	ea48 080a 	orr.w	r8, r8, sl
   d671c:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d6720:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d6724:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d6726:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d672a:	4639      	mov	r1, r7
   d672c:	4640      	mov	r0, r8
   d672e:	f002 ff1f 	bl	d9570 <strcpy>
				cp += strlen(cp) + 1;
   d6732:	4640      	mov	r0, r8
   d6734:	f002 ff41 	bl	d95ba <strlen>
   d6738:	3001      	adds	r0, #1
				strcpy(cp, data);
   d673a:	4631      	mov	r1, r6
   d673c:	4440      	add	r0, r8
   d673e:	f002 ff17 	bl	d9570 <strcpy>
				nextFree += size;
   d6742:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6744:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d6746:	441d      	add	r5, r3
   d6748:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d674a:	88d3      	ldrh	r3, [r2, #6]
   d674c:	3301      	adds	r3, #1
   d674e:	80d3      	strh	r3, [r2, #6]
				return true;
   d6750:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d6752:	a805      	add	r0, sp, #20
   d6754:	f7ff ff58 	bl	d6608 <_ZN11StMutexLockD1Ev>
   d6758:	e7c1      	b.n	d66de <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d675a:	2400      	movs	r4, #0
   d675c:	e7f9      	b.n	d6752 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d675e:	bf00      	nop
   d6760:	000dbf74 	.word	0x000dbf74
   d6764:	000dbcce 	.word	0x000dbcce
   d6768:	2003e608 	.word	0x2003e608

000d676c <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d676c:	b508      	push	{r3, lr}
   d676e:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6770:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d6774:	69a3      	ldr	r3, [r4, #24]
   d6776:	b90b      	cbnz	r3, d677c <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d6778:	f002 f82d 	bl	d87d6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d677c:	69e3      	ldr	r3, [r4, #28]
   d677e:	4621      	mov	r1, r4
   d6780:	4628      	mov	r0, r5
   d6782:	4798      	blx	r3
		os_thread_yield();
   d6784:	f000 f974 	bl	d6a70 <os_thread_yield>
	while(true) {
   d6788:	e7f4      	b.n	d6774 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d678a <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d678a:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d678c:	f7ff ffee 	bl	d676c <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d6790 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d6790:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d6792:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d6796:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d6798:	4628      	mov	r0, r5
   d679a:	f002 ff0e 	bl	d95ba <strlen>
   d679e:	3001      	adds	r0, #1
   d67a0:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d67a2:	4628      	mov	r0, r5
   d67a4:	f002 ff09 	bl	d95ba <strlen>
	size_t offset = start - retainedBuffer;
   d67a8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d67aa:	3001      	adds	r0, #1
   d67ac:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d67ae:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d67b0:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d67b4:	bf1c      	itt	ne
   d67b6:	f1c3 0304 	rsbne	r3, r3, #4
   d67ba:	18c0      	addne	r0, r0, r3
}
   d67bc:	bd68      	pop	{r3, r5, r6, pc}

000d67be <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d67be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d67c0:	4604      	mov	r4, r0
   d67c2:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d67c4:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d67c6:	f7ff ff19 	bl	d65fc <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d67ca:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d67cc:	88fb      	ldrh	r3, [r7, #6]
   d67ce:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d67d2:	b1e6      	cbz	r6, d680e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d67d4:	2b01      	cmp	r3, #1
   d67d6:	d922      	bls.n	d681e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d67d8:	4629      	mov	r1, r5
   d67da:	4620      	mov	r0, r4
   d67dc:	f7ff ffd8 	bl	d6790 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d67e0:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d67e2:	4629      	mov	r1, r5
   d67e4:	4620      	mov	r0, r4
   d67e6:	f7ff ffd3 	bl	d6790 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d67ea:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d67ec:	443a      	add	r2, r7
	if (after > 0) {
   d67ee:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d67f0:	4601      	mov	r1, r0
	size_t len = next - start;
   d67f2:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d67f6:	d002      	beq.n	d67fe <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d67f8:	4628      	mov	r0, r5
   d67fa:	f002 fe69 	bl	d94d0 <memmove>
	nextFree -= len;
   d67fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d6800:	1b9b      	subs	r3, r3, r6
   d6802:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d6804:	88fb      	ldrh	r3, [r7, #6]
   d6806:	3b01      	subs	r3, #1
   d6808:	80fb      	strh	r3, [r7, #6]
	return true;
   d680a:	2601      	movs	r6, #1
   d680c:	e001      	b.n	d6812 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d680e:	2b00      	cmp	r3, #0
   d6810:	d1e7      	bne.n	d67e2 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d6812:	a801      	add	r0, sp, #4
   d6814:	f7ff fef8 	bl	d6608 <_ZN11StMutexLockD1Ev>
}
   d6818:	4630      	mov	r0, r6
   d681a:	b003      	add	sp, #12
   d681c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d681e:	2600      	movs	r6, #0
   d6820:	e7f7      	b.n	d6812 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d6824 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d6824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6828:	460d      	mov	r5, r1
   d682a:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d682c:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d682e:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6830:	f7ff fea8 	bl	d6584 <_ZN21PublishQueueAsyncBaseC1Ev>
   d6834:	4b15      	ldr	r3, [pc, #84]	; (d688c <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6836:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d683a:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d683c:	4b14      	ldr	r3, [pc, #80]	; (d6890 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d683e:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6840:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6842:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6844:	4698      	mov	r8, r3
   d6846:	d117      	bne.n	d6878 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d6848:	88ab      	ldrh	r3, [r5, #4]
   d684a:	b29b      	uxth	r3, r3
   d684c:	42b3      	cmp	r3, r6
   d684e:	d113      	bne.n	d6878 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6850:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d6854:	6367      	str	r7, [r4, #52]	; 0x34
   d6856:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d685a:	88eb      	ldrh	r3, [r5, #6]
   d685c:	fa1f f289 	uxth.w	r2, r9
   d6860:	b29b      	uxth	r3, r3
   d6862:	429a      	cmp	r2, r3
   d6864:	d20e      	bcs.n	d6884 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d6866:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d6868:	4620      	mov	r0, r4
   d686a:	f7ff ff91 	bl	d6790 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d686e:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d6870:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d6872:	f109 0901 	add.w	r9, r9, #1
   d6876:	d9f0      	bls.n	d685a <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d6878:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d687a:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d687e:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d6880:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d6882:	80eb      	strh	r3, [r5, #6]
}
   d6884:	4620      	mov	r0, r4
   d6886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d688a:	bf00      	nop
   d688c:	000dbda8 	.word	0x000dbda8
   d6890:	d19cab61 	.word	0xd19cab61

000d6894 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d6894:	b510      	push	{r4, lr}
   d6896:	e9d1 2300 	ldrd	r2, r3, [r1]
   d689a:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d689c:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d689e:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d68a0:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d68a2:	b90a      	cbnz	r2, d68a8 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d68a4:	07d9      	lsls	r1, r3, #31
   d68a6:	d505      	bpl.n	d68b4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d68a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d68ac:	4b0f      	ldr	r3, [pc, #60]	; (d68ec <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d68ae:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d68b0:	4b0f      	ldr	r3, [pc, #60]	; (d68f0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d68b2:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68b4:	ab02      	add	r3, sp, #8
   d68b6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d68ba:	466a      	mov	r2, sp
   d68bc:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d68c0:	e894 0003 	ldmia.w	r4, {r0, r1}
   d68c4:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d68c8:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68cc:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d68ce:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d68d2:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d68d4:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68d6:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d68d8:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d68da:	4618      	mov	r0, r3
   d68dc:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d68de:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d68e0:	9105      	str	r1, [sp, #20]
   d68e2:	f7fd fd21 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
	}
   d68e6:	4620      	mov	r0, r4
   d68e8:	b006      	add	sp, #24
   d68ea:	bd10      	pop	{r4, pc}
   d68ec:	000d64cf 	.word	0x000d64cf
   d68f0:	000d6485 	.word	0x000d6485

000d68f4 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d68f4:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d68f6:	4b05      	ldr	r3, [pc, #20]	; (d690c <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d68f8:	9300      	str	r3, [sp, #0]
   d68fa:	4669      	mov	r1, sp
   d68fc:	2300      	movs	r3, #0
   d68fe:	3010      	adds	r0, #16
   d6900:	9301      	str	r3, [sp, #4]
   d6902:	f7ff ffc7 	bl	d6894 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6906:	b003      	add	sp, #12
   d6908:	f85d fb04 	ldr.w	pc, [sp], #4
   d690c:	000d693d 	.word	0x000d693d

000d6910 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d6910:	b513      	push	{r0, r1, r4, lr}
   d6912:	4604      	mov	r4, r0
   d6914:	f000 f934 	bl	d6b80 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d6918:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d691a:	1ac0      	subs	r0, r0, r3
   d691c:	68e3      	ldr	r3, [r4, #12]
   d691e:	4298      	cmp	r0, r3
   d6920:	d308      	bcc.n	d6934 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d6922:	4b05      	ldr	r3, [pc, #20]	; (d6938 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d6924:	9300      	str	r3, [sp, #0]
   d6926:	4669      	mov	r1, sp
   d6928:	2300      	movs	r3, #0
   d692a:	f104 0010 	add.w	r0, r4, #16
   d692e:	9301      	str	r3, [sp, #4]
   d6930:	f7ff ffb0 	bl	d6894 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6934:	b002      	add	sp, #8
   d6936:	bd10      	pop	{r4, pc}
   d6938:	000d693d 	.word	0x000d693d

000d693c <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d693c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d6940:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d6944:	b086      	sub	sp, #24
   d6946:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d6948:	2b00      	cmp	r3, #0
   d694a:	d164      	bne.n	d6a16 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d694c:	f000 fafe 	bl	d6f4c <spark_cloud_flag_connected>
   d6950:	2800      	cmp	r0, #0
   d6952:	d060      	beq.n	d6a16 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d6954:	f000 f914 	bl	d6b80 <HAL_Timer_Get_Milli_Seconds>
   d6958:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d695a:	1ac0      	subs	r0, r0, r3
   d695c:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d6960:	4298      	cmp	r0, r3
   d6962:	d958      	bls.n	d6a16 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d6964:	6823      	ldr	r3, [r4, #0]
   d6966:	4620      	mov	r0, r4
   d6968:	695b      	ldr	r3, [r3, #20]
   d696a:	4798      	blx	r3
		if (data) {
   d696c:	4605      	mov	r5, r0
   d696e:	2800      	cmp	r0, #0
   d6970:	d051      	beq.n	d6a16 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d6972:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d6976:	2301      	movs	r3, #1
   d6978:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d697c:	4638      	mov	r0, r7
   d697e:	f002 fe1c 	bl	d95ba <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d6982:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6986:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d698a:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d698c:	682b      	ldr	r3, [r5, #0]
   d698e:	492b      	ldr	r1, [pc, #172]	; (d6a3c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d6990:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d6992:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6994:	4633      	mov	r3, r6
   d6996:	482a      	ldr	r0, [pc, #168]	; (d6a40 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6998:	463a      	mov	r2, r7
   d699a:	f7ff f83f 	bl	d5a1c <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d699e:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d69a0:	f88d 8000 	strb.w	r8, [sp]
   d69a4:	4632      	mov	r2, r6
   d69a6:	4639      	mov	r1, r7
   d69a8:	a802      	add	r0, sp, #8
   d69aa:	f000 fd85 	bl	d74b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d69ae:	9d02      	ldr	r5, [sp, #8]
   d69b0:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d69b2:	b91b      	cbnz	r3, d69bc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d69b4:	2001      	movs	r0, #1
   d69b6:	f000 fbc9 	bl	d714c <delay>
			while(!request.isDone()) {
   d69ba:	e7f8      	b.n	d69ae <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d69bc:	2000      	movs	r0, #0
   d69be:	f000 fa6f 	bl	d6ea0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d69c2:	b120      	cbz	r0, d69ce <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d69c4:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d69c6:	b913      	cbnz	r3, d69ce <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d69c8:	f000 fab8 	bl	d6f3c <spark_process>
    }
   d69cc:	e7fa      	b.n	d69c4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d69ce:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d69d0:	2b01      	cmp	r3, #1
   d69d2:	d123      	bne.n	d6a1c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d69d4:	491b      	ldr	r1, [pc, #108]	; (d6a44 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d69d6:	481a      	ldr	r0, [pc, #104]	; (d6a40 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d69d8:	f7ff f820 	bl	d5a1c <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d69dc:	6823      	ldr	r3, [r4, #0]
   d69de:	2100      	movs	r1, #0
   d69e0:	699b      	ldr	r3, [r3, #24]
   d69e2:	4620      	mov	r0, r4
   d69e4:	4798      	blx	r3
			isSending = false;
   d69e6:	2300      	movs	r3, #0
   d69e8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d69ec:	f000 f8c8 	bl	d6b80 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d69f0:	6260      	str	r0, [r4, #36]	; 0x24
	if (_M_pi != nullptr)
   d69f2:	9c03      	ldr	r4, [sp, #12]
   d69f4:	b17c      	cbz	r4, d6a16 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d69f6:	6863      	ldr	r3, [r4, #4]
   d69f8:	3b01      	subs	r3, #1
   d69fa:	6063      	str	r3, [r4, #4]
   d69fc:	b95b      	cbnz	r3, d6a16 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d69fe:	6823      	ldr	r3, [r4, #0]
   d6a00:	4620      	mov	r0, r4
   d6a02:	689b      	ldr	r3, [r3, #8]
   d6a04:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6a06:	68a3      	ldr	r3, [r4, #8]
   d6a08:	3b01      	subs	r3, #1
   d6a0a:	60a3      	str	r3, [r4, #8]
   d6a0c:	b91b      	cbnz	r3, d6a16 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d6a0e:	6823      	ldr	r3, [r4, #0]
   d6a10:	4620      	mov	r0, r4
   d6a12:	68db      	ldr	r3, [r3, #12]
   d6a14:	4798      	blx	r3
}
   d6a16:	b006      	add	sp, #24
   d6a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d6a1c:	68e2      	ldr	r2, [r4, #12]
   d6a1e:	490a      	ldr	r1, [pc, #40]	; (d6a48 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d6a20:	4807      	ldr	r0, [pc, #28]	; (d6a40 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6a22:	f7fe fffb 	bl	d5a1c <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d6a26:	4b09      	ldr	r3, [pc, #36]	; (d6a4c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d6a28:	9304      	str	r3, [sp, #16]
   d6a2a:	a904      	add	r1, sp, #16
   d6a2c:	2300      	movs	r3, #0
   d6a2e:	f104 0010 	add.w	r0, r4, #16
   d6a32:	9305      	str	r3, [sp, #20]
   d6a34:	f7ff ff2e 	bl	d6894 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d6a38:	e7d5      	b.n	d69e6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d6a3a:	bf00      	nop
   d6a3c:	000dbd0f 	.word	0x000dbd0f
   d6a40:	2003e608 	.word	0x2003e608
   d6a44:	000dbd30 	.word	0x000dbd30
   d6a48:	000dbd47 	.word	0x000dbd47
   d6a4c:	000d6911 	.word	0x000d6911

000d6a50 <_GLOBAL__sub_I_pubqLogger>:
   d6a50:	4b01      	ldr	r3, [pc, #4]	; (d6a58 <_GLOBAL__sub_I_pubqLogger+0x8>)
   d6a52:	4a02      	ldr	r2, [pc, #8]	; (d6a5c <_GLOBAL__sub_I_pubqLogger+0xc>)
   d6a54:	601a      	str	r2, [r3, #0]
}
   d6a56:	4770      	bx	lr
   d6a58:	2003e608 	.word	0x2003e608
   d6a5c:	000dbd6e 	.word	0x000dbd6e

000d6a60 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d6a60:	b508      	push	{r3, lr}
   d6a62:	4b02      	ldr	r3, [pc, #8]	; (d6a6c <os_thread_create+0xc>)
   d6a64:	681b      	ldr	r3, [r3, #0]
   d6a66:	685b      	ldr	r3, [r3, #4]
   d6a68:	9301      	str	r3, [sp, #4]
   d6a6a:	bd08      	pop	{r3, pc}
   d6a6c:	00030248 	.word	0x00030248

000d6a70 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d6a70:	b508      	push	{r3, lr}
   d6a72:	4b02      	ldr	r3, [pc, #8]	; (d6a7c <os_thread_yield+0xc>)
   d6a74:	681b      	ldr	r3, [r3, #0]
   d6a76:	68db      	ldr	r3, [r3, #12]
   d6a78:	9301      	str	r3, [sp, #4]
   d6a7a:	bd08      	pop	{r3, pc}
   d6a7c:	00030248 	.word	0x00030248

000d6a80 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d6a80:	b508      	push	{r3, lr}
   d6a82:	4b02      	ldr	r3, [pc, #8]	; (d6a8c <os_thread_scheduling+0xc>)
   d6a84:	681b      	ldr	r3, [r3, #0]
   d6a86:	69db      	ldr	r3, [r3, #28]
   d6a88:	9301      	str	r3, [sp, #4]
   d6a8a:	bd08      	pop	{r3, pc}
   d6a8c:	00030248 	.word	0x00030248

000d6a90 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d6a90:	b508      	push	{r3, lr}
   d6a92:	4b02      	ldr	r3, [pc, #8]	; (d6a9c <os_timer_create+0xc>)
   d6a94:	681b      	ldr	r3, [r3, #0]
   d6a96:	6a1b      	ldr	r3, [r3, #32]
   d6a98:	9301      	str	r3, [sp, #4]
   d6a9a:	bd08      	pop	{r3, pc}
   d6a9c:	00030248 	.word	0x00030248

000d6aa0 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d6aa0:	b508      	push	{r3, lr}
   d6aa2:	4b02      	ldr	r3, [pc, #8]	; (d6aac <os_timer_destroy+0xc>)
   d6aa4:	681b      	ldr	r3, [r3, #0]
   d6aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6aa8:	9301      	str	r3, [sp, #4]
   d6aaa:	bd08      	pop	{r3, pc}
   d6aac:	00030248 	.word	0x00030248

000d6ab0 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d6ab0:	b508      	push	{r3, lr}
   d6ab2:	4b02      	ldr	r3, [pc, #8]	; (d6abc <os_timer_get_id+0xc>)
   d6ab4:	681b      	ldr	r3, [r3, #0]
   d6ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6ab8:	9301      	str	r3, [sp, #4]
   d6aba:	bd08      	pop	{r3, pc}
   d6abc:	00030248 	.word	0x00030248

000d6ac0 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d6ac0:	b508      	push	{r3, lr}
   d6ac2:	4b02      	ldr	r3, [pc, #8]	; (d6acc <os_timer_change+0xc>)
   d6ac4:	681b      	ldr	r3, [r3, #0]
   d6ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6ac8:	9301      	str	r3, [sp, #4]
   d6aca:	bd08      	pop	{r3, pc}
   d6acc:	00030248 	.word	0x00030248

000d6ad0 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d6ad0:	b508      	push	{r3, lr}
   d6ad2:	4b02      	ldr	r3, [pc, #8]	; (d6adc <os_mutex_create+0xc>)
   d6ad4:	681b      	ldr	r3, [r3, #0]
   d6ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6ad8:	9301      	str	r3, [sp, #4]
   d6ada:	bd08      	pop	{r3, pc}
   d6adc:	00030248 	.word	0x00030248

000d6ae0 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d6ae0:	b508      	push	{r3, lr}
   d6ae2:	4b02      	ldr	r3, [pc, #8]	; (d6aec <os_mutex_lock+0xc>)
   d6ae4:	681b      	ldr	r3, [r3, #0]
   d6ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6ae8:	9301      	str	r3, [sp, #4]
   d6aea:	bd08      	pop	{r3, pc}
   d6aec:	00030248 	.word	0x00030248

000d6af0 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d6af0:	b508      	push	{r3, lr}
   d6af2:	4b02      	ldr	r3, [pc, #8]	; (d6afc <os_mutex_unlock+0xc>)
   d6af4:	681b      	ldr	r3, [r3, #0]
   d6af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6af8:	9301      	str	r3, [sp, #4]
   d6afa:	bd08      	pop	{r3, pc}
   d6afc:	00030248 	.word	0x00030248

000d6b00 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6b00:	b508      	push	{r3, lr}
   d6b02:	4b02      	ldr	r3, [pc, #8]	; (d6b0c <os_mutex_recursive_create+0xc>)
   d6b04:	681b      	ldr	r3, [r3, #0]
   d6b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6b08:	9301      	str	r3, [sp, #4]
   d6b0a:	bd08      	pop	{r3, pc}
   d6b0c:	00030248 	.word	0x00030248

000d6b10 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6b10:	b508      	push	{r3, lr}
   d6b12:	4b02      	ldr	r3, [pc, #8]	; (d6b1c <os_mutex_recursive_destroy+0xc>)
   d6b14:	681b      	ldr	r3, [r3, #0]
   d6b16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6b18:	9301      	str	r3, [sp, #4]
   d6b1a:	bd08      	pop	{r3, pc}
   d6b1c:	00030248 	.word	0x00030248

000d6b20 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d6b20:	b508      	push	{r3, lr}
   d6b22:	4b02      	ldr	r3, [pc, #8]	; (d6b2c <os_thread_exit+0xc>)
   d6b24:	681b      	ldr	r3, [r3, #0]
   d6b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d6b28:	9301      	str	r3, [sp, #4]
   d6b2a:	bd08      	pop	{r3, pc}
   d6b2c:	00030248 	.word	0x00030248

000d6b30 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d6b30:	b508      	push	{r3, lr}
   d6b32:	4b02      	ldr	r3, [pc, #8]	; (d6b3c <os_timer_set_id+0xc>)
   d6b34:	681b      	ldr	r3, [r3, #0]
   d6b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d6b38:	9301      	str	r3, [sp, #4]
   d6b3a:	bd08      	pop	{r3, pc}
   d6b3c:	00030248 	.word	0x00030248

000d6b40 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d6b40:	b508      	push	{r3, lr}
   d6b42:	4b02      	ldr	r3, [pc, #8]	; (d6b4c <HAL_Feature_Set+0xc>)
   d6b44:	681b      	ldr	r3, [r3, #0]
   d6b46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6b48:	9301      	str	r3, [sp, #4]
   d6b4a:	bd08      	pop	{r3, pc}
   d6b4c:	00030234 	.word	0x00030234

000d6b50 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6b50:	b508      	push	{r3, lr}
   d6b52:	4b02      	ldr	r3, [pc, #8]	; (d6b5c <HAL_RNG_GetRandomNumber+0xc>)
   d6b54:	681b      	ldr	r3, [r3, #0]
   d6b56:	685b      	ldr	r3, [r3, #4]
   d6b58:	9301      	str	r3, [sp, #4]
   d6b5a:	bd08      	pop	{r3, pc}
   d6b5c:	00030218 	.word	0x00030218

000d6b60 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d6b60:	b508      	push	{r3, lr}
   d6b62:	4b02      	ldr	r3, [pc, #8]	; (d6b6c <HAL_Delay_Milliseconds+0xc>)
   d6b64:	681b      	ldr	r3, [r3, #0]
   d6b66:	689b      	ldr	r3, [r3, #8]
   d6b68:	9301      	str	r3, [sp, #4]
   d6b6a:	bd08      	pop	{r3, pc}
   d6b6c:	00030218 	.word	0x00030218

000d6b70 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6b70:	b508      	push	{r3, lr}
   d6b72:	4b02      	ldr	r3, [pc, #8]	; (d6b7c <HAL_Delay_Microseconds+0xc>)
   d6b74:	681b      	ldr	r3, [r3, #0]
   d6b76:	68db      	ldr	r3, [r3, #12]
   d6b78:	9301      	str	r3, [sp, #4]
   d6b7a:	bd08      	pop	{r3, pc}
   d6b7c:	00030218 	.word	0x00030218

000d6b80 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6b80:	b508      	push	{r3, lr}
   d6b82:	4b02      	ldr	r3, [pc, #8]	; (d6b8c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6b84:	681b      	ldr	r3, [r3, #0]
   d6b86:	695b      	ldr	r3, [r3, #20]
   d6b88:	9301      	str	r3, [sp, #4]
   d6b8a:	bd08      	pop	{r3, pc}
   d6b8c:	00030218 	.word	0x00030218

000d6b90 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d6b90:	b508      	push	{r3, lr}
   d6b92:	4b02      	ldr	r3, [pc, #8]	; (d6b9c <hal_rtc_time_is_valid+0xc>)
   d6b94:	681b      	ldr	r3, [r3, #0]
   d6b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6b98:	9301      	str	r3, [sp, #4]
   d6b9a:	bd08      	pop	{r3, pc}
   d6b9c:	00030218 	.word	0x00030218

000d6ba0 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d6ba0:	b508      	push	{r3, lr}
   d6ba2:	4b02      	ldr	r3, [pc, #8]	; (d6bac <hal_timer_millis+0xc>)
   d6ba4:	681b      	ldr	r3, [r3, #0]
   d6ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6ba8:	9301      	str	r3, [sp, #4]
   d6baa:	bd08      	pop	{r3, pc}
   d6bac:	00030218 	.word	0x00030218

000d6bb0 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d6bb0:	b508      	push	{r3, lr}
   d6bb2:	4b02      	ldr	r3, [pc, #8]	; (d6bbc <hal_rtc_get_time+0xc>)
   d6bb4:	681b      	ldr	r3, [r3, #0]
   d6bb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6bb8:	9301      	str	r3, [sp, #4]
   d6bba:	bd08      	pop	{r3, pc}
   d6bbc:	00030218 	.word	0x00030218

000d6bc0 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d6bc0:	b508      	push	{r3, lr}
   d6bc2:	4b02      	ldr	r3, [pc, #8]	; (d6bcc <hal_rtc_set_time+0xc>)
   d6bc4:	681b      	ldr	r3, [r3, #0]
   d6bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d6bc8:	9301      	str	r3, [sp, #4]
   d6bca:	bd08      	pop	{r3, pc}
   d6bcc:	00030218 	.word	0x00030218

000d6bd0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6bd0:	b508      	push	{r3, lr}
   d6bd2:	4b02      	ldr	r3, [pc, #8]	; (d6bdc <HAL_Validate_Pin_Function+0xc>)
   d6bd4:	681b      	ldr	r3, [r3, #0]
   d6bd6:	685b      	ldr	r3, [r3, #4]
   d6bd8:	9301      	str	r3, [sp, #4]
   d6bda:	bd08      	pop	{r3, pc}
   d6bdc:	0003022c 	.word	0x0003022c

000d6be0 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6be0:	b508      	push	{r3, lr}
   d6be2:	4b02      	ldr	r3, [pc, #8]	; (d6bec <HAL_Pin_Mode+0xc>)
   d6be4:	681b      	ldr	r3, [r3, #0]
   d6be6:	689b      	ldr	r3, [r3, #8]
   d6be8:	9301      	str	r3, [sp, #4]
   d6bea:	bd08      	pop	{r3, pc}
   d6bec:	0003022c 	.word	0x0003022c

000d6bf0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6bf0:	b508      	push	{r3, lr}
   d6bf2:	4b02      	ldr	r3, [pc, #8]	; (d6bfc <HAL_Get_Pin_Mode+0xc>)
   d6bf4:	681b      	ldr	r3, [r3, #0]
   d6bf6:	68db      	ldr	r3, [r3, #12]
   d6bf8:	9301      	str	r3, [sp, #4]
   d6bfa:	bd08      	pop	{r3, pc}
   d6bfc:	0003022c 	.word	0x0003022c

000d6c00 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6c00:	b508      	push	{r3, lr}
   d6c02:	4b02      	ldr	r3, [pc, #8]	; (d6c0c <HAL_GPIO_Write+0xc>)
   d6c04:	681b      	ldr	r3, [r3, #0]
   d6c06:	691b      	ldr	r3, [r3, #16]
   d6c08:	9301      	str	r3, [sp, #4]
   d6c0a:	bd08      	pop	{r3, pc}
   d6c0c:	0003022c 	.word	0x0003022c

000d6c10 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d6c10:	b508      	push	{r3, lr}
   d6c12:	4b02      	ldr	r3, [pc, #8]	; (d6c1c <HAL_Interrupts_Attach+0xc>)
   d6c14:	681b      	ldr	r3, [r3, #0]
   d6c16:	699b      	ldr	r3, [r3, #24]
   d6c18:	9301      	str	r3, [sp, #4]
   d6c1a:	bd08      	pop	{r3, pc}
   d6c1c:	0003022c 	.word	0x0003022c

000d6c20 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d6c20:	b508      	push	{r3, lr}
   d6c22:	4b02      	ldr	r3, [pc, #8]	; (d6c2c <HAL_Interrupts_Detach+0xc>)
   d6c24:	681b      	ldr	r3, [r3, #0]
   d6c26:	69db      	ldr	r3, [r3, #28]
   d6c28:	9301      	str	r3, [sp, #4]
   d6c2a:	bd08      	pop	{r3, pc}
   d6c2c:	0003022c 	.word	0x0003022c

000d6c30 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d6c30:	b508      	push	{r3, lr}
   d6c32:	4b02      	ldr	r3, [pc, #8]	; (d6c3c <hal_adc_read+0xc>)
   d6c34:	681b      	ldr	r3, [r3, #0]
   d6c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6c38:	9301      	str	r3, [sp, #4]
   d6c3a:	bd08      	pop	{r3, pc}
   d6c3c:	0003022c 	.word	0x0003022c

000d6c40 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d6c40:	b508      	push	{r3, lr}
   d6c42:	4b02      	ldr	r3, [pc, #8]	; (d6c4c <hal_i2c_begin+0xc>)
   d6c44:	681b      	ldr	r3, [r3, #0]
   d6c46:	68db      	ldr	r3, [r3, #12]
   d6c48:	9301      	str	r3, [sp, #4]
   d6c4a:	bd08      	pop	{r3, pc}
   d6c4c:	00030228 	.word	0x00030228

000d6c50 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d6c50:	b508      	push	{r3, lr}
   d6c52:	4b02      	ldr	r3, [pc, #8]	; (d6c5c <hal_i2c_begin_transmission+0xc>)
   d6c54:	681b      	ldr	r3, [r3, #0]
   d6c56:	699b      	ldr	r3, [r3, #24]
   d6c58:	9301      	str	r3, [sp, #4]
   d6c5a:	bd08      	pop	{r3, pc}
   d6c5c:	00030228 	.word	0x00030228

000d6c60 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6c60:	b508      	push	{r3, lr}
   d6c62:	4b02      	ldr	r3, [pc, #8]	; (d6c6c <hal_i2c_end_transmission+0xc>)
   d6c64:	681b      	ldr	r3, [r3, #0]
   d6c66:	69db      	ldr	r3, [r3, #28]
   d6c68:	9301      	str	r3, [sp, #4]
   d6c6a:	bd08      	pop	{r3, pc}
   d6c6c:	00030228 	.word	0x00030228

000d6c70 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6c70:	b508      	push	{r3, lr}
   d6c72:	4b02      	ldr	r3, [pc, #8]	; (d6c7c <hal_i2c_write+0xc>)
   d6c74:	681b      	ldr	r3, [r3, #0]
   d6c76:	6a1b      	ldr	r3, [r3, #32]
   d6c78:	9301      	str	r3, [sp, #4]
   d6c7a:	bd08      	pop	{r3, pc}
   d6c7c:	00030228 	.word	0x00030228

000d6c80 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6c80:	b508      	push	{r3, lr}
   d6c82:	4b02      	ldr	r3, [pc, #8]	; (d6c8c <hal_i2c_available+0xc>)
   d6c84:	681b      	ldr	r3, [r3, #0]
   d6c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6c88:	9301      	str	r3, [sp, #4]
   d6c8a:	bd08      	pop	{r3, pc}
   d6c8c:	00030228 	.word	0x00030228

000d6c90 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6c90:	b508      	push	{r3, lr}
   d6c92:	4b02      	ldr	r3, [pc, #8]	; (d6c9c <hal_i2c_read+0xc>)
   d6c94:	681b      	ldr	r3, [r3, #0]
   d6c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6c98:	9301      	str	r3, [sp, #4]
   d6c9a:	bd08      	pop	{r3, pc}
   d6c9c:	00030228 	.word	0x00030228

000d6ca0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d6ca0:	b508      	push	{r3, lr}
   d6ca2:	4b02      	ldr	r3, [pc, #8]	; (d6cac <hal_i2c_peek+0xc>)
   d6ca4:	681b      	ldr	r3, [r3, #0]
   d6ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6ca8:	9301      	str	r3, [sp, #4]
   d6caa:	bd08      	pop	{r3, pc}
   d6cac:	00030228 	.word	0x00030228

000d6cb0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d6cb0:	b508      	push	{r3, lr}
   d6cb2:	4b02      	ldr	r3, [pc, #8]	; (d6cbc <hal_i2c_flush+0xc>)
   d6cb4:	681b      	ldr	r3, [r3, #0]
   d6cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6cb8:	9301      	str	r3, [sp, #4]
   d6cba:	bd08      	pop	{r3, pc}
   d6cbc:	00030228 	.word	0x00030228

000d6cc0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d6cc0:	b508      	push	{r3, lr}
   d6cc2:	4b02      	ldr	r3, [pc, #8]	; (d6ccc <hal_i2c_is_enabled+0xc>)
   d6cc4:	681b      	ldr	r3, [r3, #0]
   d6cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6cc8:	9301      	str	r3, [sp, #4]
   d6cca:	bd08      	pop	{r3, pc}
   d6ccc:	00030228 	.word	0x00030228

000d6cd0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d6cd0:	b508      	push	{r3, lr}
   d6cd2:	4b02      	ldr	r3, [pc, #8]	; (d6cdc <hal_i2c_init+0xc>)
   d6cd4:	681b      	ldr	r3, [r3, #0]
   d6cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6cd8:	9301      	str	r3, [sp, #4]
   d6cda:	bd08      	pop	{r3, pc}
   d6cdc:	00030228 	.word	0x00030228

000d6ce0 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d6ce0:	b508      	push	{r3, lr}
   d6ce2:	4b02      	ldr	r3, [pc, #8]	; (d6cec <hal_i2c_lock+0xc>)
   d6ce4:	681b      	ldr	r3, [r3, #0]
   d6ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6ce8:	9301      	str	r3, [sp, #4]
   d6cea:	bd08      	pop	{r3, pc}
   d6cec:	00030228 	.word	0x00030228

000d6cf0 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d6cf0:	b508      	push	{r3, lr}
   d6cf2:	4b02      	ldr	r3, [pc, #8]	; (d6cfc <hal_i2c_unlock+0xc>)
   d6cf4:	681b      	ldr	r3, [r3, #0]
   d6cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6cf8:	9301      	str	r3, [sp, #4]
   d6cfa:	bd08      	pop	{r3, pc}
   d6cfc:	00030228 	.word	0x00030228

000d6d00 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d6d00:	b508      	push	{r3, lr}
   d6d02:	4b02      	ldr	r3, [pc, #8]	; (d6d0c <hal_i2c_request_ex+0xc>)
   d6d04:	681b      	ldr	r3, [r3, #0]
   d6d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6d08:	9301      	str	r3, [sp, #4]
   d6d0a:	bd08      	pop	{r3, pc}
   d6d0c:	00030228 	.word	0x00030228

000d6d10 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6d10:	b508      	push	{r3, lr}
   d6d12:	4b02      	ldr	r3, [pc, #8]	; (d6d1c <inet_inet_ntop+0xc>)
   d6d14:	681b      	ldr	r3, [r3, #0]
   d6d16:	695b      	ldr	r3, [r3, #20]
   d6d18:	9301      	str	r3, [sp, #4]
   d6d1a:	bd08      	pop	{r3, pc}
   d6d1c:	00030264 	.word	0x00030264

000d6d20 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6d20:	b508      	push	{r3, lr}
   d6d22:	4b02      	ldr	r3, [pc, #8]	; (d6d2c <netdb_freeaddrinfo+0xc>)
   d6d24:	681b      	ldr	r3, [r3, #0]
   d6d26:	689b      	ldr	r3, [r3, #8]
   d6d28:	9301      	str	r3, [sp, #4]
   d6d2a:	bd08      	pop	{r3, pc}
   d6d2c:	00030268 	.word	0x00030268

000d6d30 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6d30:	b508      	push	{r3, lr}
   d6d32:	4b02      	ldr	r3, [pc, #8]	; (d6d3c <netdb_getaddrinfo+0xc>)
   d6d34:	681b      	ldr	r3, [r3, #0]
   d6d36:	68db      	ldr	r3, [r3, #12]
   d6d38:	9301      	str	r3, [sp, #4]
   d6d3a:	bd08      	pop	{r3, pc}
   d6d3c:	00030268 	.word	0x00030268

000d6d40 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6d40:	b508      	push	{r3, lr}
   d6d42:	4b02      	ldr	r3, [pc, #8]	; (d6d4c <hal_spi_init+0xc>)
   d6d44:	681b      	ldr	r3, [r3, #0]
   d6d46:	69db      	ldr	r3, [r3, #28]
   d6d48:	9301      	str	r3, [sp, #4]
   d6d4a:	bd08      	pop	{r3, pc}
   d6d4c:	00030230 	.word	0x00030230

000d6d50 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6d50:	b508      	push	{r3, lr}
   d6d52:	4b02      	ldr	r3, [pc, #8]	; (d6d5c <hal_spi_is_enabled+0xc>)
   d6d54:	681b      	ldr	r3, [r3, #0]
   d6d56:	6a1b      	ldr	r3, [r3, #32]
   d6d58:	9301      	str	r3, [sp, #4]
   d6d5a:	bd08      	pop	{r3, pc}
   d6d5c:	00030230 	.word	0x00030230

000d6d60 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6d60:	b508      	push	{r3, lr}
   d6d62:	4b02      	ldr	r3, [pc, #8]	; (d6d6c <hal_usart_init+0xc>)
   d6d64:	681b      	ldr	r3, [r3, #0]
   d6d66:	681b      	ldr	r3, [r3, #0]
   d6d68:	9301      	str	r3, [sp, #4]
   d6d6a:	bd08      	pop	{r3, pc}
   d6d6c:	0003023c 	.word	0x0003023c

000d6d70 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6d70:	b508      	push	{r3, lr}
   d6d72:	4b02      	ldr	r3, [pc, #8]	; (d6d7c <hal_usart_write+0xc>)
   d6d74:	681b      	ldr	r3, [r3, #0]
   d6d76:	68db      	ldr	r3, [r3, #12]
   d6d78:	9301      	str	r3, [sp, #4]
   d6d7a:	bd08      	pop	{r3, pc}
   d6d7c:	0003023c 	.word	0x0003023c

000d6d80 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6d80:	b508      	push	{r3, lr}
   d6d82:	4b02      	ldr	r3, [pc, #8]	; (d6d8c <hal_usart_available+0xc>)
   d6d84:	681b      	ldr	r3, [r3, #0]
   d6d86:	691b      	ldr	r3, [r3, #16]
   d6d88:	9301      	str	r3, [sp, #4]
   d6d8a:	bd08      	pop	{r3, pc}
   d6d8c:	0003023c 	.word	0x0003023c

000d6d90 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6d90:	b508      	push	{r3, lr}
   d6d92:	4b02      	ldr	r3, [pc, #8]	; (d6d9c <hal_usart_read+0xc>)
   d6d94:	681b      	ldr	r3, [r3, #0]
   d6d96:	695b      	ldr	r3, [r3, #20]
   d6d98:	9301      	str	r3, [sp, #4]
   d6d9a:	bd08      	pop	{r3, pc}
   d6d9c:	0003023c 	.word	0x0003023c

000d6da0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d6da0:	b508      	push	{r3, lr}
   d6da2:	4b02      	ldr	r3, [pc, #8]	; (d6dac <hal_usart_peek+0xc>)
   d6da4:	681b      	ldr	r3, [r3, #0]
   d6da6:	699b      	ldr	r3, [r3, #24]
   d6da8:	9301      	str	r3, [sp, #4]
   d6daa:	bd08      	pop	{r3, pc}
   d6dac:	0003023c 	.word	0x0003023c

000d6db0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d6db0:	b508      	push	{r3, lr}
   d6db2:	4b02      	ldr	r3, [pc, #8]	; (d6dbc <hal_usart_flush+0xc>)
   d6db4:	681b      	ldr	r3, [r3, #0]
   d6db6:	69db      	ldr	r3, [r3, #28]
   d6db8:	9301      	str	r3, [sp, #4]
   d6dba:	bd08      	pop	{r3, pc}
   d6dbc:	0003023c 	.word	0x0003023c

000d6dc0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d6dc0:	b508      	push	{r3, lr}
   d6dc2:	4b02      	ldr	r3, [pc, #8]	; (d6dcc <hal_usart_is_enabled+0xc>)
   d6dc4:	681b      	ldr	r3, [r3, #0]
   d6dc6:	6a1b      	ldr	r3, [r3, #32]
   d6dc8:	9301      	str	r3, [sp, #4]
   d6dca:	bd08      	pop	{r3, pc}
   d6dcc:	0003023c 	.word	0x0003023c

000d6dd0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d6dd0:	b508      	push	{r3, lr}
   d6dd2:	4b02      	ldr	r3, [pc, #8]	; (d6ddc <hal_usart_available_data_for_write+0xc>)
   d6dd4:	681b      	ldr	r3, [r3, #0]
   d6dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6dd8:	9301      	str	r3, [sp, #4]
   d6dda:	bd08      	pop	{r3, pc}
   d6ddc:	0003023c 	.word	0x0003023c

000d6de0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6de0:	b508      	push	{r3, lr}
   d6de2:	4b02      	ldr	r3, [pc, #8]	; (d6dec <HAL_USB_USART_Init+0xc>)
   d6de4:	681b      	ldr	r3, [r3, #0]
   d6de6:	681b      	ldr	r3, [r3, #0]
   d6de8:	9301      	str	r3, [sp, #4]
   d6dea:	bd08      	pop	{r3, pc}
   d6dec:	0003024c 	.word	0x0003024c

000d6df0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6df0:	b508      	push	{r3, lr}
   d6df2:	4b02      	ldr	r3, [pc, #8]	; (d6dfc <HAL_USB_USART_Available_Data+0xc>)
   d6df4:	681b      	ldr	r3, [r3, #0]
   d6df6:	691b      	ldr	r3, [r3, #16]
   d6df8:	9301      	str	r3, [sp, #4]
   d6dfa:	bd08      	pop	{r3, pc}
   d6dfc:	0003024c 	.word	0x0003024c

000d6e00 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6e00:	b508      	push	{r3, lr}
   d6e02:	4b02      	ldr	r3, [pc, #8]	; (d6e0c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6e04:	681b      	ldr	r3, [r3, #0]
   d6e06:	695b      	ldr	r3, [r3, #20]
   d6e08:	9301      	str	r3, [sp, #4]
   d6e0a:	bd08      	pop	{r3, pc}
   d6e0c:	0003024c 	.word	0x0003024c

000d6e10 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6e10:	b508      	push	{r3, lr}
   d6e12:	4b02      	ldr	r3, [pc, #8]	; (d6e1c <HAL_USB_USART_Receive_Data+0xc>)
   d6e14:	681b      	ldr	r3, [r3, #0]
   d6e16:	699b      	ldr	r3, [r3, #24]
   d6e18:	9301      	str	r3, [sp, #4]
   d6e1a:	bd08      	pop	{r3, pc}
   d6e1c:	0003024c 	.word	0x0003024c

000d6e20 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6e20:	b508      	push	{r3, lr}
   d6e22:	4b02      	ldr	r3, [pc, #8]	; (d6e2c <HAL_USB_USART_Send_Data+0xc>)
   d6e24:	681b      	ldr	r3, [r3, #0]
   d6e26:	69db      	ldr	r3, [r3, #28]
   d6e28:	9301      	str	r3, [sp, #4]
   d6e2a:	bd08      	pop	{r3, pc}
   d6e2c:	0003024c 	.word	0x0003024c

000d6e30 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6e30:	b508      	push	{r3, lr}
   d6e32:	4b02      	ldr	r3, [pc, #8]	; (d6e3c <HAL_USB_USART_Flush_Data+0xc>)
   d6e34:	681b      	ldr	r3, [r3, #0]
   d6e36:	6a1b      	ldr	r3, [r3, #32]
   d6e38:	9301      	str	r3, [sp, #4]
   d6e3a:	bd08      	pop	{r3, pc}
   d6e3c:	0003024c 	.word	0x0003024c

000d6e40 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6e40:	b508      	push	{r3, lr}
   d6e42:	4b02      	ldr	r3, [pc, #8]	; (d6e4c <panic_+0xc>)
   d6e44:	681b      	ldr	r3, [r3, #0]
   d6e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6e48:	9301      	str	r3, [sp, #4]
   d6e4a:	bd08      	pop	{r3, pc}
   d6e4c:	00030260 	.word	0x00030260

000d6e50 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d6e50:	b508      	push	{r3, lr}
   d6e52:	4b02      	ldr	r3, [pc, #8]	; (d6e5c <log_message_v+0xc>)
   d6e54:	681b      	ldr	r3, [r3, #0]
   d6e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6e58:	9301      	str	r3, [sp, #4]
   d6e5a:	bd08      	pop	{r3, pc}
   d6e5c:	00030260 	.word	0x00030260

000d6e60 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6e60:	b508      	push	{r3, lr}
   d6e62:	4b02      	ldr	r3, [pc, #8]	; (d6e6c <system_mode+0xc>)
   d6e64:	681b      	ldr	r3, [r3, #0]
   d6e66:	681b      	ldr	r3, [r3, #0]
   d6e68:	9301      	str	r3, [sp, #4]
   d6e6a:	bd08      	pop	{r3, pc}
   d6e6c:	00030220 	.word	0x00030220

000d6e70 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6e70:	b508      	push	{r3, lr}
   d6e72:	4b02      	ldr	r3, [pc, #8]	; (d6e7c <set_system_mode+0xc>)
   d6e74:	681b      	ldr	r3, [r3, #0]
   d6e76:	685b      	ldr	r3, [r3, #4]
   d6e78:	9301      	str	r3, [sp, #4]
   d6e7a:	bd08      	pop	{r3, pc}
   d6e7c:	00030220 	.word	0x00030220

000d6e80 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6e80:	b508      	push	{r3, lr}
   d6e82:	4b02      	ldr	r3, [pc, #8]	; (d6e8c <system_delay_ms+0xc>)
   d6e84:	681b      	ldr	r3, [r3, #0]
   d6e86:	695b      	ldr	r3, [r3, #20]
   d6e88:	9301      	str	r3, [sp, #4]
   d6e8a:	bd08      	pop	{r3, pc}
   d6e8c:	00030220 	.word	0x00030220

000d6e90 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6e90:	b508      	push	{r3, lr}
   d6e92:	4b02      	ldr	r3, [pc, #8]	; (d6e9c <system_thread_set_state+0xc>)
   d6e94:	681b      	ldr	r3, [r3, #0]
   d6e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6e98:	9301      	str	r3, [sp, #4]
   d6e9a:	bd08      	pop	{r3, pc}
   d6e9c:	00030220 	.word	0x00030220

000d6ea0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6ea0:	b508      	push	{r3, lr}
   d6ea2:	4b02      	ldr	r3, [pc, #8]	; (d6eac <application_thread_current+0xc>)
   d6ea4:	681b      	ldr	r3, [r3, #0]
   d6ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6ea8:	9301      	str	r3, [sp, #4]
   d6eaa:	bd08      	pop	{r3, pc}
   d6eac:	00030220 	.word	0x00030220

000d6eb0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6eb0:	b508      	push	{r3, lr}
   d6eb2:	4b02      	ldr	r3, [pc, #8]	; (d6ebc <application_thread_invoke+0xc>)
   d6eb4:	681b      	ldr	r3, [r3, #0]
   d6eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6eb8:	9301      	str	r3, [sp, #4]
   d6eba:	bd08      	pop	{r3, pc}
   d6ebc:	00030220 	.word	0x00030220

000d6ec0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6ec0:	b508      	push	{r3, lr}
   d6ec2:	4b02      	ldr	r3, [pc, #8]	; (d6ecc <system_thread_get_state+0xc>)
   d6ec4:	681b      	ldr	r3, [r3, #0]
   d6ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6ec8:	9301      	str	r3, [sp, #4]
   d6eca:	bd08      	pop	{r3, pc}
   d6ecc:	00030220 	.word	0x00030220

000d6ed0 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d6ed0:	b508      	push	{r3, lr}
   d6ed2:	4b02      	ldr	r3, [pc, #8]	; (d6edc <system_notify_time_changed+0xc>)
   d6ed4:	681b      	ldr	r3, [r3, #0]
   d6ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6ed8:	9301      	str	r3, [sp, #4]
   d6eda:	bd08      	pop	{r3, pc}
   d6edc:	00030220 	.word	0x00030220

000d6ee0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6ee0:	b508      	push	{r3, lr}
   d6ee2:	4b03      	ldr	r3, [pc, #12]	; (d6ef0 <system_ctrl_set_app_request_handler+0x10>)
   d6ee4:	681b      	ldr	r3, [r3, #0]
   d6ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6eea:	9301      	str	r3, [sp, #4]
   d6eec:	bd08      	pop	{r3, pc}
   d6eee:	0000      	.short	0x0000
   d6ef0:	00030220 	.word	0x00030220

000d6ef4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6ef4:	b508      	push	{r3, lr}
   d6ef6:	4b03      	ldr	r3, [pc, #12]	; (d6f04 <system_ctrl_set_result+0x10>)
   d6ef8:	681b      	ldr	r3, [r3, #0]
   d6efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6efe:	9301      	str	r3, [sp, #4]
   d6f00:	bd08      	pop	{r3, pc}
   d6f02:	0000      	.short	0x0000
   d6f04:	00030220 	.word	0x00030220

000d6f08 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d6f08:	b508      	push	{r3, lr}
   d6f0a:	4b03      	ldr	r3, [pc, #12]	; (d6f18 <system_reset+0x10>)
   d6f0c:	681b      	ldr	r3, [r3, #0]
   d6f0e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d6f12:	9301      	str	r3, [sp, #4]
   d6f14:	bd08      	pop	{r3, pc}
   d6f16:	0000      	.short	0x0000
   d6f18:	00030220 	.word	0x00030220

000d6f1c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d6f1c:	b508      	push	{r3, lr}
   d6f1e:	4b02      	ldr	r3, [pc, #8]	; (d6f28 <spark_variable+0xc>)
   d6f20:	681b      	ldr	r3, [r3, #0]
   d6f22:	681b      	ldr	r3, [r3, #0]
   d6f24:	9301      	str	r3, [sp, #4]
   d6f26:	bd08      	pop	{r3, pc}
   d6f28:	00030244 	.word	0x00030244

000d6f2c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d6f2c:	b508      	push	{r3, lr}
   d6f2e:	4b02      	ldr	r3, [pc, #8]	; (d6f38 <spark_function+0xc>)
   d6f30:	681b      	ldr	r3, [r3, #0]
   d6f32:	685b      	ldr	r3, [r3, #4]
   d6f34:	9301      	str	r3, [sp, #4]
   d6f36:	bd08      	pop	{r3, pc}
   d6f38:	00030244 	.word	0x00030244

000d6f3c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6f3c:	b508      	push	{r3, lr}
   d6f3e:	4b02      	ldr	r3, [pc, #8]	; (d6f48 <spark_process+0xc>)
   d6f40:	681b      	ldr	r3, [r3, #0]
   d6f42:	689b      	ldr	r3, [r3, #8]
   d6f44:	9301      	str	r3, [sp, #4]
   d6f46:	bd08      	pop	{r3, pc}
   d6f48:	00030244 	.word	0x00030244

000d6f4c <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6f4c:	b508      	push	{r3, lr}
   d6f4e:	4b02      	ldr	r3, [pc, #8]	; (d6f58 <spark_cloud_flag_connected+0xc>)
   d6f50:	681b      	ldr	r3, [r3, #0]
   d6f52:	695b      	ldr	r3, [r3, #20]
   d6f54:	9301      	str	r3, [sp, #4]
   d6f56:	bd08      	pop	{r3, pc}
   d6f58:	00030244 	.word	0x00030244

000d6f5c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d6f5c:	b508      	push	{r3, lr}
   d6f5e:	4b02      	ldr	r3, [pc, #8]	; (d6f68 <spark_deviceID+0xc>)
   d6f60:	681b      	ldr	r3, [r3, #0]
   d6f62:	69db      	ldr	r3, [r3, #28]
   d6f64:	9301      	str	r3, [sp, #4]
   d6f66:	bd08      	pop	{r3, pc}
   d6f68:	00030244 	.word	0x00030244

000d6f6c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6f6c:	b508      	push	{r3, lr}
   d6f6e:	4b02      	ldr	r3, [pc, #8]	; (d6f78 <spark_send_event+0xc>)
   d6f70:	681b      	ldr	r3, [r3, #0]
   d6f72:	6a1b      	ldr	r3, [r3, #32]
   d6f74:	9301      	str	r3, [sp, #4]
   d6f76:	bd08      	pop	{r3, pc}
   d6f78:	00030244 	.word	0x00030244

000d6f7c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d6f7c:	b508      	push	{r3, lr}
   d6f7e:	4b02      	ldr	r3, [pc, #8]	; (d6f88 <spark_subscribe+0xc>)
   d6f80:	681b      	ldr	r3, [r3, #0]
   d6f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6f84:	9301      	str	r3, [sp, #4]
   d6f86:	bd08      	pop	{r3, pc}
   d6f88:	00030244 	.word	0x00030244

000d6f8c <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d6f8c:	b508      	push	{r3, lr}
   d6f8e:	4b02      	ldr	r3, [pc, #8]	; (d6f98 <spark_sync_time+0xc>)
   d6f90:	681b      	ldr	r3, [r3, #0]
   d6f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6f94:	9301      	str	r3, [sp, #4]
   d6f96:	bd08      	pop	{r3, pc}
   d6f98:	00030244 	.word	0x00030244

000d6f9c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6f9c:	b508      	push	{r3, lr}
   d6f9e:	4b02      	ldr	r3, [pc, #8]	; (d6fa8 <spark_sync_time_pending+0xc>)
   d6fa0:	681b      	ldr	r3, [r3, #0]
   d6fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6fa4:	9301      	str	r3, [sp, #4]
   d6fa6:	bd08      	pop	{r3, pc}
   d6fa8:	00030244 	.word	0x00030244

000d6fac <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d6fac:	b508      	push	{r3, lr}
   d6fae:	4b02      	ldr	r3, [pc, #8]	; (d6fb8 <spark_sync_time_last+0xc>)
   d6fb0:	681b      	ldr	r3, [r3, #0]
   d6fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6fb4:	9301      	str	r3, [sp, #4]
   d6fb6:	bd08      	pop	{r3, pc}
   d6fb8:	00030244 	.word	0x00030244

000d6fbc <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d6fbc:	b508      	push	{r3, lr}
   d6fbe:	4b02      	ldr	r3, [pc, #8]	; (d6fc8 <spark_set_connection_property+0xc>)
   d6fc0:	681b      	ldr	r3, [r3, #0]
   d6fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6fc4:	9301      	str	r3, [sp, #4]
   d6fc6:	bd08      	pop	{r3, pc}
   d6fc8:	00030244 	.word	0x00030244

000d6fcc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6fcc:	b508      	push	{r3, lr}
   d6fce:	4b02      	ldr	r3, [pc, #8]	; (d6fd8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6fd0:	681b      	ldr	r3, [r3, #0]
   d6fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6fd4:	9301      	str	r3, [sp, #4]
   d6fd6:	bd08      	pop	{r3, pc}
   d6fd8:	00030244 	.word	0x00030244

000d6fdc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6fdc:	b508      	push	{r3, lr}
   d6fde:	4b02      	ldr	r3, [pc, #8]	; (d6fe8 <network_connect+0xc>)
   d6fe0:	681b      	ldr	r3, [r3, #0]
   d6fe2:	685b      	ldr	r3, [r3, #4]
   d6fe4:	9301      	str	r3, [sp, #4]
   d6fe6:	bd08      	pop	{r3, pc}
   d6fe8:	00030240 	.word	0x00030240

000d6fec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6fec:	b508      	push	{r3, lr}
   d6fee:	4b02      	ldr	r3, [pc, #8]	; (d6ff8 <network_connecting+0xc>)
   d6ff0:	681b      	ldr	r3, [r3, #0]
   d6ff2:	689b      	ldr	r3, [r3, #8]
   d6ff4:	9301      	str	r3, [sp, #4]
   d6ff6:	bd08      	pop	{r3, pc}
   d6ff8:	00030240 	.word	0x00030240

000d6ffc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6ffc:	b508      	push	{r3, lr}
   d6ffe:	4b02      	ldr	r3, [pc, #8]	; (d7008 <network_disconnect+0xc>)
   d7000:	681b      	ldr	r3, [r3, #0]
   d7002:	68db      	ldr	r3, [r3, #12]
   d7004:	9301      	str	r3, [sp, #4]
   d7006:	bd08      	pop	{r3, pc}
   d7008:	00030240 	.word	0x00030240

000d700c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d700c:	b508      	push	{r3, lr}
   d700e:	4b02      	ldr	r3, [pc, #8]	; (d7018 <network_ready+0xc>)
   d7010:	681b      	ldr	r3, [r3, #0]
   d7012:	691b      	ldr	r3, [r3, #16]
   d7014:	9301      	str	r3, [sp, #4]
   d7016:	bd08      	pop	{r3, pc}
   d7018:	00030240 	.word	0x00030240

000d701c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d701c:	b508      	push	{r3, lr}
   d701e:	4b02      	ldr	r3, [pc, #8]	; (d7028 <network_on+0xc>)
   d7020:	681b      	ldr	r3, [r3, #0]
   d7022:	695b      	ldr	r3, [r3, #20]
   d7024:	9301      	str	r3, [sp, #4]
   d7026:	bd08      	pop	{r3, pc}
   d7028:	00030240 	.word	0x00030240

000d702c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d702c:	b508      	push	{r3, lr}
   d702e:	4b02      	ldr	r3, [pc, #8]	; (d7038 <network_off+0xc>)
   d7030:	681b      	ldr	r3, [r3, #0]
   d7032:	699b      	ldr	r3, [r3, #24]
   d7034:	9301      	str	r3, [sp, #4]
   d7036:	bd08      	pop	{r3, pc}
   d7038:	00030240 	.word	0x00030240

000d703c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d703c:	b508      	push	{r3, lr}
   d703e:	4b02      	ldr	r3, [pc, #8]	; (d7048 <network_listen+0xc>)
   d7040:	681b      	ldr	r3, [r3, #0]
   d7042:	69db      	ldr	r3, [r3, #28]
   d7044:	9301      	str	r3, [sp, #4]
   d7046:	bd08      	pop	{r3, pc}
   d7048:	00030240 	.word	0x00030240

000d704c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d704c:	b508      	push	{r3, lr}
   d704e:	4b02      	ldr	r3, [pc, #8]	; (d7058 <network_listening+0xc>)
   d7050:	681b      	ldr	r3, [r3, #0]
   d7052:	6a1b      	ldr	r3, [r3, #32]
   d7054:	9301      	str	r3, [sp, #4]
   d7056:	bd08      	pop	{r3, pc}
   d7058:	00030240 	.word	0x00030240

000d705c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d705c:	b508      	push	{r3, lr}
   d705e:	4b02      	ldr	r3, [pc, #8]	; (d7068 <network_set_listen_timeout+0xc>)
   d7060:	681b      	ldr	r3, [r3, #0]
   d7062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7064:	9301      	str	r3, [sp, #4]
   d7066:	bd08      	pop	{r3, pc}
   d7068:	00030240 	.word	0x00030240

000d706c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d706c:	b508      	push	{r3, lr}
   d706e:	4b02      	ldr	r3, [pc, #8]	; (d7078 <network_get_listen_timeout+0xc>)
   d7070:	681b      	ldr	r3, [r3, #0]
   d7072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7074:	9301      	str	r3, [sp, #4]
   d7076:	bd08      	pop	{r3, pc}
   d7078:	00030240 	.word	0x00030240

000d707c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d707c:	b508      	push	{r3, lr}
   d707e:	4b02      	ldr	r3, [pc, #8]	; (d7088 <malloc+0xc>)
   d7080:	681b      	ldr	r3, [r3, #0]
   d7082:	681b      	ldr	r3, [r3, #0]
   d7084:	9301      	str	r3, [sp, #4]
   d7086:	bd08      	pop	{r3, pc}
   d7088:	0003021c 	.word	0x0003021c

000d708c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d708c:	b508      	push	{r3, lr}
   d708e:	4b02      	ldr	r3, [pc, #8]	; (d7098 <free+0xc>)
   d7090:	681b      	ldr	r3, [r3, #0]
   d7092:	685b      	ldr	r3, [r3, #4]
   d7094:	9301      	str	r3, [sp, #4]
   d7096:	bd08      	pop	{r3, pc}
   d7098:	0003021c 	.word	0x0003021c

000d709c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d709c:	b508      	push	{r3, lr}
   d709e:	4b02      	ldr	r3, [pc, #8]	; (d70a8 <realloc+0xc>)
   d70a0:	681b      	ldr	r3, [r3, #0]
   d70a2:	689b      	ldr	r3, [r3, #8]
   d70a4:	9301      	str	r3, [sp, #4]
   d70a6:	bd08      	pop	{r3, pc}
   d70a8:	0003021c 	.word	0x0003021c

000d70ac <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d70ac:	b508      	push	{r3, lr}
   d70ae:	4b02      	ldr	r3, [pc, #8]	; (d70b8 <siprintf+0xc>)
   d70b0:	681b      	ldr	r3, [r3, #0]
   d70b2:	691b      	ldr	r3, [r3, #16]
   d70b4:	9301      	str	r3, [sp, #4]
   d70b6:	bd08      	pop	{r3, pc}
   d70b8:	0003021c 	.word	0x0003021c

000d70bc <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d70bc:	b508      	push	{r3, lr}
   d70be:	4b02      	ldr	r3, [pc, #8]	; (d70c8 <snprintf+0xc>)
   d70c0:	681b      	ldr	r3, [r3, #0]
   d70c2:	69db      	ldr	r3, [r3, #28]
   d70c4:	9301      	str	r3, [sp, #4]
   d70c6:	bd08      	pop	{r3, pc}
   d70c8:	0003021c 	.word	0x0003021c

000d70cc <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d70cc:	b508      	push	{r3, lr}
   d70ce:	4b02      	ldr	r3, [pc, #8]	; (d70d8 <abort+0xc>)
   d70d0:	681b      	ldr	r3, [r3, #0]
   d70d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d70d4:	9301      	str	r3, [sp, #4]
   d70d6:	bd08      	pop	{r3, pc}
   d70d8:	0003021c 	.word	0x0003021c

000d70dc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d70dc:	b508      	push	{r3, lr}
   d70de:	4b02      	ldr	r3, [pc, #8]	; (d70e8 <_malloc_r+0xc>)
   d70e0:	681b      	ldr	r3, [r3, #0]
   d70e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d70e4:	9301      	str	r3, [sp, #4]
   d70e6:	bd08      	pop	{r3, pc}
   d70e8:	0003021c 	.word	0x0003021c

000d70ec <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d70ec:	b508      	push	{r3, lr}
   d70ee:	4b02      	ldr	r3, [pc, #8]	; (d70f8 <__errno+0xc>)
   d70f0:	681b      	ldr	r3, [r3, #0]
   d70f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d70f4:	9301      	str	r3, [sp, #4]
   d70f6:	bd08      	pop	{r3, pc}
   d70f8:	0003021c 	.word	0x0003021c

000d70fc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d70fc:	b508      	push	{r3, lr}
   d70fe:	4b02      	ldr	r3, [pc, #8]	; (d7108 <newlib_impure_ptr_callback+0xc>)
   d7100:	681b      	ldr	r3, [r3, #0]
   d7102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7104:	9301      	str	r3, [sp, #4]
   d7106:	bd08      	pop	{r3, pc}
   d7108:	0003021c 	.word	0x0003021c

000d710c <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d710c:	b508      	push	{r3, lr}
   d710e:	4b02      	ldr	r3, [pc, #8]	; (d7118 <strftime+0xc>)
   d7110:	681b      	ldr	r3, [r3, #0]
   d7112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7114:	9301      	str	r3, [sp, #4]
   d7116:	bd08      	pop	{r3, pc}
   d7118:	0003021c 	.word	0x0003021c

000d711c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d711c:	b508      	push	{r3, lr}
   d711e:	4b02      	ldr	r3, [pc, #8]	; (d7128 <localtime_r+0xc>)
   d7120:	681b      	ldr	r3, [r3, #0]
   d7122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7124:	9301      	str	r3, [sp, #4]
   d7126:	bd08      	pop	{r3, pc}
   d7128:	0003021c 	.word	0x0003021c

000d712c <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d712c:	b508      	push	{r3, lr}
   d712e:	4b02      	ldr	r3, [pc, #8]	; (d7138 <gmtime_r+0xc>)
   d7130:	681b      	ldr	r3, [r3, #0]
   d7132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7134:	9301      	str	r3, [sp, #4]
   d7136:	bd08      	pop	{r3, pc}
   d7138:	0003021c 	.word	0x0003021c

000d713c <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d713c:	b508      	push	{r3, lr}
   d713e:	4b02      	ldr	r3, [pc, #8]	; (d7148 <mktime+0xc>)
   d7140:	681b      	ldr	r3, [r3, #0]
   d7142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7144:	9301      	str	r3, [sp, #4]
   d7146:	bd08      	pop	{r3, pc}
   d7148:	0003021c 	.word	0x0003021c

000d714c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d714c:	2100      	movs	r1, #0
   d714e:	f7ff be97 	b.w	d6e80 <system_delay_ms>

000d7152 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7152:	b510      	push	{r4, lr}
      if (_M_empty())
   d7154:	6883      	ldr	r3, [r0, #8]
   d7156:	4604      	mov	r4, r0
   d7158:	b90b      	cbnz	r3, d715e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d715a:	f001 fb3c 	bl	d87d6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d715e:	68c3      	ldr	r3, [r0, #12]
   d7160:	4798      	blx	r3
      if (_M_manager)
   d7162:	68a3      	ldr	r3, [r4, #8]
   d7164:	b11b      	cbz	r3, d716e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7166:	2203      	movs	r2, #3
   d7168:	4621      	mov	r1, r4
   d716a:	4620      	mov	r0, r4
   d716c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d716e:	4620      	mov	r0, r4
   d7170:	2110      	movs	r1, #16
}
   d7172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d7176:	f001 bb28 	b.w	d87ca <_ZdlPvj>

000d717a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d717a:	b510      	push	{r4, lr}
          _M_dispose();
   d717c:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d717e:	4604      	mov	r4, r0
          _M_dispose();
   d7180:	689b      	ldr	r3, [r3, #8]
   d7182:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7184:	68a3      	ldr	r3, [r4, #8]
   d7186:	3b01      	subs	r3, #1
   d7188:	60a3      	str	r3, [r4, #8]
   d718a:	b92b      	cbnz	r3, d7198 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d718c:	6823      	ldr	r3, [r4, #0]
   d718e:	4620      	mov	r0, r4
   d7190:	68db      	ldr	r3, [r3, #12]
    }
   d7192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d7196:	4718      	bx	r3
    }
   d7198:	bd10      	pop	{r4, pc}

000d719a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d719a:	b510      	push	{r4, lr}
   d719c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d719e:	6800      	ldr	r0, [r0, #0]
   d71a0:	b108      	cbz	r0, d71a6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d71a2:	f7ff fcb5 	bl	d6b10 <os_mutex_recursive_destroy>
    }
   d71a6:	4620      	mov	r0, r4
   d71a8:	bd10      	pop	{r4, pc}

000d71aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d71aa:	680b      	ldr	r3, [r1, #0]
   d71ac:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d71ae:	b113      	cbz	r3, d71b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d71b0:	685a      	ldr	r2, [r3, #4]
   d71b2:	3201      	adds	r2, #1
   d71b4:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d71b6:	4770      	bx	lr

000d71b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d71b8:	b510      	push	{r4, lr}
   d71ba:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d71bc:	6800      	ldr	r0, [r0, #0]
   d71be:	b128      	cbz	r0, d71cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d71c0:	6843      	ldr	r3, [r0, #4]
   d71c2:	3b01      	subs	r3, #1
   d71c4:	6043      	str	r3, [r0, #4]
   d71c6:	b90b      	cbnz	r3, d71cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d71c8:	f7ff ffd7 	bl	d717a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d71cc:	4620      	mov	r0, r4
   d71ce:	bd10      	pop	{r4, pc}

000d71d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d71d0:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d71d2:	4c06      	ldr	r4, [pc, #24]	; (d71ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d71d4:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d71d6:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d71d8:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d71da:	f7ff fc91 	bl	d6b00 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d71de:	4620      	mov	r0, r4
   d71e0:	4a03      	ldr	r2, [pc, #12]	; (d71f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d71e2:	4904      	ldr	r1, [pc, #16]	; (d71f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d71e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d71e8:	f001 baea 	b.w	d87c0 <__aeabi_atexit>
   d71ec:	2003e60c 	.word	0x2003e60c
   d71f0:	2003dea0 	.word	0x2003dea0
   d71f4:	000d719b 	.word	0x000d719b

000d71f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d71f8:	4770      	bx	lr

000d71fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d71fa:	2000      	movs	r0, #0
   d71fc:	4770      	bx	lr

000d71fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d71fe:	b510      	push	{r4, lr}
   d7200:	2110      	movs	r1, #16
   d7202:	4604      	mov	r4, r0
   d7204:	f001 fae1 	bl	d87ca <_ZdlPvj>
   d7208:	4620      	mov	r0, r4
   d720a:	bd10      	pop	{r4, pc}

000d720c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d720c:	b508      	push	{r3, lr}
      { delete this; }
   d720e:	f7ff fff6 	bl	d71fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7212:	bd08      	pop	{r3, pc}

000d7214 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d7214:	b530      	push	{r4, r5, lr}
        type_(type) {
   d7216:	2200      	movs	r2, #0
   d7218:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d721c:	6002      	str	r2, [r0, #0]
   d721e:	8084      	strh	r4, [r0, #4]
   d7220:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7222:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7224:	680c      	ldr	r4, [r1, #0]
   d7226:	8085      	strh	r5, [r0, #4]
   d7228:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d722a:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d722c:	bd30      	pop	{r4, r5, pc}

000d722e <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d722e:	b510      	push	{r4, lr}
   d7230:	4604      	mov	r4, r0
    free((void*)msg_);
   d7232:	6800      	ldr	r0, [r0, #0]
   d7234:	f7ff ff2a 	bl	d708c <free>
}
   d7238:	4620      	mov	r0, r4
   d723a:	bd10      	pop	{r4, pc}

000d723c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d723c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d723e:	68c4      	ldr	r4, [r0, #12]
   d7240:	b1f4      	cbz	r4, d7280 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d7242:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7244:	2b02      	cmp	r3, #2
   d7246:	d103      	bne.n	d7250 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d7248:	f104 000c 	add.w	r0, r4, #12
   d724c:	f7ff ffef 	bl	d722e <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d7250:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d7252:	b135      	cbz	r5, d7262 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d7254:	4628      	mov	r0, r5
   d7256:	f7fd f867 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
   d725a:	2110      	movs	r1, #16
   d725c:	4628      	mov	r0, r5
   d725e:	f001 fab4 	bl	d87ca <_ZdlPvj>
   d7262:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7264:	b135      	cbz	r5, d7274 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d7266:	4628      	mov	r0, r5
   d7268:	f7fd f85e 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
   d726c:	2110      	movs	r1, #16
   d726e:	4628      	mov	r0, r5
   d7270:	f001 faab 	bl	d87ca <_ZdlPvj>
   d7274:	4620      	mov	r0, r4
   d7276:	2114      	movs	r1, #20
   d7278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d727c:	f001 baa5 	b.w	d87ca <_ZdlPvj>
   d7280:	bd38      	pop	{r3, r4, r5, pc}

000d7282 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d7282:	b510      	push	{r4, lr}
   d7284:	b088      	sub	sp, #32
   d7286:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d7288:	4668      	mov	r0, sp
   d728a:	f000 fd54 	bl	d7d36 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d728e:	4669      	mov	r1, sp
   d7290:	a804      	add	r0, sp, #16
   d7292:	f000 fd73 	bl	d7d7c <_ZN6StringC1ERKS_>
   d7296:	a804      	add	r0, sp, #16
   d7298:	47a0      	blx	r4
   d729a:	4604      	mov	r4, r0
   d729c:	a804      	add	r0, sp, #16
   d729e:	f000 fcff 	bl	d7ca0 <_ZN6StringD1Ev>
    String p(param);
   d72a2:	4668      	mov	r0, sp
   d72a4:	f000 fcfc 	bl	d7ca0 <_ZN6StringD1Ev>
}
   d72a8:	4620      	mov	r0, r4
   d72aa:	b008      	add	sp, #32
   d72ac:	bd10      	pop	{r4, pc}

000d72ae <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d72ae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d72b0:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d72b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d72b6:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d72b8:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d72ba:	461a      	mov	r2, r3
   d72bc:	4669      	mov	r1, sp
   d72be:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d72c0:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d72c4:	f8ad 4000 	strh.w	r4, [sp]
   d72c8:	f7ff fe30 	bl	d6f2c <spark_function>
}
   d72cc:	b004      	add	sp, #16
   d72ce:	bd10      	pop	{r4, pc}

000d72d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d72d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d72d2:	460e      	mov	r6, r1
   d72d4:	4604      	mov	r4, r0
   d72d6:	f856 3b04 	ldr.w	r3, [r6], #4
   d72da:	9300      	str	r3, [sp, #0]
   d72dc:	460d      	mov	r5, r1
   d72de:	a801      	add	r0, sp, #4
   d72e0:	4631      	mov	r1, r6
   d72e2:	f7ff ff62 	bl	d71aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d72e6:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d72e8:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d72ea:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d72ec:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d72ee:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d72f0:	2300      	movs	r3, #0
   d72f2:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d72f4:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d72f6:	f7ff ff5f 	bl	d71b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d72fa:	4630      	mov	r0, r6
   d72fc:	f7ff ff5c 	bl	d71b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d7300:	4628      	mov	r0, r5
   d7302:	2108      	movs	r1, #8
   d7304:	f001 fa61 	bl	d87ca <_ZdlPvj>
        return p;
    }
   d7308:	4620      	mov	r0, r4
   d730a:	b002      	add	sp, #8
   d730c:	bd70      	pop	{r4, r5, r6, pc}

000d730e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d730e:	b513      	push	{r0, r1, r4, lr}
   d7310:	460b      	mov	r3, r1
   d7312:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7314:	e9d0 0100 	ldrd	r0, r1, [r0]
   d7318:	466c      	mov	r4, sp
   d731a:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d731e:	e893 0003 	ldmia.w	r3, {r0, r1}
   d7322:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7326:	e894 0003 	ldmia.w	r4, {r0, r1}
   d732a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d732e:	b002      	add	sp, #8
   d7330:	bd10      	pop	{r4, pc}

000d7332 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d7332:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7334:	b510      	push	{r4, lr}
      if (_M_empty())
   d7336:	b90a      	cbnz	r2, d733c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7338:	f001 fa4d 	bl	d87d6 <_ZSt25__throw_bad_function_callv>
    }
   d733c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7340:	68c3      	ldr	r3, [r0, #12]
   d7342:	4718      	bx	r3

000d7344 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7344:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7346:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d7348:	f100 0110 	add.w	r1, r0, #16
   d734c:	f7ff fff1 	bl	d7332 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d7350:	bd08      	pop	{r3, pc}

000d7352 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d7352:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7354:	b510      	push	{r4, lr}
      if (_M_empty())
   d7356:	b90a      	cbnz	r2, d735c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7358:	f001 fa3d 	bl	d87d6 <_ZSt25__throw_bad_function_callv>
    }
   d735c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7360:	68c3      	ldr	r3, [r0, #12]
   d7362:	4718      	bx	r3

000d7364 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7364:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7366:	6800      	ldr	r0, [r0, #0]
   d7368:	f100 0110 	add.w	r1, r0, #16
   d736c:	f7ff fff1 	bl	d7352 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d7370:	bd08      	pop	{r3, pc}
	...

000d7374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d7374:	b538      	push	{r3, r4, r5, lr}
   d7376:	2300      	movs	r3, #0
   d7378:	4604      	mov	r4, r0
   d737a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d737c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d737e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7380:	f7fc fe89 	bl	d4096 <_Znwj>
   d7384:	b128      	cbz	r0, d7392 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d7386:	2301      	movs	r3, #1
   d7388:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d738c:	4b02      	ldr	r3, [pc, #8]	; (d7398 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d738e:	6003      	str	r3, [r0, #0]
   d7390:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7392:	6020      	str	r0, [r4, #0]
	}
   d7394:	4620      	mov	r0, r4
   d7396:	bd38      	pop	{r3, r4, r5, pc}
   d7398:	000dbdd0 	.word	0x000dbdd0

000d739c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d739c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d739e:	2300      	movs	r3, #0
   d73a0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d73a2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d73a4:	4604      	mov	r4, r0
   d73a6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d73a8:	b12b      	cbz	r3, d73b6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d73aa:	2202      	movs	r2, #2
   d73ac:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d73ae:	68eb      	ldr	r3, [r5, #12]
   d73b0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d73b2:	68ab      	ldr	r3, [r5, #8]
   d73b4:	60a3      	str	r3, [r4, #8]
    }
   d73b6:	4620      	mov	r0, r4
   d73b8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d73bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d73bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d73be:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d73c0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d73c2:	4668      	mov	r0, sp
   d73c4:	f7ff ff26 	bl	d7214 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d73c8:	f04f 0302 	mov.w	r3, #2
   d73cc:	e8d4 2f4f 	ldrexb	r2, [r4]
   d73d0:	2a00      	cmp	r2, #0
   d73d2:	d103      	bne.n	d73dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d73d4:	e8c4 3f41 	strexb	r1, r3, [r4]
   d73d8:	2900      	cmp	r1, #0
   d73da:	d1f7      	bne.n	d73cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d73dc:	d125      	bne.n	d742a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d73de:	f104 050c 	add.w	r5, r4, #12
   d73e2:	4669      	mov	r1, sp
   d73e4:	4628      	mov	r0, r5
   d73e6:	f7ff ff15 	bl	d7214 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d73ea:	f3bf 8f5b 	dmb	ish
   d73ee:	2301      	movs	r3, #1
   d73f0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d73f2:	2000      	movs	r0, #0
   d73f4:	f104 0308 	add.w	r3, r4, #8
   d73f8:	f3bf 8f5b 	dmb	ish
   d73fc:	e853 6f00 	ldrex	r6, [r3]
   d7400:	e843 0200 	strex	r2, r0, [r3]
   d7404:	2a00      	cmp	r2, #0
   d7406:	d1f9      	bne.n	d73fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d7408:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d740c:	b16e      	cbz	r6, d742a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d740e:	f7ff fd47 	bl	d6ea0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7412:	b178      	cbz	r0, d7434 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7414:	4629      	mov	r1, r5
   d7416:	4630      	mov	r0, r6
   d7418:	f7ff ff8b 	bl	d7332 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d741c:	4630      	mov	r0, r6
   d741e:	f7fc ff83 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d7422:	2110      	movs	r1, #16
   d7424:	4630      	mov	r0, r6
   d7426:	f001 f9d0 	bl	d87ca <_ZdlPvj>
        p_->setError(std::move(error));
   d742a:	4668      	mov	r0, sp
   d742c:	f7ff feff 	bl	d722e <_ZN8particle5ErrorD1Ev>
    }
   d7430:	b009      	add	sp, #36	; 0x24
   d7432:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7434:	4631      	mov	r1, r6
   d7436:	a802      	add	r0, sp, #8
   d7438:	f7ff ffb0 	bl	d739c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d743c:	68e0      	ldr	r0, [r4, #12]
   d743e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7442:	b108      	cbz	r0, d7448 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d7444:	f002 f89c 	bl	d9580 <strdup>
        type_(type) {
   d7448:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d744a:	2010      	movs	r0, #16
   d744c:	f8ad 501c 	strh.w	r5, [sp, #28]
   d7450:	f7fc fe21 	bl	d4096 <_Znwj>
   d7454:	4605      	mov	r5, r0
   d7456:	b1e8      	cbz	r0, d7494 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d7458:	2700      	movs	r7, #0
   d745a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d745c:	2018      	movs	r0, #24
   d745e:	f7fc fe1a 	bl	d4096 <_Znwj>
   d7462:	4604      	mov	r4, r0
   d7464:	b188      	cbz	r0, d748a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d7466:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d7468:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d746a:	a802      	add	r0, sp, #8
   d746c:	f7ff ff4f 	bl	d730e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7470:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7472:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7474:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7476:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7478:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d747a:	a906      	add	r1, sp, #24
   d747c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d747e:	60e3      	str	r3, [r4, #12]
   d7480:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d7484:	9205      	str	r2, [sp, #20]
   d7486:	f7ff fec5 	bl	d7214 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d748a:	4b08      	ldr	r3, [pc, #32]	; (d74ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d748c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d748e:	4b08      	ldr	r3, [pc, #32]	; (d74b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7490:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d7492:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d7494:	a806      	add	r0, sp, #24
   d7496:	f7ff feca 	bl	d722e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d749a:	a802      	add	r0, sp, #8
   d749c:	f7fc ff44 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d74a0:	2200      	movs	r2, #0
   d74a2:	4629      	mov	r1, r5
   d74a4:	4803      	ldr	r0, [pc, #12]	; (d74b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d74a6:	f7ff fd03 	bl	d6eb0 <application_thread_invoke>
   d74aa:	e7b7      	b.n	d741c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d74ac:	000d7345 	.word	0x000d7345
   d74b0:	000d75dd 	.word	0x000d75dd
   d74b4:	000d7153 	.word	0x000d7153

000d74b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d74b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d74bc:	b08a      	sub	sp, #40	; 0x28
   d74be:	4605      	mov	r5, r0
   d74c0:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d74c4:	460c      	mov	r4, r1
   d74c6:	4617      	mov	r7, r2
   d74c8:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d74ca:	f7ff fd3f 	bl	d6f4c <spark_cloud_flag_connected>
   d74ce:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d74d0:	4682      	mov	sl, r0
   d74d2:	bb38      	cbnz	r0, d7524 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d74d4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d74d8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d74da:	a905      	add	r1, sp, #20
   d74dc:	4630      	mov	r0, r6
   d74de:	f8ad 3018 	strh.w	r3, [sp, #24]
   d74e2:	f7ff fe97 	bl	d7214 <_ZN8particle5ErrorC1EOS0_>
   d74e6:	2014      	movs	r0, #20
   d74e8:	f7fc fdd5 	bl	d4096 <_Znwj>
   d74ec:	4604      	mov	r4, r0
   d74ee:	b148      	cbz	r0, d7504 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d74f0:	2302      	movs	r3, #2
   d74f2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d74f4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d74f6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d74fa:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d74fc:	4631      	mov	r1, r6
   d74fe:	300c      	adds	r0, #12
   d7500:	f7ff fe88 	bl	d7214 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7504:	4628      	mov	r0, r5
	: __shared_count(__p)
   d7506:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7508:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d750c:	f7ff ff32 	bl	d7374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7510:	4630      	mov	r0, r6
   d7512:	f7ff fe8c 	bl	d722e <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d7516:	a805      	add	r0, sp, #20
   d7518:	f7ff fe89 	bl	d722e <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d751c:	4628      	mov	r0, r5
   d751e:	b00a      	add	sp, #40	; 0x28
   d7520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7524:	230c      	movs	r3, #12
   d7526:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d752a:	2014      	movs	r0, #20
   d752c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d7530:	9307      	str	r3, [sp, #28]
   d7532:	f7fc fdb0 	bl	d4096 <_Znwj>
   d7536:	4601      	mov	r1, r0
   d7538:	b128      	cbz	r0, d7546 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d753a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d753e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7542:	f880 a001 	strb.w	sl, [r0, #1]
   d7546:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7548:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d754a:	f7ff ff13 	bl	d7374 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d754e:	4b22      	ldr	r3, [pc, #136]	; (d75d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d7550:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d7552:	2008      	movs	r0, #8
   d7554:	f7fc fd9f 	bl	d4096 <_Znwj>
   d7558:	4682      	mov	sl, r0
   d755a:	b128      	cbz	r0, d7568 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d755c:	9b03      	ldr	r3, [sp, #12]
   d755e:	f840 3b04 	str.w	r3, [r0], #4
   d7562:	a904      	add	r1, sp, #16
   d7564:	f7ff fe21 	bl	d71aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7568:	9600      	str	r6, [sp, #0]
   d756a:	fa5f f389 	uxtb.w	r3, r9
   d756e:	4642      	mov	r2, r8
   d7570:	4639      	mov	r1, r7
   d7572:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d7574:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7578:	f7ff fcf8 	bl	d6f6c <spark_send_event>
   d757c:	b9b8      	cbnz	r0, d75ae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d757e:	9b03      	ldr	r3, [sp, #12]
   d7580:	785b      	ldrb	r3, [r3, #1]
   d7582:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d7586:	b993      	cbnz	r3, d75ae <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d7588:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d758c:	a905      	add	r1, sp, #20
   d758e:	a803      	add	r0, sp, #12
   d7590:	9205      	str	r2, [sp, #20]
   d7592:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7596:	f7ff ff11 	bl	d73bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d759a:	a805      	add	r0, sp, #20
   d759c:	f7ff fe47 	bl	d722e <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d75a0:	a805      	add	r0, sp, #20
   d75a2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d75a4:	f7ff fe94 	bl	d72d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d75a8:	a806      	add	r0, sp, #24
   d75aa:	f7ff fe05 	bl	d71b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d75ae:	9b03      	ldr	r3, [sp, #12]
   d75b0:	9305      	str	r3, [sp, #20]
   d75b2:	a904      	add	r1, sp, #16
   d75b4:	a806      	add	r0, sp, #24
   d75b6:	f7ff fdf8 	bl	d71aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d75ba:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d75bc:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d75be:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d75c0:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d75c2:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d75c4:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d75c6:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d75c8:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d75ca:	f7ff fdf5 	bl	d71b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d75ce:	a804      	add	r0, sp, #16
   d75d0:	f7ff fdf2 	bl	d71b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d75d4:	e7a2      	b.n	d751c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d75d6:	bf00      	nop
   d75d8:	000d76a1 	.word	0x000d76a1

000d75dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d75dc:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d75de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d75e0:	4605      	mov	r5, r0
	  switch (__op)
   d75e2:	d007      	beq.n	d75f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d75e4:	2a03      	cmp	r2, #3
   d75e6:	d018      	beq.n	d761a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d75e8:	2a01      	cmp	r2, #1
   d75ea:	d101      	bne.n	d75f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d75ec:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d75ee:	6003      	str	r3, [r0, #0]
	}
   d75f0:	2000      	movs	r0, #0
   d75f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d75f4:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d75f6:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d75f8:	f7fc fd4d 	bl	d4096 <_Znwj>
   d75fc:	4604      	mov	r4, r0
   d75fe:	b150      	cbz	r0, d7616 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7600:	4631      	mov	r1, r6
   d7602:	f7ff fecb 	bl	d739c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d7606:	6930      	ldr	r0, [r6, #16]
   d7608:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d760c:	b108      	cbz	r0, d7612 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d760e:	f001 ffb7 	bl	d9580 <strdup>
        type_(type) {
   d7612:	6120      	str	r0, [r4, #16]
   d7614:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d7616:	602c      	str	r4, [r5, #0]
	}
   d7618:	e7ea      	b.n	d75f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d761a:	6804      	ldr	r4, [r0, #0]
   d761c:	2c00      	cmp	r4, #0
   d761e:	d0e7      	beq.n	d75f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d7620:	f104 0010 	add.w	r0, r4, #16
   d7624:	f7ff fe03 	bl	d722e <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d7628:	4620      	mov	r0, r4
   d762a:	f7fc fe7d 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d762e:	2118      	movs	r1, #24
   d7630:	4620      	mov	r0, r4
   d7632:	f001 f8ca 	bl	d87ca <_ZdlPvj>
   d7636:	e7db      	b.n	d75f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d7638 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d7638:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d763a:	2300      	movs	r3, #0
   d763c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d763e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d7640:	4604      	mov	r4, r0
   d7642:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d7644:	b12b      	cbz	r3, d7652 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7646:	2202      	movs	r2, #2
   d7648:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d764a:	68eb      	ldr	r3, [r5, #12]
   d764c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d764e:	68ab      	ldr	r3, [r5, #8]
   d7650:	60a3      	str	r3, [r4, #8]
    }
   d7652:	4620      	mov	r0, r4
   d7654:	bd38      	pop	{r3, r4, r5, pc}

000d7656 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d7656:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7658:	b570      	push	{r4, r5, r6, lr}
   d765a:	4604      	mov	r4, r0
	  switch (__op)
   d765c:	d007      	beq.n	d766e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d765e:	2a03      	cmp	r2, #3
   d7660:	d012      	beq.n	d7688 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d7662:	2a01      	cmp	r2, #1
   d7664:	d101      	bne.n	d766a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d7666:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7668:	6003      	str	r3, [r0, #0]
	}
   d766a:	2000      	movs	r0, #0
   d766c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d766e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d7670:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d7672:	f7fc fd10 	bl	d4096 <_Znwj>
   d7676:	4605      	mov	r5, r0
   d7678:	b120      	cbz	r0, d7684 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d767a:	4631      	mov	r1, r6
   d767c:	f7ff ffdc 	bl	d7638 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7680:	7c33      	ldrb	r3, [r6, #16]
   d7682:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d7684:	6025      	str	r5, [r4, #0]
	}
   d7686:	e7f0      	b.n	d766a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d7688:	6804      	ldr	r4, [r0, #0]
   d768a:	2c00      	cmp	r4, #0
   d768c:	d0ed      	beq.n	d766a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d768e:	4620      	mov	r0, r4
   d7690:	f7fc fe4a 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d7694:	2114      	movs	r1, #20
   d7696:	4620      	mov	r0, r4
   d7698:	f001 f897 	bl	d87ca <_ZdlPvj>
   d769c:	e7e5      	b.n	d766a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d76a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d76a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d76a2:	b089      	sub	sp, #36	; 0x24
   d76a4:	4604      	mov	r4, r0
   d76a6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d76a8:	a801      	add	r0, sp, #4
   d76aa:	4611      	mov	r1, r2
   d76ac:	f7ff fe10 	bl	d72d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d76b0:	b1a4      	cbz	r4, d76dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d76b2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d76b4:	b11d      	cbz	r5, d76be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d76b6:	4628      	mov	r0, r5
   d76b8:	f001 ff62 	bl	d9580 <strdup>
   d76bc:	4605      	mov	r5, r0
   d76be:	a801      	add	r0, sp, #4
   d76c0:	a903      	add	r1, sp, #12
        type_(type) {
   d76c2:	9503      	str	r5, [sp, #12]
   d76c4:	f8ad 4010 	strh.w	r4, [sp, #16]
   d76c8:	f7ff fe78 	bl	d73bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d76cc:	a803      	add	r0, sp, #12
   d76ce:	f7ff fdae 	bl	d722e <_ZN8particle5ErrorD1Ev>
   d76d2:	a802      	add	r0, sp, #8
   d76d4:	f7ff fd70 	bl	d71b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d76d8:	b009      	add	sp, #36	; 0x24
   d76da:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d76dc:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d76de:	2301      	movs	r3, #1
   d76e0:	e8d5 2f4f 	ldrexb	r2, [r5]
   d76e4:	2a00      	cmp	r2, #0
   d76e6:	d103      	bne.n	d76f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d76e8:	e8c5 3f41 	strexb	r1, r3, [r5]
   d76ec:	2900      	cmp	r1, #0
   d76ee:	d1f7      	bne.n	d76e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d76f0:	d1ef      	bne.n	d76d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d76f2:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d76f4:	f3bf 8f5b 	dmb	ish
   d76f8:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d76fa:	1d2b      	adds	r3, r5, #4
   d76fc:	f3bf 8f5b 	dmb	ish
   d7700:	e853 6f00 	ldrex	r6, [r3]
   d7704:	e843 4200 	strex	r2, r4, [r3]
   d7708:	2a00      	cmp	r2, #0
   d770a:	d1f9      	bne.n	d7700 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d770c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d7710:	2e00      	cmp	r6, #0
   d7712:	d0de      	beq.n	d76d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d7714:	4620      	mov	r0, r4
   d7716:	f7ff fbc3 	bl	d6ea0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d771a:	4607      	mov	r7, r0
   d771c:	b160      	cbz	r0, d7738 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d771e:	f105 010c 	add.w	r1, r5, #12
   d7722:	4630      	mov	r0, r6
   d7724:	f7ff fe15 	bl	d7352 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d7728:	4630      	mov	r0, r6
   d772a:	f7fc fdfd 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d772e:	2110      	movs	r1, #16
   d7730:	4630      	mov	r0, r6
   d7732:	f001 f84a 	bl	d87ca <_ZdlPvj>
   d7736:	e7cc      	b.n	d76d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7738:	4631      	mov	r1, r6
   d773a:	a803      	add	r0, sp, #12
   d773c:	f7ff ff7c 	bl	d7638 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7740:	7b2b      	ldrb	r3, [r5, #12]
   d7742:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7746:	2010      	movs	r0, #16
   d7748:	f7fc fca5 	bl	d4096 <_Znwj>
   d774c:	4605      	mov	r5, r0
   d774e:	b1d0      	cbz	r0, d7786 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d7750:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7752:	2014      	movs	r0, #20
   d7754:	f7fc fc9f 	bl	d4096 <_Znwj>
   d7758:	4604      	mov	r4, r0
   d775a:	b178      	cbz	r0, d777c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d775c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d775e:	4601      	mov	r1, r0
   d7760:	a803      	add	r0, sp, #12
   d7762:	f7ff fdd4 	bl	d730e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7766:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7768:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d776a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d776c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d776e:	9205      	str	r2, [sp, #20]
   d7770:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7772:	60e3      	str	r3, [r4, #12]
   d7774:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d7778:	9206      	str	r2, [sp, #24]
   d777a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d777c:	4b06      	ldr	r3, [pc, #24]	; (d7798 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d777e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7780:	4b06      	ldr	r3, [pc, #24]	; (d779c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7782:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d7784:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d7786:	a803      	add	r0, sp, #12
   d7788:	f7fc fdce 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d778c:	2200      	movs	r2, #0
   d778e:	4629      	mov	r1, r5
   d7790:	4803      	ldr	r0, [pc, #12]	; (d77a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d7792:	f7ff fb8d 	bl	d6eb0 <application_thread_invoke>
   d7796:	e7c7      	b.n	d7728 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d7798:	000d7365 	.word	0x000d7365
   d779c:	000d7657 	.word	0x000d7657
   d77a0:	000d7153 	.word	0x000d7153

000d77a4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d77a4:	2200      	movs	r2, #0
   d77a6:	6840      	ldr	r0, [r0, #4]
   d77a8:	4611      	mov	r1, r2
   d77aa:	f7ff bc4f 	b.w	d704c <network_listening>

000d77ae <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d77ae:	2200      	movs	r2, #0
   d77b0:	6840      	ldr	r0, [r0, #4]
   d77b2:	4611      	mov	r1, r2
   d77b4:	f7ff bc5a 	b.w	d706c <network_get_listen_timeout>

000d77b8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d77b8:	6840      	ldr	r0, [r0, #4]
   d77ba:	2200      	movs	r2, #0
   d77bc:	f7ff bc4e 	b.w	d705c <network_set_listen_timeout>

000d77c0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d77c0:	6840      	ldr	r0, [r0, #4]
   d77c2:	2200      	movs	r2, #0
   d77c4:	f081 0101 	eor.w	r1, r1, #1
   d77c8:	f7ff bc38 	b.w	d703c <network_listen>

000d77cc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d77cc:	2300      	movs	r3, #0
   d77ce:	6840      	ldr	r0, [r0, #4]
   d77d0:	461a      	mov	r2, r3
   d77d2:	4619      	mov	r1, r3
   d77d4:	f7ff bc2a 	b.w	d702c <network_off>

000d77d8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d77d8:	2300      	movs	r3, #0
   d77da:	6840      	ldr	r0, [r0, #4]
   d77dc:	461a      	mov	r2, r3
   d77de:	4619      	mov	r1, r3
   d77e0:	f7ff bc1c 	b.w	d701c <network_on>

000d77e4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d77e4:	2200      	movs	r2, #0
   d77e6:	6840      	ldr	r0, [r0, #4]
   d77e8:	4611      	mov	r1, r2
   d77ea:	f7ff bc0f 	b.w	d700c <network_ready>

000d77ee <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d77ee:	2200      	movs	r2, #0
   d77f0:	6840      	ldr	r0, [r0, #4]
   d77f2:	4611      	mov	r1, r2
   d77f4:	f7ff bbfa 	b.w	d6fec <network_connecting>

000d77f8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d77f8:	6840      	ldr	r0, [r0, #4]
   d77fa:	2200      	movs	r2, #0
   d77fc:	2102      	movs	r1, #2
   d77fe:	f7ff bbfd 	b.w	d6ffc <network_disconnect>

000d7802 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7802:	2300      	movs	r3, #0
   d7804:	6840      	ldr	r0, [r0, #4]
   d7806:	461a      	mov	r2, r3
   d7808:	f7ff bbe8 	b.w	d6fdc <network_connect>

000d780c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d780c:	4b02      	ldr	r3, [pc, #8]	; (d7818 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d780e:	2203      	movs	r2, #3
   d7810:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7812:	4a02      	ldr	r2, [pc, #8]	; (d781c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7814:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d7816:	4770      	bx	lr
   d7818:	2003e610 	.word	0x2003e610
   d781c:	000dbdec 	.word	0x000dbdec

000d7820 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7820:	4770      	bx	lr

000d7822 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7822:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7824:	4606      	mov	r6, r0
   d7826:	4615      	mov	r5, r2
   d7828:	460c      	mov	r4, r1
   d782a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d782c:	42bc      	cmp	r4, r7
   d782e:	d006      	beq.n	d783e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7830:	6833      	ldr	r3, [r6, #0]
   d7832:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7836:	689b      	ldr	r3, [r3, #8]
   d7838:	4630      	mov	r0, r6
   d783a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d783c:	e7f6      	b.n	d782c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d783e:	4628      	mov	r0, r5
   d7840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7842 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d7842:	7c00      	ldrb	r0, [r0, #16]
   d7844:	2200      	movs	r2, #0
   d7846:	f7ff ba13 	b.w	d6c70 <hal_i2c_write>

000d784a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d784a:	7c00      	ldrb	r0, [r0, #16]
   d784c:	2100      	movs	r1, #0
   d784e:	f7ff ba17 	b.w	d6c80 <hal_i2c_available>

000d7852 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d7852:	7c00      	ldrb	r0, [r0, #16]
   d7854:	2100      	movs	r1, #0
   d7856:	f7ff ba1b 	b.w	d6c90 <hal_i2c_read>

000d785a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d785a:	7c00      	ldrb	r0, [r0, #16]
   d785c:	2100      	movs	r1, #0
   d785e:	f7ff ba1f 	b.w	d6ca0 <hal_i2c_peek>

000d7862 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d7862:	7c00      	ldrb	r0, [r0, #16]
   d7864:	2100      	movs	r1, #0
   d7866:	f7ff ba23 	b.w	d6cb0 <hal_i2c_flush>

000d786a <_ZN7TwoWireD0Ev>:
   d786a:	b510      	push	{r4, lr}
   d786c:	2114      	movs	r1, #20
   d786e:	4604      	mov	r4, r0
   d7870:	f000 ffab 	bl	d87ca <_ZdlPvj>
   d7874:	4620      	mov	r0, r4
   d7876:	bd10      	pop	{r4, pc}

000d7878 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7878:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d787a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d787e:	4604      	mov	r4, r0
   d7880:	4608      	mov	r0, r1
   d7882:	2100      	movs	r1, #0
   d7884:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7888:	4b03      	ldr	r3, [pc, #12]	; (d7898 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d788a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d788c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d788e:	4611      	mov	r1, r2
   d7890:	f7ff fa1e 	bl	d6cd0 <hal_i2c_init>
}
   d7894:	4620      	mov	r0, r4
   d7896:	bd10      	pop	{r4, pc}
   d7898:	000dbe20 	.word	0x000dbe20

000d789c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d789c:	2300      	movs	r3, #0
   d789e:	7c00      	ldrb	r0, [r0, #16]
   d78a0:	461a      	mov	r2, r3
   d78a2:	4619      	mov	r1, r3
   d78a4:	f7ff b9cc 	b.w	d6c40 <hal_i2c_begin>

000d78a8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d78a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d78aa:	2200      	movs	r2, #0
   d78ac:	2314      	movs	r3, #20
   d78ae:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d78b2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d78b6:	780b      	ldrb	r3, [r1, #0]
   d78b8:	f88d 3008 	strb.w	r3, [sp, #8]
   d78bc:	684b      	ldr	r3, [r1, #4]
   d78be:	9303      	str	r3, [sp, #12]
   d78c0:	68cb      	ldr	r3, [r1, #12]
   d78c2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d78c4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d78c6:	7a0b      	ldrb	r3, [r1, #8]
   d78c8:	9305      	str	r3, [sp, #20]
   d78ca:	a901      	add	r1, sp, #4
   d78cc:	f7ff fa18 	bl	d6d00 <hal_i2c_request_ex>
}
   d78d0:	b007      	add	sp, #28
   d78d2:	f85d fb04 	ldr.w	pc, [sp], #4

000d78d6 <_ZN7TwoWire11requestFromEhjh>:
{
   d78d6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d78d8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d78da:	f88d 1000 	strb.w	r1, [sp]
   d78de:	f04f 0164 	mov.w	r1, #100	; 0x64
   d78e2:	9103      	str	r1, [sp, #12]
   d78e4:	bf18      	it	ne
   d78e6:	2301      	movne	r3, #1
   d78e8:	4669      	mov	r1, sp
    size_ = size;
   d78ea:	9201      	str	r2, [sp, #4]
   d78ec:	f88d 3008 	strb.w	r3, [sp, #8]
   d78f0:	f7ff ffda 	bl	d78a8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d78f4:	b005      	add	sp, #20
   d78f6:	f85d fb04 	ldr.w	pc, [sp], #4

000d78fa <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d78fa:	7c00      	ldrb	r0, [r0, #16]
   d78fc:	2200      	movs	r2, #0
   d78fe:	f7ff b9a7 	b.w	d6c50 <hal_i2c_begin_transmission>

000d7902 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7902:	b2c9      	uxtb	r1, r1
   d7904:	f7ff bff9 	b.w	d78fa <_ZN7TwoWire17beginTransmissionEh>

000d7908 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d7908:	7c00      	ldrb	r0, [r0, #16]
   d790a:	2200      	movs	r2, #0
   d790c:	f7ff b9a8 	b.w	d6c60 <hal_i2c_end_transmission>

000d7910 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d7910:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d7912:	2100      	movs	r1, #0
   d7914:	7c00      	ldrb	r0, [r0, #16]
   d7916:	f7ff f9e3 	bl	d6ce0 <hal_i2c_lock>
}
   d791a:	fab0 f080 	clz	r0, r0
   d791e:	0940      	lsrs	r0, r0, #5
   d7920:	bd08      	pop	{r3, pc}

000d7922 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d7922:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d7924:	2100      	movs	r1, #0
   d7926:	7c00      	ldrb	r0, [r0, #16]
   d7928:	f7ff f9e2 	bl	d6cf0 <hal_i2c_unlock>
}
   d792c:	fab0 f080 	clz	r0, r0
   d7930:	0940      	lsrs	r0, r0, #5
   d7932:	bd08      	pop	{r3, pc}

000d7934 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d7934:	4700      	bx	r0
	...

000d7938 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d7938:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d793c:	2400      	movs	r4, #0
{
   d793e:	461d      	mov	r5, r3
   d7940:	460f      	mov	r7, r1
   d7942:	4690      	mov	r8, r2
   d7944:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d7946:	f7ff f96b 	bl	d6c20 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d794a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d794c:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d7950:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7954:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d7958:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d795c:	bfa2      	ittt	ge
   d795e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d7962:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d7966:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7968:	4907      	ldr	r1, [pc, #28]	; (d7988 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d796a:	9400      	str	r4, [sp, #0]
   d796c:	4643      	mov	r3, r8
   d796e:	463a      	mov	r2, r7
   d7970:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d7972:	bfa8      	it	ge
   d7974:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7978:	f7ff f94a 	bl	d6c10 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d797c:	fab0 f080 	clz	r0, r0
   d7980:	0940      	lsrs	r0, r0, #5
   d7982:	b004      	add	sp, #16
   d7984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7988:	000d7935 	.word	0x000d7935

000d798c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d798c:	4770      	bx	lr

000d798e <_ZN9IPAddressD0Ev>:
   d798e:	b510      	push	{r4, lr}
   d7990:	2118      	movs	r1, #24
   d7992:	4604      	mov	r4, r0
   d7994:	f000 ff19 	bl	d87ca <_ZdlPvj>
   d7998:	4620      	mov	r0, r4
   d799a:	bd10      	pop	{r4, pc}

000d799c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d799c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d799e:	7d03      	ldrb	r3, [r0, #20]
   d79a0:	2b06      	cmp	r3, #6
{
   d79a2:	b08d      	sub	sp, #52	; 0x34
   d79a4:	460e      	mov	r6, r1
   d79a6:	f100 0704 	add.w	r7, r0, #4
   d79aa:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d79ae:	d012      	beq.n	d79d6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d79b0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d79b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d79b8:	220a      	movs	r2, #10
   d79ba:	4630      	mov	r0, r6
   d79bc:	f000 f933 	bl	d7c26 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d79c0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d79c2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d79c4:	d019      	beq.n	d79fa <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d79c6:	2c00      	cmp	r4, #0
   d79c8:	d0f4      	beq.n	d79b4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d79ca:	212e      	movs	r1, #46	; 0x2e
   d79cc:	4630      	mov	r0, r6
   d79ce:	f000 f927 	bl	d7c20 <_ZN5Print5printEc>
   d79d2:	4404      	add	r4, r0
   d79d4:	e7ee      	b.n	d79b4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d79d6:	232f      	movs	r3, #47	; 0x2f
   d79d8:	466a      	mov	r2, sp
   d79da:	4639      	mov	r1, r7
   d79dc:	200a      	movs	r0, #10
		buf[0] = 0;
   d79de:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d79e2:	f7ff f995 	bl	d6d10 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d79e6:	4668      	mov	r0, sp
   d79e8:	f001 fde7 	bl	d95ba <strlen>
   d79ec:	6833      	ldr	r3, [r6, #0]
   d79ee:	4602      	mov	r2, r0
   d79f0:	68db      	ldr	r3, [r3, #12]
   d79f2:	4669      	mov	r1, sp
   d79f4:	4630      	mov	r0, r6
   d79f6:	4798      	blx	r3
   d79f8:	4604      	mov	r4, r0
    }
    return n;
}
   d79fa:	4620      	mov	r0, r4
   d79fc:	b00d      	add	sp, #52	; 0x34
   d79fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7a00 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d7a00:	b510      	push	{r4, lr}
   d7a02:	4b05      	ldr	r3, [pc, #20]	; (d7a18 <_ZN9IPAddressC1Ev+0x18>)
   d7a04:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7a06:	2211      	movs	r2, #17
   d7a08:	f840 3b04 	str.w	r3, [r0], #4
   d7a0c:	2100      	movs	r1, #0
   d7a0e:	f001 fd79 	bl	d9504 <memset>
}
   d7a12:	4620      	mov	r0, r4
   d7a14:	bd10      	pop	{r4, pc}
   d7a16:	bf00      	nop
   d7a18:	000dbe48 	.word	0x000dbe48

000d7a1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7a1c:	4603      	mov	r3, r0
   d7a1e:	4a07      	ldr	r2, [pc, #28]	; (d7a3c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7a20:	b510      	push	{r4, lr}
   d7a22:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7a26:	f101 0210 	add.w	r2, r1, #16
   d7a2a:	f851 4b04 	ldr.w	r4, [r1], #4
   d7a2e:	f843 4b04 	str.w	r4, [r3], #4
   d7a32:	4291      	cmp	r1, r2
   d7a34:	d1f9      	bne.n	d7a2a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7a36:	780a      	ldrb	r2, [r1, #0]
   d7a38:	701a      	strb	r2, [r3, #0]
}
   d7a3a:	bd10      	pop	{r4, pc}
   d7a3c:	000dbe48 	.word	0x000dbe48

000d7a40 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7a40:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7a42:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7a46:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7a4a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7a4e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7a52:	2304      	movs	r3, #4
   d7a54:	6041      	str	r1, [r0, #4]
   d7a56:	7503      	strb	r3, [r0, #20]
}
   d7a58:	bd10      	pop	{r4, pc}

000d7a5a <_ZN9IPAddressaSEPKh>:
{
   d7a5a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7a5c:	78cb      	ldrb	r3, [r1, #3]
   d7a5e:	9300      	str	r3, [sp, #0]
   d7a60:	788b      	ldrb	r3, [r1, #2]
   d7a62:	784a      	ldrb	r2, [r1, #1]
   d7a64:	7809      	ldrb	r1, [r1, #0]
   d7a66:	f7ff ffeb 	bl	d7a40 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7a6a:	b002      	add	sp, #8
   d7a6c:	bd10      	pop	{r4, pc}
	...

000d7a70 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7a70:	4b01      	ldr	r3, [pc, #4]	; (d7a78 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7a72:	4a02      	ldr	r2, [pc, #8]	; (d7a7c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7a74:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7a76:	4770      	bx	lr
   d7a78:	2003e618 	.word	0x2003e618
   d7a7c:	000dbe54 	.word	0x000dbe54

000d7a80 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7a80:	2300      	movs	r3, #0
   d7a82:	6840      	ldr	r0, [r0, #4]
   d7a84:	461a      	mov	r2, r3
   d7a86:	f7ff baa9 	b.w	d6fdc <network_connect>

000d7a8a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7a8a:	6840      	ldr	r0, [r0, #4]
   d7a8c:	2200      	movs	r2, #0
   d7a8e:	2102      	movs	r1, #2
   d7a90:	f7ff bab4 	b.w	d6ffc <network_disconnect>

000d7a94 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7a94:	2200      	movs	r2, #0
   d7a96:	6840      	ldr	r0, [r0, #4]
   d7a98:	4611      	mov	r1, r2
   d7a9a:	f7ff baa7 	b.w	d6fec <network_connecting>

000d7a9e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7a9e:	2200      	movs	r2, #0
   d7aa0:	6840      	ldr	r0, [r0, #4]
   d7aa2:	4611      	mov	r1, r2
   d7aa4:	f7ff bab2 	b.w	d700c <network_ready>

000d7aa8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7aa8:	2300      	movs	r3, #0
   d7aaa:	6840      	ldr	r0, [r0, #4]
   d7aac:	461a      	mov	r2, r3
   d7aae:	4619      	mov	r1, r3
   d7ab0:	f7ff bab4 	b.w	d701c <network_on>

000d7ab4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7ab4:	2300      	movs	r3, #0
   d7ab6:	6840      	ldr	r0, [r0, #4]
   d7ab8:	461a      	mov	r2, r3
   d7aba:	4619      	mov	r1, r3
   d7abc:	f7ff bab6 	b.w	d702c <network_off>

000d7ac0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7ac0:	6840      	ldr	r0, [r0, #4]
   d7ac2:	2200      	movs	r2, #0
   d7ac4:	f081 0101 	eor.w	r1, r1, #1
   d7ac8:	f7ff bab8 	b.w	d703c <network_listen>

000d7acc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7acc:	6840      	ldr	r0, [r0, #4]
   d7ace:	2200      	movs	r2, #0
   d7ad0:	f7ff bac4 	b.w	d705c <network_set_listen_timeout>

000d7ad4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7ad4:	2200      	movs	r2, #0
   d7ad6:	6840      	ldr	r0, [r0, #4]
   d7ad8:	4611      	mov	r1, r2
   d7ada:	f7ff bac7 	b.w	d706c <network_get_listen_timeout>

000d7ade <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7ade:	2200      	movs	r2, #0
   d7ae0:	6840      	ldr	r0, [r0, #4]
   d7ae2:	4611      	mov	r1, r2
   d7ae4:	f7ff bab2 	b.w	d704c <network_listening>

000d7ae8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7ae8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7aec:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7aee:	b095      	sub	sp, #84	; 0x54
   d7af0:	4616      	mov	r6, r2
   d7af2:	460d      	mov	r5, r1
   d7af4:	4607      	mov	r7, r0
    IPAddress addr;
   d7af6:	f7ff ff83 	bl	d7a00 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7afa:	4621      	mov	r1, r4
   d7afc:	2218      	movs	r2, #24
   d7afe:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7b00:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7b02:	f001 fcff 	bl	d9504 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7b06:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7b08:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7b0c:	4621      	mov	r1, r4
   d7b0e:	466b      	mov	r3, sp
   d7b10:	aa0c      	add	r2, sp, #48	; 0x30
   d7b12:	4630      	mov	r0, r6
   d7b14:	f7ff f90c 	bl	d6d30 <netdb_getaddrinfo>
    if (!r) {
   d7b18:	4604      	mov	r4, r0
   d7b1a:	2800      	cmp	r0, #0
   d7b1c:	d146      	bne.n	d7bac <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7b1e:	4602      	mov	r2, r0
   d7b20:	2101      	movs	r1, #1
   d7b22:	6868      	ldr	r0, [r5, #4]
   d7b24:	f7ff fa72 	bl	d700c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7b28:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7b2a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7b2c:	4622      	mov	r2, r4
   d7b2e:	6868      	ldr	r0, [r5, #4]
   d7b30:	f7ff fa6c 	bl	d700c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7b34:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7b36:	4681      	mov	r9, r0
        bool ok = false;
   d7b38:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7b3a:	2e00      	cmp	r6, #0
   d7b3c:	d036      	beq.n	d7bac <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d7b3e:	2900      	cmp	r1, #0
   d7b40:	d134      	bne.n	d7bac <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7b42:	6873      	ldr	r3, [r6, #4]
   d7b44:	2b02      	cmp	r3, #2
   d7b46:	d003      	beq.n	d7b50 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7b48:	2b0a      	cmp	r3, #10
   d7b4a:	d00b      	beq.n	d7b64 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7b4c:	69f6      	ldr	r6, [r6, #28]
   d7b4e:	e7f4      	b.n	d7b3a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7b50:	f1b8 0f00 	cmp.w	r8, #0
   d7b54:	d004      	beq.n	d7b60 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7b56:	6971      	ldr	r1, [r6, #20]
   d7b58:	4638      	mov	r0, r7
   d7b5a:	3104      	adds	r1, #4
   d7b5c:	f7ff ff7d 	bl	d7a5a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d7b60:	4641      	mov	r1, r8
   d7b62:	e7f3      	b.n	d7b4c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7b64:	f1b9 0f00 	cmp.w	r9, #0
   d7b68:	d101      	bne.n	d7b6e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7b6a:	4649      	mov	r1, r9
   d7b6c:	e7ee      	b.n	d7b4c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7b6e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7b70:	2210      	movs	r2, #16
   d7b72:	a801      	add	r0, sp, #4
   d7b74:	f001 fcc6 	bl	d9504 <memset>
                    a.v = 6;
   d7b78:	2306      	movs	r3, #6
   d7b7a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7b7e:	ad01      	add	r5, sp, #4
   d7b80:	f104 0308 	add.w	r3, r4, #8
   d7b84:	3418      	adds	r4, #24
   d7b86:	6818      	ldr	r0, [r3, #0]
   d7b88:	6859      	ldr	r1, [r3, #4]
   d7b8a:	462a      	mov	r2, r5
   d7b8c:	c203      	stmia	r2!, {r0, r1}
   d7b8e:	3308      	adds	r3, #8
   d7b90:	42a3      	cmp	r3, r4
   d7b92:	4615      	mov	r5, r2
   d7b94:	d1f7      	bne.n	d7b86 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d7b96:	a901      	add	r1, sp, #4
   d7b98:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7b9a:	ad07      	add	r5, sp, #28
   d7b9c:	f7ff ff3e 	bl	d7a1c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7ba2:	1d3c      	adds	r4, r7, #4
   d7ba4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7ba6:	682b      	ldr	r3, [r5, #0]
   d7ba8:	7023      	strb	r3, [r4, #0]
   d7baa:	e7de      	b.n	d7b6a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7bac:	9800      	ldr	r0, [sp, #0]
   d7bae:	f7ff f8b7 	bl	d6d20 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7bb2:	4638      	mov	r0, r7
   d7bb4:	b015      	add	sp, #84	; 0x54
   d7bb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7bbc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7bbc:	4b02      	ldr	r3, [pc, #8]	; (d7bc8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7bbe:	4a03      	ldr	r2, [pc, #12]	; (d7bcc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7bc0:	601a      	str	r2, [r3, #0]
   d7bc2:	2200      	movs	r2, #0
   d7bc4:	605a      	str	r2, [r3, #4]

} // spark
   d7bc6:	4770      	bx	lr
   d7bc8:	2003e61c 	.word	0x2003e61c
   d7bcc:	000dbe60 	.word	0x000dbe60

000d7bd0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7bd2:	4606      	mov	r6, r0
   d7bd4:	460d      	mov	r5, r1
  size_t n = 0;
   d7bd6:	188f      	adds	r7, r1, r2
   d7bd8:	2400      	movs	r4, #0
  while (size--) {
   d7bda:	42bd      	cmp	r5, r7
   d7bdc:	d00c      	beq.n	d7bf8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7bde:	6833      	ldr	r3, [r6, #0]
   d7be0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7be4:	689b      	ldr	r3, [r3, #8]
   d7be6:	4630      	mov	r0, r6
   d7be8:	4798      	blx	r3
     if (chunk>=0)
   d7bea:	1e03      	subs	r3, r0, #0
   d7bec:	db01      	blt.n	d7bf2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7bee:	441c      	add	r4, r3
  while (size--) {
   d7bf0:	e7f3      	b.n	d7bda <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7bf2:	2c00      	cmp	r4, #0
   d7bf4:	bf08      	it	eq
   d7bf6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7bf8:	4620      	mov	r0, r4
   d7bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7bfc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d7bfc:	b513      	push	{r0, r1, r4, lr}
   d7bfe:	4604      	mov	r4, r0
    }
   d7c00:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d7c02:	b159      	cbz	r1, d7c1c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7c04:	9101      	str	r1, [sp, #4]
   d7c06:	f001 fcd8 	bl	d95ba <strlen>
   d7c0a:	6823      	ldr	r3, [r4, #0]
   d7c0c:	9901      	ldr	r1, [sp, #4]
   d7c0e:	68db      	ldr	r3, [r3, #12]
   d7c10:	4602      	mov	r2, r0
   d7c12:	4620      	mov	r0, r4
    }
   d7c14:	b002      	add	sp, #8
   d7c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7c1a:	4718      	bx	r3
    }
   d7c1c:	b002      	add	sp, #8
   d7c1e:	bd10      	pop	{r4, pc}

000d7c20 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7c20:	6803      	ldr	r3, [r0, #0]
   d7c22:	689b      	ldr	r3, [r3, #8]
   d7c24:	4718      	bx	r3

000d7c26 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7c26:	b530      	push	{r4, r5, lr}
   d7c28:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7c2a:	2300      	movs	r3, #0
   d7c2c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7c30:	2a01      	cmp	r2, #1
   d7c32:	bf98      	it	ls
   d7c34:	220a      	movls	r2, #10
   d7c36:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7c38:	460d      	mov	r5, r1
   d7c3a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d7c3e:	fb01 5312 	mls	r3, r1, r2, r5
   d7c42:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7c46:	2b09      	cmp	r3, #9
   d7c48:	bf94      	ite	ls
   d7c4a:	3330      	addls	r3, #48	; 0x30
   d7c4c:	3337      	addhi	r3, #55	; 0x37
   d7c4e:	b2db      	uxtb	r3, r3
  } while(n);
   d7c50:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7c52:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7c56:	d9ef      	bls.n	d7c38 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7c58:	4621      	mov	r1, r4
   d7c5a:	f7ff ffcf 	bl	d7bfc <_ZN5Print5writeEPKc>
}
   d7c5e:	b00b      	add	sp, #44	; 0x2c
   d7c60:	bd30      	pop	{r4, r5, pc}

000d7c62 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7c62:	b510      	push	{r4, lr}
   d7c64:	4604      	mov	r4, r0
   d7c66:	f7fc fb5f 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
   d7c6a:	4620      	mov	r0, r4
   d7c6c:	bd10      	pop	{r4, pc}
	...

000d7c70 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7c70:	4803      	ldr	r0, [pc, #12]	; (d7c80 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7c72:	4a04      	ldr	r2, [pc, #16]	; (d7c84 <_GLOBAL__sub_I_RGB+0x14>)
   d7c74:	4904      	ldr	r1, [pc, #16]	; (d7c88 <_GLOBAL__sub_I_RGB+0x18>)
   d7c76:	2300      	movs	r3, #0
   d7c78:	6083      	str	r3, [r0, #8]
   d7c7a:	f000 bda1 	b.w	d87c0 <__aeabi_atexit>
   d7c7e:	bf00      	nop
   d7c80:	2003e624 	.word	0x2003e624
   d7c84:	2003dea0 	.word	0x2003dea0
   d7c88:	000d7c63 	.word	0x000d7c63

000d7c8c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d7c8c:	b510      	push	{r4, lr}
   d7c8e:	4604      	mov	r4, r0
   d7c90:	4608      	mov	r0, r1
{
    _spi = spi;
   d7c92:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d7c94:	f7ff f854 	bl	d6d40 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7c98:	2300      	movs	r3, #0
   d7c9a:	6063      	str	r3, [r4, #4]
}
   d7c9c:	4620      	mov	r0, r4
   d7c9e:	bd10      	pop	{r4, pc}

000d7ca0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7ca0:	b510      	push	{r4, lr}
   d7ca2:	4604      	mov	r4, r0
{
	free(buffer);
   d7ca4:	6800      	ldr	r0, [r0, #0]
   d7ca6:	f7ff f9f1 	bl	d708c <free>
}
   d7caa:	4620      	mov	r0, r4
   d7cac:	bd10      	pop	{r4, pc}

000d7cae <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7cae:	b510      	push	{r4, lr}
   d7cb0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7cb2:	6800      	ldr	r0, [r0, #0]
   d7cb4:	b108      	cbz	r0, d7cba <_ZN6String10invalidateEv+0xc>
   d7cb6:	f7ff f9e9 	bl	d708c <free>
	buffer = NULL;
   d7cba:	2300      	movs	r3, #0
	capacity = len = 0;
   d7cbc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d7cc0:	6023      	str	r3, [r4, #0]
}
   d7cc2:	bd10      	pop	{r4, pc}

000d7cc4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7cc4:	b538      	push	{r3, r4, r5, lr}
   d7cc6:	4604      	mov	r4, r0
   d7cc8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7cca:	6800      	ldr	r0, [r0, #0]
   d7ccc:	3101      	adds	r1, #1
   d7cce:	f7ff f9e5 	bl	d709c <realloc>
	if (newbuffer) {
   d7cd2:	b110      	cbz	r0, d7cda <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7cd4:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d7cd8:	2001      	movs	r0, #1
	}
	return 0;
}
   d7cda:	bd38      	pop	{r3, r4, r5, pc}

000d7cdc <_ZN6String7reserveEj>:
{
   d7cdc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7cde:	6803      	ldr	r3, [r0, #0]
{
   d7ce0:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7ce2:	b123      	cbz	r3, d7cee <_ZN6String7reserveEj+0x12>
   d7ce4:	6843      	ldr	r3, [r0, #4]
   d7ce6:	428b      	cmp	r3, r1
   d7ce8:	d301      	bcc.n	d7cee <_ZN6String7reserveEj+0x12>
   d7cea:	2001      	movs	r0, #1
}
   d7cec:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d7cee:	4620      	mov	r0, r4
   d7cf0:	f7ff ffe8 	bl	d7cc4 <_ZN6String12changeBufferEj>
   d7cf4:	2800      	cmp	r0, #0
   d7cf6:	d0f9      	beq.n	d7cec <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d7cf8:	68a3      	ldr	r3, [r4, #8]
   d7cfa:	2b00      	cmp	r3, #0
   d7cfc:	d1f5      	bne.n	d7cea <_ZN6String7reserveEj+0xe>
   d7cfe:	6822      	ldr	r2, [r4, #0]
   d7d00:	7013      	strb	r3, [r2, #0]
   d7d02:	e7f2      	b.n	d7cea <_ZN6String7reserveEj+0xe>

000d7d04 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7d06:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d7d08:	4611      	mov	r1, r2
   d7d0a:	9201      	str	r2, [sp, #4]
{
   d7d0c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d7d0e:	f7ff ffe5 	bl	d7cdc <_ZN6String7reserveEj>
   d7d12:	9a01      	ldr	r2, [sp, #4]
   d7d14:	b928      	cbnz	r0, d7d22 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d7d16:	4620      	mov	r0, r4
   d7d18:	f7ff ffc9 	bl	d7cae <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d7d1c:	4620      	mov	r0, r4
   d7d1e:	b003      	add	sp, #12
   d7d20:	bd30      	pop	{r4, r5, pc}
	len = length;
   d7d22:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d7d24:	4629      	mov	r1, r5
   d7d26:	6820      	ldr	r0, [r4, #0]
   d7d28:	f001 fbc4 	bl	d94b4 <memcpy>
	buffer[len] = 0;
   d7d2c:	6822      	ldr	r2, [r4, #0]
   d7d2e:	68a3      	ldr	r3, [r4, #8]
   d7d30:	2100      	movs	r1, #0
   d7d32:	54d1      	strb	r1, [r2, r3]
	return *this;
   d7d34:	e7f2      	b.n	d7d1c <_ZN6String4copyEPKcj+0x18>

000d7d36 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d7d36:	2300      	movs	r3, #0
String::String(const char *cstr)
   d7d38:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d7d3a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d7d3e:	4604      	mov	r4, r0
	len = 0;
   d7d40:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7d42:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d7d44:	b141      	cbz	r1, d7d58 <_ZN6StringC1EPKc+0x22>
   d7d46:	4608      	mov	r0, r1
   d7d48:	9101      	str	r1, [sp, #4]
   d7d4a:	f001 fc36 	bl	d95ba <strlen>
   d7d4e:	9901      	ldr	r1, [sp, #4]
   d7d50:	4602      	mov	r2, r0
   d7d52:	4620      	mov	r0, r4
   d7d54:	f7ff ffd6 	bl	d7d04 <_ZN6String4copyEPKcj>
}
   d7d58:	4620      	mov	r0, r4
   d7d5a:	b002      	add	sp, #8
   d7d5c:	bd10      	pop	{r4, pc}

000d7d5e <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d7d5e:	4288      	cmp	r0, r1
{
   d7d60:	b510      	push	{r4, lr}
   d7d62:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7d64:	d005      	beq.n	d7d72 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7d66:	680b      	ldr	r3, [r1, #0]
   d7d68:	b12b      	cbz	r3, d7d76 <_ZN6StringaSERKS_+0x18>
   d7d6a:	688a      	ldr	r2, [r1, #8]
   d7d6c:	4619      	mov	r1, r3
   d7d6e:	f7ff ffc9 	bl	d7d04 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d7d72:	4620      	mov	r0, r4
   d7d74:	bd10      	pop	{r4, pc}
	else invalidate();
   d7d76:	f7ff ff9a 	bl	d7cae <_ZN6String10invalidateEv>
   d7d7a:	e7fa      	b.n	d7d72 <_ZN6StringaSERKS_+0x14>

000d7d7c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d7d7c:	b510      	push	{r4, lr}
	buffer = NULL;
   d7d7e:	2300      	movs	r3, #0
String::String(const String &value)
   d7d80:	4604      	mov	r4, r0
	capacity = 0;
   d7d82:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d7d86:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7d88:	7303      	strb	r3, [r0, #12]
	*this = value;
   d7d8a:	f7ff ffe8 	bl	d7d5e <_ZN6StringaSERKS_>
}
   d7d8e:	4620      	mov	r0, r4
   d7d90:	bd10      	pop	{r4, pc}

000d7d92 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7d92:	b513      	push	{r0, r1, r4, lr}
   d7d94:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d7d96:	b159      	cbz	r1, d7db0 <_ZN6StringaSEPKc+0x1e>
   d7d98:	4608      	mov	r0, r1
   d7d9a:	9101      	str	r1, [sp, #4]
   d7d9c:	f001 fc0d 	bl	d95ba <strlen>
   d7da0:	9901      	ldr	r1, [sp, #4]
   d7da2:	4602      	mov	r2, r0
   d7da4:	4620      	mov	r0, r4
   d7da6:	f7ff ffad 	bl	d7d04 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d7daa:	4620      	mov	r0, r4
   d7dac:	b002      	add	sp, #8
   d7dae:	bd10      	pop	{r4, pc}
	else invalidate();
   d7db0:	f7ff ff7d 	bl	d7cae <_ZN6String10invalidateEv>
   d7db4:	e7f9      	b.n	d7daa <_ZN6StringaSEPKc+0x18>

000d7db6 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d7db6:	b510      	push	{r4, lr}
   d7db8:	4604      	mov	r4, r0
   d7dba:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d7dbc:	2300      	movs	r3, #0
	capacity = 0;
   d7dbe:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d7dc2:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d7dc4:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d7dc6:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d7dc8:	a901      	add	r1, sp, #4
   d7dca:	f000 fb91 	bl	d84f0 <itoa>
	*this = buf;
   d7dce:	a901      	add	r1, sp, #4
   d7dd0:	4620      	mov	r0, r4
   d7dd2:	f7ff ffde 	bl	d7d92 <_ZN6StringaSEPKc>
}
   d7dd6:	4620      	mov	r0, r4
   d7dd8:	b00a      	add	sp, #40	; 0x28
   d7dda:	bd10      	pop	{r4, pc}

000d7ddc <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d7ddc:	b570      	push	{r4, r5, r6, lr}
   d7dde:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d7de0:	460e      	mov	r6, r1
   d7de2:	b909      	cbnz	r1, d7de8 <_ZN6String6concatEPKcj+0xc>
   d7de4:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d7de6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d7de8:	b16a      	cbz	r2, d7e06 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d7dea:	6884      	ldr	r4, [r0, #8]
   d7dec:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d7dee:	4621      	mov	r1, r4
   d7df0:	f7ff ff74 	bl	d7cdc <_ZN6String7reserveEj>
   d7df4:	2800      	cmp	r0, #0
   d7df6:	d0f5      	beq.n	d7de4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d7df8:	6828      	ldr	r0, [r5, #0]
   d7dfa:	68ab      	ldr	r3, [r5, #8]
   d7dfc:	4631      	mov	r1, r6
   d7dfe:	4418      	add	r0, r3
   d7e00:	f001 fbb6 	bl	d9570 <strcpy>
	len = newlen;
   d7e04:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d7e06:	2001      	movs	r0, #1
   d7e08:	e7ed      	b.n	d7de6 <_ZN6String6concatEPKcj+0xa>

000d7e0a <_ZplRK15StringSumHelperPKc>:
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d7e0a:	b513      	push	{r0, r1, r4, lr}
   d7e0c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d7e0e:	b929      	cbnz	r1, d7e1c <_ZplRK15StringSumHelperPKc+0x12>
   d7e10:	4620      	mov	r0, r4
   d7e12:	f7ff ff4c 	bl	d7cae <_ZN6String10invalidateEv>
	return a;
}
   d7e16:	4620      	mov	r0, r4
   d7e18:	b002      	add	sp, #8
   d7e1a:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d7e1c:	4608      	mov	r0, r1
   d7e1e:	9101      	str	r1, [sp, #4]
   d7e20:	f001 fbcb 	bl	d95ba <strlen>
   d7e24:	9901      	ldr	r1, [sp, #4]
   d7e26:	4602      	mov	r2, r0
   d7e28:	4620      	mov	r0, r4
   d7e2a:	f7ff ffd7 	bl	d7ddc <_ZN6String6concatEPKcj>
   d7e2e:	2800      	cmp	r0, #0
   d7e30:	d0ee      	beq.n	d7e10 <_ZplRK15StringSumHelperPKc+0x6>
   d7e32:	e7f0      	b.n	d7e16 <_ZplRK15StringSumHelperPKc+0xc>

000d7e34 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d7e34:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7e36:	6882      	ldr	r2, [r0, #8]
   d7e38:	b93a      	cbnz	r2, d7e4a <_ZNK6String6equalsEPKc+0x16>
   d7e3a:	b121      	cbz	r1, d7e46 <_ZNK6String6equalsEPKc+0x12>
   d7e3c:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d7e3e:	fab0 f080 	clz	r0, r0
   d7e42:	0940      	lsrs	r0, r0, #5
   d7e44:	e000      	b.n	d7e48 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7e46:	2001      	movs	r0, #1
}
   d7e48:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d7e4a:	6800      	ldr	r0, [r0, #0]
   d7e4c:	b909      	cbnz	r1, d7e52 <_ZNK6String6equalsEPKc+0x1e>
   d7e4e:	7800      	ldrb	r0, [r0, #0]
   d7e50:	e7f5      	b.n	d7e3e <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d7e52:	f001 fb83 	bl	d955c <strcmp>
   d7e56:	e7f2      	b.n	d7e3e <_ZNK6String6equalsEPKc+0xa>

000d7e58 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d7e58:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d7e5a:	6800      	ldr	r0, [r0, #0]
   d7e5c:	b140      	cbz	r0, d7e70 <_ZNK6String7toFloatEv+0x18>
   d7e5e:	f001 fb01 	bl	d9464 <atof>
   d7e62:	ec51 0b10 	vmov	r0, r1, d0
   d7e66:	f001 fa69 	bl	d933c <__aeabi_d2f>
   d7e6a:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d7e6e:	bd08      	pop	{r3, pc}
	return 0;
   d7e70:	ed9f 0a01 	vldr	s0, [pc, #4]	; d7e78 <_ZNK6String7toFloatEv+0x20>
   d7e74:	e7fb      	b.n	d7e6e <_ZNK6String7toFloatEv+0x16>
   d7e76:	bf00      	nop
   d7e78:	00000000 	.word	0x00000000

000d7e7c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d7e7c:	b507      	push	{r0, r1, r2, lr}
   d7e7e:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d7e80:	2100      	movs	r1, #0
{
   d7e82:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d7e84:	9100      	str	r1, [sp, #0]
   d7e86:	2001      	movs	r0, #1
   d7e88:	218c      	movs	r1, #140	; 0x8c
   d7e8a:	f7ff f83d 	bl	d6f08 <system_reset>
}
   d7e8e:	b003      	add	sp, #12
   d7e90:	f85d fb04 	ldr.w	pc, [sp], #4

000d7e94 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d7e94:	4601      	mov	r1, r0
    reset(0, flags);
   d7e96:	2000      	movs	r0, #0
   d7e98:	f7ff bff0 	b.w	d7e7c <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d7e9c <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d7e9c:	2000      	movs	r0, #0
   d7e9e:	f7ff bff9 	b.w	d7e94 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d7ea4 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7ea4:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d7ea6:	4b09      	ldr	r3, [pc, #36]	; (d7ecc <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7ea8:	4c09      	ldr	r4, [pc, #36]	; (d7ed0 <_GLOBAL__sub_I_System+0x2c>)
   d7eaa:	2202      	movs	r2, #2
   d7eac:	2000      	movs	r0, #0
   d7eae:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d7eb0:	4b08      	ldr	r3, [pc, #32]	; (d7ed4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d7eb2:	6020      	str	r0, [r4, #0]
   d7eb4:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d7eb6:	71a0      	strb	r0, [r4, #6]
   d7eb8:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7eba:	f7fe ffd9 	bl	d6e70 <set_system_mode>
SystemClass System;
   d7ebe:	4620      	mov	r0, r4
   d7ec0:	4a05      	ldr	r2, [pc, #20]	; (d7ed8 <_GLOBAL__sub_I_System+0x34>)
   d7ec2:	4906      	ldr	r1, [pc, #24]	; (d7edc <_GLOBAL__sub_I_System+0x38>)
   d7ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d7ec8:	f000 bc7a 	b.w	d87c0 <__aeabi_atexit>
   d7ecc:	2003e640 	.word	0x2003e640
   d7ed0:	2003e634 	.word	0x2003e634
   d7ed4:	ffff0000 	.word	0xffff0000
   d7ed8:	2003dea0 	.word	0x2003dea0
   d7edc:	000d42c7 	.word	0x000d42c7

000d7ee0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d7ee4:	4a15      	ldr	r2, [pc, #84]	; (d7f3c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7ee6:	f8df 8060 	ldr.w	r8, [pc, #96]	; d7f48 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d7eea:	e9d2 3200 	ldrd	r3, r2, [r2]
   d7eee:	18c0      	adds	r0, r0, r3
   d7ef0:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d7ef4:	4a12      	ldr	r2, [pc, #72]	; (d7f40 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d7ef6:	e9d2 3200 	ldrd	r3, r2, [r2]
   d7efa:	18c6      	adds	r6, r0, r3
   d7efc:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d7f00:	e9d8 2300 	ldrd	r2, r3, [r8]
   d7f04:	42bb      	cmp	r3, r7
   d7f06:	bf08      	it	eq
   d7f08:	42b2      	cmpeq	r2, r6
{
   d7f0a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d7f0c:	d013      	beq.n	d7f36 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d7f0e:	a903      	add	r1, sp, #12
   d7f10:	4668      	mov	r0, sp
   d7f12:	e9cd 6700 	strd	r6, r7, [sp]
   d7f16:	f7ff f901 	bl	d711c <localtime_r>
	calendar_time.tm_year += 1900;
   d7f1a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7f1c:	4d09      	ldr	r5, [pc, #36]	; (d7f44 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d7f1e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7f22:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d7f24:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7f26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7f28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7f2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7f2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d7f2e:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7f32:	6823      	ldr	r3, [r4, #0]
   d7f34:	602b      	str	r3, [r5, #0]
    }
}
   d7f36:	b00c      	add	sp, #48	; 0x30
   d7f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7f3c:	2003e678 	.word	0x2003e678
   d7f40:	2003e670 	.word	0x2003e670
   d7f44:	2003e64c 	.word	0x2003e64c
   d7f48:	2003e680 	.word	0x2003e680

000d7f4c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d7f4c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7f4e:	2000      	movs	r0, #0
   d7f50:	f7ff f824 	bl	d6f9c <spark_sync_time_pending>
   d7f54:	b128      	cbz	r0, d7f62 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7f56:	f7fe fff9 	bl	d6f4c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7f5a:	f080 0001 	eor.w	r0, r0, #1
   d7f5e:	b2c0      	uxtb	r0, r0
    }
   d7f60:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7f62:	2001      	movs	r0, #1
   d7f64:	e7fc      	b.n	d7f60 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d7f66 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d7f66:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d7f68:	4602      	mov	r2, r0
   d7f6a:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d7f6c:	4668      	mov	r0, sp
    struct timeval tv = {
   d7f6e:	2100      	movs	r1, #0
    };
   d7f70:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d7f74:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d7f78:	f7fe fe22 	bl	d6bc0 <hal_rtc_set_time>
   d7f7c:	4602      	mov	r2, r0
   d7f7e:	b910      	cbnz	r0, d7f86 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d7f80:	4601      	mov	r1, r0
   d7f82:	f7fe ffa5 	bl	d6ed0 <system_notify_time_changed>
    }
}
   d7f86:	b005      	add	sp, #20
   d7f88:	f85d fb04 	ldr.w	pc, [sp], #4

000d7f8c <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d7f8c:	b530      	push	{r4, r5, lr}
   d7f8e:	4604      	mov	r4, r0
    t += time_zone_cache;
   d7f90:	4818      	ldr	r0, [pc, #96]	; (d7ff4 <_ZN9TimeClass7timeStrEx+0x68>)
   d7f92:	e9d0 1000 	ldrd	r1, r0, [r0]
   d7f96:	1852      	adds	r2, r2, r1
   d7f98:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d7f9c:	4816      	ldr	r0, [pc, #88]	; (d7ff8 <_ZN9TimeClass7timeStrEx+0x6c>)
   d7f9e:	e9d0 1000 	ldrd	r1, r0, [r0]
   d7fa2:	1852      	adds	r2, r2, r1
{
   d7fa4:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d7fa6:	eb40 0303 	adc.w	r3, r0, r3
   d7faa:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d7fae:	2224      	movs	r2, #36	; 0x24
   d7fb0:	eb0d 0002 	add.w	r0, sp, r2
   d7fb4:	2100      	movs	r1, #0
   d7fb6:	f001 faa5 	bl	d9504 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d7fba:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d7fbc:	a909      	add	r1, sp, #36	; 0x24
   d7fbe:	4668      	mov	r0, sp
   d7fc0:	f7ff f8ac 	bl	d711c <localtime_r>
    char ascstr[26] = {};
   d7fc4:	2216      	movs	r2, #22
   d7fc6:	4629      	mov	r1, r5
   d7fc8:	a803      	add	r0, sp, #12
   d7fca:	9502      	str	r5, [sp, #8]
   d7fcc:	f001 fa9a 	bl	d9504 <memset>
    asctime_r(&calendar_time, ascstr);
   d7fd0:	a902      	add	r1, sp, #8
   d7fd2:	a809      	add	r0, sp, #36	; 0x24
   d7fd4:	f001 fa20 	bl	d9418 <asctime_r>
    int len = strlen(ascstr);
   d7fd8:	a802      	add	r0, sp, #8
   d7fda:	f001 faee 	bl	d95ba <strlen>
    ascstr[len-1] = 0; // remove final newline
   d7fde:	ab12      	add	r3, sp, #72	; 0x48
   d7fe0:	4418      	add	r0, r3
    return String(ascstr);
   d7fe2:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d7fe4:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d7fe8:	4620      	mov	r0, r4
   d7fea:	f7ff fea4 	bl	d7d36 <_ZN6StringC1EPKc>
}
   d7fee:	4620      	mov	r0, r4
   d7ff0:	b013      	add	sp, #76	; 0x4c
   d7ff2:	bd30      	pop	{r4, r5, pc}
   d7ff4:	2003e678 	.word	0x2003e678
   d7ff8:	2003e670 	.word	0x2003e670

000d7ffc <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d7ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8000:	b0a5      	sub	sp, #148	; 0x94
   d8002:	4607      	mov	r7, r0
   d8004:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d8006:	a814      	add	r0, sp, #80	; 0x50
{
   d8008:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d800a:	223f      	movs	r2, #63	; 0x3f
{
   d800c:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d800e:	f001 faee 	bl	d95ee <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d8012:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d8014:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d8016:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d801a:	f001 face 	bl	d95ba <strlen>
   d801e:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d8020:	bb5d      	cbnz	r5, d807a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d8022:	492a      	ldr	r1, [pc, #168]	; (d80cc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d8024:	a803      	add	r0, sp, #12
   d8026:	f001 faa3 	bl	d9570 <strcpy>
   d802a:	ae14      	add	r6, sp, #80	; 0x50
{
   d802c:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d802e:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d8032:	45ab      	cmp	fp, r5
   d8034:	d936      	bls.n	d80a4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d8036:	46b1      	mov	r9, r6
   d8038:	f105 0a01 	add.w	sl, r5, #1
   d803c:	f819 3b01 	ldrb.w	r3, [r9], #1
   d8040:	2b25      	cmp	r3, #37	; 0x25
   d8042:	d117      	bne.n	d8074 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d8044:	7873      	ldrb	r3, [r6, #1]
   d8046:	2b7a      	cmp	r3, #122	; 0x7a
   d8048:	d114      	bne.n	d8074 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d804a:	a803      	add	r0, sp, #12
   d804c:	f001 fab5 	bl	d95ba <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d8050:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d8052:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d8054:	1828      	adds	r0, r5, r0
   d8056:	4418      	add	r0, r3
   d8058:	ebab 0205 	sub.w	r2, fp, r5
   d805c:	1cb1      	adds	r1, r6, #2
   d805e:	f001 fa29 	bl	d94b4 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d8062:	4622      	mov	r2, r4
   d8064:	a903      	add	r1, sp, #12
   d8066:	4630      	mov	r0, r6
   d8068:	f001 fa24 	bl	d94b4 <memcpy>
            len = strlen(format_str);
   d806c:	a814      	add	r0, sp, #80	; 0x50
   d806e:	f001 faa4 	bl	d95ba <strlen>
   d8072:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d8074:	464e      	mov	r6, r9
   d8076:	4655      	mov	r5, sl
   d8078:	e7d9      	b.n	d802e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d807a:	213c      	movs	r1, #60	; 0x3c
   d807c:	fb95 f3f1 	sdiv	r3, r5, r1
   d8080:	2b00      	cmp	r3, #0
   d8082:	bfb8      	it	lt
   d8084:	425b      	neglt	r3, r3
   d8086:	fbb3 f2f1 	udiv	r2, r3, r1
   d808a:	fb01 3312 	mls	r3, r1, r2, r3
   d808e:	9300      	str	r3, [sp, #0]
   d8090:	4a0f      	ldr	r2, [pc, #60]	; (d80d0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d8092:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d8096:	2110      	movs	r1, #16
   d8098:	a803      	add	r0, sp, #12
   d809a:	fb95 f3f3 	sdiv	r3, r5, r3
   d809e:	f7ff f80d 	bl	d70bc <snprintf>
   d80a2:	e7c2      	b.n	d802a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d80a4:	2100      	movs	r1, #0
   d80a6:	222e      	movs	r2, #46	; 0x2e
   d80a8:	a808      	add	r0, sp, #32
   d80aa:	9107      	str	r1, [sp, #28]
   d80ac:	f001 fa2a 	bl	d9504 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d80b0:	4643      	mov	r3, r8
   d80b2:	aa14      	add	r2, sp, #80	; 0x50
   d80b4:	2132      	movs	r1, #50	; 0x32
   d80b6:	a807      	add	r0, sp, #28
   d80b8:	f7ff f828 	bl	d710c <strftime>
    return String(buf);
   d80bc:	a907      	add	r1, sp, #28
   d80be:	4638      	mov	r0, r7
   d80c0:	f7ff fe39 	bl	d7d36 <_ZN6StringC1EPKc>
}
   d80c4:	4638      	mov	r0, r7
   d80c6:	b025      	add	sp, #148	; 0x94
   d80c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d80cc:	000dbe8c 	.word	0x000dbe8c
   d80d0:	000dbe8e 	.word	0x000dbe8e

000d80d4 <_ZN9TimeClass6formatExPKc>:
{
   d80d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d80d6:	b08d      	sub	sp, #52	; 0x34
   d80d8:	e9cd 2300 	strd	r2, r3, [sp]
   d80dc:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d80de:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d80e0:	b915      	cbnz	r5, d80e8 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d80e2:	4b19      	ldr	r3, [pc, #100]	; (d8148 <_ZN9TimeClass6formatExPKc+0x74>)
   d80e4:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d80e6:	b12d      	cbz	r5, d80f4 <_ZN9TimeClass6formatExPKc+0x20>
   d80e8:	4b18      	ldr	r3, [pc, #96]	; (d814c <_ZN9TimeClass6formatExPKc+0x78>)
   d80ea:	4628      	mov	r0, r5
   d80ec:	6819      	ldr	r1, [r3, #0]
   d80ee:	f001 fa35 	bl	d955c <strcmp>
   d80f2:	b938      	cbnz	r0, d8104 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d80f4:	e9dd 2300 	ldrd	r2, r3, [sp]
   d80f8:	4620      	mov	r0, r4
   d80fa:	f7ff ff47 	bl	d7f8c <_ZN9TimeClass7timeStrEx>
}
   d80fe:	4620      	mov	r0, r4
   d8100:	b00d      	add	sp, #52	; 0x34
   d8102:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d8104:	4e12      	ldr	r6, [pc, #72]	; (d8150 <_ZN9TimeClass6formatExPKc+0x7c>)
   d8106:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d8108:	4f12      	ldr	r7, [pc, #72]	; (d8154 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d810a:	e9d6 3200 	ldrd	r3, r2, [r6]
   d810e:	185b      	adds	r3, r3, r1
   d8110:	9901      	ldr	r1, [sp, #4]
   d8112:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d8116:	e9d7 0100 	ldrd	r0, r1, [r7]
   d811a:	181b      	adds	r3, r3, r0
   d811c:	eb41 0202 	adc.w	r2, r1, r2
   d8120:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d8124:	2100      	movs	r1, #0
   d8126:	2224      	movs	r2, #36	; 0x24
   d8128:	a803      	add	r0, sp, #12
   d812a:	f001 f9eb 	bl	d9504 <memset>
    localtime_r(&t, &calendar_time);
   d812e:	a903      	add	r1, sp, #12
   d8130:	4668      	mov	r0, sp
   d8132:	f7fe fff3 	bl	d711c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d8136:	6832      	ldr	r2, [r6, #0]
   d8138:	683b      	ldr	r3, [r7, #0]
   d813a:	a903      	add	r1, sp, #12
   d813c:	4413      	add	r3, r2
   d813e:	4620      	mov	r0, r4
   d8140:	462a      	mov	r2, r5
   d8142:	f7ff ff5b 	bl	d7ffc <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d8146:	e7da      	b.n	d80fe <_ZN9TimeClass6formatExPKc+0x2a>
   d8148:	2003e648 	.word	0x2003e648
   d814c:	2003dcc0 	.word	0x2003dcc0
   d8150:	2003e678 	.word	0x2003e678
   d8154:	2003e670 	.word	0x2003e670

000d8158 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d8158:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d815a:	2000      	movs	r0, #0
   d815c:	f7fe fd18 	bl	d6b90 <hal_rtc_time_is_valid>
    if (rtcstate)
   d8160:	4604      	mov	r4, r0
   d8162:	b9a0      	cbnz	r0, d818e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8164:	f7fe fe7c 	bl	d6e60 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8168:	2801      	cmp	r0, #1
   d816a:	d110      	bne.n	d818e <_ZN9TimeClass7isValidEv+0x36>
   d816c:	4620      	mov	r0, r4
   d816e:	f7fe fea7 	bl	d6ec0 <system_thread_get_state>
   d8172:	b960      	cbnz	r0, d818e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d8174:	f7ff feea 	bl	d7f4c <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8178:	b910      	cbnz	r0, d8180 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d817a:	f7fe fedf 	bl	d6f3c <spark_process>
        while (_while() && !_condition()) {
   d817e:	e7f9      	b.n	d8174 <_ZN9TimeClass7isValidEv+0x1c>
   d8180:	f7ff fee4 	bl	d7f4c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d8184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d8188:	2000      	movs	r0, #0
   d818a:	f7fe bd01 	b.w	d6b90 <hal_rtc_time_is_valid>
}
   d818e:	4620      	mov	r0, r4
   d8190:	bd10      	pop	{r4, pc}

000d8192 <_ZN9TimeClass3nowEv>:
{
   d8192:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d8194:	f7ff ffe0 	bl	d8158 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d8198:	2210      	movs	r2, #16
   d819a:	2100      	movs	r1, #0
   d819c:	4668      	mov	r0, sp
   d819e:	f001 f9b1 	bl	d9504 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d81a2:	2100      	movs	r1, #0
   d81a4:	4668      	mov	r0, sp
   d81a6:	f7fe fd03 	bl	d6bb0 <hal_rtc_get_time>
}
   d81aa:	9800      	ldr	r0, [sp, #0]
   d81ac:	b005      	add	sp, #20
   d81ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d81b4 <_ZN9TimeClass4hourEv>:
{
   d81b4:	b508      	push	{r3, lr}
	return hour(now());
   d81b6:	f7ff ffec 	bl	d8192 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d81ba:	17c1      	asrs	r1, r0, #31
   d81bc:	f7ff fe90 	bl	d7ee0 <_ZL22Refresh_UnixTime_Cachex>
}
   d81c0:	4b01      	ldr	r3, [pc, #4]	; (d81c8 <_ZN9TimeClass4hourEv+0x14>)
   d81c2:	6898      	ldr	r0, [r3, #8]
   d81c4:	bd08      	pop	{r3, pc}
   d81c6:	bf00      	nop
   d81c8:	2003e64c 	.word	0x2003e64c

000d81cc <_ZN9TimeClass4yearEv>:
{
   d81cc:	b508      	push	{r3, lr}
	return year(now());
   d81ce:	f7ff ffe0 	bl	d8192 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d81d2:	17c1      	asrs	r1, r0, #31
   d81d4:	f7ff fe84 	bl	d7ee0 <_ZL22Refresh_UnixTime_Cachex>
}
   d81d8:	4b01      	ldr	r3, [pc, #4]	; (d81e0 <_ZN9TimeClass4yearEv+0x14>)
   d81da:	6958      	ldr	r0, [r3, #20]
   d81dc:	bd08      	pop	{r3, pc}
   d81de:	bf00      	nop
   d81e0:	2003e64c 	.word	0x2003e64c

000d81e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d81e4:	4b02      	ldr	r3, [pc, #8]	; (d81f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d81e6:	681a      	ldr	r2, [r3, #0]
   d81e8:	4b02      	ldr	r3, [pc, #8]	; (d81f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d81ea:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d81ec:	4770      	bx	lr
   d81ee:	bf00      	nop
   d81f0:	2003dcc0 	.word	0x2003dcc0
   d81f4:	2003e648 	.word	0x2003e648

000d81f8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d81f8:	4770      	bx	lr

000d81fa <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d81fa:	7441      	strb	r1, [r0, #17]
}
   d81fc:	4770      	bx	lr

000d81fe <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d81fe:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d8200:	7c00      	ldrb	r0, [r0, #16]
   d8202:	f7fe fde5 	bl	d6dd0 <hal_usart_available_data_for_write>
}
   d8206:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d820a:	bd08      	pop	{r3, pc}

000d820c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d820c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d820e:	7c00      	ldrb	r0, [r0, #16]
   d8210:	f7fe fdb6 	bl	d6d80 <hal_usart_available>
}
   d8214:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8218:	bd08      	pop	{r3, pc}

000d821a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d821a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d821c:	7c00      	ldrb	r0, [r0, #16]
   d821e:	f7fe fdbf 	bl	d6da0 <hal_usart_peek>
}
   d8222:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8226:	bd08      	pop	{r3, pc}

000d8228 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d8228:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d822a:	7c00      	ldrb	r0, [r0, #16]
   d822c:	f7fe fdb0 	bl	d6d90 <hal_usart_read>
}
   d8230:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8234:	bd08      	pop	{r3, pc}

000d8236 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d8236:	7c00      	ldrb	r0, [r0, #16]
   d8238:	f7fe bdba 	b.w	d6db0 <hal_usart_flush>

000d823c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d823c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d823e:	7c45      	ldrb	r5, [r0, #17]
{
   d8240:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8242:	b12d      	cbz	r5, d8250 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d8244:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d8246:	b003      	add	sp, #12
   d8248:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d824c:	f7fe bd90 	b.w	d6d70 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8250:	7c00      	ldrb	r0, [r0, #16]
   d8252:	9101      	str	r1, [sp, #4]
   d8254:	f7fe fdbc 	bl	d6dd0 <hal_usart_available_data_for_write>
   d8258:	2800      	cmp	r0, #0
   d825a:	9901      	ldr	r1, [sp, #4]
   d825c:	dcf2      	bgt.n	d8244 <_ZN11USARTSerial5writeEh+0x8>
}
   d825e:	4628      	mov	r0, r5
   d8260:	b003      	add	sp, #12
   d8262:	bd30      	pop	{r4, r5, pc}

000d8264 <_ZN11USARTSerialD0Ev>:
   d8264:	b510      	push	{r4, lr}
   d8266:	2114      	movs	r1, #20
   d8268:	4604      	mov	r4, r0
   d826a:	f000 faae 	bl	d87ca <_ZdlPvj>
   d826e:	4620      	mov	r0, r4
   d8270:	bd10      	pop	{r4, pc}
	...

000d8274 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d8274:	b510      	push	{r4, lr}
   d8276:	f04f 0c00 	mov.w	ip, #0
   d827a:	4604      	mov	r4, r0
   d827c:	4608      	mov	r0, r1
   d827e:	4611      	mov	r1, r2
   d8280:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8284:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d8288:	4a04      	ldr	r2, [pc, #16]	; (d829c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d828a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d828c:	2201      	movs	r2, #1
  _serial = serial;
   d828e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8290:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d8292:	461a      	mov	r2, r3
   d8294:	f7fe fd64 	bl	d6d60 <hal_usart_init>
}
   d8298:	4620      	mov	r0, r4
   d829a:	bd10      	pop	{r4, pc}
   d829c:	000dbec0 	.word	0x000dbec0

000d82a0 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d82a0:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d82a2:	4c0e      	ldr	r4, [pc, #56]	; (d82dc <_Z22__fetch_global_Serial1v+0x3c>)
   d82a4:	7821      	ldrb	r1, [r4, #0]
   d82a6:	f3bf 8f5b 	dmb	ish
   d82aa:	f011 0101 	ands.w	r1, r1, #1
   d82ae:	d112      	bne.n	d82d6 <_Z22__fetch_global_Serial1v+0x36>
   d82b0:	4620      	mov	r0, r4
   d82b2:	9101      	str	r1, [sp, #4]
   d82b4:	f7fb ff00 	bl	d40b8 <__cxa_guard_acquire>
   d82b8:	9901      	ldr	r1, [sp, #4]
   d82ba:	b160      	cbz	r0, d82d6 <_Z22__fetch_global_Serial1v+0x36>
   d82bc:	4a08      	ldr	r2, [pc, #32]	; (d82e0 <_Z22__fetch_global_Serial1v+0x40>)
   d82be:	4b09      	ldr	r3, [pc, #36]	; (d82e4 <_Z22__fetch_global_Serial1v+0x44>)
   d82c0:	4809      	ldr	r0, [pc, #36]	; (d82e8 <_Z22__fetch_global_Serial1v+0x48>)
   d82c2:	f7ff ffd7 	bl	d8274 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d82c6:	4620      	mov	r0, r4
   d82c8:	f7fb fefb 	bl	d40c2 <__cxa_guard_release>
   d82cc:	4a07      	ldr	r2, [pc, #28]	; (d82ec <_Z22__fetch_global_Serial1v+0x4c>)
   d82ce:	4908      	ldr	r1, [pc, #32]	; (d82f0 <_Z22__fetch_global_Serial1v+0x50>)
   d82d0:	4805      	ldr	r0, [pc, #20]	; (d82e8 <_Z22__fetch_global_Serial1v+0x48>)
   d82d2:	f000 fa75 	bl	d87c0 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d82d6:	4804      	ldr	r0, [pc, #16]	; (d82e8 <_Z22__fetch_global_Serial1v+0x48>)
   d82d8:	b002      	add	sp, #8
   d82da:	bd10      	pop	{r4, pc}
   d82dc:	2003e688 	.word	0x2003e688
   d82e0:	2003e68c 	.word	0x2003e68c
   d82e4:	2003e710 	.word	0x2003e710
   d82e8:	2003e794 	.word	0x2003e794
   d82ec:	2003dea0 	.word	0x2003dea0
   d82f0:	000d81f9 	.word	0x000d81f9

000d82f4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d82f4:	7441      	strb	r1, [r0, #17]
}
   d82f6:	4770      	bx	lr

000d82f8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d82f8:	4770      	bx	lr

000d82fa <_ZN9USBSerial4readEv>:
{
   d82fa:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d82fc:	2100      	movs	r1, #0
   d82fe:	7c00      	ldrb	r0, [r0, #16]
   d8300:	f7fe fd86 	bl	d6e10 <HAL_USB_USART_Receive_Data>
}
   d8304:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8308:	bd08      	pop	{r3, pc}

000d830a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d830a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d830c:	2101      	movs	r1, #1
   d830e:	7c00      	ldrb	r0, [r0, #16]
   d8310:	f7fe fd7e 	bl	d6e10 <HAL_USB_USART_Receive_Data>
}
   d8314:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8318:	bd08      	pop	{r3, pc}

000d831a <_ZN9USBSerial17availableForWriteEv>:
{
   d831a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d831c:	7c00      	ldrb	r0, [r0, #16]
   d831e:	f7fe fd6f 	bl	d6e00 <HAL_USB_USART_Available_Data_For_Write>
}
   d8322:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8326:	bd08      	pop	{r3, pc}

000d8328 <_ZN9USBSerial9availableEv>:
{
   d8328:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d832a:	7c00      	ldrb	r0, [r0, #16]
   d832c:	f7fe fd60 	bl	d6df0 <HAL_USB_USART_Available_Data>
}
   d8330:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8334:	bd08      	pop	{r3, pc}

000d8336 <_ZN9USBSerial5writeEh>:
{
   d8336:	b513      	push	{r0, r1, r4, lr}
   d8338:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d833a:	7c00      	ldrb	r0, [r0, #16]
{
   d833c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d833e:	f7fe fd5f 	bl	d6e00 <HAL_USB_USART_Available_Data_For_Write>
   d8342:	2800      	cmp	r0, #0
   d8344:	9901      	ldr	r1, [sp, #4]
   d8346:	dc01      	bgt.n	d834c <_ZN9USBSerial5writeEh+0x16>
   d8348:	7c60      	ldrb	r0, [r4, #17]
   d834a:	b120      	cbz	r0, d8356 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d834c:	7c20      	ldrb	r0, [r4, #16]
   d834e:	f7fe fd67 	bl	d6e20 <HAL_USB_USART_Send_Data>
   d8352:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d8356:	b002      	add	sp, #8
   d8358:	bd10      	pop	{r4, pc}

000d835a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d835a:	7c00      	ldrb	r0, [r0, #16]
   d835c:	f7fe bd68 	b.w	d6e30 <HAL_USB_USART_Flush_Data>

000d8360 <_ZN9USBSerialD0Ev>:
   d8360:	b510      	push	{r4, lr}
   d8362:	2114      	movs	r1, #20
   d8364:	4604      	mov	r4, r0
   d8366:	f000 fa30 	bl	d87ca <_ZdlPvj>
   d836a:	4620      	mov	r0, r4
   d836c:	bd10      	pop	{r4, pc}
	...

000d8370 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8370:	b510      	push	{r4, lr}
   d8372:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8376:	4604      	mov	r4, r0
   d8378:	4608      	mov	r0, r1
   d837a:	2100      	movs	r1, #0
   d837c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8380:	4b04      	ldr	r3, [pc, #16]	; (d8394 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8382:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d8384:	2301      	movs	r3, #1
  _serial = serial;
   d8386:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8388:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d838a:	4611      	mov	r1, r2
   d838c:	f7fe fd28 	bl	d6de0 <HAL_USB_USART_Init>
}
   d8390:	4620      	mov	r0, r4
   d8392:	bd10      	pop	{r4, pc}
   d8394:	000dbef0 	.word	0x000dbef0

000d8398 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8398:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d839a:	2214      	movs	r2, #20
{
   d839c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d839e:	2100      	movs	r1, #0
   d83a0:	f001 f8b0 	bl	d9504 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d83a4:	4620      	mov	r0, r4
   d83a6:	bd10      	pop	{r4, pc}

000d83a8 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d83a8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d83aa:	4c10      	ldr	r4, [pc, #64]	; (d83ec <_Z16_fetch_usbserialv+0x44>)
{
   d83ac:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d83ae:	a803      	add	r0, sp, #12
   d83b0:	f7ff fff2 	bl	d8398 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d83b4:	7821      	ldrb	r1, [r4, #0]
   d83b6:	f3bf 8f5b 	dmb	ish
   d83ba:	f011 0101 	ands.w	r1, r1, #1
   d83be:	d111      	bne.n	d83e4 <_Z16_fetch_usbserialv+0x3c>
   d83c0:	4620      	mov	r0, r4
   d83c2:	9101      	str	r1, [sp, #4]
   d83c4:	f7fb fe78 	bl	d40b8 <__cxa_guard_acquire>
   d83c8:	9901      	ldr	r1, [sp, #4]
   d83ca:	b158      	cbz	r0, d83e4 <_Z16_fetch_usbserialv+0x3c>
   d83cc:	aa03      	add	r2, sp, #12
   d83ce:	4808      	ldr	r0, [pc, #32]	; (d83f0 <_Z16_fetch_usbserialv+0x48>)
   d83d0:	f7ff ffce 	bl	d8370 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d83d4:	4620      	mov	r0, r4
   d83d6:	f7fb fe74 	bl	d40c2 <__cxa_guard_release>
   d83da:	4a06      	ldr	r2, [pc, #24]	; (d83f4 <_Z16_fetch_usbserialv+0x4c>)
   d83dc:	4906      	ldr	r1, [pc, #24]	; (d83f8 <_Z16_fetch_usbserialv+0x50>)
   d83de:	4804      	ldr	r0, [pc, #16]	; (d83f0 <_Z16_fetch_usbserialv+0x48>)
   d83e0:	f000 f9ee 	bl	d87c0 <__aeabi_atexit>
	return _usbserial;
}
   d83e4:	4802      	ldr	r0, [pc, #8]	; (d83f0 <_Z16_fetch_usbserialv+0x48>)
   d83e6:	b008      	add	sp, #32
   d83e8:	bd10      	pop	{r4, pc}
   d83ea:	bf00      	nop
   d83ec:	2003e7a8 	.word	0x2003e7a8
   d83f0:	2003e7ac 	.word	0x2003e7ac
   d83f4:	2003dea0 	.word	0x2003dea0
   d83f8:	000d82f9 	.word	0x000d82f9

000d83fc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d83fc:	2200      	movs	r2, #0
   d83fe:	6840      	ldr	r0, [r0, #4]
   d8400:	4611      	mov	r1, r2
   d8402:	f7fe be03 	b.w	d700c <network_ready>

000d8406 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8406:	2200      	movs	r2, #0
   d8408:	6840      	ldr	r0, [r0, #4]
   d840a:	4611      	mov	r1, r2
   d840c:	f7fe be1e 	b.w	d704c <network_listening>

000d8410 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8410:	2200      	movs	r2, #0
   d8412:	6840      	ldr	r0, [r0, #4]
   d8414:	4611      	mov	r1, r2
   d8416:	f7fe be29 	b.w	d706c <network_get_listen_timeout>

000d841a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d841a:	6840      	ldr	r0, [r0, #4]
   d841c:	2200      	movs	r2, #0
   d841e:	f7fe be1d 	b.w	d705c <network_set_listen_timeout>

000d8422 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8422:	6840      	ldr	r0, [r0, #4]
   d8424:	2200      	movs	r2, #0
   d8426:	f081 0101 	eor.w	r1, r1, #1
   d842a:	f7fe be07 	b.w	d703c <network_listen>

000d842e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d842e:	2300      	movs	r3, #0
   d8430:	6840      	ldr	r0, [r0, #4]
   d8432:	461a      	mov	r2, r3
   d8434:	4619      	mov	r1, r3
   d8436:	f7fe bdf9 	b.w	d702c <network_off>

000d843a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d843a:	2300      	movs	r3, #0
   d843c:	6840      	ldr	r0, [r0, #4]
   d843e:	461a      	mov	r2, r3
   d8440:	4619      	mov	r1, r3
   d8442:	f7fe bdeb 	b.w	d701c <network_on>

000d8446 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8446:	2200      	movs	r2, #0
   d8448:	6840      	ldr	r0, [r0, #4]
   d844a:	4611      	mov	r1, r2
   d844c:	f7fe bdce 	b.w	d6fec <network_connecting>

000d8450 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8450:	6840      	ldr	r0, [r0, #4]
   d8452:	2200      	movs	r2, #0
   d8454:	2102      	movs	r1, #2
   d8456:	f7fe bdd1 	b.w	d6ffc <network_disconnect>

000d845a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d845a:	2300      	movs	r3, #0
   d845c:	6840      	ldr	r0, [r0, #4]
   d845e:	461a      	mov	r2, r3
   d8460:	f7fe bdbc 	b.w	d6fdc <network_connect>

000d8464 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8464:	4b02      	ldr	r3, [pc, #8]	; (d8470 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d8466:	2204      	movs	r2, #4
   d8468:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d846a:	4a02      	ldr	r2, [pc, #8]	; (d8474 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d846c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d846e:	4770      	bx	lr
   d8470:	2003e7c0 	.word	0x2003e7c0
   d8474:	000dbf20 	.word	0x000dbf20

000d8478 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d8478:	b510      	push	{r4, lr}
   d847a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d847c:	f001 f89d 	bl	d95ba <strlen>
   d8480:	3801      	subs	r0, #1
   d8482:	1823      	adds	r3, r4, r0
   d8484:	4620      	mov	r0, r4
	while(i<j){
   d8486:	4283      	cmp	r3, r0
   d8488:	d906      	bls.n	d8498 <_Z11str_reversePc+0x20>
		c = *i;
   d848a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d848c:	7819      	ldrb	r1, [r3, #0]
   d848e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d8492:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d8496:	e7f6      	b.n	d8486 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d8498:	bd10      	pop	{r4, pc}

000d849a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d849a:	b570      	push	{r4, r5, r6, lr}
   d849c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d849e:	1e91      	subs	r1, r2, #2
   d84a0:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d84a2:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d84a4:	d822      	bhi.n	d84ec <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d84a6:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d84a8:	b16d      	cbz	r5, d84c6 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d84aa:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d84ae:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d84b2:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d84b4:	2d09      	cmp	r5, #9
                *ptr += '0';
   d84b6:	bf94      	ite	ls
   d84b8:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d84ba:	3157      	addhi	r1, #87	; 0x57
   d84bc:	b2c9      	uxtb	r1, r1
   d84be:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d84c2:	4635      	mov	r5, r6
	while(a){
   d84c4:	e7f0      	b.n	d84a8 <ultoa+0xe>
   d84c6:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d84c8:	4423      	add	r3, r4
            *ptr++ = '0';
   d84ca:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d84cc:	4293      	cmp	r3, r2
   d84ce:	d902      	bls.n	d84d6 <ultoa+0x3c>
            *ptr++ = '0';
   d84d0:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d84d4:	e7fa      	b.n	d84cc <ultoa+0x32>
   d84d6:	1a1a      	subs	r2, r3, r0
   d84d8:	4283      	cmp	r3, r0
   d84da:	bf38      	it	cc
   d84dc:	2200      	movcc	r2, #0

	*ptr = '\0';
   d84de:	2300      	movs	r3, #0
   d84e0:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d84e2:	4620      	mov	r0, r4
   d84e4:	f7ff ffc8 	bl	d8478 <_Z11str_reversePc>
	return buffer;
   d84e8:	4620      	mov	r0, r4
}
   d84ea:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d84ec:	2000      	movs	r0, #0
   d84ee:	e7fc      	b.n	d84ea <ultoa+0x50>

000d84f0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d84f0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d84f2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d84f4:	460c      	mov	r4, r1
   d84f6:	4615      	mov	r5, r2
	if(a<0){
   d84f8:	da0e      	bge.n	d8518 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d84fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d84fe:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d8502:	bf14      	ite	ne
   d8504:	4258      	negne	r0, r3
   d8506:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d8508:	2301      	movs	r3, #1
		*buffer = '-';
   d850a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d850c:	462a      	mov	r2, r5
   d850e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d8510:	f7ff ffc3 	bl	d849a <ultoa>
	}
	return buffer;
}
   d8514:	4620      	mov	r0, r4
   d8516:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d8518:	2301      	movs	r3, #1
   d851a:	e7f9      	b.n	d8510 <itoa+0x20>

000d851c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d851c:	4b01      	ldr	r3, [pc, #4]	; (d8524 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d851e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d8520:	4770      	bx	lr
   d8522:	bf00      	nop
   d8524:	2003dcc8 	.word	0x2003dcc8

000d8528 <serialEventRun>:
{
   d8528:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d852a:	4b0b      	ldr	r3, [pc, #44]	; (d8558 <serialEventRun+0x30>)
   d852c:	b143      	cbz	r3, d8540 <serialEventRun+0x18>
   d852e:	f7ff ff3b 	bl	d83a8 <_Z16_fetch_usbserialv>
   d8532:	6803      	ldr	r3, [r0, #0]
   d8534:	691b      	ldr	r3, [r3, #16]
   d8536:	4798      	blx	r3
   d8538:	2800      	cmp	r0, #0
   d853a:	dd01      	ble.n	d8540 <serialEventRun+0x18>
        serialEvent();
   d853c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d8540:	4b06      	ldr	r3, [pc, #24]	; (d855c <serialEventRun+0x34>)
   d8542:	b143      	cbz	r3, d8556 <serialEventRun+0x2e>
   d8544:	f7ff feac 	bl	d82a0 <_Z22__fetch_global_Serial1v>
   d8548:	6803      	ldr	r3, [r0, #0]
   d854a:	691b      	ldr	r3, [r3, #16]
   d854c:	4798      	blx	r3
   d854e:	2800      	cmp	r0, #0
   d8550:	dd01      	ble.n	d8556 <serialEventRun+0x2e>
        serialEvent1();
   d8552:	f3af 8000 	nop.w
}
   d8556:	bd08      	pop	{r3, pc}
	...

000d8560 <_post_loop>:
{
   d8560:	b508      	push	{r3, lr}
	serialEventRun();
   d8562:	f7ff ffe1 	bl	d8528 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8566:	f7fe fb0b 	bl	d6b80 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d856a:	4b01      	ldr	r3, [pc, #4]	; (d8570 <_post_loop+0x10>)
   d856c:	6018      	str	r0, [r3, #0]
}
   d856e:	bd08      	pop	{r3, pc}
   d8570:	2003e7dc 	.word	0x2003e7dc

000d8574 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8574:	4802      	ldr	r0, [pc, #8]	; (d8580 <_Z33system_initialize_user_backup_ramv+0xc>)
   d8576:	4a03      	ldr	r2, [pc, #12]	; (d8584 <_Z33system_initialize_user_backup_ramv+0x10>)
   d8578:	4903      	ldr	r1, [pc, #12]	; (d8588 <_Z33system_initialize_user_backup_ramv+0x14>)
   d857a:	1a12      	subs	r2, r2, r0
   d857c:	f000 bf9a 	b.w	d94b4 <memcpy>
   d8580:	2003f400 	.word	0x2003f400
   d8584:	2003fc04 	.word	0x2003fc04
   d8588:	000dc250 	.word	0x000dc250

000d858c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d858c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d858e:	2300      	movs	r3, #0
   d8590:	9300      	str	r3, [sp, #0]
   d8592:	461a      	mov	r2, r3
   d8594:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8598:	f7fe fcac 	bl	d6ef4 <system_ctrl_set_result>
}
   d859c:	b003      	add	sp, #12
   d859e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d85a4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d85a4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d85a6:	8843      	ldrh	r3, [r0, #2]
   d85a8:	2b0a      	cmp	r3, #10
   d85aa:	d008      	beq.n	d85be <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d85ac:	2b50      	cmp	r3, #80	; 0x50
   d85ae:	d10b      	bne.n	d85c8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d85b0:	4b09      	ldr	r3, [pc, #36]	; (d85d8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d85b2:	681b      	ldr	r3, [r3, #0]
   d85b4:	b14b      	cbz	r3, d85ca <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d85b6:	b003      	add	sp, #12
   d85b8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d85bc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d85be:	f7ff ffe5 	bl	d858c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d85c2:	b003      	add	sp, #12
   d85c4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d85c8:	2300      	movs	r3, #0
   d85ca:	9300      	str	r3, [sp, #0]
   d85cc:	461a      	mov	r2, r3
   d85ce:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d85d2:	f7fe fc8f 	bl	d6ef4 <system_ctrl_set_result>
}
   d85d6:	e7f4      	b.n	d85c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d85d8:	2003e7cc 	.word	0x2003e7cc

000d85dc <module_user_init_hook>:
{
   d85dc:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d85de:	4c12      	ldr	r4, [pc, #72]	; (d8628 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d85e0:	4812      	ldr	r0, [pc, #72]	; (d862c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d85e2:	4d13      	ldr	r5, [pc, #76]	; (d8630 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d85e4:	2100      	movs	r1, #0
   d85e6:	f7fe fd89 	bl	d70fc <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d85ea:	6823      	ldr	r3, [r4, #0]
   d85ec:	42ab      	cmp	r3, r5
   d85ee:	4b11      	ldr	r3, [pc, #68]	; (d8634 <module_user_init_hook+0x58>)
   d85f0:	bf0c      	ite	eq
   d85f2:	2201      	moveq	r2, #1
   d85f4:	2200      	movne	r2, #0
   d85f6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d85f8:	d002      	beq.n	d8600 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d85fa:	f7ff ffbb 	bl	d8574 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d85fe:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8600:	f7fe faa6 	bl	d6b50 <HAL_RNG_GetRandomNumber>
   d8604:	4604      	mov	r4, r0
    srand(seed);
   d8606:	f000 ff85 	bl	d9514 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d860a:	4b0b      	ldr	r3, [pc, #44]	; (d8638 <module_user_init_hook+0x5c>)
   d860c:	b113      	cbz	r3, d8614 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d860e:	4620      	mov	r0, r4
   d8610:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8614:	2100      	movs	r1, #0
   d8616:	4808      	ldr	r0, [pc, #32]	; (d8638 <module_user_init_hook+0x5c>)
   d8618:	f7fe fcd8 	bl	d6fcc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d861c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8620:	4806      	ldr	r0, [pc, #24]	; (d863c <module_user_init_hook+0x60>)
   d8622:	2100      	movs	r1, #0
   d8624:	f7fe bc5c 	b.w	d6ee0 <system_ctrl_set_app_request_handler>
   d8628:	2003fc00 	.word	0x2003fc00
   d862c:	000d851d 	.word	0x000d851d
   d8630:	9a271c1e 	.word	0x9a271c1e
   d8634:	2003e7c8 	.word	0x2003e7c8
   d8638:	00000000 	.word	0x00000000
   d863c:	000d85a5 	.word	0x000d85a5

000d8640 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d8640:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d8642:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d8644:	d902      	bls.n	d864c <pinAvailable+0xc>
    return false;
   d8646:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d8648:	b002      	add	sp, #8
   d864a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d864c:	f1a0 030b 	sub.w	r3, r0, #11
   d8650:	2b02      	cmp	r3, #2
   d8652:	d81a      	bhi.n	d868a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8654:	4c17      	ldr	r4, [pc, #92]	; (d86b4 <pinAvailable+0x74>)
   d8656:	7821      	ldrb	r1, [r4, #0]
   d8658:	f3bf 8f5b 	dmb	ish
   d865c:	f011 0101 	ands.w	r1, r1, #1
   d8660:	d10b      	bne.n	d867a <pinAvailable+0x3a>
   d8662:	4620      	mov	r0, r4
   d8664:	9101      	str	r1, [sp, #4]
   d8666:	f7fb fd27 	bl	d40b8 <__cxa_guard_acquire>
   d866a:	9901      	ldr	r1, [sp, #4]
   d866c:	b128      	cbz	r0, d867a <pinAvailable+0x3a>
   d866e:	4812      	ldr	r0, [pc, #72]	; (d86b8 <pinAvailable+0x78>)
   d8670:	f7ff fb0c 	bl	d7c8c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d8674:	4620      	mov	r0, r4
   d8676:	f7fb fd24 	bl	d40c2 <__cxa_guard_release>
   d867a:	4b0f      	ldr	r3, [pc, #60]	; (d86b8 <pinAvailable+0x78>)
   d867c:	7818      	ldrb	r0, [r3, #0]
   d867e:	f7fe fb67 	bl	d6d50 <hal_spi_is_enabled>
   d8682:	2800      	cmp	r0, #0
   d8684:	d1df      	bne.n	d8646 <pinAvailable+0x6>
  return true; // 'pin' is available
   d8686:	2001      	movs	r0, #1
   d8688:	e7de      	b.n	d8648 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d868a:	2801      	cmp	r0, #1
   d868c:	d809      	bhi.n	d86a2 <pinAvailable+0x62>
   d868e:	f000 f86f 	bl	d8770 <_Z19__fetch_global_Wirev>
   d8692:	2100      	movs	r1, #0
   d8694:	7c00      	ldrb	r0, [r0, #16]
   d8696:	f7fe fb13 	bl	d6cc0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d869a:	f080 0001 	eor.w	r0, r0, #1
   d869e:	b2c0      	uxtb	r0, r0
   d86a0:	e7d2      	b.n	d8648 <pinAvailable+0x8>
   d86a2:	3809      	subs	r0, #9
   d86a4:	2801      	cmp	r0, #1
   d86a6:	d8ee      	bhi.n	d8686 <pinAvailable+0x46>
   d86a8:	f7ff fdfa 	bl	d82a0 <_Z22__fetch_global_Serial1v>
   d86ac:	7c00      	ldrb	r0, [r0, #16]
   d86ae:	f7fe fb87 	bl	d6dc0 <hal_usart_is_enabled>
   d86b2:	e7f2      	b.n	d869a <pinAvailable+0x5a>
   d86b4:	2003e7d0 	.word	0x2003e7d0
   d86b8:	2003e7d4 	.word	0x2003e7d4

000d86bc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d86bc:	2823      	cmp	r0, #35	; 0x23
{
   d86be:	b538      	push	{r3, r4, r5, lr}
   d86c0:	4604      	mov	r4, r0
   d86c2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d86c4:	d80a      	bhi.n	d86dc <pinMode+0x20>
   d86c6:	29ff      	cmp	r1, #255	; 0xff
   d86c8:	d008      	beq.n	d86dc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d86ca:	f7ff ffb9 	bl	d8640 <pinAvailable>
   d86ce:	b128      	cbz	r0, d86dc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d86d0:	4629      	mov	r1, r5
   d86d2:	4620      	mov	r0, r4
}
   d86d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d86d8:	f7fe ba82 	b.w	d6be0 <HAL_Pin_Mode>
}
   d86dc:	bd38      	pop	{r3, r4, r5, pc}

000d86de <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d86de:	b538      	push	{r3, r4, r5, lr}
   d86e0:	4604      	mov	r4, r0
   d86e2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d86e4:	f7fe fa84 	bl	d6bf0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d86e8:	28ff      	cmp	r0, #255	; 0xff
   d86ea:	d010      	beq.n	d870e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d86ec:	2806      	cmp	r0, #6
   d86ee:	d804      	bhi.n	d86fa <digitalWrite+0x1c>
   d86f0:	234d      	movs	r3, #77	; 0x4d
   d86f2:	fa23 f000 	lsr.w	r0, r3, r0
   d86f6:	07c3      	lsls	r3, r0, #31
   d86f8:	d409      	bmi.n	d870e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d86fa:	4620      	mov	r0, r4
   d86fc:	f7ff ffa0 	bl	d8640 <pinAvailable>
   d8700:	b128      	cbz	r0, d870e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8702:	4629      	mov	r1, r5
   d8704:	4620      	mov	r0, r4
}
   d8706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d870a:	f7fe ba79 	b.w	d6c00 <HAL_GPIO_Write>
}
   d870e:	bd38      	pop	{r3, r4, r5, pc}

000d8710 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d8710:	280d      	cmp	r0, #13
{
   d8712:	b510      	push	{r4, lr}
   d8714:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8716:	bf9c      	itt	ls
   d8718:	340e      	addls	r4, #14
   d871a:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d871c:	4620      	mov	r0, r4
   d871e:	f7ff ff8f 	bl	d8640 <pinAvailable>
   d8722:	b150      	cbz	r0, d873a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8724:	2103      	movs	r1, #3
   d8726:	4620      	mov	r0, r4
   d8728:	f7fe fa52 	bl	d6bd0 <HAL_Validate_Pin_Function>
   d872c:	2803      	cmp	r0, #3
   d872e:	d104      	bne.n	d873a <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d8730:	4620      	mov	r0, r4
}
   d8732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d8736:	f7fe ba7b 	b.w	d6c30 <hal_adc_read>
}
   d873a:	2000      	movs	r0, #0
   d873c:	bd10      	pop	{r4, pc}
	...

000d8740 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d8740:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d8742:	2300      	movs	r3, #0
   d8744:	2520      	movs	r5, #32
   d8746:	8043      	strh	r3, [r0, #2]
   d8748:	2314      	movs	r3, #20
{
   d874a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d874c:	8003      	strh	r3, [r0, #0]
   d874e:	6085      	str	r5, [r0, #8]
   d8750:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8752:	4906      	ldr	r1, [pc, #24]	; (d876c <_Z17acquireWireBufferv+0x2c>)
   d8754:	4628      	mov	r0, r5
   d8756:	f000 f83c 	bl	d87d2 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d875a:	4904      	ldr	r1, [pc, #16]	; (d876c <_Z17acquireWireBufferv+0x2c>)
	};
   d875c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d875e:	4628      	mov	r0, r5
   d8760:	f000 f837 	bl	d87d2 <_ZnajRKSt9nothrow_t>
	};
   d8764:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d8766:	4620      	mov	r0, r4
   d8768:	bd38      	pop	{r3, r4, r5, pc}
   d876a:	bf00      	nop
   d876c:	000dbf4c 	.word	0x000dbf4c

000d8770 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8770:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8772:	4d0f      	ldr	r5, [pc, #60]	; (d87b0 <_Z19__fetch_global_Wirev+0x40>)
   d8774:	7829      	ldrb	r1, [r5, #0]
   d8776:	f3bf 8f5b 	dmb	ish
   d877a:	f011 0401 	ands.w	r4, r1, #1
{
   d877e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8780:	d113      	bne.n	d87aa <_Z19__fetch_global_Wirev+0x3a>
   d8782:	4628      	mov	r0, r5
   d8784:	f7fb fc98 	bl	d40b8 <__cxa_guard_acquire>
   d8788:	b178      	cbz	r0, d87aa <_Z19__fetch_global_Wirev+0x3a>
   d878a:	a801      	add	r0, sp, #4
   d878c:	f7ff ffd8 	bl	d8740 <_Z17acquireWireBufferv>
   d8790:	aa01      	add	r2, sp, #4
   d8792:	4621      	mov	r1, r4
   d8794:	4807      	ldr	r0, [pc, #28]	; (d87b4 <_Z19__fetch_global_Wirev+0x44>)
   d8796:	f7ff f86f 	bl	d7878 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d879a:	4628      	mov	r0, r5
   d879c:	f7fb fc91 	bl	d40c2 <__cxa_guard_release>
   d87a0:	4a05      	ldr	r2, [pc, #20]	; (d87b8 <_Z19__fetch_global_Wirev+0x48>)
   d87a2:	4906      	ldr	r1, [pc, #24]	; (d87bc <_Z19__fetch_global_Wirev+0x4c>)
   d87a4:	4803      	ldr	r0, [pc, #12]	; (d87b4 <_Z19__fetch_global_Wirev+0x44>)
   d87a6:	f000 f80b 	bl	d87c0 <__aeabi_atexit>
	return wire;
}
   d87aa:	4802      	ldr	r0, [pc, #8]	; (d87b4 <_Z19__fetch_global_Wirev+0x44>)
   d87ac:	b007      	add	sp, #28
   d87ae:	bd30      	pop	{r4, r5, pc}
   d87b0:	2003e7e0 	.word	0x2003e7e0
   d87b4:	2003e7e4 	.word	0x2003e7e4
   d87b8:	2003dea0 	.word	0x2003dea0
   d87bc:	000d7821 	.word	0x000d7821

000d87c0 <__aeabi_atexit>:
   d87c0:	460b      	mov	r3, r1
   d87c2:	4601      	mov	r1, r0
   d87c4:	4618      	mov	r0, r3
   d87c6:	f000 be55 	b.w	d9474 <__cxa_atexit>

000d87ca <_ZdlPvj>:
   d87ca:	f7fb bc68 	b.w	d409e <_ZdlPv>

000d87ce <_ZnwjRKSt9nothrow_t>:
   d87ce:	f7fb bc62 	b.w	d4096 <_Znwj>

000d87d2 <_ZnajRKSt9nothrow_t>:
   d87d2:	f7fb bc62 	b.w	d409a <_Znaj>

000d87d6 <_ZSt25__throw_bad_function_callv>:
   d87d6:	b508      	push	{r3, lr}
   d87d8:	f7fe fc78 	bl	d70cc <abort>

000d87dc <sqrt>:
   d87dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d87e0:	ed2d 8b02 	vpush	{d8}
   d87e4:	b08b      	sub	sp, #44	; 0x2c
   d87e6:	ec55 4b10 	vmov	r4, r5, d0
   d87ea:	f000 f855 	bl	d8898 <__ieee754_sqrt>
   d87ee:	4b28      	ldr	r3, [pc, #160]	; (d8890 <sqrt+0xb4>)
   d87f0:	eeb0 8a40 	vmov.f32	s16, s0
   d87f4:	eef0 8a60 	vmov.f32	s17, s1
   d87f8:	f993 7000 	ldrsb.w	r7, [r3]
   d87fc:	1c7b      	adds	r3, r7, #1
   d87fe:	d012      	beq.n	d8826 <sqrt+0x4a>
   d8800:	4622      	mov	r2, r4
   d8802:	462b      	mov	r3, r5
   d8804:	4620      	mov	r0, r4
   d8806:	4629      	mov	r1, r5
   d8808:	f000 fd62 	bl	d92d0 <__aeabi_dcmpun>
   d880c:	4606      	mov	r6, r0
   d880e:	b950      	cbnz	r0, d8826 <sqrt+0x4a>
   d8810:	f04f 0800 	mov.w	r8, #0
   d8814:	f04f 0900 	mov.w	r9, #0
   d8818:	4620      	mov	r0, r4
   d881a:	4629      	mov	r1, r5
   d881c:	4642      	mov	r2, r8
   d881e:	464b      	mov	r3, r9
   d8820:	f000 fd2e 	bl	d9280 <__aeabi_dcmplt>
   d8824:	b940      	cbnz	r0, d8838 <sqrt+0x5c>
   d8826:	eeb0 0a48 	vmov.f32	s0, s16
   d882a:	eef0 0a68 	vmov.f32	s1, s17
   d882e:	b00b      	add	sp, #44	; 0x2c
   d8830:	ecbd 8b02 	vpop	{d8}
   d8834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8838:	4b16      	ldr	r3, [pc, #88]	; (d8894 <sqrt+0xb8>)
   d883a:	9608      	str	r6, [sp, #32]
   d883c:	2201      	movs	r2, #1
   d883e:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8842:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d8846:	9200      	str	r2, [sp, #0]
   d8848:	9301      	str	r3, [sp, #4]
   d884a:	b197      	cbz	r7, d8872 <sqrt+0x96>
   d884c:	4642      	mov	r2, r8
   d884e:	464b      	mov	r3, r9
   d8850:	4640      	mov	r0, r8
   d8852:	4649      	mov	r1, r9
   d8854:	f000 fbcc 	bl	d8ff0 <__aeabi_ddiv>
   d8858:	2f02      	cmp	r7, #2
   d885a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d885e:	d10a      	bne.n	d8876 <sqrt+0x9a>
   d8860:	f7fe fc44 	bl	d70ec <__errno>
   d8864:	2321      	movs	r3, #33	; 0x21
   d8866:	6003      	str	r3, [r0, #0]
   d8868:	9b08      	ldr	r3, [sp, #32]
   d886a:	b963      	cbnz	r3, d8886 <sqrt+0xaa>
   d886c:	ed9d 8b06 	vldr	d8, [sp, #24]
   d8870:	e7d9      	b.n	d8826 <sqrt+0x4a>
   d8872:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d8876:	4668      	mov	r0, sp
   d8878:	f000 f8d2 	bl	d8a20 <matherr>
   d887c:	2800      	cmp	r0, #0
   d887e:	d0ef      	beq.n	d8860 <sqrt+0x84>
   d8880:	9b08      	ldr	r3, [sp, #32]
   d8882:	2b00      	cmp	r3, #0
   d8884:	d0f2      	beq.n	d886c <sqrt+0x90>
   d8886:	f7fe fc31 	bl	d70ec <__errno>
   d888a:	9b08      	ldr	r3, [sp, #32]
   d888c:	6003      	str	r3, [r0, #0]
   d888e:	e7ed      	b.n	d886c <sqrt+0x90>
   d8890:	2003dcc4 	.word	0x2003dcc4
   d8894:	000dbf50 	.word	0x000dbf50

000d8898 <__ieee754_sqrt>:
   d8898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d889c:	4a5f      	ldr	r2, [pc, #380]	; (d8a1c <__ieee754_sqrt+0x184>)
   d889e:	ec57 6b10 	vmov	r6, r7, d0
   d88a2:	43ba      	bics	r2, r7
   d88a4:	f000 8098 	beq.w	d89d8 <__ieee754_sqrt+0x140>
   d88a8:	2f00      	cmp	r7, #0
   d88aa:	ee10 4a10 	vmov	r4, s0
   d88ae:	463b      	mov	r3, r7
   d88b0:	dd4e      	ble.n	d8950 <__ieee754_sqrt+0xb8>
   d88b2:	1539      	asrs	r1, r7, #20
   d88b4:	d05b      	beq.n	d896e <__ieee754_sqrt+0xd6>
   d88b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d88ba:	07ca      	lsls	r2, r1, #31
   d88bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d88c0:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d88c4:	d403      	bmi.n	d88ce <__ieee754_sqrt+0x36>
   d88c6:	005b      	lsls	r3, r3, #1
   d88c8:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d88cc:	0064      	lsls	r4, r4, #1
   d88ce:	0fe2      	lsrs	r2, r4, #31
   d88d0:	f04f 0c00 	mov.w	ip, #0
   d88d4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d88d8:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d88dc:	0064      	lsls	r4, r4, #1
   d88de:	4666      	mov	r6, ip
   d88e0:	2516      	movs	r5, #22
   d88e2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d88e6:	18b1      	adds	r1, r6, r2
   d88e8:	4299      	cmp	r1, r3
   d88ea:	dc02      	bgt.n	d88f2 <__ieee754_sqrt+0x5a>
   d88ec:	1a5b      	subs	r3, r3, r1
   d88ee:	188e      	adds	r6, r1, r2
   d88f0:	4494      	add	ip, r2
   d88f2:	005b      	lsls	r3, r3, #1
   d88f4:	3d01      	subs	r5, #1
   d88f6:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d88fa:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d88fe:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8902:	d1f0      	bne.n	d88e6 <__ieee754_sqrt+0x4e>
   d8904:	462f      	mov	r7, r5
   d8906:	2020      	movs	r0, #32
   d8908:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d890c:	e009      	b.n	d8922 <__ieee754_sqrt+0x8a>
   d890e:	d03e      	beq.n	d898e <__ieee754_sqrt+0xf6>
   d8910:	0fe1      	lsrs	r1, r4, #31
   d8912:	3801      	subs	r0, #1
   d8914:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d8918:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d891c:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8920:	d03e      	beq.n	d89a0 <__ieee754_sqrt+0x108>
   d8922:	42b3      	cmp	r3, r6
   d8924:	eb02 0105 	add.w	r1, r2, r5
   d8928:	ddf1      	ble.n	d890e <__ieee754_sqrt+0x76>
   d892a:	2900      	cmp	r1, #0
   d892c:	eb01 0502 	add.w	r5, r1, r2
   d8930:	db09      	blt.n	d8946 <__ieee754_sqrt+0xae>
   d8932:	46b0      	mov	r8, r6
   d8934:	1b9b      	subs	r3, r3, r6
   d8936:	42a1      	cmp	r1, r4
   d8938:	bf88      	it	hi
   d893a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   d893e:	1a64      	subs	r4, r4, r1
   d8940:	4417      	add	r7, r2
   d8942:	4646      	mov	r6, r8
   d8944:	e7e4      	b.n	d8910 <__ieee754_sqrt+0x78>
   d8946:	2d00      	cmp	r5, #0
   d8948:	dbf3      	blt.n	d8932 <__ieee754_sqrt+0x9a>
   d894a:	f106 0801 	add.w	r8, r6, #1
   d894e:	e7f1      	b.n	d8934 <__ieee754_sqrt+0x9c>
   d8950:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d8954:	4332      	orrs	r2, r6
   d8956:	d036      	beq.n	d89c6 <__ieee754_sqrt+0x12e>
   d8958:	2f00      	cmp	r7, #0
   d895a:	d14d      	bne.n	d89f8 <__ieee754_sqrt+0x160>
   d895c:	4639      	mov	r1, r7
   d895e:	0ae2      	lsrs	r2, r4, #11
   d8960:	3915      	subs	r1, #21
   d8962:	0564      	lsls	r4, r4, #21
   d8964:	4613      	mov	r3, r2
   d8966:	2a00      	cmp	r2, #0
   d8968:	d0f9      	beq.n	d895e <__ieee754_sqrt+0xc6>
   d896a:	02d7      	lsls	r7, r2, #11
   d896c:	d451      	bmi.n	d8a12 <__ieee754_sqrt+0x17a>
   d896e:	2000      	movs	r0, #0
   d8970:	005b      	lsls	r3, r3, #1
   d8972:	02de      	lsls	r6, r3, #11
   d8974:	4605      	mov	r5, r0
   d8976:	f100 0001 	add.w	r0, r0, #1
   d897a:	d5f9      	bpl.n	d8970 <__ieee754_sqrt+0xd8>
   d897c:	461a      	mov	r2, r3
   d897e:	4623      	mov	r3, r4
   d8980:	4084      	lsls	r4, r0
   d8982:	f1c0 0020 	rsb	r0, r0, #32
   d8986:	40c3      	lsrs	r3, r0
   d8988:	4313      	orrs	r3, r2
   d898a:	1b49      	subs	r1, r1, r5
   d898c:	e793      	b.n	d88b6 <__ieee754_sqrt+0x1e>
   d898e:	42a1      	cmp	r1, r4
   d8990:	d8be      	bhi.n	d8910 <__ieee754_sqrt+0x78>
   d8992:	2900      	cmp	r1, #0
   d8994:	eb01 0502 	add.w	r5, r1, r2
   d8998:	dbd5      	blt.n	d8946 <__ieee754_sqrt+0xae>
   d899a:	4698      	mov	r8, r3
   d899c:	2300      	movs	r3, #0
   d899e:	e7ce      	b.n	d893e <__ieee754_sqrt+0xa6>
   d89a0:	4323      	orrs	r3, r4
   d89a2:	d112      	bne.n	d89ca <__ieee754_sqrt+0x132>
   d89a4:	0878      	lsrs	r0, r7, #1
   d89a6:	ea4f 016c 	mov.w	r1, ip, asr #1
   d89aa:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d89ae:	f01c 0f01 	tst.w	ip, #1
   d89b2:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d89b6:	bf18      	it	ne
   d89b8:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d89bc:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d89c0:	4602      	mov	r2, r0
   d89c2:	ec43 2b10 	vmov	d0, r2, r3
   d89c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d89ca:	1c7b      	adds	r3, r7, #1
   d89cc:	bf16      	itet	ne
   d89ce:	1c78      	addne	r0, r7, #1
   d89d0:	f10c 0c01 	addeq.w	ip, ip, #1
   d89d4:	0840      	lsrne	r0, r0, #1
   d89d6:	e7e6      	b.n	d89a6 <__ieee754_sqrt+0x10e>
   d89d8:	ee10 2a10 	vmov	r2, s0
   d89dc:	ee10 0a10 	vmov	r0, s0
   d89e0:	463b      	mov	r3, r7
   d89e2:	4639      	mov	r1, r7
   d89e4:	f000 f9da 	bl	d8d9c <__aeabi_dmul>
   d89e8:	4632      	mov	r2, r6
   d89ea:	463b      	mov	r3, r7
   d89ec:	f000 f820 	bl	d8a30 <__adddf3>
   d89f0:	ec41 0b10 	vmov	d0, r0, r1
   d89f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d89f8:	ee10 2a10 	vmov	r2, s0
   d89fc:	4630      	mov	r0, r6
   d89fe:	4639      	mov	r1, r7
   d8a00:	f000 f814 	bl	d8a2c <__aeabi_dsub>
   d8a04:	4602      	mov	r2, r0
   d8a06:	460b      	mov	r3, r1
   d8a08:	f000 faf2 	bl	d8ff0 <__aeabi_ddiv>
   d8a0c:	ec41 0b10 	vmov	d0, r0, r1
   d8a10:	e7d9      	b.n	d89c6 <__ieee754_sqrt+0x12e>
   d8a12:	4623      	mov	r3, r4
   d8a14:	2020      	movs	r0, #32
   d8a16:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d8a1a:	e7b4      	b.n	d8986 <__ieee754_sqrt+0xee>
   d8a1c:	7ff00000 	.word	0x7ff00000

000d8a20 <matherr>:
   d8a20:	2000      	movs	r0, #0
   d8a22:	4770      	bx	lr

000d8a24 <__aeabi_drsub>:
   d8a24:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8a28:	e002      	b.n	d8a30 <__adddf3>
   d8a2a:	bf00      	nop

000d8a2c <__aeabi_dsub>:
   d8a2c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8a30 <__adddf3>:
   d8a30:	b530      	push	{r4, r5, lr}
   d8a32:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8a36:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8a3a:	ea94 0f05 	teq	r4, r5
   d8a3e:	bf08      	it	eq
   d8a40:	ea90 0f02 	teqeq	r0, r2
   d8a44:	bf1f      	itttt	ne
   d8a46:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8a4a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8a4e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8a52:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8a56:	f000 80e2 	beq.w	d8c1e <__adddf3+0x1ee>
   d8a5a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8a5e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8a62:	bfb8      	it	lt
   d8a64:	426d      	neglt	r5, r5
   d8a66:	dd0c      	ble.n	d8a82 <__adddf3+0x52>
   d8a68:	442c      	add	r4, r5
   d8a6a:	ea80 0202 	eor.w	r2, r0, r2
   d8a6e:	ea81 0303 	eor.w	r3, r1, r3
   d8a72:	ea82 0000 	eor.w	r0, r2, r0
   d8a76:	ea83 0101 	eor.w	r1, r3, r1
   d8a7a:	ea80 0202 	eor.w	r2, r0, r2
   d8a7e:	ea81 0303 	eor.w	r3, r1, r3
   d8a82:	2d36      	cmp	r5, #54	; 0x36
   d8a84:	bf88      	it	hi
   d8a86:	bd30      	pophi	{r4, r5, pc}
   d8a88:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8a8c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8a90:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8a94:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8a98:	d002      	beq.n	d8aa0 <__adddf3+0x70>
   d8a9a:	4240      	negs	r0, r0
   d8a9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8aa0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8aa4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8aa8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8aac:	d002      	beq.n	d8ab4 <__adddf3+0x84>
   d8aae:	4252      	negs	r2, r2
   d8ab0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8ab4:	ea94 0f05 	teq	r4, r5
   d8ab8:	f000 80a7 	beq.w	d8c0a <__adddf3+0x1da>
   d8abc:	f1a4 0401 	sub.w	r4, r4, #1
   d8ac0:	f1d5 0e20 	rsbs	lr, r5, #32
   d8ac4:	db0d      	blt.n	d8ae2 <__adddf3+0xb2>
   d8ac6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8aca:	fa22 f205 	lsr.w	r2, r2, r5
   d8ace:	1880      	adds	r0, r0, r2
   d8ad0:	f141 0100 	adc.w	r1, r1, #0
   d8ad4:	fa03 f20e 	lsl.w	r2, r3, lr
   d8ad8:	1880      	adds	r0, r0, r2
   d8ada:	fa43 f305 	asr.w	r3, r3, r5
   d8ade:	4159      	adcs	r1, r3
   d8ae0:	e00e      	b.n	d8b00 <__adddf3+0xd0>
   d8ae2:	f1a5 0520 	sub.w	r5, r5, #32
   d8ae6:	f10e 0e20 	add.w	lr, lr, #32
   d8aea:	2a01      	cmp	r2, #1
   d8aec:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8af0:	bf28      	it	cs
   d8af2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8af6:	fa43 f305 	asr.w	r3, r3, r5
   d8afa:	18c0      	adds	r0, r0, r3
   d8afc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8b00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8b04:	d507      	bpl.n	d8b16 <__adddf3+0xe6>
   d8b06:	f04f 0e00 	mov.w	lr, #0
   d8b0a:	f1dc 0c00 	rsbs	ip, ip, #0
   d8b0e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8b12:	eb6e 0101 	sbc.w	r1, lr, r1
   d8b16:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8b1a:	d31b      	bcc.n	d8b54 <__adddf3+0x124>
   d8b1c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8b20:	d30c      	bcc.n	d8b3c <__adddf3+0x10c>
   d8b22:	0849      	lsrs	r1, r1, #1
   d8b24:	ea5f 0030 	movs.w	r0, r0, rrx
   d8b28:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8b2c:	f104 0401 	add.w	r4, r4, #1
   d8b30:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8b34:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8b38:	f080 809a 	bcs.w	d8c70 <__adddf3+0x240>
   d8b3c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8b40:	bf08      	it	eq
   d8b42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8b46:	f150 0000 	adcs.w	r0, r0, #0
   d8b4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8b4e:	ea41 0105 	orr.w	r1, r1, r5
   d8b52:	bd30      	pop	{r4, r5, pc}
   d8b54:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8b58:	4140      	adcs	r0, r0
   d8b5a:	eb41 0101 	adc.w	r1, r1, r1
   d8b5e:	3c01      	subs	r4, #1
   d8b60:	bf28      	it	cs
   d8b62:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d8b66:	d2e9      	bcs.n	d8b3c <__adddf3+0x10c>
   d8b68:	f091 0f00 	teq	r1, #0
   d8b6c:	bf04      	itt	eq
   d8b6e:	4601      	moveq	r1, r0
   d8b70:	2000      	moveq	r0, #0
   d8b72:	fab1 f381 	clz	r3, r1
   d8b76:	bf08      	it	eq
   d8b78:	3320      	addeq	r3, #32
   d8b7a:	f1a3 030b 	sub.w	r3, r3, #11
   d8b7e:	f1b3 0220 	subs.w	r2, r3, #32
   d8b82:	da0c      	bge.n	d8b9e <__adddf3+0x16e>
   d8b84:	320c      	adds	r2, #12
   d8b86:	dd08      	ble.n	d8b9a <__adddf3+0x16a>
   d8b88:	f102 0c14 	add.w	ip, r2, #20
   d8b8c:	f1c2 020c 	rsb	r2, r2, #12
   d8b90:	fa01 f00c 	lsl.w	r0, r1, ip
   d8b94:	fa21 f102 	lsr.w	r1, r1, r2
   d8b98:	e00c      	b.n	d8bb4 <__adddf3+0x184>
   d8b9a:	f102 0214 	add.w	r2, r2, #20
   d8b9e:	bfd8      	it	le
   d8ba0:	f1c2 0c20 	rsble	ip, r2, #32
   d8ba4:	fa01 f102 	lsl.w	r1, r1, r2
   d8ba8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8bac:	bfdc      	itt	le
   d8bae:	ea41 010c 	orrle.w	r1, r1, ip
   d8bb2:	4090      	lslle	r0, r2
   d8bb4:	1ae4      	subs	r4, r4, r3
   d8bb6:	bfa2      	ittt	ge
   d8bb8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8bbc:	4329      	orrge	r1, r5
   d8bbe:	bd30      	popge	{r4, r5, pc}
   d8bc0:	ea6f 0404 	mvn.w	r4, r4
   d8bc4:	3c1f      	subs	r4, #31
   d8bc6:	da1c      	bge.n	d8c02 <__adddf3+0x1d2>
   d8bc8:	340c      	adds	r4, #12
   d8bca:	dc0e      	bgt.n	d8bea <__adddf3+0x1ba>
   d8bcc:	f104 0414 	add.w	r4, r4, #20
   d8bd0:	f1c4 0220 	rsb	r2, r4, #32
   d8bd4:	fa20 f004 	lsr.w	r0, r0, r4
   d8bd8:	fa01 f302 	lsl.w	r3, r1, r2
   d8bdc:	ea40 0003 	orr.w	r0, r0, r3
   d8be0:	fa21 f304 	lsr.w	r3, r1, r4
   d8be4:	ea45 0103 	orr.w	r1, r5, r3
   d8be8:	bd30      	pop	{r4, r5, pc}
   d8bea:	f1c4 040c 	rsb	r4, r4, #12
   d8bee:	f1c4 0220 	rsb	r2, r4, #32
   d8bf2:	fa20 f002 	lsr.w	r0, r0, r2
   d8bf6:	fa01 f304 	lsl.w	r3, r1, r4
   d8bfa:	ea40 0003 	orr.w	r0, r0, r3
   d8bfe:	4629      	mov	r1, r5
   d8c00:	bd30      	pop	{r4, r5, pc}
   d8c02:	fa21 f004 	lsr.w	r0, r1, r4
   d8c06:	4629      	mov	r1, r5
   d8c08:	bd30      	pop	{r4, r5, pc}
   d8c0a:	f094 0f00 	teq	r4, #0
   d8c0e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8c12:	bf06      	itte	eq
   d8c14:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8c18:	3401      	addeq	r4, #1
   d8c1a:	3d01      	subne	r5, #1
   d8c1c:	e74e      	b.n	d8abc <__adddf3+0x8c>
   d8c1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8c22:	bf18      	it	ne
   d8c24:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8c28:	d029      	beq.n	d8c7e <__adddf3+0x24e>
   d8c2a:	ea94 0f05 	teq	r4, r5
   d8c2e:	bf08      	it	eq
   d8c30:	ea90 0f02 	teqeq	r0, r2
   d8c34:	d005      	beq.n	d8c42 <__adddf3+0x212>
   d8c36:	ea54 0c00 	orrs.w	ip, r4, r0
   d8c3a:	bf04      	itt	eq
   d8c3c:	4619      	moveq	r1, r3
   d8c3e:	4610      	moveq	r0, r2
   d8c40:	bd30      	pop	{r4, r5, pc}
   d8c42:	ea91 0f03 	teq	r1, r3
   d8c46:	bf1e      	ittt	ne
   d8c48:	2100      	movne	r1, #0
   d8c4a:	2000      	movne	r0, #0
   d8c4c:	bd30      	popne	{r4, r5, pc}
   d8c4e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8c52:	d105      	bne.n	d8c60 <__adddf3+0x230>
   d8c54:	0040      	lsls	r0, r0, #1
   d8c56:	4149      	adcs	r1, r1
   d8c58:	bf28      	it	cs
   d8c5a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8c5e:	bd30      	pop	{r4, r5, pc}
   d8c60:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8c64:	bf3c      	itt	cc
   d8c66:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8c6a:	bd30      	popcc	{r4, r5, pc}
   d8c6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8c70:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8c74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8c78:	f04f 0000 	mov.w	r0, #0
   d8c7c:	bd30      	pop	{r4, r5, pc}
   d8c7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8c82:	bf1a      	itte	ne
   d8c84:	4619      	movne	r1, r3
   d8c86:	4610      	movne	r0, r2
   d8c88:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8c8c:	bf1c      	itt	ne
   d8c8e:	460b      	movne	r3, r1
   d8c90:	4602      	movne	r2, r0
   d8c92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8c96:	bf06      	itte	eq
   d8c98:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8c9c:	ea91 0f03 	teqeq	r1, r3
   d8ca0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8ca4:	bd30      	pop	{r4, r5, pc}
   d8ca6:	bf00      	nop

000d8ca8 <__aeabi_ui2d>:
   d8ca8:	f090 0f00 	teq	r0, #0
   d8cac:	bf04      	itt	eq
   d8cae:	2100      	moveq	r1, #0
   d8cb0:	4770      	bxeq	lr
   d8cb2:	b530      	push	{r4, r5, lr}
   d8cb4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8cb8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8cbc:	f04f 0500 	mov.w	r5, #0
   d8cc0:	f04f 0100 	mov.w	r1, #0
   d8cc4:	e750      	b.n	d8b68 <__adddf3+0x138>
   d8cc6:	bf00      	nop

000d8cc8 <__aeabi_i2d>:
   d8cc8:	f090 0f00 	teq	r0, #0
   d8ccc:	bf04      	itt	eq
   d8cce:	2100      	moveq	r1, #0
   d8cd0:	4770      	bxeq	lr
   d8cd2:	b530      	push	{r4, r5, lr}
   d8cd4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8cd8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8cdc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8ce0:	bf48      	it	mi
   d8ce2:	4240      	negmi	r0, r0
   d8ce4:	f04f 0100 	mov.w	r1, #0
   d8ce8:	e73e      	b.n	d8b68 <__adddf3+0x138>
   d8cea:	bf00      	nop

000d8cec <__aeabi_f2d>:
   d8cec:	0042      	lsls	r2, r0, #1
   d8cee:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8cf2:	ea4f 0131 	mov.w	r1, r1, rrx
   d8cf6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8cfa:	bf1f      	itttt	ne
   d8cfc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8d00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8d04:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8d08:	4770      	bxne	lr
   d8d0a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d8d0e:	bf08      	it	eq
   d8d10:	4770      	bxeq	lr
   d8d12:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8d16:	bf04      	itt	eq
   d8d18:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8d1c:	4770      	bxeq	lr
   d8d1e:	b530      	push	{r4, r5, lr}
   d8d20:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8d24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8d28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8d2c:	e71c      	b.n	d8b68 <__adddf3+0x138>
   d8d2e:	bf00      	nop

000d8d30 <__aeabi_ul2d>:
   d8d30:	ea50 0201 	orrs.w	r2, r0, r1
   d8d34:	bf08      	it	eq
   d8d36:	4770      	bxeq	lr
   d8d38:	b530      	push	{r4, r5, lr}
   d8d3a:	f04f 0500 	mov.w	r5, #0
   d8d3e:	e00a      	b.n	d8d56 <__aeabi_l2d+0x16>

000d8d40 <__aeabi_l2d>:
   d8d40:	ea50 0201 	orrs.w	r2, r0, r1
   d8d44:	bf08      	it	eq
   d8d46:	4770      	bxeq	lr
   d8d48:	b530      	push	{r4, r5, lr}
   d8d4a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8d4e:	d502      	bpl.n	d8d56 <__aeabi_l2d+0x16>
   d8d50:	4240      	negs	r0, r0
   d8d52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8d56:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8d5a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8d5e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8d62:	f43f aed8 	beq.w	d8b16 <__adddf3+0xe6>
   d8d66:	f04f 0203 	mov.w	r2, #3
   d8d6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8d6e:	bf18      	it	ne
   d8d70:	3203      	addne	r2, #3
   d8d72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8d76:	bf18      	it	ne
   d8d78:	3203      	addne	r2, #3
   d8d7a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8d7e:	f1c2 0320 	rsb	r3, r2, #32
   d8d82:	fa00 fc03 	lsl.w	ip, r0, r3
   d8d86:	fa20 f002 	lsr.w	r0, r0, r2
   d8d8a:	fa01 fe03 	lsl.w	lr, r1, r3
   d8d8e:	ea40 000e 	orr.w	r0, r0, lr
   d8d92:	fa21 f102 	lsr.w	r1, r1, r2
   d8d96:	4414      	add	r4, r2
   d8d98:	e6bd      	b.n	d8b16 <__adddf3+0xe6>
   d8d9a:	bf00      	nop

000d8d9c <__aeabi_dmul>:
   d8d9c:	b570      	push	{r4, r5, r6, lr}
   d8d9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8da2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8da6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8daa:	bf1d      	ittte	ne
   d8dac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8db0:	ea94 0f0c 	teqne	r4, ip
   d8db4:	ea95 0f0c 	teqne	r5, ip
   d8db8:	f000 f8de 	bleq	d8f78 <__aeabi_dmul+0x1dc>
   d8dbc:	442c      	add	r4, r5
   d8dbe:	ea81 0603 	eor.w	r6, r1, r3
   d8dc2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8dc6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8dca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8dce:	bf18      	it	ne
   d8dd0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8dd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8dd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8ddc:	d038      	beq.n	d8e50 <__aeabi_dmul+0xb4>
   d8dde:	fba0 ce02 	umull	ip, lr, r0, r2
   d8de2:	f04f 0500 	mov.w	r5, #0
   d8de6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8dea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8dee:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8df2:	f04f 0600 	mov.w	r6, #0
   d8df6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8dfa:	f09c 0f00 	teq	ip, #0
   d8dfe:	bf18      	it	ne
   d8e00:	f04e 0e01 	orrne.w	lr, lr, #1
   d8e04:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8e08:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8e0c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8e10:	d204      	bcs.n	d8e1c <__aeabi_dmul+0x80>
   d8e12:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8e16:	416d      	adcs	r5, r5
   d8e18:	eb46 0606 	adc.w	r6, r6, r6
   d8e1c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8e20:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8e24:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8e28:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8e2c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8e30:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8e34:	bf88      	it	hi
   d8e36:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8e3a:	d81e      	bhi.n	d8e7a <__aeabi_dmul+0xde>
   d8e3c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8e40:	bf08      	it	eq
   d8e42:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8e46:	f150 0000 	adcs.w	r0, r0, #0
   d8e4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8e4e:	bd70      	pop	{r4, r5, r6, pc}
   d8e50:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8e54:	ea46 0101 	orr.w	r1, r6, r1
   d8e58:	ea40 0002 	orr.w	r0, r0, r2
   d8e5c:	ea81 0103 	eor.w	r1, r1, r3
   d8e60:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8e64:	bfc2      	ittt	gt
   d8e66:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8e6a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8e6e:	bd70      	popgt	{r4, r5, r6, pc}
   d8e70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8e74:	f04f 0e00 	mov.w	lr, #0
   d8e78:	3c01      	subs	r4, #1
   d8e7a:	f300 80ab 	bgt.w	d8fd4 <__aeabi_dmul+0x238>
   d8e7e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8e82:	bfde      	ittt	le
   d8e84:	2000      	movle	r0, #0
   d8e86:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8e8a:	bd70      	pople	{r4, r5, r6, pc}
   d8e8c:	f1c4 0400 	rsb	r4, r4, #0
   d8e90:	3c20      	subs	r4, #32
   d8e92:	da35      	bge.n	d8f00 <__aeabi_dmul+0x164>
   d8e94:	340c      	adds	r4, #12
   d8e96:	dc1b      	bgt.n	d8ed0 <__aeabi_dmul+0x134>
   d8e98:	f104 0414 	add.w	r4, r4, #20
   d8e9c:	f1c4 0520 	rsb	r5, r4, #32
   d8ea0:	fa00 f305 	lsl.w	r3, r0, r5
   d8ea4:	fa20 f004 	lsr.w	r0, r0, r4
   d8ea8:	fa01 f205 	lsl.w	r2, r1, r5
   d8eac:	ea40 0002 	orr.w	r0, r0, r2
   d8eb0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8eb4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8eb8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8ebc:	fa21 f604 	lsr.w	r6, r1, r4
   d8ec0:	eb42 0106 	adc.w	r1, r2, r6
   d8ec4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8ec8:	bf08      	it	eq
   d8eca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8ece:	bd70      	pop	{r4, r5, r6, pc}
   d8ed0:	f1c4 040c 	rsb	r4, r4, #12
   d8ed4:	f1c4 0520 	rsb	r5, r4, #32
   d8ed8:	fa00 f304 	lsl.w	r3, r0, r4
   d8edc:	fa20 f005 	lsr.w	r0, r0, r5
   d8ee0:	fa01 f204 	lsl.w	r2, r1, r4
   d8ee4:	ea40 0002 	orr.w	r0, r0, r2
   d8ee8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8eec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8ef0:	f141 0100 	adc.w	r1, r1, #0
   d8ef4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8ef8:	bf08      	it	eq
   d8efa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8efe:	bd70      	pop	{r4, r5, r6, pc}
   d8f00:	f1c4 0520 	rsb	r5, r4, #32
   d8f04:	fa00 f205 	lsl.w	r2, r0, r5
   d8f08:	ea4e 0e02 	orr.w	lr, lr, r2
   d8f0c:	fa20 f304 	lsr.w	r3, r0, r4
   d8f10:	fa01 f205 	lsl.w	r2, r1, r5
   d8f14:	ea43 0302 	orr.w	r3, r3, r2
   d8f18:	fa21 f004 	lsr.w	r0, r1, r4
   d8f1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8f20:	fa21 f204 	lsr.w	r2, r1, r4
   d8f24:	ea20 0002 	bic.w	r0, r0, r2
   d8f28:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8f2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8f30:	bf08      	it	eq
   d8f32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8f36:	bd70      	pop	{r4, r5, r6, pc}
   d8f38:	f094 0f00 	teq	r4, #0
   d8f3c:	d10f      	bne.n	d8f5e <__aeabi_dmul+0x1c2>
   d8f3e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8f42:	0040      	lsls	r0, r0, #1
   d8f44:	eb41 0101 	adc.w	r1, r1, r1
   d8f48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8f4c:	bf08      	it	eq
   d8f4e:	3c01      	subeq	r4, #1
   d8f50:	d0f7      	beq.n	d8f42 <__aeabi_dmul+0x1a6>
   d8f52:	ea41 0106 	orr.w	r1, r1, r6
   d8f56:	f095 0f00 	teq	r5, #0
   d8f5a:	bf18      	it	ne
   d8f5c:	4770      	bxne	lr
   d8f5e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8f62:	0052      	lsls	r2, r2, #1
   d8f64:	eb43 0303 	adc.w	r3, r3, r3
   d8f68:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8f6c:	bf08      	it	eq
   d8f6e:	3d01      	subeq	r5, #1
   d8f70:	d0f7      	beq.n	d8f62 <__aeabi_dmul+0x1c6>
   d8f72:	ea43 0306 	orr.w	r3, r3, r6
   d8f76:	4770      	bx	lr
   d8f78:	ea94 0f0c 	teq	r4, ip
   d8f7c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8f80:	bf18      	it	ne
   d8f82:	ea95 0f0c 	teqne	r5, ip
   d8f86:	d00c      	beq.n	d8fa2 <__aeabi_dmul+0x206>
   d8f88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8f8c:	bf18      	it	ne
   d8f8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8f92:	d1d1      	bne.n	d8f38 <__aeabi_dmul+0x19c>
   d8f94:	ea81 0103 	eor.w	r1, r1, r3
   d8f98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8f9c:	f04f 0000 	mov.w	r0, #0
   d8fa0:	bd70      	pop	{r4, r5, r6, pc}
   d8fa2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8fa6:	bf06      	itte	eq
   d8fa8:	4610      	moveq	r0, r2
   d8faa:	4619      	moveq	r1, r3
   d8fac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8fb0:	d019      	beq.n	d8fe6 <__aeabi_dmul+0x24a>
   d8fb2:	ea94 0f0c 	teq	r4, ip
   d8fb6:	d102      	bne.n	d8fbe <__aeabi_dmul+0x222>
   d8fb8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8fbc:	d113      	bne.n	d8fe6 <__aeabi_dmul+0x24a>
   d8fbe:	ea95 0f0c 	teq	r5, ip
   d8fc2:	d105      	bne.n	d8fd0 <__aeabi_dmul+0x234>
   d8fc4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8fc8:	bf1c      	itt	ne
   d8fca:	4610      	movne	r0, r2
   d8fcc:	4619      	movne	r1, r3
   d8fce:	d10a      	bne.n	d8fe6 <__aeabi_dmul+0x24a>
   d8fd0:	ea81 0103 	eor.w	r1, r1, r3
   d8fd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8fd8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8fdc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8fe0:	f04f 0000 	mov.w	r0, #0
   d8fe4:	bd70      	pop	{r4, r5, r6, pc}
   d8fe6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8fea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8fee:	bd70      	pop	{r4, r5, r6, pc}

000d8ff0 <__aeabi_ddiv>:
   d8ff0:	b570      	push	{r4, r5, r6, lr}
   d8ff2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8ff6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8ffa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8ffe:	bf1d      	ittte	ne
   d9000:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9004:	ea94 0f0c 	teqne	r4, ip
   d9008:	ea95 0f0c 	teqne	r5, ip
   d900c:	f000 f8a7 	bleq	d915e <__aeabi_ddiv+0x16e>
   d9010:	eba4 0405 	sub.w	r4, r4, r5
   d9014:	ea81 0e03 	eor.w	lr, r1, r3
   d9018:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d901c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9020:	f000 8088 	beq.w	d9134 <__aeabi_ddiv+0x144>
   d9024:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9028:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d902c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9030:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9034:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9038:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d903c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9040:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9044:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9048:	429d      	cmp	r5, r3
   d904a:	bf08      	it	eq
   d904c:	4296      	cmpeq	r6, r2
   d904e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d9052:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d9056:	d202      	bcs.n	d905e <__aeabi_ddiv+0x6e>
   d9058:	085b      	lsrs	r3, r3, #1
   d905a:	ea4f 0232 	mov.w	r2, r2, rrx
   d905e:	1ab6      	subs	r6, r6, r2
   d9060:	eb65 0503 	sbc.w	r5, r5, r3
   d9064:	085b      	lsrs	r3, r3, #1
   d9066:	ea4f 0232 	mov.w	r2, r2, rrx
   d906a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d906e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d9072:	ebb6 0e02 	subs.w	lr, r6, r2
   d9076:	eb75 0e03 	sbcs.w	lr, r5, r3
   d907a:	bf22      	ittt	cs
   d907c:	1ab6      	subcs	r6, r6, r2
   d907e:	4675      	movcs	r5, lr
   d9080:	ea40 000c 	orrcs.w	r0, r0, ip
   d9084:	085b      	lsrs	r3, r3, #1
   d9086:	ea4f 0232 	mov.w	r2, r2, rrx
   d908a:	ebb6 0e02 	subs.w	lr, r6, r2
   d908e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9092:	bf22      	ittt	cs
   d9094:	1ab6      	subcs	r6, r6, r2
   d9096:	4675      	movcs	r5, lr
   d9098:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d909c:	085b      	lsrs	r3, r3, #1
   d909e:	ea4f 0232 	mov.w	r2, r2, rrx
   d90a2:	ebb6 0e02 	subs.w	lr, r6, r2
   d90a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d90aa:	bf22      	ittt	cs
   d90ac:	1ab6      	subcs	r6, r6, r2
   d90ae:	4675      	movcs	r5, lr
   d90b0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d90b4:	085b      	lsrs	r3, r3, #1
   d90b6:	ea4f 0232 	mov.w	r2, r2, rrx
   d90ba:	ebb6 0e02 	subs.w	lr, r6, r2
   d90be:	eb75 0e03 	sbcs.w	lr, r5, r3
   d90c2:	bf22      	ittt	cs
   d90c4:	1ab6      	subcs	r6, r6, r2
   d90c6:	4675      	movcs	r5, lr
   d90c8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d90cc:	ea55 0e06 	orrs.w	lr, r5, r6
   d90d0:	d018      	beq.n	d9104 <__aeabi_ddiv+0x114>
   d90d2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d90d6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d90da:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d90de:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d90e2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d90e6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d90ea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d90ee:	d1c0      	bne.n	d9072 <__aeabi_ddiv+0x82>
   d90f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d90f4:	d10b      	bne.n	d910e <__aeabi_ddiv+0x11e>
   d90f6:	ea41 0100 	orr.w	r1, r1, r0
   d90fa:	f04f 0000 	mov.w	r0, #0
   d90fe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9102:	e7b6      	b.n	d9072 <__aeabi_ddiv+0x82>
   d9104:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9108:	bf04      	itt	eq
   d910a:	4301      	orreq	r1, r0
   d910c:	2000      	moveq	r0, #0
   d910e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9112:	bf88      	it	hi
   d9114:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9118:	f63f aeaf 	bhi.w	d8e7a <__aeabi_dmul+0xde>
   d911c:	ebb5 0c03 	subs.w	ip, r5, r3
   d9120:	bf04      	itt	eq
   d9122:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9126:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d912a:	f150 0000 	adcs.w	r0, r0, #0
   d912e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9132:	bd70      	pop	{r4, r5, r6, pc}
   d9134:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9138:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d913c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9140:	bfc2      	ittt	gt
   d9142:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9146:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d914a:	bd70      	popgt	{r4, r5, r6, pc}
   d914c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9150:	f04f 0e00 	mov.w	lr, #0
   d9154:	3c01      	subs	r4, #1
   d9156:	e690      	b.n	d8e7a <__aeabi_dmul+0xde>
   d9158:	ea45 0e06 	orr.w	lr, r5, r6
   d915c:	e68d      	b.n	d8e7a <__aeabi_dmul+0xde>
   d915e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9162:	ea94 0f0c 	teq	r4, ip
   d9166:	bf08      	it	eq
   d9168:	ea95 0f0c 	teqeq	r5, ip
   d916c:	f43f af3b 	beq.w	d8fe6 <__aeabi_dmul+0x24a>
   d9170:	ea94 0f0c 	teq	r4, ip
   d9174:	d10a      	bne.n	d918c <__aeabi_ddiv+0x19c>
   d9176:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d917a:	f47f af34 	bne.w	d8fe6 <__aeabi_dmul+0x24a>
   d917e:	ea95 0f0c 	teq	r5, ip
   d9182:	f47f af25 	bne.w	d8fd0 <__aeabi_dmul+0x234>
   d9186:	4610      	mov	r0, r2
   d9188:	4619      	mov	r1, r3
   d918a:	e72c      	b.n	d8fe6 <__aeabi_dmul+0x24a>
   d918c:	ea95 0f0c 	teq	r5, ip
   d9190:	d106      	bne.n	d91a0 <__aeabi_ddiv+0x1b0>
   d9192:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9196:	f43f aefd 	beq.w	d8f94 <__aeabi_dmul+0x1f8>
   d919a:	4610      	mov	r0, r2
   d919c:	4619      	mov	r1, r3
   d919e:	e722      	b.n	d8fe6 <__aeabi_dmul+0x24a>
   d91a0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d91a4:	bf18      	it	ne
   d91a6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d91aa:	f47f aec5 	bne.w	d8f38 <__aeabi_dmul+0x19c>
   d91ae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d91b2:	f47f af0d 	bne.w	d8fd0 <__aeabi_dmul+0x234>
   d91b6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d91ba:	f47f aeeb 	bne.w	d8f94 <__aeabi_dmul+0x1f8>
   d91be:	e712      	b.n	d8fe6 <__aeabi_dmul+0x24a>

000d91c0 <__gedf2>:
   d91c0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d91c4:	e006      	b.n	d91d4 <__cmpdf2+0x4>
   d91c6:	bf00      	nop

000d91c8 <__ledf2>:
   d91c8:	f04f 0c01 	mov.w	ip, #1
   d91cc:	e002      	b.n	d91d4 <__cmpdf2+0x4>
   d91ce:	bf00      	nop

000d91d0 <__cmpdf2>:
   d91d0:	f04f 0c01 	mov.w	ip, #1
   d91d4:	f84d cd04 	str.w	ip, [sp, #-4]!
   d91d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d91dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d91e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d91e4:	bf18      	it	ne
   d91e6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d91ea:	d01b      	beq.n	d9224 <__cmpdf2+0x54>
   d91ec:	b001      	add	sp, #4
   d91ee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d91f2:	bf0c      	ite	eq
   d91f4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d91f8:	ea91 0f03 	teqne	r1, r3
   d91fc:	bf02      	ittt	eq
   d91fe:	ea90 0f02 	teqeq	r0, r2
   d9202:	2000      	moveq	r0, #0
   d9204:	4770      	bxeq	lr
   d9206:	f110 0f00 	cmn.w	r0, #0
   d920a:	ea91 0f03 	teq	r1, r3
   d920e:	bf58      	it	pl
   d9210:	4299      	cmppl	r1, r3
   d9212:	bf08      	it	eq
   d9214:	4290      	cmpeq	r0, r2
   d9216:	bf2c      	ite	cs
   d9218:	17d8      	asrcs	r0, r3, #31
   d921a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d921e:	f040 0001 	orr.w	r0, r0, #1
   d9222:	4770      	bx	lr
   d9224:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9228:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d922c:	d102      	bne.n	d9234 <__cmpdf2+0x64>
   d922e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9232:	d107      	bne.n	d9244 <__cmpdf2+0x74>
   d9234:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9238:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d923c:	d1d6      	bne.n	d91ec <__cmpdf2+0x1c>
   d923e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9242:	d0d3      	beq.n	d91ec <__cmpdf2+0x1c>
   d9244:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9248:	4770      	bx	lr
   d924a:	bf00      	nop

000d924c <__aeabi_cdrcmple>:
   d924c:	4684      	mov	ip, r0
   d924e:	4610      	mov	r0, r2
   d9250:	4662      	mov	r2, ip
   d9252:	468c      	mov	ip, r1
   d9254:	4619      	mov	r1, r3
   d9256:	4663      	mov	r3, ip
   d9258:	e000      	b.n	d925c <__aeabi_cdcmpeq>
   d925a:	bf00      	nop

000d925c <__aeabi_cdcmpeq>:
   d925c:	b501      	push	{r0, lr}
   d925e:	f7ff ffb7 	bl	d91d0 <__cmpdf2>
   d9262:	2800      	cmp	r0, #0
   d9264:	bf48      	it	mi
   d9266:	f110 0f00 	cmnmi.w	r0, #0
   d926a:	bd01      	pop	{r0, pc}

000d926c <__aeabi_dcmpeq>:
   d926c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9270:	f7ff fff4 	bl	d925c <__aeabi_cdcmpeq>
   d9274:	bf0c      	ite	eq
   d9276:	2001      	moveq	r0, #1
   d9278:	2000      	movne	r0, #0
   d927a:	f85d fb08 	ldr.w	pc, [sp], #8
   d927e:	bf00      	nop

000d9280 <__aeabi_dcmplt>:
   d9280:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9284:	f7ff ffea 	bl	d925c <__aeabi_cdcmpeq>
   d9288:	bf34      	ite	cc
   d928a:	2001      	movcc	r0, #1
   d928c:	2000      	movcs	r0, #0
   d928e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9292:	bf00      	nop

000d9294 <__aeabi_dcmple>:
   d9294:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9298:	f7ff ffe0 	bl	d925c <__aeabi_cdcmpeq>
   d929c:	bf94      	ite	ls
   d929e:	2001      	movls	r0, #1
   d92a0:	2000      	movhi	r0, #0
   d92a2:	f85d fb08 	ldr.w	pc, [sp], #8
   d92a6:	bf00      	nop

000d92a8 <__aeabi_dcmpge>:
   d92a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d92ac:	f7ff ffce 	bl	d924c <__aeabi_cdrcmple>
   d92b0:	bf94      	ite	ls
   d92b2:	2001      	movls	r0, #1
   d92b4:	2000      	movhi	r0, #0
   d92b6:	f85d fb08 	ldr.w	pc, [sp], #8
   d92ba:	bf00      	nop

000d92bc <__aeabi_dcmpgt>:
   d92bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d92c0:	f7ff ffc4 	bl	d924c <__aeabi_cdrcmple>
   d92c4:	bf34      	ite	cc
   d92c6:	2001      	movcc	r0, #1
   d92c8:	2000      	movcs	r0, #0
   d92ca:	f85d fb08 	ldr.w	pc, [sp], #8
   d92ce:	bf00      	nop

000d92d0 <__aeabi_dcmpun>:
   d92d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d92d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d92d8:	d102      	bne.n	d92e0 <__aeabi_dcmpun+0x10>
   d92da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d92de:	d10a      	bne.n	d92f6 <__aeabi_dcmpun+0x26>
   d92e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d92e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d92e8:	d102      	bne.n	d92f0 <__aeabi_dcmpun+0x20>
   d92ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d92ee:	d102      	bne.n	d92f6 <__aeabi_dcmpun+0x26>
   d92f0:	f04f 0000 	mov.w	r0, #0
   d92f4:	4770      	bx	lr
   d92f6:	f04f 0001 	mov.w	r0, #1
   d92fa:	4770      	bx	lr

000d92fc <__aeabi_d2uiz>:
   d92fc:	004a      	lsls	r2, r1, #1
   d92fe:	d211      	bcs.n	d9324 <__aeabi_d2uiz+0x28>
   d9300:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9304:	d211      	bcs.n	d932a <__aeabi_d2uiz+0x2e>
   d9306:	d50d      	bpl.n	d9324 <__aeabi_d2uiz+0x28>
   d9308:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d930c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9310:	d40e      	bmi.n	d9330 <__aeabi_d2uiz+0x34>
   d9312:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9316:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d931a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d931e:	fa23 f002 	lsr.w	r0, r3, r2
   d9322:	4770      	bx	lr
   d9324:	f04f 0000 	mov.w	r0, #0
   d9328:	4770      	bx	lr
   d932a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d932e:	d102      	bne.n	d9336 <__aeabi_d2uiz+0x3a>
   d9330:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9334:	4770      	bx	lr
   d9336:	f04f 0000 	mov.w	r0, #0
   d933a:	4770      	bx	lr

000d933c <__aeabi_d2f>:
   d933c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9340:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9344:	bf24      	itt	cs
   d9346:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d934a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d934e:	d90d      	bls.n	d936c <__aeabi_d2f+0x30>
   d9350:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9354:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9358:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d935c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9360:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9364:	bf08      	it	eq
   d9366:	f020 0001 	biceq.w	r0, r0, #1
   d936a:	4770      	bx	lr
   d936c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9370:	d121      	bne.n	d93b6 <__aeabi_d2f+0x7a>
   d9372:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9376:	bfbc      	itt	lt
   d9378:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d937c:	4770      	bxlt	lr
   d937e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9382:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9386:	f1c2 0218 	rsb	r2, r2, #24
   d938a:	f1c2 0c20 	rsb	ip, r2, #32
   d938e:	fa10 f30c 	lsls.w	r3, r0, ip
   d9392:	fa20 f002 	lsr.w	r0, r0, r2
   d9396:	bf18      	it	ne
   d9398:	f040 0001 	orrne.w	r0, r0, #1
   d939c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d93a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d93a4:	fa03 fc0c 	lsl.w	ip, r3, ip
   d93a8:	ea40 000c 	orr.w	r0, r0, ip
   d93ac:	fa23 f302 	lsr.w	r3, r3, r2
   d93b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d93b4:	e7cc      	b.n	d9350 <__aeabi_d2f+0x14>
   d93b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d93ba:	d107      	bne.n	d93cc <__aeabi_d2f+0x90>
   d93bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d93c0:	bf1e      	ittt	ne
   d93c2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d93c6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d93ca:	4770      	bxne	lr
   d93cc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d93d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d93d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d93d8:	4770      	bx	lr
   d93da:	bf00      	nop

000d93dc <__aeabi_d2ulz>:
   d93dc:	b5d0      	push	{r4, r6, r7, lr}
   d93de:	4b0c      	ldr	r3, [pc, #48]	; (d9410 <__aeabi_d2ulz+0x34>)
   d93e0:	2200      	movs	r2, #0
   d93e2:	4606      	mov	r6, r0
   d93e4:	460f      	mov	r7, r1
   d93e6:	f7ff fcd9 	bl	d8d9c <__aeabi_dmul>
   d93ea:	f7ff ff87 	bl	d92fc <__aeabi_d2uiz>
   d93ee:	4604      	mov	r4, r0
   d93f0:	f7ff fc5a 	bl	d8ca8 <__aeabi_ui2d>
   d93f4:	4b07      	ldr	r3, [pc, #28]	; (d9414 <__aeabi_d2ulz+0x38>)
   d93f6:	2200      	movs	r2, #0
   d93f8:	f7ff fcd0 	bl	d8d9c <__aeabi_dmul>
   d93fc:	4602      	mov	r2, r0
   d93fe:	460b      	mov	r3, r1
   d9400:	4630      	mov	r0, r6
   d9402:	4639      	mov	r1, r7
   d9404:	f7ff fb12 	bl	d8a2c <__aeabi_dsub>
   d9408:	f7ff ff78 	bl	d92fc <__aeabi_d2uiz>
   d940c:	4621      	mov	r1, r4
   d940e:	bdd0      	pop	{r4, r6, r7, pc}
   d9410:	3df00000 	.word	0x3df00000
   d9414:	41f00000 	.word	0x41f00000

000d9418 <asctime_r>:
   d9418:	b510      	push	{r4, lr}
   d941a:	460c      	mov	r4, r1
   d941c:	6941      	ldr	r1, [r0, #20]
   d941e:	6903      	ldr	r3, [r0, #16]
   d9420:	6982      	ldr	r2, [r0, #24]
   d9422:	b086      	sub	sp, #24
   d9424:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d9428:	9104      	str	r1, [sp, #16]
   d942a:	6801      	ldr	r1, [r0, #0]
   d942c:	9103      	str	r1, [sp, #12]
   d942e:	6841      	ldr	r1, [r0, #4]
   d9430:	9102      	str	r1, [sp, #8]
   d9432:	6881      	ldr	r1, [r0, #8]
   d9434:	9101      	str	r1, [sp, #4]
   d9436:	68c1      	ldr	r1, [r0, #12]
   d9438:	9100      	str	r1, [sp, #0]
   d943a:	4907      	ldr	r1, [pc, #28]	; (d9458 <asctime_r+0x40>)
   d943c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d9440:	440b      	add	r3, r1
   d9442:	4906      	ldr	r1, [pc, #24]	; (d945c <asctime_r+0x44>)
   d9444:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d9448:	440a      	add	r2, r1
   d944a:	4620      	mov	r0, r4
   d944c:	4904      	ldr	r1, [pc, #16]	; (d9460 <asctime_r+0x48>)
   d944e:	f7fd fe2d 	bl	d70ac <siprintf>
   d9452:	4620      	mov	r0, r4
   d9454:	b006      	add	sp, #24
   d9456:	bd10      	pop	{r4, pc}
   d9458:	000dbf8a 	.word	0x000dbf8a
   d945c:	000dbf75 	.word	0x000dbf75
   d9460:	000dbf55 	.word	0x000dbf55

000d9464 <atof>:
   d9464:	2100      	movs	r1, #0
   d9466:	f000 befd 	b.w	da264 <strtod>

000d946a <atoi>:
   d946a:	220a      	movs	r2, #10
   d946c:	2100      	movs	r1, #0
   d946e:	f000 bf7f 	b.w	da370 <strtol>
	...

000d9474 <__cxa_atexit>:
   d9474:	b510      	push	{r4, lr}
   d9476:	4c05      	ldr	r4, [pc, #20]	; (d948c <__cxa_atexit+0x18>)
   d9478:	4613      	mov	r3, r2
   d947a:	b12c      	cbz	r4, d9488 <__cxa_atexit+0x14>
   d947c:	460a      	mov	r2, r1
   d947e:	4601      	mov	r1, r0
   d9480:	2002      	movs	r0, #2
   d9482:	f3af 8000 	nop.w
   d9486:	bd10      	pop	{r4, pc}
   d9488:	4620      	mov	r0, r4
   d948a:	e7fc      	b.n	d9486 <__cxa_atexit+0x12>
   d948c:	00000000 	.word	0x00000000

000d9490 <gmtime>:
   d9490:	b538      	push	{r3, r4, r5, lr}
   d9492:	4b07      	ldr	r3, [pc, #28]	; (d94b0 <gmtime+0x20>)
   d9494:	681d      	ldr	r5, [r3, #0]
   d9496:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   d9498:	4604      	mov	r4, r0
   d949a:	b91b      	cbnz	r3, d94a4 <gmtime+0x14>
   d949c:	2024      	movs	r0, #36	; 0x24
   d949e:	f7fd fded 	bl	d707c <malloc>
   d94a2:	63e8      	str	r0, [r5, #60]	; 0x3c
   d94a4:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   d94a6:	4620      	mov	r0, r4
   d94a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d94ac:	f7fd be3e 	b.w	d712c <gmtime_r>
   d94b0:	2003dcc8 	.word	0x2003dcc8

000d94b4 <memcpy>:
   d94b4:	440a      	add	r2, r1
   d94b6:	4291      	cmp	r1, r2
   d94b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d94bc:	d100      	bne.n	d94c0 <memcpy+0xc>
   d94be:	4770      	bx	lr
   d94c0:	b510      	push	{r4, lr}
   d94c2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d94c6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d94ca:	4291      	cmp	r1, r2
   d94cc:	d1f9      	bne.n	d94c2 <memcpy+0xe>
   d94ce:	bd10      	pop	{r4, pc}

000d94d0 <memmove>:
   d94d0:	4288      	cmp	r0, r1
   d94d2:	b510      	push	{r4, lr}
   d94d4:	eb01 0402 	add.w	r4, r1, r2
   d94d8:	d902      	bls.n	d94e0 <memmove+0x10>
   d94da:	4284      	cmp	r4, r0
   d94dc:	4623      	mov	r3, r4
   d94de:	d807      	bhi.n	d94f0 <memmove+0x20>
   d94e0:	1e43      	subs	r3, r0, #1
   d94e2:	42a1      	cmp	r1, r4
   d94e4:	d008      	beq.n	d94f8 <memmove+0x28>
   d94e6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d94ea:	f803 2f01 	strb.w	r2, [r3, #1]!
   d94ee:	e7f8      	b.n	d94e2 <memmove+0x12>
   d94f0:	4402      	add	r2, r0
   d94f2:	4601      	mov	r1, r0
   d94f4:	428a      	cmp	r2, r1
   d94f6:	d100      	bne.n	d94fa <memmove+0x2a>
   d94f8:	bd10      	pop	{r4, pc}
   d94fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d94fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d9502:	e7f7      	b.n	d94f4 <memmove+0x24>

000d9504 <memset>:
   d9504:	4402      	add	r2, r0
   d9506:	4603      	mov	r3, r0
   d9508:	4293      	cmp	r3, r2
   d950a:	d100      	bne.n	d950e <memset+0xa>
   d950c:	4770      	bx	lr
   d950e:	f803 1b01 	strb.w	r1, [r3], #1
   d9512:	e7f9      	b.n	d9508 <memset+0x4>

000d9514 <srand>:
   d9514:	b538      	push	{r3, r4, r5, lr}
   d9516:	4b0d      	ldr	r3, [pc, #52]	; (d954c <srand+0x38>)
   d9518:	681d      	ldr	r5, [r3, #0]
   d951a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d951c:	4604      	mov	r4, r0
   d951e:	b97b      	cbnz	r3, d9540 <srand+0x2c>
   d9520:	2018      	movs	r0, #24
   d9522:	f7fd fdab 	bl	d707c <malloc>
   d9526:	4a0a      	ldr	r2, [pc, #40]	; (d9550 <srand+0x3c>)
   d9528:	4b0a      	ldr	r3, [pc, #40]	; (d9554 <srand+0x40>)
   d952a:	63a8      	str	r0, [r5, #56]	; 0x38
   d952c:	e9c0 2300 	strd	r2, r3, [r0]
   d9530:	4b09      	ldr	r3, [pc, #36]	; (d9558 <srand+0x44>)
   d9532:	6083      	str	r3, [r0, #8]
   d9534:	230b      	movs	r3, #11
   d9536:	8183      	strh	r3, [r0, #12]
   d9538:	2201      	movs	r2, #1
   d953a:	2300      	movs	r3, #0
   d953c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9540:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9542:	2200      	movs	r2, #0
   d9544:	611c      	str	r4, [r3, #16]
   d9546:	615a      	str	r2, [r3, #20]
   d9548:	bd38      	pop	{r3, r4, r5, pc}
   d954a:	bf00      	nop
   d954c:	2003dcc8 	.word	0x2003dcc8
   d9550:	abcd330e 	.word	0xabcd330e
   d9554:	e66d1234 	.word	0xe66d1234
   d9558:	0005deec 	.word	0x0005deec

000d955c <strcmp>:
   d955c:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9560:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9564:	2a01      	cmp	r2, #1
   d9566:	bf28      	it	cs
   d9568:	429a      	cmpcs	r2, r3
   d956a:	d0f7      	beq.n	d955c <strcmp>
   d956c:	1ad0      	subs	r0, r2, r3
   d956e:	4770      	bx	lr

000d9570 <strcpy>:
   d9570:	4603      	mov	r3, r0
   d9572:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9576:	f803 2b01 	strb.w	r2, [r3], #1
   d957a:	2a00      	cmp	r2, #0
   d957c:	d1f9      	bne.n	d9572 <strcpy+0x2>
   d957e:	4770      	bx	lr

000d9580 <strdup>:
   d9580:	4b02      	ldr	r3, [pc, #8]	; (d958c <strdup+0xc>)
   d9582:	4601      	mov	r1, r0
   d9584:	6818      	ldr	r0, [r3, #0]
   d9586:	f000 b803 	b.w	d9590 <_strdup_r>
   d958a:	bf00      	nop
   d958c:	2003dcc8 	.word	0x2003dcc8

000d9590 <_strdup_r>:
   d9590:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d9592:	4604      	mov	r4, r0
   d9594:	4608      	mov	r0, r1
   d9596:	460d      	mov	r5, r1
   d9598:	f000 f80f 	bl	d95ba <strlen>
   d959c:	1c42      	adds	r2, r0, #1
   d959e:	4611      	mov	r1, r2
   d95a0:	4620      	mov	r0, r4
   d95a2:	9201      	str	r2, [sp, #4]
   d95a4:	f7fd fd9a 	bl	d70dc <_malloc_r>
   d95a8:	4604      	mov	r4, r0
   d95aa:	b118      	cbz	r0, d95b4 <_strdup_r+0x24>
   d95ac:	9a01      	ldr	r2, [sp, #4]
   d95ae:	4629      	mov	r1, r5
   d95b0:	f7ff ff80 	bl	d94b4 <memcpy>
   d95b4:	4620      	mov	r0, r4
   d95b6:	b003      	add	sp, #12
   d95b8:	bd30      	pop	{r4, r5, pc}

000d95ba <strlen>:
   d95ba:	4603      	mov	r3, r0
   d95bc:	f813 2b01 	ldrb.w	r2, [r3], #1
   d95c0:	2a00      	cmp	r2, #0
   d95c2:	d1fb      	bne.n	d95bc <strlen+0x2>
   d95c4:	1a18      	subs	r0, r3, r0
   d95c6:	3801      	subs	r0, #1
   d95c8:	4770      	bx	lr

000d95ca <strncmp>:
   d95ca:	b510      	push	{r4, lr}
   d95cc:	b16a      	cbz	r2, d95ea <strncmp+0x20>
   d95ce:	3901      	subs	r1, #1
   d95d0:	1884      	adds	r4, r0, r2
   d95d2:	f810 3b01 	ldrb.w	r3, [r0], #1
   d95d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d95da:	4293      	cmp	r3, r2
   d95dc:	d103      	bne.n	d95e6 <strncmp+0x1c>
   d95de:	42a0      	cmp	r0, r4
   d95e0:	d001      	beq.n	d95e6 <strncmp+0x1c>
   d95e2:	2b00      	cmp	r3, #0
   d95e4:	d1f5      	bne.n	d95d2 <strncmp+0x8>
   d95e6:	1a98      	subs	r0, r3, r2
   d95e8:	bd10      	pop	{r4, pc}
   d95ea:	4610      	mov	r0, r2
   d95ec:	e7fc      	b.n	d95e8 <strncmp+0x1e>

000d95ee <strncpy>:
   d95ee:	b510      	push	{r4, lr}
   d95f0:	3901      	subs	r1, #1
   d95f2:	4603      	mov	r3, r0
   d95f4:	b132      	cbz	r2, d9604 <strncpy+0x16>
   d95f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d95fa:	f803 4b01 	strb.w	r4, [r3], #1
   d95fe:	3a01      	subs	r2, #1
   d9600:	2c00      	cmp	r4, #0
   d9602:	d1f7      	bne.n	d95f4 <strncpy+0x6>
   d9604:	441a      	add	r2, r3
   d9606:	2100      	movs	r1, #0
   d9608:	4293      	cmp	r3, r2
   d960a:	d100      	bne.n	d960e <strncpy+0x20>
   d960c:	bd10      	pop	{r4, pc}
   d960e:	f803 1b01 	strb.w	r1, [r3], #1
   d9612:	e7f9      	b.n	d9608 <strncpy+0x1a>

000d9614 <sulp>:
   d9614:	b570      	push	{r4, r5, r6, lr}
   d9616:	4604      	mov	r4, r0
   d9618:	460d      	mov	r5, r1
   d961a:	ec45 4b10 	vmov	d0, r4, r5
   d961e:	4616      	mov	r6, r2
   d9620:	f001 fd1c 	bl	db05c <__ulp>
   d9624:	ec51 0b10 	vmov	r0, r1, d0
   d9628:	b17e      	cbz	r6, d964a <sulp+0x36>
   d962a:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d962e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9632:	2b00      	cmp	r3, #0
   d9634:	dd09      	ble.n	d964a <sulp+0x36>
   d9636:	051b      	lsls	r3, r3, #20
   d9638:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d963c:	2400      	movs	r4, #0
   d963e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d9642:	4622      	mov	r2, r4
   d9644:	462b      	mov	r3, r5
   d9646:	f7ff fba9 	bl	d8d9c <__aeabi_dmul>
   d964a:	bd70      	pop	{r4, r5, r6, pc}
   d964c:	0000      	movs	r0, r0
	...

000d9650 <_strtod_l>:
   d9650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9654:	b0a3      	sub	sp, #140	; 0x8c
   d9656:	461f      	mov	r7, r3
   d9658:	2300      	movs	r3, #0
   d965a:	931e      	str	r3, [sp, #120]	; 0x78
   d965c:	4ba4      	ldr	r3, [pc, #656]	; (d98f0 <_strtod_l+0x2a0>)
   d965e:	9219      	str	r2, [sp, #100]	; 0x64
   d9660:	681b      	ldr	r3, [r3, #0]
   d9662:	9307      	str	r3, [sp, #28]
   d9664:	4604      	mov	r4, r0
   d9666:	4618      	mov	r0, r3
   d9668:	4688      	mov	r8, r1
   d966a:	f7ff ffa6 	bl	d95ba <strlen>
   d966e:	f04f 0a00 	mov.w	sl, #0
   d9672:	4605      	mov	r5, r0
   d9674:	f04f 0b00 	mov.w	fp, #0
   d9678:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d967c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d967e:	781a      	ldrb	r2, [r3, #0]
   d9680:	2a2b      	cmp	r2, #43	; 0x2b
   d9682:	d04c      	beq.n	d971e <_strtod_l+0xce>
   d9684:	d839      	bhi.n	d96fa <_strtod_l+0xaa>
   d9686:	2a0d      	cmp	r2, #13
   d9688:	d832      	bhi.n	d96f0 <_strtod_l+0xa0>
   d968a:	2a08      	cmp	r2, #8
   d968c:	d832      	bhi.n	d96f4 <_strtod_l+0xa4>
   d968e:	2a00      	cmp	r2, #0
   d9690:	d03c      	beq.n	d970c <_strtod_l+0xbc>
   d9692:	2300      	movs	r3, #0
   d9694:	930e      	str	r3, [sp, #56]	; 0x38
   d9696:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d9698:	7833      	ldrb	r3, [r6, #0]
   d969a:	2b30      	cmp	r3, #48	; 0x30
   d969c:	f040 80b4 	bne.w	d9808 <_strtod_l+0x1b8>
   d96a0:	7873      	ldrb	r3, [r6, #1]
   d96a2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d96a6:	2b58      	cmp	r3, #88	; 0x58
   d96a8:	d16c      	bne.n	d9784 <_strtod_l+0x134>
   d96aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d96ac:	9301      	str	r3, [sp, #4]
   d96ae:	ab1e      	add	r3, sp, #120	; 0x78
   d96b0:	9702      	str	r7, [sp, #8]
   d96b2:	9300      	str	r3, [sp, #0]
   d96b4:	4a8f      	ldr	r2, [pc, #572]	; (d98f4 <_strtod_l+0x2a4>)
   d96b6:	ab1f      	add	r3, sp, #124	; 0x7c
   d96b8:	a91d      	add	r1, sp, #116	; 0x74
   d96ba:	4620      	mov	r0, r4
   d96bc:	f000 feca 	bl	da454 <__gethex>
   d96c0:	f010 0707 	ands.w	r7, r0, #7
   d96c4:	4605      	mov	r5, r0
   d96c6:	d005      	beq.n	d96d4 <_strtod_l+0x84>
   d96c8:	2f06      	cmp	r7, #6
   d96ca:	d12a      	bne.n	d9722 <_strtod_l+0xd2>
   d96cc:	3601      	adds	r6, #1
   d96ce:	2300      	movs	r3, #0
   d96d0:	961d      	str	r6, [sp, #116]	; 0x74
   d96d2:	930e      	str	r3, [sp, #56]	; 0x38
   d96d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d96d6:	2b00      	cmp	r3, #0
   d96d8:	f040 8596 	bne.w	da208 <_strtod_l+0xbb8>
   d96dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d96de:	b1db      	cbz	r3, d9718 <_strtod_l+0xc8>
   d96e0:	4652      	mov	r2, sl
   d96e2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d96e6:	ec43 2b10 	vmov	d0, r2, r3
   d96ea:	b023      	add	sp, #140	; 0x8c
   d96ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d96f0:	2a20      	cmp	r2, #32
   d96f2:	d1ce      	bne.n	d9692 <_strtod_l+0x42>
   d96f4:	3301      	adds	r3, #1
   d96f6:	931d      	str	r3, [sp, #116]	; 0x74
   d96f8:	e7c0      	b.n	d967c <_strtod_l+0x2c>
   d96fa:	2a2d      	cmp	r2, #45	; 0x2d
   d96fc:	d1c9      	bne.n	d9692 <_strtod_l+0x42>
   d96fe:	2201      	movs	r2, #1
   d9700:	920e      	str	r2, [sp, #56]	; 0x38
   d9702:	1c5a      	adds	r2, r3, #1
   d9704:	921d      	str	r2, [sp, #116]	; 0x74
   d9706:	785b      	ldrb	r3, [r3, #1]
   d9708:	2b00      	cmp	r3, #0
   d970a:	d1c4      	bne.n	d9696 <_strtod_l+0x46>
   d970c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d970e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d9712:	2b00      	cmp	r3, #0
   d9714:	f040 8576 	bne.w	da204 <_strtod_l+0xbb4>
   d9718:	4652      	mov	r2, sl
   d971a:	465b      	mov	r3, fp
   d971c:	e7e3      	b.n	d96e6 <_strtod_l+0x96>
   d971e:	2200      	movs	r2, #0
   d9720:	e7ee      	b.n	d9700 <_strtod_l+0xb0>
   d9722:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d9724:	b13a      	cbz	r2, d9736 <_strtod_l+0xe6>
   d9726:	2135      	movs	r1, #53	; 0x35
   d9728:	a820      	add	r0, sp, #128	; 0x80
   d972a:	f001 fd96 	bl	db25a <__copybits>
   d972e:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9730:	4620      	mov	r0, r4
   d9732:	f001 f9cb 	bl	daacc <_Bfree>
   d9736:	3f01      	subs	r7, #1
   d9738:	2f05      	cmp	r7, #5
   d973a:	d807      	bhi.n	d974c <_strtod_l+0xfc>
   d973c:	e8df f007 	tbb	[pc, r7]
   d9740:	1d180b0e 	.word	0x1d180b0e
   d9744:	030e      	.short	0x030e
   d9746:	f04f 0b00 	mov.w	fp, #0
   d974a:	46da      	mov	sl, fp
   d974c:	0728      	lsls	r0, r5, #28
   d974e:	d5c1      	bpl.n	d96d4 <_strtod_l+0x84>
   d9750:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d9754:	e7be      	b.n	d96d4 <_strtod_l+0x84>
   d9756:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d975a:	e7f7      	b.n	d974c <_strtod_l+0xfc>
   d975c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d9760:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d9762:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d9766:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d976a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d976e:	e7ed      	b.n	d974c <_strtod_l+0xfc>
   d9770:	f8df b184 	ldr.w	fp, [pc, #388]	; d98f8 <_strtod_l+0x2a8>
   d9774:	f04f 0a00 	mov.w	sl, #0
   d9778:	e7e8      	b.n	d974c <_strtod_l+0xfc>
   d977a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d977e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9782:	e7e3      	b.n	d974c <_strtod_l+0xfc>
   d9784:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9786:	1c5a      	adds	r2, r3, #1
   d9788:	921d      	str	r2, [sp, #116]	; 0x74
   d978a:	785b      	ldrb	r3, [r3, #1]
   d978c:	2b30      	cmp	r3, #48	; 0x30
   d978e:	d0f9      	beq.n	d9784 <_strtod_l+0x134>
   d9790:	2b00      	cmp	r3, #0
   d9792:	d09f      	beq.n	d96d4 <_strtod_l+0x84>
   d9794:	2301      	movs	r3, #1
   d9796:	f04f 0900 	mov.w	r9, #0
   d979a:	9304      	str	r3, [sp, #16]
   d979c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d979e:	930a      	str	r3, [sp, #40]	; 0x28
   d97a0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d97a4:	464f      	mov	r7, r9
   d97a6:	220a      	movs	r2, #10
   d97a8:	981d      	ldr	r0, [sp, #116]	; 0x74
   d97aa:	7806      	ldrb	r6, [r0, #0]
   d97ac:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d97b0:	b2d9      	uxtb	r1, r3
   d97b2:	2909      	cmp	r1, #9
   d97b4:	d92a      	bls.n	d980c <_strtod_l+0x1bc>
   d97b6:	9907      	ldr	r1, [sp, #28]
   d97b8:	462a      	mov	r2, r5
   d97ba:	f7ff ff06 	bl	d95ca <strncmp>
   d97be:	b398      	cbz	r0, d9828 <_strtod_l+0x1d8>
   d97c0:	2000      	movs	r0, #0
   d97c2:	4633      	mov	r3, r6
   d97c4:	463d      	mov	r5, r7
   d97c6:	9007      	str	r0, [sp, #28]
   d97c8:	4602      	mov	r2, r0
   d97ca:	2b65      	cmp	r3, #101	; 0x65
   d97cc:	d001      	beq.n	d97d2 <_strtod_l+0x182>
   d97ce:	2b45      	cmp	r3, #69	; 0x45
   d97d0:	d118      	bne.n	d9804 <_strtod_l+0x1b4>
   d97d2:	b91d      	cbnz	r5, d97dc <_strtod_l+0x18c>
   d97d4:	9b04      	ldr	r3, [sp, #16]
   d97d6:	4303      	orrs	r3, r0
   d97d8:	d098      	beq.n	d970c <_strtod_l+0xbc>
   d97da:	2500      	movs	r5, #0
   d97dc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d97e0:	f108 0301 	add.w	r3, r8, #1
   d97e4:	931d      	str	r3, [sp, #116]	; 0x74
   d97e6:	f898 3001 	ldrb.w	r3, [r8, #1]
   d97ea:	2b2b      	cmp	r3, #43	; 0x2b
   d97ec:	d075      	beq.n	d98da <_strtod_l+0x28a>
   d97ee:	2b2d      	cmp	r3, #45	; 0x2d
   d97f0:	d07b      	beq.n	d98ea <_strtod_l+0x29a>
   d97f2:	f04f 0c00 	mov.w	ip, #0
   d97f6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d97fa:	2909      	cmp	r1, #9
   d97fc:	f240 8082 	bls.w	d9904 <_strtod_l+0x2b4>
   d9800:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d9804:	2600      	movs	r6, #0
   d9806:	e09d      	b.n	d9944 <_strtod_l+0x2f4>
   d9808:	2300      	movs	r3, #0
   d980a:	e7c4      	b.n	d9796 <_strtod_l+0x146>
   d980c:	2f08      	cmp	r7, #8
   d980e:	bfd8      	it	le
   d9810:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d9812:	f100 0001 	add.w	r0, r0, #1
   d9816:	bfda      	itte	le
   d9818:	fb02 3301 	mlale	r3, r2, r1, r3
   d981c:	9309      	strle	r3, [sp, #36]	; 0x24
   d981e:	fb02 3909 	mlagt	r9, r2, r9, r3
   d9822:	3701      	adds	r7, #1
   d9824:	901d      	str	r0, [sp, #116]	; 0x74
   d9826:	e7bf      	b.n	d97a8 <_strtod_l+0x158>
   d9828:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d982a:	195a      	adds	r2, r3, r5
   d982c:	921d      	str	r2, [sp, #116]	; 0x74
   d982e:	5d5b      	ldrb	r3, [r3, r5]
   d9830:	2f00      	cmp	r7, #0
   d9832:	d037      	beq.n	d98a4 <_strtod_l+0x254>
   d9834:	9007      	str	r0, [sp, #28]
   d9836:	463d      	mov	r5, r7
   d9838:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d983c:	2a09      	cmp	r2, #9
   d983e:	d912      	bls.n	d9866 <_strtod_l+0x216>
   d9840:	2201      	movs	r2, #1
   d9842:	e7c2      	b.n	d97ca <_strtod_l+0x17a>
   d9844:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9846:	1c5a      	adds	r2, r3, #1
   d9848:	921d      	str	r2, [sp, #116]	; 0x74
   d984a:	785b      	ldrb	r3, [r3, #1]
   d984c:	3001      	adds	r0, #1
   d984e:	2b30      	cmp	r3, #48	; 0x30
   d9850:	d0f8      	beq.n	d9844 <_strtod_l+0x1f4>
   d9852:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d9856:	2a08      	cmp	r2, #8
   d9858:	f200 84db 	bhi.w	da212 <_strtod_l+0xbc2>
   d985c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d985e:	9007      	str	r0, [sp, #28]
   d9860:	2000      	movs	r0, #0
   d9862:	920a      	str	r2, [sp, #40]	; 0x28
   d9864:	4605      	mov	r5, r0
   d9866:	3b30      	subs	r3, #48	; 0x30
   d9868:	f100 0201 	add.w	r2, r0, #1
   d986c:	d014      	beq.n	d9898 <_strtod_l+0x248>
   d986e:	9907      	ldr	r1, [sp, #28]
   d9870:	4411      	add	r1, r2
   d9872:	9107      	str	r1, [sp, #28]
   d9874:	462a      	mov	r2, r5
   d9876:	eb00 0e05 	add.w	lr, r0, r5
   d987a:	210a      	movs	r1, #10
   d987c:	4572      	cmp	r2, lr
   d987e:	d113      	bne.n	d98a8 <_strtod_l+0x258>
   d9880:	182a      	adds	r2, r5, r0
   d9882:	2a08      	cmp	r2, #8
   d9884:	f105 0501 	add.w	r5, r5, #1
   d9888:	4405      	add	r5, r0
   d988a:	dc1c      	bgt.n	d98c6 <_strtod_l+0x276>
   d988c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d988e:	220a      	movs	r2, #10
   d9890:	fb02 3301 	mla	r3, r2, r1, r3
   d9894:	9309      	str	r3, [sp, #36]	; 0x24
   d9896:	2200      	movs	r2, #0
   d9898:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d989a:	1c59      	adds	r1, r3, #1
   d989c:	911d      	str	r1, [sp, #116]	; 0x74
   d989e:	785b      	ldrb	r3, [r3, #1]
   d98a0:	4610      	mov	r0, r2
   d98a2:	e7c9      	b.n	d9838 <_strtod_l+0x1e8>
   d98a4:	4638      	mov	r0, r7
   d98a6:	e7d2      	b.n	d984e <_strtod_l+0x1fe>
   d98a8:	2a08      	cmp	r2, #8
   d98aa:	dc04      	bgt.n	d98b6 <_strtod_l+0x266>
   d98ac:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d98ae:	434e      	muls	r6, r1
   d98b0:	9609      	str	r6, [sp, #36]	; 0x24
   d98b2:	3201      	adds	r2, #1
   d98b4:	e7e2      	b.n	d987c <_strtod_l+0x22c>
   d98b6:	f102 0c01 	add.w	ip, r2, #1
   d98ba:	f1bc 0f10 	cmp.w	ip, #16
   d98be:	bfd8      	it	le
   d98c0:	fb01 f909 	mulle.w	r9, r1, r9
   d98c4:	e7f5      	b.n	d98b2 <_strtod_l+0x262>
   d98c6:	2d10      	cmp	r5, #16
   d98c8:	bfdc      	itt	le
   d98ca:	220a      	movle	r2, #10
   d98cc:	fb02 3909 	mlale	r9, r2, r9, r3
   d98d0:	e7e1      	b.n	d9896 <_strtod_l+0x246>
   d98d2:	2300      	movs	r3, #0
   d98d4:	9307      	str	r3, [sp, #28]
   d98d6:	2201      	movs	r2, #1
   d98d8:	e77c      	b.n	d97d4 <_strtod_l+0x184>
   d98da:	f04f 0c00 	mov.w	ip, #0
   d98de:	f108 0302 	add.w	r3, r8, #2
   d98e2:	931d      	str	r3, [sp, #116]	; 0x74
   d98e4:	f898 3002 	ldrb.w	r3, [r8, #2]
   d98e8:	e785      	b.n	d97f6 <_strtod_l+0x1a6>
   d98ea:	f04f 0c01 	mov.w	ip, #1
   d98ee:	e7f6      	b.n	d98de <_strtod_l+0x28e>
   d98f0:	000dc114 	.word	0x000dc114
   d98f4:	000dbfbc 	.word	0x000dbfbc
   d98f8:	7ff00000 	.word	0x7ff00000
   d98fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d98fe:	1c59      	adds	r1, r3, #1
   d9900:	911d      	str	r1, [sp, #116]	; 0x74
   d9902:	785b      	ldrb	r3, [r3, #1]
   d9904:	2b30      	cmp	r3, #48	; 0x30
   d9906:	d0f9      	beq.n	d98fc <_strtod_l+0x2ac>
   d9908:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d990c:	2908      	cmp	r1, #8
   d990e:	f63f af79 	bhi.w	d9804 <_strtod_l+0x1b4>
   d9912:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d9916:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9918:	9308      	str	r3, [sp, #32]
   d991a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d991c:	1c59      	adds	r1, r3, #1
   d991e:	911d      	str	r1, [sp, #116]	; 0x74
   d9920:	785b      	ldrb	r3, [r3, #1]
   d9922:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d9926:	2e09      	cmp	r6, #9
   d9928:	d937      	bls.n	d999a <_strtod_l+0x34a>
   d992a:	9e08      	ldr	r6, [sp, #32]
   d992c:	1b89      	subs	r1, r1, r6
   d992e:	2908      	cmp	r1, #8
   d9930:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d9934:	dc02      	bgt.n	d993c <_strtod_l+0x2ec>
   d9936:	4576      	cmp	r6, lr
   d9938:	bfa8      	it	ge
   d993a:	4676      	movge	r6, lr
   d993c:	f1bc 0f00 	cmp.w	ip, #0
   d9940:	d000      	beq.n	d9944 <_strtod_l+0x2f4>
   d9942:	4276      	negs	r6, r6
   d9944:	2d00      	cmp	r5, #0
   d9946:	d14f      	bne.n	d99e8 <_strtod_l+0x398>
   d9948:	9904      	ldr	r1, [sp, #16]
   d994a:	4301      	orrs	r1, r0
   d994c:	f47f aec2 	bne.w	d96d4 <_strtod_l+0x84>
   d9950:	2a00      	cmp	r2, #0
   d9952:	f47f aedb 	bne.w	d970c <_strtod_l+0xbc>
   d9956:	2b69      	cmp	r3, #105	; 0x69
   d9958:	d027      	beq.n	d99aa <_strtod_l+0x35a>
   d995a:	dc24      	bgt.n	d99a6 <_strtod_l+0x356>
   d995c:	2b49      	cmp	r3, #73	; 0x49
   d995e:	d024      	beq.n	d99aa <_strtod_l+0x35a>
   d9960:	2b4e      	cmp	r3, #78	; 0x4e
   d9962:	f47f aed3 	bne.w	d970c <_strtod_l+0xbc>
   d9966:	499e      	ldr	r1, [pc, #632]	; (d9be0 <_strtod_l+0x590>)
   d9968:	a81d      	add	r0, sp, #116	; 0x74
   d996a:	f000 ffb9 	bl	da8e0 <__match>
   d996e:	2800      	cmp	r0, #0
   d9970:	f43f aecc 	beq.w	d970c <_strtod_l+0xbc>
   d9974:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9976:	781b      	ldrb	r3, [r3, #0]
   d9978:	2b28      	cmp	r3, #40	; 0x28
   d997a:	d12d      	bne.n	d99d8 <_strtod_l+0x388>
   d997c:	4999      	ldr	r1, [pc, #612]	; (d9be4 <_strtod_l+0x594>)
   d997e:	aa20      	add	r2, sp, #128	; 0x80
   d9980:	a81d      	add	r0, sp, #116	; 0x74
   d9982:	f000 ffc1 	bl	da908 <__hexnan>
   d9986:	2805      	cmp	r0, #5
   d9988:	d126      	bne.n	d99d8 <_strtod_l+0x388>
   d998a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d998c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d9990:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d9994:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d9998:	e69c      	b.n	d96d4 <_strtod_l+0x84>
   d999a:	210a      	movs	r1, #10
   d999c:	fb01 3e0e 	mla	lr, r1, lr, r3
   d99a0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d99a4:	e7b9      	b.n	d991a <_strtod_l+0x2ca>
   d99a6:	2b6e      	cmp	r3, #110	; 0x6e
   d99a8:	e7db      	b.n	d9962 <_strtod_l+0x312>
   d99aa:	498f      	ldr	r1, [pc, #572]	; (d9be8 <_strtod_l+0x598>)
   d99ac:	a81d      	add	r0, sp, #116	; 0x74
   d99ae:	f000 ff97 	bl	da8e0 <__match>
   d99b2:	2800      	cmp	r0, #0
   d99b4:	f43f aeaa 	beq.w	d970c <_strtod_l+0xbc>
   d99b8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d99ba:	498c      	ldr	r1, [pc, #560]	; (d9bec <_strtod_l+0x59c>)
   d99bc:	3b01      	subs	r3, #1
   d99be:	a81d      	add	r0, sp, #116	; 0x74
   d99c0:	931d      	str	r3, [sp, #116]	; 0x74
   d99c2:	f000 ff8d 	bl	da8e0 <__match>
   d99c6:	b910      	cbnz	r0, d99ce <_strtod_l+0x37e>
   d99c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d99ca:	3301      	adds	r3, #1
   d99cc:	931d      	str	r3, [sp, #116]	; 0x74
   d99ce:	f8df b22c 	ldr.w	fp, [pc, #556]	; d9bfc <_strtod_l+0x5ac>
   d99d2:	f04f 0a00 	mov.w	sl, #0
   d99d6:	e67d      	b.n	d96d4 <_strtod_l+0x84>
   d99d8:	4885      	ldr	r0, [pc, #532]	; (d9bf0 <_strtod_l+0x5a0>)
   d99da:	f001 fc91 	bl	db300 <nan>
   d99de:	ed8d 0b04 	vstr	d0, [sp, #16]
   d99e2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d99e6:	e675      	b.n	d96d4 <_strtod_l+0x84>
   d99e8:	9b07      	ldr	r3, [sp, #28]
   d99ea:	9809      	ldr	r0, [sp, #36]	; 0x24
   d99ec:	1af3      	subs	r3, r6, r3
   d99ee:	2f00      	cmp	r7, #0
   d99f0:	bf08      	it	eq
   d99f2:	462f      	moveq	r7, r5
   d99f4:	2d10      	cmp	r5, #16
   d99f6:	9308      	str	r3, [sp, #32]
   d99f8:	46a8      	mov	r8, r5
   d99fa:	bfa8      	it	ge
   d99fc:	f04f 0810 	movge.w	r8, #16
   d9a00:	f7ff f952 	bl	d8ca8 <__aeabi_ui2d>
   d9a04:	2d09      	cmp	r5, #9
   d9a06:	4682      	mov	sl, r0
   d9a08:	468b      	mov	fp, r1
   d9a0a:	dd13      	ble.n	d9a34 <_strtod_l+0x3e4>
   d9a0c:	4b79      	ldr	r3, [pc, #484]	; (d9bf4 <_strtod_l+0x5a4>)
   d9a0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d9a12:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d9a16:	f7ff f9c1 	bl	d8d9c <__aeabi_dmul>
   d9a1a:	4682      	mov	sl, r0
   d9a1c:	4648      	mov	r0, r9
   d9a1e:	468b      	mov	fp, r1
   d9a20:	f7ff f942 	bl	d8ca8 <__aeabi_ui2d>
   d9a24:	4602      	mov	r2, r0
   d9a26:	460b      	mov	r3, r1
   d9a28:	4650      	mov	r0, sl
   d9a2a:	4659      	mov	r1, fp
   d9a2c:	f7ff f800 	bl	d8a30 <__adddf3>
   d9a30:	4682      	mov	sl, r0
   d9a32:	468b      	mov	fp, r1
   d9a34:	2d0f      	cmp	r5, #15
   d9a36:	dc38      	bgt.n	d9aaa <_strtod_l+0x45a>
   d9a38:	9b08      	ldr	r3, [sp, #32]
   d9a3a:	2b00      	cmp	r3, #0
   d9a3c:	f43f ae4a 	beq.w	d96d4 <_strtod_l+0x84>
   d9a40:	dd24      	ble.n	d9a8c <_strtod_l+0x43c>
   d9a42:	2b16      	cmp	r3, #22
   d9a44:	dc0b      	bgt.n	d9a5e <_strtod_l+0x40e>
   d9a46:	4d6b      	ldr	r5, [pc, #428]	; (d9bf4 <_strtod_l+0x5a4>)
   d9a48:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d9a4c:	e9d5 0100 	ldrd	r0, r1, [r5]
   d9a50:	4652      	mov	r2, sl
   d9a52:	465b      	mov	r3, fp
   d9a54:	f7ff f9a2 	bl	d8d9c <__aeabi_dmul>
   d9a58:	4682      	mov	sl, r0
   d9a5a:	468b      	mov	fp, r1
   d9a5c:	e63a      	b.n	d96d4 <_strtod_l+0x84>
   d9a5e:	9a08      	ldr	r2, [sp, #32]
   d9a60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d9a64:	4293      	cmp	r3, r2
   d9a66:	db20      	blt.n	d9aaa <_strtod_l+0x45a>
   d9a68:	4c62      	ldr	r4, [pc, #392]	; (d9bf4 <_strtod_l+0x5a4>)
   d9a6a:	f1c5 050f 	rsb	r5, r5, #15
   d9a6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d9a72:	4652      	mov	r2, sl
   d9a74:	465b      	mov	r3, fp
   d9a76:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9a7a:	f7ff f98f 	bl	d8d9c <__aeabi_dmul>
   d9a7e:	9b08      	ldr	r3, [sp, #32]
   d9a80:	1b5d      	subs	r5, r3, r5
   d9a82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d9a86:	e9d4 2300 	ldrd	r2, r3, [r4]
   d9a8a:	e7e3      	b.n	d9a54 <_strtod_l+0x404>
   d9a8c:	9b08      	ldr	r3, [sp, #32]
   d9a8e:	3316      	adds	r3, #22
   d9a90:	db0b      	blt.n	d9aaa <_strtod_l+0x45a>
   d9a92:	9b07      	ldr	r3, [sp, #28]
   d9a94:	4a57      	ldr	r2, [pc, #348]	; (d9bf4 <_strtod_l+0x5a4>)
   d9a96:	1b9e      	subs	r6, r3, r6
   d9a98:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d9a9c:	e9d6 2300 	ldrd	r2, r3, [r6]
   d9aa0:	4650      	mov	r0, sl
   d9aa2:	4659      	mov	r1, fp
   d9aa4:	f7ff faa4 	bl	d8ff0 <__aeabi_ddiv>
   d9aa8:	e7d6      	b.n	d9a58 <_strtod_l+0x408>
   d9aaa:	9b08      	ldr	r3, [sp, #32]
   d9aac:	eba5 0808 	sub.w	r8, r5, r8
   d9ab0:	4498      	add	r8, r3
   d9ab2:	f1b8 0f00 	cmp.w	r8, #0
   d9ab6:	dd71      	ble.n	d9b9c <_strtod_l+0x54c>
   d9ab8:	f018 030f 	ands.w	r3, r8, #15
   d9abc:	d00a      	beq.n	d9ad4 <_strtod_l+0x484>
   d9abe:	494d      	ldr	r1, [pc, #308]	; (d9bf4 <_strtod_l+0x5a4>)
   d9ac0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d9ac4:	4652      	mov	r2, sl
   d9ac6:	465b      	mov	r3, fp
   d9ac8:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9acc:	f7ff f966 	bl	d8d9c <__aeabi_dmul>
   d9ad0:	4682      	mov	sl, r0
   d9ad2:	468b      	mov	fp, r1
   d9ad4:	f038 080f 	bics.w	r8, r8, #15
   d9ad8:	d04d      	beq.n	d9b76 <_strtod_l+0x526>
   d9ada:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d9ade:	dd22      	ble.n	d9b26 <_strtod_l+0x4d6>
   d9ae0:	2500      	movs	r5, #0
   d9ae2:	462e      	mov	r6, r5
   d9ae4:	9509      	str	r5, [sp, #36]	; 0x24
   d9ae6:	9507      	str	r5, [sp, #28]
   d9ae8:	2322      	movs	r3, #34	; 0x22
   d9aea:	f8df b110 	ldr.w	fp, [pc, #272]	; d9bfc <_strtod_l+0x5ac>
   d9aee:	6023      	str	r3, [r4, #0]
   d9af0:	f04f 0a00 	mov.w	sl, #0
   d9af4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9af6:	2b00      	cmp	r3, #0
   d9af8:	f43f adec 	beq.w	d96d4 <_strtod_l+0x84>
   d9afc:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9afe:	4620      	mov	r0, r4
   d9b00:	f000 ffe4 	bl	daacc <_Bfree>
   d9b04:	9907      	ldr	r1, [sp, #28]
   d9b06:	4620      	mov	r0, r4
   d9b08:	f000 ffe0 	bl	daacc <_Bfree>
   d9b0c:	4631      	mov	r1, r6
   d9b0e:	4620      	mov	r0, r4
   d9b10:	f000 ffdc 	bl	daacc <_Bfree>
   d9b14:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9b16:	4620      	mov	r0, r4
   d9b18:	f000 ffd8 	bl	daacc <_Bfree>
   d9b1c:	4629      	mov	r1, r5
   d9b1e:	4620      	mov	r0, r4
   d9b20:	f000 ffd4 	bl	daacc <_Bfree>
   d9b24:	e5d6      	b.n	d96d4 <_strtod_l+0x84>
   d9b26:	2300      	movs	r3, #0
   d9b28:	ea4f 1828 	mov.w	r8, r8, asr #4
   d9b2c:	4650      	mov	r0, sl
   d9b2e:	4659      	mov	r1, fp
   d9b30:	4699      	mov	r9, r3
   d9b32:	f1b8 0f01 	cmp.w	r8, #1
   d9b36:	dc21      	bgt.n	d9b7c <_strtod_l+0x52c>
   d9b38:	b10b      	cbz	r3, d9b3e <_strtod_l+0x4ee>
   d9b3a:	4682      	mov	sl, r0
   d9b3c:	468b      	mov	fp, r1
   d9b3e:	4b2e      	ldr	r3, [pc, #184]	; (d9bf8 <_strtod_l+0x5a8>)
   d9b40:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d9b44:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d9b48:	4652      	mov	r2, sl
   d9b4a:	465b      	mov	r3, fp
   d9b4c:	e9d9 0100 	ldrd	r0, r1, [r9]
   d9b50:	f7ff f924 	bl	d8d9c <__aeabi_dmul>
   d9b54:	4b29      	ldr	r3, [pc, #164]	; (d9bfc <_strtod_l+0x5ac>)
   d9b56:	460a      	mov	r2, r1
   d9b58:	400b      	ands	r3, r1
   d9b5a:	4929      	ldr	r1, [pc, #164]	; (d9c00 <_strtod_l+0x5b0>)
   d9b5c:	428b      	cmp	r3, r1
   d9b5e:	4682      	mov	sl, r0
   d9b60:	d8be      	bhi.n	d9ae0 <_strtod_l+0x490>
   d9b62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d9b66:	428b      	cmp	r3, r1
   d9b68:	bf86      	itte	hi
   d9b6a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d9c04 <_strtod_l+0x5b4>
   d9b6e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d9b72:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d9b76:	2300      	movs	r3, #0
   d9b78:	9304      	str	r3, [sp, #16]
   d9b7a:	e081      	b.n	d9c80 <_strtod_l+0x630>
   d9b7c:	f018 0f01 	tst.w	r8, #1
   d9b80:	d007      	beq.n	d9b92 <_strtod_l+0x542>
   d9b82:	4b1d      	ldr	r3, [pc, #116]	; (d9bf8 <_strtod_l+0x5a8>)
   d9b84:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d9b88:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9b8c:	f7ff f906 	bl	d8d9c <__aeabi_dmul>
   d9b90:	2301      	movs	r3, #1
   d9b92:	f109 0901 	add.w	r9, r9, #1
   d9b96:	ea4f 0868 	mov.w	r8, r8, asr #1
   d9b9a:	e7ca      	b.n	d9b32 <_strtod_l+0x4e2>
   d9b9c:	d0eb      	beq.n	d9b76 <_strtod_l+0x526>
   d9b9e:	f1c8 0800 	rsb	r8, r8, #0
   d9ba2:	f018 020f 	ands.w	r2, r8, #15
   d9ba6:	d00a      	beq.n	d9bbe <_strtod_l+0x56e>
   d9ba8:	4b12      	ldr	r3, [pc, #72]	; (d9bf4 <_strtod_l+0x5a4>)
   d9baa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d9bae:	4650      	mov	r0, sl
   d9bb0:	4659      	mov	r1, fp
   d9bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9bb6:	f7ff fa1b 	bl	d8ff0 <__aeabi_ddiv>
   d9bba:	4682      	mov	sl, r0
   d9bbc:	468b      	mov	fp, r1
   d9bbe:	ea5f 1828 	movs.w	r8, r8, asr #4
   d9bc2:	d0d8      	beq.n	d9b76 <_strtod_l+0x526>
   d9bc4:	f1b8 0f1f 	cmp.w	r8, #31
   d9bc8:	dd1e      	ble.n	d9c08 <_strtod_l+0x5b8>
   d9bca:	2500      	movs	r5, #0
   d9bcc:	462e      	mov	r6, r5
   d9bce:	9509      	str	r5, [sp, #36]	; 0x24
   d9bd0:	9507      	str	r5, [sp, #28]
   d9bd2:	2322      	movs	r3, #34	; 0x22
   d9bd4:	f04f 0a00 	mov.w	sl, #0
   d9bd8:	f04f 0b00 	mov.w	fp, #0
   d9bdc:	6023      	str	r3, [r4, #0]
   d9bde:	e789      	b.n	d9af4 <_strtod_l+0x4a4>
   d9be0:	000dbfb7 	.word	0x000dbfb7
   d9be4:	000dbfd0 	.word	0x000dbfd0
   d9be8:	000dbfae 	.word	0x000dbfae
   d9bec:	000dbfb1 	.word	0x000dbfb1
   d9bf0:	000dbf74 	.word	0x000dbf74
   d9bf4:	000dc150 	.word	0x000dc150
   d9bf8:	000dc128 	.word	0x000dc128
   d9bfc:	7ff00000 	.word	0x7ff00000
   d9c00:	7ca00000 	.word	0x7ca00000
   d9c04:	7fefffff 	.word	0x7fefffff
   d9c08:	f018 0310 	ands.w	r3, r8, #16
   d9c0c:	bf18      	it	ne
   d9c0e:	236a      	movne	r3, #106	; 0x6a
   d9c10:	f8df 93b4 	ldr.w	r9, [pc, #948]	; d9fc8 <_strtod_l+0x978>
   d9c14:	9304      	str	r3, [sp, #16]
   d9c16:	4650      	mov	r0, sl
   d9c18:	4659      	mov	r1, fp
   d9c1a:	2300      	movs	r3, #0
   d9c1c:	f018 0f01 	tst.w	r8, #1
   d9c20:	d004      	beq.n	d9c2c <_strtod_l+0x5dc>
   d9c22:	e9d9 2300 	ldrd	r2, r3, [r9]
   d9c26:	f7ff f8b9 	bl	d8d9c <__aeabi_dmul>
   d9c2a:	2301      	movs	r3, #1
   d9c2c:	ea5f 0868 	movs.w	r8, r8, asr #1
   d9c30:	f109 0908 	add.w	r9, r9, #8
   d9c34:	d1f2      	bne.n	d9c1c <_strtod_l+0x5cc>
   d9c36:	b10b      	cbz	r3, d9c3c <_strtod_l+0x5ec>
   d9c38:	4682      	mov	sl, r0
   d9c3a:	468b      	mov	fp, r1
   d9c3c:	9b04      	ldr	r3, [sp, #16]
   d9c3e:	b1bb      	cbz	r3, d9c70 <_strtod_l+0x620>
   d9c40:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d9c44:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9c48:	2b00      	cmp	r3, #0
   d9c4a:	4659      	mov	r1, fp
   d9c4c:	dd10      	ble.n	d9c70 <_strtod_l+0x620>
   d9c4e:	2b1f      	cmp	r3, #31
   d9c50:	f340 8128 	ble.w	d9ea4 <_strtod_l+0x854>
   d9c54:	2b34      	cmp	r3, #52	; 0x34
   d9c56:	bfde      	ittt	le
   d9c58:	3b20      	suble	r3, #32
   d9c5a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d9c5e:	fa02 f303 	lslle.w	r3, r2, r3
   d9c62:	f04f 0a00 	mov.w	sl, #0
   d9c66:	bfcc      	ite	gt
   d9c68:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d9c6c:	ea03 0b01 	andle.w	fp, r3, r1
   d9c70:	2200      	movs	r2, #0
   d9c72:	2300      	movs	r3, #0
   d9c74:	4650      	mov	r0, sl
   d9c76:	4659      	mov	r1, fp
   d9c78:	f7ff faf8 	bl	d926c <__aeabi_dcmpeq>
   d9c7c:	2800      	cmp	r0, #0
   d9c7e:	d1a4      	bne.n	d9bca <_strtod_l+0x57a>
   d9c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9c82:	9300      	str	r3, [sp, #0]
   d9c84:	990a      	ldr	r1, [sp, #40]	; 0x28
   d9c86:	462b      	mov	r3, r5
   d9c88:	463a      	mov	r2, r7
   d9c8a:	4620      	mov	r0, r4
   d9c8c:	f000 ff73 	bl	dab76 <__s2b>
   d9c90:	9009      	str	r0, [sp, #36]	; 0x24
   d9c92:	2800      	cmp	r0, #0
   d9c94:	f43f af24 	beq.w	d9ae0 <_strtod_l+0x490>
   d9c98:	9b07      	ldr	r3, [sp, #28]
   d9c9a:	1b9e      	subs	r6, r3, r6
   d9c9c:	9b08      	ldr	r3, [sp, #32]
   d9c9e:	2b00      	cmp	r3, #0
   d9ca0:	bfb4      	ite	lt
   d9ca2:	4633      	movlt	r3, r6
   d9ca4:	2300      	movge	r3, #0
   d9ca6:	9310      	str	r3, [sp, #64]	; 0x40
   d9ca8:	9b08      	ldr	r3, [sp, #32]
   d9caa:	2500      	movs	r5, #0
   d9cac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d9cb0:	9318      	str	r3, [sp, #96]	; 0x60
   d9cb2:	462e      	mov	r6, r5
   d9cb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9cb6:	4620      	mov	r0, r4
   d9cb8:	6859      	ldr	r1, [r3, #4]
   d9cba:	f000 fed3 	bl	daa64 <_Balloc>
   d9cbe:	9007      	str	r0, [sp, #28]
   d9cc0:	2800      	cmp	r0, #0
   d9cc2:	f43f af11 	beq.w	d9ae8 <_strtod_l+0x498>
   d9cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9cc8:	691a      	ldr	r2, [r3, #16]
   d9cca:	3202      	adds	r2, #2
   d9ccc:	f103 010c 	add.w	r1, r3, #12
   d9cd0:	0092      	lsls	r2, r2, #2
   d9cd2:	300c      	adds	r0, #12
   d9cd4:	f7ff fbee 	bl	d94b4 <memcpy>
   d9cd8:	ec4b ab10 	vmov	d0, sl, fp
   d9cdc:	aa20      	add	r2, sp, #128	; 0x80
   d9cde:	a91f      	add	r1, sp, #124	; 0x7c
   d9ce0:	4620      	mov	r0, r4
   d9ce2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   d9ce6:	f001 fa35 	bl	db154 <__d2b>
   d9cea:	901e      	str	r0, [sp, #120]	; 0x78
   d9cec:	2800      	cmp	r0, #0
   d9cee:	f43f aefb 	beq.w	d9ae8 <_strtod_l+0x498>
   d9cf2:	2101      	movs	r1, #1
   d9cf4:	4620      	mov	r0, r4
   d9cf6:	f000 ffcc 	bl	dac92 <__i2b>
   d9cfa:	4606      	mov	r6, r0
   d9cfc:	2800      	cmp	r0, #0
   d9cfe:	f43f aef3 	beq.w	d9ae8 <_strtod_l+0x498>
   d9d02:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d9d04:	9904      	ldr	r1, [sp, #16]
   d9d06:	2b00      	cmp	r3, #0
   d9d08:	bfab      	itete	ge
   d9d0a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   d9d0c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   d9d0e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   d9d10:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   d9d14:	bfac      	ite	ge
   d9d16:	eb03 0902 	addge.w	r9, r3, r2
   d9d1a:	1ad7      	sublt	r7, r2, r3
   d9d1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   d9d1e:	eba3 0801 	sub.w	r8, r3, r1
   d9d22:	4490      	add	r8, r2
   d9d24:	4ba3      	ldr	r3, [pc, #652]	; (d9fb4 <_strtod_l+0x964>)
   d9d26:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d9d2a:	4598      	cmp	r8, r3
   d9d2c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   d9d30:	f280 80cc 	bge.w	d9ecc <_strtod_l+0x87c>
   d9d34:	eba3 0308 	sub.w	r3, r3, r8
   d9d38:	2b1f      	cmp	r3, #31
   d9d3a:	eba2 0203 	sub.w	r2, r2, r3
   d9d3e:	f04f 0101 	mov.w	r1, #1
   d9d42:	f300 80b6 	bgt.w	d9eb2 <_strtod_l+0x862>
   d9d46:	fa01 f303 	lsl.w	r3, r1, r3
   d9d4a:	9311      	str	r3, [sp, #68]	; 0x44
   d9d4c:	2300      	movs	r3, #0
   d9d4e:	930c      	str	r3, [sp, #48]	; 0x30
   d9d50:	eb09 0802 	add.w	r8, r9, r2
   d9d54:	9b04      	ldr	r3, [sp, #16]
   d9d56:	45c1      	cmp	r9, r8
   d9d58:	4417      	add	r7, r2
   d9d5a:	441f      	add	r7, r3
   d9d5c:	464b      	mov	r3, r9
   d9d5e:	bfa8      	it	ge
   d9d60:	4643      	movge	r3, r8
   d9d62:	42bb      	cmp	r3, r7
   d9d64:	bfa8      	it	ge
   d9d66:	463b      	movge	r3, r7
   d9d68:	2b00      	cmp	r3, #0
   d9d6a:	bfc2      	ittt	gt
   d9d6c:	eba8 0803 	subgt.w	r8, r8, r3
   d9d70:	1aff      	subgt	r7, r7, r3
   d9d72:	eba9 0903 	subgt.w	r9, r9, r3
   d9d76:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d9d78:	2b00      	cmp	r3, #0
   d9d7a:	dd17      	ble.n	d9dac <_strtod_l+0x75c>
   d9d7c:	4631      	mov	r1, r6
   d9d7e:	461a      	mov	r2, r3
   d9d80:	4620      	mov	r0, r4
   d9d82:	f001 f82b 	bl	daddc <__pow5mult>
   d9d86:	4606      	mov	r6, r0
   d9d88:	2800      	cmp	r0, #0
   d9d8a:	f43f aead 	beq.w	d9ae8 <_strtod_l+0x498>
   d9d8e:	4601      	mov	r1, r0
   d9d90:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d9d92:	4620      	mov	r0, r4
   d9d94:	f000 ff86 	bl	daca4 <__multiply>
   d9d98:	900f      	str	r0, [sp, #60]	; 0x3c
   d9d9a:	2800      	cmp	r0, #0
   d9d9c:	f43f aea4 	beq.w	d9ae8 <_strtod_l+0x498>
   d9da0:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9da2:	4620      	mov	r0, r4
   d9da4:	f000 fe92 	bl	daacc <_Bfree>
   d9da8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9daa:	931e      	str	r3, [sp, #120]	; 0x78
   d9dac:	f1b8 0f00 	cmp.w	r8, #0
   d9db0:	f300 8091 	bgt.w	d9ed6 <_strtod_l+0x886>
   d9db4:	9b08      	ldr	r3, [sp, #32]
   d9db6:	2b00      	cmp	r3, #0
   d9db8:	dd08      	ble.n	d9dcc <_strtod_l+0x77c>
   d9dba:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d9dbc:	9907      	ldr	r1, [sp, #28]
   d9dbe:	4620      	mov	r0, r4
   d9dc0:	f001 f80c 	bl	daddc <__pow5mult>
   d9dc4:	9007      	str	r0, [sp, #28]
   d9dc6:	2800      	cmp	r0, #0
   d9dc8:	f43f ae8e 	beq.w	d9ae8 <_strtod_l+0x498>
   d9dcc:	2f00      	cmp	r7, #0
   d9dce:	dd08      	ble.n	d9de2 <_strtod_l+0x792>
   d9dd0:	9907      	ldr	r1, [sp, #28]
   d9dd2:	463a      	mov	r2, r7
   d9dd4:	4620      	mov	r0, r4
   d9dd6:	f001 f84f 	bl	dae78 <__lshift>
   d9dda:	9007      	str	r0, [sp, #28]
   d9ddc:	2800      	cmp	r0, #0
   d9dde:	f43f ae83 	beq.w	d9ae8 <_strtod_l+0x498>
   d9de2:	f1b9 0f00 	cmp.w	r9, #0
   d9de6:	dd08      	ble.n	d9dfa <_strtod_l+0x7aa>
   d9de8:	4631      	mov	r1, r6
   d9dea:	464a      	mov	r2, r9
   d9dec:	4620      	mov	r0, r4
   d9dee:	f001 f843 	bl	dae78 <__lshift>
   d9df2:	4606      	mov	r6, r0
   d9df4:	2800      	cmp	r0, #0
   d9df6:	f43f ae77 	beq.w	d9ae8 <_strtod_l+0x498>
   d9dfa:	9a07      	ldr	r2, [sp, #28]
   d9dfc:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9dfe:	4620      	mov	r0, r4
   d9e00:	f001 f8b5 	bl	daf6e <__mdiff>
   d9e04:	4605      	mov	r5, r0
   d9e06:	2800      	cmp	r0, #0
   d9e08:	f43f ae6e 	beq.w	d9ae8 <_strtod_l+0x498>
   d9e0c:	68c3      	ldr	r3, [r0, #12]
   d9e0e:	930f      	str	r3, [sp, #60]	; 0x3c
   d9e10:	2300      	movs	r3, #0
   d9e12:	60c3      	str	r3, [r0, #12]
   d9e14:	4631      	mov	r1, r6
   d9e16:	f001 f88e 	bl	daf36 <__mcmp>
   d9e1a:	2800      	cmp	r0, #0
   d9e1c:	da65      	bge.n	d9eea <_strtod_l+0x89a>
   d9e1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9e20:	ea53 030a 	orrs.w	r3, r3, sl
   d9e24:	f040 8087 	bne.w	d9f36 <_strtod_l+0x8e6>
   d9e28:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9e2c:	2b00      	cmp	r3, #0
   d9e2e:	f040 8082 	bne.w	d9f36 <_strtod_l+0x8e6>
   d9e32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9e36:	0d1b      	lsrs	r3, r3, #20
   d9e38:	051b      	lsls	r3, r3, #20
   d9e3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d9e3e:	d97a      	bls.n	d9f36 <_strtod_l+0x8e6>
   d9e40:	696b      	ldr	r3, [r5, #20]
   d9e42:	b913      	cbnz	r3, d9e4a <_strtod_l+0x7fa>
   d9e44:	692b      	ldr	r3, [r5, #16]
   d9e46:	2b01      	cmp	r3, #1
   d9e48:	dd75      	ble.n	d9f36 <_strtod_l+0x8e6>
   d9e4a:	4629      	mov	r1, r5
   d9e4c:	2201      	movs	r2, #1
   d9e4e:	4620      	mov	r0, r4
   d9e50:	f001 f812 	bl	dae78 <__lshift>
   d9e54:	4631      	mov	r1, r6
   d9e56:	4605      	mov	r5, r0
   d9e58:	f001 f86d 	bl	daf36 <__mcmp>
   d9e5c:	2800      	cmp	r0, #0
   d9e5e:	dd6a      	ble.n	d9f36 <_strtod_l+0x8e6>
   d9e60:	9904      	ldr	r1, [sp, #16]
   d9e62:	4a55      	ldr	r2, [pc, #340]	; (d9fb8 <_strtod_l+0x968>)
   d9e64:	465b      	mov	r3, fp
   d9e66:	2900      	cmp	r1, #0
   d9e68:	f000 8085 	beq.w	d9f76 <_strtod_l+0x926>
   d9e6c:	ea02 010b 	and.w	r1, r2, fp
   d9e70:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   d9e74:	dc7f      	bgt.n	d9f76 <_strtod_l+0x926>
   d9e76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   d9e7a:	f77f aeaa 	ble.w	d9bd2 <_strtod_l+0x582>
   d9e7e:	4a4f      	ldr	r2, [pc, #316]	; (d9fbc <_strtod_l+0x96c>)
   d9e80:	2300      	movs	r3, #0
   d9e82:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   d9e86:	4650      	mov	r0, sl
   d9e88:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   d9e8c:	4659      	mov	r1, fp
   d9e8e:	f7fe ff85 	bl	d8d9c <__aeabi_dmul>
   d9e92:	460b      	mov	r3, r1
   d9e94:	4303      	orrs	r3, r0
   d9e96:	bf08      	it	eq
   d9e98:	2322      	moveq	r3, #34	; 0x22
   d9e9a:	4682      	mov	sl, r0
   d9e9c:	468b      	mov	fp, r1
   d9e9e:	bf08      	it	eq
   d9ea0:	6023      	streq	r3, [r4, #0]
   d9ea2:	e62b      	b.n	d9afc <_strtod_l+0x4ac>
   d9ea4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9ea8:	fa02 f303 	lsl.w	r3, r2, r3
   d9eac:	ea03 0a0a 	and.w	sl, r3, sl
   d9eb0:	e6de      	b.n	d9c70 <_strtod_l+0x620>
   d9eb2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   d9eb6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   d9eba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   d9ebe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   d9ec2:	fa01 f308 	lsl.w	r3, r1, r8
   d9ec6:	930c      	str	r3, [sp, #48]	; 0x30
   d9ec8:	9111      	str	r1, [sp, #68]	; 0x44
   d9eca:	e741      	b.n	d9d50 <_strtod_l+0x700>
   d9ecc:	2300      	movs	r3, #0
   d9ece:	930c      	str	r3, [sp, #48]	; 0x30
   d9ed0:	2301      	movs	r3, #1
   d9ed2:	9311      	str	r3, [sp, #68]	; 0x44
   d9ed4:	e73c      	b.n	d9d50 <_strtod_l+0x700>
   d9ed6:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9ed8:	4642      	mov	r2, r8
   d9eda:	4620      	mov	r0, r4
   d9edc:	f000 ffcc 	bl	dae78 <__lshift>
   d9ee0:	901e      	str	r0, [sp, #120]	; 0x78
   d9ee2:	2800      	cmp	r0, #0
   d9ee4:	f47f af66 	bne.w	d9db4 <_strtod_l+0x764>
   d9ee8:	e5fe      	b.n	d9ae8 <_strtod_l+0x498>
   d9eea:	465f      	mov	r7, fp
   d9eec:	d16e      	bne.n	d9fcc <_strtod_l+0x97c>
   d9eee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d9ef0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9ef4:	b342      	cbz	r2, d9f48 <_strtod_l+0x8f8>
   d9ef6:	4a32      	ldr	r2, [pc, #200]	; (d9fc0 <_strtod_l+0x970>)
   d9ef8:	4293      	cmp	r3, r2
   d9efa:	d128      	bne.n	d9f4e <_strtod_l+0x8fe>
   d9efc:	9b04      	ldr	r3, [sp, #16]
   d9efe:	4650      	mov	r0, sl
   d9f00:	b1eb      	cbz	r3, d9f3e <_strtod_l+0x8ee>
   d9f02:	4a2d      	ldr	r2, [pc, #180]	; (d9fb8 <_strtod_l+0x968>)
   d9f04:	403a      	ands	r2, r7
   d9f06:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   d9f0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d9f0e:	d819      	bhi.n	d9f44 <_strtod_l+0x8f4>
   d9f10:	0d12      	lsrs	r2, r2, #20
   d9f12:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   d9f16:	fa01 f303 	lsl.w	r3, r1, r3
   d9f1a:	4298      	cmp	r0, r3
   d9f1c:	d117      	bne.n	d9f4e <_strtod_l+0x8fe>
   d9f1e:	4b29      	ldr	r3, [pc, #164]	; (d9fc4 <_strtod_l+0x974>)
   d9f20:	429f      	cmp	r7, r3
   d9f22:	d102      	bne.n	d9f2a <_strtod_l+0x8da>
   d9f24:	3001      	adds	r0, #1
   d9f26:	f43f addf 	beq.w	d9ae8 <_strtod_l+0x498>
   d9f2a:	4b23      	ldr	r3, [pc, #140]	; (d9fb8 <_strtod_l+0x968>)
   d9f2c:	403b      	ands	r3, r7
   d9f2e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d9f32:	f04f 0a00 	mov.w	sl, #0
   d9f36:	9b04      	ldr	r3, [sp, #16]
   d9f38:	2b00      	cmp	r3, #0
   d9f3a:	d1a0      	bne.n	d9e7e <_strtod_l+0x82e>
   d9f3c:	e5de      	b.n	d9afc <_strtod_l+0x4ac>
   d9f3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9f42:	e7ea      	b.n	d9f1a <_strtod_l+0x8ca>
   d9f44:	460b      	mov	r3, r1
   d9f46:	e7e8      	b.n	d9f1a <_strtod_l+0x8ca>
   d9f48:	ea53 030a 	orrs.w	r3, r3, sl
   d9f4c:	d088      	beq.n	d9e60 <_strtod_l+0x810>
   d9f4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9f50:	b1db      	cbz	r3, d9f8a <_strtod_l+0x93a>
   d9f52:	423b      	tst	r3, r7
   d9f54:	d0ef      	beq.n	d9f36 <_strtod_l+0x8e6>
   d9f56:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9f58:	9a04      	ldr	r2, [sp, #16]
   d9f5a:	4650      	mov	r0, sl
   d9f5c:	4659      	mov	r1, fp
   d9f5e:	b1c3      	cbz	r3, d9f92 <_strtod_l+0x942>
   d9f60:	f7ff fb58 	bl	d9614 <sulp>
   d9f64:	4602      	mov	r2, r0
   d9f66:	460b      	mov	r3, r1
   d9f68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d9f6c:	f7fe fd60 	bl	d8a30 <__adddf3>
   d9f70:	4682      	mov	sl, r0
   d9f72:	468b      	mov	fp, r1
   d9f74:	e7df      	b.n	d9f36 <_strtod_l+0x8e6>
   d9f76:	4013      	ands	r3, r2
   d9f78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d9f7c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d9f80:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d9f84:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9f88:	e7d5      	b.n	d9f36 <_strtod_l+0x8e6>
   d9f8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d9f8c:	ea13 0f0a 	tst.w	r3, sl
   d9f90:	e7e0      	b.n	d9f54 <_strtod_l+0x904>
   d9f92:	f7ff fb3f 	bl	d9614 <sulp>
   d9f96:	4602      	mov	r2, r0
   d9f98:	460b      	mov	r3, r1
   d9f9a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d9f9e:	f7fe fd45 	bl	d8a2c <__aeabi_dsub>
   d9fa2:	2200      	movs	r2, #0
   d9fa4:	2300      	movs	r3, #0
   d9fa6:	4682      	mov	sl, r0
   d9fa8:	468b      	mov	fp, r1
   d9faa:	f7ff f95f 	bl	d926c <__aeabi_dcmpeq>
   d9fae:	2800      	cmp	r0, #0
   d9fb0:	d0c1      	beq.n	d9f36 <_strtod_l+0x8e6>
   d9fb2:	e60e      	b.n	d9bd2 <_strtod_l+0x582>
   d9fb4:	fffffc02 	.word	0xfffffc02
   d9fb8:	7ff00000 	.word	0x7ff00000
   d9fbc:	39500000 	.word	0x39500000
   d9fc0:	000fffff 	.word	0x000fffff
   d9fc4:	7fefffff 	.word	0x7fefffff
   d9fc8:	000dbfe8 	.word	0x000dbfe8
   d9fcc:	4631      	mov	r1, r6
   d9fce:	4628      	mov	r0, r5
   d9fd0:	f001 f910 	bl	db1f4 <__ratio>
   d9fd4:	ec59 8b10 	vmov	r8, r9, d0
   d9fd8:	ee10 0a10 	vmov	r0, s0
   d9fdc:	2200      	movs	r2, #0
   d9fde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d9fe2:	4649      	mov	r1, r9
   d9fe4:	f7ff f956 	bl	d9294 <__aeabi_dcmple>
   d9fe8:	2800      	cmp	r0, #0
   d9fea:	d07c      	beq.n	da0e6 <_strtod_l+0xa96>
   d9fec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9fee:	2b00      	cmp	r3, #0
   d9ff0:	d04c      	beq.n	da08c <_strtod_l+0xa3c>
   d9ff2:	4b95      	ldr	r3, [pc, #596]	; (da248 <_strtod_l+0xbf8>)
   d9ff4:	2200      	movs	r2, #0
   d9ff6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9ffa:	f8df 924c 	ldr.w	r9, [pc, #588]	; da248 <_strtod_l+0xbf8>
   d9ffe:	f04f 0800 	mov.w	r8, #0
   da002:	4b92      	ldr	r3, [pc, #584]	; (da24c <_strtod_l+0xbfc>)
   da004:	403b      	ands	r3, r7
   da006:	9311      	str	r3, [sp, #68]	; 0x44
   da008:	9a11      	ldr	r2, [sp, #68]	; 0x44
   da00a:	4b91      	ldr	r3, [pc, #580]	; (da250 <_strtod_l+0xc00>)
   da00c:	429a      	cmp	r2, r3
   da00e:	f040 80b2 	bne.w	da176 <_strtod_l+0xb26>
   da012:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   da016:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   da01a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   da01e:	ec4b ab10 	vmov	d0, sl, fp
   da022:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   da026:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   da02a:	f001 f817 	bl	db05c <__ulp>
   da02e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   da032:	ec53 2b10 	vmov	r2, r3, d0
   da036:	f7fe feb1 	bl	d8d9c <__aeabi_dmul>
   da03a:	4652      	mov	r2, sl
   da03c:	465b      	mov	r3, fp
   da03e:	f7fe fcf7 	bl	d8a30 <__adddf3>
   da042:	460b      	mov	r3, r1
   da044:	4981      	ldr	r1, [pc, #516]	; (da24c <_strtod_l+0xbfc>)
   da046:	4a83      	ldr	r2, [pc, #524]	; (da254 <_strtod_l+0xc04>)
   da048:	4019      	ands	r1, r3
   da04a:	4291      	cmp	r1, r2
   da04c:	4682      	mov	sl, r0
   da04e:	d95e      	bls.n	da10e <_strtod_l+0xabe>
   da050:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   da052:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   da056:	4293      	cmp	r3, r2
   da058:	d103      	bne.n	da062 <_strtod_l+0xa12>
   da05a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da05c:	3301      	adds	r3, #1
   da05e:	f43f ad43 	beq.w	d9ae8 <_strtod_l+0x498>
   da062:	f8df b1fc 	ldr.w	fp, [pc, #508]	; da260 <_strtod_l+0xc10>
   da066:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   da06a:	991e      	ldr	r1, [sp, #120]	; 0x78
   da06c:	4620      	mov	r0, r4
   da06e:	f000 fd2d 	bl	daacc <_Bfree>
   da072:	9907      	ldr	r1, [sp, #28]
   da074:	4620      	mov	r0, r4
   da076:	f000 fd29 	bl	daacc <_Bfree>
   da07a:	4631      	mov	r1, r6
   da07c:	4620      	mov	r0, r4
   da07e:	f000 fd25 	bl	daacc <_Bfree>
   da082:	4629      	mov	r1, r5
   da084:	4620      	mov	r0, r4
   da086:	f000 fd21 	bl	daacc <_Bfree>
   da08a:	e613      	b.n	d9cb4 <_strtod_l+0x664>
   da08c:	f1ba 0f00 	cmp.w	sl, #0
   da090:	d11b      	bne.n	da0ca <_strtod_l+0xa7a>
   da092:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da096:	b9f3      	cbnz	r3, da0d6 <_strtod_l+0xa86>
   da098:	4b6b      	ldr	r3, [pc, #428]	; (da248 <_strtod_l+0xbf8>)
   da09a:	2200      	movs	r2, #0
   da09c:	4640      	mov	r0, r8
   da09e:	4649      	mov	r1, r9
   da0a0:	f7ff f8ee 	bl	d9280 <__aeabi_dcmplt>
   da0a4:	b9d0      	cbnz	r0, da0dc <_strtod_l+0xa8c>
   da0a6:	4640      	mov	r0, r8
   da0a8:	4649      	mov	r1, r9
   da0aa:	4b6b      	ldr	r3, [pc, #428]	; (da258 <_strtod_l+0xc08>)
   da0ac:	2200      	movs	r2, #0
   da0ae:	f7fe fe75 	bl	d8d9c <__aeabi_dmul>
   da0b2:	4680      	mov	r8, r0
   da0b4:	4689      	mov	r9, r1
   da0b6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   da0ba:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   da0be:	931b      	str	r3, [sp, #108]	; 0x6c
   da0c0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   da0c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   da0c8:	e79b      	b.n	da002 <_strtod_l+0x9b2>
   da0ca:	f1ba 0f01 	cmp.w	sl, #1
   da0ce:	d102      	bne.n	da0d6 <_strtod_l+0xa86>
   da0d0:	2f00      	cmp	r7, #0
   da0d2:	f43f ad7e 	beq.w	d9bd2 <_strtod_l+0x582>
   da0d6:	4b61      	ldr	r3, [pc, #388]	; (da25c <_strtod_l+0xc0c>)
   da0d8:	2200      	movs	r2, #0
   da0da:	e78c      	b.n	d9ff6 <_strtod_l+0x9a6>
   da0dc:	f8df 9178 	ldr.w	r9, [pc, #376]	; da258 <_strtod_l+0xc08>
   da0e0:	f04f 0800 	mov.w	r8, #0
   da0e4:	e7e7      	b.n	da0b6 <_strtod_l+0xa66>
   da0e6:	4b5c      	ldr	r3, [pc, #368]	; (da258 <_strtod_l+0xc08>)
   da0e8:	4640      	mov	r0, r8
   da0ea:	4649      	mov	r1, r9
   da0ec:	2200      	movs	r2, #0
   da0ee:	f7fe fe55 	bl	d8d9c <__aeabi_dmul>
   da0f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da0f4:	4680      	mov	r8, r0
   da0f6:	4689      	mov	r9, r1
   da0f8:	b933      	cbnz	r3, da108 <_strtod_l+0xab8>
   da0fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da0fe:	9012      	str	r0, [sp, #72]	; 0x48
   da100:	9313      	str	r3, [sp, #76]	; 0x4c
   da102:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   da106:	e7dd      	b.n	da0c4 <_strtod_l+0xa74>
   da108:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   da10c:	e7f9      	b.n	da102 <_strtod_l+0xab2>
   da10e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   da112:	9b04      	ldr	r3, [sp, #16]
   da114:	2b00      	cmp	r3, #0
   da116:	d1a8      	bne.n	da06a <_strtod_l+0xa1a>
   da118:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da11c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   da11e:	0d1b      	lsrs	r3, r3, #20
   da120:	051b      	lsls	r3, r3, #20
   da122:	429a      	cmp	r2, r3
   da124:	d1a1      	bne.n	da06a <_strtod_l+0xa1a>
   da126:	4640      	mov	r0, r8
   da128:	4649      	mov	r1, r9
   da12a:	f001 f8ff 	bl	db32c <__aeabi_d2lz>
   da12e:	f7fe fe07 	bl	d8d40 <__aeabi_l2d>
   da132:	4602      	mov	r2, r0
   da134:	460b      	mov	r3, r1
   da136:	4640      	mov	r0, r8
   da138:	4649      	mov	r1, r9
   da13a:	f7fe fc77 	bl	d8a2c <__aeabi_dsub>
   da13e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   da140:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da144:	ea43 030a 	orr.w	r3, r3, sl
   da148:	4313      	orrs	r3, r2
   da14a:	4680      	mov	r8, r0
   da14c:	4689      	mov	r9, r1
   da14e:	d053      	beq.n	da1f8 <_strtod_l+0xba8>
   da150:	a335      	add	r3, pc, #212	; (adr r3, da228 <_strtod_l+0xbd8>)
   da152:	e9d3 2300 	ldrd	r2, r3, [r3]
   da156:	f7ff f893 	bl	d9280 <__aeabi_dcmplt>
   da15a:	2800      	cmp	r0, #0
   da15c:	f47f acce 	bne.w	d9afc <_strtod_l+0x4ac>
   da160:	a333      	add	r3, pc, #204	; (adr r3, da230 <_strtod_l+0xbe0>)
   da162:	e9d3 2300 	ldrd	r2, r3, [r3]
   da166:	4640      	mov	r0, r8
   da168:	4649      	mov	r1, r9
   da16a:	f7ff f8a7 	bl	d92bc <__aeabi_dcmpgt>
   da16e:	2800      	cmp	r0, #0
   da170:	f43f af7b 	beq.w	da06a <_strtod_l+0xa1a>
   da174:	e4c2      	b.n	d9afc <_strtod_l+0x4ac>
   da176:	9b04      	ldr	r3, [sp, #16]
   da178:	b333      	cbz	r3, da1c8 <_strtod_l+0xb78>
   da17a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   da17c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   da180:	d822      	bhi.n	da1c8 <_strtod_l+0xb78>
   da182:	a32d      	add	r3, pc, #180	; (adr r3, da238 <_strtod_l+0xbe8>)
   da184:	e9d3 2300 	ldrd	r2, r3, [r3]
   da188:	4640      	mov	r0, r8
   da18a:	4649      	mov	r1, r9
   da18c:	f7ff f882 	bl	d9294 <__aeabi_dcmple>
   da190:	b1a0      	cbz	r0, da1bc <_strtod_l+0xb6c>
   da192:	4649      	mov	r1, r9
   da194:	4640      	mov	r0, r8
   da196:	f7ff f8b1 	bl	d92fc <__aeabi_d2uiz>
   da19a:	2801      	cmp	r0, #1
   da19c:	bf38      	it	cc
   da19e:	2001      	movcc	r0, #1
   da1a0:	f7fe fd82 	bl	d8ca8 <__aeabi_ui2d>
   da1a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da1a6:	4680      	mov	r8, r0
   da1a8:	4689      	mov	r9, r1
   da1aa:	bb13      	cbnz	r3, da1f2 <_strtod_l+0xba2>
   da1ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da1b0:	9014      	str	r0, [sp, #80]	; 0x50
   da1b2:	9315      	str	r3, [sp, #84]	; 0x54
   da1b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   da1b8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   da1bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   da1be:	9a11      	ldr	r2, [sp, #68]	; 0x44
   da1c0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   da1c4:	1a9b      	subs	r3, r3, r2
   da1c6:	930d      	str	r3, [sp, #52]	; 0x34
   da1c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   da1cc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   da1d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   da1d4:	f000 ff42 	bl	db05c <__ulp>
   da1d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   da1dc:	ec53 2b10 	vmov	r2, r3, d0
   da1e0:	f7fe fddc 	bl	d8d9c <__aeabi_dmul>
   da1e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   da1e8:	f7fe fc22 	bl	d8a30 <__adddf3>
   da1ec:	4682      	mov	sl, r0
   da1ee:	468b      	mov	fp, r1
   da1f0:	e78f      	b.n	da112 <_strtod_l+0xac2>
   da1f2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   da1f6:	e7dd      	b.n	da1b4 <_strtod_l+0xb64>
   da1f8:	a311      	add	r3, pc, #68	; (adr r3, da240 <_strtod_l+0xbf0>)
   da1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   da1fe:	f7ff f83f 	bl	d9280 <__aeabi_dcmplt>
   da202:	e7b4      	b.n	da16e <_strtod_l+0xb1e>
   da204:	2300      	movs	r3, #0
   da206:	930e      	str	r3, [sp, #56]	; 0x38
   da208:	9a19      	ldr	r2, [sp, #100]	; 0x64
   da20a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da20c:	6013      	str	r3, [r2, #0]
   da20e:	f7ff ba65 	b.w	d96dc <_strtod_l+0x8c>
   da212:	2b65      	cmp	r3, #101	; 0x65
   da214:	f43f ab5d 	beq.w	d98d2 <_strtod_l+0x282>
   da218:	2b45      	cmp	r3, #69	; 0x45
   da21a:	f43f ab5a 	beq.w	d98d2 <_strtod_l+0x282>
   da21e:	2201      	movs	r2, #1
   da220:	f7ff bb92 	b.w	d9948 <_strtod_l+0x2f8>
   da224:	f3af 8000 	nop.w
   da228:	94a03595 	.word	0x94a03595
   da22c:	3fdfffff 	.word	0x3fdfffff
   da230:	35afe535 	.word	0x35afe535
   da234:	3fe00000 	.word	0x3fe00000
   da238:	ffc00000 	.word	0xffc00000
   da23c:	41dfffff 	.word	0x41dfffff
   da240:	94a03595 	.word	0x94a03595
   da244:	3fcfffff 	.word	0x3fcfffff
   da248:	3ff00000 	.word	0x3ff00000
   da24c:	7ff00000 	.word	0x7ff00000
   da250:	7fe00000 	.word	0x7fe00000
   da254:	7c9fffff 	.word	0x7c9fffff
   da258:	3fe00000 	.word	0x3fe00000
   da25c:	bff00000 	.word	0xbff00000
   da260:	7fefffff 	.word	0x7fefffff

000da264 <strtod>:
   da264:	460a      	mov	r2, r1
   da266:	4601      	mov	r1, r0
   da268:	4802      	ldr	r0, [pc, #8]	; (da274 <strtod+0x10>)
   da26a:	4b03      	ldr	r3, [pc, #12]	; (da278 <strtod+0x14>)
   da26c:	6800      	ldr	r0, [r0, #0]
   da26e:	f7ff b9ef 	b.w	d9650 <_strtod_l>
   da272:	bf00      	nop
   da274:	2003dcc8 	.word	0x2003dcc8
   da278:	2003dd30 	.word	0x2003dd30

000da27c <_strtol_l.isra.0>:
   da27c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da280:	4e3a      	ldr	r6, [pc, #232]	; (da36c <_strtol_l.isra.0+0xf0>)
   da282:	4686      	mov	lr, r0
   da284:	468c      	mov	ip, r1
   da286:	4660      	mov	r0, ip
   da288:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da28c:	5da5      	ldrb	r5, [r4, r6]
   da28e:	f015 0508 	ands.w	r5, r5, #8
   da292:	d1f8      	bne.n	da286 <_strtol_l.isra.0+0xa>
   da294:	2c2d      	cmp	r4, #45	; 0x2d
   da296:	d133      	bne.n	da300 <_strtol_l.isra.0+0x84>
   da298:	f89c 4000 	ldrb.w	r4, [ip]
   da29c:	f04f 0801 	mov.w	r8, #1
   da2a0:	f100 0c02 	add.w	ip, r0, #2
   da2a4:	2b00      	cmp	r3, #0
   da2a6:	d05c      	beq.n	da362 <_strtol_l.isra.0+0xe6>
   da2a8:	2b10      	cmp	r3, #16
   da2aa:	d10c      	bne.n	da2c6 <_strtol_l.isra.0+0x4a>
   da2ac:	2c30      	cmp	r4, #48	; 0x30
   da2ae:	d10a      	bne.n	da2c6 <_strtol_l.isra.0+0x4a>
   da2b0:	f89c 0000 	ldrb.w	r0, [ip]
   da2b4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da2b8:	2858      	cmp	r0, #88	; 0x58
   da2ba:	d14d      	bne.n	da358 <_strtol_l.isra.0+0xdc>
   da2bc:	f89c 4001 	ldrb.w	r4, [ip, #1]
   da2c0:	2310      	movs	r3, #16
   da2c2:	f10c 0c02 	add.w	ip, ip, #2
   da2c6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   da2ca:	3f01      	subs	r7, #1
   da2cc:	2600      	movs	r6, #0
   da2ce:	fbb7 f9f3 	udiv	r9, r7, r3
   da2d2:	4630      	mov	r0, r6
   da2d4:	fb03 7a19 	mls	sl, r3, r9, r7
   da2d8:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   da2dc:	2d09      	cmp	r5, #9
   da2de:	d818      	bhi.n	da312 <_strtol_l.isra.0+0x96>
   da2e0:	462c      	mov	r4, r5
   da2e2:	42a3      	cmp	r3, r4
   da2e4:	dd24      	ble.n	da330 <_strtol_l.isra.0+0xb4>
   da2e6:	1c75      	adds	r5, r6, #1
   da2e8:	d007      	beq.n	da2fa <_strtol_l.isra.0+0x7e>
   da2ea:	4581      	cmp	r9, r0
   da2ec:	d31d      	bcc.n	da32a <_strtol_l.isra.0+0xae>
   da2ee:	d101      	bne.n	da2f4 <_strtol_l.isra.0+0x78>
   da2f0:	45a2      	cmp	sl, r4
   da2f2:	db1a      	blt.n	da32a <_strtol_l.isra.0+0xae>
   da2f4:	fb00 4003 	mla	r0, r0, r3, r4
   da2f8:	2601      	movs	r6, #1
   da2fa:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da2fe:	e7eb      	b.n	da2d8 <_strtol_l.isra.0+0x5c>
   da300:	2c2b      	cmp	r4, #43	; 0x2b
   da302:	bf08      	it	eq
   da304:	f89c 4000 	ldrbeq.w	r4, [ip]
   da308:	46a8      	mov	r8, r5
   da30a:	bf08      	it	eq
   da30c:	f100 0c02 	addeq.w	ip, r0, #2
   da310:	e7c8      	b.n	da2a4 <_strtol_l.isra.0+0x28>
   da312:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   da316:	2d19      	cmp	r5, #25
   da318:	d801      	bhi.n	da31e <_strtol_l.isra.0+0xa2>
   da31a:	3c37      	subs	r4, #55	; 0x37
   da31c:	e7e1      	b.n	da2e2 <_strtol_l.isra.0+0x66>
   da31e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   da322:	2d19      	cmp	r5, #25
   da324:	d804      	bhi.n	da330 <_strtol_l.isra.0+0xb4>
   da326:	3c57      	subs	r4, #87	; 0x57
   da328:	e7db      	b.n	da2e2 <_strtol_l.isra.0+0x66>
   da32a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   da32e:	e7e4      	b.n	da2fa <_strtol_l.isra.0+0x7e>
   da330:	1c73      	adds	r3, r6, #1
   da332:	d106      	bne.n	da342 <_strtol_l.isra.0+0xc6>
   da334:	2322      	movs	r3, #34	; 0x22
   da336:	f8ce 3000 	str.w	r3, [lr]
   da33a:	4638      	mov	r0, r7
   da33c:	b942      	cbnz	r2, da350 <_strtol_l.isra.0+0xd4>
   da33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da342:	f1b8 0f00 	cmp.w	r8, #0
   da346:	d000      	beq.n	da34a <_strtol_l.isra.0+0xce>
   da348:	4240      	negs	r0, r0
   da34a:	2a00      	cmp	r2, #0
   da34c:	d0f7      	beq.n	da33e <_strtol_l.isra.0+0xc2>
   da34e:	b10e      	cbz	r6, da354 <_strtol_l.isra.0+0xd8>
   da350:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   da354:	6011      	str	r1, [r2, #0]
   da356:	e7f2      	b.n	da33e <_strtol_l.isra.0+0xc2>
   da358:	2430      	movs	r4, #48	; 0x30
   da35a:	2b00      	cmp	r3, #0
   da35c:	d1b3      	bne.n	da2c6 <_strtol_l.isra.0+0x4a>
   da35e:	2308      	movs	r3, #8
   da360:	e7b1      	b.n	da2c6 <_strtol_l.isra.0+0x4a>
   da362:	2c30      	cmp	r4, #48	; 0x30
   da364:	d0a4      	beq.n	da2b0 <_strtol_l.isra.0+0x34>
   da366:	230a      	movs	r3, #10
   da368:	e7ad      	b.n	da2c6 <_strtol_l.isra.0+0x4a>
   da36a:	bf00      	nop
   da36c:	000dc011 	.word	0x000dc011

000da370 <strtol>:
   da370:	4613      	mov	r3, r2
   da372:	460a      	mov	r2, r1
   da374:	4601      	mov	r1, r0
   da376:	4802      	ldr	r0, [pc, #8]	; (da380 <strtol+0x10>)
   da378:	6800      	ldr	r0, [r0, #0]
   da37a:	f7ff bf7f 	b.w	da27c <_strtol_l.isra.0>
   da37e:	bf00      	nop
   da380:	2003dcc8 	.word	0x2003dcc8

000da384 <rshift>:
   da384:	6903      	ldr	r3, [r0, #16]
   da386:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   da38a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da38e:	ea4f 1261 	mov.w	r2, r1, asr #5
   da392:	f100 0414 	add.w	r4, r0, #20
   da396:	dd45      	ble.n	da424 <rshift+0xa0>
   da398:	f011 011f 	ands.w	r1, r1, #31
   da39c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   da3a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   da3a4:	d10c      	bne.n	da3c0 <rshift+0x3c>
   da3a6:	f100 0710 	add.w	r7, r0, #16
   da3aa:	4629      	mov	r1, r5
   da3ac:	42b1      	cmp	r1, r6
   da3ae:	d334      	bcc.n	da41a <rshift+0x96>
   da3b0:	1a9b      	subs	r3, r3, r2
   da3b2:	009b      	lsls	r3, r3, #2
   da3b4:	1eea      	subs	r2, r5, #3
   da3b6:	4296      	cmp	r6, r2
   da3b8:	bf38      	it	cc
   da3ba:	2300      	movcc	r3, #0
   da3bc:	4423      	add	r3, r4
   da3be:	e015      	b.n	da3ec <rshift+0x68>
   da3c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   da3c4:	f1c1 0820 	rsb	r8, r1, #32
   da3c8:	40cf      	lsrs	r7, r1
   da3ca:	f105 0e04 	add.w	lr, r5, #4
   da3ce:	46a1      	mov	r9, r4
   da3d0:	4576      	cmp	r6, lr
   da3d2:	46f4      	mov	ip, lr
   da3d4:	d815      	bhi.n	da402 <rshift+0x7e>
   da3d6:	1a9b      	subs	r3, r3, r2
   da3d8:	009a      	lsls	r2, r3, #2
   da3da:	3a04      	subs	r2, #4
   da3dc:	3501      	adds	r5, #1
   da3de:	42ae      	cmp	r6, r5
   da3e0:	bf38      	it	cc
   da3e2:	2200      	movcc	r2, #0
   da3e4:	18a3      	adds	r3, r4, r2
   da3e6:	50a7      	str	r7, [r4, r2]
   da3e8:	b107      	cbz	r7, da3ec <rshift+0x68>
   da3ea:	3304      	adds	r3, #4
   da3ec:	1b1a      	subs	r2, r3, r4
   da3ee:	42a3      	cmp	r3, r4
   da3f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
   da3f4:	bf08      	it	eq
   da3f6:	2300      	moveq	r3, #0
   da3f8:	6102      	str	r2, [r0, #16]
   da3fa:	bf08      	it	eq
   da3fc:	6143      	streq	r3, [r0, #20]
   da3fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da402:	f8dc c000 	ldr.w	ip, [ip]
   da406:	fa0c fc08 	lsl.w	ip, ip, r8
   da40a:	ea4c 0707 	orr.w	r7, ip, r7
   da40e:	f849 7b04 	str.w	r7, [r9], #4
   da412:	f85e 7b04 	ldr.w	r7, [lr], #4
   da416:	40cf      	lsrs	r7, r1
   da418:	e7da      	b.n	da3d0 <rshift+0x4c>
   da41a:	f851 cb04 	ldr.w	ip, [r1], #4
   da41e:	f847 cf04 	str.w	ip, [r7, #4]!
   da422:	e7c3      	b.n	da3ac <rshift+0x28>
   da424:	4623      	mov	r3, r4
   da426:	e7e1      	b.n	da3ec <rshift+0x68>

000da428 <__hexdig_fun>:
   da428:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   da42c:	2b09      	cmp	r3, #9
   da42e:	d802      	bhi.n	da436 <__hexdig_fun+0xe>
   da430:	3820      	subs	r0, #32
   da432:	b2c0      	uxtb	r0, r0
   da434:	4770      	bx	lr
   da436:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   da43a:	2b05      	cmp	r3, #5
   da43c:	d801      	bhi.n	da442 <__hexdig_fun+0x1a>
   da43e:	3847      	subs	r0, #71	; 0x47
   da440:	e7f7      	b.n	da432 <__hexdig_fun+0xa>
   da442:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   da446:	2b05      	cmp	r3, #5
   da448:	d801      	bhi.n	da44e <__hexdig_fun+0x26>
   da44a:	3827      	subs	r0, #39	; 0x27
   da44c:	e7f1      	b.n	da432 <__hexdig_fun+0xa>
   da44e:	2000      	movs	r0, #0
   da450:	4770      	bx	lr
	...

000da454 <__gethex>:
   da454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da458:	ed2d 8b02 	vpush	{d8}
   da45c:	b089      	sub	sp, #36	; 0x24
   da45e:	ee08 0a10 	vmov	s16, r0
   da462:	9304      	str	r3, [sp, #16]
   da464:	4bbc      	ldr	r3, [pc, #752]	; (da758 <__gethex+0x304>)
   da466:	681b      	ldr	r3, [r3, #0]
   da468:	9301      	str	r3, [sp, #4]
   da46a:	4618      	mov	r0, r3
   da46c:	468b      	mov	fp, r1
   da46e:	4690      	mov	r8, r2
   da470:	f7ff f8a3 	bl	d95ba <strlen>
   da474:	9b01      	ldr	r3, [sp, #4]
   da476:	f8db 2000 	ldr.w	r2, [fp]
   da47a:	4403      	add	r3, r0
   da47c:	4682      	mov	sl, r0
   da47e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   da482:	9305      	str	r3, [sp, #20]
   da484:	1c93      	adds	r3, r2, #2
   da486:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   da48a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   da48e:	32fe      	adds	r2, #254	; 0xfe
   da490:	18d1      	adds	r1, r2, r3
   da492:	461f      	mov	r7, r3
   da494:	f813 0b01 	ldrb.w	r0, [r3], #1
   da498:	9100      	str	r1, [sp, #0]
   da49a:	2830      	cmp	r0, #48	; 0x30
   da49c:	d0f8      	beq.n	da490 <__gethex+0x3c>
   da49e:	f7ff ffc3 	bl	da428 <__hexdig_fun>
   da4a2:	4604      	mov	r4, r0
   da4a4:	2800      	cmp	r0, #0
   da4a6:	d13a      	bne.n	da51e <__gethex+0xca>
   da4a8:	9901      	ldr	r1, [sp, #4]
   da4aa:	4652      	mov	r2, sl
   da4ac:	4638      	mov	r0, r7
   da4ae:	f7ff f88c 	bl	d95ca <strncmp>
   da4b2:	4605      	mov	r5, r0
   da4b4:	2800      	cmp	r0, #0
   da4b6:	d168      	bne.n	da58a <__gethex+0x136>
   da4b8:	f817 000a 	ldrb.w	r0, [r7, sl]
   da4bc:	eb07 060a 	add.w	r6, r7, sl
   da4c0:	f7ff ffb2 	bl	da428 <__hexdig_fun>
   da4c4:	2800      	cmp	r0, #0
   da4c6:	d062      	beq.n	da58e <__gethex+0x13a>
   da4c8:	4633      	mov	r3, r6
   da4ca:	7818      	ldrb	r0, [r3, #0]
   da4cc:	2830      	cmp	r0, #48	; 0x30
   da4ce:	461f      	mov	r7, r3
   da4d0:	f103 0301 	add.w	r3, r3, #1
   da4d4:	d0f9      	beq.n	da4ca <__gethex+0x76>
   da4d6:	f7ff ffa7 	bl	da428 <__hexdig_fun>
   da4da:	2301      	movs	r3, #1
   da4dc:	fab0 f480 	clz	r4, r0
   da4e0:	0964      	lsrs	r4, r4, #5
   da4e2:	4635      	mov	r5, r6
   da4e4:	9300      	str	r3, [sp, #0]
   da4e6:	463a      	mov	r2, r7
   da4e8:	4616      	mov	r6, r2
   da4ea:	3201      	adds	r2, #1
   da4ec:	7830      	ldrb	r0, [r6, #0]
   da4ee:	f7ff ff9b 	bl	da428 <__hexdig_fun>
   da4f2:	2800      	cmp	r0, #0
   da4f4:	d1f8      	bne.n	da4e8 <__gethex+0x94>
   da4f6:	9901      	ldr	r1, [sp, #4]
   da4f8:	4652      	mov	r2, sl
   da4fa:	4630      	mov	r0, r6
   da4fc:	f7ff f865 	bl	d95ca <strncmp>
   da500:	b980      	cbnz	r0, da524 <__gethex+0xd0>
   da502:	b94d      	cbnz	r5, da518 <__gethex+0xc4>
   da504:	eb06 050a 	add.w	r5, r6, sl
   da508:	462a      	mov	r2, r5
   da50a:	4616      	mov	r6, r2
   da50c:	3201      	adds	r2, #1
   da50e:	7830      	ldrb	r0, [r6, #0]
   da510:	f7ff ff8a 	bl	da428 <__hexdig_fun>
   da514:	2800      	cmp	r0, #0
   da516:	d1f8      	bne.n	da50a <__gethex+0xb6>
   da518:	1bad      	subs	r5, r5, r6
   da51a:	00ad      	lsls	r5, r5, #2
   da51c:	e004      	b.n	da528 <__gethex+0xd4>
   da51e:	2400      	movs	r4, #0
   da520:	4625      	mov	r5, r4
   da522:	e7e0      	b.n	da4e6 <__gethex+0x92>
   da524:	2d00      	cmp	r5, #0
   da526:	d1f7      	bne.n	da518 <__gethex+0xc4>
   da528:	7833      	ldrb	r3, [r6, #0]
   da52a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   da52e:	2b50      	cmp	r3, #80	; 0x50
   da530:	d13b      	bne.n	da5aa <__gethex+0x156>
   da532:	7873      	ldrb	r3, [r6, #1]
   da534:	2b2b      	cmp	r3, #43	; 0x2b
   da536:	d02c      	beq.n	da592 <__gethex+0x13e>
   da538:	2b2d      	cmp	r3, #45	; 0x2d
   da53a:	d02e      	beq.n	da59a <__gethex+0x146>
   da53c:	1c71      	adds	r1, r6, #1
   da53e:	f04f 0900 	mov.w	r9, #0
   da542:	7808      	ldrb	r0, [r1, #0]
   da544:	f7ff ff70 	bl	da428 <__hexdig_fun>
   da548:	1e43      	subs	r3, r0, #1
   da54a:	b2db      	uxtb	r3, r3
   da54c:	2b18      	cmp	r3, #24
   da54e:	d82c      	bhi.n	da5aa <__gethex+0x156>
   da550:	f1a0 0210 	sub.w	r2, r0, #16
   da554:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   da558:	f7ff ff66 	bl	da428 <__hexdig_fun>
   da55c:	1e43      	subs	r3, r0, #1
   da55e:	b2db      	uxtb	r3, r3
   da560:	2b18      	cmp	r3, #24
   da562:	d91d      	bls.n	da5a0 <__gethex+0x14c>
   da564:	f1b9 0f00 	cmp.w	r9, #0
   da568:	d000      	beq.n	da56c <__gethex+0x118>
   da56a:	4252      	negs	r2, r2
   da56c:	4415      	add	r5, r2
   da56e:	f8cb 1000 	str.w	r1, [fp]
   da572:	b1e4      	cbz	r4, da5ae <__gethex+0x15a>
   da574:	9b00      	ldr	r3, [sp, #0]
   da576:	2b00      	cmp	r3, #0
   da578:	bf14      	ite	ne
   da57a:	2700      	movne	r7, #0
   da57c:	2706      	moveq	r7, #6
   da57e:	4638      	mov	r0, r7
   da580:	b009      	add	sp, #36	; 0x24
   da582:	ecbd 8b02 	vpop	{d8}
   da586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da58a:	463e      	mov	r6, r7
   da58c:	4625      	mov	r5, r4
   da58e:	2401      	movs	r4, #1
   da590:	e7ca      	b.n	da528 <__gethex+0xd4>
   da592:	f04f 0900 	mov.w	r9, #0
   da596:	1cb1      	adds	r1, r6, #2
   da598:	e7d3      	b.n	da542 <__gethex+0xee>
   da59a:	f04f 0901 	mov.w	r9, #1
   da59e:	e7fa      	b.n	da596 <__gethex+0x142>
   da5a0:	230a      	movs	r3, #10
   da5a2:	fb03 0202 	mla	r2, r3, r2, r0
   da5a6:	3a10      	subs	r2, #16
   da5a8:	e7d4      	b.n	da554 <__gethex+0x100>
   da5aa:	4631      	mov	r1, r6
   da5ac:	e7df      	b.n	da56e <__gethex+0x11a>
   da5ae:	1bf3      	subs	r3, r6, r7
   da5b0:	3b01      	subs	r3, #1
   da5b2:	4621      	mov	r1, r4
   da5b4:	2b07      	cmp	r3, #7
   da5b6:	dc52      	bgt.n	da65e <__gethex+0x20a>
   da5b8:	ee18 0a10 	vmov	r0, s16
   da5bc:	f000 fa52 	bl	daa64 <_Balloc>
   da5c0:	f04f 0b00 	mov.w	fp, #0
   da5c4:	f100 0914 	add.w	r9, r0, #20
   da5c8:	f1ca 0301 	rsb	r3, sl, #1
   da5cc:	4604      	mov	r4, r0
   da5ce:	f8cd 9008 	str.w	r9, [sp, #8]
   da5d2:	f8cd b000 	str.w	fp, [sp]
   da5d6:	9306      	str	r3, [sp, #24]
   da5d8:	42b7      	cmp	r7, r6
   da5da:	d343      	bcc.n	da664 <__gethex+0x210>
   da5dc:	9802      	ldr	r0, [sp, #8]
   da5de:	9b00      	ldr	r3, [sp, #0]
   da5e0:	f840 3b04 	str.w	r3, [r0], #4
   da5e4:	eba0 0009 	sub.w	r0, r0, r9
   da5e8:	1080      	asrs	r0, r0, #2
   da5ea:	0146      	lsls	r6, r0, #5
   da5ec:	6120      	str	r0, [r4, #16]
   da5ee:	4618      	mov	r0, r3
   da5f0:	f000 faff 	bl	dabf2 <__hi0bits>
   da5f4:	1a30      	subs	r0, r6, r0
   da5f6:	f8d8 6000 	ldr.w	r6, [r8]
   da5fa:	42b0      	cmp	r0, r6
   da5fc:	dd66      	ble.n	da6cc <__gethex+0x278>
   da5fe:	1b87      	subs	r7, r0, r6
   da600:	4639      	mov	r1, r7
   da602:	4620      	mov	r0, r4
   da604:	f000 fe4c 	bl	db2a0 <__any_on>
   da608:	4682      	mov	sl, r0
   da60a:	b1a8      	cbz	r0, da638 <__gethex+0x1e4>
   da60c:	1e7b      	subs	r3, r7, #1
   da60e:	1159      	asrs	r1, r3, #5
   da610:	f003 021f 	and.w	r2, r3, #31
   da614:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   da618:	f04f 0a01 	mov.w	sl, #1
   da61c:	fa0a f202 	lsl.w	r2, sl, r2
   da620:	420a      	tst	r2, r1
   da622:	d009      	beq.n	da638 <__gethex+0x1e4>
   da624:	4553      	cmp	r3, sl
   da626:	dd05      	ble.n	da634 <__gethex+0x1e0>
   da628:	1eb9      	subs	r1, r7, #2
   da62a:	4620      	mov	r0, r4
   da62c:	f000 fe38 	bl	db2a0 <__any_on>
   da630:	2800      	cmp	r0, #0
   da632:	d148      	bne.n	da6c6 <__gethex+0x272>
   da634:	f04f 0a02 	mov.w	sl, #2
   da638:	4639      	mov	r1, r7
   da63a:	4620      	mov	r0, r4
   da63c:	f7ff fea2 	bl	da384 <rshift>
   da640:	443d      	add	r5, r7
   da642:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da646:	42ab      	cmp	r3, r5
   da648:	da4f      	bge.n	da6ea <__gethex+0x296>
   da64a:	ee18 0a10 	vmov	r0, s16
   da64e:	4621      	mov	r1, r4
   da650:	f000 fa3c 	bl	daacc <_Bfree>
   da654:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da656:	2300      	movs	r3, #0
   da658:	6013      	str	r3, [r2, #0]
   da65a:	27a3      	movs	r7, #163	; 0xa3
   da65c:	e78f      	b.n	da57e <__gethex+0x12a>
   da65e:	3101      	adds	r1, #1
   da660:	105b      	asrs	r3, r3, #1
   da662:	e7a7      	b.n	da5b4 <__gethex+0x160>
   da664:	1e73      	subs	r3, r6, #1
   da666:	9a05      	ldr	r2, [sp, #20]
   da668:	9303      	str	r3, [sp, #12]
   da66a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   da66e:	4293      	cmp	r3, r2
   da670:	d019      	beq.n	da6a6 <__gethex+0x252>
   da672:	f1bb 0f20 	cmp.w	fp, #32
   da676:	d107      	bne.n	da688 <__gethex+0x234>
   da678:	9b02      	ldr	r3, [sp, #8]
   da67a:	9a00      	ldr	r2, [sp, #0]
   da67c:	f843 2b04 	str.w	r2, [r3], #4
   da680:	9302      	str	r3, [sp, #8]
   da682:	2300      	movs	r3, #0
   da684:	9300      	str	r3, [sp, #0]
   da686:	469b      	mov	fp, r3
   da688:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   da68c:	f7ff fecc 	bl	da428 <__hexdig_fun>
   da690:	9b00      	ldr	r3, [sp, #0]
   da692:	f000 000f 	and.w	r0, r0, #15
   da696:	fa00 f00b 	lsl.w	r0, r0, fp
   da69a:	4303      	orrs	r3, r0
   da69c:	9300      	str	r3, [sp, #0]
   da69e:	f10b 0b04 	add.w	fp, fp, #4
   da6a2:	9b03      	ldr	r3, [sp, #12]
   da6a4:	e00d      	b.n	da6c2 <__gethex+0x26e>
   da6a6:	9b03      	ldr	r3, [sp, #12]
   da6a8:	9a06      	ldr	r2, [sp, #24]
   da6aa:	4413      	add	r3, r2
   da6ac:	42bb      	cmp	r3, r7
   da6ae:	d3e0      	bcc.n	da672 <__gethex+0x21e>
   da6b0:	4618      	mov	r0, r3
   da6b2:	9901      	ldr	r1, [sp, #4]
   da6b4:	9307      	str	r3, [sp, #28]
   da6b6:	4652      	mov	r2, sl
   da6b8:	f7fe ff87 	bl	d95ca <strncmp>
   da6bc:	9b07      	ldr	r3, [sp, #28]
   da6be:	2800      	cmp	r0, #0
   da6c0:	d1d7      	bne.n	da672 <__gethex+0x21e>
   da6c2:	461e      	mov	r6, r3
   da6c4:	e788      	b.n	da5d8 <__gethex+0x184>
   da6c6:	f04f 0a03 	mov.w	sl, #3
   da6ca:	e7b5      	b.n	da638 <__gethex+0x1e4>
   da6cc:	da0a      	bge.n	da6e4 <__gethex+0x290>
   da6ce:	1a37      	subs	r7, r6, r0
   da6d0:	4621      	mov	r1, r4
   da6d2:	ee18 0a10 	vmov	r0, s16
   da6d6:	463a      	mov	r2, r7
   da6d8:	f000 fbce 	bl	dae78 <__lshift>
   da6dc:	1bed      	subs	r5, r5, r7
   da6de:	4604      	mov	r4, r0
   da6e0:	f100 0914 	add.w	r9, r0, #20
   da6e4:	f04f 0a00 	mov.w	sl, #0
   da6e8:	e7ab      	b.n	da642 <__gethex+0x1ee>
   da6ea:	f8d8 0004 	ldr.w	r0, [r8, #4]
   da6ee:	42a8      	cmp	r0, r5
   da6f0:	dd6d      	ble.n	da7ce <__gethex+0x37a>
   da6f2:	1b45      	subs	r5, r0, r5
   da6f4:	42ae      	cmp	r6, r5
   da6f6:	dc31      	bgt.n	da75c <__gethex+0x308>
   da6f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
   da6fc:	2b02      	cmp	r3, #2
   da6fe:	d023      	beq.n	da748 <__gethex+0x2f4>
   da700:	2b03      	cmp	r3, #3
   da702:	d025      	beq.n	da750 <__gethex+0x2fc>
   da704:	2b01      	cmp	r3, #1
   da706:	d115      	bne.n	da734 <__gethex+0x2e0>
   da708:	42ae      	cmp	r6, r5
   da70a:	d113      	bne.n	da734 <__gethex+0x2e0>
   da70c:	2e01      	cmp	r6, #1
   da70e:	d10b      	bne.n	da728 <__gethex+0x2d4>
   da710:	9a04      	ldr	r2, [sp, #16]
   da712:	f8d8 3004 	ldr.w	r3, [r8, #4]
   da716:	6013      	str	r3, [r2, #0]
   da718:	2301      	movs	r3, #1
   da71a:	6123      	str	r3, [r4, #16]
   da71c:	f8c9 3000 	str.w	r3, [r9]
   da720:	9b14      	ldr	r3, [sp, #80]	; 0x50
   da722:	2762      	movs	r7, #98	; 0x62
   da724:	601c      	str	r4, [r3, #0]
   da726:	e72a      	b.n	da57e <__gethex+0x12a>
   da728:	1e71      	subs	r1, r6, #1
   da72a:	4620      	mov	r0, r4
   da72c:	f000 fdb8 	bl	db2a0 <__any_on>
   da730:	2800      	cmp	r0, #0
   da732:	d1ed      	bne.n	da710 <__gethex+0x2bc>
   da734:	ee18 0a10 	vmov	r0, s16
   da738:	4621      	mov	r1, r4
   da73a:	f000 f9c7 	bl	daacc <_Bfree>
   da73e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da740:	2300      	movs	r3, #0
   da742:	6013      	str	r3, [r2, #0]
   da744:	2750      	movs	r7, #80	; 0x50
   da746:	e71a      	b.n	da57e <__gethex+0x12a>
   da748:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da74a:	2b00      	cmp	r3, #0
   da74c:	d1f2      	bne.n	da734 <__gethex+0x2e0>
   da74e:	e7df      	b.n	da710 <__gethex+0x2bc>
   da750:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da752:	2b00      	cmp	r3, #0
   da754:	d1dc      	bne.n	da710 <__gethex+0x2bc>
   da756:	e7ed      	b.n	da734 <__gethex+0x2e0>
   da758:	000dc114 	.word	0x000dc114
   da75c:	1e6f      	subs	r7, r5, #1
   da75e:	f1ba 0f00 	cmp.w	sl, #0
   da762:	d131      	bne.n	da7c8 <__gethex+0x374>
   da764:	b127      	cbz	r7, da770 <__gethex+0x31c>
   da766:	4639      	mov	r1, r7
   da768:	4620      	mov	r0, r4
   da76a:	f000 fd99 	bl	db2a0 <__any_on>
   da76e:	4682      	mov	sl, r0
   da770:	117b      	asrs	r3, r7, #5
   da772:	2101      	movs	r1, #1
   da774:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   da778:	f007 071f 	and.w	r7, r7, #31
   da77c:	fa01 f707 	lsl.w	r7, r1, r7
   da780:	421f      	tst	r7, r3
   da782:	4629      	mov	r1, r5
   da784:	4620      	mov	r0, r4
   da786:	bf18      	it	ne
   da788:	f04a 0a02 	orrne.w	sl, sl, #2
   da78c:	1b76      	subs	r6, r6, r5
   da78e:	f7ff fdf9 	bl	da384 <rshift>
   da792:	f8d8 5004 	ldr.w	r5, [r8, #4]
   da796:	2702      	movs	r7, #2
   da798:	f1ba 0f00 	cmp.w	sl, #0
   da79c:	d048      	beq.n	da830 <__gethex+0x3dc>
   da79e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   da7a2:	2b02      	cmp	r3, #2
   da7a4:	d015      	beq.n	da7d2 <__gethex+0x37e>
   da7a6:	2b03      	cmp	r3, #3
   da7a8:	d017      	beq.n	da7da <__gethex+0x386>
   da7aa:	2b01      	cmp	r3, #1
   da7ac:	d109      	bne.n	da7c2 <__gethex+0x36e>
   da7ae:	f01a 0f02 	tst.w	sl, #2
   da7b2:	d006      	beq.n	da7c2 <__gethex+0x36e>
   da7b4:	f8d9 0000 	ldr.w	r0, [r9]
   da7b8:	ea4a 0a00 	orr.w	sl, sl, r0
   da7bc:	f01a 0f01 	tst.w	sl, #1
   da7c0:	d10e      	bne.n	da7e0 <__gethex+0x38c>
   da7c2:	f047 0710 	orr.w	r7, r7, #16
   da7c6:	e033      	b.n	da830 <__gethex+0x3dc>
   da7c8:	f04f 0a01 	mov.w	sl, #1
   da7cc:	e7d0      	b.n	da770 <__gethex+0x31c>
   da7ce:	2701      	movs	r7, #1
   da7d0:	e7e2      	b.n	da798 <__gethex+0x344>
   da7d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da7d4:	f1c3 0301 	rsb	r3, r3, #1
   da7d8:	9315      	str	r3, [sp, #84]	; 0x54
   da7da:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da7dc:	2b00      	cmp	r3, #0
   da7de:	d0f0      	beq.n	da7c2 <__gethex+0x36e>
   da7e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
   da7e4:	f104 0314 	add.w	r3, r4, #20
   da7e8:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   da7ec:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   da7f0:	f04f 0c00 	mov.w	ip, #0
   da7f4:	4618      	mov	r0, r3
   da7f6:	f853 2b04 	ldr.w	r2, [r3], #4
   da7fa:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   da7fe:	d01c      	beq.n	da83a <__gethex+0x3e6>
   da800:	3201      	adds	r2, #1
   da802:	6002      	str	r2, [r0, #0]
   da804:	2f02      	cmp	r7, #2
   da806:	f104 0314 	add.w	r3, r4, #20
   da80a:	d13a      	bne.n	da882 <__gethex+0x42e>
   da80c:	f8d8 2000 	ldr.w	r2, [r8]
   da810:	3a01      	subs	r2, #1
   da812:	42b2      	cmp	r2, r6
   da814:	d10a      	bne.n	da82c <__gethex+0x3d8>
   da816:	1171      	asrs	r1, r6, #5
   da818:	2201      	movs	r2, #1
   da81a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   da81e:	f006 061f 	and.w	r6, r6, #31
   da822:	fa02 f606 	lsl.w	r6, r2, r6
   da826:	421e      	tst	r6, r3
   da828:	bf18      	it	ne
   da82a:	4617      	movne	r7, r2
   da82c:	f047 0720 	orr.w	r7, r7, #32
   da830:	9b14      	ldr	r3, [sp, #80]	; 0x50
   da832:	601c      	str	r4, [r3, #0]
   da834:	9b04      	ldr	r3, [sp, #16]
   da836:	601d      	str	r5, [r3, #0]
   da838:	e6a1      	b.n	da57e <__gethex+0x12a>
   da83a:	4299      	cmp	r1, r3
   da83c:	f843 cc04 	str.w	ip, [r3, #-4]
   da840:	d8d8      	bhi.n	da7f4 <__gethex+0x3a0>
   da842:	68a3      	ldr	r3, [r4, #8]
   da844:	4599      	cmp	r9, r3
   da846:	db14      	blt.n	da872 <__gethex+0x41e>
   da848:	6861      	ldr	r1, [r4, #4]
   da84a:	ee18 0a10 	vmov	r0, s16
   da84e:	3101      	adds	r1, #1
   da850:	f000 f908 	bl	daa64 <_Balloc>
   da854:	6922      	ldr	r2, [r4, #16]
   da856:	3202      	adds	r2, #2
   da858:	f104 010c 	add.w	r1, r4, #12
   da85c:	4682      	mov	sl, r0
   da85e:	0092      	lsls	r2, r2, #2
   da860:	300c      	adds	r0, #12
   da862:	f7fe fe27 	bl	d94b4 <memcpy>
   da866:	4621      	mov	r1, r4
   da868:	ee18 0a10 	vmov	r0, s16
   da86c:	f000 f92e 	bl	daacc <_Bfree>
   da870:	4654      	mov	r4, sl
   da872:	6923      	ldr	r3, [r4, #16]
   da874:	1c5a      	adds	r2, r3, #1
   da876:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   da87a:	6122      	str	r2, [r4, #16]
   da87c:	2201      	movs	r2, #1
   da87e:	615a      	str	r2, [r3, #20]
   da880:	e7c0      	b.n	da804 <__gethex+0x3b0>
   da882:	6922      	ldr	r2, [r4, #16]
   da884:	454a      	cmp	r2, r9
   da886:	dd0b      	ble.n	da8a0 <__gethex+0x44c>
   da888:	2101      	movs	r1, #1
   da88a:	4620      	mov	r0, r4
   da88c:	f7ff fd7a 	bl	da384 <rshift>
   da890:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da894:	3501      	adds	r5, #1
   da896:	42ab      	cmp	r3, r5
   da898:	f6ff aed7 	blt.w	da64a <__gethex+0x1f6>
   da89c:	2701      	movs	r7, #1
   da89e:	e7c5      	b.n	da82c <__gethex+0x3d8>
   da8a0:	f016 061f 	ands.w	r6, r6, #31
   da8a4:	d0fa      	beq.n	da89c <__gethex+0x448>
   da8a6:	449b      	add	fp, r3
   da8a8:	f1c6 0620 	rsb	r6, r6, #32
   da8ac:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   da8b0:	f000 f99f 	bl	dabf2 <__hi0bits>
   da8b4:	42b0      	cmp	r0, r6
   da8b6:	dbe7      	blt.n	da888 <__gethex+0x434>
   da8b8:	e7f0      	b.n	da89c <__gethex+0x448>
   da8ba:	bf00      	nop

000da8bc <L_shift>:
   da8bc:	f1c2 0208 	rsb	r2, r2, #8
   da8c0:	0092      	lsls	r2, r2, #2
   da8c2:	b570      	push	{r4, r5, r6, lr}
   da8c4:	f1c2 0620 	rsb	r6, r2, #32
   da8c8:	6843      	ldr	r3, [r0, #4]
   da8ca:	6804      	ldr	r4, [r0, #0]
   da8cc:	fa03 f506 	lsl.w	r5, r3, r6
   da8d0:	432c      	orrs	r4, r5
   da8d2:	40d3      	lsrs	r3, r2
   da8d4:	6004      	str	r4, [r0, #0]
   da8d6:	f840 3f04 	str.w	r3, [r0, #4]!
   da8da:	4288      	cmp	r0, r1
   da8dc:	d3f4      	bcc.n	da8c8 <L_shift+0xc>
   da8de:	bd70      	pop	{r4, r5, r6, pc}

000da8e0 <__match>:
   da8e0:	b530      	push	{r4, r5, lr}
   da8e2:	6803      	ldr	r3, [r0, #0]
   da8e4:	3301      	adds	r3, #1
   da8e6:	f811 4b01 	ldrb.w	r4, [r1], #1
   da8ea:	b914      	cbnz	r4, da8f2 <__match+0x12>
   da8ec:	6003      	str	r3, [r0, #0]
   da8ee:	2001      	movs	r0, #1
   da8f0:	bd30      	pop	{r4, r5, pc}
   da8f2:	f813 2b01 	ldrb.w	r2, [r3], #1
   da8f6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   da8fa:	2d19      	cmp	r5, #25
   da8fc:	bf98      	it	ls
   da8fe:	3220      	addls	r2, #32
   da900:	42a2      	cmp	r2, r4
   da902:	d0f0      	beq.n	da8e6 <__match+0x6>
   da904:	2000      	movs	r0, #0
   da906:	e7f3      	b.n	da8f0 <__match+0x10>

000da908 <__hexnan>:
   da908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da90c:	680b      	ldr	r3, [r1, #0]
   da90e:	6801      	ldr	r1, [r0, #0]
   da910:	115e      	asrs	r6, r3, #5
   da912:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   da916:	f013 031f 	ands.w	r3, r3, #31
   da91a:	b087      	sub	sp, #28
   da91c:	bf18      	it	ne
   da91e:	3604      	addne	r6, #4
   da920:	2500      	movs	r5, #0
   da922:	1f37      	subs	r7, r6, #4
   da924:	4682      	mov	sl, r0
   da926:	4690      	mov	r8, r2
   da928:	9301      	str	r3, [sp, #4]
   da92a:	f846 5c04 	str.w	r5, [r6, #-4]
   da92e:	46b9      	mov	r9, r7
   da930:	463c      	mov	r4, r7
   da932:	9502      	str	r5, [sp, #8]
   da934:	46ab      	mov	fp, r5
   da936:	784a      	ldrb	r2, [r1, #1]
   da938:	1c4b      	adds	r3, r1, #1
   da93a:	9303      	str	r3, [sp, #12]
   da93c:	b342      	cbz	r2, da990 <__hexnan+0x88>
   da93e:	4610      	mov	r0, r2
   da940:	9105      	str	r1, [sp, #20]
   da942:	9204      	str	r2, [sp, #16]
   da944:	f7ff fd70 	bl	da428 <__hexdig_fun>
   da948:	2800      	cmp	r0, #0
   da94a:	d14f      	bne.n	da9ec <__hexnan+0xe4>
   da94c:	9a04      	ldr	r2, [sp, #16]
   da94e:	9905      	ldr	r1, [sp, #20]
   da950:	2a20      	cmp	r2, #32
   da952:	d818      	bhi.n	da986 <__hexnan+0x7e>
   da954:	9b02      	ldr	r3, [sp, #8]
   da956:	459b      	cmp	fp, r3
   da958:	dd13      	ble.n	da982 <__hexnan+0x7a>
   da95a:	454c      	cmp	r4, r9
   da95c:	d206      	bcs.n	da96c <__hexnan+0x64>
   da95e:	2d07      	cmp	r5, #7
   da960:	dc04      	bgt.n	da96c <__hexnan+0x64>
   da962:	462a      	mov	r2, r5
   da964:	4649      	mov	r1, r9
   da966:	4620      	mov	r0, r4
   da968:	f7ff ffa8 	bl	da8bc <L_shift>
   da96c:	4544      	cmp	r4, r8
   da96e:	d950      	bls.n	daa12 <__hexnan+0x10a>
   da970:	2300      	movs	r3, #0
   da972:	f1a4 0904 	sub.w	r9, r4, #4
   da976:	f844 3c04 	str.w	r3, [r4, #-4]
   da97a:	f8cd b008 	str.w	fp, [sp, #8]
   da97e:	464c      	mov	r4, r9
   da980:	461d      	mov	r5, r3
   da982:	9903      	ldr	r1, [sp, #12]
   da984:	e7d7      	b.n	da936 <__hexnan+0x2e>
   da986:	2a29      	cmp	r2, #41	; 0x29
   da988:	d156      	bne.n	daa38 <__hexnan+0x130>
   da98a:	3102      	adds	r1, #2
   da98c:	f8ca 1000 	str.w	r1, [sl]
   da990:	f1bb 0f00 	cmp.w	fp, #0
   da994:	d050      	beq.n	daa38 <__hexnan+0x130>
   da996:	454c      	cmp	r4, r9
   da998:	d206      	bcs.n	da9a8 <__hexnan+0xa0>
   da99a:	2d07      	cmp	r5, #7
   da99c:	dc04      	bgt.n	da9a8 <__hexnan+0xa0>
   da99e:	462a      	mov	r2, r5
   da9a0:	4649      	mov	r1, r9
   da9a2:	4620      	mov	r0, r4
   da9a4:	f7ff ff8a 	bl	da8bc <L_shift>
   da9a8:	4544      	cmp	r4, r8
   da9aa:	d934      	bls.n	daa16 <__hexnan+0x10e>
   da9ac:	f1a8 0204 	sub.w	r2, r8, #4
   da9b0:	4623      	mov	r3, r4
   da9b2:	f853 1b04 	ldr.w	r1, [r3], #4
   da9b6:	f842 1f04 	str.w	r1, [r2, #4]!
   da9ba:	429f      	cmp	r7, r3
   da9bc:	d2f9      	bcs.n	da9b2 <__hexnan+0xaa>
   da9be:	1b3b      	subs	r3, r7, r4
   da9c0:	f023 0303 	bic.w	r3, r3, #3
   da9c4:	3304      	adds	r3, #4
   da9c6:	3401      	adds	r4, #1
   da9c8:	3e03      	subs	r6, #3
   da9ca:	42b4      	cmp	r4, r6
   da9cc:	bf88      	it	hi
   da9ce:	2304      	movhi	r3, #4
   da9d0:	4443      	add	r3, r8
   da9d2:	2200      	movs	r2, #0
   da9d4:	f843 2b04 	str.w	r2, [r3], #4
   da9d8:	429f      	cmp	r7, r3
   da9da:	d2fb      	bcs.n	da9d4 <__hexnan+0xcc>
   da9dc:	683b      	ldr	r3, [r7, #0]
   da9de:	b91b      	cbnz	r3, da9e8 <__hexnan+0xe0>
   da9e0:	4547      	cmp	r7, r8
   da9e2:	d127      	bne.n	daa34 <__hexnan+0x12c>
   da9e4:	2301      	movs	r3, #1
   da9e6:	603b      	str	r3, [r7, #0]
   da9e8:	2005      	movs	r0, #5
   da9ea:	e026      	b.n	daa3a <__hexnan+0x132>
   da9ec:	3501      	adds	r5, #1
   da9ee:	2d08      	cmp	r5, #8
   da9f0:	f10b 0b01 	add.w	fp, fp, #1
   da9f4:	dd06      	ble.n	daa04 <__hexnan+0xfc>
   da9f6:	4544      	cmp	r4, r8
   da9f8:	d9c3      	bls.n	da982 <__hexnan+0x7a>
   da9fa:	2300      	movs	r3, #0
   da9fc:	f844 3c04 	str.w	r3, [r4, #-4]
   daa00:	2501      	movs	r5, #1
   daa02:	3c04      	subs	r4, #4
   daa04:	6822      	ldr	r2, [r4, #0]
   daa06:	f000 000f 	and.w	r0, r0, #15
   daa0a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   daa0e:	6022      	str	r2, [r4, #0]
   daa10:	e7b7      	b.n	da982 <__hexnan+0x7a>
   daa12:	2508      	movs	r5, #8
   daa14:	e7b5      	b.n	da982 <__hexnan+0x7a>
   daa16:	9b01      	ldr	r3, [sp, #4]
   daa18:	2b00      	cmp	r3, #0
   daa1a:	d0df      	beq.n	da9dc <__hexnan+0xd4>
   daa1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   daa20:	f1c3 0320 	rsb	r3, r3, #32
   daa24:	fa22 f303 	lsr.w	r3, r2, r3
   daa28:	f856 2c04 	ldr.w	r2, [r6, #-4]
   daa2c:	401a      	ands	r2, r3
   daa2e:	f846 2c04 	str.w	r2, [r6, #-4]
   daa32:	e7d3      	b.n	da9dc <__hexnan+0xd4>
   daa34:	3f04      	subs	r7, #4
   daa36:	e7d1      	b.n	da9dc <__hexnan+0xd4>
   daa38:	2004      	movs	r0, #4
   daa3a:	b007      	add	sp, #28
   daa3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000daa40 <__ascii_mbtowc>:
   daa40:	b082      	sub	sp, #8
   daa42:	b901      	cbnz	r1, daa46 <__ascii_mbtowc+0x6>
   daa44:	a901      	add	r1, sp, #4
   daa46:	b142      	cbz	r2, daa5a <__ascii_mbtowc+0x1a>
   daa48:	b14b      	cbz	r3, daa5e <__ascii_mbtowc+0x1e>
   daa4a:	7813      	ldrb	r3, [r2, #0]
   daa4c:	600b      	str	r3, [r1, #0]
   daa4e:	7812      	ldrb	r2, [r2, #0]
   daa50:	1e10      	subs	r0, r2, #0
   daa52:	bf18      	it	ne
   daa54:	2001      	movne	r0, #1
   daa56:	b002      	add	sp, #8
   daa58:	4770      	bx	lr
   daa5a:	4610      	mov	r0, r2
   daa5c:	e7fb      	b.n	daa56 <__ascii_mbtowc+0x16>
   daa5e:	f06f 0001 	mvn.w	r0, #1
   daa62:	e7f8      	b.n	daa56 <__ascii_mbtowc+0x16>

000daa64 <_Balloc>:
   daa64:	b570      	push	{r4, r5, r6, lr}
   daa66:	6a46      	ldr	r6, [r0, #36]	; 0x24
   daa68:	4604      	mov	r4, r0
   daa6a:	460d      	mov	r5, r1
   daa6c:	b93e      	cbnz	r6, daa7e <_Balloc+0x1a>
   daa6e:	2010      	movs	r0, #16
   daa70:	f7fc fb04 	bl	d707c <malloc>
   daa74:	e9c0 6601 	strd	r6, r6, [r0, #4]
   daa78:	6260      	str	r0, [r4, #36]	; 0x24
   daa7a:	6006      	str	r6, [r0, #0]
   daa7c:	60c6      	str	r6, [r0, #12]
   daa7e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   daa80:	68f3      	ldr	r3, [r6, #12]
   daa82:	b183      	cbz	r3, daaa6 <_Balloc+0x42>
   daa84:	6a63      	ldr	r3, [r4, #36]	; 0x24
   daa86:	68db      	ldr	r3, [r3, #12]
   daa88:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   daa8c:	b9b8      	cbnz	r0, daabe <_Balloc+0x5a>
   daa8e:	2101      	movs	r1, #1
   daa90:	fa01 f605 	lsl.w	r6, r1, r5
   daa94:	1d72      	adds	r2, r6, #5
   daa96:	0092      	lsls	r2, r2, #2
   daa98:	4620      	mov	r0, r4
   daa9a:	f000 fc22 	bl	db2e2 <_calloc_r>
   daa9e:	b160      	cbz	r0, daaba <_Balloc+0x56>
   daaa0:	e9c0 5601 	strd	r5, r6, [r0, #4]
   daaa4:	e00e      	b.n	daac4 <_Balloc+0x60>
   daaa6:	2221      	movs	r2, #33	; 0x21
   daaa8:	2104      	movs	r1, #4
   daaaa:	4620      	mov	r0, r4
   daaac:	f000 fc19 	bl	db2e2 <_calloc_r>
   daab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   daab2:	60f0      	str	r0, [r6, #12]
   daab4:	68db      	ldr	r3, [r3, #12]
   daab6:	2b00      	cmp	r3, #0
   daab8:	d1e4      	bne.n	daa84 <_Balloc+0x20>
   daaba:	2000      	movs	r0, #0
   daabc:	bd70      	pop	{r4, r5, r6, pc}
   daabe:	6802      	ldr	r2, [r0, #0]
   daac0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   daac4:	2300      	movs	r3, #0
   daac6:	e9c0 3303 	strd	r3, r3, [r0, #12]
   daaca:	e7f7      	b.n	daabc <_Balloc+0x58>

000daacc <_Bfree>:
   daacc:	b570      	push	{r4, r5, r6, lr}
   daace:	6a46      	ldr	r6, [r0, #36]	; 0x24
   daad0:	4605      	mov	r5, r0
   daad2:	460c      	mov	r4, r1
   daad4:	b93e      	cbnz	r6, daae6 <_Bfree+0x1a>
   daad6:	2010      	movs	r0, #16
   daad8:	f7fc fad0 	bl	d707c <malloc>
   daadc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   daae0:	6268      	str	r0, [r5, #36]	; 0x24
   daae2:	6006      	str	r6, [r0, #0]
   daae4:	60c6      	str	r6, [r0, #12]
   daae6:	b13c      	cbz	r4, daaf8 <_Bfree+0x2c>
   daae8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   daaea:	6862      	ldr	r2, [r4, #4]
   daaec:	68db      	ldr	r3, [r3, #12]
   daaee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   daaf2:	6021      	str	r1, [r4, #0]
   daaf4:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   daaf8:	bd70      	pop	{r4, r5, r6, pc}

000daafa <__multadd>:
   daafa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   daafe:	690e      	ldr	r6, [r1, #16]
   dab00:	4607      	mov	r7, r0
   dab02:	4698      	mov	r8, r3
   dab04:	460c      	mov	r4, r1
   dab06:	f101 0014 	add.w	r0, r1, #20
   dab0a:	2300      	movs	r3, #0
   dab0c:	6805      	ldr	r5, [r0, #0]
   dab0e:	b2a9      	uxth	r1, r5
   dab10:	fb02 8101 	mla	r1, r2, r1, r8
   dab14:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   dab18:	0c2d      	lsrs	r5, r5, #16
   dab1a:	fb02 c505 	mla	r5, r2, r5, ip
   dab1e:	b289      	uxth	r1, r1
   dab20:	3301      	adds	r3, #1
   dab22:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   dab26:	429e      	cmp	r6, r3
   dab28:	f840 1b04 	str.w	r1, [r0], #4
   dab2c:	ea4f 4815 	mov.w	r8, r5, lsr #16
   dab30:	dcec      	bgt.n	dab0c <__multadd+0x12>
   dab32:	f1b8 0f00 	cmp.w	r8, #0
   dab36:	d01b      	beq.n	dab70 <__multadd+0x76>
   dab38:	68a3      	ldr	r3, [r4, #8]
   dab3a:	42b3      	cmp	r3, r6
   dab3c:	dc12      	bgt.n	dab64 <__multadd+0x6a>
   dab3e:	6861      	ldr	r1, [r4, #4]
   dab40:	4638      	mov	r0, r7
   dab42:	3101      	adds	r1, #1
   dab44:	f7ff ff8e 	bl	daa64 <_Balloc>
   dab48:	6922      	ldr	r2, [r4, #16]
   dab4a:	3202      	adds	r2, #2
   dab4c:	f104 010c 	add.w	r1, r4, #12
   dab50:	4605      	mov	r5, r0
   dab52:	0092      	lsls	r2, r2, #2
   dab54:	300c      	adds	r0, #12
   dab56:	f7fe fcad 	bl	d94b4 <memcpy>
   dab5a:	4621      	mov	r1, r4
   dab5c:	4638      	mov	r0, r7
   dab5e:	f7ff ffb5 	bl	daacc <_Bfree>
   dab62:	462c      	mov	r4, r5
   dab64:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   dab68:	3601      	adds	r6, #1
   dab6a:	f8c3 8014 	str.w	r8, [r3, #20]
   dab6e:	6126      	str	r6, [r4, #16]
   dab70:	4620      	mov	r0, r4
   dab72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dab76 <__s2b>:
   dab76:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dab7a:	460c      	mov	r4, r1
   dab7c:	4615      	mov	r5, r2
   dab7e:	461f      	mov	r7, r3
   dab80:	2209      	movs	r2, #9
   dab82:	3308      	adds	r3, #8
   dab84:	4606      	mov	r6, r0
   dab86:	fb93 f3f2 	sdiv	r3, r3, r2
   dab8a:	2100      	movs	r1, #0
   dab8c:	2201      	movs	r2, #1
   dab8e:	429a      	cmp	r2, r3
   dab90:	db20      	blt.n	dabd4 <__s2b+0x5e>
   dab92:	4630      	mov	r0, r6
   dab94:	f7ff ff66 	bl	daa64 <_Balloc>
   dab98:	9b08      	ldr	r3, [sp, #32]
   dab9a:	6143      	str	r3, [r0, #20]
   dab9c:	2d09      	cmp	r5, #9
   dab9e:	f04f 0301 	mov.w	r3, #1
   daba2:	6103      	str	r3, [r0, #16]
   daba4:	dd19      	ble.n	dabda <__s2b+0x64>
   daba6:	f104 0909 	add.w	r9, r4, #9
   dabaa:	46c8      	mov	r8, r9
   dabac:	442c      	add	r4, r5
   dabae:	f818 3b01 	ldrb.w	r3, [r8], #1
   dabb2:	4601      	mov	r1, r0
   dabb4:	3b30      	subs	r3, #48	; 0x30
   dabb6:	220a      	movs	r2, #10
   dabb8:	4630      	mov	r0, r6
   dabba:	f7ff ff9e 	bl	daafa <__multadd>
   dabbe:	45a0      	cmp	r8, r4
   dabc0:	d1f5      	bne.n	dabae <__s2b+0x38>
   dabc2:	f1a5 0408 	sub.w	r4, r5, #8
   dabc6:	444c      	add	r4, r9
   dabc8:	1b2d      	subs	r5, r5, r4
   dabca:	1963      	adds	r3, r4, r5
   dabcc:	42bb      	cmp	r3, r7
   dabce:	db07      	blt.n	dabe0 <__s2b+0x6a>
   dabd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dabd4:	0052      	lsls	r2, r2, #1
   dabd6:	3101      	adds	r1, #1
   dabd8:	e7d9      	b.n	dab8e <__s2b+0x18>
   dabda:	340a      	adds	r4, #10
   dabdc:	2509      	movs	r5, #9
   dabde:	e7f3      	b.n	dabc8 <__s2b+0x52>
   dabe0:	f814 3b01 	ldrb.w	r3, [r4], #1
   dabe4:	4601      	mov	r1, r0
   dabe6:	3b30      	subs	r3, #48	; 0x30
   dabe8:	220a      	movs	r2, #10
   dabea:	4630      	mov	r0, r6
   dabec:	f7ff ff85 	bl	daafa <__multadd>
   dabf0:	e7eb      	b.n	dabca <__s2b+0x54>

000dabf2 <__hi0bits>:
   dabf2:	0c03      	lsrs	r3, r0, #16
   dabf4:	041b      	lsls	r3, r3, #16
   dabf6:	b9d3      	cbnz	r3, dac2e <__hi0bits+0x3c>
   dabf8:	0400      	lsls	r0, r0, #16
   dabfa:	2310      	movs	r3, #16
   dabfc:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dac00:	bf04      	itt	eq
   dac02:	0200      	lsleq	r0, r0, #8
   dac04:	3308      	addeq	r3, #8
   dac06:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dac0a:	bf04      	itt	eq
   dac0c:	0100      	lsleq	r0, r0, #4
   dac0e:	3304      	addeq	r3, #4
   dac10:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dac14:	bf04      	itt	eq
   dac16:	0080      	lsleq	r0, r0, #2
   dac18:	3302      	addeq	r3, #2
   dac1a:	2800      	cmp	r0, #0
   dac1c:	db05      	blt.n	dac2a <__hi0bits+0x38>
   dac1e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   dac22:	f103 0301 	add.w	r3, r3, #1
   dac26:	bf08      	it	eq
   dac28:	2320      	moveq	r3, #32
   dac2a:	4618      	mov	r0, r3
   dac2c:	4770      	bx	lr
   dac2e:	2300      	movs	r3, #0
   dac30:	e7e4      	b.n	dabfc <__hi0bits+0xa>

000dac32 <__lo0bits>:
   dac32:	6803      	ldr	r3, [r0, #0]
   dac34:	f013 0207 	ands.w	r2, r3, #7
   dac38:	4601      	mov	r1, r0
   dac3a:	d00b      	beq.n	dac54 <__lo0bits+0x22>
   dac3c:	07da      	lsls	r2, r3, #31
   dac3e:	d424      	bmi.n	dac8a <__lo0bits+0x58>
   dac40:	0798      	lsls	r0, r3, #30
   dac42:	bf49      	itett	mi
   dac44:	085b      	lsrmi	r3, r3, #1
   dac46:	089b      	lsrpl	r3, r3, #2
   dac48:	2001      	movmi	r0, #1
   dac4a:	600b      	strmi	r3, [r1, #0]
   dac4c:	bf5c      	itt	pl
   dac4e:	600b      	strpl	r3, [r1, #0]
   dac50:	2002      	movpl	r0, #2
   dac52:	4770      	bx	lr
   dac54:	b298      	uxth	r0, r3
   dac56:	b9b0      	cbnz	r0, dac86 <__lo0bits+0x54>
   dac58:	0c1b      	lsrs	r3, r3, #16
   dac5a:	2010      	movs	r0, #16
   dac5c:	f013 0fff 	tst.w	r3, #255	; 0xff
   dac60:	bf04      	itt	eq
   dac62:	0a1b      	lsreq	r3, r3, #8
   dac64:	3008      	addeq	r0, #8
   dac66:	071a      	lsls	r2, r3, #28
   dac68:	bf04      	itt	eq
   dac6a:	091b      	lsreq	r3, r3, #4
   dac6c:	3004      	addeq	r0, #4
   dac6e:	079a      	lsls	r2, r3, #30
   dac70:	bf04      	itt	eq
   dac72:	089b      	lsreq	r3, r3, #2
   dac74:	3002      	addeq	r0, #2
   dac76:	07da      	lsls	r2, r3, #31
   dac78:	d403      	bmi.n	dac82 <__lo0bits+0x50>
   dac7a:	085b      	lsrs	r3, r3, #1
   dac7c:	f100 0001 	add.w	r0, r0, #1
   dac80:	d005      	beq.n	dac8e <__lo0bits+0x5c>
   dac82:	600b      	str	r3, [r1, #0]
   dac84:	4770      	bx	lr
   dac86:	4610      	mov	r0, r2
   dac88:	e7e8      	b.n	dac5c <__lo0bits+0x2a>
   dac8a:	2000      	movs	r0, #0
   dac8c:	4770      	bx	lr
   dac8e:	2020      	movs	r0, #32
   dac90:	4770      	bx	lr

000dac92 <__i2b>:
   dac92:	b510      	push	{r4, lr}
   dac94:	460c      	mov	r4, r1
   dac96:	2101      	movs	r1, #1
   dac98:	f7ff fee4 	bl	daa64 <_Balloc>
   dac9c:	2201      	movs	r2, #1
   dac9e:	6144      	str	r4, [r0, #20]
   daca0:	6102      	str	r2, [r0, #16]
   daca2:	bd10      	pop	{r4, pc}

000daca4 <__multiply>:
   daca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   daca8:	4615      	mov	r5, r2
   dacaa:	690a      	ldr	r2, [r1, #16]
   dacac:	692b      	ldr	r3, [r5, #16]
   dacae:	429a      	cmp	r2, r3
   dacb0:	bfb8      	it	lt
   dacb2:	460b      	movlt	r3, r1
   dacb4:	460c      	mov	r4, r1
   dacb6:	bfbc      	itt	lt
   dacb8:	462c      	movlt	r4, r5
   dacba:	461d      	movlt	r5, r3
   dacbc:	6927      	ldr	r7, [r4, #16]
   dacbe:	f8d5 9010 	ldr.w	r9, [r5, #16]
   dacc2:	68a3      	ldr	r3, [r4, #8]
   dacc4:	6861      	ldr	r1, [r4, #4]
   dacc6:	eb07 0609 	add.w	r6, r7, r9
   dacca:	42b3      	cmp	r3, r6
   daccc:	bfb8      	it	lt
   dacce:	3101      	addlt	r1, #1
   dacd0:	b085      	sub	sp, #20
   dacd2:	f7ff fec7 	bl	daa64 <_Balloc>
   dacd6:	f100 0114 	add.w	r1, r0, #20
   dacda:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   dacde:	460b      	mov	r3, r1
   dace0:	2200      	movs	r2, #0
   dace2:	4543      	cmp	r3, r8
   dace4:	d31d      	bcc.n	dad22 <__multiply+0x7e>
   dace6:	f104 0314 	add.w	r3, r4, #20
   dacea:	f105 0214 	add.w	r2, r5, #20
   dacee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   dacf2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dacf6:	9302      	str	r3, [sp, #8]
   dacf8:	1b3b      	subs	r3, r7, r4
   dacfa:	3b15      	subs	r3, #21
   dacfc:	f023 0303 	bic.w	r3, r3, #3
   dad00:	3304      	adds	r3, #4
   dad02:	f104 0515 	add.w	r5, r4, #21
   dad06:	42af      	cmp	r7, r5
   dad08:	bf38      	it	cc
   dad0a:	2304      	movcc	r3, #4
   dad0c:	9301      	str	r3, [sp, #4]
   dad0e:	9b02      	ldr	r3, [sp, #8]
   dad10:	9203      	str	r2, [sp, #12]
   dad12:	4293      	cmp	r3, r2
   dad14:	d808      	bhi.n	dad28 <__multiply+0x84>
   dad16:	2e00      	cmp	r6, #0
   dad18:	dc5a      	bgt.n	dadd0 <__multiply+0x12c>
   dad1a:	6106      	str	r6, [r0, #16]
   dad1c:	b005      	add	sp, #20
   dad1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dad22:	f843 2b04 	str.w	r2, [r3], #4
   dad26:	e7dc      	b.n	dace2 <__multiply+0x3e>
   dad28:	f8b2 a000 	ldrh.w	sl, [r2]
   dad2c:	f1ba 0f00 	cmp.w	sl, #0
   dad30:	d024      	beq.n	dad7c <__multiply+0xd8>
   dad32:	f104 0e14 	add.w	lr, r4, #20
   dad36:	4689      	mov	r9, r1
   dad38:	f04f 0c00 	mov.w	ip, #0
   dad3c:	f85e 5b04 	ldr.w	r5, [lr], #4
   dad40:	f8d9 b000 	ldr.w	fp, [r9]
   dad44:	b2ab      	uxth	r3, r5
   dad46:	fa1f fb8b 	uxth.w	fp, fp
   dad4a:	fb0a b303 	mla	r3, sl, r3, fp
   dad4e:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   dad52:	f8d9 5000 	ldr.w	r5, [r9]
   dad56:	4463      	add	r3, ip
   dad58:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dad5c:	fb0a c50b 	mla	r5, sl, fp, ip
   dad60:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   dad64:	b29b      	uxth	r3, r3
   dad66:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   dad6a:	4577      	cmp	r7, lr
   dad6c:	f849 3b04 	str.w	r3, [r9], #4
   dad70:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dad74:	d8e2      	bhi.n	dad3c <__multiply+0x98>
   dad76:	9b01      	ldr	r3, [sp, #4]
   dad78:	f841 c003 	str.w	ip, [r1, r3]
   dad7c:	9b03      	ldr	r3, [sp, #12]
   dad7e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   dad82:	3204      	adds	r2, #4
   dad84:	f1b9 0f00 	cmp.w	r9, #0
   dad88:	d020      	beq.n	dadcc <__multiply+0x128>
   dad8a:	680b      	ldr	r3, [r1, #0]
   dad8c:	f104 0c14 	add.w	ip, r4, #20
   dad90:	468e      	mov	lr, r1
   dad92:	f04f 0a00 	mov.w	sl, #0
   dad96:	f8bc 5000 	ldrh.w	r5, [ip]
   dad9a:	f8be b002 	ldrh.w	fp, [lr, #2]
   dad9e:	fb09 b505 	mla	r5, r9, r5, fp
   dada2:	44aa      	add	sl, r5
   dada4:	b29b      	uxth	r3, r3
   dada6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   dadaa:	f84e 3b04 	str.w	r3, [lr], #4
   dadae:	f85c 3b04 	ldr.w	r3, [ip], #4
   dadb2:	f8be 5000 	ldrh.w	r5, [lr]
   dadb6:	0c1b      	lsrs	r3, r3, #16
   dadb8:	fb09 5303 	mla	r3, r9, r3, r5
   dadbc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   dadc0:	4567      	cmp	r7, ip
   dadc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   dadc6:	d8e6      	bhi.n	dad96 <__multiply+0xf2>
   dadc8:	9d01      	ldr	r5, [sp, #4]
   dadca:	514b      	str	r3, [r1, r5]
   dadcc:	3104      	adds	r1, #4
   dadce:	e79e      	b.n	dad0e <__multiply+0x6a>
   dadd0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   dadd4:	2b00      	cmp	r3, #0
   dadd6:	d1a0      	bne.n	dad1a <__multiply+0x76>
   dadd8:	3e01      	subs	r6, #1
   dadda:	e79c      	b.n	dad16 <__multiply+0x72>

000daddc <__pow5mult>:
   daddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dade0:	4615      	mov	r5, r2
   dade2:	f012 0203 	ands.w	r2, r2, #3
   dade6:	4606      	mov	r6, r0
   dade8:	460f      	mov	r7, r1
   dadea:	d007      	beq.n	dadfc <__pow5mult+0x20>
   dadec:	4c21      	ldr	r4, [pc, #132]	; (dae74 <__pow5mult+0x98>)
   dadee:	3a01      	subs	r2, #1
   dadf0:	2300      	movs	r3, #0
   dadf2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dadf6:	f7ff fe80 	bl	daafa <__multadd>
   dadfa:	4607      	mov	r7, r0
   dadfc:	10ad      	asrs	r5, r5, #2
   dadfe:	d035      	beq.n	dae6c <__pow5mult+0x90>
   dae00:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dae02:	b93c      	cbnz	r4, dae14 <__pow5mult+0x38>
   dae04:	2010      	movs	r0, #16
   dae06:	f7fc f939 	bl	d707c <malloc>
   dae0a:	e9c0 4401 	strd	r4, r4, [r0, #4]
   dae0e:	6270      	str	r0, [r6, #36]	; 0x24
   dae10:	6004      	str	r4, [r0, #0]
   dae12:	60c4      	str	r4, [r0, #12]
   dae14:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dae18:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dae1c:	b94c      	cbnz	r4, dae32 <__pow5mult+0x56>
   dae1e:	f240 2171 	movw	r1, #625	; 0x271
   dae22:	4630      	mov	r0, r6
   dae24:	f7ff ff35 	bl	dac92 <__i2b>
   dae28:	2300      	movs	r3, #0
   dae2a:	f8c8 0008 	str.w	r0, [r8, #8]
   dae2e:	4604      	mov	r4, r0
   dae30:	6003      	str	r3, [r0, #0]
   dae32:	f04f 0900 	mov.w	r9, #0
   dae36:	07eb      	lsls	r3, r5, #31
   dae38:	d50a      	bpl.n	dae50 <__pow5mult+0x74>
   dae3a:	4639      	mov	r1, r7
   dae3c:	4622      	mov	r2, r4
   dae3e:	4630      	mov	r0, r6
   dae40:	f7ff ff30 	bl	daca4 <__multiply>
   dae44:	4639      	mov	r1, r7
   dae46:	4680      	mov	r8, r0
   dae48:	4630      	mov	r0, r6
   dae4a:	f7ff fe3f 	bl	daacc <_Bfree>
   dae4e:	4647      	mov	r7, r8
   dae50:	106d      	asrs	r5, r5, #1
   dae52:	d00b      	beq.n	dae6c <__pow5mult+0x90>
   dae54:	6820      	ldr	r0, [r4, #0]
   dae56:	b938      	cbnz	r0, dae68 <__pow5mult+0x8c>
   dae58:	4622      	mov	r2, r4
   dae5a:	4621      	mov	r1, r4
   dae5c:	4630      	mov	r0, r6
   dae5e:	f7ff ff21 	bl	daca4 <__multiply>
   dae62:	6020      	str	r0, [r4, #0]
   dae64:	f8c0 9000 	str.w	r9, [r0]
   dae68:	4604      	mov	r4, r0
   dae6a:	e7e4      	b.n	dae36 <__pow5mult+0x5a>
   dae6c:	4638      	mov	r0, r7
   dae6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dae72:	bf00      	nop
   dae74:	000dc218 	.word	0x000dc218

000dae78 <__lshift>:
   dae78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   dae7c:	460c      	mov	r4, r1
   dae7e:	6849      	ldr	r1, [r1, #4]
   dae80:	6923      	ldr	r3, [r4, #16]
   dae82:	eb03 1862 	add.w	r8, r3, r2, asr #5
   dae86:	68a3      	ldr	r3, [r4, #8]
   dae88:	4607      	mov	r7, r0
   dae8a:	4691      	mov	r9, r2
   dae8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dae90:	f108 0601 	add.w	r6, r8, #1
   dae94:	42b3      	cmp	r3, r6
   dae96:	db3f      	blt.n	daf18 <__lshift+0xa0>
   dae98:	4638      	mov	r0, r7
   dae9a:	f7ff fde3 	bl	daa64 <_Balloc>
   dae9e:	2300      	movs	r3, #0
   daea0:	4605      	mov	r5, r0
   daea2:	f100 0114 	add.w	r1, r0, #20
   daea6:	f100 0210 	add.w	r2, r0, #16
   daeaa:	4618      	mov	r0, r3
   daeac:	4553      	cmp	r3, sl
   daeae:	db36      	blt.n	daf1e <__lshift+0xa6>
   daeb0:	6920      	ldr	r0, [r4, #16]
   daeb2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   daeb6:	f104 0314 	add.w	r3, r4, #20
   daeba:	f019 091f 	ands.w	r9, r9, #31
   daebe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   daec2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   daec6:	d02e      	beq.n	daf26 <__lshift+0xae>
   daec8:	f1c9 0e20 	rsb	lr, r9, #32
   daecc:	468a      	mov	sl, r1
   daece:	2200      	movs	r2, #0
   daed0:	6818      	ldr	r0, [r3, #0]
   daed2:	fa00 f009 	lsl.w	r0, r0, r9
   daed6:	4302      	orrs	r2, r0
   daed8:	f84a 2b04 	str.w	r2, [sl], #4
   daedc:	f853 2b04 	ldr.w	r2, [r3], #4
   daee0:	459c      	cmp	ip, r3
   daee2:	fa22 f20e 	lsr.w	r2, r2, lr
   daee6:	d8f3      	bhi.n	daed0 <__lshift+0x58>
   daee8:	ebac 0304 	sub.w	r3, ip, r4
   daeec:	3b15      	subs	r3, #21
   daeee:	f023 0303 	bic.w	r3, r3, #3
   daef2:	3304      	adds	r3, #4
   daef4:	f104 0015 	add.w	r0, r4, #21
   daef8:	4560      	cmp	r0, ip
   daefa:	bf88      	it	hi
   daefc:	2304      	movhi	r3, #4
   daefe:	50ca      	str	r2, [r1, r3]
   daf00:	b10a      	cbz	r2, daf06 <__lshift+0x8e>
   daf02:	f108 0602 	add.w	r6, r8, #2
   daf06:	3e01      	subs	r6, #1
   daf08:	4638      	mov	r0, r7
   daf0a:	612e      	str	r6, [r5, #16]
   daf0c:	4621      	mov	r1, r4
   daf0e:	f7ff fddd 	bl	daacc <_Bfree>
   daf12:	4628      	mov	r0, r5
   daf14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   daf18:	3101      	adds	r1, #1
   daf1a:	005b      	lsls	r3, r3, #1
   daf1c:	e7ba      	b.n	dae94 <__lshift+0x1c>
   daf1e:	f842 0f04 	str.w	r0, [r2, #4]!
   daf22:	3301      	adds	r3, #1
   daf24:	e7c2      	b.n	daeac <__lshift+0x34>
   daf26:	3904      	subs	r1, #4
   daf28:	f853 2b04 	ldr.w	r2, [r3], #4
   daf2c:	f841 2f04 	str.w	r2, [r1, #4]!
   daf30:	459c      	cmp	ip, r3
   daf32:	d8f9      	bhi.n	daf28 <__lshift+0xb0>
   daf34:	e7e7      	b.n	daf06 <__lshift+0x8e>

000daf36 <__mcmp>:
   daf36:	b530      	push	{r4, r5, lr}
   daf38:	6902      	ldr	r2, [r0, #16]
   daf3a:	690c      	ldr	r4, [r1, #16]
   daf3c:	1b12      	subs	r2, r2, r4
   daf3e:	d10e      	bne.n	daf5e <__mcmp+0x28>
   daf40:	f100 0314 	add.w	r3, r0, #20
   daf44:	3114      	adds	r1, #20
   daf46:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   daf4a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   daf4e:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   daf52:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   daf56:	42a5      	cmp	r5, r4
   daf58:	d003      	beq.n	daf62 <__mcmp+0x2c>
   daf5a:	d305      	bcc.n	daf68 <__mcmp+0x32>
   daf5c:	2201      	movs	r2, #1
   daf5e:	4610      	mov	r0, r2
   daf60:	bd30      	pop	{r4, r5, pc}
   daf62:	4283      	cmp	r3, r0
   daf64:	d3f3      	bcc.n	daf4e <__mcmp+0x18>
   daf66:	e7fa      	b.n	daf5e <__mcmp+0x28>
   daf68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   daf6c:	e7f7      	b.n	daf5e <__mcmp+0x28>

000daf6e <__mdiff>:
   daf6e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   daf72:	460c      	mov	r4, r1
   daf74:	4606      	mov	r6, r0
   daf76:	4611      	mov	r1, r2
   daf78:	4620      	mov	r0, r4
   daf7a:	4617      	mov	r7, r2
   daf7c:	f7ff ffdb 	bl	daf36 <__mcmp>
   daf80:	1e05      	subs	r5, r0, #0
   daf82:	d108      	bne.n	daf96 <__mdiff+0x28>
   daf84:	4629      	mov	r1, r5
   daf86:	4630      	mov	r0, r6
   daf88:	f7ff fd6c 	bl	daa64 <_Balloc>
   daf8c:	2301      	movs	r3, #1
   daf8e:	e9c0 3504 	strd	r3, r5, [r0, #16]
   daf92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   daf96:	bfa4      	itt	ge
   daf98:	463b      	movge	r3, r7
   daf9a:	4627      	movge	r7, r4
   daf9c:	4630      	mov	r0, r6
   daf9e:	6879      	ldr	r1, [r7, #4]
   dafa0:	bfa6      	itte	ge
   dafa2:	461c      	movge	r4, r3
   dafa4:	2500      	movge	r5, #0
   dafa6:	2501      	movlt	r5, #1
   dafa8:	f7ff fd5c 	bl	daa64 <_Balloc>
   dafac:	693e      	ldr	r6, [r7, #16]
   dafae:	60c5      	str	r5, [r0, #12]
   dafb0:	6925      	ldr	r5, [r4, #16]
   dafb2:	f107 0114 	add.w	r1, r7, #20
   dafb6:	f104 0914 	add.w	r9, r4, #20
   dafba:	f100 0e14 	add.w	lr, r0, #20
   dafbe:	f107 0210 	add.w	r2, r7, #16
   dafc2:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   dafc6:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   dafca:	46f2      	mov	sl, lr
   dafcc:	2700      	movs	r7, #0
   dafce:	f859 3b04 	ldr.w	r3, [r9], #4
   dafd2:	f852 bf04 	ldr.w	fp, [r2, #4]!
   dafd6:	fa1f f883 	uxth.w	r8, r3
   dafda:	fa17 f78b 	uxtah	r7, r7, fp
   dafde:	0c1b      	lsrs	r3, r3, #16
   dafe0:	eba7 0808 	sub.w	r8, r7, r8
   dafe4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   dafe8:	eb03 4328 	add.w	r3, r3, r8, asr #16
   dafec:	fa1f f888 	uxth.w	r8, r8
   daff0:	141f      	asrs	r7, r3, #16
   daff2:	454d      	cmp	r5, r9
   daff4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   daff8:	f84a 3b04 	str.w	r3, [sl], #4
   daffc:	d8e7      	bhi.n	dafce <__mdiff+0x60>
   daffe:	1b2b      	subs	r3, r5, r4
   db000:	3b15      	subs	r3, #21
   db002:	f023 0303 	bic.w	r3, r3, #3
   db006:	3304      	adds	r3, #4
   db008:	3415      	adds	r4, #21
   db00a:	42a5      	cmp	r5, r4
   db00c:	bf38      	it	cc
   db00e:	2304      	movcc	r3, #4
   db010:	4419      	add	r1, r3
   db012:	4473      	add	r3, lr
   db014:	469e      	mov	lr, r3
   db016:	460d      	mov	r5, r1
   db018:	4565      	cmp	r5, ip
   db01a:	d30e      	bcc.n	db03a <__mdiff+0xcc>
   db01c:	f10c 0203 	add.w	r2, ip, #3
   db020:	1a52      	subs	r2, r2, r1
   db022:	f022 0203 	bic.w	r2, r2, #3
   db026:	3903      	subs	r1, #3
   db028:	458c      	cmp	ip, r1
   db02a:	bf38      	it	cc
   db02c:	2200      	movcc	r2, #0
   db02e:	441a      	add	r2, r3
   db030:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   db034:	b17b      	cbz	r3, db056 <__mdiff+0xe8>
   db036:	6106      	str	r6, [r0, #16]
   db038:	e7ab      	b.n	daf92 <__mdiff+0x24>
   db03a:	f855 8b04 	ldr.w	r8, [r5], #4
   db03e:	fa17 f488 	uxtah	r4, r7, r8
   db042:	1422      	asrs	r2, r4, #16
   db044:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   db048:	b2a4      	uxth	r4, r4
   db04a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   db04e:	f84e 4b04 	str.w	r4, [lr], #4
   db052:	1417      	asrs	r7, r2, #16
   db054:	e7e0      	b.n	db018 <__mdiff+0xaa>
   db056:	3e01      	subs	r6, #1
   db058:	e7ea      	b.n	db030 <__mdiff+0xc2>
	...

000db05c <__ulp>:
   db05c:	b082      	sub	sp, #8
   db05e:	ed8d 0b00 	vstr	d0, [sp]
   db062:	9b01      	ldr	r3, [sp, #4]
   db064:	4912      	ldr	r1, [pc, #72]	; (db0b0 <__ulp+0x54>)
   db066:	4019      	ands	r1, r3
   db068:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   db06c:	2900      	cmp	r1, #0
   db06e:	dd05      	ble.n	db07c <__ulp+0x20>
   db070:	2200      	movs	r2, #0
   db072:	460b      	mov	r3, r1
   db074:	ec43 2b10 	vmov	d0, r2, r3
   db078:	b002      	add	sp, #8
   db07a:	4770      	bx	lr
   db07c:	4249      	negs	r1, r1
   db07e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   db082:	ea4f 5021 	mov.w	r0, r1, asr #20
   db086:	f04f 0200 	mov.w	r2, #0
   db08a:	f04f 0300 	mov.w	r3, #0
   db08e:	da04      	bge.n	db09a <__ulp+0x3e>
   db090:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   db094:	fa41 f300 	asr.w	r3, r1, r0
   db098:	e7ec      	b.n	db074 <__ulp+0x18>
   db09a:	f1a0 0114 	sub.w	r1, r0, #20
   db09e:	291e      	cmp	r1, #30
   db0a0:	bfda      	itte	le
   db0a2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   db0a6:	fa20 f101 	lsrle.w	r1, r0, r1
   db0aa:	2101      	movgt	r1, #1
   db0ac:	460a      	mov	r2, r1
   db0ae:	e7e1      	b.n	db074 <__ulp+0x18>
   db0b0:	7ff00000 	.word	0x7ff00000

000db0b4 <__b2d>:
   db0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db0b6:	6905      	ldr	r5, [r0, #16]
   db0b8:	f100 0714 	add.w	r7, r0, #20
   db0bc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   db0c0:	1f2e      	subs	r6, r5, #4
   db0c2:	f855 4c04 	ldr.w	r4, [r5, #-4]
   db0c6:	4620      	mov	r0, r4
   db0c8:	f7ff fd93 	bl	dabf2 <__hi0bits>
   db0cc:	f1c0 0320 	rsb	r3, r0, #32
   db0d0:	280a      	cmp	r0, #10
   db0d2:	f8df c07c 	ldr.w	ip, [pc, #124]	; db150 <__b2d+0x9c>
   db0d6:	600b      	str	r3, [r1, #0]
   db0d8:	dc14      	bgt.n	db104 <__b2d+0x50>
   db0da:	f1c0 0e0b 	rsb	lr, r0, #11
   db0de:	fa24 f10e 	lsr.w	r1, r4, lr
   db0e2:	42b7      	cmp	r7, r6
   db0e4:	ea41 030c 	orr.w	r3, r1, ip
   db0e8:	bf34      	ite	cc
   db0ea:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db0ee:	2100      	movcs	r1, #0
   db0f0:	3015      	adds	r0, #21
   db0f2:	fa04 f000 	lsl.w	r0, r4, r0
   db0f6:	fa21 f10e 	lsr.w	r1, r1, lr
   db0fa:	ea40 0201 	orr.w	r2, r0, r1
   db0fe:	ec43 2b10 	vmov	d0, r2, r3
   db102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   db104:	42b7      	cmp	r7, r6
   db106:	bf3a      	itte	cc
   db108:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db10c:	f1a5 0608 	subcc.w	r6, r5, #8
   db110:	2100      	movcs	r1, #0
   db112:	380b      	subs	r0, #11
   db114:	d017      	beq.n	db146 <__b2d+0x92>
   db116:	f1c0 0c20 	rsb	ip, r0, #32
   db11a:	fa04 f500 	lsl.w	r5, r4, r0
   db11e:	42be      	cmp	r6, r7
   db120:	fa21 f40c 	lsr.w	r4, r1, ip
   db124:	ea45 0504 	orr.w	r5, r5, r4
   db128:	bf8c      	ite	hi
   db12a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   db12e:	2400      	movls	r4, #0
   db130:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   db134:	fa01 f000 	lsl.w	r0, r1, r0
   db138:	fa24 f40c 	lsr.w	r4, r4, ip
   db13c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   db140:	ea40 0204 	orr.w	r2, r0, r4
   db144:	e7db      	b.n	db0fe <__b2d+0x4a>
   db146:	ea44 030c 	orr.w	r3, r4, ip
   db14a:	460a      	mov	r2, r1
   db14c:	e7d7      	b.n	db0fe <__b2d+0x4a>
   db14e:	bf00      	nop
   db150:	3ff00000 	.word	0x3ff00000

000db154 <__d2b>:
   db154:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db158:	4689      	mov	r9, r1
   db15a:	2101      	movs	r1, #1
   db15c:	ec57 6b10 	vmov	r6, r7, d0
   db160:	4690      	mov	r8, r2
   db162:	f7ff fc7f 	bl	daa64 <_Balloc>
   db166:	f3c7 550a 	ubfx	r5, r7, #20, #11
   db16a:	4604      	mov	r4, r0
   db16c:	f3c7 0313 	ubfx	r3, r7, #0, #20
   db170:	bb35      	cbnz	r5, db1c0 <__d2b+0x6c>
   db172:	2e00      	cmp	r6, #0
   db174:	9301      	str	r3, [sp, #4]
   db176:	d028      	beq.n	db1ca <__d2b+0x76>
   db178:	4668      	mov	r0, sp
   db17a:	9600      	str	r6, [sp, #0]
   db17c:	f7ff fd59 	bl	dac32 <__lo0bits>
   db180:	9900      	ldr	r1, [sp, #0]
   db182:	b300      	cbz	r0, db1c6 <__d2b+0x72>
   db184:	9a01      	ldr	r2, [sp, #4]
   db186:	f1c0 0320 	rsb	r3, r0, #32
   db18a:	fa02 f303 	lsl.w	r3, r2, r3
   db18e:	430b      	orrs	r3, r1
   db190:	40c2      	lsrs	r2, r0
   db192:	6163      	str	r3, [r4, #20]
   db194:	9201      	str	r2, [sp, #4]
   db196:	9b01      	ldr	r3, [sp, #4]
   db198:	61a3      	str	r3, [r4, #24]
   db19a:	2b00      	cmp	r3, #0
   db19c:	bf14      	ite	ne
   db19e:	2202      	movne	r2, #2
   db1a0:	2201      	moveq	r2, #1
   db1a2:	6122      	str	r2, [r4, #16]
   db1a4:	b1d5      	cbz	r5, db1dc <__d2b+0x88>
   db1a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   db1aa:	4405      	add	r5, r0
   db1ac:	f8c9 5000 	str.w	r5, [r9]
   db1b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   db1b4:	f8c8 0000 	str.w	r0, [r8]
   db1b8:	4620      	mov	r0, r4
   db1ba:	b003      	add	sp, #12
   db1bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db1c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db1c4:	e7d5      	b.n	db172 <__d2b+0x1e>
   db1c6:	6161      	str	r1, [r4, #20]
   db1c8:	e7e5      	b.n	db196 <__d2b+0x42>
   db1ca:	a801      	add	r0, sp, #4
   db1cc:	f7ff fd31 	bl	dac32 <__lo0bits>
   db1d0:	9b01      	ldr	r3, [sp, #4]
   db1d2:	6163      	str	r3, [r4, #20]
   db1d4:	2201      	movs	r2, #1
   db1d6:	6122      	str	r2, [r4, #16]
   db1d8:	3020      	adds	r0, #32
   db1da:	e7e3      	b.n	db1a4 <__d2b+0x50>
   db1dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   db1e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   db1e4:	f8c9 0000 	str.w	r0, [r9]
   db1e8:	6918      	ldr	r0, [r3, #16]
   db1ea:	f7ff fd02 	bl	dabf2 <__hi0bits>
   db1ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   db1f2:	e7df      	b.n	db1b4 <__d2b+0x60>

000db1f4 <__ratio>:
   db1f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db1f8:	4688      	mov	r8, r1
   db1fa:	4669      	mov	r1, sp
   db1fc:	4681      	mov	r9, r0
   db1fe:	f7ff ff59 	bl	db0b4 <__b2d>
   db202:	a901      	add	r1, sp, #4
   db204:	4640      	mov	r0, r8
   db206:	ec55 4b10 	vmov	r4, r5, d0
   db20a:	f7ff ff53 	bl	db0b4 <__b2d>
   db20e:	f8d9 3010 	ldr.w	r3, [r9, #16]
   db212:	f8d8 2010 	ldr.w	r2, [r8, #16]
   db216:	eba3 0c02 	sub.w	ip, r3, r2
   db21a:	e9dd 3200 	ldrd	r3, r2, [sp]
   db21e:	1a9b      	subs	r3, r3, r2
   db220:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   db224:	ec51 0b10 	vmov	r0, r1, d0
   db228:	2b00      	cmp	r3, #0
   db22a:	bfd6      	itet	le
   db22c:	460a      	movle	r2, r1
   db22e:	462a      	movgt	r2, r5
   db230:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   db234:	468b      	mov	fp, r1
   db236:	462f      	mov	r7, r5
   db238:	bfd4      	ite	le
   db23a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   db23e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   db242:	4620      	mov	r0, r4
   db244:	ee10 2a10 	vmov	r2, s0
   db248:	465b      	mov	r3, fp
   db24a:	4639      	mov	r1, r7
   db24c:	f7fd fed0 	bl	d8ff0 <__aeabi_ddiv>
   db250:	ec41 0b10 	vmov	d0, r0, r1
   db254:	b003      	add	sp, #12
   db256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000db25a <__copybits>:
   db25a:	3901      	subs	r1, #1
   db25c:	b570      	push	{r4, r5, r6, lr}
   db25e:	1149      	asrs	r1, r1, #5
   db260:	6914      	ldr	r4, [r2, #16]
   db262:	3101      	adds	r1, #1
   db264:	f102 0314 	add.w	r3, r2, #20
   db268:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   db26c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   db270:	1f05      	subs	r5, r0, #4
   db272:	42a3      	cmp	r3, r4
   db274:	d30c      	bcc.n	db290 <__copybits+0x36>
   db276:	1aa3      	subs	r3, r4, r2
   db278:	3b11      	subs	r3, #17
   db27a:	f023 0303 	bic.w	r3, r3, #3
   db27e:	3211      	adds	r2, #17
   db280:	42a2      	cmp	r2, r4
   db282:	bf88      	it	hi
   db284:	2300      	movhi	r3, #0
   db286:	4418      	add	r0, r3
   db288:	2300      	movs	r3, #0
   db28a:	4288      	cmp	r0, r1
   db28c:	d305      	bcc.n	db29a <__copybits+0x40>
   db28e:	bd70      	pop	{r4, r5, r6, pc}
   db290:	f853 6b04 	ldr.w	r6, [r3], #4
   db294:	f845 6f04 	str.w	r6, [r5, #4]!
   db298:	e7eb      	b.n	db272 <__copybits+0x18>
   db29a:	f840 3b04 	str.w	r3, [r0], #4
   db29e:	e7f4      	b.n	db28a <__copybits+0x30>

000db2a0 <__any_on>:
   db2a0:	f100 0214 	add.w	r2, r0, #20
   db2a4:	6900      	ldr	r0, [r0, #16]
   db2a6:	114b      	asrs	r3, r1, #5
   db2a8:	4298      	cmp	r0, r3
   db2aa:	b510      	push	{r4, lr}
   db2ac:	db11      	blt.n	db2d2 <__any_on+0x32>
   db2ae:	dd0a      	ble.n	db2c6 <__any_on+0x26>
   db2b0:	f011 011f 	ands.w	r1, r1, #31
   db2b4:	d007      	beq.n	db2c6 <__any_on+0x26>
   db2b6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   db2ba:	fa24 f001 	lsr.w	r0, r4, r1
   db2be:	fa00 f101 	lsl.w	r1, r0, r1
   db2c2:	428c      	cmp	r4, r1
   db2c4:	d10b      	bne.n	db2de <__any_on+0x3e>
   db2c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   db2ca:	4293      	cmp	r3, r2
   db2cc:	d803      	bhi.n	db2d6 <__any_on+0x36>
   db2ce:	2000      	movs	r0, #0
   db2d0:	bd10      	pop	{r4, pc}
   db2d2:	4603      	mov	r3, r0
   db2d4:	e7f7      	b.n	db2c6 <__any_on+0x26>
   db2d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   db2da:	2900      	cmp	r1, #0
   db2dc:	d0f5      	beq.n	db2ca <__any_on+0x2a>
   db2de:	2001      	movs	r0, #1
   db2e0:	e7f6      	b.n	db2d0 <__any_on+0x30>

000db2e2 <_calloc_r>:
   db2e2:	b513      	push	{r0, r1, r4, lr}
   db2e4:	434a      	muls	r2, r1
   db2e6:	4611      	mov	r1, r2
   db2e8:	9201      	str	r2, [sp, #4]
   db2ea:	f7fb fef7 	bl	d70dc <_malloc_r>
   db2ee:	4604      	mov	r4, r0
   db2f0:	b118      	cbz	r0, db2fa <_calloc_r+0x18>
   db2f2:	9a01      	ldr	r2, [sp, #4]
   db2f4:	2100      	movs	r1, #0
   db2f6:	f7fe f905 	bl	d9504 <memset>
   db2fa:	4620      	mov	r0, r4
   db2fc:	b002      	add	sp, #8
   db2fe:	bd10      	pop	{r4, pc}

000db300 <nan>:
   db300:	ed9f 0b01 	vldr	d0, [pc, #4]	; db308 <nan+0x8>
   db304:	4770      	bx	lr
   db306:	bf00      	nop
   db308:	00000000 	.word	0x00000000
   db30c:	7ff80000 	.word	0x7ff80000

000db310 <__ascii_wctomb>:
   db310:	b149      	cbz	r1, db326 <__ascii_wctomb+0x16>
   db312:	2aff      	cmp	r2, #255	; 0xff
   db314:	bf85      	ittet	hi
   db316:	238a      	movhi	r3, #138	; 0x8a
   db318:	6003      	strhi	r3, [r0, #0]
   db31a:	700a      	strbls	r2, [r1, #0]
   db31c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   db320:	bf98      	it	ls
   db322:	2001      	movls	r0, #1
   db324:	4770      	bx	lr
   db326:	4608      	mov	r0, r1
   db328:	4770      	bx	lr
	...

000db32c <__aeabi_d2lz>:
   db32c:	b538      	push	{r3, r4, r5, lr}
   db32e:	2200      	movs	r2, #0
   db330:	2300      	movs	r3, #0
   db332:	4604      	mov	r4, r0
   db334:	460d      	mov	r5, r1
   db336:	f7fd ffa3 	bl	d9280 <__aeabi_dcmplt>
   db33a:	b928      	cbnz	r0, db348 <__aeabi_d2lz+0x1c>
   db33c:	4620      	mov	r0, r4
   db33e:	4629      	mov	r1, r5
   db340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db344:	f7fe b84a 	b.w	d93dc <__aeabi_d2ulz>
   db348:	4620      	mov	r0, r4
   db34a:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   db34e:	f7fe f845 	bl	d93dc <__aeabi_d2ulz>
   db352:	4240      	negs	r0, r0
   db354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db358:	bd38      	pop	{r3, r4, r5, pc}
   db35a:	bf00      	nop

000db35c <dynalib_user>:
   db35c:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   db36c:	0000 0000 6e55 6e6b 776f 006e 6f4e 2074     ....Unknown.Not 
   db37c:	6843 7261 6967 676e 4300 6168 6772 6465     Charging.Charged
   db38c:	4400 7369 6863 7261 6967 676e 4600 7561     .Discharging.Fau
   db39c:	746c 4400 6369 6e6f 656e 7463 6465 3100     lt.Diconnected.1
   db3ac:	4500 616e 6c62 6465 5320 6e65 6f73 2072     .Enabled Sensor 
   db3bc:	6e4f 0065 6e45 6261 656c 2064 6553 736e     One.Enabled Sens
   db3cc:	726f 5420 6f77 4500 616e 6c62 6465 5320     or Two.Enabled S
   db3dc:	6e65 6f73 2072 6854 6572 0065 6e45 6261     ensor Three.Enab
   db3ec:	656c 2064 6553 736e 726f 4620 756f 0072     led Sensor Four.
   db3fc:	6e45 6261 656c 2064 6553 736e 726f 4620     Enabled Sensor F
   db40c:	7669 0065 6e45 6261 656c 2064 6553 736e     ive.Enabled Sens
   db41c:	726f 5320 7869 4400 7369 6261 656c 2064     or Six.Disabled 
   db42c:	6553 736e 726f 4f20 656e 4400 7369 6261     Sensor One.Disab
   db43c:	656c 2064 6553 736e 726f 5420 6f77 4400     led Sensor Two.D
   db44c:	7369 6261 656c 2064 6553 736e 726f 5420     isabled Sensor T
   db45c:	7268 6565 4400 7369 6261 656c 2064 6553     hree.Disabled Se
   db46c:	736e 726f 4620 756f 0072 6944 6173 6c62     nsor Four.Disabl
   db47c:	6465 5320 6e65 6f73 2072 6946 6576 4400     ed Sensor Five.D
   db48c:	7369 6261 656c 2064 6553 736e 726f 5320     isabled Sensor S
   db49c:	7869 2a00 4e00 206f 6144 6174 5200 7365     ix.*.No Data.Res
   db4ac:	6f70 736e 2065 6552 6563 7669 6465 5500     ponse Received.U
   db4bc:	6b6e 6f6e 6e77 7220 7365 6f70 736e 2065     nknown response 
   db4cc:	6572 6563 6976 6465 2520 0069 6255 6469     recevied %i.Ubid
   db4dc:	746f 2073 6f48 6b6f 5300 7465 7420 206f     ots Hook.Set to 
   db4ec:	7233 2064 6150 7472 2079 6953 006d 0030     3rd Party Sim.0.
   db4fc:	6553 2074 6f74 5020 7261 6974 6c63 2065     Set to Particle 
   db50c:	6953 006d 654b 7065 4120 696c 6576 7320     Sim.Keep Alive s
   db51c:	7465 7420 206f 6925 7320 6365 4b00 6565     et to %i sec.Kee
   db52c:	2070 6c41 7669 0065 6553 2074 6556 6272     p Alive.Set Verb
   db53c:	736f 2065 6f4d 6564 4300 656c 7261 6465     ose Mode.Cleared
   db54c:	5620 7265 6f62 6573 4d20 646f 0065 704f      Verbose Mode.Op
   db55c:	7265 7461 6f69 206e 6f4d 6564 2520 0069     eration Mode %i.
   db56c:	6f4c 6461 6e69 2067 7953 7473 6d65 4420     Loading System D
   db57c:	6665 7561 746c 0073 6550 7474 6465 5700     efaults.Petted.W
   db58c:	7461 6863 6f64 0067 227b 6573 736e 726f     atchdog.{"sensor
   db59c:	6e4f 2265 253a 2e34 6631 202c 7322 6e65     One":%4.1f, "sen
   db5ac:	6f73 5472 6f77 3a22 3425 312e 2c66 2020     sorTwo":%4.1f,  
   db5bc:	7322 6e65 6f73 5472 7268 6565 3a22 3425     "sensorThree":%4
   db5cc:	312e 2c66 2020 7322 6e65 6f73 4672 756f     .1f,  "sensorFou
   db5dc:	2272 253a 2e34 6631 202c 2220 6573 736e     r":%4.1f,  "sens
   db5ec:	726f 6946 6576 3a22 3425 312e 2c66 7322     orFive":%4.1f,"s
   db5fc:	6e65 6f73 5372 7869 3a22 3425 312e 2c66     ensorSix":%4.1f,
   db60c:	5422 7268 6565 6850 7361 5265 3a22 3425     "ThreePhaseR":%4
   db61c:	312e 2c66 5422 7268 6565 6850 7361 5365     .1f,"ThreePhaseS
   db62c:	3a22 3425 312e 2c66 5422 7268 6565 6850     ":%4.1f,"ThreePh
   db63c:	7361 5465 3a22 3425 312e 2c66 4d22 646f     aseT":%4.1f,"Mod
   db64c:	2265 313a 007d 227b 6553 736e 726f 6e4f     e":1}.{"SensorOn
   db65c:	5265 3a22 3425 312e 2c66 2220 6553 736e     eR":%4.1f, "Sens
   db66c:	726f 6e4f 5365 3a22 3425 312e 2c66 2020     orOneS":%4.1f,  
   db67c:	5322 6e65 6f73 4f72 656e 2254 253a 2e34     "SensorOneT":%4.
   db68c:	6631 202c 2220 6573 736e 726f 7754 526f     1f,  "sensorTwoR
   db69c:	3a22 3425 312e 2c66 2020 7322 6e65 6f73     ":%4.1f,  "senso
   db6ac:	5472 6f77 2253 253a 2e34 6631 222c 6573     rTwoS":%4.1f,"se
   db6bc:	736e 726f 7754 546f 3a22 3425 312e 2c66     nsorTwoT":%4.1f,
   db6cc:	4d22 646f 2265 323a 007d 227b 6553 736e     "Mode":2}.{"Sens
   db6dc:	726f 6e4f 5265 3a22 3425 312e 2c66 2220     orOneR":%4.1f, "
   db6ec:	6553 736e 726f 6e4f 5365 3a22 3425 312e     SensorOneS":%4.1
   db6fc:	2c66 2020 5322 6e65 6f73 4f72 656e 2254     f,  "SensorOneT"
   db70c:	253a 2e34 6631 202c 2220 6573 736e 726f     :%4.1f,  "sensor
   db71c:	6f46 7275 3a22 3425 312e 2c66 2020 7322     Four":%4.1f,  "s
   db72c:	6e65 6f73 4672 7669 2265 253a 2e34 6631     ensorFive":%4.1f
   db73c:	222c 6573 736e 726f 6953 2278 253a 2e34     ,"sensorSix":%4.
   db74c:	6631 222c 6f4d 6564 3a22 7d33 7b00 5322     1f,"Mode":3}.{"S
   db75c:	6e65 6f73 4f72 656e 2252 253a 2e34 6631     ensorOneR":%4.1f
   db76c:	202c 5322 6e65 6f73 4f72 656e 2253 253a     , "SensorOneS":%
   db77c:	2e34 6631 202c 2220 6553 736e 726f 6e4f     4.1f,  "SensorOn
   db78c:	5465 3a22 3425 312e 2c66 2020 5322 6e65     eT":%4.1f,  "Sen
   db79c:	6f73 4f72 656e 224e 253a 2e34 6631 202c     sorOneN":%4.1f, 
   db7ac:	2220 6573 736e 726f 6946 6576 3a22 3425      "sensorFive":%4
   db7bc:	312e 2c66 7322 6e65 6f73 5372 7869 3a22     .1f,"sensorSix":
   db7cc:	3425 312e 2c66 4d22 646f 2265 343a 007d     %4.1f,"Mode":4}.
   db7dc:	6f70 6577 6d72 6e6f 7469 726f 6e69 5f67     powermonitoring_
   db7ec:	6f68 6b6f 4600 6f72 206d 7325 7420 206f     hook.From %s to 
   db7fc:	7325 5300 6174 6574 5420 6172 736e 7469     %s.State Transit
   db80c:	6f69 006e 5443 4f20 656e 203a 3325 312e     ion.CT One: %3.1
   db81c:	0066 5443 5420 6f77 2520 2e33 6631 4300     f.CT Two %3.1f.C
   db82c:	2054 6854 6572 3a65 2520 2e33 6631 5300     T Three: %3.1f.S
   db83c:	6e65 6f73 2072 6f46 7275 4320 6e6f 7473     ensor Four Const
   db84c:	6e61 2074 203a 3325 312e 0066 6553 736e     ant : %3.1f.Sens
   db85c:	726f 4620 7669 2065 6f43 736e 6174 746e     or Five Constant
   db86c:	3a20 2520 2e33 6631 5300 6e65 6f73 2072      : %3.1f.Sensor 
   db87c:	6953 2078 6f43 736e 6174 746e 3a20 2520     Six Constant : %
   db88c:	2e33 6631 4300 6e6f 7473 6e61 2074 6e4f     3.1f.Constant On
   db89c:	2065 6156 756c 2065 6573 2074 6f74 0020     e Value set to .
   db8ac:	6f43 736e 6174 746e 5420 6f77 5620 6c61     Constant Two Val
   db8bc:	6575 7320 7465 7420 206f 4300 6e6f 7473     ue set to .Const
   db8cc:	6e61 2074 6854 6572 2065 6156 756c 2065     ant Three Value 
   db8dc:	6573 2074 6f74 0020 6f43 736e 6174 746e     set to .Constant
   db8ec:	4620 756f 2072 6156 756c 2065 6573 2074      Four Value set 
   db8fc:	6f74 0020 6f43 736e 6174 746e 4620 7669     to .Constant Fiv
   db90c:	2065 6156 756c 2065 6573 2074 6f74 0020     e Value set to .
   db91c:	6f43 736e 6174 746e 5320 7869 5620 6c61     Constant Six Val
   db92c:	6575 7320 7465 7420 206f 4500 5252 524f     ue set to .ERROR
   db93c:	4620 4f52 204d 4552 4f50 5452 4e49 0047      FROM REPORTING.
   db94c:	4544 5542 2d47 5320 6174 7472 7075 4400     DEBUG- Startup.D
   db95c:	4245 4755 202d 4150 5452 4349 454c 4320     EBUG- PARTICLE C
   db96c:	4e4f 454e 5443 4445 7300 6170 6b72 642f     ONNECTED.spark/d
   db97c:	7665 6369 2f65 6573 7373 6f69 2f6e 6e65     evice/session/en
   db98c:	0064 7245 6f72 2072 7453 7461 2065 202d     d.Error State - 
   db99c:	6552 6573 0074 7453 7461 0065 682f 6f6f     Reset.State./hoo
   db9ac:	2d6b 6572 7073 6e6f 6573 702f 776f 7265     k-response/power
   db9bc:	6f6d 696e 6f74 6972 676e 685f 6f6f 2f6b     monitoring_hook/
   db9cc:	5200 6c65 6165 6573 4200 7461 6574 7972     .Release.Battery
   db9dc:	4200 7461 6574 7972 6f43 746e 7865 0074     .BatteryContext.
   db9ec:	654b 7065 4120 696c 6576 5320 6365 4d00     Keep Alive Sec.M
   db9fc:	6165 7573 6572 4e2d 776f 5600 7265 6f62     easure-Now.Verbo
   dba0c:	6573 4d2d 646f 0065 6553 2074 6f43 736e     se-Mode.Set Cons
   dba1c:	6174 746e 4f20 656e 5300 7465 4320 6e6f     tant One.Set Con
   dba2c:	7473 6e61 2074 7754 006f 6553 2074 6f43     stant Two.Set Co
   dba3c:	736e 6174 746e 5420 7268 6565 5300 7465     nstant Three.Set
   dba4c:	4320 6e6f 7473 6e61 2074 6f46 7275 5300      Constant Four.S
   dba5c:	7465 4320 6e6f 7473 6e61 2074 6946 6576     et Constant Five
   dba6c:	5300 7465 4320 6e6f 7473 6e61 2074 6953     .Set Constant Si
   dba7c:	0078 6e45 6261 656c 5320 6e65 6f73 0072     x.Enable Sensor.
   dba8c:	6944 6173 6c62 2065 6553 736e 726f 4f00     Disable Sensor.O
   dba9c:	6570 6172 6974 676e 4d20 646f 0065 0000     perating Mode...

000dbaac <_ZTV5Timer>:
	...
   dbab4:	433d 000d 4391 000d 4231 000d               =C...C..1B..

000dbac0 <_ZTV17PublishQueueAsync>:
	...
   dbac8:	423d 000d 4251 000d 64ed 000d 6679 000d     =B..QB...d..yf..
   dbad8:	6639 000d 6617 000d 67bf 000d 665f 000d     9f...f...g.._f..

000dbae8 <_ZTV8MB85RC64>:
	...
   dbaf0:	4265 000d 4279 000d 5ae5 000d 5b7b 000d     eB..yB...Z..{[..
   dbb00:	5bfd 000d b370 000d b378 000d b37c 000d     .[..p...x...|...
   dbb10:	b385 000d b38d 000d b399 000d b39f 000d     ................
   dbb20:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   dbb30:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000dbb60 <_ZL13releaseNumber>:
   dbb60:	2e31 3830 0000 0000                         1.08....

000dbb68 <_ZL17FRAMversionNumber>:
   dbb68:	000b 0000 7277 7469 4465 7461 2061 6166     ....writeData fa
   dbb78:	6c69 6465 6420 7275 6e69 2067 7265 7361     iled during eras
   dbb88:	2065 7266 6d61 6441 7264 253d 0075 0000     e framAddr=%u...

000dbb98 <_ZTV6MB85RC>:
	...
   dbba0:	5a05 000d 5a07 000d 5ae5 000d 5b7b 000d     .Z...Z...Z..{[..
   dbbb0:	5bfd 000d 6564 6976 6563 6552 6461 6620     .[..deviceRead f
   dbbc0:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   dbbd0:	2074 6954 656d 6620 6f72 206d 5452 2043     t Time from RTC 
   dbbe0:	7325 6400 7665 6369 5765 6972 6574 6620     %s.deviceWrite f
   dbbf0:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   dbc00:	2074 5452 2043 7266 6d6f 6320 6f6c 6475     t RTC from cloud
   dbc10:	2520 0073 6c63 756f 2064 6974 656d 6e20      %s.cloud time n
   dbc20:	746f 7620 6c61 6469 6400 7665 6369 5765     ot valid.deviceW
   dbc30:	6972 6574 4545 5250 4d4f 6620 6961 656c     riteEEPROM faile
   dbc40:	2064 7473 7461 253d 0064 7061 2e70 7472     d stat=%d.app.rt
   dbc50:	0063 0000                                   c...

000dbc54 <_ZTV12MCP79410SRAM>:
	...
   dbc5c:	5cbd 000d 5cd3 000d 5cad 000d 5cb1 000d     .\...\...\...\..
   dbc6c:	5cfd 000d 5fe5 000d 6205 000d               .\..._...b..

000dbc78 <_ZTV12MCP79410Time>:
	...
   dbc80:	5cc1 000d 5cc5 000d                         .\...\..

000dbc88 <_ZTV14MCP79410EEPROM>:
	...
   dbc90:	5cbf 000d 5ce1 000d 5cb5 000d 5cb9 000d     .\...\...\...\..
   dbca0:	5cfd 000d 601f 000d 6445 000d               .\...`..Ed..

000dbcac <_ZTV8MCP79410>:
	...
   dbcb4:	5cc3 000d 5cef 000d 7550 6c62 7369 5168     .\...\..PublishQ
   dbcc4:	6575 6575 7341 6e79 0063 7571 7565 6965     ueueAsync.queuei
   dbcd4:	676e 6520 6576 746e 614e 656d 253d 2073     ng eventName=%s 
   dbce4:	6164 6174 253d 2073 7474 3d6c 6425 6620     data=%s ttl=%d f
   dbcf4:	616c 7367 3d31 6425 6620 616c 7367 3d32     lags1=%d flags2=
   dbd04:	6425 7320 7a69 3d65 6425 7000 6275 696c     %d size=%d.publi
   dbd14:	6873 6e69 2067 7325 2520 2073 7474 3d6c     shing %s %s ttl=
   dbd24:	6425 6620 616c 7367 253d 0078 7570 6c62     %d flags=%x.publ
   dbd34:	7369 6568 2064 7573 6363 7365 6673 6c75     ished successful
   dbd44:	796c 7000 6275 696c 6873 6465 6620 6961     ly.published fai
   dbd54:	656c 2c64 7720 6c69 206c 6572 7274 2079     led, will retry 
   dbd64:	6e69 2520 756c 6d20 0073 7061 2e70 7570     in %lu ms.app.pu
   dbd74:	7162 0000                                   bq..

000dbd78 <_ZTV21PublishQueueAsyncBase>:
	...
   dbd88:	64ed 000d 40a5 000d 40a5 000d 40a5 000d     .d...@...@...@..
   dbd98:	40a5 000d 40a5 000d                         .@...@..

000dbda0 <_ZTV25PublishQueueAsyncRetained>:
	...
   dbda8:	65d5 000d 65e9 000d 64ed 000d 6679 000d     .e...e...d..yf..
   dbdb8:	6639 000d 6617 000d 67bf 000d 665f 000d     9f...f...g.._f..

000dbdc8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dbdd0:	71f9 000d 71ff 000d 723d 000d 720d 000d     .q...q..=r...r..
   dbde0:	71fb 000d                                   .q..

000dbde4 <_ZTVN5spark13EthernetClassE>:
	...
   dbdec:	7803 000d 77f9 000d 77ef 000d 77e5 000d     .x...w...w...w..
   dbdfc:	77d9 000d 77cd 000d 77c1 000d 77b9 000d     .w...w...w...w..
   dbe0c:	77af 000d 77a5 000d 7ae9 000d               .w...w...z..

000dbe18 <_ZTV7TwoWire>:
	...
   dbe20:	7821 000d 786b 000d 7843 000d 7823 000d     !x..kx..Cx..#x..
   dbe30:	784b 000d 7853 000d 785b 000d 7863 000d     Kx..Sx..[x..cx..

000dbe40 <_ZTV9IPAddress>:
	...
   dbe48:	799d 000d 798d 000d 798f 000d 7061 0070     .y...y...y..app.

000dbe58 <_ZTVN5spark12NetworkClassE>:
	...
   dbe60:	7a81 000d 7a8b 000d 7a95 000d 7a9f 000d     .z...z...z...z..
   dbe70:	7aa9 000d 7ab5 000d 7ac1 000d 7acd 000d     .z...z...z...z..
   dbe80:	7ad5 000d 7adf 000d 7ae9 000d 005a 2b25     .z...z...z..Z.%+
   dbe90:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   dbea0:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   dbeb0:	6974 656d 0000 0000                         time....

000dbeb8 <_ZTV11USARTSerial>:
	...
   dbec0:	81f9 000d 8265 000d 823d 000d 7bd1 000d     ....e...=....{..
   dbed0:	820d 000d 8229 000d 821b 000d 8237 000d     ....).......7...
   dbee0:	81fb 000d 81ff 000d                         ........

000dbee8 <_ZTV9USBSerial>:
	...
   dbef0:	82f9 000d 8361 000d 8337 000d 7bd1 000d     ....a...7....{..
   dbf00:	8329 000d 82fb 000d 830b 000d 835b 000d     )...........[...
   dbf10:	831b 000d 82f5 000d                         ........

000dbf18 <_ZTVN5spark9WiFiClassE>:
	...
   dbf20:	845b 000d 8451 000d 8447 000d 83fd 000d     [...Q...G.......
   dbf30:	843b 000d 842f 000d 8423 000d 841b 000d     ;.../...#.......
   dbf40:	8411 000d 8407 000d 7ae9 000d               .........z..

000dbf4c <_ZSt7nothrow>:
   dbf4c:	0000 0000 7173 7472 2500 332e 2073 2e25     ....sqrt.%.3s %.
   dbf5c:	7333 3325 2064 2e25 6432 253a 322e 3a64     3s%3d %.2d:%.2d:
   dbf6c:	2e25 6432 2520 0a64                          %.2d %d..

000dbf75 <day_name.6145>:
   dbf75:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dbf85:	6972 6153                                    riSat

000dbf8a <mon_name.6146>:
   dbf8a:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dbf9a:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dbfaa:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000dbfbc <fpi.7566>:
   dbfbc:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dbfcc:	0000 0000                                   ....

000dbfd0 <fpinan.7602>:
   dbfd0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000dbfe8 <tinytens>:
   dbfe8:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dbff8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dc008:	6f43 64ac 0628 1168                         Co.d(.h.

000dc010 <_ctype_>:
   dc010:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dc020:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dc030:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dc040:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dc050:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dc060:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dc070:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dc080:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dc090:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   dc110:	2e00 0000                                   ....

000dc114 <_C_numeric_locale>:
   dc114:	c111 000d bf74 000d dd2c 2003 0043 4f50     ....t...,.. C.PO
   dc124:	4953 0058                                   SIX.

000dc128 <__mprec_bigtens>:
   dc128:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dc138:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dc148:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dc150 <__mprec_tens>:
   dc150:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dc160:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dc170:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dc180:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dc190:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dc1a0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dc1b0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dc1c0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dc1d0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dc1e0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dc1f0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dc200:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dc210:	9db4 79d9 7843 44ea                         ...yCx.D

000dc218 <p05.7490>:
   dc218:	0005 0000 0019 0000 007d 0000               ........}...

000dc224 <link_const_variable_data_end>:
   dc224:	000d55a9 	.word	0x000d55a9
   dc228:	000d6475 	.word	0x000d6475
   dc22c:	000d6a51 	.word	0x000d6a51
   dc230:	000d71d1 	.word	0x000d71d1
   dc234:	000d780d 	.word	0x000d780d
   dc238:	000d7a71 	.word	0x000d7a71
   dc23c:	000d7bbd 	.word	0x000d7bbd
   dc240:	000d7c71 	.word	0x000d7c71
   dc244:	000d7ea5 	.word	0x000d7ea5
   dc248:	000d81e5 	.word	0x000d81e5
   dc24c:	000d8465 	.word	0x000d8465
