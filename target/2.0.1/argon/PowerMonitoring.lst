
/Users/abdulhannanmustajab/Desktop/IoT/Power-Monitoring/PowerMonitoring/target/2.0.1/argon/PowerMonitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00007720  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  2003f400  000db740  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002b4  2003ddac  000dbf44  0001ddac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000790  2003e060  2003e060  0002e060  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000dc1f8  000dc1f8  0002c1f8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000dc220  000dc220  0002c220  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00196218  00000000  00000000  0002c224  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001a555  00000000  00000000  001c243c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000323a8  00000000  00000000  001dc991  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002e70  00000000  00000000  0020ed39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000088e0  00000000  00000000  00211ba9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003c737  00000000  00000000  0021a489  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00043ef0  00000000  00000000  00256bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00110832  00000000  00000000  0029aab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008884  00000000  00000000  003ab2e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fe75 	bl	d8d20 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fe97 	bl	d8d70 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003ddac 	.word	0x2003ddac
   d404c:	000dbf44 	.word	0x000dbf44
   d4050:	2003e060 	.word	0x2003e060
   d4054:	2003e060 	.word	0x2003e060
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f003 fef1 	bl	d7e48 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000db70c 	.word	0x000db70c
   d4080:	000db738 	.word	0x000db738

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bdda 	b.w	d4c3c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fcb3 	bl	d49f4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f003 be9b 	b.w	d7dcc <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 bc27 	b.w	d68e8 <malloc>

000d409a <_Znaj>:
   d409a:	f002 bc25 	b.w	d68e8 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 bc2b 	b.w	d68f8 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 fafe 	bl	d66ac <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d63dd 	.word	0x000d63dd

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z11watchdogISRv>:
}


void watchdogISR()
{
  watchdogFlag = true;
   d40c8:	4b01      	ldr	r3, [pc, #4]	; (d40d0 <_Z11watchdogISRv+0x8>)
   d40ca:	2201      	movs	r2, #1
   d40cc:	701a      	strb	r2, [r3, #0]
}
   d40ce:	4770      	bx	lr
   d40d0:	2003e5f1 	.word	0x2003e5f1

000d40d4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40d4:	6803      	ldr	r3, [r0, #0]
   d40d6:	4718      	bx	r3

000d40d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40d8:	2a01      	cmp	r2, #1
   d40da:	d003      	beq.n	d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40dc:	2a02      	cmp	r2, #2
   d40de:	d003      	beq.n	d40e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40e0:	2000      	movs	r0, #0
   d40e2:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40e4:	6001      	str	r1, [r0, #0]
	      break;
   d40e6:	e7fb      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40e8:	680b      	ldr	r3, [r1, #0]
   d40ea:	6003      	str	r3, [r0, #0]
	}
   d40ec:	e7f8      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	...

000d40f0 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
   d40f0:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40f2:	4904      	ldr	r1, [pc, #16]	; (d4104 <_Z10measureNow6String+0x14>)
   d40f4:	f003 fad4 	bl	d76a0 <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d40f8:	b118      	cbz	r0, d4102 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d40fa:	4b03      	ldr	r3, [pc, #12]	; (d4108 <_Z10measureNow6String+0x18>)
   d40fc:	2203      	movs	r2, #3
   d40fe:	701a      	strb	r2, [r3, #0]
    return 1;
   d4100:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4102:	bd08      	pop	{r3, pc}
   d4104:	000dac13 	.word	0x000dac13
   d4108:	2003e5c5 	.word	0x2003e5c5

000d410c <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d410c:	6943      	ldr	r3, [r0, #20]
   d410e:	b113      	cbz	r3, d4116 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4110:	6983      	ldr	r3, [r0, #24]
   d4112:	300c      	adds	r0, #12
   d4114:	4718      	bx	r3
            callback();
        }
    }
   d4116:	4770      	bx	lr

000d4118 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d4118:	b510      	push	{r4, lr}
   d411a:	4b03      	ldr	r3, [pc, #12]	; (d4128 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d411c:	6003      	str	r3, [r0, #0]
   d411e:	4604      	mov	r4, r0
   d4120:	f001 fe18 	bl	d5d54 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d4124:	4620      	mov	r0, r4
   d4126:	bd10      	pop	{r4, pc}
   d4128:	000dafb0 	.word	0x000dafb0

000d412c <_ZN17PublishQueueAsyncD0Ev>:
   d412c:	b510      	push	{r4, lr}
   d412e:	4604      	mov	r4, r0
   d4130:	f7ff fff2 	bl	d4118 <_ZN17PublishQueueAsyncD1Ev>
   d4134:	4620      	mov	r0, r4
   d4136:	2138      	movs	r1, #56	; 0x38
   d4138:	f003 ff7d 	bl	d8036 <_ZdlPvj>
   d413c:	4620      	mov	r0, r4
   d413e:	bd10      	pop	{r4, pc}

000d4140 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4140:	b510      	push	{r4, lr}
   d4142:	4b03      	ldr	r3, [pc, #12]	; (d4150 <_ZN8MB85RC64D1Ev+0x10>)
   d4144:	6003      	str	r3, [r0, #0]
   d4146:	4604      	mov	r4, r0
   d4148:	f001 f81c 	bl	d5184 <_ZN6MB85RCD1Ev>
   d414c:	4620      	mov	r0, r4
   d414e:	bd10      	pop	{r4, pc}
   d4150:	000dafd8 	.word	0x000dafd8

000d4154 <_ZN8MB85RC64D0Ev>:
   d4154:	b510      	push	{r4, lr}
   d4156:	4604      	mov	r4, r0
   d4158:	f7ff fff2 	bl	d4140 <_ZN8MB85RC64D1Ev>
   d415c:	4620      	mov	r0, r4
   d415e:	2110      	movs	r1, #16
   d4160:	f003 ff69 	bl	d8036 <_ZdlPvj>
   d4164:	4620      	mov	r0, r4
   d4166:	bd10      	pop	{r4, pc}

000d4168 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4168:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d416a:	2100      	movs	r1, #0
   d416c:	4604      	mov	r4, r0
   d416e:	4608      	mov	r0, r1
   d4170:	f002 f8bc 	bl	d62ec <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4174:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4176:	4620      	mov	r0, r4
   d4178:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d417a:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d417c:	f002 f8ce 	bl	d631c <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4180:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4182:	b10c      	cbz	r4, d4188 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d4184:	2301      	movs	r3, #1
   d4186:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4188:	2100      	movs	r1, #0
   d418a:	2001      	movs	r0, #1
   d418c:	f002 f8ae 	bl	d62ec <os_thread_scheduling>
            }
        }
        if (t) {
   d4190:	b12c      	cbz	r4, d419e <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d4192:	6823      	ldr	r3, [r4, #0]
   d4194:	4620      	mov	r0, r4
   d4196:	689b      	ldr	r3, [r3, #8]
   d4198:	4798      	blx	r3
            t->running = false;
   d419a:	2300      	movs	r3, #0
   d419c:	7123      	strb	r3, [r4, #4]
        }
    }
   d419e:	b002      	add	sp, #8
   d41a0:	bd10      	pop	{r4, pc}

000d41a2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41a2:	b510      	push	{r4, lr}
   d41a4:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d41a6:	6800      	ldr	r0, [r0, #0]
   d41a8:	b108      	cbz	r0, d41ae <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d41aa:	f002 fba5 	bl	d68f8 <free>
class SystemClass {
   d41ae:	4620      	mov	r0, r4
   d41b0:	bd10      	pop	{r4, pc}
	...

000d41b4 <_Z16keepAliveMessagev>:
void keepAliveMessage() {
   d41b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d41b6:	4b10      	ldr	r3, [pc, #64]	; (d41f8 <_Z16keepAliveMessagev+0x44>)
   d41b8:	4a10      	ldr	r2, [pc, #64]	; (d41fc <_Z16keepAliveMessagev+0x48>)
   d41ba:	781b      	ldrb	r3, [r3, #0]
   d41bc:	7812      	ldrb	r2, [r2, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41be:	4910      	ldr	r1, [pc, #64]	; (d4200 <_Z16keepAliveMessagev+0x4c>)
   d41c0:	4313      	orrs	r3, r2
   d41c2:	f88d 3000 	strb.w	r3, [sp]
   d41c6:	2200      	movs	r2, #0
   d41c8:	233c      	movs	r3, #60	; 0x3c
   d41ca:	a802      	add	r0, sp, #8
   d41cc:	f002 fdaa 	bl	d6d24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d41d0:	9c03      	ldr	r4, [sp, #12]
   d41d2:	b17c      	cbz	r4, d41f4 <_Z16keepAliveMessagev+0x40>
      if (--_M_use_count == 0)
   d41d4:	6863      	ldr	r3, [r4, #4]
   d41d6:	3b01      	subs	r3, #1
   d41d8:	6063      	str	r3, [r4, #4]
   d41da:	b95b      	cbnz	r3, d41f4 <_Z16keepAliveMessagev+0x40>
          _M_dispose();
   d41dc:	6823      	ldr	r3, [r4, #0]
   d41de:	4620      	mov	r0, r4
   d41e0:	689b      	ldr	r3, [r3, #8]
   d41e2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d41e4:	68a3      	ldr	r3, [r4, #8]
   d41e6:	3b01      	subs	r3, #1
   d41e8:	60a3      	str	r3, [r4, #8]
   d41ea:	b91b      	cbnz	r3, d41f4 <_Z16keepAliveMessagev+0x40>
            _M_destroy();
   d41ec:	6823      	ldr	r3, [r4, #0]
   d41ee:	4620      	mov	r0, r4
   d41f0:	68db      	ldr	r3, [r3, #12]
   d41f2:	4798      	blx	r3
}
   d41f4:	b004      	add	sp, #16
   d41f6:	bd10      	pop	{r4, pc}
   d41f8:	2003e070 	.word	0x2003e070
   d41fc:	2003e071 	.word	0x2003e071
   d4200:	000dac15 	.word	0x000dac15

000d4204 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4204:	b510      	push	{r4, lr}
      if (_M_manager)
   d4206:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4208:	4604      	mov	r4, r0
      if (_M_manager)
   d420a:	b113      	cbz	r3, d4212 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d420c:	2203      	movs	r2, #3
   d420e:	4601      	mov	r1, r0
   d4210:	4798      	blx	r3
    }
   d4212:	4620      	mov	r0, r4
   d4214:	bd10      	pop	{r4, pc}
	...

000d4218 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d4218:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d421a:	4b13      	ldr	r3, [pc, #76]	; (d4268 <_ZN5TimerD1Ev+0x50>)
   d421c:	6003      	str	r3, [r0, #0]
   d421e:	4604      	mov	r4, r0
        if (handle) {
   d4220:	6880      	ldr	r0, [r0, #8]
   d4222:	b1c8      	cbz	r0, d4258 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4224:	2500      	movs	r5, #0
   d4226:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d422a:	e9cd 3500 	strd	r3, r5, [sp]
   d422e:	2102      	movs	r1, #2
   d4230:	462b      	mov	r3, r5
   d4232:	462a      	mov	r2, r5
   d4234:	f002 f87a 	bl	d632c <os_timer_change>
            os_timer_set_id(handle, nullptr);
   d4238:	68a0      	ldr	r0, [r4, #8]
   d423a:	4629      	mov	r1, r5
   d423c:	f002 f8ae 	bl	d639c <os_timer_set_id>
            while (running) {
   d4240:	7923      	ldrb	r3, [r4, #4]
   d4242:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4246:	b113      	cbz	r3, d424e <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d4248:	f002 f848 	bl	d62dc <os_thread_yield>
            while (running) {
   d424c:	e7f8      	b.n	d4240 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   d424e:	68a0      	ldr	r0, [r4, #8]
   d4250:	4629      	mov	r1, r5
   d4252:	f002 f85b 	bl	d630c <os_timer_destroy>
            handle = nullptr;
   d4256:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d4258:	f104 000c 	add.w	r0, r4, #12
   d425c:	f7ff ffd2 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
    }
   d4260:	4620      	mov	r0, r4
   d4262:	b003      	add	sp, #12
   d4264:	bd30      	pop	{r4, r5, pc}
   d4266:	bf00      	nop
   d4268:	000daf9c 	.word	0x000daf9c

000d426c <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d426c:	b510      	push	{r4, lr}
   d426e:	4604      	mov	r4, r0
    }
   d4270:	f7ff ffd2 	bl	d4218 <_ZN5TimerD1Ev>
   d4274:	4620      	mov	r0, r4
   d4276:	211c      	movs	r1, #28
   d4278:	f003 fedd 	bl	d8036 <_ZdlPvj>
   d427c:	4620      	mov	r0, r4
   d427e:	bd10      	pop	{r4, pc}

000d4280 <_ZN10CloudClass9_functionEPKcPFi6StringE>:
    static bool _function(const char *funcKey, user_function_int_str_t* func)
   d4280:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4282:	4801      	ldr	r0, [pc, #4]	; (d4288 <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
   d4284:	f002 bc49 	b.w	d6b1a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4288:	000d6aef 	.word	0x000d6aef

000d428c <_ZN10CloudClass9keepAliveEj>:
    		spark_process();
    }
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
   d428c:	b507      	push	{r0, r1, r2, lr}
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d428e:	2208      	movs	r2, #8
        particle::protocol::connection_properties_t conn_prop = {0};
   d4290:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   d4292:	f8ad 2000 	strh.w	r2, [sp]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4296:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d429a:	2201      	movs	r2, #1
   d429c:	9201      	str	r2, [sp, #4]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d429e:	4341      	muls	r1, r0
   d42a0:	466a      	mov	r2, sp
   d42a2:	4618      	mov	r0, r3
        particle::protocol::connection_properties_t conn_prop = {0};
   d42a4:	f8ad 3002 	strh.w	r3, [sp, #2]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d42a8:	f002 fabe 	bl	d6828 <spark_set_connection_property>
    }
   d42ac:	b003      	add	sp, #12
   d42ae:	f85d fb04 	ldr.w	pc, [sp], #4

000d42b2 <_ZN5Timer12changePeriodEjj>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d42b2:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d42b4:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d42b6:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d42b8:	2100      	movs	r1, #0
   d42ba:	b140      	cbz	r0, d42ce <_ZN5Timer12changePeriodEjj+0x1c>
   d42bc:	e9cd 2100 	strd	r2, r1, [sp]
   d42c0:	460a      	mov	r2, r1
   d42c2:	2103      	movs	r1, #3
   d42c4:	f002 f832 	bl	d632c <os_timer_change>
   d42c8:	fab0 f080 	clz	r0, r0
   d42cc:	0940      	lsrs	r0, r0, #5
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d42ce:	b003      	add	sp, #12
   d42d0:	f85d fb04 	ldr.w	pc, [sp], #4

000d42d4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d42d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d42d6:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d42d8:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d42dc:	f88d 3000 	strb.w	r3, [sp]
   d42e0:	f88d 5004 	strb.w	r5, [sp, #4]
   d42e4:	68e4      	ldr	r4, [r4, #12]
   d42e6:	233c      	movs	r3, #60	; 0x3c
   d42e8:	47a0      	blx	r4
	}
   d42ea:	b003      	add	sp, #12
   d42ec:	bd30      	pop	{r4, r5, pc}
	...

000d42f0 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d42f0:	b510      	push	{r4, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d42f2:	780b      	ldrb	r3, [r1, #0]
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d42f4:	b092      	sub	sp, #72	; 0x48
   d42f6:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d42f8:	b97b      	cbnz	r3, d431a <_Z14UbidotsHandlerPKcS0_+0x2a>
    snprintf(responseString, sizeof(responseString),"No Data");
   d42fa:	4919      	ldr	r1, [pc, #100]	; (d4360 <_Z14UbidotsHandlerPKcS0_+0x70>)
   d42fc:	a802      	add	r0, sp, #8
   d42fe:	f004 fd6d 	bl	d8ddc <strcpy>
        val_(0) {
   d4302:	2300      	movs	r3, #0
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
   d4304:	f88d 3000 	strb.w	r3, [sp]
   d4308:	4b16      	ldr	r3, [pc, #88]	; (d4364 <_Z14UbidotsHandlerPKcS0_+0x74>)
   d430a:	4917      	ldr	r1, [pc, #92]	; (d4368 <_Z14UbidotsHandlerPKcS0_+0x78>)
   d430c:	781b      	ldrb	r3, [r3, #0]
   d430e:	4817      	ldr	r0, [pc, #92]	; (d436c <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4310:	aa02      	add	r2, sp, #8
   d4312:	f7ff ffdf 	bl	d42d4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4316:	b012      	add	sp, #72	; 0x48
   d4318:	bd10      	pop	{r4, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d431a:	4608      	mov	r0, r1
   d431c:	f004 fcdb 	bl	d8cd6 <atoi>
   d4320:	28c8      	cmp	r0, #200	; 0xc8
   d4322:	d10e      	bne.n	d4342 <_Z14UbidotsHandlerPKcS0_+0x52>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4324:	4912      	ldr	r1, [pc, #72]	; (d4370 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d4326:	a802      	add	r0, sp, #8
   d4328:	f004 fd58 	bl	d8ddc <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d432c:	f003 fb67 	bl	d79fe <_ZN9TimeClass3nowEv>
   d4330:	4b10      	ldr	r3, [pc, #64]	; (d4374 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d4332:	6198      	str	r0, [r3, #24]
    sysStatusWriteNeeded = true;
   d4334:	4b10      	ldr	r3, [pc, #64]	; (d4378 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d4336:	2201      	movs	r2, #1
   d4338:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d433a:	4b10      	ldr	r3, [pc, #64]	; (d437c <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d433c:	2200      	movs	r2, #0
   d433e:	701a      	strb	r2, [r3, #0]
   d4340:	e7df      	b.n	d4302 <_Z14UbidotsHandlerPKcS0_+0x12>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4342:	4620      	mov	r0, r4
   d4344:	f004 fcc7 	bl	d8cd6 <atoi>
   d4348:	28c9      	cmp	r0, #201	; 0xc9
   d434a:	d0eb      	beq.n	d4324 <_Z14UbidotsHandlerPKcS0_+0x34>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d434c:	4620      	mov	r0, r4
   d434e:	f004 fcc2 	bl	d8cd6 <atoi>
   d4352:	4a0b      	ldr	r2, [pc, #44]	; (d4380 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d4354:	4603      	mov	r3, r0
   d4356:	2140      	movs	r1, #64	; 0x40
   d4358:	a802      	add	r0, sp, #8
   d435a:	f002 fae5 	bl	d6928 <snprintf>
   d435e:	e7d0      	b.n	d4302 <_Z14UbidotsHandlerPKcS0_+0x12>
   d4360:	000dac17 	.word	0x000dac17
   d4364:	2003e071 	.word	0x2003e071
   d4368:	000dac4e 	.word	0x000dac4e
   d436c:	2003e518 	.word	0x2003e518
   d4370:	000dac1f 	.word	0x000dac1f
   d4374:	2003e5c8 	.word	0x2003e5c8
   d4378:	2003e5f0 	.word	0x2003e5f0
   d437c:	2003e093 	.word	0x2003e093
   d4380:	000dac31 	.word	0x000dac31

000d4384 <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
   d4384:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4386:	4916      	ldr	r1, [pc, #88]	; (d43e0 <_Z14setVerboseMode6String+0x5c>)
   d4388:	4605      	mov	r5, r0
   d438a:	f003 f989 	bl	d76a0 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d438e:	4604      	mov	r4, r0
   d4390:	b188      	cbz	r0, d43b6 <_Z14setVerboseMode6String+0x32>
  {
    sysStatus.verboseMode = true;
   d4392:	4b14      	ldr	r3, [pc, #80]	; (d43e4 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d4394:	4a14      	ldr	r2, [pc, #80]	; (d43e8 <_Z14setVerboseMode6String+0x64>)
   d4396:	4915      	ldr	r1, [pc, #84]	; (d43ec <_Z14setVerboseMode6String+0x68>)
   d4398:	4815      	ldr	r0, [pc, #84]	; (d43f0 <_Z14setVerboseMode6String+0x6c>)
    sysStatus.verboseMode = true;
   d439a:	2401      	movs	r4, #1
   d439c:	725c      	strb	r4, [r3, #9]
   d439e:	2300      	movs	r3, #0
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d43a0:	f88d 3000 	strb.w	r3, [sp]
   d43a4:	4b13      	ldr	r3, [pc, #76]	; (d43f4 <_Z14setVerboseMode6String+0x70>)
   d43a6:	781b      	ldrb	r3, [r3, #0]
   d43a8:	f7ff ff94 	bl	d42d4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d43ac:	4b12      	ldr	r3, [pc, #72]	; (d43f8 <_Z14setVerboseMode6String+0x74>)
    return 1;
   d43ae:	4620      	mov	r0, r4
    sysStatusWriteNeeded = true;
   d43b0:	701c      	strb	r4, [r3, #0]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
    sysStatusWriteNeeded = true;
    return 1;
  }
  else return 0;
}
   d43b2:	b003      	add	sp, #12
   d43b4:	bd30      	pop	{r4, r5, pc}
   d43b6:	4911      	ldr	r1, [pc, #68]	; (d43fc <_Z14setVerboseMode6String+0x78>)
   d43b8:	4628      	mov	r0, r5
   d43ba:	f003 f971 	bl	d76a0 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d43be:	2800      	cmp	r0, #0
   d43c0:	d0f7      	beq.n	d43b2 <_Z14setVerboseMode6String+0x2e>
    sysStatus.verboseMode = false;
   d43c2:	4b08      	ldr	r3, [pc, #32]	; (d43e4 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d43c4:	4a0e      	ldr	r2, [pc, #56]	; (d4400 <_Z14setVerboseMode6String+0x7c>)
    sysStatus.verboseMode = false;
   d43c6:	725c      	strb	r4, [r3, #9]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d43c8:	4b0a      	ldr	r3, [pc, #40]	; (d43f4 <_Z14setVerboseMode6String+0x70>)
   d43ca:	f88d 4000 	strb.w	r4, [sp]
   d43ce:	781b      	ldrb	r3, [r3, #0]
   d43d0:	4906      	ldr	r1, [pc, #24]	; (d43ec <_Z14setVerboseMode6String+0x68>)
   d43d2:	4807      	ldr	r0, [pc, #28]	; (d43f0 <_Z14setVerboseMode6String+0x6c>)
   d43d4:	f7ff ff7e 	bl	d42d4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d43d8:	4b07      	ldr	r3, [pc, #28]	; (d43f8 <_Z14setVerboseMode6String+0x74>)
   d43da:	2001      	movs	r0, #1
   d43dc:	7018      	strb	r0, [r3, #0]
    return 1;
   d43de:	e7e8      	b.n	d43b2 <_Z14setVerboseMode6String+0x2e>
   d43e0:	000dac13 	.word	0x000dac13
   d43e4:	2003e5c8 	.word	0x2003e5c8
   d43e8:	000dac5b 	.word	0x000dac5b
   d43ec:	000dac7e 	.word	0x000dac7e
   d43f0:	2003e518 	.word	0x2003e518
   d43f4:	2003e071 	.word	0x2003e071
   d43f8:	2003e5f0 	.word	0x2003e5f0
   d43fc:	000dac6c 	.word	0x000dac6c
   d4400:	000dac6e 	.word	0x000dac6e

000d4404 <_Z16setThirdPartySim6String>:
  oldState = state;
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
}

int setThirdPartySim(String command) // Function to force sending data in current hour
{
   d4404:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4406:	491c      	ldr	r1, [pc, #112]	; (d4478 <_Z16setThirdPartySim6String+0x74>)
   d4408:	4605      	mov	r5, r0
   d440a:	f003 f949 	bl	d76a0 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d440e:	4604      	mov	r4, r0
   d4410:	b300      	cbz	r0, d4454 <_Z16setThirdPartySim6String+0x50>
  {
    sysStatus.thirdPartySim = true;
   d4412:	4c1a      	ldr	r4, [pc, #104]	; (d447c <_Z16setThirdPartySim6String+0x78>)
   d4414:	2301      	movs	r3, #1
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d4416:	6860      	ldr	r0, [r4, #4]
    sysStatus.thirdPartySim = true;
   d4418:	7063      	strb	r3, [r4, #1]
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d441a:	f7ff ff37 	bl	d428c <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d441e:	6863      	ldr	r3, [r4, #4]
   d4420:	4817      	ldr	r0, [pc, #92]	; (d4480 <_Z16setThirdPartySim6String+0x7c>)
   d4422:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4426:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d442a:	4359      	muls	r1, r3
   d442c:	f7ff ff41 	bl	d42b2 <_ZN5Timer12changePeriodEjj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4430:	f002 f9c2 	bl	d67b8 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to 3rd Party Sim", PRIVATE);
   d4434:	b148      	cbz	r0, d444a <_Z16setThirdPartySim6String+0x46>
   d4436:	2300      	movs	r3, #0
   d4438:	f88d 3000 	strb.w	r3, [sp]
   d443c:	4b11      	ldr	r3, [pc, #68]	; (d4484 <_Z16setThirdPartySim6String+0x80>)
   d443e:	4a12      	ldr	r2, [pc, #72]	; (d4488 <_Z16setThirdPartySim6String+0x84>)
   d4440:	781b      	ldrb	r3, [r3, #0]
   d4442:	4912      	ldr	r1, [pc, #72]	; (d448c <_Z16setThirdPartySim6String+0x88>)
   d4444:	4812      	ldr	r0, [pc, #72]	; (d4490 <_Z16setThirdPartySim6String+0x8c>)
   d4446:	f7ff ff45 	bl	d42d4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d444a:	4b12      	ldr	r3, [pc, #72]	; (d4494 <_Z16setThirdPartySim6String+0x90>)
   d444c:	2001      	movs	r0, #1
   d444e:	7018      	strb	r0, [r3, #0]
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
    sysStatusWriteNeeded = true;
    return 1;
  }
  else return 0;
}
   d4450:	b003      	add	sp, #12
   d4452:	bd30      	pop	{r4, r5, pc}
   d4454:	4910      	ldr	r1, [pc, #64]	; (d4498 <_Z16setThirdPartySim6String+0x94>)
   d4456:	4628      	mov	r0, r5
   d4458:	f003 f922 	bl	d76a0 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d445c:	2800      	cmp	r0, #0
   d445e:	d0f7      	beq.n	d4450 <_Z16setThirdPartySim6String+0x4c>
    sysStatus.thirdPartySim = false;
   d4460:	4b06      	ldr	r3, [pc, #24]	; (d447c <_Z16setThirdPartySim6String+0x78>)
   d4462:	705c      	strb	r4, [r3, #1]
   d4464:	f002 f9a8 	bl	d67b8 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
   d4468:	2800      	cmp	r0, #0
   d446a:	d0ee      	beq.n	d444a <_Z16setThirdPartySim6String+0x46>
   d446c:	4b05      	ldr	r3, [pc, #20]	; (d4484 <_Z16setThirdPartySim6String+0x80>)
   d446e:	f88d 4000 	strb.w	r4, [sp]
   d4472:	781b      	ldrb	r3, [r3, #0]
   d4474:	4a09      	ldr	r2, [pc, #36]	; (d449c <_Z16setThirdPartySim6String+0x98>)
   d4476:	e7e4      	b.n	d4442 <_Z16setThirdPartySim6String+0x3e>
   d4478:	000dac13 	.word	0x000dac13
   d447c:	2003e5c8 	.word	0x2003e5c8
   d4480:	2003e4f8 	.word	0x2003e4f8
   d4484:	2003e071 	.word	0x2003e071
   d4488:	000dac83 	.word	0x000dac83
   d448c:	000dac7e 	.word	0x000dac7e
   d4490:	2003e518 	.word	0x2003e518
   d4494:	2003e5f0 	.word	0x2003e5f0
   d4498:	000dac6c 	.word	0x000dac6c
   d449c:	000dac98 	.word	0x000dac98

000d44a0 <_Z12setKeepAlive6String>:

int setKeepAlive(String command)
{
   d44a0:	b510      	push	{r4, lr}
   d44a2:	b0c4      	sub	sp, #272	; 0x110
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d44a4:	6800      	ldr	r0, [r0, #0]
   d44a6:	220a      	movs	r2, #10
   d44a8:	a903      	add	r1, sp, #12
   d44aa:	f005 fb95 	bl	d9bd8 <strtol>
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d44ae:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   d44b2:	d822      	bhi.n	d44fa <_Z12setKeepAlive6String+0x5a>
  sysStatus.keepAlive = tempTime;
   d44b4:	4c12      	ldr	r4, [pc, #72]	; (d4500 <_Z12setKeepAlive6String+0x60>)
   d44b6:	6060      	str	r0, [r4, #4]
  Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d44b8:	f7ff fee8 	bl	d428c <_ZN10CloudClass9keepAliveEj>
  keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d44bc:	6863      	ldr	r3, [r4, #4]
   d44be:	4811      	ldr	r0, [pc, #68]	; (d4504 <_Z12setKeepAlive6String+0x64>)
   d44c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d44c4:	4359      	muls	r1, r3
   d44c6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d44ca:	f7ff fef2 	bl	d42b2 <_ZN5Timer12changePeriodEjj>
  snprintf(data, sizeof(data), "Keep Alive set to %i sec",sysStatus.keepAlive);
   d44ce:	6863      	ldr	r3, [r4, #4]
   d44d0:	4a0d      	ldr	r2, [pc, #52]	; (d4508 <_Z12setKeepAlive6String+0x68>)
   d44d2:	f44f 7180 	mov.w	r1, #256	; 0x100
   d44d6:	a804      	add	r0, sp, #16
   d44d8:	f002 fa26 	bl	d6928 <snprintf>
   d44dc:	2300      	movs	r3, #0
  publishQueue.publish("Keep Alive",data, PRIVATE);
   d44de:	f88d 3000 	strb.w	r3, [sp]
   d44e2:	4b0a      	ldr	r3, [pc, #40]	; (d450c <_Z12setKeepAlive6String+0x6c>)
   d44e4:	490a      	ldr	r1, [pc, #40]	; (d4510 <_Z12setKeepAlive6String+0x70>)
   d44e6:	781b      	ldrb	r3, [r3, #0]
   d44e8:	480a      	ldr	r0, [pc, #40]	; (d4514 <_Z12setKeepAlive6String+0x74>)
   d44ea:	aa04      	add	r2, sp, #16
   d44ec:	f7ff fef2 	bl	d42d4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatusWriteNeeded = true;                                                           // Need to store to FRAM back in the main loop
   d44f0:	4b09      	ldr	r3, [pc, #36]	; (d4518 <_Z12setKeepAlive6String+0x78>)
   d44f2:	2001      	movs	r0, #1
   d44f4:	7018      	strb	r0, [r3, #0]
  return 1;
}
   d44f6:	b044      	add	sp, #272	; 0x110
   d44f8:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d44fa:	2000      	movs	r0, #0
   d44fc:	e7fb      	b.n	d44f6 <_Z12setKeepAlive6String+0x56>
   d44fe:	bf00      	nop
   d4500:	2003e5c8 	.word	0x2003e5c8
   d4504:	2003e4f8 	.word	0x2003e4f8
   d4508:	000dacac 	.word	0x000dacac
   d450c:	2003e071 	.word	0x2003e071
   d4510:	000dacc5 	.word	0x000dacc5
   d4514:	2003e518 	.word	0x2003e518
   d4518:	2003e5f0 	.word	0x2003e5f0

000d451c <_Z14setConstantOne6String>:
/*
  * These functions change the values of the constant. 
*/

// Function Prototypes
int setConstantOne(String command){
   d451c:	b510      	push	{r4, lr}
   d451e:	b086      	sub	sp, #24
   d4520:	4604      	mov	r4, r0
  sensorConstants.sensorOneConstant = command.toFloat();
   d4522:	f003 f8cf 	bl	d76c4 <_ZNK6String7toFloatEv>
   d4526:	ee10 0a10 	vmov	r0, s0
   d452a:	f004 f815 	bl	d8558 <__aeabi_f2d>
   d452e:	4b0b      	ldr	r3, [pc, #44]	; (d455c <_Z14setConstantOne6String+0x40>)
   d4530:	e9c3 0100 	strd	r0, r1, [r3]
  publishQueue.publish("Constant One Value set to ",String(command),PRIVATE);
   d4534:	4621      	mov	r1, r4
   d4536:	a802      	add	r0, sp, #8
   d4538:	f003 f856 	bl	d75e8 <_ZN6StringC1ERKS_>
   d453c:	2300      	movs	r3, #0
   d453e:	f88d 3000 	strb.w	r3, [sp]
   d4542:	4b07      	ldr	r3, [pc, #28]	; (d4560 <_Z14setConstantOne6String+0x44>)
   d4544:	9a02      	ldr	r2, [sp, #8]
   d4546:	781b      	ldrb	r3, [r3, #0]
   d4548:	4906      	ldr	r1, [pc, #24]	; (d4564 <_Z14setConstantOne6String+0x48>)
   d454a:	4807      	ldr	r0, [pc, #28]	; (d4568 <_Z14setConstantOne6String+0x4c>)
   d454c:	f7ff fec2 	bl	d42d4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4550:	a802      	add	r0, sp, #8
   d4552:	f002 ffdb 	bl	d750c <_ZN6StringD1Ev>
  return 1;
}
   d4556:	2001      	movs	r0, #1
   d4558:	b006      	add	sp, #24
   d455a:	bd10      	pop	{r4, pc}
   d455c:	2003e570 	.word	0x2003e570
   d4560:	2003e071 	.word	0x2003e071
   d4564:	000dacd0 	.word	0x000dacd0
   d4568:	2003e518 	.word	0x2003e518

000d456c <_Z14setConstantTwo6String>:

int setConstantTwo(String command){
   d456c:	b510      	push	{r4, lr}
   d456e:	b086      	sub	sp, #24
   d4570:	4604      	mov	r4, r0
  sensorConstants.sensorTwoConstant = command.toFloat();
   d4572:	f003 f8a7 	bl	d76c4 <_ZNK6String7toFloatEv>
   d4576:	ee10 0a10 	vmov	r0, s0
   d457a:	f003 ffed 	bl	d8558 <__aeabi_f2d>
   d457e:	4b0b      	ldr	r3, [pc, #44]	; (d45ac <_Z14setConstantTwo6String+0x40>)
   d4580:	e9c3 0102 	strd	r0, r1, [r3, #8]
  publishQueue.publish("Constant Two Value set to ",String(command),PRIVATE);
   d4584:	4621      	mov	r1, r4
   d4586:	a802      	add	r0, sp, #8
   d4588:	f003 f82e 	bl	d75e8 <_ZN6StringC1ERKS_>
   d458c:	2300      	movs	r3, #0
   d458e:	f88d 3000 	strb.w	r3, [sp]
   d4592:	4b07      	ldr	r3, [pc, #28]	; (d45b0 <_Z14setConstantTwo6String+0x44>)
   d4594:	9a02      	ldr	r2, [sp, #8]
   d4596:	781b      	ldrb	r3, [r3, #0]
   d4598:	4906      	ldr	r1, [pc, #24]	; (d45b4 <_Z14setConstantTwo6String+0x48>)
   d459a:	4807      	ldr	r0, [pc, #28]	; (d45b8 <_Z14setConstantTwo6String+0x4c>)
   d459c:	f7ff fe9a 	bl	d42d4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d45a0:	a802      	add	r0, sp, #8
   d45a2:	f002 ffb3 	bl	d750c <_ZN6StringD1Ev>
  return 1;
}
   d45a6:	2001      	movs	r0, #1
   d45a8:	b006      	add	sp, #24
   d45aa:	bd10      	pop	{r4, pc}
   d45ac:	2003e570 	.word	0x2003e570
   d45b0:	2003e071 	.word	0x2003e071
   d45b4:	000daceb 	.word	0x000daceb
   d45b8:	2003e518 	.word	0x2003e518

000d45bc <_Z16setConstantThree6String>:

int setConstantThree(String command){
   d45bc:	b510      	push	{r4, lr}
   d45be:	b086      	sub	sp, #24
   d45c0:	4604      	mov	r4, r0
  sensorConstants.sensorThreeConstant = command.toFloat();
   d45c2:	f003 f87f 	bl	d76c4 <_ZNK6String7toFloatEv>
   d45c6:	ee10 0a10 	vmov	r0, s0
   d45ca:	f003 ffc5 	bl	d8558 <__aeabi_f2d>
   d45ce:	4b0b      	ldr	r3, [pc, #44]	; (d45fc <_Z16setConstantThree6String+0x40>)
   d45d0:	e9c3 0104 	strd	r0, r1, [r3, #16]
  publishQueue.publish("Constant Three Value set to ",String(command),PRIVATE);
   d45d4:	4621      	mov	r1, r4
   d45d6:	a802      	add	r0, sp, #8
   d45d8:	f003 f806 	bl	d75e8 <_ZN6StringC1ERKS_>
   d45dc:	2300      	movs	r3, #0
   d45de:	f88d 3000 	strb.w	r3, [sp]
   d45e2:	4b07      	ldr	r3, [pc, #28]	; (d4600 <_Z16setConstantThree6String+0x44>)
   d45e4:	9a02      	ldr	r2, [sp, #8]
   d45e6:	781b      	ldrb	r3, [r3, #0]
   d45e8:	4906      	ldr	r1, [pc, #24]	; (d4604 <_Z16setConstantThree6String+0x48>)
   d45ea:	4807      	ldr	r0, [pc, #28]	; (d4608 <_Z16setConstantThree6String+0x4c>)
   d45ec:	f7ff fe72 	bl	d42d4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d45f0:	a802      	add	r0, sp, #8
   d45f2:	f002 ff8b 	bl	d750c <_ZN6StringD1Ev>
  return 1;
}
   d45f6:	2001      	movs	r0, #1
   d45f8:	b006      	add	sp, #24
   d45fa:	bd10      	pop	{r4, pc}
   d45fc:	2003e570 	.word	0x2003e570
   d4600:	2003e071 	.word	0x2003e071
   d4604:	000dad06 	.word	0x000dad06
   d4608:	2003e518 	.word	0x2003e518

000d460c <_Z15setConstantFour6String>:

int setConstantFour(String command){
   d460c:	b510      	push	{r4, lr}
   d460e:	b086      	sub	sp, #24
   d4610:	4604      	mov	r4, r0
  sensorConstants.sensorFourConstant = command.toFloat();
   d4612:	f003 f857 	bl	d76c4 <_ZNK6String7toFloatEv>
   d4616:	ee10 0a10 	vmov	r0, s0
   d461a:	f003 ff9d 	bl	d8558 <__aeabi_f2d>
   d461e:	4b0b      	ldr	r3, [pc, #44]	; (d464c <_Z15setConstantFour6String+0x40>)
   d4620:	e9c3 0106 	strd	r0, r1, [r3, #24]
  publishQueue.publish("Constant Four Value set to ",String(command),PRIVATE);
   d4624:	4621      	mov	r1, r4
   d4626:	a802      	add	r0, sp, #8
   d4628:	f002 ffde 	bl	d75e8 <_ZN6StringC1ERKS_>
   d462c:	2300      	movs	r3, #0
   d462e:	f88d 3000 	strb.w	r3, [sp]
   d4632:	4b07      	ldr	r3, [pc, #28]	; (d4650 <_Z15setConstantFour6String+0x44>)
   d4634:	9a02      	ldr	r2, [sp, #8]
   d4636:	781b      	ldrb	r3, [r3, #0]
   d4638:	4906      	ldr	r1, [pc, #24]	; (d4654 <_Z15setConstantFour6String+0x48>)
   d463a:	4807      	ldr	r0, [pc, #28]	; (d4658 <_Z15setConstantFour6String+0x4c>)
   d463c:	f7ff fe4a 	bl	d42d4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4640:	a802      	add	r0, sp, #8
   d4642:	f002 ff63 	bl	d750c <_ZN6StringD1Ev>
  return 1;
}
   d4646:	2001      	movs	r0, #1
   d4648:	b006      	add	sp, #24
   d464a:	bd10      	pop	{r4, pc}
   d464c:	2003e570 	.word	0x2003e570
   d4650:	2003e071 	.word	0x2003e071
   d4654:	000dad23 	.word	0x000dad23
   d4658:	2003e518 	.word	0x2003e518

000d465c <_Z15setConstantFive6String>:

int setConstantFive(String command){
   d465c:	b510      	push	{r4, lr}
   d465e:	b086      	sub	sp, #24
   d4660:	4604      	mov	r4, r0
  sensorConstants.sensorFiveConstant = command.toFloat();
   d4662:	f003 f82f 	bl	d76c4 <_ZNK6String7toFloatEv>
   d4666:	ee10 0a10 	vmov	r0, s0
   d466a:	f003 ff75 	bl	d8558 <__aeabi_f2d>
   d466e:	4b0b      	ldr	r3, [pc, #44]	; (d469c <_Z15setConstantFive6String+0x40>)
   d4670:	e9c3 0108 	strd	r0, r1, [r3, #32]
  publishQueue.publish("Constant Five Value set to ",String(command),PRIVATE);
   d4674:	4621      	mov	r1, r4
   d4676:	a802      	add	r0, sp, #8
   d4678:	f002 ffb6 	bl	d75e8 <_ZN6StringC1ERKS_>
   d467c:	2300      	movs	r3, #0
   d467e:	f88d 3000 	strb.w	r3, [sp]
   d4682:	4b07      	ldr	r3, [pc, #28]	; (d46a0 <_Z15setConstantFive6String+0x44>)
   d4684:	9a02      	ldr	r2, [sp, #8]
   d4686:	781b      	ldrb	r3, [r3, #0]
   d4688:	4906      	ldr	r1, [pc, #24]	; (d46a4 <_Z15setConstantFive6String+0x48>)
   d468a:	4807      	ldr	r0, [pc, #28]	; (d46a8 <_Z15setConstantFive6String+0x4c>)
   d468c:	f7ff fe22 	bl	d42d4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4690:	a802      	add	r0, sp, #8
   d4692:	f002 ff3b 	bl	d750c <_ZN6StringD1Ev>
  return 1;
}
   d4696:	2001      	movs	r0, #1
   d4698:	b006      	add	sp, #24
   d469a:	bd10      	pop	{r4, pc}
   d469c:	2003e570 	.word	0x2003e570
   d46a0:	2003e071 	.word	0x2003e071
   d46a4:	000dad3f 	.word	0x000dad3f
   d46a8:	2003e518 	.word	0x2003e518

000d46ac <_Z14setConstantSix6String>:

int setConstantSix(String command){
   d46ac:	b510      	push	{r4, lr}
   d46ae:	b086      	sub	sp, #24
   d46b0:	4604      	mov	r4, r0
  sensorConstants.sensorSixConstant = command.toFloat();
   d46b2:	f003 f807 	bl	d76c4 <_ZNK6String7toFloatEv>
   d46b6:	ee10 0a10 	vmov	r0, s0
   d46ba:	f003 ff4d 	bl	d8558 <__aeabi_f2d>
   d46be:	4b0b      	ldr	r3, [pc, #44]	; (d46ec <_Z14setConstantSix6String+0x40>)
   d46c0:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
  publishQueue.publish("Constant Six Value set to ",String(command),PRIVATE);
   d46c4:	4621      	mov	r1, r4
   d46c6:	a802      	add	r0, sp, #8
   d46c8:	f002 ff8e 	bl	d75e8 <_ZN6StringC1ERKS_>
   d46cc:	2300      	movs	r3, #0
   d46ce:	f88d 3000 	strb.w	r3, [sp]
   d46d2:	4b07      	ldr	r3, [pc, #28]	; (d46f0 <_Z14setConstantSix6String+0x44>)
   d46d4:	9a02      	ldr	r2, [sp, #8]
   d46d6:	781b      	ldrb	r3, [r3, #0]
   d46d8:	4906      	ldr	r1, [pc, #24]	; (d46f4 <_Z14setConstantSix6String+0x48>)
   d46da:	4807      	ldr	r0, [pc, #28]	; (d46f8 <_Z14setConstantSix6String+0x4c>)
   d46dc:	f7ff fdfa 	bl	d42d4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d46e0:	a802      	add	r0, sp, #8
   d46e2:	f002 ff13 	bl	d750c <_ZN6StringD1Ev>
  return 1;
}
   d46e6:	2001      	movs	r0, #1
   d46e8:	b006      	add	sp, #24
   d46ea:	bd10      	pop	{r4, pc}
   d46ec:	2003e570 	.word	0x2003e570
   d46f0:	2003e071 	.word	0x2003e071
   d46f4:	000dad5b 	.word	0x000dad5b
   d46f8:	2003e518 	.word	0x2003e518

000d46fc <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                                                 // Default settings for the device - connected, not-low power and always on
   d46fc:	b507      	push	{r0, r1, r2, lr}
   d46fe:	f002 f85b 	bl	d67b8 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d4702:	b148      	cbz	r0, d4718 <_Z18loadSystemDefaultsv+0x1c>
   d4704:	2300      	movs	r3, #0
   d4706:	f88d 3000 	strb.w	r3, [sp]
   d470a:	4b0b      	ldr	r3, [pc, #44]	; (d4738 <_Z18loadSystemDefaultsv+0x3c>)
   d470c:	4a0b      	ldr	r2, [pc, #44]	; (d473c <_Z18loadSystemDefaultsv+0x40>)
   d470e:	781b      	ldrb	r3, [r3, #0]
   d4710:	490b      	ldr	r1, [pc, #44]	; (d4740 <_Z18loadSystemDefaultsv+0x44>)
   d4712:	480c      	ldr	r0, [pc, #48]	; (d4744 <_Z18loadSystemDefaultsv+0x48>)
   d4714:	f7ff fdde 	bl	d42d4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.keepAlive = 120;
   d4718:	4a0b      	ldr	r2, [pc, #44]	; (d4748 <_Z18loadSystemDefaultsv+0x4c>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d471a:	480c      	ldr	r0, [pc, #48]	; (d474c <_Z18loadSystemDefaultsv+0x50>)
   d471c:	2378      	movs	r3, #120	; 0x78
   d471e:	6053      	str	r3, [r2, #4]
  sysStatus.verboseMode = false;
   d4720:	2300      	movs	r3, #0
  sysStatus.structuresVersion = 1;
   d4722:	2101      	movs	r1, #1
  sysStatus.verboseMode = false;
   d4724:	7253      	strb	r3, [r2, #9]
  sysStatus.lowBatteryMode = false;
   d4726:	7293      	strb	r3, [r2, #10]
   d4728:	2328      	movs	r3, #40	; 0x28
  sysStatus.structuresVersion = 1;
   d472a:	8011      	strh	r1, [r2, #0]
}
   d472c:	b003      	add	sp, #12
   d472e:	f85d eb04 	ldr.w	lr, [sp], #4
   d4732:	f000 bde2 	b.w	d52fa <_ZN6MB85RC9writeDataEjPKhj>
   d4736:	bf00      	nop
   d4738:	2003e071 	.word	0x2003e071
   d473c:	000dad76 	.word	0x000dad76
   d4740:	000dac7e 	.word	0x000dac7e
   d4744:	2003e518 	.word	0x2003e518
   d4748:	2003e5c8 	.word	0x2003e5c8
   d474c:	2003e4e8 	.word	0x2003e4e8

000d4750 <_Z17checkSystemValuesv>:
void checkSystemValues() {                                                                  // Checks to ensure that all system values are in reasonable range 
   d4750:	b510      	push	{r4, lr}
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d4752:	4c12      	ldr	r4, [pc, #72]	; (d479c <_Z17checkSystemValuesv+0x4c>)
   d4754:	7a23      	ldrb	r3, [r4, #8]
   d4756:	2b01      	cmp	r3, #1
   d4758:	d904      	bls.n	d4764 <_Z17checkSystemValuesv+0x14>
   d475a:	f002 f82d 	bl	d67b8 <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d475e:	b1d8      	cbz	r0, d4798 <_Z17checkSystemValuesv+0x48>
   d4760:	2301      	movs	r3, #1
   d4762:	7223      	strb	r3, [r4, #8]
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   d4764:	6863      	ldr	r3, [r4, #4]
   d4766:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   d476a:	bf84      	itt	hi
   d476c:	f44f 7316 	movhi.w	r3, #600	; 0x258
   d4770:	6063      	strhi	r3, [r4, #4]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = true;
   d4772:	7a63      	ldrb	r3, [r4, #9]
   d4774:	2b01      	cmp	r3, #1
   d4776:	bf84      	itt	hi
   d4778:	2301      	movhi	r3, #1
   d477a:	7263      	strbhi	r3, [r4, #9]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
   d477c:	7aa3      	ldrb	r3, [r4, #10]
   d477e:	2b01      	cmp	r3, #1
   d4780:	bf84      	itt	hi
   d4782:	2300      	movhi	r3, #0
   d4784:	72a3      	strbhi	r3, [r4, #10]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4786:	6963      	ldr	r3, [r4, #20]
   d4788:	2bff      	cmp	r3, #255	; 0xff
   d478a:	bf84      	itt	hi
   d478c:	2300      	movhi	r3, #0
   d478e:	6163      	strhi	r3, [r4, #20]
  sysStatusWriteNeeded = true;
   d4790:	4b03      	ldr	r3, [pc, #12]	; (d47a0 <_Z17checkSystemValuesv+0x50>)
   d4792:	2201      	movs	r2, #1
   d4794:	701a      	strb	r2, [r3, #0]
}
   d4796:	bd10      	pop	{r4, pc}
    else sysStatus.connectedStatus = false;
   d4798:	7220      	strb	r0, [r4, #8]
   d479a:	e7e3      	b.n	d4764 <_Z17checkSystemValuesv+0x14>
   d479c:	2003e5c8 	.word	0x2003e5c8
   d47a0:	2003e5f0 	.word	0x2003e5f0

000d47a4 <_Z11petWatchdogv>:
{
   d47a4:	b507      	push	{r0, r1, r2, lr}
  digitalWrite(donePin, HIGH);                                                              // Pet the watchdog
   d47a6:	2101      	movs	r1, #1
   d47a8:	2005      	movs	r0, #5
   d47aa:	f003 fbce 	bl	d7f4a <digitalWrite>
  digitalWrite(donePin, LOW);
   d47ae:	2100      	movs	r1, #0
   d47b0:	2005      	movs	r0, #5
   d47b2:	f003 fbca 	bl	d7f4a <digitalWrite>
  watchdogFlag = false;
   d47b6:	4a09      	ldr	r2, [pc, #36]	; (d47dc <_Z11petWatchdogv+0x38>)
   d47b8:	2300      	movs	r3, #0
   d47ba:	7013      	strb	r3, [r2, #0]
  if (Particle.connected && sysStatus.verboseMode) publishQueue.publish("Watchdog","Petted",PRIVATE);
   d47bc:	4a08      	ldr	r2, [pc, #32]	; (d47e0 <_Z11petWatchdogv+0x3c>)
   d47be:	7a52      	ldrb	r2, [r2, #9]
   d47c0:	b142      	cbz	r2, d47d4 <_Z11petWatchdogv+0x30>
   d47c2:	f88d 3000 	strb.w	r3, [sp]
   d47c6:	4b07      	ldr	r3, [pc, #28]	; (d47e4 <_Z11petWatchdogv+0x40>)
   d47c8:	4a07      	ldr	r2, [pc, #28]	; (d47e8 <_Z11petWatchdogv+0x44>)
   d47ca:	781b      	ldrb	r3, [r3, #0]
   d47cc:	4907      	ldr	r1, [pc, #28]	; (d47ec <_Z11petWatchdogv+0x48>)
   d47ce:	4808      	ldr	r0, [pc, #32]	; (d47f0 <_Z11petWatchdogv+0x4c>)
   d47d0:	f7ff fd80 	bl	d42d4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d47d4:	b003      	add	sp, #12
   d47d6:	f85d fb04 	ldr.w	pc, [sp], #4
   d47da:	bf00      	nop
   d47dc:	2003e5f1 	.word	0x2003e5f1
   d47e0:	2003e5c8 	.word	0x2003e5c8
   d47e4:	2003e071 	.word	0x2003e071
   d47e8:	000dad8e 	.word	0x000dad8e
   d47ec:	000dad95 	.word	0x000dad95
   d47f0:	2003e518 	.word	0x2003e518

000d47f4 <_Z9sendEventv>:
{
   d47f4:	b510      	push	{r4, lr}
  snprintf(data, sizeof(data), "{\"sensorOne\":%4.1f, \"sensorTwo\":%4.1f,  \"sensorThree\":%4.1f,  \"sensorFour\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f}", sensorData.sensorOneCurrent,sensorData.sensorTwoCurrent,sensorData.sensorThreeCurrent,sensorData.sensorFourCurrent,sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d47f6:	4c1d      	ldr	r4, [pc, #116]	; (d486c <_Z9sendEventv+0x78>)
{
   d47f8:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
  snprintf(data, sizeof(data), "{\"sensorOne\":%4.1f, \"sensorTwo\":%4.1f,  \"sensorThree\":%4.1f,  \"sensorFour\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f}", sensorData.sensorOneCurrent,sensorData.sensorTwoCurrent,sensorData.sensorThreeCurrent,sensorData.sensorFourCurrent,sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d47fc:	6960      	ldr	r0, [r4, #20]
   d47fe:	f003 feab 	bl	d8558 <__aeabi_f2d>
   d4802:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d4806:	6920      	ldr	r0, [r4, #16]
   d4808:	f003 fea6 	bl	d8558 <__aeabi_f2d>
   d480c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d4810:	68e0      	ldr	r0, [r4, #12]
   d4812:	f003 fea1 	bl	d8558 <__aeabi_f2d>
   d4816:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d481a:	68a0      	ldr	r0, [r4, #8]
   d481c:	f003 fe9c 	bl	d8558 <__aeabi_f2d>
   d4820:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4824:	6860      	ldr	r0, [r4, #4]
   d4826:	f003 fe97 	bl	d8558 <__aeabi_f2d>
   d482a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d482e:	6820      	ldr	r0, [r4, #0]
   d4830:	f003 fe92 	bl	d8558 <__aeabi_f2d>
   d4834:	4a0e      	ldr	r2, [pc, #56]	; (d4870 <_Z9sendEventv+0x7c>)
   d4836:	e9cd 0100 	strd	r0, r1, [sp]
   d483a:	f44f 7100 	mov.w	r1, #512	; 0x200
   d483e:	a80c      	add	r0, sp, #48	; 0x30
   d4840:	f002 f872 	bl	d6928 <snprintf>
  publishQueue.publish("powermonitoring_hook", data, PRIVATE);
   d4844:	2300      	movs	r3, #0
   d4846:	f88d 3000 	strb.w	r3, [sp]
   d484a:	4b0a      	ldr	r3, [pc, #40]	; (d4874 <_Z9sendEventv+0x80>)
   d484c:	490a      	ldr	r1, [pc, #40]	; (d4878 <_Z9sendEventv+0x84>)
   d484e:	781b      	ldrb	r3, [r3, #0]
   d4850:	480a      	ldr	r0, [pc, #40]	; (d487c <_Z9sendEventv+0x88>)
   d4852:	aa0c      	add	r2, sp, #48	; 0x30
   d4854:	f7ff fd3e 	bl	d42d4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                                      // set the data inflight flag
   d4858:	4b09      	ldr	r3, [pc, #36]	; (d4880 <_Z9sendEventv+0x8c>)
   d485a:	2201      	movs	r2, #1
   d485c:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d485e:	f001 fdc5 	bl	d63ec <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d4862:	4b08      	ldr	r3, [pc, #32]	; (d4884 <_Z9sendEventv+0x90>)
   d4864:	6018      	str	r0, [r3, #0]
}
   d4866:	f50d 7d0c 	add.w	sp, sp, #560	; 0x230
   d486a:	bd10      	pop	{r4, pc}
   d486c:	2003e5a0 	.word	0x2003e5a0
   d4870:	000dad9e 	.word	0x000dad9e
   d4874:	2003e071 	.word	0x2003e071
   d4878:	000dae17 	.word	0x000dae17
   d487c:	2003e518 	.word	0x2003e518
   d4880:	2003e093 	.word	0x2003e093
   d4884:	2003e5f4 	.word	0x2003e5f4

000d4888 <_Z22publishStateTransitionv>:
{
   d4888:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d488a:	4d11      	ldr	r5, [pc, #68]	; (d48d0 <_Z22publishStateTransitionv+0x48>)
   d488c:	4c11      	ldr	r4, [pc, #68]	; (d48d4 <_Z22publishStateTransitionv+0x4c>)
   d488e:	4912      	ldr	r1, [pc, #72]	; (d48d8 <_Z22publishStateTransitionv+0x50>)
   d4890:	782a      	ldrb	r2, [r5, #0]
   d4892:	7820      	ldrb	r0, [r4, #0]
{
   d4894:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4896:	231a      	movs	r3, #26
   d4898:	fb03 1202 	mla	r2, r3, r2, r1
   d489c:	9200      	str	r2, [sp, #0]
   d489e:	fb03 1300 	mla	r3, r3, r0, r1
   d48a2:	4a0e      	ldr	r2, [pc, #56]	; (d48dc <_Z22publishStateTransitionv+0x54>)
   d48a4:	2128      	movs	r1, #40	; 0x28
   d48a6:	a802      	add	r0, sp, #8
   d48a8:	f002 f83e 	bl	d6928 <snprintf>
  oldState = state;
   d48ac:	782b      	ldrb	r3, [r5, #0]
   d48ae:	7023      	strb	r3, [r4, #0]
   d48b0:	f001 ff82 	bl	d67b8 <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d48b4:	b148      	cbz	r0, d48ca <_Z22publishStateTransitionv+0x42>
   d48b6:	2300      	movs	r3, #0
   d48b8:	f88d 3000 	strb.w	r3, [sp]
   d48bc:	4b08      	ldr	r3, [pc, #32]	; (d48e0 <_Z22publishStateTransitionv+0x58>)
   d48be:	4909      	ldr	r1, [pc, #36]	; (d48e4 <_Z22publishStateTransitionv+0x5c>)
   d48c0:	781b      	ldrb	r3, [r3, #0]
   d48c2:	4809      	ldr	r0, [pc, #36]	; (d48e8 <_Z22publishStateTransitionv+0x60>)
   d48c4:	aa02      	add	r2, sp, #8
   d48c6:	f7ff fd05 	bl	d42d4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d48ca:	b00d      	add	sp, #52	; 0x34
   d48cc:	bd30      	pop	{r4, r5, pc}
   d48ce:	bf00      	nop
   d48d0:	2003e5c5 	.word	0x2003e5c5
   d48d4:	2003e514 	.word	0x2003e514
   d48d8:	2003ddb2 	.word	0x2003ddb2
   d48dc:	000dae2c 	.word	0x000dae2c
   d48e0:	2003e071 	.word	0x2003e071
   d48e4:	000dae3a 	.word	0x000dae3a
   d48e8:	2003e518 	.word	0x2003e518

000d48ec <_Z17getBatteryContextv>:
{
   d48ec:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d48ee:	4d0d      	ldr	r5, [pc, #52]	; (d4924 <_Z17getBatteryContextv+0x38>)
   d48f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   d48f2:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d48f4:	ac01      	add	r4, sp, #4
   d48f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d48f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d48fc:	4b0a      	ldr	r3, [pc, #40]	; (d4928 <_Z17getBatteryContextv+0x3c>)
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d48fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d4902:	7c1b      	ldrb	r3, [r3, #16]
   d4904:	4809      	ldr	r0, [pc, #36]	; (d492c <_Z17getBatteryContextv+0x40>)
   d4906:	aa08      	add	r2, sp, #32
   d4908:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d490c:	2110      	movs	r1, #16
   d490e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
   d4912:	4a07      	ldr	r2, [pc, #28]	; (d4930 <_Z17getBatteryContextv+0x44>)
   d4914:	f002 f808 	bl	d6928 <snprintf>
  sysStatusWriteNeeded = true;
   d4918:	4b06      	ldr	r3, [pc, #24]	; (d4934 <_Z17getBatteryContextv+0x48>)
   d491a:	2201      	movs	r2, #1
   d491c:	701a      	strb	r2, [r3, #0]
}
   d491e:	b009      	add	sp, #36	; 0x24
   d4920:	bd30      	pop	{r4, r5, pc}
   d4922:	bf00      	nop
   d4924:	000dafec 	.word	0x000dafec
   d4928:	2003e5c8 	.word	0x2003e5c8
   d492c:	2003e072 	.word	0x2003e072
   d4930:	000db0c8 	.word	0x000db0c8
   d4934:	2003e5f0 	.word	0x2003e5f0

000d4938 <_Z16takeMeasurementsv>:


// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() 
{
   d4938:	b538      	push	{r3, r4, r5, lr}

    sensorData.validData = false;
   d493a:	4c26      	ldr	r4, [pc, #152]	; (d49d4 <_Z16takeMeasurementsv+0x9c>)
   d493c:	2300      	movs	r3, #0
   d493e:	f884 3020 	strb.w	r3, [r4, #32]
    
    getBatteryContext();     
   d4942:	f7ff ffd3 	bl	d48ec <_Z17getBatteryContextv>

    sensorData.sensorOneCurrent =   emon1.calcIrms(1480);
   d4946:	4824      	ldr	r0, [pc, #144]	; (d49d8 <_Z16takeMeasurementsv+0xa0>)
   d4948:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d494c:	f001 fc54 	bl	d61f8 <_ZN13EnergyMonitor8calcIrmsEj>
   d4950:	ec51 0b10 	vmov	r0, r1, d0
   d4954:	f004 f928 	bl	d8ba8 <__aeabi_d2f>
    sensorData.sensorTwoCurrent =   emon2.calcIrms(1480);
   d4958:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
    sensorData.sensorOneCurrent =   emon1.calcIrms(1480);
   d495c:	6020      	str	r0, [r4, #0]
    sensorData.sensorTwoCurrent =   emon2.calcIrms(1480);
   d495e:	481f      	ldr	r0, [pc, #124]	; (d49dc <_Z16takeMeasurementsv+0xa4>)
   d4960:	f001 fc4a 	bl	d61f8 <_ZN13EnergyMonitor8calcIrmsEj>
   d4964:	ec51 0b10 	vmov	r0, r1, d0
   d4968:	f004 f91e 	bl	d8ba8 <__aeabi_d2f>
    sensorData.sensorThreeCurrent=  emon3.calcIrms(1480);
   d496c:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
    sensorData.sensorTwoCurrent =   emon2.calcIrms(1480);
   d4970:	6060      	str	r0, [r4, #4]
    sensorData.sensorThreeCurrent=  emon3.calcIrms(1480);
   d4972:	481b      	ldr	r0, [pc, #108]	; (d49e0 <_Z16takeMeasurementsv+0xa8>)
   d4974:	f001 fc40 	bl	d61f8 <_ZN13EnergyMonitor8calcIrmsEj>
   d4978:	ec51 0b10 	vmov	r0, r1, d0
   d497c:	f004 f914 	bl	d8ba8 <__aeabi_d2f>
    sensorData.sensorFourCurrent =  emon4.calcIrms(1480);
   d4980:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
    sensorData.sensorThreeCurrent=  emon3.calcIrms(1480);
   d4984:	60a0      	str	r0, [r4, #8]
    sensorData.sensorFourCurrent =  emon4.calcIrms(1480);
   d4986:	4817      	ldr	r0, [pc, #92]	; (d49e4 <_Z16takeMeasurementsv+0xac>)
   d4988:	f001 fc36 	bl	d61f8 <_ZN13EnergyMonitor8calcIrmsEj>
   d498c:	ec51 0b10 	vmov	r0, r1, d0
   d4990:	f004 f90a 	bl	d8ba8 <__aeabi_d2f>
    sensorData.sensorFiveCurrent =  emon5.calcIrms(1480);               
   d4994:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
    sensorData.sensorFourCurrent =  emon4.calcIrms(1480);
   d4998:	60e0      	str	r0, [r4, #12]
    sensorData.sensorFiveCurrent =  emon5.calcIrms(1480);               
   d499a:	4813      	ldr	r0, [pc, #76]	; (d49e8 <_Z16takeMeasurementsv+0xb0>)
   d499c:	f001 fc2c 	bl	d61f8 <_ZN13EnergyMonitor8calcIrmsEj>
   d49a0:	ec51 0b10 	vmov	r0, r1, d0
   d49a4:	f004 f900 	bl	d8ba8 <__aeabi_d2f>
    sensorData.sensorSixCurrent =   emon6.calcIrms(1480);
   d49a8:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
    sensorData.sensorFiveCurrent =  emon5.calcIrms(1480);               
   d49ac:	6120      	str	r0, [r4, #16]
    sensorData.sensorSixCurrent =   emon6.calcIrms(1480);
   d49ae:	480f      	ldr	r0, [pc, #60]	; (d49ec <_Z16takeMeasurementsv+0xb4>)
   d49b0:	f001 fc22 	bl	d61f8 <_ZN13EnergyMonitor8calcIrmsEj>
   d49b4:	ec51 0b10 	vmov	r0, r1, d0
   d49b8:	f004 f8f6 	bl	d8ba8 <__aeabi_d2f>

    // Indicate that this is a valid data array and store it
    sensorData.validData = true;
   d49bc:	2501      	movs	r5, #1
    sensorData.sensorSixCurrent =   emon6.calcIrms(1480);
   d49be:	6160      	str	r0, [r4, #20]
    sensorData.validData = true;
   d49c0:	f884 5020 	strb.w	r5, [r4, #32]
    sensorData.timeStamp = Time.now();
   d49c4:	f003 f81b 	bl	d79fe <_ZN9TimeClass3nowEv>
    sensorDataWriteNeeded = true;
   d49c8:	4b09      	ldr	r3, [pc, #36]	; (d49f0 <_Z16takeMeasurementsv+0xb8>)
    sensorData.timeStamp = Time.now();
   d49ca:	61a0      	str	r0, [r4, #24]
    sensorDataWriteNeeded = true;
   d49cc:	701d      	strb	r5, [r3, #0]
    return 1;

  }
   d49ce:	4628      	mov	r0, r5
   d49d0:	bd38      	pop	{r3, r4, r5, pc}
   d49d2:	bf00      	nop
   d49d4:	2003e5a0 	.word	0x2003e5a0
   d49d8:	2003e098 	.word	0x2003e098
   d49dc:	2003e150 	.word	0x2003e150
   d49e0:	2003e208 	.word	0x2003e208
   d49e4:	2003e2c0 	.word	0x2003e2c0
   d49e8:	2003e378 	.word	0x2003e378
   d49ec:	2003e430 	.word	0x2003e430
   d49f0:	2003e5c4 	.word	0x2003e5c4

000d49f4 <loop>:
void loop() {
   d49f4:	b570      	push	{r4, r5, r6, lr}
  switch(state) {
   d49f6:	4c78      	ldr	r4, [pc, #480]	; (d4bd8 <loop+0x1e4>)
   d49f8:	7823      	ldrb	r3, [r4, #0]
   d49fa:	3b01      	subs	r3, #1
void loop() {
   d49fc:	b086      	sub	sp, #24
   d49fe:	2b04      	cmp	r3, #4
   d4a00:	d817      	bhi.n	d4a32 <loop+0x3e>
   d4a02:	e8df f003 	tbb	[pc, r3]
   d4a06:	03c3      	.short	0x03c3
   d4a08:	5141      	.short	0x5141
   d4a0a:	90          	.byte	0x90
   d4a0b:	00          	.byte	0x00
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4a0c:	4b73      	ldr	r3, [pc, #460]	; (d4bdc <loop+0x1e8>)
   d4a0e:	7a5b      	ldrb	r3, [r3, #9]
   d4a10:	b12b      	cbz	r3, d4a1e <loop+0x2a>
   d4a12:	4b73      	ldr	r3, [pc, #460]	; (d4be0 <loop+0x1ec>)
   d4a14:	781b      	ldrb	r3, [r3, #0]
   d4a16:	2b02      	cmp	r3, #2
   d4a18:	d001      	beq.n	d4a1e <loop+0x2a>
   d4a1a:	f7ff ff35 	bl	d4888 <_Z22publishStateTransitionv>
    if (!(Time.now() % wakeBoundary)) state = MEASURING_STATE;                                                     
   d4a1e:	f002 ffee 	bl	d79fe <_ZN9TimeClass3nowEv>
   d4a22:	230a      	movs	r3, #10
   d4a24:	fb90 f2f3 	sdiv	r2, r0, r3
   d4a28:	fb02 0313 	mls	r3, r2, r3, r0
   d4a2c:	b90b      	cbnz	r3, d4a32 <loop+0x3e>
   d4a2e:	2303      	movs	r3, #3
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d4a30:	7023      	strb	r3, [r4, #0]
  rtc.loop();                                                                               // keeps the clock up to date
   d4a32:	486c      	ldr	r0, [pc, #432]	; (d4be4 <loop+0x1f0>)
   d4a34:	f001 f83e 	bl	d5ab4 <_ZN8MCP794104loopEv>
  if (watchdogFlag) petWatchdog();                                                          // Watchdog flag is raised - time to pet the watchdog
   d4a38:	4b6b      	ldr	r3, [pc, #428]	; (d4be8 <loop+0x1f4>)
   d4a3a:	781b      	ldrb	r3, [r3, #0]
   d4a3c:	b10b      	cbz	r3, d4a42 <loop+0x4e>
   d4a3e:	f7ff feb1 	bl	d47a4 <_Z11petWatchdogv>
  if (sysStatusWriteNeeded) {
   d4a42:	4c6a      	ldr	r4, [pc, #424]	; (d4bec <loop+0x1f8>)
   d4a44:	7823      	ldrb	r3, [r4, #0]
   d4a46:	b13b      	cbz	r3, d4a58 <loop+0x64>
   d4a48:	2328      	movs	r3, #40	; 0x28
   d4a4a:	4a64      	ldr	r2, [pc, #400]	; (d4bdc <loop+0x1e8>)
   d4a4c:	4868      	ldr	r0, [pc, #416]	; (d4bf0 <loop+0x1fc>)
   d4a4e:	2101      	movs	r1, #1
   d4a50:	f000 fc53 	bl	d52fa <_ZN6MB85RC9writeDataEjPKhj>
    sysStatusWriteNeeded = false;
   d4a54:	2300      	movs	r3, #0
   d4a56:	7023      	strb	r3, [r4, #0]
  if (sensorDataWriteNeeded) {
   d4a58:	4c66      	ldr	r4, [pc, #408]	; (d4bf4 <loop+0x200>)
   d4a5a:	7823      	ldrb	r3, [r4, #0]
   d4a5c:	b13b      	cbz	r3, d4a6e <loop+0x7a>
   d4a5e:	2324      	movs	r3, #36	; 0x24
   d4a60:	4a65      	ldr	r2, [pc, #404]	; (d4bf8 <loop+0x204>)
   d4a62:	4863      	ldr	r0, [pc, #396]	; (d4bf0 <loop+0x1fc>)
   d4a64:	21a0      	movs	r1, #160	; 0xa0
   d4a66:	f000 fc48 	bl	d52fa <_ZN6MB85RC9writeDataEjPKhj>
    sensorDataWriteNeeded = false;
   d4a6a:	2300      	movs	r3, #0
   d4a6c:	7023      	strb	r3, [r4, #0]
  if (constantsStatusWriteNeeded) {
   d4a6e:	4c63      	ldr	r4, [pc, #396]	; (d4bfc <loop+0x208>)
   d4a70:	7823      	ldrb	r3, [r4, #0]
   d4a72:	b13b      	cbz	r3, d4a84 <loop+0x90>
   d4a74:	2330      	movs	r3, #48	; 0x30
   d4a76:	4a62      	ldr	r2, [pc, #392]	; (d4c00 <loop+0x20c>)
   d4a78:	485d      	ldr	r0, [pc, #372]	; (d4bf0 <loop+0x1fc>)
   d4a7a:	21f0      	movs	r1, #240	; 0xf0
   d4a7c:	f000 fc3d 	bl	d52fa <_ZN6MB85RC9writeDataEjPKhj>
      constantsStatusWriteNeeded = false;
   d4a80:	2300      	movs	r3, #0
   d4a82:	7023      	strb	r3, [r4, #0]
}
   d4a84:	b006      	add	sp, #24
   d4a86:	bd70      	pop	{r4, r5, r6, pc}
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4a88:	4b54      	ldr	r3, [pc, #336]	; (d4bdc <loop+0x1e8>)
   d4a8a:	7a5b      	ldrb	r3, [r3, #9]
   d4a8c:	b12b      	cbz	r3, d4a9a <loop+0xa6>
   d4a8e:	4b54      	ldr	r3, [pc, #336]	; (d4be0 <loop+0x1ec>)
   d4a90:	781b      	ldrb	r3, [r3, #0]
   d4a92:	2b03      	cmp	r3, #3
   d4a94:	d001      	beq.n	d4a9a <loop+0xa6>
   d4a96:	f7ff fef7 	bl	d4888 <_Z22publishStateTransitionv>
    if (!takeMeasurements())
   d4a9a:	f7ff ff4d 	bl	d4938 <_Z16takeMeasurementsv>
   d4a9e:	b908      	cbnz	r0, d4aa4 <loop+0xb0>
      state = IDLE_STATE;
   d4aa0:	2302      	movs	r3, #2
   d4aa2:	e7c5      	b.n	d4a30 <loop+0x3c>
      state = REPORTING_STATE;
   d4aa4:	2304      	movs	r3, #4
   d4aa6:	e7c3      	b.n	d4a30 <loop+0x3c>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();               // Reporting - hourly or on command
   d4aa8:	4b4c      	ldr	r3, [pc, #304]	; (d4bdc <loop+0x1e8>)
   d4aaa:	7a5b      	ldrb	r3, [r3, #9]
   d4aac:	b12b      	cbz	r3, d4aba <loop+0xc6>
   d4aae:	4b4c      	ldr	r3, [pc, #304]	; (d4be0 <loop+0x1ec>)
   d4ab0:	781b      	ldrb	r3, [r3, #0]
   d4ab2:	2b04      	cmp	r3, #4
   d4ab4:	d001      	beq.n	d4aba <loop+0xc6>
   d4ab6:	f7ff fee7 	bl	d4888 <_Z22publishStateTransitionv>
   d4aba:	f001 fe7d 	bl	d67b8 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4abe:	4605      	mov	r5, r0
   d4ac0:	b178      	cbz	r0, d4ae2 <loop+0xee>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d4ac2:	f002 ffad 	bl	d7a20 <_ZN9TimeClass4hourEv>
   d4ac6:	280c      	cmp	r0, #12
   d4ac8:	d105      	bne.n	d4ad6 <loop+0xe2>
   d4aca:	f001 fe75 	bl	d67b8 <spark_cloud_flag_connected>
        if (!connected()) {
   d4ace:	b110      	cbz	r0, d4ad6 <loop+0xe2>
        return spark_sync_time(NULL);
   d4ad0:	2000      	movs	r0, #0
   d4ad2:	f001 fe91 	bl	d67f8 <spark_sync_time>
      takeMeasurements();
   d4ad6:	f7ff ff2f 	bl	d4938 <_Z16takeMeasurementsv>
      sendEvent();                                                                          // Send data to Ubidots
   d4ada:	f7ff fe8b 	bl	d47f4 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d4ade:	2305      	movs	r3, #5
   d4ae0:	e7a6      	b.n	d4a30 <loop+0x3c>
      publishQueue.publish("DEBUG- Startup","ERROR FROM REPORTING",PRIVATE);
   d4ae2:	4e48      	ldr	r6, [pc, #288]	; (d4c04 <loop+0x210>)
   d4ae4:	4a48      	ldr	r2, [pc, #288]	; (d4c08 <loop+0x214>)
   d4ae6:	7833      	ldrb	r3, [r6, #0]
   d4ae8:	4948      	ldr	r1, [pc, #288]	; (d4c0c <loop+0x218>)
   d4aea:	f88d 0000 	strb.w	r0, [sp]
   d4aee:	4848      	ldr	r0, [pc, #288]	; (d4c10 <loop+0x21c>)
   d4af0:	f7ff fbf0 	bl	d42d4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4af4:	f001 fe60 	bl	d67b8 <spark_cloud_flag_connected>
      publishQueue.publish("DEBUG- PARTICLE CONNECTED",String(Particle.connected()),PRIVATE);
   d4af8:	220a      	movs	r2, #10
   d4afa:	4601      	mov	r1, r0
   d4afc:	a802      	add	r0, sp, #8
   d4afe:	f002 fd90 	bl	d7622 <_ZN6StringC1Eih>
   d4b02:	7833      	ldrb	r3, [r6, #0]
   d4b04:	9a02      	ldr	r2, [sp, #8]
   d4b06:	4943      	ldr	r1, [pc, #268]	; (d4c14 <loop+0x220>)
   d4b08:	4841      	ldr	r0, [pc, #260]	; (d4c10 <loop+0x21c>)
   d4b0a:	f88d 5000 	strb.w	r5, [sp]
   d4b0e:	f7ff fbe1 	bl	d42d4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4b12:	a802      	add	r0, sp, #8
   d4b14:	f002 fcfa 	bl	d750c <_ZN6StringD1Ev>
      state = ERROR_STATE;
   d4b18:	2301      	movs	r3, #1
   d4b1a:	7023      	strb	r3, [r4, #0]
   d4b1c:	f001 fc66 	bl	d63ec <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4b20:	4b3d      	ldr	r3, [pc, #244]	; (d4c18 <loop+0x224>)
   d4b22:	6018      	str	r0, [r3, #0]
   d4b24:	e785      	b.n	d4a32 <loop+0x3e>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4b26:	4b2d      	ldr	r3, [pc, #180]	; (d4bdc <loop+0x1e8>)
   d4b28:	7a5b      	ldrb	r3, [r3, #9]
   d4b2a:	b12b      	cbz	r3, d4b38 <loop+0x144>
   d4b2c:	4b2c      	ldr	r3, [pc, #176]	; (d4be0 <loop+0x1ec>)
   d4b2e:	781b      	ldrb	r3, [r3, #0]
   d4b30:	2b05      	cmp	r3, #5
   d4b32:	d001      	beq.n	d4b38 <loop+0x144>
   d4b34:	f7ff fea8 	bl	d4888 <_Z22publishStateTransitionv>
    if (!dataInFlight && (Time.now() % wakeBoundary))                                       // Response received back to IDLE state - make sure we don't allow repetivie reporting events
   d4b38:	4b38      	ldr	r3, [pc, #224]	; (d4c1c <loop+0x228>)
   d4b3a:	781b      	ldrb	r3, [r3, #0]
   d4b3c:	b943      	cbnz	r3, d4b50 <loop+0x15c>
   d4b3e:	f002 ff5e 	bl	d79fe <_ZN9TimeClass3nowEv>
   d4b42:	230a      	movs	r3, #10
   d4b44:	fb90 f2f3 	sdiv	r2, r0, r3
   d4b48:	fb02 0313 	mls	r3, r2, r3, r0
   d4b4c:	2b00      	cmp	r3, #0
   d4b4e:	d1a7      	bne.n	d4aa0 <loop+0xac>
   d4b50:	f001 fc4c 	bl	d63ec <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {                                   // If it takes too long - will need to reset
   d4b54:	4b32      	ldr	r3, [pc, #200]	; (d4c20 <loop+0x22c>)
   d4b56:	681b      	ldr	r3, [r3, #0]
   d4b58:	1ac0      	subs	r0, r0, r3
   d4b5a:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d4b5e:	4298      	cmp	r0, r3
   d4b60:	f67f af67 	bls.w	d4a32 <loop+0x3e>
   d4b64:	f001 fc42 	bl	d63ec <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4b68:	4d2b      	ldr	r5, [pc, #172]	; (d4c18 <loop+0x224>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4b6a:	4a2e      	ldr	r2, [pc, #184]	; (d4c24 <loop+0x230>)
      resetTimeStamp = millis();
   d4b6c:	6028      	str	r0, [r5, #0]
   d4b6e:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4b70:	f88d 3000 	strb.w	r3, [sp]
   d4b74:	4b23      	ldr	r3, [pc, #140]	; (d4c04 <loop+0x210>)
   d4b76:	492c      	ldr	r1, [pc, #176]	; (d4c28 <loop+0x234>)
   d4b78:	781b      	ldrb	r3, [r3, #0]
   d4b7a:	4825      	ldr	r0, [pc, #148]	; (d4c10 <loop+0x21c>)
   d4b7c:	f7ff fbaa 	bl	d42d4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      state = ERROR_STATE;                                                                  // Response timed out
   d4b80:	2301      	movs	r3, #1
   d4b82:	7023      	strb	r3, [r4, #0]
   d4b84:	f001 fc32 	bl	d63ec <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4b88:	6028      	str	r0, [r5, #0]
   d4b8a:	e752      	b.n	d4a32 <loop+0x3e>
    if (state != oldState) publishStateTransition();
   d4b8c:	4b14      	ldr	r3, [pc, #80]	; (d4be0 <loop+0x1ec>)
   d4b8e:	781b      	ldrb	r3, [r3, #0]
   d4b90:	2b01      	cmp	r3, #1
   d4b92:	d001      	beq.n	d4b98 <loop+0x1a4>
   d4b94:	f7ff fe78 	bl	d4888 <_Z22publishStateTransitionv>
   d4b98:	f001 fc28 	bl	d63ec <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d4b9c:	4b1e      	ldr	r3, [pc, #120]	; (d4c18 <loop+0x224>)
   d4b9e:	681b      	ldr	r3, [r3, #0]
   d4ba0:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d4ba4:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d4ba8:	4283      	cmp	r3, r0
   d4baa:	f4bf af42 	bcs.w	d4a32 <loop+0x3e>
   d4bae:	f001 fe03 	bl	d67b8 <spark_cloud_flag_connected>
      if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE); // Brodcast Reset Action
   d4bb2:	b148      	cbz	r0, d4bc8 <loop+0x1d4>
   d4bb4:	2300      	movs	r3, #0
   d4bb6:	f88d 3000 	strb.w	r3, [sp]
   d4bba:	4b12      	ldr	r3, [pc, #72]	; (d4c04 <loop+0x210>)
   d4bbc:	4a1b      	ldr	r2, [pc, #108]	; (d4c2c <loop+0x238>)
   d4bbe:	781b      	ldrb	r3, [r3, #0]
   d4bc0:	491b      	ldr	r1, [pc, #108]	; (d4c30 <loop+0x23c>)
   d4bc2:	4813      	ldr	r0, [pc, #76]	; (d4c10 <loop+0x21c>)
   d4bc4:	f7ff fb86 	bl	d42d4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      delay(2000);
   d4bc8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4bcc:	f001 fef4 	bl	d69b8 <delay>
      System.reset();
   d4bd0:	f002 fd9a 	bl	d7708 <_ZN11SystemClass5resetEv>
   d4bd4:	e72d      	b.n	d4a32 <loop+0x3e>
   d4bd6:	bf00      	nop
   d4bd8:	2003e5c5 	.word	0x2003e5c5
   d4bdc:	2003e5c8 	.word	0x2003e5c8
   d4be0:	2003e514 	.word	0x2003e514
   d4be4:	2003e554 	.word	0x2003e554
   d4be8:	2003e5f1 	.word	0x2003e5f1
   d4bec:	2003e5f0 	.word	0x2003e5f0
   d4bf0:	2003e4e8 	.word	0x2003e4e8
   d4bf4:	2003e5c4 	.word	0x2003e5c4
   d4bf8:	2003e5a0 	.word	0x2003e5a0
   d4bfc:	2003e092 	.word	0x2003e092
   d4c00:	2003e570 	.word	0x2003e570
   d4c04:	2003e071 	.word	0x2003e071
   d4c08:	000dae4b 	.word	0x000dae4b
   d4c0c:	000dae60 	.word	0x000dae60
   d4c10:	2003e518 	.word	0x2003e518
   d4c14:	000dae6f 	.word	0x000dae6f
   d4c18:	2003e550 	.word	0x2003e550
   d4c1c:	2003e093 	.word	0x2003e093
   d4c20:	2003e5f4 	.word	0x2003e5f4
   d4c24:	000db45c 	.word	0x000db45c
   d4c28:	000dae89 	.word	0x000dae89
   d4c2c:	000daea2 	.word	0x000daea2
   d4c30:	000daeb6 	.word	0x000daeb6

000d4c34 <_ZN10CloudClass8variableIA13_cJRdEEEbRKT_DpOT0_>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4c34:	2300      	movs	r3, #0
   d4c36:	2209      	movs	r2, #9
   d4c38:	f001 bda6 	b.w	d6788 <spark_variable>

000d4c3c <setup>:
void setup() {
   d4c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d4c40:	2100      	movs	r1, #0
void setup() {
   d4c42:	b09a      	sub	sp, #104	; 0x68
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d4c44:	2008      	movs	r0, #8
   d4c46:	f003 f96f 	bl	d7f28 <pinMode>
  pinMode(donePin,OUTPUT);                                                                  // Allows us to pet the watchdog
   d4c4a:	2101      	movs	r1, #1
   d4c4c:	2005      	movs	r0, #5
   d4c4e:	f003 f96b 	bl	d7f28 <pinMode>
  petWatchdog();                                                                            // Pet the watchdog - This will reset the watchdog time period AND 
   d4c52:	f7ff fda7 	bl	d47a4 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                                          // The watchdog timer will signal us and we have to respond
   d4c56:	2300      	movs	r3, #0
   d4c58:	9300      	str	r3, [sp, #0]
   d4c5a:	2201      	movs	r2, #1
   d4c5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4c60:	49a8      	ldr	r1, [pc, #672]	; (d4f04 <setup+0x2c8>)
   d4c62:	2008      	movs	r0, #8
   d4c64:	f002 fa9e 	bl	d71a4 <_Z15attachInterrupttPFvvE13InterruptModeah>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4c68:	4ba7      	ldr	r3, [pc, #668]	; (d4f08 <setup+0x2cc>)
   d4c6a:	aa0a      	add	r2, sp, #40	; 0x28
   d4c6c:	f103 0510 	add.w	r5, r3, #16
   d4c70:	4617      	mov	r7, r2
   d4c72:	6818      	ldr	r0, [r3, #0]
   d4c74:	6859      	ldr	r1, [r3, #4]
   d4c76:	4614      	mov	r4, r2
   d4c78:	c403      	stmia	r4!, {r0, r1}
   d4c7a:	3308      	adds	r3, #8
   d4c7c:	42ab      	cmp	r3, r5
   d4c7e:	4622      	mov	r2, r4
   d4c80:	d1f7      	bne.n	d4c72 <setup+0x36>
   d4c82:	8819      	ldrh	r1, [r3, #0]
   d4c84:	789b      	ldrb	r3, [r3, #2]
   d4c86:	70a3      	strb	r3, [r4, #2]
   d4c88:	222d      	movs	r2, #45	; 0x2d
   d4c8a:	8021      	strh	r1, [r4, #0]
   d4c8c:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
   d4c90:	2100      	movs	r1, #0
  state = INITIALIZATION_STATE;
   d4c92:	4c9e      	ldr	r4, [pc, #632]	; (d4f0c <setup+0x2d0>)
   d4c94:	4d9e      	ldr	r5, [pc, #632]	; (d4f10 <setup+0x2d4>)
   d4c96:	2600      	movs	r6, #0
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4c98:	f004 f86a 	bl	d8d70 <memset>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d4c9c:	a802      	add	r0, sp, #8
  state = INITIALIZATION_STATE;
   d4c9e:	7026      	strb	r6, [r4, #0]
   d4ca0:	f001 fd92 	bl	d67c8 <spark_deviceID>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d4ca4:	a902      	add	r1, sp, #8
   d4ca6:	a806      	add	r0, sp, #24
   d4ca8:	f002 fc9e 	bl	d75e8 <_ZN6StringC1ERKS_>
  Particle.subscribe(System.deviceID() + "/hook-response/powermonitoring_hook/", UbidotsHandler, MY_DEVICES);
   d4cac:	4999      	ldr	r1, [pc, #612]	; (d4f14 <setup+0x2d8>)
   d4cae:	a806      	add	r0, sp, #24
   d4cb0:	f002 fce1 	bl	d7676 <_ZplRK15StringSumHelperPKc>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d4cb4:	e9cd 6600 	strd	r6, r6, [sp]
   d4cb8:	4997      	ldr	r1, [pc, #604]	; (d4f18 <setup+0x2dc>)
   d4cba:	6800      	ldr	r0, [r0, #0]
   d4cbc:	4633      	mov	r3, r6
   d4cbe:	4632      	mov	r2, r6
   d4cc0:	f001 fd92 	bl	d67e8 <spark_subscribe>
class StringSumHelper : public String
   d4cc4:	a806      	add	r0, sp, #24
   d4cc6:	f002 fc21 	bl	d750c <_ZN6StringD1Ev>
   d4cca:	a802      	add	r0, sp, #8
   d4ccc:	f002 fc1e 	bl	d750c <_ZN6StringD1Ev>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4cd0:	4992      	ldr	r1, [pc, #584]	; (d4f1c <setup+0x2e0>)
   d4cd2:	4893      	ldr	r0, [pc, #588]	; (d4f20 <setup+0x2e4>)
   d4cd4:	4633      	mov	r3, r6
   d4cd6:	2204      	movs	r2, #4
   d4cd8:	f001 fd56 	bl	d6788 <spark_variable>
   d4cdc:	4991      	ldr	r1, [pc, #580]	; (d4f24 <setup+0x2e8>)
   d4cde:	4892      	ldr	r0, [pc, #584]	; (d4f28 <setup+0x2ec>)
   d4ce0:	4633      	mov	r3, r6
   d4ce2:	2204      	movs	r2, #4
   d4ce4:	f001 fd50 	bl	d6788 <spark_variable>
   d4ce8:	4990      	ldr	r1, [pc, #576]	; (d4f2c <setup+0x2f0>)
   d4cea:	4891      	ldr	r0, [pc, #580]	; (d4f30 <setup+0x2f4>)
   d4cec:	4633      	mov	r3, r6
   d4cee:	2204      	movs	r2, #4
   d4cf0:	f001 fd4a 	bl	d6788 <spark_variable>
   d4cf4:	498f      	ldr	r1, [pc, #572]	; (d4f34 <setup+0x2f8>)
   d4cf6:	4890      	ldr	r0, [pc, #576]	; (d4f38 <setup+0x2fc>)
   d4cf8:	4633      	mov	r3, r6
   d4cfa:	2202      	movs	r2, #2
   d4cfc:	f001 fd44 	bl	d6788 <spark_variable>
   d4d00:	4633      	mov	r3, r6
   d4d02:	2201      	movs	r2, #1
   d4d04:	498d      	ldr	r1, [pc, #564]	; (d4f3c <setup+0x300>)
   d4d06:	488e      	ldr	r0, [pc, #568]	; (d4f40 <setup+0x304>)
   d4d08:	f001 fd3e 	bl	d6788 <spark_variable>
  Particle.variable("Constant One", sensorConstants.sensorOneConstant);
   d4d0c:	498d      	ldr	r1, [pc, #564]	; (d4f44 <setup+0x308>)
   d4d0e:	488e      	ldr	r0, [pc, #568]	; (d4f48 <setup+0x30c>)
   d4d10:	f7ff ff90 	bl	d4c34 <_ZN10CloudClass8variableIA13_cJRdEEEbRKT_DpOT0_>
  Particle.variable("Constant Two", sensorConstants.sensorTwoConstant);
   d4d14:	498d      	ldr	r1, [pc, #564]	; (d4f4c <setup+0x310>)
   d4d16:	488e      	ldr	r0, [pc, #568]	; (d4f50 <setup+0x314>)
   d4d18:	f7ff ff8c 	bl	d4c34 <_ZN10CloudClass8variableIA13_cJRdEEEbRKT_DpOT0_>
   d4d1c:	498d      	ldr	r1, [pc, #564]	; (d4f54 <setup+0x318>)
   d4d1e:	488e      	ldr	r0, [pc, #568]	; (d4f58 <setup+0x31c>)
   d4d20:	4633      	mov	r3, r6
   d4d22:	2209      	movs	r2, #9
   d4d24:	f001 fd30 	bl	d6788 <spark_variable>
   d4d28:	498c      	ldr	r1, [pc, #560]	; (d4f5c <setup+0x320>)
   d4d2a:	488d      	ldr	r0, [pc, #564]	; (d4f60 <setup+0x324>)
   d4d2c:	4633      	mov	r3, r6
   d4d2e:	2209      	movs	r2, #9
   d4d30:	f001 fd2a 	bl	d6788 <spark_variable>
   d4d34:	4633      	mov	r3, r6
   d4d36:	2209      	movs	r2, #9
   d4d38:	498a      	ldr	r1, [pc, #552]	; (d4f64 <setup+0x328>)
   d4d3a:	488b      	ldr	r0, [pc, #556]	; (d4f68 <setup+0x32c>)
   d4d3c:	f001 fd24 	bl	d6788 <spark_variable>
  Particle.variable("Constant Six", sensorConstants.sensorSixConstant);
   d4d40:	498a      	ldr	r1, [pc, #552]	; (d4f6c <setup+0x330>)
   d4d42:	488b      	ldr	r0, [pc, #556]	; (d4f70 <setup+0x334>)
   d4d44:	f7ff ff76 	bl	d4c34 <_ZN10CloudClass8variableIA13_cJRdEEEbRKT_DpOT0_>
        return _function(name, args...);
   d4d48:	498a      	ldr	r1, [pc, #552]	; (d4f74 <setup+0x338>)
   d4d4a:	488b      	ldr	r0, [pc, #556]	; (d4f78 <setup+0x33c>)
   d4d4c:	f7ff fa98 	bl	d4280 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4d50:	498a      	ldr	r1, [pc, #552]	; (d4f7c <setup+0x340>)
   d4d52:	488b      	ldr	r0, [pc, #556]	; (d4f80 <setup+0x344>)
   d4d54:	f7ff fa94 	bl	d4280 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4d58:	498a      	ldr	r1, [pc, #552]	; (d4f84 <setup+0x348>)
   d4d5a:	488b      	ldr	r0, [pc, #556]	; (d4f88 <setup+0x34c>)
   d4d5c:	f7ff fa90 	bl	d4280 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4d60:	498a      	ldr	r1, [pc, #552]	; (d4f8c <setup+0x350>)
   d4d62:	4877      	ldr	r0, [pc, #476]	; (d4f40 <setup+0x304>)
   d4d64:	f7ff fa8c 	bl	d4280 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4d68:	4989      	ldr	r1, [pc, #548]	; (d4f90 <setup+0x354>)
   d4d6a:	488a      	ldr	r0, [pc, #552]	; (d4f94 <setup+0x358>)
   d4d6c:	f7ff fa88 	bl	d4280 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4d70:	4989      	ldr	r1, [pc, #548]	; (d4f98 <setup+0x35c>)
   d4d72:	488a      	ldr	r0, [pc, #552]	; (d4f9c <setup+0x360>)
   d4d74:	f7ff fa84 	bl	d4280 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4d78:	4989      	ldr	r1, [pc, #548]	; (d4fa0 <setup+0x364>)
   d4d7a:	488a      	ldr	r0, [pc, #552]	; (d4fa4 <setup+0x368>)
   d4d7c:	f7ff fa80 	bl	d4280 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4d80:	4989      	ldr	r1, [pc, #548]	; (d4fa8 <setup+0x36c>)
   d4d82:	488a      	ldr	r0, [pc, #552]	; (d4fac <setup+0x370>)
   d4d84:	f7ff fa7c 	bl	d4280 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4d88:	4989      	ldr	r1, [pc, #548]	; (d4fb0 <setup+0x374>)
   d4d8a:	488a      	ldr	r0, [pc, #552]	; (d4fb4 <setup+0x378>)
   d4d8c:	f7ff fa78 	bl	d4280 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d4d90:	4989      	ldr	r1, [pc, #548]	; (d4fb8 <setup+0x37c>)
   d4d92:	488a      	ldr	r0, [pc, #552]	; (d4fbc <setup+0x380>)
   d4d94:	f7ff fa74 	bl	d4280 <_ZN10CloudClass9_functionEPKcPFi6StringE>
  rtc.setup();                                                        // Start the real time clock
   d4d98:	4889      	ldr	r0, [pc, #548]	; (d4fc0 <setup+0x384>)
   d4d9a:	f000 fd85 	bl	d58a8 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d4d9e:	4631      	mov	r1, r6
   d4da0:	4887      	ldr	r0, [pc, #540]	; (d4fc0 <setup+0x384>)
   d4da2:	f000 febe 	bl	d5b22 <_ZN8MCP7941010clearAlarmEi>
  fram.begin();                                                                             // Initialize the FRAM module
   d4da6:	4887      	ldr	r0, [pc, #540]	; (d4fc4 <setup+0x388>)
   d4da8:	f000 fa1a 	bl	d51e0 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4dac:	2301      	movs	r3, #1
   d4dae:	4885      	ldr	r0, [pc, #532]	; (d4fc4 <setup+0x388>)
   d4db0:	aa06      	add	r2, sp, #24
   d4db2:	4631      	mov	r1, r6
   d4db4:	f000 fa56 	bl	d5264 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                                                   // Check to see if the memory map in the sketch matches the data on the chip
   d4db8:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d4dbc:	2b05      	cmp	r3, #5
   d4dbe:	d060      	beq.n	d4e82 <setup+0x246>
    fram.erase();                                                                           // Reset the FRAM to correct the issue
   d4dc0:	4880      	ldr	r0, [pc, #512]	; (d4fc4 <setup+0x388>)
   d4dc2:	f000 fa17 	bl	d51f4 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4dc6:	4a80      	ldr	r2, [pc, #512]	; (d4fc8 <setup+0x38c>)
   d4dc8:	487e      	ldr	r0, [pc, #504]	; (d4fc4 <setup+0x388>)
   d4dca:	2304      	movs	r3, #4
   d4dcc:	4631      	mov	r1, r6
   d4dce:	f000 fa94 	bl	d52fa <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4dd2:	2301      	movs	r3, #1
   d4dd4:	487b      	ldr	r0, [pc, #492]	; (d4fc4 <setup+0x388>)
   d4dd6:	aa06      	add	r2, sp, #24
   d4dd8:	4631      	mov	r1, r6
   d4dda:	f000 fa43 	bl	d5264 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;                              // Device will not work without FRAM
   d4dde:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d4de2:	2b05      	cmp	r3, #5
   d4de4:	d04a      	beq.n	d4e7c <setup+0x240>
   d4de6:	2301      	movs	r3, #1
   d4de8:	7023      	strb	r3, [r4, #0]
  emon1.current(CT1_PIN,sensorConstants.sensorOneConstant);
   d4dea:	4e56      	ldr	r6, [pc, #344]	; (d4f44 <setup+0x308>)
  checkSystemValues();                                                                      // Make sure System values are all in valid range
   d4dec:	f7ff fcb0 	bl	d4750 <_Z17checkSystemValuesv>
  emon1.current(CT1_PIN,sensorConstants.sensorOneConstant);
   d4df0:	4b76      	ldr	r3, [pc, #472]	; (d4fcc <setup+0x390>)
   d4df2:	4877      	ldr	r0, [pc, #476]	; (d4fd0 <setup+0x394>)
   d4df4:	7819      	ldrb	r1, [r3, #0]
   d4df6:	ed96 0b00 	vldr	d0, [r6]
   d4dfa:	f001 f9f1 	bl	d61e0 <_ZN13EnergyMonitor7currentEjd>
  emon2.current(CT2_PIN,sensorConstants.sensorTwoConstant);
   d4dfe:	4b75      	ldr	r3, [pc, #468]	; (d4fd4 <setup+0x398>)
   d4e00:	4875      	ldr	r0, [pc, #468]	; (d4fd8 <setup+0x39c>)
   d4e02:	7819      	ldrb	r1, [r3, #0]
   d4e04:	ed96 0b02 	vldr	d0, [r6, #8]
   d4e08:	f001 f9ea 	bl	d61e0 <_ZN13EnergyMonitor7currentEjd>
  emon3.current(CT3_PIN,sensorConstants.sensorThreeConstant);
   d4e0c:	4b73      	ldr	r3, [pc, #460]	; (d4fdc <setup+0x3a0>)
   d4e0e:	4874      	ldr	r0, [pc, #464]	; (d4fe0 <setup+0x3a4>)
   d4e10:	7819      	ldrb	r1, [r3, #0]
   d4e12:	ed96 0b04 	vldr	d0, [r6, #16]
   d4e16:	f001 f9e3 	bl	d61e0 <_ZN13EnergyMonitor7currentEjd>
  emon4.current(CT4_PIN,sensorConstants.sensorFourConstant);
   d4e1a:	4b72      	ldr	r3, [pc, #456]	; (d4fe4 <setup+0x3a8>)
   d4e1c:	4872      	ldr	r0, [pc, #456]	; (d4fe8 <setup+0x3ac>)
   d4e1e:	7819      	ldrb	r1, [r3, #0]
   d4e20:	ed96 0b06 	vldr	d0, [r6, #24]
   d4e24:	f001 f9dc 	bl	d61e0 <_ZN13EnergyMonitor7currentEjd>
  emon5.current(CT5_PIN,sensorConstants.sensorFiveConstant);
   d4e28:	4b70      	ldr	r3, [pc, #448]	; (d4fec <setup+0x3b0>)
   d4e2a:	4871      	ldr	r0, [pc, #452]	; (d4ff0 <setup+0x3b4>)
   d4e2c:	7819      	ldrb	r1, [r3, #0]
   d4e2e:	ed96 0b08 	vldr	d0, [r6, #32]
   d4e32:	f001 f9d5 	bl	d61e0 <_ZN13EnergyMonitor7currentEjd>
  emon6.current(CT6_PIN,sensorConstants.sensorSixConstant);
   d4e36:	4b6f      	ldr	r3, [pc, #444]	; (d4ff4 <setup+0x3b8>)
   d4e38:	486f      	ldr	r0, [pc, #444]	; (d4ff8 <setup+0x3bc>)
   d4e3a:	7819      	ldrb	r1, [r3, #0]
   d4e3c:	ed96 0b0a 	vldr	d0, [r6, #40]	; 0x28
   d4e40:	f001 f9ce 	bl	d61e0 <_ZN13EnergyMonitor7currentEjd>
  if (sysStatus.thirdPartySim) {
   d4e44:	786b      	ldrb	r3, [r5, #1]
   d4e46:	b38b      	cbz	r3, d4eac <setup+0x270>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4e48:	2000      	movs	r0, #0
   d4e4a:	f001 fadf 	bl	d640c <hal_timer_millis>
   d4e4e:	f04f 0a00 	mov.w	sl, #0
   d4e52:	4606      	mov	r6, r0
   d4e54:	2000      	movs	r0, #0
   d4e56:	f001 fad9 	bl	d640c <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4e5a:	ebb0 0806 	subs.w	r8, r0, r6
   d4e5e:	eb61 090a 	sbc.w	r9, r1, sl
        while (_while() && !_condition()) {
   d4e62:	2300      	movs	r3, #0
   d4e64:	f247 522f 	movw	r2, #29999	; 0x752f
   d4e68:	454b      	cmp	r3, r9
   d4e6a:	bf08      	it	eq
   d4e6c:	4542      	cmpeq	r2, r8
   d4e6e:	d30f      	bcc.n	d4e90 <setup+0x254>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4e70:	f001 fca2 	bl	d67b8 <spark_cloud_flag_connected>
   d4e74:	b960      	cbnz	r0, d4e90 <setup+0x254>
            spark_process();
   d4e76:	f001 fc97 	bl	d67a8 <spark_process>
        while (_while() && !_condition()) {
   d4e7a:	e7eb      	b.n	d4e54 <setup+0x218>
      loadSystemDefaults();                                                                 // Out of the box, we need the device to be awake and connected
   d4e7c:	f7ff fc3e 	bl	d46fc <_Z18loadSystemDefaultsv>
   d4e80:	e7b3      	b.n	d4dea <setup+0x1ae>
   d4e82:	2328      	movs	r3, #40	; 0x28
   d4e84:	462a      	mov	r2, r5
   d4e86:	2101      	movs	r1, #1
   d4e88:	484e      	ldr	r0, [pc, #312]	; (d4fc4 <setup+0x388>)
   d4e8a:	f000 f9eb 	bl	d5264 <_ZN6MB85RC8readDataEjPhj>
        return t;
   d4e8e:	e7ac      	b.n	d4dea <setup+0x1ae>
   d4e90:	f001 fc92 	bl	d67b8 <spark_cloud_flag_connected>
    Particle.keepAlive(sysStatus.keepAlive);                                              // Set the keep alive value
   d4e94:	6868      	ldr	r0, [r5, #4]
   d4e96:	f7ff f9f9 	bl	d428c <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d4e9a:	686b      	ldr	r3, [r5, #4]
   d4e9c:	4857      	ldr	r0, [pc, #348]	; (d4ffc <setup+0x3c0>)
   d4e9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4ea2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4ea6:	4359      	muls	r1, r3
   d4ea8:	f7ff fa03 	bl	d42b2 <_ZN5Timer12changePeriodEjj>
  takeMeasurements();                                                                       // For the benefit of monitoring the device
   d4eac:	f7ff fd44 	bl	d4938 <_Z16takeMeasurementsv>
  if(sysStatus.verboseMode) publishQueue.publish("Startup",StartupMessage,PRIVATE);                       // Let Particle know how the startup process went
   d4eb0:	7a6b      	ldrb	r3, [r5, #9]
   d4eb2:	b14b      	cbz	r3, d4ec8 <setup+0x28c>
   d4eb4:	2300      	movs	r3, #0
   d4eb6:	f88d 3000 	strb.w	r3, [sp]
   d4eba:	4b51      	ldr	r3, [pc, #324]	; (d5000 <setup+0x3c4>)
   d4ebc:	4951      	ldr	r1, [pc, #324]	; (d5004 <setup+0x3c8>)
   d4ebe:	781b      	ldrb	r3, [r3, #0]
   d4ec0:	4851      	ldr	r0, [pc, #324]	; (d5008 <setup+0x3cc>)
   d4ec2:	463a      	mov	r2, r7
   d4ec4:	f7ff fa06 	bl	d42d4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4ec8:	f001 fc76 	bl	d67b8 <spark_cloud_flag_connected>
   d4ecc:	b910      	cbnz	r0, d4ed4 <setup+0x298>
            spark_process();
   d4ece:	f001 fc6b 	bl	d67a8 <spark_process>
        while (_while() && !_condition()) {
   d4ed2:	e7f9      	b.n	d4ec8 <setup+0x28c>
   d4ed4:	f001 fc70 	bl	d67b8 <spark_cloud_flag_connected>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;                                    // We made it throughgo let's go to idle
   d4ed8:	7823      	ldrb	r3, [r4, #0]
   d4eda:	b90b      	cbnz	r3, d4ee0 <setup+0x2a4>
   d4edc:	2302      	movs	r3, #2
   d4ede:	7023      	strb	r3, [r4, #0]
   d4ee0:	2300      	movs	r3, #0
  publishQueue.publish("DEBUG- Startup",stateNames[state],PRIVATE);
   d4ee2:	7822      	ldrb	r2, [r4, #0]
   d4ee4:	4949      	ldr	r1, [pc, #292]	; (d500c <setup+0x3d0>)
   d4ee6:	f88d 3000 	strb.w	r3, [sp]
   d4eea:	4b45      	ldr	r3, [pc, #276]	; (d5000 <setup+0x3c4>)
   d4eec:	201a      	movs	r0, #26
   d4eee:	fb00 1202 	mla	r2, r0, r2, r1
   d4ef2:	781b      	ldrb	r3, [r3, #0]
   d4ef4:	4946      	ldr	r1, [pc, #280]	; (d5010 <setup+0x3d4>)
   d4ef6:	4844      	ldr	r0, [pc, #272]	; (d5008 <setup+0x3cc>)
   d4ef8:	f7ff f9ec 	bl	d42d4 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4efc:	b01a      	add	sp, #104	; 0x68
   d4efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4f02:	bf00      	nop
   d4f04:	000d40c9 	.word	0x000d40c9
   d4f08:	000db008 	.word	0x000db008
   d4f0c:	2003e5c5 	.word	0x2003e5c5
   d4f10:	2003e5c8 	.word	0x2003e5c8
   d4f14:	000daebc 	.word	0x000daebc
   d4f18:	000d42f1 	.word	0x000d42f1
   d4f1c:	000db048 	.word	0x000db048
   d4f20:	000daee1 	.word	0x000daee1
   d4f24:	2003e082 	.word	0x2003e082
   d4f28:	000daee9 	.word	0x000daee9
   d4f2c:	2003e072 	.word	0x2003e072
   d4f30:	000daef1 	.word	0x000daef1
   d4f34:	2003e5cc 	.word	0x2003e5cc
   d4f38:	000daf00 	.word	0x000daf00
   d4f3c:	2003e5c9 	.word	0x2003e5c9
   d4f40:	000dac8a 	.word	0x000dac8a
   d4f44:	2003e570 	.word	0x2003e570
   d4f48:	000daf2c 	.word	0x000daf2c
   d4f4c:	2003e578 	.word	0x2003e578
   d4f50:	000daf3d 	.word	0x000daf3d
   d4f54:	2003e580 	.word	0x2003e580
   d4f58:	000daf4e 	.word	0x000daf4e
   d4f5c:	2003e588 	.word	0x2003e588
   d4f60:	000daf61 	.word	0x000daf61
   d4f64:	2003e590 	.word	0x2003e590
   d4f68:	000daf73 	.word	0x000daf73
   d4f6c:	2003e598 	.word	0x2003e598
   d4f70:	000daf85 	.word	0x000daf85
   d4f74:	000d40f1 	.word	0x000d40f1
   d4f78:	000daf0f 	.word	0x000daf0f
   d4f7c:	000d4385 	.word	0x000d4385
   d4f80:	000daf1b 	.word	0x000daf1b
   d4f84:	000d44a1 	.word	0x000d44a1
   d4f88:	000dacc5 	.word	0x000dacc5
   d4f8c:	000d4405 	.word	0x000d4405
   d4f90:	000d451d 	.word	0x000d451d
   d4f94:	000daf28 	.word	0x000daf28
   d4f98:	000d456d 	.word	0x000d456d
   d4f9c:	000daf39 	.word	0x000daf39
   d4fa0:	000d45bd 	.word	0x000d45bd
   d4fa4:	000daf4a 	.word	0x000daf4a
   d4fa8:	000d460d 	.word	0x000d460d
   d4fac:	000daf5d 	.word	0x000daf5d
   d4fb0:	000d465d 	.word	0x000d465d
   d4fb4:	000daf6f 	.word	0x000daf6f
   d4fb8:	000d46ad 	.word	0x000d46ad
   d4fbc:	000daf81 	.word	0x000daf81
   d4fc0:	2003e554 	.word	0x2003e554
   d4fc4:	2003e4e8 	.word	0x2003e4e8
   d4fc8:	000db050 	.word	0x000db050
   d4fcc:	2003ddac 	.word	0x2003ddac
   d4fd0:	2003e098 	.word	0x2003e098
   d4fd4:	2003ddad 	.word	0x2003ddad
   d4fd8:	2003e150 	.word	0x2003e150
   d4fdc:	2003ddae 	.word	0x2003ddae
   d4fe0:	2003e208 	.word	0x2003e208
   d4fe4:	2003ddaf 	.word	0x2003ddaf
   d4fe8:	2003e2c0 	.word	0x2003e2c0
   d4fec:	2003ddb0 	.word	0x2003ddb0
   d4ff0:	2003e378 	.word	0x2003e378
   d4ff4:	2003ddb1 	.word	0x2003ddb1
   d4ff8:	2003e430 	.word	0x2003e430
   d4ffc:	2003e4f8 	.word	0x2003e4f8
   d5000:	2003e071 	.word	0x2003e071
   d5004:	000dae67 	.word	0x000dae67
   d5008:	2003e518 	.word	0x2003e518
   d500c:	2003ddb2 	.word	0x2003ddb2
   d5010:	000dae60 	.word	0x000dae60
   d5014:	00000000 	.word	0x00000000

000d5018 <_GLOBAL__sub_I_SystemMode>:
  }
   d5018:	b5f0      	push	{r4, r5, r6, r7, lr}
        val_(val) {
   d501a:	4b43      	ldr	r3, [pc, #268]	; (d5128 <_GLOBAL__sub_I_SystemMode+0x110>)
              error_(SYSTEM_ERROR_NONE) {
   d501c:	4c43      	ldr	r4, [pc, #268]	; (d512c <_GLOBAL__sub_I_SystemMode+0x114>)
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d501e:	4e44      	ldr	r6, [pc, #272]	; (d5130 <_GLOBAL__sub_I_SystemMode+0x118>)
   d5020:	2701      	movs	r7, #1
   d5022:	701f      	strb	r7, [r3, #0]
   d5024:	4b43      	ldr	r3, [pc, #268]	; (d5134 <_GLOBAL__sub_I_SystemMode+0x11c>)
   d5026:	2202      	movs	r2, #2
   d5028:	2500      	movs	r5, #0
   d502a:	701a      	strb	r2, [r3, #0]
    SleepResult() {}
   d502c:	4b42      	ldr	r3, [pc, #264]	; (d5138 <_GLOBAL__sub_I_SystemMode+0x120>)
   d502e:	60a3      	str	r3, [r4, #8]
  }
   d5030:	b089      	sub	sp, #36	; 0x24
              error_(SYSTEM_ERROR_NONE) {
   d5032:	6025      	str	r5, [r4, #0]
   d5034:	80a5      	strh	r5, [r4, #4]
    SleepResult() {}
   d5036:	71a5      	strb	r5, [r4, #6]
        set_system_mode(mode);
   d5038:	4638      	mov	r0, r7
   d503a:	f001 fb4f 	bl	d66dc <set_system_mode>
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d503e:	4632      	mov	r2, r6
   d5040:	493e      	ldr	r1, [pc, #248]	; (d513c <_GLOBAL__sub_I_SystemMode+0x124>)
   d5042:	4620      	mov	r0, r4
   d5044:	f002 fff2 	bl	d802c <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   d5048:	4629      	mov	r1, r5
   d504a:	4638      	mov	r0, r7
   d504c:	f001 fb56 	bl	d66fc <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d5050:	4639      	mov	r1, r7
   d5052:	2004      	movs	r0, #4
   d5054:	f001 f9aa 	bl	d63ac <HAL_Feature_Set>
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   d5058:	f002 ffc0 	bl	d7fdc <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d505c:	4c38      	ldr	r4, [pc, #224]	; (d5140 <_GLOBAL__sub_I_SystemMode+0x128>)
   d505e:	4601      	mov	r1, r0
   d5060:	462b      	mov	r3, r5
   d5062:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5066:	4620      	mov	r0, r4
   d5068:	f000 f8b0 	bl	d51cc <_ZN6MB85RCC1ER7TwoWireji>
   d506c:	4b35      	ldr	r3, [pc, #212]	; (d5144 <_GLOBAL__sub_I_SystemMode+0x12c>)
   d506e:	6023      	str	r3, [r4, #0]
   d5070:	4632      	mov	r2, r6
   d5072:	4935      	ldr	r1, [pc, #212]	; (d5148 <_GLOBAL__sub_I_SystemMode+0x130>)
   d5074:	4620      	mov	r0, r4
   d5076:	f002 ffd9 	bl	d802c <__aeabi_atexit>
MCP79410 rtc;                                                                               // Rickkas MCP79410 libarary
   d507a:	f002 ffaf 	bl	d7fdc <_Z19__fetch_global_Wirev>
   d507e:	4c33      	ldr	r4, [pc, #204]	; (d514c <_GLOBAL__sub_I_SystemMode+0x134>)
   d5080:	4601      	mov	r1, r0
   d5082:	4620      	mov	r0, r4
   d5084:	f000 fb18 	bl	d56b8 <_ZN8MCP79410C1ER7TwoWire>
   d5088:	4620      	mov	r0, r4
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d508a:	4c31      	ldr	r4, [pc, #196]	; (d5150 <_GLOBAL__sub_I_SystemMode+0x138>)
   d508c:	4931      	ldr	r1, [pc, #196]	; (d5154 <_GLOBAL__sub_I_SystemMode+0x13c>)
   d508e:	4632      	mov	r2, r6
   d5090:	f002 ffcc 	bl	d802c <__aeabi_atexit>
   d5094:	4930      	ldr	r1, [pc, #192]	; (d5158 <_GLOBAL__sub_I_SystemMode+0x140>)
   d5096:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d509a:	4620      	mov	r0, r4
   d509c:	f000 ff82 	bl	d5fa4 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d50a0:	4b2e      	ldr	r3, [pc, #184]	; (d515c <_GLOBAL__sub_I_SystemMode+0x144>)
   d50a2:	6023      	str	r3, [r4, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d50a4:	4632      	mov	r2, r6
   d50a6:	492e      	ldr	r1, [pc, #184]	; (d5160 <_GLOBAL__sub_I_SystemMode+0x148>)
   d50a8:	4620      	mov	r0, r4
   d50aa:	f002 ffbf 	bl	d802c <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d50ae:	4b2d      	ldr	r3, [pc, #180]	; (d5164 <_GLOBAL__sub_I_SystemMode+0x14c>)
   d50b0:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d50b2:	af04      	add	r7, sp, #16
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d50b4:	4c2c      	ldr	r4, [pc, #176]	; (d5168 <_GLOBAL__sub_I_SystemMode+0x150>)
   d50b6:	4b2d      	ldr	r3, [pc, #180]	; (d516c <_GLOBAL__sub_I_SystemMode+0x154>)
   d50b8:	6023      	str	r3, [r4, #0]
   d50ba:	e897 0003 	ldmia.w	r7, {r0, r1}
   d50be:	aa02      	add	r2, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d50c0:	f104 030c 	add.w	r3, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d50c4:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d50c8:	e893 0003 	ldmia.w	r3, {r0, r1}
   d50cc:	e887 0003 	stmia.w	r7, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d50d0:	e892 0003 	ldmia.w	r2, {r0, r1}
   d50d4:	e883 0003 	stmia.w	r3, {r0, r1}
   d50d8:	4b25      	ldr	r3, [pc, #148]	; (d5170 <_GLOBAL__sub_I_SystemMode+0x158>)
   d50da:	6163      	str	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d50dc:	69a3      	ldr	r3, [r4, #24]
   d50de:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d50e0:	4b24      	ldr	r3, [pc, #144]	; (d5174 <_GLOBAL__sub_I_SystemMode+0x15c>)
   d50e2:	61a3      	str	r3, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d50e4:	4a24      	ldr	r2, [pc, #144]	; (d5178 <_GLOBAL__sub_I_SystemMode+0x160>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d50e6:	7125      	strb	r5, [r4, #4]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d50e8:	4623      	mov	r3, r4
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d50ea:	60a5      	str	r5, [r4, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d50ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d50f0:	e9cd 5500 	strd	r5, r5, [sp]
   d50f4:	f104 0008 	add.w	r0, r4, #8
      __a = _GLIBCXX_MOVE(__b);
   d50f8:	9506      	str	r5, [sp, #24]
   d50fa:	f001 f8ff 	bl	d62fc <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d50fe:	4638      	mov	r0, r7
   d5100:	f7ff f880 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
Timer keepAliveTimer(1000, keepAliveMessage);
   d5104:	491d      	ldr	r1, [pc, #116]	; (d517c <_GLOBAL__sub_I_SystemMode+0x164>)
   d5106:	4632      	mov	r2, r6
   d5108:	4620      	mov	r0, r4
   d510a:	f002 ff8f 	bl	d802c <__aeabi_atexit>
struct sensor_constants{
   d510e:	a104      	add	r1, pc, #16	; (adr r1, d5120 <_GLOBAL__sub_I_SystemMode+0x108>)
   d5110:	e9d1 0100 	ldrd	r0, r1, [r1]
   d5114:	4b1a      	ldr	r3, [pc, #104]	; (d5180 <_GLOBAL__sub_I_SystemMode+0x168>)
   d5116:	e9c3 0100 	strd	r0, r1, [r3]
  }
   d511a:	b009      	add	sp, #36	; 0x24
   d511c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d511e:	bf00      	nop
   d5120:	70a3d70a 	.word	0x70a3d70a
   d5124:	4056ba3d 	.word	0x4056ba3d
   d5128:	2003e071 	.word	0x2003e071
   d512c:	2003e064 	.word	0x2003e064
   d5130:	2003e060 	.word	0x2003e060
   d5134:	2003e070 	.word	0x2003e070
   d5138:	ffff0000 	.word	0xffff0000
   d513c:	000d41a3 	.word	0x000d41a3
   d5140:	2003e4e8 	.word	0x2003e4e8
   d5144:	000dafd8 	.word	0x000dafd8
   d5148:	000d4141 	.word	0x000d4141
   d514c:	2003e554 	.word	0x2003e554
   d5150:	2003e518 	.word	0x2003e518
   d5154:	000d5443 	.word	0x000d5443
   d5158:	2003f400 	.word	0x2003f400
   d515c:	000dafb0 	.word	0x000dafb0
   d5160:	000d4119 	.word	0x000d4119
   d5164:	000d41b5 	.word	0x000d41b5
   d5168:	2003e4f8 	.word	0x2003e4f8
   d516c:	000daf9c 	.word	0x000daf9c
   d5170:	000d40d9 	.word	0x000d40d9
   d5174:	000d40d5 	.word	0x000d40d5
   d5178:	000d4169 	.word	0x000d4169
   d517c:	000d4219 	.word	0x000d4219
   d5180:	2003e570 	.word	0x2003e570

000d5184 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d5184:	4770      	bx	lr

000d5186 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d5186:	b510      	push	{r4, lr}
}
   d5188:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d518a:	4604      	mov	r4, r0
}
   d518c:	f002 ff53 	bl	d8036 <_ZdlPvj>
   d5190:	4620      	mov	r0, r4
   d5192:	bd10      	pop	{r4, pc}

000d5194 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d5194:	6803      	ldr	r3, [r0, #0]
   d5196:	b2c9      	uxtb	r1, r1
   d5198:	689b      	ldr	r3, [r3, #8]
   d519a:	4718      	bx	r3

000d519c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d519c:	b40e      	push	{r1, r2, r3}
   d519e:	b510      	push	{r4, lr}
   d51a0:	b08d      	sub	sp, #52	; 0x34
   d51a2:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d51a4:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d51a6:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d51aa:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d51ac:	2300      	movs	r3, #0
   d51ae:	2020      	movs	r0, #32
   d51b0:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d51b4:	e9cd 4200 	strd	r4, r2, [sp]
   d51b8:	201e      	movs	r0, #30
   d51ba:	aa04      	add	r2, sp, #16
   d51bc:	f001 fa7e 	bl	d66bc <log_message_v>
}
   d51c0:	b00d      	add	sp, #52	; 0x34
   d51c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d51c6:	b003      	add	sp, #12
   d51c8:	4770      	bx	lr
	...

000d51cc <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d51cc:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d51ce:	4d03      	ldr	r5, [pc, #12]	; (d51dc <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d51d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d51d4:	e9c0 5100 	strd	r5, r1, [r0]
}
   d51d8:	bd30      	pop	{r4, r5, pc}
   d51da:	bf00      	nop
   d51dc:	000db088 	.word	0x000db088

000d51e0 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d51e0:	6840      	ldr	r0, [r0, #4]
   d51e2:	f001 bf91 	b.w	d7108 <_ZN7TwoWire5beginEv>

000d51e6 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d51e6:	b510      	push	{r4, lr}
   d51e8:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d51ea:	6800      	ldr	r0, [r0, #0]
   d51ec:	f001 ffcf 	bl	d718e <_ZN7TwoWire6unlockEv>
   d51f0:	4620      	mov	r0, r4
   d51f2:	bd10      	pop	{r4, pc}

000d51f4 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d51f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d51f8:	b08a      	sub	sp, #40	; 0x28
   d51fa:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d51fc:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d51fe:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5200:	f001 ffbc 	bl	d717c <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5204:	221e      	movs	r2, #30
   d5206:	2100      	movs	r1, #0
   d5208:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d520a:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d520c:	f003 fdb0 	bl	d8d70 <memset>
		size_t framAddr = 0;
   d5210:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d5212:	b1ef      	cbz	r7, d5250 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d5214:	6823      	ldr	r3, [r4, #0]
   d5216:	2f1e      	cmp	r7, #30
   d5218:	46b8      	mov	r8, r7
   d521a:	bf28      	it	cs
   d521c:	f04f 081e 	movcs.w	r8, #30
   d5220:	68dd      	ldr	r5, [r3, #12]
   d5222:	aa02      	add	r2, sp, #8
   d5224:	4643      	mov	r3, r8
   d5226:	4631      	mov	r1, r6
   d5228:	4620      	mov	r0, r4
   d522a:	47a8      	blx	r5
			if (!result) {
   d522c:	4605      	mov	r5, r0
   d522e:	b958      	cbnz	r0, d5248 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d5230:	480a      	ldr	r0, [pc, #40]	; (d525c <_ZN6MB85RC5eraseEv+0x68>)
   d5232:	490b      	ldr	r1, [pc, #44]	; (d5260 <_ZN6MB85RC5eraseEv+0x6c>)
   d5234:	4632      	mov	r2, r6
   d5236:	f7ff ffb1 	bl	d519c <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d523a:	a801      	add	r0, sp, #4
   d523c:	f7ff ffd3 	bl	d51e6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d5240:	4628      	mov	r0, r5
   d5242:	b00a      	add	sp, #40	; 0x28
   d5244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d5248:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d524c:	4446      	add	r6, r8
		while(totalLen > 0) {
   d524e:	e7e0      	b.n	d5212 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d5250:	a801      	add	r0, sp, #4
   d5252:	f7ff ffc8 	bl	d51e6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d5256:	2501      	movs	r5, #1
   d5258:	e7f2      	b.n	d5240 <_ZN6MB85RC5eraseEv+0x4c>
   d525a:	bf00      	nop
   d525c:	2003e60c 	.word	0x2003e60c
   d5260:	000db054 	.word	0x000db054

000d5264 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5264:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5268:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d526a:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d526c:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d526e:	460d      	mov	r5, r1
   d5270:	4616      	mov	r6, r2
   d5272:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d5274:	f001 ff82 	bl	d717c <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d5278:	b1a7      	cbz	r7, d52a4 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d527a:	68e1      	ldr	r1, [r4, #12]
   d527c:	6860      	ldr	r0, [r4, #4]
   d527e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5282:	f001 ff74 	bl	d716e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5286:	0a29      	lsrs	r1, r5, #8
   d5288:	6860      	ldr	r0, [r4, #4]
   d528a:	f7ff ff83 	bl	d5194 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d528e:	4629      	mov	r1, r5
   d5290:	6860      	ldr	r0, [r4, #4]
   d5292:	f7ff ff7f 	bl	d5194 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d5296:	6860      	ldr	r0, [r4, #4]
   d5298:	2100      	movs	r1, #0
   d529a:	f001 ff6b 	bl	d7174 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d529e:	b148      	cbz	r0, d52b4 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d52a0:	2400      	movs	r4, #0
   d52a2:	e000      	b.n	d52a6 <_ZN6MB85RC8readDataEjPhj+0x42>
   d52a4:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d52a6:	a801      	add	r0, sp, #4
   d52a8:	f7ff ff9d 	bl	d51e6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d52ac:	4620      	mov	r0, r4
   d52ae:	b003      	add	sp, #12
   d52b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d52b4:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d52b6:	7b21      	ldrb	r1, [r4, #12]
   d52b8:	6860      	ldr	r0, [r4, #4]
   d52ba:	46b8      	mov	r8, r7
   d52bc:	bf28      	it	cs
   d52be:	f04f 0820 	movcs.w	r8, #32
   d52c2:	2301      	movs	r3, #1
   d52c4:	4642      	mov	r2, r8
   d52c6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d52ca:	f001 ff3a 	bl	d7142 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d52ce:	f002 fe85 	bl	d7fdc <_Z19__fetch_global_Wirev>
   d52d2:	6803      	ldr	r3, [r0, #0]
   d52d4:	691b      	ldr	r3, [r3, #16]
   d52d6:	4798      	blx	r3
   d52d8:	4540      	cmp	r0, r8
   d52da:	dbe1      	blt.n	d52a0 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d52dc:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d52e0:	f002 fe7c 	bl	d7fdc <_Z19__fetch_global_Wirev>
   d52e4:	6803      	ldr	r3, [r0, #0]
   d52e6:	695b      	ldr	r3, [r3, #20]
   d52e8:	4798      	blx	r3
   d52ea:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d52ee:	454e      	cmp	r6, r9
   d52f0:	d1f6      	bne.n	d52e0 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d52f2:	4445      	add	r5, r8
   d52f4:	eba7 0708 	sub.w	r7, r7, r8
   d52f8:	e7be      	b.n	d5278 <_ZN6MB85RC8readDataEjPhj+0x14>

000d52fa <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d52fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d52fe:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5300:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5302:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5304:	460e      	mov	r6, r1
   d5306:	4690      	mov	r8, r2
   d5308:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d530a:	f001 ff37 	bl	d717c <_ZN7TwoWire4lockEv>
   d530e:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d5312:	f1b9 0f00 	cmp.w	r9, #0
   d5316:	d02a      	beq.n	d536e <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d5318:	b34d      	cbz	r5, d536e <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d531a:	68e1      	ldr	r1, [r4, #12]
   d531c:	6860      	ldr	r0, [r4, #4]
   d531e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5322:	f001 ff24 	bl	d716e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5326:	0a31      	lsrs	r1, r6, #8
   d5328:	6860      	ldr	r0, [r4, #4]
   d532a:	f7ff ff33 	bl	d5194 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d532e:	6860      	ldr	r0, [r4, #4]
   d5330:	4631      	mov	r1, r6
   d5332:	f7ff ff2f 	bl	d5194 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5336:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d533a:	4647      	mov	r7, r8
   d533c:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d5340:	6860      	ldr	r0, [r4, #4]
   d5342:	f817 1b01 	ldrb.w	r1, [r7], #1
   d5346:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d5348:	3d01      	subs	r5, #1
				wire.write(*data);
   d534a:	689b      	ldr	r3, [r3, #8]
   d534c:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d534e:	4555      	cmp	r5, sl
   d5350:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d5354:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5356:	d001      	beq.n	d535c <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d5358:	2d00      	cmp	r5, #0
   d535a:	d1f1      	bne.n	d5340 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d535c:	6860      	ldr	r0, [r4, #4]
   d535e:	2101      	movs	r1, #1
   d5360:	f001 ff08 	bl	d7174 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5364:	2800      	cmp	r0, #0
   d5366:	d0d7      	beq.n	d5318 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d5368:	f04f 0900 	mov.w	r9, #0
   d536c:	e7d1      	b.n	d5312 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d536e:	a801      	add	r0, sp, #4
   d5370:	f7ff ff39 	bl	d51e6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d5374:	4648      	mov	r0, r9
   d5376:	b003      	add	sp, #12
   d5378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d537c <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d537c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5380:	b08b      	sub	sp, #44	; 0x2c
   d5382:	460e      	mov	r6, r1
   d5384:	4615      	mov	r5, r2
   d5386:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5388:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d538a:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d538c:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d538e:	f001 fef5 	bl	d717c <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d5392:	42ae      	cmp	r6, r5
   d5394:	d229      	bcs.n	d53ea <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d5396:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d5398:	4425      	add	r5, r4
			while(numBytes > 0) {
   d539a:	b18c      	cbz	r4, d53c0 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d539c:	2c1e      	cmp	r4, #30
   d539e:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d53a0:	f8d8 3000 	ldr.w	r3, [r8]
   d53a4:	bf28      	it	cs
   d53a6:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d53a8:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d53aa:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d53ae:	aa02      	add	r2, sp, #8
   d53b0:	463b      	mov	r3, r7
   d53b2:	4631      	mov	r1, r6
   d53b4:	4640      	mov	r0, r8
				framAddrTo -= count;
   d53b6:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d53b8:	47c8      	blx	r9
				if (!result) {
   d53ba:	b948      	cbnz	r0, d53d0 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d53bc:	2400      	movs	r4, #0
   d53be:	e000      	b.n	d53c2 <_ZN6MB85RC8moveDataEjjj+0x46>
   d53c0:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d53c2:	a801      	add	r0, sp, #4
   d53c4:	f7ff ff0f 	bl	d51e6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d53c8:	4620      	mov	r0, r4
   d53ca:	b00b      	add	sp, #44	; 0x2c
   d53cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d53d0:	f8d8 3000 	ldr.w	r3, [r8]
   d53d4:	aa02      	add	r2, sp, #8
   d53d6:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d53da:	4629      	mov	r1, r5
   d53dc:	463b      	mov	r3, r7
   d53de:	4640      	mov	r0, r8
   d53e0:	47c8      	blx	r9
				if (!result) {
   d53e2:	2800      	cmp	r0, #0
   d53e4:	d0ea      	beq.n	d53bc <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d53e6:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d53e8:	e7d7      	b.n	d539a <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d53ea:	d9e9      	bls.n	d53c0 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d53ec:	2c00      	cmp	r4, #0
   d53ee:	d0e7      	beq.n	d53c0 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d53f0:	f8d8 3000 	ldr.w	r3, [r8]
   d53f4:	2c1e      	cmp	r4, #30
   d53f6:	4627      	mov	r7, r4
   d53f8:	bf28      	it	cs
   d53fa:	271e      	movcs	r7, #30
   d53fc:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5400:	aa02      	add	r2, sp, #8
   d5402:	463b      	mov	r3, r7
   d5404:	4631      	mov	r1, r6
   d5406:	4640      	mov	r0, r8
   d5408:	47c8      	blx	r9
				if (!result) {
   d540a:	2800      	cmp	r0, #0
   d540c:	d0d6      	beq.n	d53bc <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d540e:	f8d8 3000 	ldr.w	r3, [r8]
   d5412:	aa02      	add	r2, sp, #8
   d5414:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5418:	4629      	mov	r1, r5
   d541a:	463b      	mov	r3, r7
   d541c:	4640      	mov	r0, r8
   d541e:	47c8      	blx	r9
				if (!result) {
   d5420:	2800      	cmp	r0, #0
   d5422:	d0cb      	beq.n	d53bc <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d5424:	443e      	add	r6, r7
				framAddrTo += count;
   d5426:	443d      	add	r5, r7
				numBytes -= count;
   d5428:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d542a:	e7df      	b.n	d53ec <_ZN6MB85RC8moveDataEjjj+0x70>

000d542c <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d542c:	2040      	movs	r0, #64	; 0x40
   d542e:	4770      	bx	lr

000d5430 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d5430:	2000      	movs	r0, #0
   d5432:	4770      	bx	lr

000d5434 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d5434:	2080      	movs	r0, #128	; 0x80
   d5436:	4770      	bx	lr

000d5438 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d5438:	20ff      	movs	r0, #255	; 0xff
   d543a:	4770      	bx	lr

000d543c <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d543c:	4770      	bx	lr

000d543e <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d543e:	4770      	bx	lr

000d5440 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d5440:	4770      	bx	lr

000d5442 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d5442:	4770      	bx	lr

000d5444 <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d5444:	b510      	push	{r4, lr}
}
   d5446:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d5448:	4604      	mov	r4, r0
}
   d544a:	f002 fdf4 	bl	d8036 <_ZdlPvj>
   d544e:	4620      	mov	r0, r4
   d5450:	bd10      	pop	{r4, pc}

000d5452 <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d5452:	b510      	push	{r4, lr}
}
   d5454:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d5456:	4604      	mov	r4, r0
}
   d5458:	f002 fded 	bl	d8036 <_ZdlPvj>
   d545c:	4620      	mov	r0, r4
   d545e:	bd10      	pop	{r4, pc}

000d5460 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d5460:	b510      	push	{r4, lr}
}
   d5462:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d5464:	4604      	mov	r4, r0
}
   d5466:	f002 fde6 	bl	d8036 <_ZdlPvj>
   d546a:	4620      	mov	r0, r4
   d546c:	bd10      	pop	{r4, pc}

000d546e <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d546e:	b510      	push	{r4, lr}
}
   d5470:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d5472:	4604      	mov	r4, r0
}
   d5474:	f002 fddf 	bl	d8036 <_ZdlPvj>
   d5478:	4620      	mov	r0, r4
   d547a:	bd10      	pop	{r4, pc}

000d547c <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d547c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d5480:	6803      	ldr	r3, [r0, #0]
   d5482:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d5484:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d5486:	4798      	blx	r3
   d5488:	2210      	movs	r2, #16
   d548a:	4601      	mov	r1, r0
   d548c:	4668      	mov	r0, sp
   d548e:	f003 fc6f 	bl	d8d70 <memset>
	size_t len = length();
   d5492:	6823      	ldr	r3, [r4, #0]
   d5494:	4620      	mov	r0, r4
   d5496:	689b      	ldr	r3, [r3, #8]
   d5498:	4798      	blx	r3
	size_t offset = 0;
   d549a:	2500      	movs	r5, #0
	size_t len = length();
   d549c:	4607      	mov	r7, r0
	bool bResult = false;
   d549e:	4628      	mov	r0, r5
	while(offset < len) {
   d54a0:	42bd      	cmp	r5, r7
   d54a2:	d20e      	bcs.n	d54c2 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d54a4:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d54a6:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d54a8:	2e10      	cmp	r6, #16
   d54aa:	bf28      	it	cs
   d54ac:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d54ae:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d54b2:	466a      	mov	r2, sp
   d54b4:	4633      	mov	r3, r6
   d54b6:	4629      	mov	r1, r5
   d54b8:	4620      	mov	r0, r4
   d54ba:	47c0      	blx	r8
		if (!bResult) {
   d54bc:	b108      	cbz	r0, d54c2 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d54be:	4435      	add	r5, r6
	while(offset < len) {
   d54c0:	e7ee      	b.n	d54a0 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d54c2:	b004      	add	sp, #16
   d54c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d54c8 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d54c8:	f44f 7380 	mov.w	r3, #256	; 0x100
   d54cc:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d54ce:	f240 1301 	movw	r3, #257	; 0x101
   d54d2:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d54d4:	2300      	movs	r3, #0
   d54d6:	8203      	strh	r3, [r0, #16]
}
   d54d8:	4770      	bx	lr
	...

000d54dc <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d54dc:	b508      	push	{r3, lr}
   d54de:	4b06      	ldr	r3, [pc, #24]	; (d54f8 <_ZN12MCP79410TimeC1Ev+0x1c>)
   d54e0:	6003      	str	r3, [r0, #0]
   d54e2:	4b06      	ldr	r3, [pc, #24]	; (d54fc <_ZN12MCP79410TimeC1Ev+0x20>)
   d54e4:	6043      	str	r3, [r0, #4]
   d54e6:	f240 7304 	movw	r3, #1796	; 0x704
   d54ea:	8103      	strh	r3, [r0, #8]
   d54ec:	2300      	movs	r3, #0
   d54ee:	7443      	strb	r3, [r0, #17]
	clear();
   d54f0:	f7ff ffea 	bl	d54c8 <_ZN12MCP79410Time5clearEv>
}
   d54f4:	bd08      	pop	{r3, pc}
   d54f6:	bf00      	nop
   d54f8:	000db168 	.word	0x000db168
   d54fc:	03020100 	.word	0x03020100

000d5500 <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5500:	0903      	lsrs	r3, r0, #4
}
   d5502:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5504:	f000 000f 	and.w	r0, r0, #15
}
   d5508:	fb02 0003 	mla	r0, r2, r3, r0
   d550c:	4770      	bx	lr

000d550e <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d550e:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d5510:	7a80      	ldrb	r0, [r0, #10]
   d5512:	f7ff fff5 	bl	d5500 <_ZN12MCP79410Time8bcdToIntEh>
}
   d5516:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d551a:	bd08      	pop	{r3, pc}

000d551c <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d551c:	7ac0      	ldrb	r0, [r0, #11]
   d551e:	f000 001f 	and.w	r0, r0, #31
   d5522:	f7ff bfed 	b.w	d5500 <_ZN12MCP79410Time8bcdToIntEh>

000d5526 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d5526:	7b00      	ldrb	r0, [r0, #12]
   d5528:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d552c:	f7ff bfe8 	b.w	d5500 <_ZN12MCP79410Time8bcdToIntEh>

000d5530 <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d5530:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d5532:	7b81      	ldrb	r1, [r0, #14]
   d5534:	064a      	lsls	r2, r1, #25
   d5536:	d50d      	bpl.n	d5554 <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d5538:	f001 001f 	and.w	r0, r1, #31
   d553c:	f7ff ffe0 	bl	d5500 <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d5540:	068b      	lsls	r3, r1, #26
   d5542:	d503      	bpl.n	d554c <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d5544:	280c      	cmp	r0, #12
   d5546:	d000      	beq.n	d554a <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d5548:	300c      	adds	r0, #12
}
   d554a:	bd08      	pop	{r3, pc}
				return 0;
   d554c:	280c      	cmp	r0, #12
   d554e:	bf08      	it	eq
   d5550:	2000      	moveq	r0, #0
   d5552:	e7fa      	b.n	d554a <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d5554:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d5558:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d555c:	f7ff bfd0 	b.w	d5500 <_ZN12MCP79410Time8bcdToIntEh>

000d5560 <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d5560:	7bc0      	ldrb	r0, [r0, #15]
   d5562:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5566:	f7ff bfcb 	b.w	d5500 <_ZN12MCP79410Time8bcdToIntEh>

000d556a <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d556a:	7c00      	ldrb	r0, [r0, #16]
   d556c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5570:	f7ff bfc6 	b.w	d5500 <_ZN12MCP79410Time8bcdToIntEh>

000d5574 <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d5574:	b510      	push	{r4, lr}
   d5576:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d5578:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d557a:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d557c:	2100      	movs	r1, #0
   d557e:	a801      	add	r0, sp, #4
   d5580:	f003 fbf6 	bl	d8d70 <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d5584:	4620      	mov	r0, r4
   d5586:	f7ff ffc2 	bl	d550e <_ZNK12MCP79410Time7getYearEv>
   d558a:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d558e:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d5590:	4620      	mov	r0, r4
   d5592:	f7ff ffc3 	bl	d551c <_ZNK12MCP79410Time8getMonthEv>
   d5596:	3801      	subs	r0, #1
   d5598:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d559a:	4620      	mov	r0, r4
   d559c:	f7ff ffc3 	bl	d5526 <_ZNK12MCP79410Time13getDayOfMonthEv>
   d55a0:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d55a2:	4620      	mov	r0, r4
   d55a4:	f7ff ffc4 	bl	d5530 <_ZNK12MCP79410Time7getHourEv>
   d55a8:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d55aa:	4620      	mov	r0, r4
   d55ac:	f7ff ffd8 	bl	d5560 <_ZNK12MCP79410Time9getMinuteEv>
   d55b0:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d55b2:	4620      	mov	r0, r4
   d55b4:	f7ff ffd9 	bl	d556a <_ZNK12MCP79410Time9getSecondEv>
   d55b8:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d55ba:	a801      	add	r0, sp, #4
   d55bc:	f001 f9f4 	bl	d69a8 <mktime>
}
   d55c0:	b00a      	add	sp, #40	; 0x28
   d55c2:	bd10      	pop	{r4, pc}

000d55c4 <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d55c4:	210a      	movs	r1, #10
   d55c6:	fb90 f2f1 	sdiv	r2, r0, r1
   d55ca:	fb92 f3f1 	sdiv	r3, r2, r1
   d55ce:	fb01 2313 	mls	r3, r1, r3, r2
   d55d2:	011b      	lsls	r3, r3, #4
   d55d4:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d55d6:	fb01 0012 	mls	r0, r1, r2, r0
   d55da:	4318      	orrs	r0, r3
}
   d55dc:	b2c0      	uxtb	r0, r0
   d55de:	4770      	bx	lr

000d55e0 <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d55e0:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d55e2:	b510      	push	{r4, lr}
   d55e4:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d55e6:	fb91 f0f3 	sdiv	r0, r1, r3
   d55ea:	fb00 1013 	mls	r0, r0, r3, r1
   d55ee:	f7ff ffe9 	bl	d55c4 <_ZN12MCP79410Time8intToBcdEi>
   d55f2:	72a0      	strb	r0, [r4, #10]
}
   d55f4:	bd10      	pop	{r4, pc}

000d55f6 <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d55f6:	b510      	push	{r4, lr}
   d55f8:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d55fa:	4608      	mov	r0, r1
   d55fc:	f7ff ffe2 	bl	d55c4 <_ZN12MCP79410Time8intToBcdEi>
   d5600:	72e0      	strb	r0, [r4, #11]
}
   d5602:	bd10      	pop	{r4, pc}

000d5604 <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d5604:	b510      	push	{r4, lr}
   d5606:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d5608:	4608      	mov	r0, r1
   d560a:	f7ff ffdb 	bl	d55c4 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d560e:	7b23      	ldrb	r3, [r4, #12]
   d5610:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d5614:	4318      	orrs	r0, r3
   d5616:	7320      	strb	r0, [r4, #12]
}
   d5618:	bd10      	pop	{r4, pc}

000d561a <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d561a:	b510      	push	{r4, lr}
   d561c:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d561e:	1c48      	adds	r0, r1, #1
   d5620:	f7ff ffd0 	bl	d55c4 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d5624:	7b63      	ldrb	r3, [r4, #13]
   d5626:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d562a:	4318      	orrs	r0, r3
   d562c:	7360      	strb	r0, [r4, #13]
}
   d562e:	bd10      	pop	{r4, pc}

000d5630 <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d5630:	b510      	push	{r4, lr}
   d5632:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d5634:	4608      	mov	r0, r1
   d5636:	f7ff ffc5 	bl	d55c4 <_ZN12MCP79410Time8intToBcdEi>
   d563a:	73a0      	strb	r0, [r4, #14]
}
   d563c:	bd10      	pop	{r4, pc}

000d563e <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d563e:	b510      	push	{r4, lr}
   d5640:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d5642:	4608      	mov	r0, r1
   d5644:	f7ff ffbe 	bl	d55c4 <_ZN12MCP79410Time8intToBcdEi>
   d5648:	73e0      	strb	r0, [r4, #15]
}
   d564a:	bd10      	pop	{r4, pc}

000d564c <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d564c:	b510      	push	{r4, lr}
   d564e:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d5650:	4608      	mov	r0, r1
   d5652:	f7ff ffb7 	bl	d55c4 <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d5656:	7c23      	ldrb	r3, [r4, #16]
   d5658:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d565c:	4318      	orrs	r0, r3
   d565e:	7420      	strb	r0, [r4, #16]
}
   d5660:	bd10      	pop	{r4, pc}

000d5662 <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d5662:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5664:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d5666:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d5668:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d566c:	f003 fb46 	bl	d8cfc <gmtime>
   d5670:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d5672:	6941      	ldr	r1, [r0, #20]
   d5674:	4620      	mov	r0, r4
   d5676:	f7ff ffb3 	bl	d55e0 <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d567a:	6929      	ldr	r1, [r5, #16]
   d567c:	4620      	mov	r0, r4
   d567e:	3101      	adds	r1, #1
   d5680:	f7ff ffb9 	bl	d55f6 <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d5684:	68e9      	ldr	r1, [r5, #12]
   d5686:	4620      	mov	r0, r4
   d5688:	f7ff ffbc 	bl	d5604 <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d568c:	69a9      	ldr	r1, [r5, #24]
   d568e:	4620      	mov	r0, r4
   d5690:	f7ff ffc3 	bl	d561a <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d5694:	68a9      	ldr	r1, [r5, #8]
   d5696:	4620      	mov	r0, r4
   d5698:	f7ff ffca 	bl	d5630 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d569c:	6869      	ldr	r1, [r5, #4]
   d569e:	4620      	mov	r0, r4
   d56a0:	f7ff ffcd 	bl	d563e <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d56a4:	6829      	ldr	r1, [r5, #0]
   d56a6:	293b      	cmp	r1, #59	; 0x3b
   d56a8:	bfa8      	it	ge
   d56aa:	213b      	movge	r1, #59	; 0x3b
   d56ac:	4620      	mov	r0, r4
   d56ae:	f7ff ffcd 	bl	d564c <_ZN12MCP79410Time9setSecondEi>
}
   d56b2:	b003      	add	sp, #12
   d56b4:	bd30      	pop	{r4, r5, pc}
	...

000d56b8 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d56b8:	4a05      	ldr	r2, [pc, #20]	; (d56d0 <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d56ba:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d56bc:	e9c0 2100 	strd	r2, r1, [r0]
   d56c0:	4a04      	ldr	r2, [pc, #16]	; (d56d4 <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d56c2:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d56c4:	4a04      	ldr	r2, [pc, #16]	; (d56d8 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d56c6:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d56c8:	4a04      	ldr	r2, [pc, #16]	; (d56dc <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d56ca:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d56cc:	6142      	str	r2, [r0, #20]
}
   d56ce:	4770      	bx	lr
   d56d0:	000db19c 	.word	0x000db19c
   d56d4:	03010000 	.word	0x03010000
   d56d8:	000db144 	.word	0x000db144
   d56dc:	000db178 	.word	0x000db178

000d56e0 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d56e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d56e4:	4604      	mov	r4, r0
   d56e6:	460f      	mov	r7, r1
   d56e8:	4690      	mov	r8, r2
   d56ea:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d56ec:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d56ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d56f0:	429e      	cmp	r6, r3
   d56f2:	d231      	bcs.n	d5758 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d56f4:	6860      	ldr	r0, [r4, #4]
   d56f6:	4639      	mov	r1, r7
   d56f8:	f001 fd35 	bl	d7166 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d56fc:	eb08 0106 	add.w	r1, r8, r6
   d5700:	6860      	ldr	r0, [r4, #4]
   d5702:	f7ff fd47 	bl	d5194 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d5706:	6860      	ldr	r0, [r4, #4]
   d5708:	2100      	movs	r1, #0
   d570a:	f001 fd33 	bl	d7174 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d570e:	4605      	mov	r5, r0
   d5710:	b9d0      	cbnz	r0, d5748 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d5712:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d5714:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d5716:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d5718:	2a20      	cmp	r2, #32
   d571a:	f04f 0301 	mov.w	r3, #1
   d571e:	bf28      	it	cs
   d5720:	2220      	movcs	r2, #32
   d5722:	4639      	mov	r1, r7
   d5724:	f001 fd0d 	bl	d7142 <_ZN7TwoWire11requestFromEhjh>
   d5728:	eb09 0b06 	add.w	fp, r9, r6
   d572c:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d572e:	eb0b 0a00 	add.w	sl, fp, r0
   d5732:	45da      	cmp	sl, fp
   d5734:	d006      	beq.n	d5744 <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d5736:	6860      	ldr	r0, [r4, #4]
   d5738:	6803      	ldr	r3, [r0, #0]
   d573a:	695b      	ldr	r3, [r3, #20]
   d573c:	4798      	blx	r3
   d573e:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d5742:	e7f6      	b.n	d5732 <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d5744:	442e      	add	r6, r5
	while(offset < bufLen) {
   d5746:	e7d2      	b.n	d56ee <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d5748:	4602      	mov	r2, r0
   d574a:	4904      	ldr	r1, [pc, #16]	; (d575c <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d574c:	4804      	ldr	r0, [pc, #16]	; (d5760 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d574e:	f7ff fd25 	bl	d519c <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d5752:	4628      	mov	r0, r5
   d5754:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5758:	2500      	movs	r5, #0
	return stat;
   d575a:	e7fa      	b.n	d5752 <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d575c:	000db09c 	.word	0x000db09c
   d5760:	2003e5f8 	.word	0x2003e5f8

000d5764 <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5764:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d5768:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d576c:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d576e:	6803      	ldr	r3, [r0, #0]
   d5770:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5772:	4605      	mov	r5, r0
   d5774:	460c      	mov	r4, r1
   d5776:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d5778:	4798      	blx	r3
   d577a:	4580      	cmp	r8, r0
   d577c:	d80d      	bhi.n	d579a <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d577e:	3420      	adds	r4, #32
   d5780:	6868      	ldr	r0, [r5, #4]
   d5782:	9600      	str	r6, [sp, #0]
   d5784:	463b      	mov	r3, r7
   d5786:	b2e2      	uxtb	r2, r4
   d5788:	216f      	movs	r1, #111	; 0x6f
   d578a:	f7ff ffa9 	bl	d56e0 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d578e:	fab0 f080 	clz	r0, r0
   d5792:	0940      	lsrs	r0, r0, #5
}
   d5794:	b002      	add	sp, #8
   d5796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d579a:	2000      	movs	r0, #0
   d579c:	e7fa      	b.n	d5794 <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d579e <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d579e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d57a2:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d57a6:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d57a8:	6803      	ldr	r3, [r0, #0]
   d57aa:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d57ac:	4604      	mov	r4, r0
   d57ae:	460d      	mov	r5, r1
   d57b0:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d57b2:	4798      	blx	r3
   d57b4:	4580      	cmp	r8, r0
   d57b6:	d80c      	bhi.n	d57d2 <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d57b8:	6860      	ldr	r0, [r4, #4]
   d57ba:	9600      	str	r6, [sp, #0]
   d57bc:	463b      	mov	r3, r7
   d57be:	b2ea      	uxtb	r2, r5
   d57c0:	2157      	movs	r1, #87	; 0x57
   d57c2:	f7ff ff8d 	bl	d56e0 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d57c6:	fab0 f080 	clz	r0, r0
   d57ca:	0940      	lsrs	r0, r0, #5
}
   d57cc:	b002      	add	sp, #8
   d57ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d57d2:	2000      	movs	r0, #0
   d57d4:	e7fa      	b.n	d57cc <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d57d6 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d57d6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d57d8:	1e1e      	subs	r6, r3, #0
   d57da:	bf0c      	ite	eq
   d57dc:	2307      	moveq	r3, #7
   d57de:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d57e0:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d57e2:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d57e4:	ab02      	add	r3, sp, #8
   d57e6:	460a      	mov	r2, r1
   d57e8:	216f      	movs	r1, #111	; 0x6f
   d57ea:	f7ff ff79 	bl	d56e0 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d57ee:	4605      	mov	r5, r0
   d57f0:	b9a8      	cbnz	r0, d581e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d57f2:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d57f6:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d57f8:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d57fc:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d57fe:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d5802:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d5804:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5808:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d580a:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d580e:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d5810:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d5814:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d5816:	b92e      	cbnz	r6, d5824 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d5818:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d581c:	72a3      	strb	r3, [r4, #10]
}
   d581e:	4628      	mov	r0, r5
   d5820:	b004      	add	sp, #16
   d5822:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d5824:	f002 f908 	bl	d7a38 <_ZN9TimeClass4yearEv>
   d5828:	f7ff fecc 	bl	d55c4 <_ZN12MCP79410Time8intToBcdEi>
   d582c:	72a0      	strb	r0, [r4, #10]
	return stat;
   d582e:	e7f6      	b.n	d581e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d5830 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d5830:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d5832:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d5834:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d5836:	9300      	str	r3, [sp, #0]
   d5838:	216f      	movs	r1, #111	; 0x6f
   d583a:	ab03      	add	r3, sp, #12
   d583c:	f7ff ff50 	bl	d56e0 <_ZNK8MCP7941010deviceReadEhhPhj>
   d5840:	b920      	cbnz	r0, d584c <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d5842:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d5846:	b005      	add	sp, #20
   d5848:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d584c:	2000      	movs	r0, #0
   d584e:	e7fa      	b.n	d5846 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d5850 <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d5850:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d5852:	2103      	movs	r1, #3
   d5854:	f7ff ffec 	bl	d5830 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d5858:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d585c:	bd08      	pop	{r3, pc}

000d585e <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d585e:	b538      	push	{r3, r4, r5, lr}
   d5860:	2300      	movs	r3, #0
   d5862:	460c      	mov	r4, r1
   d5864:	460a      	mov	r2, r1
   d5866:	4619      	mov	r1, r3
   d5868:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d586a:	f7ff ffb4 	bl	d57d6 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d586e:	b930      	cbnz	r0, d587e <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d5870:	7aa3      	ldrb	r3, [r4, #10]
   d5872:	b123      	cbz	r3, d587e <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d5874:	4628      	mov	r0, r5
}
   d5876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d587a:	f7ff bfe9 	b.w	d5850 <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d587e:	2000      	movs	r0, #0
   d5880:	bd38      	pop	{r3, r4, r5, pc}

000d5882 <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d5882:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5884:	4602      	mov	r2, r0
	MCP79410Time time;
   d5886:	a801      	add	r0, sp, #4
   d5888:	f7ff fe28 	bl	d54dc <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d588c:	a901      	add	r1, sp, #4
   d588e:	4610      	mov	r0, r2
   d5890:	f7ff ffe5 	bl	d585e <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d5894:	b128      	cbz	r0, d58a2 <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d5896:	a801      	add	r0, sp, #4
   d5898:	f7ff fe6c 	bl	d5574 <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d589c:	b007      	add	sp, #28
   d589e:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d58a2:	2000      	movs	r0, #0
   d58a4:	4601      	mov	r1, r0
MCP79410Time::~MCP79410Time() {
   d58a6:	e7f9      	b.n	d589c <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d58a8 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d58a8:	b5d0      	push	{r4, r6, r7, lr}
   d58aa:	4604      	mov	r4, r0
   d58ac:	b086      	sub	sp, #24
	wire.begin();
   d58ae:	6840      	ldr	r0, [r0, #4]
   d58b0:	f001 fc2a 	bl	d7108 <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d58b4:	f002 f886 	bl	d79c4 <_ZN9TimeClass7isValidEv>
   d58b8:	b9e8      	cbnz	r0, d58f6 <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d58ba:	7ae3      	ldrb	r3, [r4, #11]
   d58bc:	079b      	lsls	r3, r3, #30
   d58be:	d51a      	bpl.n	d58f6 <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d58c0:	4620      	mov	r0, r4
   d58c2:	f7ff ffde 	bl	d5882 <_ZNK8MCP7941010getRTCTimeEv>
   d58c6:	4606      	mov	r6, r0
   d58c8:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d58ca:	ea56 0307 	orrs.w	r3, r6, r7
   d58ce:	d012      	beq.n	d58f6 <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d58d0:	f001 ff7f 	bl	d77d2 <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d58d4:	4b0a      	ldr	r3, [pc, #40]	; (d5900 <_ZN8MCP794105setupEv+0x58>)
   d58d6:	490b      	ldr	r1, [pc, #44]	; (d5904 <_ZN8MCP794105setupEv+0x5c>)
   d58d8:	681b      	ldr	r3, [r3, #0]
   d58da:	9300      	str	r3, [sp, #0]
   d58dc:	4632      	mov	r2, r6
   d58de:	463b      	mov	r3, r7
   d58e0:	a802      	add	r0, sp, #8
   d58e2:	f002 f82d 	bl	d7940 <_ZN9TimeClass6formatExPKc>
   d58e6:	4808      	ldr	r0, [pc, #32]	; (d5908 <_ZN8MCP794105setupEv+0x60>)
   d58e8:	9a02      	ldr	r2, [sp, #8]
   d58ea:	4908      	ldr	r1, [pc, #32]	; (d590c <_ZN8MCP794105setupEv+0x64>)
   d58ec:	f7ff fc56 	bl	d519c <_ZNK5spark6Logger4infoEPKcz>
   d58f0:	a802      	add	r0, sp, #8
   d58f2:	f001 fe0b 	bl	d750c <_ZN6StringD1Ev>
	setupDone = true;
   d58f6:	2301      	movs	r3, #1
   d58f8:	7223      	strb	r3, [r4, #8]
}
   d58fa:	b006      	add	sp, #24
   d58fc:	bdd0      	pop	{r4, r6, r7, pc}
   d58fe:	bf00      	nop
   d5900:	2003de84 	.word	0x2003de84
   d5904:	2003e638 	.word	0x2003e638
   d5908:	2003e5f8 	.word	0x2003e5f8
   d590c:	000db0b6 	.word	0x000db0b6

000d5910 <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d5910:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5914:	4606      	mov	r6, r0
   d5916:	4688      	mov	r8, r1
   d5918:	4691      	mov	r9, r2
   d591a:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d591c:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d591e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5920:	429d      	cmp	r5, r3
   d5922:	d229      	bcs.n	d5978 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d5924:	6870      	ldr	r0, [r6, #4]
   d5926:	4641      	mov	r1, r8
   d5928:	f001 fc1d 	bl	d7166 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d592c:	6870      	ldr	r0, [r6, #4]
   d592e:	eb09 0105 	add.w	r1, r9, r5
   d5932:	f7ff fc2f 	bl	d5194 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d5936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5938:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d593a:	2f1f      	cmp	r7, #31
   d593c:	bf28      	it	cs
   d593e:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d5940:	eb0a 0405 	add.w	r4, sl, r5
   d5944:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d5948:	6870      	ldr	r0, [r6, #4]
   d594a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d594e:	6802      	ldr	r2, [r0, #0]
   d5950:	6892      	ldr	r2, [r2, #8]
   d5952:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d5954:	45a3      	cmp	fp, r4
   d5956:	d1f7      	bne.n	d5948 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d5958:	6870      	ldr	r0, [r6, #4]
   d595a:	2101      	movs	r1, #1
   d595c:	f001 fc0a 	bl	d7174 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d5960:	4604      	mov	r4, r0
   d5962:	b138      	cbz	r0, d5974 <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d5964:	4602      	mov	r2, r0
   d5966:	4905      	ldr	r1, [pc, #20]	; (d597c <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d5968:	4805      	ldr	r0, [pc, #20]	; (d5980 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d596a:	f7ff fc17 	bl	d519c <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d596e:	4620      	mov	r0, r4
   d5970:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d5974:	443d      	add	r5, r7
	while(offset < bufLen) {
   d5976:	e7d2      	b.n	d591e <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d5978:	2400      	movs	r4, #0
	return stat;
   d597a:	e7f8      	b.n	d596e <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d597c:	000db0cb 	.word	0x000db0cb
   d5980:	2003e5f8 	.word	0x2003e5f8

000d5984 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5984:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d5988:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d598c:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d598e:	6803      	ldr	r3, [r0, #0]
   d5990:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5992:	4605      	mov	r5, r0
   d5994:	460c      	mov	r4, r1
   d5996:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d5998:	4798      	blx	r3
   d599a:	4580      	cmp	r8, r0
   d599c:	d80d      	bhi.n	d59ba <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d599e:	3420      	adds	r4, #32
   d59a0:	6868      	ldr	r0, [r5, #4]
   d59a2:	9600      	str	r6, [sp, #0]
   d59a4:	463b      	mov	r3, r7
   d59a6:	b2e2      	uxtb	r2, r4
   d59a8:	216f      	movs	r1, #111	; 0x6f
   d59aa:	f7ff ffb1 	bl	d5910 <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d59ae:	fab0 f080 	clz	r0, r0
   d59b2:	0940      	lsrs	r0, r0, #5
}
   d59b4:	b002      	add	sp, #8
   d59b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d59ba:	2000      	movs	r0, #0
   d59bc:	e7fa      	b.n	d59b4 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d59be <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d59be:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d59c0:	7c13      	ldrb	r3, [r2, #16]
   d59c2:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d59c6:	7bd3      	ldrb	r3, [r2, #15]
   d59c8:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d59cc:	7b93      	ldrb	r3, [r2, #14]
   d59ce:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d59d2:	7b53      	ldrb	r3, [r2, #13]
   d59d4:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d59d8:	7b13      	ldrb	r3, [r2, #12]
   d59da:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d59de:	7ad3      	ldrb	r3, [r2, #11]
   d59e0:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d59e4:	7a93      	ldrb	r3, [r2, #10]
   d59e6:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d59ea:	2307      	movs	r3, #7
   d59ec:	9300      	str	r3, [sp, #0]
   d59ee:	460a      	mov	r2, r1
   d59f0:	ab02      	add	r3, sp, #8
   d59f2:	216f      	movs	r1, #111	; 0x6f
   d59f4:	f7ff ff8c 	bl	d5910 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d59f8:	b005      	add	sp, #20
   d59fa:	f85d fb04 	ldr.w	pc, [sp], #4

000d59fe <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d59fe:	b510      	push	{r4, lr}
   d5a00:	b088      	sub	sp, #32
   d5a02:	4604      	mov	r4, r0
	MCP79410Time time;
   d5a04:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d5a06:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d5a08:	f7ff fd68 	bl	d54dc <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d5a0c:	9b01      	ldr	r3, [sp, #4]
   d5a0e:	a803      	add	r0, sp, #12
   d5a10:	f7ff fe27 	bl	d5662 <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d5a14:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d5a18:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d5a1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d5a1e:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d5a22:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d5a26:	b16a      	cbz	r2, d5a44 <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d5a28:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d5a2c:	aa03      	add	r2, sp, #12
   d5a2e:	2100      	movs	r1, #0
   d5a30:	4620      	mov	r0, r4
   d5a32:	f88d 3019 	strb.w	r3, [sp, #25]
   d5a36:	f7ff ffc2 	bl	d59be <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d5a3a:	fab0 f080 	clz	r0, r0
   d5a3e:	0940      	lsrs	r0, r0, #5
   d5a40:	b008      	add	sp, #32
   d5a42:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d5a44:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d5a48:	e7f0      	b.n	d5a2c <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d5a4c <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d5a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5a4e:	b087      	sub	sp, #28
   d5a50:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d5a52:	f001 ffb7 	bl	d79c4 <_ZN9TimeClass7isValidEv>
   d5a56:	4604      	mov	r4, r0
   d5a58:	b1e8      	cbz	r0, d5a96 <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d5a5a:	f001 ffd0 	bl	d79fe <_ZN9TimeClass3nowEv>
   d5a5e:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d5a60:	4602      	mov	r2, r0
		time_t now = Time.now();
   d5a62:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d5a64:	463b      	mov	r3, r7
   d5a66:	4628      	mov	r0, r5
   d5a68:	f7ff ffc9 	bl	d59fe <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d5a6c:	4b0c      	ldr	r3, [pc, #48]	; (d5aa0 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d5a6e:	490d      	ldr	r1, [pc, #52]	; (d5aa4 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d5a70:	681b      	ldr	r3, [r3, #0]
   d5a72:	9300      	str	r3, [sp, #0]
   d5a74:	4632      	mov	r2, r6
   d5a76:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d5a78:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d5a7a:	a802      	add	r0, sp, #8
   d5a7c:	f001 ff60 	bl	d7940 <_ZN9TimeClass6formatExPKc>
   d5a80:	4809      	ldr	r0, [pc, #36]	; (d5aa8 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d5a82:	9a02      	ldr	r2, [sp, #8]
   d5a84:	4909      	ldr	r1, [pc, #36]	; (d5aac <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d5a86:	f7ff fb89 	bl	d519c <_ZNK5spark6Logger4infoEPKcz>
   d5a8a:	a802      	add	r0, sp, #8
   d5a8c:	f001 fd3e 	bl	d750c <_ZN6StringD1Ev>
}
   d5a90:	4620      	mov	r0, r4
   d5a92:	b007      	add	sp, #28
   d5a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d5a96:	4906      	ldr	r1, [pc, #24]	; (d5ab0 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d5a98:	4803      	ldr	r0, [pc, #12]	; (d5aa8 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d5a9a:	f7ff fb7f 	bl	d519c <_ZNK5spark6Logger4infoEPKcz>
   d5a9e:	e7f7      	b.n	d5a90 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d5aa0:	2003de84 	.word	0x2003de84
   d5aa4:	2003e638 	.word	0x2003e638
   d5aa8:	2003e5f8 	.word	0x2003e5f8
   d5aac:	000db0e6 	.word	0x000db0e6
   d5ab0:	000db0fc 	.word	0x000db0fc

000d5ab4 <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d5ab4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d5ab6:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d5ab8:	4604      	mov	r4, r0
	if (!timeSet) {
   d5aba:	b99d      	cbnz	r5, d5ae4 <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d5abc:	f001 ff82 	bl	d79c4 <_ZN9TimeClass7isValidEv>
   d5ac0:	b180      	cbz	r0, d5ae4 <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d5ac2:	2200      	movs	r2, #0
   d5ac4:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d5ac6:	4669      	mov	r1, sp
   d5ac8:	4628      	mov	r0, r5
        tm = 0;
   d5aca:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d5ace:	f000 fea3 	bl	d6818 <spark_sync_time_last>
			if (lastSync != 0) {
   d5ad2:	b138      	cbz	r0, d5ae4 <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d5ad4:	7ae3      	ldrb	r3, [r4, #11]
   d5ad6:	07db      	lsls	r3, r3, #31
   d5ad8:	d502      	bpl.n	d5ae0 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d5ada:	4620      	mov	r0, r4
   d5adc:	f7ff ffb6 	bl	d5a4c <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d5ae0:	2301      	movs	r3, #1
   d5ae2:	7263      	strb	r3, [r4, #9]
}
   d5ae4:	b003      	add	sp, #12
   d5ae6:	bd30      	pop	{r4, r5, pc}

000d5ae8 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d5ae8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d5aea:	2301      	movs	r3, #1
	buf[0] = value;
   d5aec:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d5af0:	9300      	str	r3, [sp, #0]
   d5af2:	460a      	mov	r2, r1
   d5af4:	ab03      	add	r3, sp, #12
   d5af6:	216f      	movs	r1, #111	; 0x6f
   d5af8:	f7ff ff0a 	bl	d5910 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d5afc:	b005      	add	sp, #20
   d5afe:	f85d fb04 	ldr.w	pc, [sp], #4

000d5b02 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d5b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5b04:	4604      	mov	r4, r0
   d5b06:	460d      	mov	r5, r1
   d5b08:	4617      	mov	r7, r2
   d5b0a:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d5b0c:	f7ff fe90 	bl	d5830 <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   d5b10:	ea00 0207 	and.w	r2, r0, r7
	return deviceWriteRegisterByte(addr, value);
   d5b14:	4332      	orrs	r2, r6
   d5b16:	4629      	mov	r1, r5
   d5b18:	4620      	mov	r0, r4
}
   d5b1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   d5b1e:	f7ff bfe3 	b.w	d5ae8 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d5b22 <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   d5b22:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   d5b24:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d5b26:	d80c      	bhi.n	d5b42 <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d5b28:	2900      	cmp	r1, #0
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d5b2a:	f04f 0300 	mov.w	r3, #0
   d5b2e:	bf14      	ite	ne
   d5b30:	22df      	movne	r2, #223	; 0xdf
   d5b32:	22ef      	moveq	r2, #239	; 0xef
   d5b34:	2107      	movs	r1, #7
   d5b36:	f7ff ffe4 	bl	d5b02 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d5b3a:	fab0 f080 	clz	r0, r0
   d5b3e:	0940      	lsrs	r0, r0, #5
}
   d5b40:	bd08      	pop	{r3, pc}
		return false;
   d5b42:	2000      	movs	r0, #0
   d5b44:	e7fc      	b.n	d5b40 <_ZN8MCP7941010clearAlarmEi+0x1e>

000d5b46 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d5b46:	b538      	push	{r3, r4, r5, lr}
   d5b48:	4604      	mov	r4, r0
   d5b4a:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d5b4c:	6860      	ldr	r0, [r4, #4]
   d5b4e:	2157      	movs	r1, #87	; 0x57
   d5b50:	f001 fb09 	bl	d7166 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d5b54:	6860      	ldr	r0, [r4, #4]
   d5b56:	2101      	movs	r1, #1
   d5b58:	f001 fb0c 	bl	d7174 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d5b5c:	b108      	cbz	r0, d5b62 <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d5b5e:	3d01      	subs	r5, #1
   d5b60:	d1f4      	bne.n	d5b4c <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d5b62:	bd38      	pop	{r3, r4, r5, pc}

000d5b64 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d5b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5b68:	4604      	mov	r4, r0
   d5b6a:	460f      	mov	r7, r1
   d5b6c:	4616      	mov	r6, r2
   d5b6e:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d5b72:	45b0      	cmp	r8, r6
   d5b74:	d020      	beq.n	d5bb8 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d5b76:	6860      	ldr	r0, [r4, #4]
   d5b78:	2157      	movs	r1, #87	; 0x57
   d5b7a:	f001 faf4 	bl	d7166 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d5b7e:	4639      	mov	r1, r7
   d5b80:	6860      	ldr	r0, [r4, #4]
   d5b82:	f7ff fb07 	bl	d5194 <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d5b86:	6860      	ldr	r0, [r4, #4]
   d5b88:	f816 1b01 	ldrb.w	r1, [r6], #1
   d5b8c:	6803      	ldr	r3, [r0, #0]
   d5b8e:	689b      	ldr	r3, [r3, #8]
   d5b90:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d5b92:	6860      	ldr	r0, [r4, #4]
   d5b94:	2101      	movs	r1, #1
   d5b96:	f001 faed 	bl	d7174 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d5b9a:	3701      	adds	r7, #1
   d5b9c:	4605      	mov	r5, r0
   d5b9e:	b138      	cbz	r0, d5bb0 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d5ba0:	4602      	mov	r2, r0
   d5ba2:	4906      	ldr	r1, [pc, #24]	; (d5bbc <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d5ba4:	4806      	ldr	r0, [pc, #24]	; (d5bc0 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d5ba6:	f7ff faf9 	bl	d519c <_ZNK5spark6Logger4infoEPKcz>
}
   d5baa:	4628      	mov	r0, r5
   d5bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d5bb0:	4620      	mov	r0, r4
   d5bb2:	f7ff ffc8 	bl	d5b46 <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d5bb6:	e7dc      	b.n	d5b72 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d5bb8:	2500      	movs	r5, #0
	return stat;
   d5bba:	e7f6      	b.n	d5baa <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d5bbc:	000db111 	.word	0x000db111
   d5bc0:	2003e5f8 	.word	0x2003e5f8

000d5bc4 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d5bc6:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5bc8:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5bca:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5bcc:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d5bce:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5bd0:	4604      	mov	r4, r0
   d5bd2:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d5bd4:	4798      	blx	r3
   d5bd6:	4287      	cmp	r7, r0
   d5bd8:	d80a      	bhi.n	d5bf0 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d5bda:	9a01      	ldr	r2, [sp, #4]
   d5bdc:	6860      	ldr	r0, [r4, #4]
   d5bde:	4633      	mov	r3, r6
   d5be0:	b2e9      	uxtb	r1, r5
   d5be2:	f7ff ffbf 	bl	d5b64 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d5be6:	fab0 f080 	clz	r0, r0
   d5bea:	0940      	lsrs	r0, r0, #5
}
   d5bec:	b003      	add	sp, #12
   d5bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d5bf0:	2000      	movs	r0, #0
   d5bf2:	e7fb      	b.n	d5bec <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d5bf4 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   d5bf4:	4b01      	ldr	r3, [pc, #4]	; (d5bfc <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d5bf6:	4a02      	ldr	r2, [pc, #8]	; (d5c00 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d5bf8:	601a      	str	r2, [r3, #0]
}
   d5bfa:	4770      	bx	lr
   d5bfc:	2003e5f8 	.word	0x2003e5f8
   d5c00:	000db132 	.word	0x000db132

000d5c04 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d5c04:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d5c06:	4603      	mov	r3, r0
	switch (__op)
   d5c08:	d102      	bne.n	d5c10 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d5c0a:	6001      	str	r1, [r0, #0]
      }
   d5c0c:	2000      	movs	r0, #0
   d5c0e:	4770      	bx	lr
	  switch (__op)
   d5c10:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d5c12:	bf04      	itt	eq
   d5c14:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d5c18:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d5c1c:	e7f6      	b.n	d5c0c <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d5c1e <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d5c1e:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d5c20:	2301      	movs	r3, #1
   d5c22:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d5c24:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d5c26:	4604      	mov	r4, r0
        if (th->func) {
   d5c28:	b143      	cbz	r3, d5c3c <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d5c2a:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5c2c:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d5c2e:	2301      	movs	r3, #1
   d5c30:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d5c32:	2000      	movs	r0, #0
    }
   d5c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d5c38:	f000 bba8 	b.w	d638c <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d5c3c:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d5c3e:	2800      	cmp	r0, #0
   d5c40:	d0f5      	beq.n	d5c2e <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d5c42:	6883      	ldr	r3, [r0, #8]
   d5c44:	b90b      	cbnz	r3, d5c4a <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d5c46:	f002 f9fc 	bl	d8042 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5c4a:	68c3      	ldr	r3, [r0, #12]
   d5c4c:	e7ee      	b.n	d5c2c <_ZN6Thread3runEPv+0xe>

000d5c4e <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5c4e:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d5c50:	6842      	ldr	r2, [r0, #4]
   d5c52:	4603      	mov	r3, r0
   d5c54:	1054      	asrs	r4, r2, #1
   d5c56:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d5c5a:	07d2      	lsls	r2, r2, #31
   d5c5c:	bf48      	it	mi
   d5c5e:	590a      	ldrmi	r2, [r1, r4]
   d5c60:	681b      	ldr	r3, [r3, #0]
      }
   d5c62:	f85d 4b04 	ldr.w	r4, [sp], #4
   d5c66:	bf48      	it	mi
   d5c68:	58d3      	ldrmi	r3, [r2, r3]
   d5c6a:	4718      	bx	r3

000d5c6c <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d5c6c:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d5c6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d5c70:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d5c74:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d5c76:	3008      	adds	r0, #8
   d5c78:	f000 fb60 	bl	d633c <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d5c7c:	2004      	movs	r0, #4
   d5c7e:	f7fe fa0a 	bl	d4096 <_Znwj>
   d5c82:	4605      	mov	r5, r0
   d5c84:	b398      	cbz	r0, d5cee <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d5c86:	491b      	ldr	r1, [pc, #108]	; (d5cf4 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d5c88:	2014      	movs	r0, #20
   d5c8a:	f002 f9d6 	bl	d803a <_ZnwjRKSt9nothrow_t>
   d5c8e:	b130      	cbz	r0, d5c9e <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5c90:	2300      	movs	r3, #0
            exited(false) {
   d5c92:	e9c0 3300 	strd	r3, r3, [r0]
   d5c96:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d5c9a:	7403      	strb	r3, [r0, #16]
   d5c9c:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d5c9e:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d5ca0:	b1a0      	cbz	r0, d5ccc <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d5ca2:	4b15      	ldr	r3, [pc, #84]	; (d5cf8 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5ca4:	4915      	ldr	r1, [pc, #84]	; (d5cfc <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d5ca6:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5caa:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d5cae:	e9cd 0300 	strd	r0, r3, [sp]
   d5cb2:	2202      	movs	r2, #2
   d5cb4:	4b12      	ldr	r3, [pc, #72]	; (d5d00 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d5cb6:	3004      	adds	r0, #4
   d5cb8:	f000 fb08 	bl	d62cc <os_thread_create>
   d5cbc:	b930      	cbnz	r0, d5ccc <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d5cbe:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d5cc0:	7c1b      	ldrb	r3, [r3, #16]
   d5cc2:	b9a3      	cbnz	r3, d5cee <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d5cc4:	2001      	movs	r0, #1
   d5cc6:	f000 fb81 	bl	d63cc <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d5cca:	e7f8      	b.n	d5cbe <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5ccc:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5cce:	2300      	movs	r3, #0
   d5cd0:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d5cd2:	b164      	cbz	r4, d5cee <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d5cd4:	6827      	ldr	r7, [r4, #0]
   d5cd6:	b137      	cbz	r7, d5ce6 <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d5cd8:	4638      	mov	r0, r7
   d5cda:	f7fe fa93 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d5cde:	2110      	movs	r1, #16
   d5ce0:	4638      	mov	r0, r7
   d5ce2:	f002 f9a8 	bl	d8036 <_ZdlPvj>
   d5ce6:	2114      	movs	r1, #20
   d5ce8:	4620      	mov	r0, r4
   d5cea:	f002 f9a4 	bl	d8036 <_ZdlPvj>
   d5cee:	6075      	str	r5, [r6, #4]
}
   d5cf0:	b003      	add	sp, #12
   d5cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5cf4:	000db434 	.word	0x000db434
   d5cf8:	000d5f0b 	.word	0x000d5f0b
   d5cfc:	000db1a4 	.word	0x000db1a4
   d5d00:	000d5c1f 	.word	0x000d5c1f

000d5d04 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d5d04:	f247 5130 	movw	r1, #30000	; 0x7530
   d5d08:	4a08      	ldr	r2, [pc, #32]	; (d5d2c <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d5d0a:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5d0c:	4908      	ldr	r1, [pc, #32]	; (d5d30 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d5d0e:	6002      	str	r2, [r0, #0]
   d5d10:	2200      	movs	r2, #0
   d5d12:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d5d16:	4907      	ldr	r1, [pc, #28]	; (d5d34 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d5d18:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d5d1a:	4907      	ldr	r1, [pc, #28]	; (d5d38 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d5d1c:	6042      	str	r2, [r0, #4]
   d5d1e:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d5d22:	6181      	str	r1, [r0, #24]
   d5d24:	8502      	strh	r2, [r0, #40]	; 0x28
   d5d26:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d5d2a:	4770      	bx	lr
   d5d2c:	000db268 	.word	0x000db268
   d5d30:	000d6075 	.word	0x000d6075
   d5d34:	000d5c4f 	.word	0x000d5c4f
   d5d38:	000d5c05 	.word	0x000d5c05

000d5d3c <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d5d3c:	b510      	push	{r4, lr}
   d5d3e:	4b04      	ldr	r3, [pc, #16]	; (d5d50 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d5d40:	4604      	mov	r4, r0
   d5d42:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d5d46:	f7fe fa5d 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
}
   d5d4a:	4620      	mov	r0, r4
   d5d4c:	bd10      	pop	{r4, pc}
   d5d4e:	bf00      	nop
   d5d50:	000db268 	.word	0x000db268

000d5d54 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d5d54:	b510      	push	{r4, lr}
   d5d56:	4b03      	ldr	r3, [pc, #12]	; (d5d64 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d5d58:	6003      	str	r3, [r0, #0]
   d5d5a:	4604      	mov	r4, r0
   d5d5c:	f7ff ffee 	bl	d5d3c <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d5d60:	4620      	mov	r0, r4
   d5d62:	bd10      	pop	{r4, pc}
   d5d64:	000db290 	.word	0x000db290

000d5d68 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d5d68:	b510      	push	{r4, lr}
   d5d6a:	4604      	mov	r4, r0
}
   d5d6c:	f7ff fff2 	bl	d5d54 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d5d70:	4620      	mov	r0, r4
   d5d72:	2138      	movs	r1, #56	; 0x38
   d5d74:	f002 f95f 	bl	d8036 <_ZdlPvj>
   d5d78:	4620      	mov	r0, r4
   d5d7a:	bd10      	pop	{r4, pc}

000d5d7c <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d5d7c:	6880      	ldr	r0, [r0, #8]
   d5d7e:	f000 bae5 	b.w	d634c <os_mutex_lock>

000d5d82 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d5d82:	6880      	ldr	r0, [r0, #8]
   d5d84:	f000 baea 	b.w	d635c <os_mutex_unlock>

000d5d88 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d5d88:	b510      	push	{r4, lr}
   d5d8a:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d5d8c:	6800      	ldr	r0, [r0, #0]
   d5d8e:	f7ff fff8 	bl	d5d82 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d5d92:	4620      	mov	r0, r4
   d5d94:	bd10      	pop	{r4, pc}

000d5d96 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d5d96:	b513      	push	{r0, r1, r4, lr}
   d5d98:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d5d9a:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d5d9c:	f7ff ffee 	bl	d5d7c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d5da0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d5da2:	88dc      	ldrh	r4, [r3, #6]
   d5da4:	b2a4      	uxth	r4, r4
   d5da6:	b10c      	cbz	r4, d5dac <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d5da8:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d5dac:	a801      	add	r0, sp, #4
   d5dae:	f7ff ffeb 	bl	d5d88 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d5db2:	4620      	mov	r0, r4
   d5db4:	b002      	add	sp, #8
   d5db6:	bd10      	pop	{r4, pc}

000d5db8 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d5db8:	b513      	push	{r0, r1, r4, lr}
   d5dba:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d5dbc:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d5dbe:	f7ff ffdd 	bl	d5d7c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d5dc2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d5dc6:	b943      	cbnz	r3, d5dda <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d5dc8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d5dca:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d5dcc:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d5dce:	a801      	add	r0, sp, #4
   d5dd0:	f7ff ffda 	bl	d5d88 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d5dd4:	4620      	mov	r0, r4
   d5dd6:	b002      	add	sp, #8
   d5dd8:	bd10      	pop	{r4, pc}
	bool result = false;
   d5dda:	2400      	movs	r4, #0
   d5ddc:	e7f7      	b.n	d5dce <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d5dde <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d5dde:	b513      	push	{r0, r1, r4, lr}
   d5de0:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d5de2:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d5de4:	f7ff ffca 	bl	d5d7c <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d5de8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d5dea:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d5dec:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d5dee:	f7ff ffcb 	bl	d5d88 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d5df2:	4620      	mov	r0, r4
   d5df4:	b002      	add	sp, #8
   d5df6:	bd10      	pop	{r4, pc}

000d5df8 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d5df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5dfc:	4699      	mov	r9, r3
   d5dfe:	b086      	sub	sp, #24
	if (!haveSetup) {
   d5e00:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d5e04:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d5e08:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d5e0c:	4604      	mov	r4, r0
   d5e0e:	460f      	mov	r7, r1
   d5e10:	4616      	mov	r6, r2
	if (!haveSetup) {
   d5e12:	b913      	cbnz	r3, d5e1a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d5e14:	6803      	ldr	r3, [r0, #0]
   d5e16:	689b      	ldr	r3, [r3, #8]
   d5e18:	4798      	blx	r3
		data = "";
   d5e1a:	4b31      	ldr	r3, [pc, #196]	; (d5ee0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d5e1c:	4638      	mov	r0, r7
		data = "";
   d5e1e:	2e00      	cmp	r6, #0
   d5e20:	bf08      	it	eq
   d5e22:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d5e24:	f002 ffff 	bl	d8e26 <strlen>
   d5e28:	4605      	mov	r5, r0
   d5e2a:	4630      	mov	r0, r6
   d5e2c:	f002 fffb 	bl	d8e26 <strlen>
   d5e30:	4428      	add	r0, r5
   d5e32:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d5e36:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d5e38:	bf1c      	itt	ne
   d5e3a:	f025 0503 	bicne.w	r5, r5, #3
   d5e3e:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d5e40:	4633      	mov	r3, r6
   d5e42:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d5e46:	e9cd 9a00 	strd	r9, sl, [sp]
   d5e4a:	4926      	ldr	r1, [pc, #152]	; (d5ee4 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d5e4c:	4826      	ldr	r0, [pc, #152]	; (d5ee8 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d5e4e:	463a      	mov	r2, r7
   d5e50:	f7ff f9a4 	bl	d519c <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d5e54:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d5e56:	3b08      	subs	r3, #8
   d5e58:	42ab      	cmp	r3, r5
   d5e5a:	d212      	bcs.n	d5e82 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d5e5c:	2400      	movs	r4, #0
}
   d5e5e:	4620      	mov	r0, r4
   d5e60:	b006      	add	sp, #24
   d5e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d5e66:	88cb      	ldrh	r3, [r1, #6]
   d5e68:	2b01      	cmp	r3, #1
   d5e6a:	d036      	beq.n	d5eda <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d5e6c:	a805      	add	r0, sp, #20
   d5e6e:	f7ff ff8b 	bl	d5d88 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d5e72:	6823      	ldr	r3, [r4, #0]
   d5e74:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d5e78:	699b      	ldr	r3, [r3, #24]
   d5e7a:	4620      	mov	r0, r4
   d5e7c:	4798      	blx	r3
   d5e7e:	2800      	cmp	r0, #0
   d5e80:	d0ec      	beq.n	d5e5c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d5e82:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d5e84:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d5e86:	f7ff ff79 	bl	d5d7c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d5e8a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d5e8c:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d5e8e:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d5e90:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d5e92:	1ad2      	subs	r2, r2, r3
   d5e94:	42aa      	cmp	r2, r5
   d5e96:	d3e6      	bcc.n	d5e66 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d5e98:	ea48 080a 	orr.w	r8, r8, sl
   d5e9c:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d5ea0:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d5ea4:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d5ea6:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d5eaa:	4639      	mov	r1, r7
   d5eac:	4640      	mov	r0, r8
   d5eae:	f002 ff95 	bl	d8ddc <strcpy>
				cp += strlen(cp) + 1;
   d5eb2:	4640      	mov	r0, r8
   d5eb4:	f002 ffb7 	bl	d8e26 <strlen>
   d5eb8:	3001      	adds	r0, #1
				strcpy(cp, data);
   d5eba:	4631      	mov	r1, r6
   d5ebc:	4440      	add	r0, r8
   d5ebe:	f002 ff8d 	bl	d8ddc <strcpy>
				nextFree += size;
   d5ec2:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d5ec4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d5ec6:	441d      	add	r5, r3
   d5ec8:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d5eca:	88d3      	ldrh	r3, [r2, #6]
   d5ecc:	3301      	adds	r3, #1
   d5ece:	80d3      	strh	r3, [r2, #6]
				return true;
   d5ed0:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d5ed2:	a805      	add	r0, sp, #20
   d5ed4:	f7ff ff58 	bl	d5d88 <_ZN11StMutexLockD1Ev>
   d5ed8:	e7c1      	b.n	d5e5e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d5eda:	2400      	movs	r4, #0
   d5edc:	e7f9      	b.n	d5ed2 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d5ede:	bf00      	nop
   d5ee0:	000db45c 	.word	0x000db45c
   d5ee4:	000db1b6 	.word	0x000db1b6
   d5ee8:	2003e5fc 	.word	0x2003e5fc

000d5eec <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d5eec:	b508      	push	{r3, lr}
   d5eee:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5ef0:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d5ef4:	69a3      	ldr	r3, [r4, #24]
   d5ef6:	b90b      	cbnz	r3, d5efc <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d5ef8:	f002 f8a3 	bl	d8042 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5efc:	69e3      	ldr	r3, [r4, #28]
   d5efe:	4621      	mov	r1, r4
   d5f00:	4628      	mov	r0, r5
   d5f02:	4798      	blx	r3
		os_thread_yield();
   d5f04:	f000 f9ea 	bl	d62dc <os_thread_yield>
	while(true) {
   d5f08:	e7f4      	b.n	d5ef4 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d5f0a <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d5f0a:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d5f0c:	f7ff ffee 	bl	d5eec <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d5f10 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d5f10:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d5f12:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d5f16:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d5f18:	4628      	mov	r0, r5
   d5f1a:	f002 ff84 	bl	d8e26 <strlen>
   d5f1e:	3001      	adds	r0, #1
   d5f20:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d5f22:	4628      	mov	r0, r5
   d5f24:	f002 ff7f 	bl	d8e26 <strlen>
	size_t offset = start - retainedBuffer;
   d5f28:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d5f2a:	3001      	adds	r0, #1
   d5f2c:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d5f2e:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d5f30:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d5f34:	bf1c      	itt	ne
   d5f36:	f1c3 0304 	rsbne	r3, r3, #4
   d5f3a:	18c0      	addne	r0, r0, r3
}
   d5f3c:	bd68      	pop	{r3, r5, r6, pc}

000d5f3e <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d5f3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5f40:	4604      	mov	r4, r0
   d5f42:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d5f44:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d5f46:	f7ff ff19 	bl	d5d7c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d5f4a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d5f4c:	88fb      	ldrh	r3, [r7, #6]
   d5f4e:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d5f52:	b1e6      	cbz	r6, d5f8e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d5f54:	2b01      	cmp	r3, #1
   d5f56:	d922      	bls.n	d5f9e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d5f58:	4629      	mov	r1, r5
   d5f5a:	4620      	mov	r0, r4
   d5f5c:	f7ff ffd8 	bl	d5f10 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d5f60:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d5f62:	4629      	mov	r1, r5
   d5f64:	4620      	mov	r0, r4
   d5f66:	f7ff ffd3 	bl	d5f10 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d5f6a:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d5f6c:	443a      	add	r2, r7
	if (after > 0) {
   d5f6e:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d5f70:	4601      	mov	r1, r0
	size_t len = next - start;
   d5f72:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d5f76:	d002      	beq.n	d5f7e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d5f78:	4628      	mov	r0, r5
   d5f7a:	f002 fedf 	bl	d8d3c <memmove>
	nextFree -= len;
   d5f7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d5f80:	1b9b      	subs	r3, r3, r6
   d5f82:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d5f84:	88fb      	ldrh	r3, [r7, #6]
   d5f86:	3b01      	subs	r3, #1
   d5f88:	80fb      	strh	r3, [r7, #6]
	return true;
   d5f8a:	2601      	movs	r6, #1
   d5f8c:	e001      	b.n	d5f92 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d5f8e:	2b00      	cmp	r3, #0
   d5f90:	d1e7      	bne.n	d5f62 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d5f92:	a801      	add	r0, sp, #4
   d5f94:	f7ff fef8 	bl	d5d88 <_ZN11StMutexLockD1Ev>
}
   d5f98:	4630      	mov	r0, r6
   d5f9a:	b003      	add	sp, #12
   d5f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d5f9e:	2600      	movs	r6, #0
   d5fa0:	e7f7      	b.n	d5f92 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d5fa4 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d5fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5fa8:	460d      	mov	r5, r1
   d5faa:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5fac:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d5fae:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d5fb0:	f7ff fea8 	bl	d5d04 <_ZN21PublishQueueAsyncBaseC1Ev>
   d5fb4:	4b15      	ldr	r3, [pc, #84]	; (d600c <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5fb6:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d5fba:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5fbc:	4b14      	ldr	r3, [pc, #80]	; (d6010 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d5fbe:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5fc0:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d5fc2:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5fc4:	4698      	mov	r8, r3
   d5fc6:	d117      	bne.n	d5ff8 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d5fc8:	88ab      	ldrh	r3, [r5, #4]
   d5fca:	b29b      	uxth	r3, r3
   d5fcc:	42b3      	cmp	r3, r6
   d5fce:	d113      	bne.n	d5ff8 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d5fd0:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d5fd4:	6367      	str	r7, [r4, #52]	; 0x34
   d5fd6:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d5fda:	88eb      	ldrh	r3, [r5, #6]
   d5fdc:	fa1f f289 	uxth.w	r2, r9
   d5fe0:	b29b      	uxth	r3, r3
   d5fe2:	429a      	cmp	r2, r3
   d5fe4:	d20e      	bcs.n	d6004 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d5fe6:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d5fe8:	4620      	mov	r0, r4
   d5fea:	f7ff ff91 	bl	d5f10 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d5fee:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d5ff0:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d5ff2:	f109 0901 	add.w	r9, r9, #1
   d5ff6:	d9f0      	bls.n	d5fda <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d5ff8:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d5ffa:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d5ffe:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d6000:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d6002:	80eb      	strh	r3, [r5, #6]
}
   d6004:	4620      	mov	r0, r4
   d6006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d600a:	bf00      	nop
   d600c:	000db290 	.word	0x000db290
   d6010:	d19cab61 	.word	0xd19cab61

000d6014 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d6014:	b510      	push	{r4, lr}
   d6016:	e9d1 2300 	ldrd	r2, r3, [r1]
   d601a:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d601c:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d601e:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d6020:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d6022:	b90a      	cbnz	r2, d6028 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d6024:	07d9      	lsls	r1, r3, #31
   d6026:	d505      	bpl.n	d6034 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d6028:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d602c:	4b0f      	ldr	r3, [pc, #60]	; (d606c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d602e:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d6030:	4b0f      	ldr	r3, [pc, #60]	; (d6070 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d6032:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6034:	ab02      	add	r3, sp, #8
   d6036:	e893 0003 	ldmia.w	r3, {r0, r1}
   d603a:	466a      	mov	r2, sp
   d603c:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6040:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6044:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6048:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d604c:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d604e:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6052:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6054:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6056:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6058:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d605a:	4618      	mov	r0, r3
   d605c:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d605e:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6060:	9105      	str	r1, [sp, #20]
   d6062:	f7fe f8cf 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
	}
   d6066:	4620      	mov	r0, r4
   d6068:	b006      	add	sp, #24
   d606a:	bd10      	pop	{r4, pc}
   d606c:	000d5c4f 	.word	0x000d5c4f
   d6070:	000d5c05 	.word	0x000d5c05

000d6074 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d6074:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d6076:	4b05      	ldr	r3, [pc, #20]	; (d608c <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d6078:	9300      	str	r3, [sp, #0]
   d607a:	4669      	mov	r1, sp
   d607c:	2300      	movs	r3, #0
   d607e:	3010      	adds	r0, #16
   d6080:	9301      	str	r3, [sp, #4]
   d6082:	f7ff ffc7 	bl	d6014 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6086:	b003      	add	sp, #12
   d6088:	f85d fb04 	ldr.w	pc, [sp], #4
   d608c:	000d60bd 	.word	0x000d60bd

000d6090 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d6090:	b513      	push	{r0, r1, r4, lr}
   d6092:	4604      	mov	r4, r0
   d6094:	f000 f9aa 	bl	d63ec <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d6098:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d609a:	1ac0      	subs	r0, r0, r3
   d609c:	68e3      	ldr	r3, [r4, #12]
   d609e:	4298      	cmp	r0, r3
   d60a0:	d308      	bcc.n	d60b4 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d60a2:	4b05      	ldr	r3, [pc, #20]	; (d60b8 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d60a4:	9300      	str	r3, [sp, #0]
   d60a6:	4669      	mov	r1, sp
   d60a8:	2300      	movs	r3, #0
   d60aa:	f104 0010 	add.w	r0, r4, #16
   d60ae:	9301      	str	r3, [sp, #4]
   d60b0:	f7ff ffb0 	bl	d6014 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d60b4:	b002      	add	sp, #8
   d60b6:	bd10      	pop	{r4, pc}
   d60b8:	000d60bd 	.word	0x000d60bd

000d60bc <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d60bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d60c0:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d60c4:	b086      	sub	sp, #24
   d60c6:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d60c8:	2b00      	cmp	r3, #0
   d60ca:	d164      	bne.n	d6196 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d60cc:	f000 fb74 	bl	d67b8 <spark_cloud_flag_connected>
   d60d0:	2800      	cmp	r0, #0
   d60d2:	d060      	beq.n	d6196 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d60d4:	f000 f98a 	bl	d63ec <HAL_Timer_Get_Milli_Seconds>
   d60d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d60da:	1ac0      	subs	r0, r0, r3
   d60dc:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d60e0:	4298      	cmp	r0, r3
   d60e2:	d958      	bls.n	d6196 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d60e4:	6823      	ldr	r3, [r4, #0]
   d60e6:	4620      	mov	r0, r4
   d60e8:	695b      	ldr	r3, [r3, #20]
   d60ea:	4798      	blx	r3
		if (data) {
   d60ec:	4605      	mov	r5, r0
   d60ee:	2800      	cmp	r0, #0
   d60f0:	d051      	beq.n	d6196 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d60f2:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d60f6:	2301      	movs	r3, #1
   d60f8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d60fc:	4638      	mov	r0, r7
   d60fe:	f002 fe92 	bl	d8e26 <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d6102:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6106:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d610a:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d610c:	682b      	ldr	r3, [r5, #0]
   d610e:	492b      	ldr	r1, [pc, #172]	; (d61bc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d6110:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d6112:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6114:	4633      	mov	r3, r6
   d6116:	482a      	ldr	r0, [pc, #168]	; (d61c0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6118:	463a      	mov	r2, r7
   d611a:	f7ff f83f 	bl	d519c <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d611e:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d6120:	f88d 8000 	strb.w	r8, [sp]
   d6124:	4632      	mov	r2, r6
   d6126:	4639      	mov	r1, r7
   d6128:	a802      	add	r0, sp, #8
   d612a:	f000 fdfb 	bl	d6d24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d612e:	9d02      	ldr	r5, [sp, #8]
   d6130:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d6132:	b91b      	cbnz	r3, d613c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d6134:	2001      	movs	r0, #1
   d6136:	f000 fc3f 	bl	d69b8 <delay>
			while(!request.isDone()) {
   d613a:	e7f8      	b.n	d612e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d613c:	2000      	movs	r0, #0
   d613e:	f000 fae5 	bl	d670c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6142:	b120      	cbz	r0, d614e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d6144:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d6146:	b913      	cbnz	r3, d614e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d6148:	f000 fb2e 	bl	d67a8 <spark_process>
    }
   d614c:	e7fa      	b.n	d6144 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d614e:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d6150:	2b01      	cmp	r3, #1
   d6152:	d123      	bne.n	d619c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d6154:	491b      	ldr	r1, [pc, #108]	; (d61c4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d6156:	481a      	ldr	r0, [pc, #104]	; (d61c0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6158:	f7ff f820 	bl	d519c <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d615c:	6823      	ldr	r3, [r4, #0]
   d615e:	2100      	movs	r1, #0
   d6160:	699b      	ldr	r3, [r3, #24]
   d6162:	4620      	mov	r0, r4
   d6164:	4798      	blx	r3
			isSending = false;
   d6166:	2300      	movs	r3, #0
   d6168:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d616c:	f000 f93e 	bl	d63ec <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d6170:	6260      	str	r0, [r4, #36]	; 0x24
	if (_M_pi != nullptr)
   d6172:	9c03      	ldr	r4, [sp, #12]
   d6174:	b17c      	cbz	r4, d6196 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d6176:	6863      	ldr	r3, [r4, #4]
   d6178:	3b01      	subs	r3, #1
   d617a:	6063      	str	r3, [r4, #4]
   d617c:	b95b      	cbnz	r3, d6196 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d617e:	6823      	ldr	r3, [r4, #0]
   d6180:	4620      	mov	r0, r4
   d6182:	689b      	ldr	r3, [r3, #8]
   d6184:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6186:	68a3      	ldr	r3, [r4, #8]
   d6188:	3b01      	subs	r3, #1
   d618a:	60a3      	str	r3, [r4, #8]
   d618c:	b91b      	cbnz	r3, d6196 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d618e:	6823      	ldr	r3, [r4, #0]
   d6190:	4620      	mov	r0, r4
   d6192:	68db      	ldr	r3, [r3, #12]
   d6194:	4798      	blx	r3
}
   d6196:	b006      	add	sp, #24
   d6198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d619c:	68e2      	ldr	r2, [r4, #12]
   d619e:	490a      	ldr	r1, [pc, #40]	; (d61c8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d61a0:	4807      	ldr	r0, [pc, #28]	; (d61c0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d61a2:	f7fe fffb 	bl	d519c <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d61a6:	4b09      	ldr	r3, [pc, #36]	; (d61cc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d61a8:	9304      	str	r3, [sp, #16]
   d61aa:	a904      	add	r1, sp, #16
   d61ac:	2300      	movs	r3, #0
   d61ae:	f104 0010 	add.w	r0, r4, #16
   d61b2:	9305      	str	r3, [sp, #20]
   d61b4:	f7ff ff2e 	bl	d6014 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d61b8:	e7d5      	b.n	d6166 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d61ba:	bf00      	nop
   d61bc:	000db1f7 	.word	0x000db1f7
   d61c0:	2003e5fc 	.word	0x2003e5fc
   d61c4:	000db218 	.word	0x000db218
   d61c8:	000db22f 	.word	0x000db22f
   d61cc:	000d6091 	.word	0x000d6091

000d61d0 <_GLOBAL__sub_I_pubqLogger>:
   d61d0:	4b01      	ldr	r3, [pc, #4]	; (d61d8 <_GLOBAL__sub_I_pubqLogger+0x8>)
   d61d2:	4a02      	ldr	r2, [pc, #8]	; (d61dc <_GLOBAL__sub_I_pubqLogger+0xc>)
   d61d4:	601a      	str	r2, [r3, #0]
}
   d61d6:	4770      	bx	lr
   d61d8:	2003e5fc 	.word	0x2003e5fc
   d61dc:	000db256 	.word	0x000db256

000d61e0 <_ZN13EnergyMonitor7currentEjd>:

void EnergyMonitor::current(unsigned int _inPinI, double _ICAL)
{
   inPinI = _inPinI;
   ICAL = _ICAL;
   offsetI = ADC_COUNTS>>1;
   d61e0:	4b03      	ldr	r3, [pc, #12]	; (d61f0 <_ZN13EnergyMonitor7currentEjd+0x10>)
   inPinI = _inPinI;
   d61e2:	62c1      	str	r1, [r0, #44]	; 0x2c
   offsetI = ADC_COUNTS>>1;
   d61e4:	2200      	movs	r2, #0
   ICAL = _ICAL;
   d61e6:	ed80 0b0e 	vstr	d0, [r0, #56]	; 0x38
   offsetI = ADC_COUNTS>>1;
   d61ea:	e9c0 231c 	strd	r2, r3, [r0, #112]	; 0x70
}
   d61ee:	4770      	bx	lr
   d61f0:	40a00000 	.word	0x40a00000
   d61f4:	00000000 	.word	0x00000000

000d61f8 <_ZN13EnergyMonitor8calcIrmsEj>:
//--------------------------------------------------------------------------------------       
}

//--------------------------------------------------------------------------------------
double EnergyMonitor::calcIrms(unsigned int Number_of_Samples)
{
   d61f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    sampleI = analogRead(inPinI);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset, 
  //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d61fc:	f8df b0c8 	ldr.w	fp, [pc, #200]	; d62c8 <_ZN13EnergyMonitor8calcIrmsEj+0xd0>
{
   d6200:	9101      	str	r1, [sp, #4]
   d6202:	4604      	mov	r4, r0
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d6204:	2500      	movs	r5, #0
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d6206:	f04f 0a00 	mov.w	sl, #0
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d620a:	9b01      	ldr	r3, [sp, #4]
   d620c:	429d      	cmp	r5, r3
   d620e:	d02f      	beq.n	d6270 <_ZN13EnergyMonitor8calcIrmsEj+0x78>
    sampleI = analogRead(inPinI);
   d6210:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
   d6212:	f001 feb3 	bl	d7f7c <analogRead>
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d6216:	e9d4 891c 	ldrd	r8, r9, [r4, #112]	; 0x70
    sampleI = analogRead(inPinI);
   d621a:	64e0      	str	r0, [r4, #76]	; 0x4c
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d621c:	f002 f98a 	bl	d8534 <__aeabi_i2d>
   d6220:	4642      	mov	r2, r8
   d6222:	464b      	mov	r3, r9
   d6224:	4606      	mov	r6, r0
   d6226:	460f      	mov	r7, r1
   d6228:	f002 f836 	bl	d8298 <__aeabi_dsub>
   d622c:	4652      	mov	r2, sl
   d622e:	465b      	mov	r3, fp
   d6230:	f002 f9ea 	bl	d8608 <__aeabi_dmul>
   d6234:	4642      	mov	r2, r8
   d6236:	464b      	mov	r3, r9
   d6238:	f002 f830 	bl	d829c <__adddf3>
   d623c:	4602      	mov	r2, r0
   d623e:	460b      	mov	r3, r1
   d6240:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
  filteredI = sampleI - offsetI;
   d6244:	4630      	mov	r0, r6
   d6246:	4639      	mov	r1, r7
   d6248:	f002 f826 	bl	d8298 <__aeabi_dsub>
   d624c:	4602      	mov	r2, r0
   d624e:	460b      	mov	r3, r1
   d6250:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d6254:	f002 f9d8 	bl	d8608 <__aeabi_dmul>
   d6258:	4602      	mov	r2, r0
   d625a:	460b      	mov	r3, r1
   d625c:	e9c4 2324 	strd	r2, r3, [r4, #144]	; 0x90
    // 2) sum 
    sumI += sqI;
   d6260:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
   d6264:	f002 f81a 	bl	d829c <__adddf3>
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d6268:	3501      	adds	r5, #1
    sumI += sqI;
   d626a:	e9c4 0126 	strd	r0, r1, [r4, #152]	; 0x98
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d626e:	e7cc      	b.n	d620a <_ZN13EnergyMonitor8calcIrmsEj+0x12>
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d6270:	a313      	add	r3, pc, #76	; (adr r3, d62c0 <_ZN13EnergyMonitor8calcIrmsEj+0xc8>)
   d6272:	e9d3 2300 	ldrd	r2, r3, [r3]
   d6276:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
   d627a:	f002 f9c5 	bl	d8608 <__aeabi_dmul>
   d627e:	4606      	mov	r6, r0
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d6280:	4628      	mov	r0, r5
  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d6282:	460f      	mov	r7, r1
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d6284:	f002 f946 	bl	d8514 <__aeabi_ui2d>
   d6288:	4602      	mov	r2, r0
   d628a:	460b      	mov	r3, r1
   d628c:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
   d6290:	f002 fae4 	bl	d885c <__aeabi_ddiv>
   d6294:	ec41 0b10 	vmov	d0, r0, r1
   d6298:	f001 fed6 	bl	d8048 <sqrt>
   d629c:	4632      	mov	r2, r6
   d629e:	463b      	mov	r3, r7
   d62a0:	ec51 0b10 	vmov	r0, r1, d0
   d62a4:	f002 f9b0 	bl	d8608 <__aeabi_dmul>
   d62a8:	ec41 0b10 	vmov	d0, r0, r1

  //Reset accumulators
  sumI = 0;
   d62ac:	2200      	movs	r2, #0
   d62ae:	2300      	movs	r3, #0
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d62b0:	e9c4 0108 	strd	r0, r1, [r4, #32]
  sumI = 0;
   d62b4:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
//--------------------------------------------------------------------------------------             
 
  return Irms;
}
   d62b8:	b003      	add	sp, #12
   d62ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d62be:	bf00      	nop
   d62c0:	66666666 	.word	0x66666666
   d62c4:	3f4a6666 	.word	0x3f4a6666
   d62c8:	3f500000 	.word	0x3f500000

000d62cc <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d62cc:	b508      	push	{r3, lr}
   d62ce:	4b02      	ldr	r3, [pc, #8]	; (d62d8 <os_thread_create+0xc>)
   d62d0:	681b      	ldr	r3, [r3, #0]
   d62d2:	685b      	ldr	r3, [r3, #4]
   d62d4:	9301      	str	r3, [sp, #4]
   d62d6:	bd08      	pop	{r3, pc}
   d62d8:	00030248 	.word	0x00030248

000d62dc <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d62dc:	b508      	push	{r3, lr}
   d62de:	4b02      	ldr	r3, [pc, #8]	; (d62e8 <os_thread_yield+0xc>)
   d62e0:	681b      	ldr	r3, [r3, #0]
   d62e2:	68db      	ldr	r3, [r3, #12]
   d62e4:	9301      	str	r3, [sp, #4]
   d62e6:	bd08      	pop	{r3, pc}
   d62e8:	00030248 	.word	0x00030248

000d62ec <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d62ec:	b508      	push	{r3, lr}
   d62ee:	4b02      	ldr	r3, [pc, #8]	; (d62f8 <os_thread_scheduling+0xc>)
   d62f0:	681b      	ldr	r3, [r3, #0]
   d62f2:	69db      	ldr	r3, [r3, #28]
   d62f4:	9301      	str	r3, [sp, #4]
   d62f6:	bd08      	pop	{r3, pc}
   d62f8:	00030248 	.word	0x00030248

000d62fc <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d62fc:	b508      	push	{r3, lr}
   d62fe:	4b02      	ldr	r3, [pc, #8]	; (d6308 <os_timer_create+0xc>)
   d6300:	681b      	ldr	r3, [r3, #0]
   d6302:	6a1b      	ldr	r3, [r3, #32]
   d6304:	9301      	str	r3, [sp, #4]
   d6306:	bd08      	pop	{r3, pc}
   d6308:	00030248 	.word	0x00030248

000d630c <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d630c:	b508      	push	{r3, lr}
   d630e:	4b02      	ldr	r3, [pc, #8]	; (d6318 <os_timer_destroy+0xc>)
   d6310:	681b      	ldr	r3, [r3, #0]
   d6312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6314:	9301      	str	r3, [sp, #4]
   d6316:	bd08      	pop	{r3, pc}
   d6318:	00030248 	.word	0x00030248

000d631c <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d631c:	b508      	push	{r3, lr}
   d631e:	4b02      	ldr	r3, [pc, #8]	; (d6328 <os_timer_get_id+0xc>)
   d6320:	681b      	ldr	r3, [r3, #0]
   d6322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6324:	9301      	str	r3, [sp, #4]
   d6326:	bd08      	pop	{r3, pc}
   d6328:	00030248 	.word	0x00030248

000d632c <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d632c:	b508      	push	{r3, lr}
   d632e:	4b02      	ldr	r3, [pc, #8]	; (d6338 <os_timer_change+0xc>)
   d6330:	681b      	ldr	r3, [r3, #0]
   d6332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6334:	9301      	str	r3, [sp, #4]
   d6336:	bd08      	pop	{r3, pc}
   d6338:	00030248 	.word	0x00030248

000d633c <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d633c:	b508      	push	{r3, lr}
   d633e:	4b02      	ldr	r3, [pc, #8]	; (d6348 <os_mutex_create+0xc>)
   d6340:	681b      	ldr	r3, [r3, #0]
   d6342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6344:	9301      	str	r3, [sp, #4]
   d6346:	bd08      	pop	{r3, pc}
   d6348:	00030248 	.word	0x00030248

000d634c <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d634c:	b508      	push	{r3, lr}
   d634e:	4b02      	ldr	r3, [pc, #8]	; (d6358 <os_mutex_lock+0xc>)
   d6350:	681b      	ldr	r3, [r3, #0]
   d6352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6354:	9301      	str	r3, [sp, #4]
   d6356:	bd08      	pop	{r3, pc}
   d6358:	00030248 	.word	0x00030248

000d635c <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d635c:	b508      	push	{r3, lr}
   d635e:	4b02      	ldr	r3, [pc, #8]	; (d6368 <os_mutex_unlock+0xc>)
   d6360:	681b      	ldr	r3, [r3, #0]
   d6362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6364:	9301      	str	r3, [sp, #4]
   d6366:	bd08      	pop	{r3, pc}
   d6368:	00030248 	.word	0x00030248

000d636c <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d636c:	b508      	push	{r3, lr}
   d636e:	4b02      	ldr	r3, [pc, #8]	; (d6378 <os_mutex_recursive_create+0xc>)
   d6370:	681b      	ldr	r3, [r3, #0]
   d6372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6374:	9301      	str	r3, [sp, #4]
   d6376:	bd08      	pop	{r3, pc}
   d6378:	00030248 	.word	0x00030248

000d637c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d637c:	b508      	push	{r3, lr}
   d637e:	4b02      	ldr	r3, [pc, #8]	; (d6388 <os_mutex_recursive_destroy+0xc>)
   d6380:	681b      	ldr	r3, [r3, #0]
   d6382:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6384:	9301      	str	r3, [sp, #4]
   d6386:	bd08      	pop	{r3, pc}
   d6388:	00030248 	.word	0x00030248

000d638c <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d638c:	b508      	push	{r3, lr}
   d638e:	4b02      	ldr	r3, [pc, #8]	; (d6398 <os_thread_exit+0xc>)
   d6390:	681b      	ldr	r3, [r3, #0]
   d6392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d6394:	9301      	str	r3, [sp, #4]
   d6396:	bd08      	pop	{r3, pc}
   d6398:	00030248 	.word	0x00030248

000d639c <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d639c:	b508      	push	{r3, lr}
   d639e:	4b02      	ldr	r3, [pc, #8]	; (d63a8 <os_timer_set_id+0xc>)
   d63a0:	681b      	ldr	r3, [r3, #0]
   d63a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d63a4:	9301      	str	r3, [sp, #4]
   d63a6:	bd08      	pop	{r3, pc}
   d63a8:	00030248 	.word	0x00030248

000d63ac <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d63ac:	b508      	push	{r3, lr}
   d63ae:	4b02      	ldr	r3, [pc, #8]	; (d63b8 <HAL_Feature_Set+0xc>)
   d63b0:	681b      	ldr	r3, [r3, #0]
   d63b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d63b4:	9301      	str	r3, [sp, #4]
   d63b6:	bd08      	pop	{r3, pc}
   d63b8:	00030234 	.word	0x00030234

000d63bc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d63bc:	b508      	push	{r3, lr}
   d63be:	4b02      	ldr	r3, [pc, #8]	; (d63c8 <HAL_RNG_GetRandomNumber+0xc>)
   d63c0:	681b      	ldr	r3, [r3, #0]
   d63c2:	685b      	ldr	r3, [r3, #4]
   d63c4:	9301      	str	r3, [sp, #4]
   d63c6:	bd08      	pop	{r3, pc}
   d63c8:	00030218 	.word	0x00030218

000d63cc <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d63cc:	b508      	push	{r3, lr}
   d63ce:	4b02      	ldr	r3, [pc, #8]	; (d63d8 <HAL_Delay_Milliseconds+0xc>)
   d63d0:	681b      	ldr	r3, [r3, #0]
   d63d2:	689b      	ldr	r3, [r3, #8]
   d63d4:	9301      	str	r3, [sp, #4]
   d63d6:	bd08      	pop	{r3, pc}
   d63d8:	00030218 	.word	0x00030218

000d63dc <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d63dc:	b508      	push	{r3, lr}
   d63de:	4b02      	ldr	r3, [pc, #8]	; (d63e8 <HAL_Delay_Microseconds+0xc>)
   d63e0:	681b      	ldr	r3, [r3, #0]
   d63e2:	68db      	ldr	r3, [r3, #12]
   d63e4:	9301      	str	r3, [sp, #4]
   d63e6:	bd08      	pop	{r3, pc}
   d63e8:	00030218 	.word	0x00030218

000d63ec <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d63ec:	b508      	push	{r3, lr}
   d63ee:	4b02      	ldr	r3, [pc, #8]	; (d63f8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d63f0:	681b      	ldr	r3, [r3, #0]
   d63f2:	695b      	ldr	r3, [r3, #20]
   d63f4:	9301      	str	r3, [sp, #4]
   d63f6:	bd08      	pop	{r3, pc}
   d63f8:	00030218 	.word	0x00030218

000d63fc <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d63fc:	b508      	push	{r3, lr}
   d63fe:	4b02      	ldr	r3, [pc, #8]	; (d6408 <hal_rtc_time_is_valid+0xc>)
   d6400:	681b      	ldr	r3, [r3, #0]
   d6402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6404:	9301      	str	r3, [sp, #4]
   d6406:	bd08      	pop	{r3, pc}
   d6408:	00030218 	.word	0x00030218

000d640c <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d640c:	b508      	push	{r3, lr}
   d640e:	4b02      	ldr	r3, [pc, #8]	; (d6418 <hal_timer_millis+0xc>)
   d6410:	681b      	ldr	r3, [r3, #0]
   d6412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6414:	9301      	str	r3, [sp, #4]
   d6416:	bd08      	pop	{r3, pc}
   d6418:	00030218 	.word	0x00030218

000d641c <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d641c:	b508      	push	{r3, lr}
   d641e:	4b02      	ldr	r3, [pc, #8]	; (d6428 <hal_rtc_get_time+0xc>)
   d6420:	681b      	ldr	r3, [r3, #0]
   d6422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6424:	9301      	str	r3, [sp, #4]
   d6426:	bd08      	pop	{r3, pc}
   d6428:	00030218 	.word	0x00030218

000d642c <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d642c:	b508      	push	{r3, lr}
   d642e:	4b02      	ldr	r3, [pc, #8]	; (d6438 <hal_rtc_set_time+0xc>)
   d6430:	681b      	ldr	r3, [r3, #0]
   d6432:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d6434:	9301      	str	r3, [sp, #4]
   d6436:	bd08      	pop	{r3, pc}
   d6438:	00030218 	.word	0x00030218

000d643c <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d643c:	b508      	push	{r3, lr}
   d643e:	4b02      	ldr	r3, [pc, #8]	; (d6448 <HAL_Validate_Pin_Function+0xc>)
   d6440:	681b      	ldr	r3, [r3, #0]
   d6442:	685b      	ldr	r3, [r3, #4]
   d6444:	9301      	str	r3, [sp, #4]
   d6446:	bd08      	pop	{r3, pc}
   d6448:	0003022c 	.word	0x0003022c

000d644c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d644c:	b508      	push	{r3, lr}
   d644e:	4b02      	ldr	r3, [pc, #8]	; (d6458 <HAL_Pin_Mode+0xc>)
   d6450:	681b      	ldr	r3, [r3, #0]
   d6452:	689b      	ldr	r3, [r3, #8]
   d6454:	9301      	str	r3, [sp, #4]
   d6456:	bd08      	pop	{r3, pc}
   d6458:	0003022c 	.word	0x0003022c

000d645c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d645c:	b508      	push	{r3, lr}
   d645e:	4b02      	ldr	r3, [pc, #8]	; (d6468 <HAL_Get_Pin_Mode+0xc>)
   d6460:	681b      	ldr	r3, [r3, #0]
   d6462:	68db      	ldr	r3, [r3, #12]
   d6464:	9301      	str	r3, [sp, #4]
   d6466:	bd08      	pop	{r3, pc}
   d6468:	0003022c 	.word	0x0003022c

000d646c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d646c:	b508      	push	{r3, lr}
   d646e:	4b02      	ldr	r3, [pc, #8]	; (d6478 <HAL_GPIO_Write+0xc>)
   d6470:	681b      	ldr	r3, [r3, #0]
   d6472:	691b      	ldr	r3, [r3, #16]
   d6474:	9301      	str	r3, [sp, #4]
   d6476:	bd08      	pop	{r3, pc}
   d6478:	0003022c 	.word	0x0003022c

000d647c <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d647c:	b508      	push	{r3, lr}
   d647e:	4b02      	ldr	r3, [pc, #8]	; (d6488 <HAL_Interrupts_Attach+0xc>)
   d6480:	681b      	ldr	r3, [r3, #0]
   d6482:	699b      	ldr	r3, [r3, #24]
   d6484:	9301      	str	r3, [sp, #4]
   d6486:	bd08      	pop	{r3, pc}
   d6488:	0003022c 	.word	0x0003022c

000d648c <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d648c:	b508      	push	{r3, lr}
   d648e:	4b02      	ldr	r3, [pc, #8]	; (d6498 <HAL_Interrupts_Detach+0xc>)
   d6490:	681b      	ldr	r3, [r3, #0]
   d6492:	69db      	ldr	r3, [r3, #28]
   d6494:	9301      	str	r3, [sp, #4]
   d6496:	bd08      	pop	{r3, pc}
   d6498:	0003022c 	.word	0x0003022c

000d649c <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d649c:	b508      	push	{r3, lr}
   d649e:	4b02      	ldr	r3, [pc, #8]	; (d64a8 <hal_adc_read+0xc>)
   d64a0:	681b      	ldr	r3, [r3, #0]
   d64a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d64a4:	9301      	str	r3, [sp, #4]
   d64a6:	bd08      	pop	{r3, pc}
   d64a8:	0003022c 	.word	0x0003022c

000d64ac <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d64ac:	b508      	push	{r3, lr}
   d64ae:	4b02      	ldr	r3, [pc, #8]	; (d64b8 <hal_i2c_begin+0xc>)
   d64b0:	681b      	ldr	r3, [r3, #0]
   d64b2:	68db      	ldr	r3, [r3, #12]
   d64b4:	9301      	str	r3, [sp, #4]
   d64b6:	bd08      	pop	{r3, pc}
   d64b8:	00030228 	.word	0x00030228

000d64bc <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d64bc:	b508      	push	{r3, lr}
   d64be:	4b02      	ldr	r3, [pc, #8]	; (d64c8 <hal_i2c_begin_transmission+0xc>)
   d64c0:	681b      	ldr	r3, [r3, #0]
   d64c2:	699b      	ldr	r3, [r3, #24]
   d64c4:	9301      	str	r3, [sp, #4]
   d64c6:	bd08      	pop	{r3, pc}
   d64c8:	00030228 	.word	0x00030228

000d64cc <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d64cc:	b508      	push	{r3, lr}
   d64ce:	4b02      	ldr	r3, [pc, #8]	; (d64d8 <hal_i2c_end_transmission+0xc>)
   d64d0:	681b      	ldr	r3, [r3, #0]
   d64d2:	69db      	ldr	r3, [r3, #28]
   d64d4:	9301      	str	r3, [sp, #4]
   d64d6:	bd08      	pop	{r3, pc}
   d64d8:	00030228 	.word	0x00030228

000d64dc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d64dc:	b508      	push	{r3, lr}
   d64de:	4b02      	ldr	r3, [pc, #8]	; (d64e8 <hal_i2c_write+0xc>)
   d64e0:	681b      	ldr	r3, [r3, #0]
   d64e2:	6a1b      	ldr	r3, [r3, #32]
   d64e4:	9301      	str	r3, [sp, #4]
   d64e6:	bd08      	pop	{r3, pc}
   d64e8:	00030228 	.word	0x00030228

000d64ec <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d64ec:	b508      	push	{r3, lr}
   d64ee:	4b02      	ldr	r3, [pc, #8]	; (d64f8 <hal_i2c_available+0xc>)
   d64f0:	681b      	ldr	r3, [r3, #0]
   d64f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d64f4:	9301      	str	r3, [sp, #4]
   d64f6:	bd08      	pop	{r3, pc}
   d64f8:	00030228 	.word	0x00030228

000d64fc <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d64fc:	b508      	push	{r3, lr}
   d64fe:	4b02      	ldr	r3, [pc, #8]	; (d6508 <hal_i2c_read+0xc>)
   d6500:	681b      	ldr	r3, [r3, #0]
   d6502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6504:	9301      	str	r3, [sp, #4]
   d6506:	bd08      	pop	{r3, pc}
   d6508:	00030228 	.word	0x00030228

000d650c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d650c:	b508      	push	{r3, lr}
   d650e:	4b02      	ldr	r3, [pc, #8]	; (d6518 <hal_i2c_peek+0xc>)
   d6510:	681b      	ldr	r3, [r3, #0]
   d6512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6514:	9301      	str	r3, [sp, #4]
   d6516:	bd08      	pop	{r3, pc}
   d6518:	00030228 	.word	0x00030228

000d651c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d651c:	b508      	push	{r3, lr}
   d651e:	4b02      	ldr	r3, [pc, #8]	; (d6528 <hal_i2c_flush+0xc>)
   d6520:	681b      	ldr	r3, [r3, #0]
   d6522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6524:	9301      	str	r3, [sp, #4]
   d6526:	bd08      	pop	{r3, pc}
   d6528:	00030228 	.word	0x00030228

000d652c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d652c:	b508      	push	{r3, lr}
   d652e:	4b02      	ldr	r3, [pc, #8]	; (d6538 <hal_i2c_is_enabled+0xc>)
   d6530:	681b      	ldr	r3, [r3, #0]
   d6532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6534:	9301      	str	r3, [sp, #4]
   d6536:	bd08      	pop	{r3, pc}
   d6538:	00030228 	.word	0x00030228

000d653c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d653c:	b508      	push	{r3, lr}
   d653e:	4b02      	ldr	r3, [pc, #8]	; (d6548 <hal_i2c_init+0xc>)
   d6540:	681b      	ldr	r3, [r3, #0]
   d6542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6544:	9301      	str	r3, [sp, #4]
   d6546:	bd08      	pop	{r3, pc}
   d6548:	00030228 	.word	0x00030228

000d654c <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d654c:	b508      	push	{r3, lr}
   d654e:	4b02      	ldr	r3, [pc, #8]	; (d6558 <hal_i2c_lock+0xc>)
   d6550:	681b      	ldr	r3, [r3, #0]
   d6552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6554:	9301      	str	r3, [sp, #4]
   d6556:	bd08      	pop	{r3, pc}
   d6558:	00030228 	.word	0x00030228

000d655c <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d655c:	b508      	push	{r3, lr}
   d655e:	4b02      	ldr	r3, [pc, #8]	; (d6568 <hal_i2c_unlock+0xc>)
   d6560:	681b      	ldr	r3, [r3, #0]
   d6562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6564:	9301      	str	r3, [sp, #4]
   d6566:	bd08      	pop	{r3, pc}
   d6568:	00030228 	.word	0x00030228

000d656c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d656c:	b508      	push	{r3, lr}
   d656e:	4b02      	ldr	r3, [pc, #8]	; (d6578 <hal_i2c_request_ex+0xc>)
   d6570:	681b      	ldr	r3, [r3, #0]
   d6572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6574:	9301      	str	r3, [sp, #4]
   d6576:	bd08      	pop	{r3, pc}
   d6578:	00030228 	.word	0x00030228

000d657c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d657c:	b508      	push	{r3, lr}
   d657e:	4b02      	ldr	r3, [pc, #8]	; (d6588 <inet_inet_ntop+0xc>)
   d6580:	681b      	ldr	r3, [r3, #0]
   d6582:	695b      	ldr	r3, [r3, #20]
   d6584:	9301      	str	r3, [sp, #4]
   d6586:	bd08      	pop	{r3, pc}
   d6588:	00030264 	.word	0x00030264

000d658c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d658c:	b508      	push	{r3, lr}
   d658e:	4b02      	ldr	r3, [pc, #8]	; (d6598 <netdb_freeaddrinfo+0xc>)
   d6590:	681b      	ldr	r3, [r3, #0]
   d6592:	689b      	ldr	r3, [r3, #8]
   d6594:	9301      	str	r3, [sp, #4]
   d6596:	bd08      	pop	{r3, pc}
   d6598:	00030268 	.word	0x00030268

000d659c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d659c:	b508      	push	{r3, lr}
   d659e:	4b02      	ldr	r3, [pc, #8]	; (d65a8 <netdb_getaddrinfo+0xc>)
   d65a0:	681b      	ldr	r3, [r3, #0]
   d65a2:	68db      	ldr	r3, [r3, #12]
   d65a4:	9301      	str	r3, [sp, #4]
   d65a6:	bd08      	pop	{r3, pc}
   d65a8:	00030268 	.word	0x00030268

000d65ac <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d65ac:	b508      	push	{r3, lr}
   d65ae:	4b02      	ldr	r3, [pc, #8]	; (d65b8 <hal_spi_init+0xc>)
   d65b0:	681b      	ldr	r3, [r3, #0]
   d65b2:	69db      	ldr	r3, [r3, #28]
   d65b4:	9301      	str	r3, [sp, #4]
   d65b6:	bd08      	pop	{r3, pc}
   d65b8:	00030230 	.word	0x00030230

000d65bc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d65bc:	b508      	push	{r3, lr}
   d65be:	4b02      	ldr	r3, [pc, #8]	; (d65c8 <hal_spi_is_enabled+0xc>)
   d65c0:	681b      	ldr	r3, [r3, #0]
   d65c2:	6a1b      	ldr	r3, [r3, #32]
   d65c4:	9301      	str	r3, [sp, #4]
   d65c6:	bd08      	pop	{r3, pc}
   d65c8:	00030230 	.word	0x00030230

000d65cc <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d65cc:	b508      	push	{r3, lr}
   d65ce:	4b02      	ldr	r3, [pc, #8]	; (d65d8 <hal_usart_init+0xc>)
   d65d0:	681b      	ldr	r3, [r3, #0]
   d65d2:	681b      	ldr	r3, [r3, #0]
   d65d4:	9301      	str	r3, [sp, #4]
   d65d6:	bd08      	pop	{r3, pc}
   d65d8:	0003023c 	.word	0x0003023c

000d65dc <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d65dc:	b508      	push	{r3, lr}
   d65de:	4b02      	ldr	r3, [pc, #8]	; (d65e8 <hal_usart_write+0xc>)
   d65e0:	681b      	ldr	r3, [r3, #0]
   d65e2:	68db      	ldr	r3, [r3, #12]
   d65e4:	9301      	str	r3, [sp, #4]
   d65e6:	bd08      	pop	{r3, pc}
   d65e8:	0003023c 	.word	0x0003023c

000d65ec <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d65ec:	b508      	push	{r3, lr}
   d65ee:	4b02      	ldr	r3, [pc, #8]	; (d65f8 <hal_usart_available+0xc>)
   d65f0:	681b      	ldr	r3, [r3, #0]
   d65f2:	691b      	ldr	r3, [r3, #16]
   d65f4:	9301      	str	r3, [sp, #4]
   d65f6:	bd08      	pop	{r3, pc}
   d65f8:	0003023c 	.word	0x0003023c

000d65fc <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d65fc:	b508      	push	{r3, lr}
   d65fe:	4b02      	ldr	r3, [pc, #8]	; (d6608 <hal_usart_read+0xc>)
   d6600:	681b      	ldr	r3, [r3, #0]
   d6602:	695b      	ldr	r3, [r3, #20]
   d6604:	9301      	str	r3, [sp, #4]
   d6606:	bd08      	pop	{r3, pc}
   d6608:	0003023c 	.word	0x0003023c

000d660c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d660c:	b508      	push	{r3, lr}
   d660e:	4b02      	ldr	r3, [pc, #8]	; (d6618 <hal_usart_peek+0xc>)
   d6610:	681b      	ldr	r3, [r3, #0]
   d6612:	699b      	ldr	r3, [r3, #24]
   d6614:	9301      	str	r3, [sp, #4]
   d6616:	bd08      	pop	{r3, pc}
   d6618:	0003023c 	.word	0x0003023c

000d661c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d661c:	b508      	push	{r3, lr}
   d661e:	4b02      	ldr	r3, [pc, #8]	; (d6628 <hal_usart_flush+0xc>)
   d6620:	681b      	ldr	r3, [r3, #0]
   d6622:	69db      	ldr	r3, [r3, #28]
   d6624:	9301      	str	r3, [sp, #4]
   d6626:	bd08      	pop	{r3, pc}
   d6628:	0003023c 	.word	0x0003023c

000d662c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d662c:	b508      	push	{r3, lr}
   d662e:	4b02      	ldr	r3, [pc, #8]	; (d6638 <hal_usart_is_enabled+0xc>)
   d6630:	681b      	ldr	r3, [r3, #0]
   d6632:	6a1b      	ldr	r3, [r3, #32]
   d6634:	9301      	str	r3, [sp, #4]
   d6636:	bd08      	pop	{r3, pc}
   d6638:	0003023c 	.word	0x0003023c

000d663c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d663c:	b508      	push	{r3, lr}
   d663e:	4b02      	ldr	r3, [pc, #8]	; (d6648 <hal_usart_available_data_for_write+0xc>)
   d6640:	681b      	ldr	r3, [r3, #0]
   d6642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6644:	9301      	str	r3, [sp, #4]
   d6646:	bd08      	pop	{r3, pc}
   d6648:	0003023c 	.word	0x0003023c

000d664c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d664c:	b508      	push	{r3, lr}
   d664e:	4b02      	ldr	r3, [pc, #8]	; (d6658 <HAL_USB_USART_Init+0xc>)
   d6650:	681b      	ldr	r3, [r3, #0]
   d6652:	681b      	ldr	r3, [r3, #0]
   d6654:	9301      	str	r3, [sp, #4]
   d6656:	bd08      	pop	{r3, pc}
   d6658:	0003024c 	.word	0x0003024c

000d665c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d665c:	b508      	push	{r3, lr}
   d665e:	4b02      	ldr	r3, [pc, #8]	; (d6668 <HAL_USB_USART_Available_Data+0xc>)
   d6660:	681b      	ldr	r3, [r3, #0]
   d6662:	691b      	ldr	r3, [r3, #16]
   d6664:	9301      	str	r3, [sp, #4]
   d6666:	bd08      	pop	{r3, pc}
   d6668:	0003024c 	.word	0x0003024c

000d666c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d666c:	b508      	push	{r3, lr}
   d666e:	4b02      	ldr	r3, [pc, #8]	; (d6678 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6670:	681b      	ldr	r3, [r3, #0]
   d6672:	695b      	ldr	r3, [r3, #20]
   d6674:	9301      	str	r3, [sp, #4]
   d6676:	bd08      	pop	{r3, pc}
   d6678:	0003024c 	.word	0x0003024c

000d667c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d667c:	b508      	push	{r3, lr}
   d667e:	4b02      	ldr	r3, [pc, #8]	; (d6688 <HAL_USB_USART_Receive_Data+0xc>)
   d6680:	681b      	ldr	r3, [r3, #0]
   d6682:	699b      	ldr	r3, [r3, #24]
   d6684:	9301      	str	r3, [sp, #4]
   d6686:	bd08      	pop	{r3, pc}
   d6688:	0003024c 	.word	0x0003024c

000d668c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d668c:	b508      	push	{r3, lr}
   d668e:	4b02      	ldr	r3, [pc, #8]	; (d6698 <HAL_USB_USART_Send_Data+0xc>)
   d6690:	681b      	ldr	r3, [r3, #0]
   d6692:	69db      	ldr	r3, [r3, #28]
   d6694:	9301      	str	r3, [sp, #4]
   d6696:	bd08      	pop	{r3, pc}
   d6698:	0003024c 	.word	0x0003024c

000d669c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d669c:	b508      	push	{r3, lr}
   d669e:	4b02      	ldr	r3, [pc, #8]	; (d66a8 <HAL_USB_USART_Flush_Data+0xc>)
   d66a0:	681b      	ldr	r3, [r3, #0]
   d66a2:	6a1b      	ldr	r3, [r3, #32]
   d66a4:	9301      	str	r3, [sp, #4]
   d66a6:	bd08      	pop	{r3, pc}
   d66a8:	0003024c 	.word	0x0003024c

000d66ac <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d66ac:	b508      	push	{r3, lr}
   d66ae:	4b02      	ldr	r3, [pc, #8]	; (d66b8 <panic_+0xc>)
   d66b0:	681b      	ldr	r3, [r3, #0]
   d66b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d66b4:	9301      	str	r3, [sp, #4]
   d66b6:	bd08      	pop	{r3, pc}
   d66b8:	00030260 	.word	0x00030260

000d66bc <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d66bc:	b508      	push	{r3, lr}
   d66be:	4b02      	ldr	r3, [pc, #8]	; (d66c8 <log_message_v+0xc>)
   d66c0:	681b      	ldr	r3, [r3, #0]
   d66c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d66c4:	9301      	str	r3, [sp, #4]
   d66c6:	bd08      	pop	{r3, pc}
   d66c8:	00030260 	.word	0x00030260

000d66cc <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d66cc:	b508      	push	{r3, lr}
   d66ce:	4b02      	ldr	r3, [pc, #8]	; (d66d8 <system_mode+0xc>)
   d66d0:	681b      	ldr	r3, [r3, #0]
   d66d2:	681b      	ldr	r3, [r3, #0]
   d66d4:	9301      	str	r3, [sp, #4]
   d66d6:	bd08      	pop	{r3, pc}
   d66d8:	00030220 	.word	0x00030220

000d66dc <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d66dc:	b508      	push	{r3, lr}
   d66de:	4b02      	ldr	r3, [pc, #8]	; (d66e8 <set_system_mode+0xc>)
   d66e0:	681b      	ldr	r3, [r3, #0]
   d66e2:	685b      	ldr	r3, [r3, #4]
   d66e4:	9301      	str	r3, [sp, #4]
   d66e6:	bd08      	pop	{r3, pc}
   d66e8:	00030220 	.word	0x00030220

000d66ec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d66ec:	b508      	push	{r3, lr}
   d66ee:	4b02      	ldr	r3, [pc, #8]	; (d66f8 <system_delay_ms+0xc>)
   d66f0:	681b      	ldr	r3, [r3, #0]
   d66f2:	695b      	ldr	r3, [r3, #20]
   d66f4:	9301      	str	r3, [sp, #4]
   d66f6:	bd08      	pop	{r3, pc}
   d66f8:	00030220 	.word	0x00030220

000d66fc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d66fc:	b508      	push	{r3, lr}
   d66fe:	4b02      	ldr	r3, [pc, #8]	; (d6708 <system_thread_set_state+0xc>)
   d6700:	681b      	ldr	r3, [r3, #0]
   d6702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6704:	9301      	str	r3, [sp, #4]
   d6706:	bd08      	pop	{r3, pc}
   d6708:	00030220 	.word	0x00030220

000d670c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d670c:	b508      	push	{r3, lr}
   d670e:	4b02      	ldr	r3, [pc, #8]	; (d6718 <application_thread_current+0xc>)
   d6710:	681b      	ldr	r3, [r3, #0]
   d6712:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6714:	9301      	str	r3, [sp, #4]
   d6716:	bd08      	pop	{r3, pc}
   d6718:	00030220 	.word	0x00030220

000d671c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d671c:	b508      	push	{r3, lr}
   d671e:	4b02      	ldr	r3, [pc, #8]	; (d6728 <application_thread_invoke+0xc>)
   d6720:	681b      	ldr	r3, [r3, #0]
   d6722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6724:	9301      	str	r3, [sp, #4]
   d6726:	bd08      	pop	{r3, pc}
   d6728:	00030220 	.word	0x00030220

000d672c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d672c:	b508      	push	{r3, lr}
   d672e:	4b02      	ldr	r3, [pc, #8]	; (d6738 <system_thread_get_state+0xc>)
   d6730:	681b      	ldr	r3, [r3, #0]
   d6732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6734:	9301      	str	r3, [sp, #4]
   d6736:	bd08      	pop	{r3, pc}
   d6738:	00030220 	.word	0x00030220

000d673c <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d673c:	b508      	push	{r3, lr}
   d673e:	4b02      	ldr	r3, [pc, #8]	; (d6748 <system_notify_time_changed+0xc>)
   d6740:	681b      	ldr	r3, [r3, #0]
   d6742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6744:	9301      	str	r3, [sp, #4]
   d6746:	bd08      	pop	{r3, pc}
   d6748:	00030220 	.word	0x00030220

000d674c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d674c:	b508      	push	{r3, lr}
   d674e:	4b03      	ldr	r3, [pc, #12]	; (d675c <system_ctrl_set_app_request_handler+0x10>)
   d6750:	681b      	ldr	r3, [r3, #0]
   d6752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6756:	9301      	str	r3, [sp, #4]
   d6758:	bd08      	pop	{r3, pc}
   d675a:	0000      	.short	0x0000
   d675c:	00030220 	.word	0x00030220

000d6760 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6760:	b508      	push	{r3, lr}
   d6762:	4b03      	ldr	r3, [pc, #12]	; (d6770 <system_ctrl_set_result+0x10>)
   d6764:	681b      	ldr	r3, [r3, #0]
   d6766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d676a:	9301      	str	r3, [sp, #4]
   d676c:	bd08      	pop	{r3, pc}
   d676e:	0000      	.short	0x0000
   d6770:	00030220 	.word	0x00030220

000d6774 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d6774:	b508      	push	{r3, lr}
   d6776:	4b03      	ldr	r3, [pc, #12]	; (d6784 <system_reset+0x10>)
   d6778:	681b      	ldr	r3, [r3, #0]
   d677a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d677e:	9301      	str	r3, [sp, #4]
   d6780:	bd08      	pop	{r3, pc}
   d6782:	0000      	.short	0x0000
   d6784:	00030220 	.word	0x00030220

000d6788 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d6788:	b508      	push	{r3, lr}
   d678a:	4b02      	ldr	r3, [pc, #8]	; (d6794 <spark_variable+0xc>)
   d678c:	681b      	ldr	r3, [r3, #0]
   d678e:	681b      	ldr	r3, [r3, #0]
   d6790:	9301      	str	r3, [sp, #4]
   d6792:	bd08      	pop	{r3, pc}
   d6794:	00030244 	.word	0x00030244

000d6798 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d6798:	b508      	push	{r3, lr}
   d679a:	4b02      	ldr	r3, [pc, #8]	; (d67a4 <spark_function+0xc>)
   d679c:	681b      	ldr	r3, [r3, #0]
   d679e:	685b      	ldr	r3, [r3, #4]
   d67a0:	9301      	str	r3, [sp, #4]
   d67a2:	bd08      	pop	{r3, pc}
   d67a4:	00030244 	.word	0x00030244

000d67a8 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d67a8:	b508      	push	{r3, lr}
   d67aa:	4b02      	ldr	r3, [pc, #8]	; (d67b4 <spark_process+0xc>)
   d67ac:	681b      	ldr	r3, [r3, #0]
   d67ae:	689b      	ldr	r3, [r3, #8]
   d67b0:	9301      	str	r3, [sp, #4]
   d67b2:	bd08      	pop	{r3, pc}
   d67b4:	00030244 	.word	0x00030244

000d67b8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d67b8:	b508      	push	{r3, lr}
   d67ba:	4b02      	ldr	r3, [pc, #8]	; (d67c4 <spark_cloud_flag_connected+0xc>)
   d67bc:	681b      	ldr	r3, [r3, #0]
   d67be:	695b      	ldr	r3, [r3, #20]
   d67c0:	9301      	str	r3, [sp, #4]
   d67c2:	bd08      	pop	{r3, pc}
   d67c4:	00030244 	.word	0x00030244

000d67c8 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d67c8:	b508      	push	{r3, lr}
   d67ca:	4b02      	ldr	r3, [pc, #8]	; (d67d4 <spark_deviceID+0xc>)
   d67cc:	681b      	ldr	r3, [r3, #0]
   d67ce:	69db      	ldr	r3, [r3, #28]
   d67d0:	9301      	str	r3, [sp, #4]
   d67d2:	bd08      	pop	{r3, pc}
   d67d4:	00030244 	.word	0x00030244

000d67d8 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d67d8:	b508      	push	{r3, lr}
   d67da:	4b02      	ldr	r3, [pc, #8]	; (d67e4 <spark_send_event+0xc>)
   d67dc:	681b      	ldr	r3, [r3, #0]
   d67de:	6a1b      	ldr	r3, [r3, #32]
   d67e0:	9301      	str	r3, [sp, #4]
   d67e2:	bd08      	pop	{r3, pc}
   d67e4:	00030244 	.word	0x00030244

000d67e8 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d67e8:	b508      	push	{r3, lr}
   d67ea:	4b02      	ldr	r3, [pc, #8]	; (d67f4 <spark_subscribe+0xc>)
   d67ec:	681b      	ldr	r3, [r3, #0]
   d67ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d67f0:	9301      	str	r3, [sp, #4]
   d67f2:	bd08      	pop	{r3, pc}
   d67f4:	00030244 	.word	0x00030244

000d67f8 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d67f8:	b508      	push	{r3, lr}
   d67fa:	4b02      	ldr	r3, [pc, #8]	; (d6804 <spark_sync_time+0xc>)
   d67fc:	681b      	ldr	r3, [r3, #0]
   d67fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6800:	9301      	str	r3, [sp, #4]
   d6802:	bd08      	pop	{r3, pc}
   d6804:	00030244 	.word	0x00030244

000d6808 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6808:	b508      	push	{r3, lr}
   d680a:	4b02      	ldr	r3, [pc, #8]	; (d6814 <spark_sync_time_pending+0xc>)
   d680c:	681b      	ldr	r3, [r3, #0]
   d680e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6810:	9301      	str	r3, [sp, #4]
   d6812:	bd08      	pop	{r3, pc}
   d6814:	00030244 	.word	0x00030244

000d6818 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d6818:	b508      	push	{r3, lr}
   d681a:	4b02      	ldr	r3, [pc, #8]	; (d6824 <spark_sync_time_last+0xc>)
   d681c:	681b      	ldr	r3, [r3, #0]
   d681e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6820:	9301      	str	r3, [sp, #4]
   d6822:	bd08      	pop	{r3, pc}
   d6824:	00030244 	.word	0x00030244

000d6828 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d6828:	b508      	push	{r3, lr}
   d682a:	4b02      	ldr	r3, [pc, #8]	; (d6834 <spark_set_connection_property+0xc>)
   d682c:	681b      	ldr	r3, [r3, #0]
   d682e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6830:	9301      	str	r3, [sp, #4]
   d6832:	bd08      	pop	{r3, pc}
   d6834:	00030244 	.word	0x00030244

000d6838 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6838:	b508      	push	{r3, lr}
   d683a:	4b02      	ldr	r3, [pc, #8]	; (d6844 <spark_set_random_seed_from_cloud_handler+0xc>)
   d683c:	681b      	ldr	r3, [r3, #0]
   d683e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6840:	9301      	str	r3, [sp, #4]
   d6842:	bd08      	pop	{r3, pc}
   d6844:	00030244 	.word	0x00030244

000d6848 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6848:	b508      	push	{r3, lr}
   d684a:	4b02      	ldr	r3, [pc, #8]	; (d6854 <network_connect+0xc>)
   d684c:	681b      	ldr	r3, [r3, #0]
   d684e:	685b      	ldr	r3, [r3, #4]
   d6850:	9301      	str	r3, [sp, #4]
   d6852:	bd08      	pop	{r3, pc}
   d6854:	00030240 	.word	0x00030240

000d6858 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6858:	b508      	push	{r3, lr}
   d685a:	4b02      	ldr	r3, [pc, #8]	; (d6864 <network_connecting+0xc>)
   d685c:	681b      	ldr	r3, [r3, #0]
   d685e:	689b      	ldr	r3, [r3, #8]
   d6860:	9301      	str	r3, [sp, #4]
   d6862:	bd08      	pop	{r3, pc}
   d6864:	00030240 	.word	0x00030240

000d6868 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6868:	b508      	push	{r3, lr}
   d686a:	4b02      	ldr	r3, [pc, #8]	; (d6874 <network_disconnect+0xc>)
   d686c:	681b      	ldr	r3, [r3, #0]
   d686e:	68db      	ldr	r3, [r3, #12]
   d6870:	9301      	str	r3, [sp, #4]
   d6872:	bd08      	pop	{r3, pc}
   d6874:	00030240 	.word	0x00030240

000d6878 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6878:	b508      	push	{r3, lr}
   d687a:	4b02      	ldr	r3, [pc, #8]	; (d6884 <network_ready+0xc>)
   d687c:	681b      	ldr	r3, [r3, #0]
   d687e:	691b      	ldr	r3, [r3, #16]
   d6880:	9301      	str	r3, [sp, #4]
   d6882:	bd08      	pop	{r3, pc}
   d6884:	00030240 	.word	0x00030240

000d6888 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6888:	b508      	push	{r3, lr}
   d688a:	4b02      	ldr	r3, [pc, #8]	; (d6894 <network_on+0xc>)
   d688c:	681b      	ldr	r3, [r3, #0]
   d688e:	695b      	ldr	r3, [r3, #20]
   d6890:	9301      	str	r3, [sp, #4]
   d6892:	bd08      	pop	{r3, pc}
   d6894:	00030240 	.word	0x00030240

000d6898 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6898:	b508      	push	{r3, lr}
   d689a:	4b02      	ldr	r3, [pc, #8]	; (d68a4 <network_off+0xc>)
   d689c:	681b      	ldr	r3, [r3, #0]
   d689e:	699b      	ldr	r3, [r3, #24]
   d68a0:	9301      	str	r3, [sp, #4]
   d68a2:	bd08      	pop	{r3, pc}
   d68a4:	00030240 	.word	0x00030240

000d68a8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d68a8:	b508      	push	{r3, lr}
   d68aa:	4b02      	ldr	r3, [pc, #8]	; (d68b4 <network_listen+0xc>)
   d68ac:	681b      	ldr	r3, [r3, #0]
   d68ae:	69db      	ldr	r3, [r3, #28]
   d68b0:	9301      	str	r3, [sp, #4]
   d68b2:	bd08      	pop	{r3, pc}
   d68b4:	00030240 	.word	0x00030240

000d68b8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d68b8:	b508      	push	{r3, lr}
   d68ba:	4b02      	ldr	r3, [pc, #8]	; (d68c4 <network_listening+0xc>)
   d68bc:	681b      	ldr	r3, [r3, #0]
   d68be:	6a1b      	ldr	r3, [r3, #32]
   d68c0:	9301      	str	r3, [sp, #4]
   d68c2:	bd08      	pop	{r3, pc}
   d68c4:	00030240 	.word	0x00030240

000d68c8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d68c8:	b508      	push	{r3, lr}
   d68ca:	4b02      	ldr	r3, [pc, #8]	; (d68d4 <network_set_listen_timeout+0xc>)
   d68cc:	681b      	ldr	r3, [r3, #0]
   d68ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d68d0:	9301      	str	r3, [sp, #4]
   d68d2:	bd08      	pop	{r3, pc}
   d68d4:	00030240 	.word	0x00030240

000d68d8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d68d8:	b508      	push	{r3, lr}
   d68da:	4b02      	ldr	r3, [pc, #8]	; (d68e4 <network_get_listen_timeout+0xc>)
   d68dc:	681b      	ldr	r3, [r3, #0]
   d68de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d68e0:	9301      	str	r3, [sp, #4]
   d68e2:	bd08      	pop	{r3, pc}
   d68e4:	00030240 	.word	0x00030240

000d68e8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d68e8:	b508      	push	{r3, lr}
   d68ea:	4b02      	ldr	r3, [pc, #8]	; (d68f4 <malloc+0xc>)
   d68ec:	681b      	ldr	r3, [r3, #0]
   d68ee:	681b      	ldr	r3, [r3, #0]
   d68f0:	9301      	str	r3, [sp, #4]
   d68f2:	bd08      	pop	{r3, pc}
   d68f4:	0003021c 	.word	0x0003021c

000d68f8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d68f8:	b508      	push	{r3, lr}
   d68fa:	4b02      	ldr	r3, [pc, #8]	; (d6904 <free+0xc>)
   d68fc:	681b      	ldr	r3, [r3, #0]
   d68fe:	685b      	ldr	r3, [r3, #4]
   d6900:	9301      	str	r3, [sp, #4]
   d6902:	bd08      	pop	{r3, pc}
   d6904:	0003021c 	.word	0x0003021c

000d6908 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6908:	b508      	push	{r3, lr}
   d690a:	4b02      	ldr	r3, [pc, #8]	; (d6914 <realloc+0xc>)
   d690c:	681b      	ldr	r3, [r3, #0]
   d690e:	689b      	ldr	r3, [r3, #8]
   d6910:	9301      	str	r3, [sp, #4]
   d6912:	bd08      	pop	{r3, pc}
   d6914:	0003021c 	.word	0x0003021c

000d6918 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d6918:	b508      	push	{r3, lr}
   d691a:	4b02      	ldr	r3, [pc, #8]	; (d6924 <siprintf+0xc>)
   d691c:	681b      	ldr	r3, [r3, #0]
   d691e:	691b      	ldr	r3, [r3, #16]
   d6920:	9301      	str	r3, [sp, #4]
   d6922:	bd08      	pop	{r3, pc}
   d6924:	0003021c 	.word	0x0003021c

000d6928 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6928:	b508      	push	{r3, lr}
   d692a:	4b02      	ldr	r3, [pc, #8]	; (d6934 <snprintf+0xc>)
   d692c:	681b      	ldr	r3, [r3, #0]
   d692e:	69db      	ldr	r3, [r3, #28]
   d6930:	9301      	str	r3, [sp, #4]
   d6932:	bd08      	pop	{r3, pc}
   d6934:	0003021c 	.word	0x0003021c

000d6938 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6938:	b508      	push	{r3, lr}
   d693a:	4b02      	ldr	r3, [pc, #8]	; (d6944 <abort+0xc>)
   d693c:	681b      	ldr	r3, [r3, #0]
   d693e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6940:	9301      	str	r3, [sp, #4]
   d6942:	bd08      	pop	{r3, pc}
   d6944:	0003021c 	.word	0x0003021c

000d6948 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6948:	b508      	push	{r3, lr}
   d694a:	4b02      	ldr	r3, [pc, #8]	; (d6954 <_malloc_r+0xc>)
   d694c:	681b      	ldr	r3, [r3, #0]
   d694e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6950:	9301      	str	r3, [sp, #4]
   d6952:	bd08      	pop	{r3, pc}
   d6954:	0003021c 	.word	0x0003021c

000d6958 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6958:	b508      	push	{r3, lr}
   d695a:	4b02      	ldr	r3, [pc, #8]	; (d6964 <__errno+0xc>)
   d695c:	681b      	ldr	r3, [r3, #0]
   d695e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6960:	9301      	str	r3, [sp, #4]
   d6962:	bd08      	pop	{r3, pc}
   d6964:	0003021c 	.word	0x0003021c

000d6968 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6968:	b508      	push	{r3, lr}
   d696a:	4b02      	ldr	r3, [pc, #8]	; (d6974 <newlib_impure_ptr_callback+0xc>)
   d696c:	681b      	ldr	r3, [r3, #0]
   d696e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6970:	9301      	str	r3, [sp, #4]
   d6972:	bd08      	pop	{r3, pc}
   d6974:	0003021c 	.word	0x0003021c

000d6978 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d6978:	b508      	push	{r3, lr}
   d697a:	4b02      	ldr	r3, [pc, #8]	; (d6984 <strftime+0xc>)
   d697c:	681b      	ldr	r3, [r3, #0]
   d697e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6980:	9301      	str	r3, [sp, #4]
   d6982:	bd08      	pop	{r3, pc}
   d6984:	0003021c 	.word	0x0003021c

000d6988 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d6988:	b508      	push	{r3, lr}
   d698a:	4b02      	ldr	r3, [pc, #8]	; (d6994 <localtime_r+0xc>)
   d698c:	681b      	ldr	r3, [r3, #0]
   d698e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6990:	9301      	str	r3, [sp, #4]
   d6992:	bd08      	pop	{r3, pc}
   d6994:	0003021c 	.word	0x0003021c

000d6998 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d6998:	b508      	push	{r3, lr}
   d699a:	4b02      	ldr	r3, [pc, #8]	; (d69a4 <gmtime_r+0xc>)
   d699c:	681b      	ldr	r3, [r3, #0]
   d699e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d69a0:	9301      	str	r3, [sp, #4]
   d69a2:	bd08      	pop	{r3, pc}
   d69a4:	0003021c 	.word	0x0003021c

000d69a8 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d69a8:	b508      	push	{r3, lr}
   d69aa:	4b02      	ldr	r3, [pc, #8]	; (d69b4 <mktime+0xc>)
   d69ac:	681b      	ldr	r3, [r3, #0]
   d69ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d69b0:	9301      	str	r3, [sp, #4]
   d69b2:	bd08      	pop	{r3, pc}
   d69b4:	0003021c 	.word	0x0003021c

000d69b8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d69b8:	2100      	movs	r1, #0
   d69ba:	f7ff be97 	b.w	d66ec <system_delay_ms>

000d69be <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d69be:	b510      	push	{r4, lr}
      if (_M_empty())
   d69c0:	6883      	ldr	r3, [r0, #8]
   d69c2:	4604      	mov	r4, r0
   d69c4:	b90b      	cbnz	r3, d69ca <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d69c6:	f001 fb3c 	bl	d8042 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d69ca:	68c3      	ldr	r3, [r0, #12]
   d69cc:	4798      	blx	r3
      if (_M_manager)
   d69ce:	68a3      	ldr	r3, [r4, #8]
   d69d0:	b11b      	cbz	r3, d69da <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d69d2:	2203      	movs	r2, #3
   d69d4:	4621      	mov	r1, r4
   d69d6:	4620      	mov	r0, r4
   d69d8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d69da:	4620      	mov	r0, r4
   d69dc:	2110      	movs	r1, #16
}
   d69de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d69e2:	f001 bb28 	b.w	d8036 <_ZdlPvj>

000d69e6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d69e6:	b510      	push	{r4, lr}
          _M_dispose();
   d69e8:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d69ea:	4604      	mov	r4, r0
          _M_dispose();
   d69ec:	689b      	ldr	r3, [r3, #8]
   d69ee:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d69f0:	68a3      	ldr	r3, [r4, #8]
   d69f2:	3b01      	subs	r3, #1
   d69f4:	60a3      	str	r3, [r4, #8]
   d69f6:	b92b      	cbnz	r3, d6a04 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d69f8:	6823      	ldr	r3, [r4, #0]
   d69fa:	4620      	mov	r0, r4
   d69fc:	68db      	ldr	r3, [r3, #12]
    }
   d69fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d6a02:	4718      	bx	r3
    }
   d6a04:	bd10      	pop	{r4, pc}

000d6a06 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6a06:	b510      	push	{r4, lr}
   d6a08:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6a0a:	6800      	ldr	r0, [r0, #0]
   d6a0c:	b108      	cbz	r0, d6a12 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6a0e:	f7ff fcb5 	bl	d637c <os_mutex_recursive_destroy>
    }
   d6a12:	4620      	mov	r0, r4
   d6a14:	bd10      	pop	{r4, pc}

000d6a16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d6a16:	680b      	ldr	r3, [r1, #0]
   d6a18:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6a1a:	b113      	cbz	r3, d6a22 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d6a1c:	685a      	ldr	r2, [r3, #4]
   d6a1e:	3201      	adds	r2, #1
   d6a20:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d6a22:	4770      	bx	lr

000d6a24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d6a24:	b510      	push	{r4, lr}
   d6a26:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d6a28:	6800      	ldr	r0, [r0, #0]
   d6a2a:	b128      	cbz	r0, d6a38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d6a2c:	6843      	ldr	r3, [r0, #4]
   d6a2e:	3b01      	subs	r3, #1
   d6a30:	6043      	str	r3, [r0, #4]
   d6a32:	b90b      	cbnz	r3, d6a38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d6a34:	f7ff ffd7 	bl	d69e6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d6a38:	4620      	mov	r0, r4
   d6a3a:	bd10      	pop	{r4, pc}

000d6a3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6a3c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d6a3e:	4c06      	ldr	r4, [pc, #24]	; (d6a58 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6a40:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d6a42:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6a44:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6a46:	f7ff fc91 	bl	d636c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6a4a:	4620      	mov	r0, r4
   d6a4c:	4a03      	ldr	r2, [pc, #12]	; (d6a5c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6a4e:	4904      	ldr	r1, [pc, #16]	; (d6a60 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d6a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6a54:	f001 baea 	b.w	d802c <__aeabi_atexit>
   d6a58:	2003e600 	.word	0x2003e600
   d6a5c:	2003e060 	.word	0x2003e060
   d6a60:	000d6a07 	.word	0x000d6a07

000d6a64 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6a64:	4770      	bx	lr

000d6a66 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d6a66:	2000      	movs	r0, #0
   d6a68:	4770      	bx	lr

000d6a6a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6a6a:	b510      	push	{r4, lr}
   d6a6c:	2110      	movs	r1, #16
   d6a6e:	4604      	mov	r4, r0
   d6a70:	f001 fae1 	bl	d8036 <_ZdlPvj>
   d6a74:	4620      	mov	r0, r4
   d6a76:	bd10      	pop	{r4, pc}

000d6a78 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d6a78:	b508      	push	{r3, lr}
      { delete this; }
   d6a7a:	f7ff fff6 	bl	d6a6a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6a7e:	bd08      	pop	{r3, pc}

000d6a80 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6a80:	b530      	push	{r4, r5, lr}
        type_(type) {
   d6a82:	2200      	movs	r2, #0
   d6a84:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d6a88:	6002      	str	r2, [r0, #0]
   d6a8a:	8084      	strh	r4, [r0, #4]
   d6a8c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6a8e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6a90:	680c      	ldr	r4, [r1, #0]
   d6a92:	8085      	strh	r5, [r0, #4]
   d6a94:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6a96:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d6a98:	bd30      	pop	{r4, r5, pc}

000d6a9a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6a9a:	b510      	push	{r4, lr}
   d6a9c:	4604      	mov	r4, r0
    free((void*)msg_);
   d6a9e:	6800      	ldr	r0, [r0, #0]
   d6aa0:	f7ff ff2a 	bl	d68f8 <free>
}
   d6aa4:	4620      	mov	r0, r4
   d6aa6:	bd10      	pop	{r4, pc}

000d6aa8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6aa8:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6aaa:	68c4      	ldr	r4, [r0, #12]
   d6aac:	b1f4      	cbz	r4, d6aec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d6aae:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6ab0:	2b02      	cmp	r3, #2
   d6ab2:	d103      	bne.n	d6abc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6ab4:	f104 000c 	add.w	r0, r4, #12
   d6ab8:	f7ff ffef 	bl	d6a9a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d6abc:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d6abe:	b135      	cbz	r5, d6ace <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d6ac0:	4628      	mov	r0, r5
   d6ac2:	f7fd fb9f 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
   d6ac6:	2110      	movs	r1, #16
   d6ac8:	4628      	mov	r0, r5
   d6aca:	f001 fab4 	bl	d8036 <_ZdlPvj>
   d6ace:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6ad0:	b135      	cbz	r5, d6ae0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6ad2:	4628      	mov	r0, r5
   d6ad4:	f7fd fb96 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
   d6ad8:	2110      	movs	r1, #16
   d6ada:	4628      	mov	r0, r5
   d6adc:	f001 faab 	bl	d8036 <_ZdlPvj>
   d6ae0:	4620      	mov	r0, r4
   d6ae2:	2114      	movs	r1, #20
   d6ae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6ae8:	f001 baa5 	b.w	d8036 <_ZdlPvj>
   d6aec:	bd38      	pop	{r3, r4, r5, pc}

000d6aee <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d6aee:	b510      	push	{r4, lr}
   d6af0:	b088      	sub	sp, #32
   d6af2:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d6af4:	4668      	mov	r0, sp
   d6af6:	f000 fd54 	bl	d75a2 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d6afa:	4669      	mov	r1, sp
   d6afc:	a804      	add	r0, sp, #16
   d6afe:	f000 fd73 	bl	d75e8 <_ZN6StringC1ERKS_>
   d6b02:	a804      	add	r0, sp, #16
   d6b04:	47a0      	blx	r4
   d6b06:	4604      	mov	r4, r0
   d6b08:	a804      	add	r0, sp, #16
   d6b0a:	f000 fcff 	bl	d750c <_ZN6StringD1Ev>
    String p(param);
   d6b0e:	4668      	mov	r0, sp
   d6b10:	f000 fcfc 	bl	d750c <_ZN6StringD1Ev>
}
   d6b14:	4620      	mov	r0, r4
   d6b16:	b008      	add	sp, #32
   d6b18:	bd10      	pop	{r4, pc}

000d6b1a <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d6b1a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d6b1c:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d6b1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d6b22:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d6b24:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d6b26:	461a      	mov	r2, r3
   d6b28:	4669      	mov	r1, sp
   d6b2a:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d6b2c:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d6b30:	f8ad 4000 	strh.w	r4, [sp]
   d6b34:	f7ff fe30 	bl	d6798 <spark_function>
}
   d6b38:	b004      	add	sp, #16
   d6b3a:	bd10      	pop	{r4, pc}

000d6b3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6b3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6b3e:	460e      	mov	r6, r1
   d6b40:	4604      	mov	r4, r0
   d6b42:	f856 3b04 	ldr.w	r3, [r6], #4
   d6b46:	9300      	str	r3, [sp, #0]
   d6b48:	460d      	mov	r5, r1
   d6b4a:	a801      	add	r0, sp, #4
   d6b4c:	4631      	mov	r1, r6
   d6b4e:	f7ff ff62 	bl	d6a16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6b52:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6b54:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d6b56:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6b58:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d6b5a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d6b5c:	2300      	movs	r3, #0
   d6b5e:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6b60:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d6b62:	f7ff ff5f 	bl	d6a24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6b66:	4630      	mov	r0, r6
   d6b68:	f7ff ff5c 	bl	d6a24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d6b6c:	4628      	mov	r0, r5
   d6b6e:	2108      	movs	r1, #8
   d6b70:	f001 fa61 	bl	d8036 <_ZdlPvj>
        return p;
    }
   d6b74:	4620      	mov	r0, r4
   d6b76:	b002      	add	sp, #8
   d6b78:	bd70      	pop	{r4, r5, r6, pc}

000d6b7a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d6b7a:	b513      	push	{r0, r1, r4, lr}
   d6b7c:	460b      	mov	r3, r1
   d6b7e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b80:	e9d0 0100 	ldrd	r0, r1, [r0]
   d6b84:	466c      	mov	r4, sp
   d6b86:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6b8a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6b8e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6b92:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6b96:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6b9a:	b002      	add	sp, #8
   d6b9c:	bd10      	pop	{r4, pc}

000d6b9e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d6b9e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6ba0:	b510      	push	{r4, lr}
      if (_M_empty())
   d6ba2:	b90a      	cbnz	r2, d6ba8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6ba4:	f001 fa4d 	bl	d8042 <_ZSt25__throw_bad_function_callv>
    }
   d6ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6bac:	68c3      	ldr	r3, [r0, #12]
   d6bae:	4718      	bx	r3

000d6bb0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6bb0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6bb2:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d6bb4:	f100 0110 	add.w	r1, r0, #16
   d6bb8:	f7ff fff1 	bl	d6b9e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d6bbc:	bd08      	pop	{r3, pc}

000d6bbe <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d6bbe:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6bc0:	b510      	push	{r4, lr}
      if (_M_empty())
   d6bc2:	b90a      	cbnz	r2, d6bc8 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6bc4:	f001 fa3d 	bl	d8042 <_ZSt25__throw_bad_function_callv>
    }
   d6bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6bcc:	68c3      	ldr	r3, [r0, #12]
   d6bce:	4718      	bx	r3

000d6bd0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6bd0:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6bd2:	6800      	ldr	r0, [r0, #0]
   d6bd4:	f100 0110 	add.w	r1, r0, #16
   d6bd8:	f7ff fff1 	bl	d6bbe <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d6bdc:	bd08      	pop	{r3, pc}
	...

000d6be0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d6be0:	b538      	push	{r3, r4, r5, lr}
   d6be2:	2300      	movs	r3, #0
   d6be4:	4604      	mov	r4, r0
   d6be6:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6be8:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d6bea:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6bec:	f7fd fa53 	bl	d4096 <_Znwj>
   d6bf0:	b128      	cbz	r0, d6bfe <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d6bf2:	2301      	movs	r3, #1
   d6bf4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d6bf8:	4b02      	ldr	r3, [pc, #8]	; (d6c04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6bfa:	6003      	str	r3, [r0, #0]
   d6bfc:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6bfe:	6020      	str	r0, [r4, #0]
	}
   d6c00:	4620      	mov	r0, r4
   d6c02:	bd38      	pop	{r3, r4, r5, pc}
   d6c04:	000db2b8 	.word	0x000db2b8

000d6c08 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d6c08:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6c0a:	2300      	movs	r3, #0
   d6c0c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6c0e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6c10:	4604      	mov	r4, r0
   d6c12:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6c14:	b12b      	cbz	r3, d6c22 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6c16:	2202      	movs	r2, #2
   d6c18:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6c1a:	68eb      	ldr	r3, [r5, #12]
   d6c1c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6c1e:	68ab      	ldr	r3, [r5, #8]
   d6c20:	60a3      	str	r3, [r4, #8]
    }
   d6c22:	4620      	mov	r0, r4
   d6c24:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6c28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d6c28:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6c2a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6c2c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6c2e:	4668      	mov	r0, sp
   d6c30:	f7ff ff26 	bl	d6a80 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6c34:	f04f 0302 	mov.w	r3, #2
   d6c38:	e8d4 2f4f 	ldrexb	r2, [r4]
   d6c3c:	2a00      	cmp	r2, #0
   d6c3e:	d103      	bne.n	d6c48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d6c40:	e8c4 3f41 	strexb	r1, r3, [r4]
   d6c44:	2900      	cmp	r1, #0
   d6c46:	d1f7      	bne.n	d6c38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6c48:	d125      	bne.n	d6c96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d6c4a:	f104 050c 	add.w	r5, r4, #12
   d6c4e:	4669      	mov	r1, sp
   d6c50:	4628      	mov	r0, r5
   d6c52:	f7ff ff15 	bl	d6a80 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d6c56:	f3bf 8f5b 	dmb	ish
   d6c5a:	2301      	movs	r3, #1
   d6c5c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6c5e:	2000      	movs	r0, #0
   d6c60:	f104 0308 	add.w	r3, r4, #8
   d6c64:	f3bf 8f5b 	dmb	ish
   d6c68:	e853 6f00 	ldrex	r6, [r3]
   d6c6c:	e843 0200 	strex	r2, r0, [r3]
   d6c70:	2a00      	cmp	r2, #0
   d6c72:	d1f9      	bne.n	d6c68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d6c74:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6c78:	b16e      	cbz	r6, d6c96 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d6c7a:	f7ff fd47 	bl	d670c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6c7e:	b178      	cbz	r0, d6ca0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6c80:	4629      	mov	r1, r5
   d6c82:	4630      	mov	r0, r6
   d6c84:	f7ff ff8b 	bl	d6b9e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d6c88:	4630      	mov	r0, r6
   d6c8a:	f7fd fabb 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6c8e:	2110      	movs	r1, #16
   d6c90:	4630      	mov	r0, r6
   d6c92:	f001 f9d0 	bl	d8036 <_ZdlPvj>
        p_->setError(std::move(error));
   d6c96:	4668      	mov	r0, sp
   d6c98:	f7ff feff 	bl	d6a9a <_ZN8particle5ErrorD1Ev>
    }
   d6c9c:	b009      	add	sp, #36	; 0x24
   d6c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6ca0:	4631      	mov	r1, r6
   d6ca2:	a802      	add	r0, sp, #8
   d6ca4:	f7ff ffb0 	bl	d6c08 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6ca8:	68e0      	ldr	r0, [r4, #12]
   d6caa:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6cae:	b108      	cbz	r0, d6cb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d6cb0:	f002 f89c 	bl	d8dec <strdup>
        type_(type) {
   d6cb4:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6cb6:	2010      	movs	r0, #16
   d6cb8:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6cbc:	f7fd f9eb 	bl	d4096 <_Znwj>
   d6cc0:	4605      	mov	r5, r0
   d6cc2:	b1e8      	cbz	r0, d6d00 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d6cc4:	2700      	movs	r7, #0
   d6cc6:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6cc8:	2018      	movs	r0, #24
   d6cca:	f7fd f9e4 	bl	d4096 <_Znwj>
   d6cce:	4604      	mov	r4, r0
   d6cd0:	b188      	cbz	r0, d6cf6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d6cd2:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d6cd4:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6cd6:	a802      	add	r0, sp, #8
   d6cd8:	f7ff ff4f 	bl	d6b7a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6cdc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6cde:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6ce0:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ce2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6ce4:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6ce6:	a906      	add	r1, sp, #24
   d6ce8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6cea:	60e3      	str	r3, [r4, #12]
   d6cec:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d6cf0:	9205      	str	r2, [sp, #20]
   d6cf2:	f7ff fec5 	bl	d6a80 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d6cf6:	4b08      	ldr	r3, [pc, #32]	; (d6d18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d6cf8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6cfa:	4b08      	ldr	r3, [pc, #32]	; (d6d1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6cfc:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6cfe:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d6d00:	a806      	add	r0, sp, #24
   d6d02:	f7ff feca 	bl	d6a9a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6d06:	a802      	add	r0, sp, #8
   d6d08:	f7fd fa7c 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6d0c:	2200      	movs	r2, #0
   d6d0e:	4629      	mov	r1, r5
   d6d10:	4803      	ldr	r0, [pc, #12]	; (d6d20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d6d12:	f7ff fd03 	bl	d671c <application_thread_invoke>
   d6d16:	e7b7      	b.n	d6c88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d6d18:	000d6bb1 	.word	0x000d6bb1
   d6d1c:	000d6e49 	.word	0x000d6e49
   d6d20:	000d69bf 	.word	0x000d69bf

000d6d24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6d28:	b08a      	sub	sp, #40	; 0x28
   d6d2a:	4605      	mov	r5, r0
   d6d2c:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d6d30:	460c      	mov	r4, r1
   d6d32:	4617      	mov	r7, r2
   d6d34:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6d36:	f7ff fd3f 	bl	d67b8 <spark_cloud_flag_connected>
   d6d3a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d6d3c:	4682      	mov	sl, r0
   d6d3e:	bb38      	cbnz	r0, d6d90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d6d40:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6d44:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6d46:	a905      	add	r1, sp, #20
   d6d48:	4630      	mov	r0, r6
   d6d4a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6d4e:	f7ff fe97 	bl	d6a80 <_ZN8particle5ErrorC1EOS0_>
   d6d52:	2014      	movs	r0, #20
   d6d54:	f7fd f99f 	bl	d4096 <_Znwj>
   d6d58:	4604      	mov	r4, r0
   d6d5a:	b148      	cbz	r0, d6d70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6d5c:	2302      	movs	r3, #2
   d6d5e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6d60:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6d62:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6d66:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6d68:	4631      	mov	r1, r6
   d6d6a:	300c      	adds	r0, #12
   d6d6c:	f7ff fe88 	bl	d6a80 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6d70:	4628      	mov	r0, r5
	: __shared_count(__p)
   d6d72:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6d74:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d6d78:	f7ff ff32 	bl	d6be0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6d7c:	4630      	mov	r0, r6
   d6d7e:	f7ff fe8c 	bl	d6a9a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6d82:	a805      	add	r0, sp, #20
   d6d84:	f7ff fe89 	bl	d6a9a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d6d88:	4628      	mov	r0, r5
   d6d8a:	b00a      	add	sp, #40	; 0x28
   d6d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6d90:	230c      	movs	r3, #12
   d6d92:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6d96:	2014      	movs	r0, #20
   d6d98:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d6d9c:	9307      	str	r3, [sp, #28]
   d6d9e:	f7fd f97a 	bl	d4096 <_Znwj>
   d6da2:	4601      	mov	r1, r0
   d6da4:	b128      	cbz	r0, d6db2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6da6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d6daa:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6dae:	f880 a001 	strb.w	sl, [r0, #1]
   d6db2:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6db4:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d6db6:	f7ff ff13 	bl	d6be0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d6dba:	4b22      	ldr	r3, [pc, #136]	; (d6e44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d6dbc:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6dbe:	2008      	movs	r0, #8
   d6dc0:	f7fd f969 	bl	d4096 <_Znwj>
   d6dc4:	4682      	mov	sl, r0
   d6dc6:	b128      	cbz	r0, d6dd4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6dc8:	9b03      	ldr	r3, [sp, #12]
   d6dca:	f840 3b04 	str.w	r3, [r0], #4
   d6dce:	a904      	add	r1, sp, #16
   d6dd0:	f7ff fe21 	bl	d6a16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6dd4:	9600      	str	r6, [sp, #0]
   d6dd6:	fa5f f389 	uxtb.w	r3, r9
   d6dda:	4642      	mov	r2, r8
   d6ddc:	4639      	mov	r1, r7
   d6dde:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d6de0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6de4:	f7ff fcf8 	bl	d67d8 <spark_send_event>
   d6de8:	b9b8      	cbnz	r0, d6e1a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d6dea:	9b03      	ldr	r3, [sp, #12]
   d6dec:	785b      	ldrb	r3, [r3, #1]
   d6dee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6df2:	b993      	cbnz	r3, d6e1a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d6df4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d6df8:	a905      	add	r1, sp, #20
   d6dfa:	a803      	add	r0, sp, #12
   d6dfc:	9205      	str	r2, [sp, #20]
   d6dfe:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6e02:	f7ff ff11 	bl	d6c28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6e06:	a805      	add	r0, sp, #20
   d6e08:	f7ff fe47 	bl	d6a9a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6e0c:	a805      	add	r0, sp, #20
   d6e0e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6e10:	f7ff fe94 	bl	d6b3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d6e14:	a806      	add	r0, sp, #24
   d6e16:	f7ff fe05 	bl	d6a24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6e1a:	9b03      	ldr	r3, [sp, #12]
   d6e1c:	9305      	str	r3, [sp, #20]
   d6e1e:	a904      	add	r1, sp, #16
   d6e20:	a806      	add	r0, sp, #24
   d6e22:	f7ff fdf8 	bl	d6a16 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6e26:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6e28:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6e2a:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d6e2c:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d6e2e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d6e30:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d6e32:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d6e34:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d6e36:	f7ff fdf5 	bl	d6a24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6e3a:	a804      	add	r0, sp, #16
   d6e3c:	f7ff fdf2 	bl	d6a24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d6e40:	e7a2      	b.n	d6d88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d6e42:	bf00      	nop
   d6e44:	000d6f0d 	.word	0x000d6f0d

000d6e48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d6e48:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e4c:	4605      	mov	r5, r0
	  switch (__op)
   d6e4e:	d007      	beq.n	d6e60 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d6e50:	2a03      	cmp	r2, #3
   d6e52:	d018      	beq.n	d6e86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d6e54:	2a01      	cmp	r2, #1
   d6e56:	d101      	bne.n	d6e5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6e58:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6e5a:	6003      	str	r3, [r0, #0]
	}
   d6e5c:	2000      	movs	r0, #0
   d6e5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6e60:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d6e62:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6e64:	f7fd f917 	bl	d4096 <_Znwj>
   d6e68:	4604      	mov	r4, r0
   d6e6a:	b150      	cbz	r0, d6e82 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6e6c:	4631      	mov	r1, r6
   d6e6e:	f7ff fecb 	bl	d6c08 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6e72:	6930      	ldr	r0, [r6, #16]
   d6e74:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6e78:	b108      	cbz	r0, d6e7e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d6e7a:	f001 ffb7 	bl	d8dec <strdup>
        type_(type) {
   d6e7e:	6120      	str	r0, [r4, #16]
   d6e80:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d6e82:	602c      	str	r4, [r5, #0]
	}
   d6e84:	e7ea      	b.n	d6e5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6e86:	6804      	ldr	r4, [r0, #0]
   d6e88:	2c00      	cmp	r4, #0
   d6e8a:	d0e7      	beq.n	d6e5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d6e8c:	f104 0010 	add.w	r0, r4, #16
   d6e90:	f7ff fe03 	bl	d6a9a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6e94:	4620      	mov	r0, r4
   d6e96:	f7fd f9b5 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6e9a:	2118      	movs	r1, #24
   d6e9c:	4620      	mov	r0, r4
   d6e9e:	f001 f8ca 	bl	d8036 <_ZdlPvj>
   d6ea2:	e7db      	b.n	d6e5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d6ea4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d6ea4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6ea6:	2300      	movs	r3, #0
   d6ea8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6eaa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6eac:	4604      	mov	r4, r0
   d6eae:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6eb0:	b12b      	cbz	r3, d6ebe <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6eb2:	2202      	movs	r2, #2
   d6eb4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6eb6:	68eb      	ldr	r3, [r5, #12]
   d6eb8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6eba:	68ab      	ldr	r3, [r5, #8]
   d6ebc:	60a3      	str	r3, [r4, #8]
    }
   d6ebe:	4620      	mov	r0, r4
   d6ec0:	bd38      	pop	{r3, r4, r5, pc}

000d6ec2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d6ec2:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6ec4:	b570      	push	{r4, r5, r6, lr}
   d6ec6:	4604      	mov	r4, r0
	  switch (__op)
   d6ec8:	d007      	beq.n	d6eda <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d6eca:	2a03      	cmp	r2, #3
   d6ecc:	d012      	beq.n	d6ef4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d6ece:	2a01      	cmp	r2, #1
   d6ed0:	d101      	bne.n	d6ed6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6ed2:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6ed4:	6003      	str	r3, [r0, #0]
	}
   d6ed6:	2000      	movs	r0, #0
   d6ed8:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6eda:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d6edc:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6ede:	f7fd f8da 	bl	d4096 <_Znwj>
   d6ee2:	4605      	mov	r5, r0
   d6ee4:	b120      	cbz	r0, d6ef0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d6ee6:	4631      	mov	r1, r6
   d6ee8:	f7ff ffdc 	bl	d6ea4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6eec:	7c33      	ldrb	r3, [r6, #16]
   d6eee:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d6ef0:	6025      	str	r5, [r4, #0]
	}
   d6ef2:	e7f0      	b.n	d6ed6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6ef4:	6804      	ldr	r4, [r0, #0]
   d6ef6:	2c00      	cmp	r4, #0
   d6ef8:	d0ed      	beq.n	d6ed6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d6efa:	4620      	mov	r0, r4
   d6efc:	f7fd f982 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6f00:	2114      	movs	r1, #20
   d6f02:	4620      	mov	r0, r4
   d6f04:	f001 f897 	bl	d8036 <_ZdlPvj>
   d6f08:	e7e5      	b.n	d6ed6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d6f0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6f0c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6f0e:	b089      	sub	sp, #36	; 0x24
   d6f10:	4604      	mov	r4, r0
   d6f12:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6f14:	a801      	add	r0, sp, #4
   d6f16:	4611      	mov	r1, r2
   d6f18:	f7ff fe10 	bl	d6b3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6f1c:	b1a4      	cbz	r4, d6f48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6f1e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6f20:	b11d      	cbz	r5, d6f2a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d6f22:	4628      	mov	r0, r5
   d6f24:	f001 ff62 	bl	d8dec <strdup>
   d6f28:	4605      	mov	r5, r0
   d6f2a:	a801      	add	r0, sp, #4
   d6f2c:	a903      	add	r1, sp, #12
        type_(type) {
   d6f2e:	9503      	str	r5, [sp, #12]
   d6f30:	f8ad 4010 	strh.w	r4, [sp, #16]
   d6f34:	f7ff fe78 	bl	d6c28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6f38:	a803      	add	r0, sp, #12
   d6f3a:	f7ff fdae 	bl	d6a9a <_ZN8particle5ErrorD1Ev>
   d6f3e:	a802      	add	r0, sp, #8
   d6f40:	f7ff fd70 	bl	d6a24 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6f44:	b009      	add	sp, #36	; 0x24
   d6f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6f48:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6f4a:	2301      	movs	r3, #1
   d6f4c:	e8d5 2f4f 	ldrexb	r2, [r5]
   d6f50:	2a00      	cmp	r2, #0
   d6f52:	d103      	bne.n	d6f5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d6f54:	e8c5 3f41 	strexb	r1, r3, [r5]
   d6f58:	2900      	cmp	r1, #0
   d6f5a:	d1f7      	bne.n	d6f4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d6f5c:	d1ef      	bne.n	d6f3e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d6f5e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d6f60:	f3bf 8f5b 	dmb	ish
   d6f64:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6f66:	1d2b      	adds	r3, r5, #4
   d6f68:	f3bf 8f5b 	dmb	ish
   d6f6c:	e853 6f00 	ldrex	r6, [r3]
   d6f70:	e843 4200 	strex	r2, r4, [r3]
   d6f74:	2a00      	cmp	r2, #0
   d6f76:	d1f9      	bne.n	d6f6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d6f78:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6f7c:	2e00      	cmp	r6, #0
   d6f7e:	d0de      	beq.n	d6f3e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d6f80:	4620      	mov	r0, r4
   d6f82:	f7ff fbc3 	bl	d670c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6f86:	4607      	mov	r7, r0
   d6f88:	b160      	cbz	r0, d6fa4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6f8a:	f105 010c 	add.w	r1, r5, #12
   d6f8e:	4630      	mov	r0, r6
   d6f90:	f7ff fe15 	bl	d6bbe <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d6f94:	4630      	mov	r0, r6
   d6f96:	f7fd f935 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6f9a:	2110      	movs	r1, #16
   d6f9c:	4630      	mov	r0, r6
   d6f9e:	f001 f84a 	bl	d8036 <_ZdlPvj>
   d6fa2:	e7cc      	b.n	d6f3e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6fa4:	4631      	mov	r1, r6
   d6fa6:	a803      	add	r0, sp, #12
   d6fa8:	f7ff ff7c 	bl	d6ea4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6fac:	7b2b      	ldrb	r3, [r5, #12]
   d6fae:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6fb2:	2010      	movs	r0, #16
   d6fb4:	f7fd f86f 	bl	d4096 <_Znwj>
   d6fb8:	4605      	mov	r5, r0
   d6fba:	b1d0      	cbz	r0, d6ff2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d6fbc:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6fbe:	2014      	movs	r0, #20
   d6fc0:	f7fd f869 	bl	d4096 <_Znwj>
   d6fc4:	4604      	mov	r4, r0
   d6fc6:	b178      	cbz	r0, d6fe8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d6fc8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6fca:	4601      	mov	r1, r0
   d6fcc:	a803      	add	r0, sp, #12
   d6fce:	f7ff fdd4 	bl	d6b7a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6fd2:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6fd4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6fd6:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6fd8:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d6fda:	9205      	str	r2, [sp, #20]
   d6fdc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6fde:	60e3      	str	r3, [r4, #12]
   d6fe0:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6fe4:	9206      	str	r2, [sp, #24]
   d6fe6:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6fe8:	4b06      	ldr	r3, [pc, #24]	; (d7004 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d6fea:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6fec:	4b06      	ldr	r3, [pc, #24]	; (d7008 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6fee:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6ff0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d6ff2:	a803      	add	r0, sp, #12
   d6ff4:	f7fd f906 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6ff8:	2200      	movs	r2, #0
   d6ffa:	4629      	mov	r1, r5
   d6ffc:	4803      	ldr	r0, [pc, #12]	; (d700c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d6ffe:	f7ff fb8d 	bl	d671c <application_thread_invoke>
   d7002:	e7c7      	b.n	d6f94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d7004:	000d6bd1 	.word	0x000d6bd1
   d7008:	000d6ec3 	.word	0x000d6ec3
   d700c:	000d69bf 	.word	0x000d69bf

000d7010 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7010:	2200      	movs	r2, #0
   d7012:	6840      	ldr	r0, [r0, #4]
   d7014:	4611      	mov	r1, r2
   d7016:	f7ff bc4f 	b.w	d68b8 <network_listening>

000d701a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d701a:	2200      	movs	r2, #0
   d701c:	6840      	ldr	r0, [r0, #4]
   d701e:	4611      	mov	r1, r2
   d7020:	f7ff bc5a 	b.w	d68d8 <network_get_listen_timeout>

000d7024 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7024:	6840      	ldr	r0, [r0, #4]
   d7026:	2200      	movs	r2, #0
   d7028:	f7ff bc4e 	b.w	d68c8 <network_set_listen_timeout>

000d702c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d702c:	6840      	ldr	r0, [r0, #4]
   d702e:	2200      	movs	r2, #0
   d7030:	f081 0101 	eor.w	r1, r1, #1
   d7034:	f7ff bc38 	b.w	d68a8 <network_listen>

000d7038 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7038:	2300      	movs	r3, #0
   d703a:	6840      	ldr	r0, [r0, #4]
   d703c:	461a      	mov	r2, r3
   d703e:	4619      	mov	r1, r3
   d7040:	f7ff bc2a 	b.w	d6898 <network_off>

000d7044 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7044:	2300      	movs	r3, #0
   d7046:	6840      	ldr	r0, [r0, #4]
   d7048:	461a      	mov	r2, r3
   d704a:	4619      	mov	r1, r3
   d704c:	f7ff bc1c 	b.w	d6888 <network_on>

000d7050 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7050:	2200      	movs	r2, #0
   d7052:	6840      	ldr	r0, [r0, #4]
   d7054:	4611      	mov	r1, r2
   d7056:	f7ff bc0f 	b.w	d6878 <network_ready>

000d705a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d705a:	2200      	movs	r2, #0
   d705c:	6840      	ldr	r0, [r0, #4]
   d705e:	4611      	mov	r1, r2
   d7060:	f7ff bbfa 	b.w	d6858 <network_connecting>

000d7064 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7064:	6840      	ldr	r0, [r0, #4]
   d7066:	2200      	movs	r2, #0
   d7068:	2102      	movs	r1, #2
   d706a:	f7ff bbfd 	b.w	d6868 <network_disconnect>

000d706e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d706e:	2300      	movs	r3, #0
   d7070:	6840      	ldr	r0, [r0, #4]
   d7072:	461a      	mov	r2, r3
   d7074:	f7ff bbe8 	b.w	d6848 <network_connect>

000d7078 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7078:	4b02      	ldr	r3, [pc, #8]	; (d7084 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d707a:	2203      	movs	r2, #3
   d707c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d707e:	4a02      	ldr	r2, [pc, #8]	; (d7088 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7080:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d7082:	4770      	bx	lr
   d7084:	2003e604 	.word	0x2003e604
   d7088:	000db2d4 	.word	0x000db2d4

000d708c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d708c:	4770      	bx	lr

000d708e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d708e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7090:	4606      	mov	r6, r0
   d7092:	4615      	mov	r5, r2
   d7094:	460c      	mov	r4, r1
   d7096:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7098:	42bc      	cmp	r4, r7
   d709a:	d006      	beq.n	d70aa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d709c:	6833      	ldr	r3, [r6, #0]
   d709e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d70a2:	689b      	ldr	r3, [r3, #8]
   d70a4:	4630      	mov	r0, r6
   d70a6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d70a8:	e7f6      	b.n	d7098 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d70aa:	4628      	mov	r0, r5
   d70ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d70ae <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d70ae:	7c00      	ldrb	r0, [r0, #16]
   d70b0:	2200      	movs	r2, #0
   d70b2:	f7ff ba13 	b.w	d64dc <hal_i2c_write>

000d70b6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d70b6:	7c00      	ldrb	r0, [r0, #16]
   d70b8:	2100      	movs	r1, #0
   d70ba:	f7ff ba17 	b.w	d64ec <hal_i2c_available>

000d70be <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d70be:	7c00      	ldrb	r0, [r0, #16]
   d70c0:	2100      	movs	r1, #0
   d70c2:	f7ff ba1b 	b.w	d64fc <hal_i2c_read>

000d70c6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d70c6:	7c00      	ldrb	r0, [r0, #16]
   d70c8:	2100      	movs	r1, #0
   d70ca:	f7ff ba1f 	b.w	d650c <hal_i2c_peek>

000d70ce <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d70ce:	7c00      	ldrb	r0, [r0, #16]
   d70d0:	2100      	movs	r1, #0
   d70d2:	f7ff ba23 	b.w	d651c <hal_i2c_flush>

000d70d6 <_ZN7TwoWireD0Ev>:
   d70d6:	b510      	push	{r4, lr}
   d70d8:	2114      	movs	r1, #20
   d70da:	4604      	mov	r4, r0
   d70dc:	f000 ffab 	bl	d8036 <_ZdlPvj>
   d70e0:	4620      	mov	r0, r4
   d70e2:	bd10      	pop	{r4, pc}

000d70e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d70e4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d70e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d70ea:	4604      	mov	r4, r0
   d70ec:	4608      	mov	r0, r1
   d70ee:	2100      	movs	r1, #0
   d70f0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d70f4:	4b03      	ldr	r3, [pc, #12]	; (d7104 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d70f6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d70f8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d70fa:	4611      	mov	r1, r2
   d70fc:	f7ff fa1e 	bl	d653c <hal_i2c_init>
}
   d7100:	4620      	mov	r0, r4
   d7102:	bd10      	pop	{r4, pc}
   d7104:	000db308 	.word	0x000db308

000d7108 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7108:	2300      	movs	r3, #0
   d710a:	7c00      	ldrb	r0, [r0, #16]
   d710c:	461a      	mov	r2, r3
   d710e:	4619      	mov	r1, r3
   d7110:	f7ff b9cc 	b.w	d64ac <hal_i2c_begin>

000d7114 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7114:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d7116:	2200      	movs	r2, #0
   d7118:	2314      	movs	r3, #20
   d711a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d711e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d7122:	780b      	ldrb	r3, [r1, #0]
   d7124:	f88d 3008 	strb.w	r3, [sp, #8]
   d7128:	684b      	ldr	r3, [r1, #4]
   d712a:	9303      	str	r3, [sp, #12]
   d712c:	68cb      	ldr	r3, [r1, #12]
   d712e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d7130:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d7132:	7a0b      	ldrb	r3, [r1, #8]
   d7134:	9305      	str	r3, [sp, #20]
   d7136:	a901      	add	r1, sp, #4
   d7138:	f7ff fa18 	bl	d656c <hal_i2c_request_ex>
}
   d713c:	b007      	add	sp, #28
   d713e:	f85d fb04 	ldr.w	pc, [sp], #4

000d7142 <_ZN7TwoWire11requestFromEhjh>:
{
   d7142:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7144:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7146:	f88d 1000 	strb.w	r1, [sp]
   d714a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d714e:	9103      	str	r1, [sp, #12]
   d7150:	bf18      	it	ne
   d7152:	2301      	movne	r3, #1
   d7154:	4669      	mov	r1, sp
    size_ = size;
   d7156:	9201      	str	r2, [sp, #4]
   d7158:	f88d 3008 	strb.w	r3, [sp, #8]
   d715c:	f7ff ffda 	bl	d7114 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7160:	b005      	add	sp, #20
   d7162:	f85d fb04 	ldr.w	pc, [sp], #4

000d7166 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7166:	7c00      	ldrb	r0, [r0, #16]
   d7168:	2200      	movs	r2, #0
   d716a:	f7ff b9a7 	b.w	d64bc <hal_i2c_begin_transmission>

000d716e <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d716e:	b2c9      	uxtb	r1, r1
   d7170:	f7ff bff9 	b.w	d7166 <_ZN7TwoWire17beginTransmissionEh>

000d7174 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d7174:	7c00      	ldrb	r0, [r0, #16]
   d7176:	2200      	movs	r2, #0
   d7178:	f7ff b9a8 	b.w	d64cc <hal_i2c_end_transmission>

000d717c <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d717c:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d717e:	2100      	movs	r1, #0
   d7180:	7c00      	ldrb	r0, [r0, #16]
   d7182:	f7ff f9e3 	bl	d654c <hal_i2c_lock>
}
   d7186:	fab0 f080 	clz	r0, r0
   d718a:	0940      	lsrs	r0, r0, #5
   d718c:	bd08      	pop	{r3, pc}

000d718e <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d718e:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d7190:	2100      	movs	r1, #0
   d7192:	7c00      	ldrb	r0, [r0, #16]
   d7194:	f7ff f9e2 	bl	d655c <hal_i2c_unlock>
}
   d7198:	fab0 f080 	clz	r0, r0
   d719c:	0940      	lsrs	r0, r0, #5
   d719e:	bd08      	pop	{r3, pc}

000d71a0 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d71a0:	4700      	bx	r0
	...

000d71a4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d71a4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d71a8:	2400      	movs	r4, #0
{
   d71aa:	461d      	mov	r5, r3
   d71ac:	460f      	mov	r7, r1
   d71ae:	4690      	mov	r8, r2
   d71b0:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d71b2:	f7ff f96b 	bl	d648c <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d71b6:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d71b8:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d71bc:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d71c0:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d71c4:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d71c8:	bfa2      	ittt	ge
   d71ca:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d71ce:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d71d2:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d71d4:	4907      	ldr	r1, [pc, #28]	; (d71f4 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d71d6:	9400      	str	r4, [sp, #0]
   d71d8:	4643      	mov	r3, r8
   d71da:	463a      	mov	r2, r7
   d71dc:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d71de:	bfa8      	it	ge
   d71e0:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d71e4:	f7ff f94a 	bl	d647c <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d71e8:	fab0 f080 	clz	r0, r0
   d71ec:	0940      	lsrs	r0, r0, #5
   d71ee:	b004      	add	sp, #16
   d71f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d71f4:	000d71a1 	.word	0x000d71a1

000d71f8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d71f8:	4770      	bx	lr

000d71fa <_ZN9IPAddressD0Ev>:
   d71fa:	b510      	push	{r4, lr}
   d71fc:	2118      	movs	r1, #24
   d71fe:	4604      	mov	r4, r0
   d7200:	f000 ff19 	bl	d8036 <_ZdlPvj>
   d7204:	4620      	mov	r0, r4
   d7206:	bd10      	pop	{r4, pc}

000d7208 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7208:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d720a:	7d03      	ldrb	r3, [r0, #20]
   d720c:	2b06      	cmp	r3, #6
{
   d720e:	b08d      	sub	sp, #52	; 0x34
   d7210:	460e      	mov	r6, r1
   d7212:	f100 0704 	add.w	r7, r0, #4
   d7216:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d721a:	d012      	beq.n	d7242 <_ZNK9IPAddress7printToER5Print+0x3a>
   d721c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7220:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7224:	220a      	movs	r2, #10
   d7226:	4630      	mov	r0, r6
   d7228:	f000 f933 	bl	d7492 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d722c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d722e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d7230:	d019      	beq.n	d7266 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d7232:	2c00      	cmp	r4, #0
   d7234:	d0f4      	beq.n	d7220 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d7236:	212e      	movs	r1, #46	; 0x2e
   d7238:	4630      	mov	r0, r6
   d723a:	f000 f927 	bl	d748c <_ZN5Print5printEc>
   d723e:	4404      	add	r4, r0
   d7240:	e7ee      	b.n	d7220 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7242:	232f      	movs	r3, #47	; 0x2f
   d7244:	466a      	mov	r2, sp
   d7246:	4639      	mov	r1, r7
   d7248:	200a      	movs	r0, #10
		buf[0] = 0;
   d724a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d724e:	f7ff f995 	bl	d657c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d7252:	4668      	mov	r0, sp
   d7254:	f001 fde7 	bl	d8e26 <strlen>
   d7258:	6833      	ldr	r3, [r6, #0]
   d725a:	4602      	mov	r2, r0
   d725c:	68db      	ldr	r3, [r3, #12]
   d725e:	4669      	mov	r1, sp
   d7260:	4630      	mov	r0, r6
   d7262:	4798      	blx	r3
   d7264:	4604      	mov	r4, r0
    }
    return n;
}
   d7266:	4620      	mov	r0, r4
   d7268:	b00d      	add	sp, #52	; 0x34
   d726a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d726c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d726c:	b510      	push	{r4, lr}
   d726e:	4b05      	ldr	r3, [pc, #20]	; (d7284 <_ZN9IPAddressC1Ev+0x18>)
   d7270:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7272:	2211      	movs	r2, #17
   d7274:	f840 3b04 	str.w	r3, [r0], #4
   d7278:	2100      	movs	r1, #0
   d727a:	f001 fd79 	bl	d8d70 <memset>
}
   d727e:	4620      	mov	r0, r4
   d7280:	bd10      	pop	{r4, pc}
   d7282:	bf00      	nop
   d7284:	000db330 	.word	0x000db330

000d7288 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7288:	4603      	mov	r3, r0
   d728a:	4a07      	ldr	r2, [pc, #28]	; (d72a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d728c:	b510      	push	{r4, lr}
   d728e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7292:	f101 0210 	add.w	r2, r1, #16
   d7296:	f851 4b04 	ldr.w	r4, [r1], #4
   d729a:	f843 4b04 	str.w	r4, [r3], #4
   d729e:	4291      	cmp	r1, r2
   d72a0:	d1f9      	bne.n	d7296 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d72a2:	780a      	ldrb	r2, [r1, #0]
   d72a4:	701a      	strb	r2, [r3, #0]
}
   d72a6:	bd10      	pop	{r4, pc}
   d72a8:	000db330 	.word	0x000db330

000d72ac <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d72ac:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d72ae:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d72b2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d72b6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d72ba:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d72be:	2304      	movs	r3, #4
   d72c0:	6041      	str	r1, [r0, #4]
   d72c2:	7503      	strb	r3, [r0, #20]
}
   d72c4:	bd10      	pop	{r4, pc}

000d72c6 <_ZN9IPAddressaSEPKh>:
{
   d72c6:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d72c8:	78cb      	ldrb	r3, [r1, #3]
   d72ca:	9300      	str	r3, [sp, #0]
   d72cc:	788b      	ldrb	r3, [r1, #2]
   d72ce:	784a      	ldrb	r2, [r1, #1]
   d72d0:	7809      	ldrb	r1, [r1, #0]
   d72d2:	f7ff ffeb 	bl	d72ac <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d72d6:	b002      	add	sp, #8
   d72d8:	bd10      	pop	{r4, pc}
	...

000d72dc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d72dc:	4b01      	ldr	r3, [pc, #4]	; (d72e4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d72de:	4a02      	ldr	r2, [pc, #8]	; (d72e8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d72e0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d72e2:	4770      	bx	lr
   d72e4:	2003e60c 	.word	0x2003e60c
   d72e8:	000db33c 	.word	0x000db33c

000d72ec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d72ec:	2300      	movs	r3, #0
   d72ee:	6840      	ldr	r0, [r0, #4]
   d72f0:	461a      	mov	r2, r3
   d72f2:	f7ff baa9 	b.w	d6848 <network_connect>

000d72f6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d72f6:	6840      	ldr	r0, [r0, #4]
   d72f8:	2200      	movs	r2, #0
   d72fa:	2102      	movs	r1, #2
   d72fc:	f7ff bab4 	b.w	d6868 <network_disconnect>

000d7300 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7300:	2200      	movs	r2, #0
   d7302:	6840      	ldr	r0, [r0, #4]
   d7304:	4611      	mov	r1, r2
   d7306:	f7ff baa7 	b.w	d6858 <network_connecting>

000d730a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d730a:	2200      	movs	r2, #0
   d730c:	6840      	ldr	r0, [r0, #4]
   d730e:	4611      	mov	r1, r2
   d7310:	f7ff bab2 	b.w	d6878 <network_ready>

000d7314 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7314:	2300      	movs	r3, #0
   d7316:	6840      	ldr	r0, [r0, #4]
   d7318:	461a      	mov	r2, r3
   d731a:	4619      	mov	r1, r3
   d731c:	f7ff bab4 	b.w	d6888 <network_on>

000d7320 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7320:	2300      	movs	r3, #0
   d7322:	6840      	ldr	r0, [r0, #4]
   d7324:	461a      	mov	r2, r3
   d7326:	4619      	mov	r1, r3
   d7328:	f7ff bab6 	b.w	d6898 <network_off>

000d732c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d732c:	6840      	ldr	r0, [r0, #4]
   d732e:	2200      	movs	r2, #0
   d7330:	f081 0101 	eor.w	r1, r1, #1
   d7334:	f7ff bab8 	b.w	d68a8 <network_listen>

000d7338 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7338:	6840      	ldr	r0, [r0, #4]
   d733a:	2200      	movs	r2, #0
   d733c:	f7ff bac4 	b.w	d68c8 <network_set_listen_timeout>

000d7340 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7340:	2200      	movs	r2, #0
   d7342:	6840      	ldr	r0, [r0, #4]
   d7344:	4611      	mov	r1, r2
   d7346:	f7ff bac7 	b.w	d68d8 <network_get_listen_timeout>

000d734a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d734a:	2200      	movs	r2, #0
   d734c:	6840      	ldr	r0, [r0, #4]
   d734e:	4611      	mov	r1, r2
   d7350:	f7ff bab2 	b.w	d68b8 <network_listening>

000d7354 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7354:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7358:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d735a:	b095      	sub	sp, #84	; 0x54
   d735c:	4616      	mov	r6, r2
   d735e:	460d      	mov	r5, r1
   d7360:	4607      	mov	r7, r0
    IPAddress addr;
   d7362:	f7ff ff83 	bl	d726c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7366:	4621      	mov	r1, r4
   d7368:	2218      	movs	r2, #24
   d736a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d736c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d736e:	f001 fcff 	bl	d8d70 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7372:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7374:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7378:	4621      	mov	r1, r4
   d737a:	466b      	mov	r3, sp
   d737c:	aa0c      	add	r2, sp, #48	; 0x30
   d737e:	4630      	mov	r0, r6
   d7380:	f7ff f90c 	bl	d659c <netdb_getaddrinfo>
    if (!r) {
   d7384:	4604      	mov	r4, r0
   d7386:	2800      	cmp	r0, #0
   d7388:	d146      	bne.n	d7418 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d738a:	4602      	mov	r2, r0
   d738c:	2101      	movs	r1, #1
   d738e:	6868      	ldr	r0, [r5, #4]
   d7390:	f7ff fa72 	bl	d6878 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7394:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7396:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7398:	4622      	mov	r2, r4
   d739a:	6868      	ldr	r0, [r5, #4]
   d739c:	f7ff fa6c 	bl	d6878 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d73a0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d73a2:	4681      	mov	r9, r0
        bool ok = false;
   d73a4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d73a6:	2e00      	cmp	r6, #0
   d73a8:	d036      	beq.n	d7418 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d73aa:	2900      	cmp	r1, #0
   d73ac:	d134      	bne.n	d7418 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d73ae:	6873      	ldr	r3, [r6, #4]
   d73b0:	2b02      	cmp	r3, #2
   d73b2:	d003      	beq.n	d73bc <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d73b4:	2b0a      	cmp	r3, #10
   d73b6:	d00b      	beq.n	d73d0 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d73b8:	69f6      	ldr	r6, [r6, #28]
   d73ba:	e7f4      	b.n	d73a6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d73bc:	f1b8 0f00 	cmp.w	r8, #0
   d73c0:	d004      	beq.n	d73cc <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d73c2:	6971      	ldr	r1, [r6, #20]
   d73c4:	4638      	mov	r0, r7
   d73c6:	3104      	adds	r1, #4
   d73c8:	f7ff ff7d 	bl	d72c6 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d73cc:	4641      	mov	r1, r8
   d73ce:	e7f3      	b.n	d73b8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d73d0:	f1b9 0f00 	cmp.w	r9, #0
   d73d4:	d101      	bne.n	d73da <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d73d6:	4649      	mov	r1, r9
   d73d8:	e7ee      	b.n	d73b8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d73da:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d73dc:	2210      	movs	r2, #16
   d73de:	a801      	add	r0, sp, #4
   d73e0:	f001 fcc6 	bl	d8d70 <memset>
                    a.v = 6;
   d73e4:	2306      	movs	r3, #6
   d73e6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d73ea:	ad01      	add	r5, sp, #4
   d73ec:	f104 0308 	add.w	r3, r4, #8
   d73f0:	3418      	adds	r4, #24
   d73f2:	6818      	ldr	r0, [r3, #0]
   d73f4:	6859      	ldr	r1, [r3, #4]
   d73f6:	462a      	mov	r2, r5
   d73f8:	c203      	stmia	r2!, {r0, r1}
   d73fa:	3308      	adds	r3, #8
   d73fc:	42a3      	cmp	r3, r4
   d73fe:	4615      	mov	r5, r2
   d7400:	d1f7      	bne.n	d73f2 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d7402:	a901      	add	r1, sp, #4
   d7404:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7406:	ad07      	add	r5, sp, #28
   d7408:	f7ff ff3e 	bl	d7288 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d740c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d740e:	1d3c      	adds	r4, r7, #4
   d7410:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7412:	682b      	ldr	r3, [r5, #0]
   d7414:	7023      	strb	r3, [r4, #0]
   d7416:	e7de      	b.n	d73d6 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7418:	9800      	ldr	r0, [sp, #0]
   d741a:	f7ff f8b7 	bl	d658c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d741e:	4638      	mov	r0, r7
   d7420:	b015      	add	sp, #84	; 0x54
   d7422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7428 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7428:	4b02      	ldr	r3, [pc, #8]	; (d7434 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d742a:	4a03      	ldr	r2, [pc, #12]	; (d7438 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d742c:	601a      	str	r2, [r3, #0]
   d742e:	2200      	movs	r2, #0
   d7430:	605a      	str	r2, [r3, #4]

} // spark
   d7432:	4770      	bx	lr
   d7434:	2003e610 	.word	0x2003e610
   d7438:	000db348 	.word	0x000db348

000d743c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d743c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d743e:	4606      	mov	r6, r0
   d7440:	460d      	mov	r5, r1
  size_t n = 0;
   d7442:	188f      	adds	r7, r1, r2
   d7444:	2400      	movs	r4, #0
  while (size--) {
   d7446:	42bd      	cmp	r5, r7
   d7448:	d00c      	beq.n	d7464 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d744a:	6833      	ldr	r3, [r6, #0]
   d744c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7450:	689b      	ldr	r3, [r3, #8]
   d7452:	4630      	mov	r0, r6
   d7454:	4798      	blx	r3
     if (chunk>=0)
   d7456:	1e03      	subs	r3, r0, #0
   d7458:	db01      	blt.n	d745e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d745a:	441c      	add	r4, r3
  while (size--) {
   d745c:	e7f3      	b.n	d7446 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d745e:	2c00      	cmp	r4, #0
   d7460:	bf08      	it	eq
   d7462:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7464:	4620      	mov	r0, r4
   d7466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7468 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d7468:	b513      	push	{r0, r1, r4, lr}
   d746a:	4604      	mov	r4, r0
    }
   d746c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d746e:	b159      	cbz	r1, d7488 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7470:	9101      	str	r1, [sp, #4]
   d7472:	f001 fcd8 	bl	d8e26 <strlen>
   d7476:	6823      	ldr	r3, [r4, #0]
   d7478:	9901      	ldr	r1, [sp, #4]
   d747a:	68db      	ldr	r3, [r3, #12]
   d747c:	4602      	mov	r2, r0
   d747e:	4620      	mov	r0, r4
    }
   d7480:	b002      	add	sp, #8
   d7482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7486:	4718      	bx	r3
    }
   d7488:	b002      	add	sp, #8
   d748a:	bd10      	pop	{r4, pc}

000d748c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d748c:	6803      	ldr	r3, [r0, #0]
   d748e:	689b      	ldr	r3, [r3, #8]
   d7490:	4718      	bx	r3

000d7492 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7492:	b530      	push	{r4, r5, lr}
   d7494:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7496:	2300      	movs	r3, #0
   d7498:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d749c:	2a01      	cmp	r2, #1
   d749e:	bf98      	it	ls
   d74a0:	220a      	movls	r2, #10
   d74a2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d74a4:	460d      	mov	r5, r1
   d74a6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d74aa:	fb01 5312 	mls	r3, r1, r2, r5
   d74ae:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d74b2:	2b09      	cmp	r3, #9
   d74b4:	bf94      	ite	ls
   d74b6:	3330      	addls	r3, #48	; 0x30
   d74b8:	3337      	addhi	r3, #55	; 0x37
   d74ba:	b2db      	uxtb	r3, r3
  } while(n);
   d74bc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d74be:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d74c2:	d9ef      	bls.n	d74a4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d74c4:	4621      	mov	r1, r4
   d74c6:	f7ff ffcf 	bl	d7468 <_ZN5Print5writeEPKc>
}
   d74ca:	b00b      	add	sp, #44	; 0x2c
   d74cc:	bd30      	pop	{r4, r5, pc}

000d74ce <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d74ce:	b510      	push	{r4, lr}
   d74d0:	4604      	mov	r4, r0
   d74d2:	f7fc fe97 	bl	d4204 <_ZNSt14_Function_baseD1Ev>
   d74d6:	4620      	mov	r0, r4
   d74d8:	bd10      	pop	{r4, pc}
	...

000d74dc <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d74dc:	4803      	ldr	r0, [pc, #12]	; (d74ec <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d74de:	4a04      	ldr	r2, [pc, #16]	; (d74f0 <_GLOBAL__sub_I_RGB+0x14>)
   d74e0:	4904      	ldr	r1, [pc, #16]	; (d74f4 <_GLOBAL__sub_I_RGB+0x18>)
   d74e2:	2300      	movs	r3, #0
   d74e4:	6083      	str	r3, [r0, #8]
   d74e6:	f000 bda1 	b.w	d802c <__aeabi_atexit>
   d74ea:	bf00      	nop
   d74ec:	2003e618 	.word	0x2003e618
   d74f0:	2003e060 	.word	0x2003e060
   d74f4:	000d74cf 	.word	0x000d74cf

000d74f8 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d74f8:	b510      	push	{r4, lr}
   d74fa:	4604      	mov	r4, r0
   d74fc:	4608      	mov	r0, r1
{
    _spi = spi;
   d74fe:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d7500:	f7ff f854 	bl	d65ac <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7504:	2300      	movs	r3, #0
   d7506:	6063      	str	r3, [r4, #4]
}
   d7508:	4620      	mov	r0, r4
   d750a:	bd10      	pop	{r4, pc}

000d750c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d750c:	b510      	push	{r4, lr}
   d750e:	4604      	mov	r4, r0
{
	free(buffer);
   d7510:	6800      	ldr	r0, [r0, #0]
   d7512:	f7ff f9f1 	bl	d68f8 <free>
}
   d7516:	4620      	mov	r0, r4
   d7518:	bd10      	pop	{r4, pc}

000d751a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d751a:	b510      	push	{r4, lr}
   d751c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d751e:	6800      	ldr	r0, [r0, #0]
   d7520:	b108      	cbz	r0, d7526 <_ZN6String10invalidateEv+0xc>
   d7522:	f7ff f9e9 	bl	d68f8 <free>
	buffer = NULL;
   d7526:	2300      	movs	r3, #0
	capacity = len = 0;
   d7528:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d752c:	6023      	str	r3, [r4, #0]
}
   d752e:	bd10      	pop	{r4, pc}

000d7530 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7530:	b538      	push	{r3, r4, r5, lr}
   d7532:	4604      	mov	r4, r0
   d7534:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7536:	6800      	ldr	r0, [r0, #0]
   d7538:	3101      	adds	r1, #1
   d753a:	f7ff f9e5 	bl	d6908 <realloc>
	if (newbuffer) {
   d753e:	b110      	cbz	r0, d7546 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7540:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d7544:	2001      	movs	r0, #1
	}
	return 0;
}
   d7546:	bd38      	pop	{r3, r4, r5, pc}

000d7548 <_ZN6String7reserveEj>:
{
   d7548:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d754a:	6803      	ldr	r3, [r0, #0]
{
   d754c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d754e:	b123      	cbz	r3, d755a <_ZN6String7reserveEj+0x12>
   d7550:	6843      	ldr	r3, [r0, #4]
   d7552:	428b      	cmp	r3, r1
   d7554:	d301      	bcc.n	d755a <_ZN6String7reserveEj+0x12>
   d7556:	2001      	movs	r0, #1
}
   d7558:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d755a:	4620      	mov	r0, r4
   d755c:	f7ff ffe8 	bl	d7530 <_ZN6String12changeBufferEj>
   d7560:	2800      	cmp	r0, #0
   d7562:	d0f9      	beq.n	d7558 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d7564:	68a3      	ldr	r3, [r4, #8]
   d7566:	2b00      	cmp	r3, #0
   d7568:	d1f5      	bne.n	d7556 <_ZN6String7reserveEj+0xe>
   d756a:	6822      	ldr	r2, [r4, #0]
   d756c:	7013      	strb	r3, [r2, #0]
   d756e:	e7f2      	b.n	d7556 <_ZN6String7reserveEj+0xe>

000d7570 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7570:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7572:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d7574:	4611      	mov	r1, r2
   d7576:	9201      	str	r2, [sp, #4]
{
   d7578:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d757a:	f7ff ffe5 	bl	d7548 <_ZN6String7reserveEj>
   d757e:	9a01      	ldr	r2, [sp, #4]
   d7580:	b928      	cbnz	r0, d758e <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d7582:	4620      	mov	r0, r4
   d7584:	f7ff ffc9 	bl	d751a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d7588:	4620      	mov	r0, r4
   d758a:	b003      	add	sp, #12
   d758c:	bd30      	pop	{r4, r5, pc}
	len = length;
   d758e:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d7590:	4629      	mov	r1, r5
   d7592:	6820      	ldr	r0, [r4, #0]
   d7594:	f001 fbc4 	bl	d8d20 <memcpy>
	buffer[len] = 0;
   d7598:	6822      	ldr	r2, [r4, #0]
   d759a:	68a3      	ldr	r3, [r4, #8]
   d759c:	2100      	movs	r1, #0
   d759e:	54d1      	strb	r1, [r2, r3]
	return *this;
   d75a0:	e7f2      	b.n	d7588 <_ZN6String4copyEPKcj+0x18>

000d75a2 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d75a2:	2300      	movs	r3, #0
String::String(const char *cstr)
   d75a4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d75a6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d75aa:	4604      	mov	r4, r0
	len = 0;
   d75ac:	6083      	str	r3, [r0, #8]
	flags = 0;
   d75ae:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d75b0:	b141      	cbz	r1, d75c4 <_ZN6StringC1EPKc+0x22>
   d75b2:	4608      	mov	r0, r1
   d75b4:	9101      	str	r1, [sp, #4]
   d75b6:	f001 fc36 	bl	d8e26 <strlen>
   d75ba:	9901      	ldr	r1, [sp, #4]
   d75bc:	4602      	mov	r2, r0
   d75be:	4620      	mov	r0, r4
   d75c0:	f7ff ffd6 	bl	d7570 <_ZN6String4copyEPKcj>
}
   d75c4:	4620      	mov	r0, r4
   d75c6:	b002      	add	sp, #8
   d75c8:	bd10      	pop	{r4, pc}

000d75ca <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d75ca:	4288      	cmp	r0, r1
{
   d75cc:	b510      	push	{r4, lr}
   d75ce:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d75d0:	d005      	beq.n	d75de <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d75d2:	680b      	ldr	r3, [r1, #0]
   d75d4:	b12b      	cbz	r3, d75e2 <_ZN6StringaSERKS_+0x18>
   d75d6:	688a      	ldr	r2, [r1, #8]
   d75d8:	4619      	mov	r1, r3
   d75da:	f7ff ffc9 	bl	d7570 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d75de:	4620      	mov	r0, r4
   d75e0:	bd10      	pop	{r4, pc}
	else invalidate();
   d75e2:	f7ff ff9a 	bl	d751a <_ZN6String10invalidateEv>
   d75e6:	e7fa      	b.n	d75de <_ZN6StringaSERKS_+0x14>

000d75e8 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d75e8:	b510      	push	{r4, lr}
	buffer = NULL;
   d75ea:	2300      	movs	r3, #0
String::String(const String &value)
   d75ec:	4604      	mov	r4, r0
	capacity = 0;
   d75ee:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d75f2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d75f4:	7303      	strb	r3, [r0, #12]
	*this = value;
   d75f6:	f7ff ffe8 	bl	d75ca <_ZN6StringaSERKS_>
}
   d75fa:	4620      	mov	r0, r4
   d75fc:	bd10      	pop	{r4, pc}

000d75fe <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d75fe:	b513      	push	{r0, r1, r4, lr}
   d7600:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d7602:	b159      	cbz	r1, d761c <_ZN6StringaSEPKc+0x1e>
   d7604:	4608      	mov	r0, r1
   d7606:	9101      	str	r1, [sp, #4]
   d7608:	f001 fc0d 	bl	d8e26 <strlen>
   d760c:	9901      	ldr	r1, [sp, #4]
   d760e:	4602      	mov	r2, r0
   d7610:	4620      	mov	r0, r4
   d7612:	f7ff ffad 	bl	d7570 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d7616:	4620      	mov	r0, r4
   d7618:	b002      	add	sp, #8
   d761a:	bd10      	pop	{r4, pc}
	else invalidate();
   d761c:	f7ff ff7d 	bl	d751a <_ZN6String10invalidateEv>
   d7620:	e7f9      	b.n	d7616 <_ZN6StringaSEPKc+0x18>

000d7622 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d7622:	b510      	push	{r4, lr}
   d7624:	4604      	mov	r4, r0
   d7626:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d7628:	2300      	movs	r3, #0
	capacity = 0;
   d762a:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d762e:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d7630:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d7632:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d7634:	a901      	add	r1, sp, #4
   d7636:	f000 fb91 	bl	d7d5c <itoa>
	*this = buf;
   d763a:	a901      	add	r1, sp, #4
   d763c:	4620      	mov	r0, r4
   d763e:	f7ff ffde 	bl	d75fe <_ZN6StringaSEPKc>
}
   d7642:	4620      	mov	r0, r4
   d7644:	b00a      	add	sp, #40	; 0x28
   d7646:	bd10      	pop	{r4, pc}

000d7648 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d7648:	b570      	push	{r4, r5, r6, lr}
   d764a:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d764c:	460e      	mov	r6, r1
   d764e:	b909      	cbnz	r1, d7654 <_ZN6String6concatEPKcj+0xc>
   d7650:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d7652:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d7654:	b16a      	cbz	r2, d7672 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d7656:	6884      	ldr	r4, [r0, #8]
   d7658:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d765a:	4621      	mov	r1, r4
   d765c:	f7ff ff74 	bl	d7548 <_ZN6String7reserveEj>
   d7660:	2800      	cmp	r0, #0
   d7662:	d0f5      	beq.n	d7650 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d7664:	6828      	ldr	r0, [r5, #0]
   d7666:	68ab      	ldr	r3, [r5, #8]
   d7668:	4631      	mov	r1, r6
   d766a:	4418      	add	r0, r3
   d766c:	f001 fbb6 	bl	d8ddc <strcpy>
	len = newlen;
   d7670:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d7672:	2001      	movs	r0, #1
   d7674:	e7ed      	b.n	d7652 <_ZN6String6concatEPKcj+0xa>

000d7676 <_ZplRK15StringSumHelperPKc>:
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d7676:	b513      	push	{r0, r1, r4, lr}
   d7678:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d767a:	b929      	cbnz	r1, d7688 <_ZplRK15StringSumHelperPKc+0x12>
   d767c:	4620      	mov	r0, r4
   d767e:	f7ff ff4c 	bl	d751a <_ZN6String10invalidateEv>
	return a;
}
   d7682:	4620      	mov	r0, r4
   d7684:	b002      	add	sp, #8
   d7686:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d7688:	4608      	mov	r0, r1
   d768a:	9101      	str	r1, [sp, #4]
   d768c:	f001 fbcb 	bl	d8e26 <strlen>
   d7690:	9901      	ldr	r1, [sp, #4]
   d7692:	4602      	mov	r2, r0
   d7694:	4620      	mov	r0, r4
   d7696:	f7ff ffd7 	bl	d7648 <_ZN6String6concatEPKcj>
   d769a:	2800      	cmp	r0, #0
   d769c:	d0ee      	beq.n	d767c <_ZplRK15StringSumHelperPKc+0x6>
   d769e:	e7f0      	b.n	d7682 <_ZplRK15StringSumHelperPKc+0xc>

000d76a0 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d76a0:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d76a2:	6882      	ldr	r2, [r0, #8]
   d76a4:	b93a      	cbnz	r2, d76b6 <_ZNK6String6equalsEPKc+0x16>
   d76a6:	b121      	cbz	r1, d76b2 <_ZNK6String6equalsEPKc+0x12>
   d76a8:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d76aa:	fab0 f080 	clz	r0, r0
   d76ae:	0940      	lsrs	r0, r0, #5
   d76b0:	e000      	b.n	d76b4 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d76b2:	2001      	movs	r0, #1
}
   d76b4:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d76b6:	6800      	ldr	r0, [r0, #0]
   d76b8:	b909      	cbnz	r1, d76be <_ZNK6String6equalsEPKc+0x1e>
   d76ba:	7800      	ldrb	r0, [r0, #0]
   d76bc:	e7f5      	b.n	d76aa <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d76be:	f001 fb83 	bl	d8dc8 <strcmp>
   d76c2:	e7f2      	b.n	d76aa <_ZNK6String6equalsEPKc+0xa>

000d76c4 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d76c4:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d76c6:	6800      	ldr	r0, [r0, #0]
   d76c8:	b140      	cbz	r0, d76dc <_ZNK6String7toFloatEv+0x18>
   d76ca:	f001 fb01 	bl	d8cd0 <atof>
   d76ce:	ec51 0b10 	vmov	r0, r1, d0
   d76d2:	f001 fa69 	bl	d8ba8 <__aeabi_d2f>
   d76d6:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d76da:	bd08      	pop	{r3, pc}
	return 0;
   d76dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; d76e4 <_ZNK6String7toFloatEv+0x20>
   d76e0:	e7fb      	b.n	d76da <_ZNK6String7toFloatEv+0x16>
   d76e2:	bf00      	nop
   d76e4:	00000000 	.word	0x00000000

000d76e8 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d76e8:	b507      	push	{r0, r1, r2, lr}
   d76ea:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d76ec:	2100      	movs	r1, #0
{
   d76ee:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d76f0:	9100      	str	r1, [sp, #0]
   d76f2:	2001      	movs	r0, #1
   d76f4:	218c      	movs	r1, #140	; 0x8c
   d76f6:	f7ff f83d 	bl	d6774 <system_reset>
}
   d76fa:	b003      	add	sp, #12
   d76fc:	f85d fb04 	ldr.w	pc, [sp], #4

000d7700 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d7700:	4601      	mov	r1, r0
    reset(0, flags);
   d7702:	2000      	movs	r0, #0
   d7704:	f7ff bff0 	b.w	d76e8 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d7708 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d7708:	2000      	movs	r0, #0
   d770a:	f7ff bff9 	b.w	d7700 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d7710 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7710:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d7712:	4b09      	ldr	r3, [pc, #36]	; (d7738 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7714:	4c09      	ldr	r4, [pc, #36]	; (d773c <_GLOBAL__sub_I_System+0x2c>)
   d7716:	2202      	movs	r2, #2
   d7718:	2000      	movs	r0, #0
   d771a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d771c:	4b08      	ldr	r3, [pc, #32]	; (d7740 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d771e:	6020      	str	r0, [r4, #0]
   d7720:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d7722:	71a0      	strb	r0, [r4, #6]
   d7724:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7726:	f7fe ffd9 	bl	d66dc <set_system_mode>
SystemClass System;
   d772a:	4620      	mov	r0, r4
   d772c:	4a05      	ldr	r2, [pc, #20]	; (d7744 <_GLOBAL__sub_I_System+0x34>)
   d772e:	4906      	ldr	r1, [pc, #24]	; (d7748 <_GLOBAL__sub_I_System+0x38>)
   d7730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d7734:	f000 bc7a 	b.w	d802c <__aeabi_atexit>
   d7738:	2003e634 	.word	0x2003e634
   d773c:	2003e628 	.word	0x2003e628
   d7740:	ffff0000 	.word	0xffff0000
   d7744:	2003e060 	.word	0x2003e060
   d7748:	000d41a3 	.word	0x000d41a3

000d774c <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d774c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d7750:	4a15      	ldr	r2, [pc, #84]	; (d77a8 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7752:	f8df 8060 	ldr.w	r8, [pc, #96]	; d77b4 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d7756:	e9d2 3200 	ldrd	r3, r2, [r2]
   d775a:	18c0      	adds	r0, r0, r3
   d775c:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d7760:	4a12      	ldr	r2, [pc, #72]	; (d77ac <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d7762:	e9d2 3200 	ldrd	r3, r2, [r2]
   d7766:	18c6      	adds	r6, r0, r3
   d7768:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d776c:	e9d8 2300 	ldrd	r2, r3, [r8]
   d7770:	42bb      	cmp	r3, r7
   d7772:	bf08      	it	eq
   d7774:	42b2      	cmpeq	r2, r6
{
   d7776:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d7778:	d013      	beq.n	d77a2 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d777a:	a903      	add	r1, sp, #12
   d777c:	4668      	mov	r0, sp
   d777e:	e9cd 6700 	strd	r6, r7, [sp]
   d7782:	f7ff f901 	bl	d6988 <localtime_r>
	calendar_time.tm_year += 1900;
   d7786:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7788:	4d09      	ldr	r5, [pc, #36]	; (d77b0 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d778a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d778e:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d7790:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7792:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7794:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7796:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7798:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d779a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d779e:	6823      	ldr	r3, [r4, #0]
   d77a0:	602b      	str	r3, [r5, #0]
    }
}
   d77a2:	b00c      	add	sp, #48	; 0x30
   d77a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d77a8:	2003e670 	.word	0x2003e670
   d77ac:	2003e668 	.word	0x2003e668
   d77b0:	2003e640 	.word	0x2003e640
   d77b4:	2003e678 	.word	0x2003e678

000d77b8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d77b8:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d77ba:	2000      	movs	r0, #0
   d77bc:	f7ff f824 	bl	d6808 <spark_sync_time_pending>
   d77c0:	b128      	cbz	r0, d77ce <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d77c2:	f7fe fff9 	bl	d67b8 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d77c6:	f080 0001 	eor.w	r0, r0, #1
   d77ca:	b2c0      	uxtb	r0, r0
    }
   d77cc:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d77ce:	2001      	movs	r0, #1
   d77d0:	e7fc      	b.n	d77cc <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d77d2 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d77d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d77d4:	4602      	mov	r2, r0
   d77d6:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d77d8:	4668      	mov	r0, sp
    struct timeval tv = {
   d77da:	2100      	movs	r1, #0
    };
   d77dc:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d77e0:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d77e4:	f7fe fe22 	bl	d642c <hal_rtc_set_time>
   d77e8:	4602      	mov	r2, r0
   d77ea:	b910      	cbnz	r0, d77f2 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d77ec:	4601      	mov	r1, r0
   d77ee:	f7fe ffa5 	bl	d673c <system_notify_time_changed>
    }
}
   d77f2:	b005      	add	sp, #20
   d77f4:	f85d fb04 	ldr.w	pc, [sp], #4

000d77f8 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d77f8:	b530      	push	{r4, r5, lr}
   d77fa:	4604      	mov	r4, r0
    t += time_zone_cache;
   d77fc:	4818      	ldr	r0, [pc, #96]	; (d7860 <_ZN9TimeClass7timeStrEx+0x68>)
   d77fe:	e9d0 1000 	ldrd	r1, r0, [r0]
   d7802:	1852      	adds	r2, r2, r1
   d7804:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d7808:	4816      	ldr	r0, [pc, #88]	; (d7864 <_ZN9TimeClass7timeStrEx+0x6c>)
   d780a:	e9d0 1000 	ldrd	r1, r0, [r0]
   d780e:	1852      	adds	r2, r2, r1
{
   d7810:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d7812:	eb40 0303 	adc.w	r3, r0, r3
   d7816:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d781a:	2224      	movs	r2, #36	; 0x24
   d781c:	eb0d 0002 	add.w	r0, sp, r2
   d7820:	2100      	movs	r1, #0
   d7822:	f001 faa5 	bl	d8d70 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d7826:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d7828:	a909      	add	r1, sp, #36	; 0x24
   d782a:	4668      	mov	r0, sp
   d782c:	f7ff f8ac 	bl	d6988 <localtime_r>
    char ascstr[26] = {};
   d7830:	2216      	movs	r2, #22
   d7832:	4629      	mov	r1, r5
   d7834:	a803      	add	r0, sp, #12
   d7836:	9502      	str	r5, [sp, #8]
   d7838:	f001 fa9a 	bl	d8d70 <memset>
    asctime_r(&calendar_time, ascstr);
   d783c:	a902      	add	r1, sp, #8
   d783e:	a809      	add	r0, sp, #36	; 0x24
   d7840:	f001 fa20 	bl	d8c84 <asctime_r>
    int len = strlen(ascstr);
   d7844:	a802      	add	r0, sp, #8
   d7846:	f001 faee 	bl	d8e26 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d784a:	ab12      	add	r3, sp, #72	; 0x48
   d784c:	4418      	add	r0, r3
    return String(ascstr);
   d784e:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d7850:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d7854:	4620      	mov	r0, r4
   d7856:	f7ff fea4 	bl	d75a2 <_ZN6StringC1EPKc>
}
   d785a:	4620      	mov	r0, r4
   d785c:	b013      	add	sp, #76	; 0x4c
   d785e:	bd30      	pop	{r4, r5, pc}
   d7860:	2003e670 	.word	0x2003e670
   d7864:	2003e668 	.word	0x2003e668

000d7868 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d7868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d786c:	b0a5      	sub	sp, #148	; 0x94
   d786e:	4607      	mov	r7, r0
   d7870:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d7872:	a814      	add	r0, sp, #80	; 0x50
{
   d7874:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d7876:	223f      	movs	r2, #63	; 0x3f
{
   d7878:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d787a:	f001 faee 	bl	d8e5a <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d787e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d7880:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d7882:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d7886:	f001 face 	bl	d8e26 <strlen>
   d788a:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d788c:	bb5d      	cbnz	r5, d78e6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d788e:	492a      	ldr	r1, [pc, #168]	; (d7938 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d7890:	a803      	add	r0, sp, #12
   d7892:	f001 faa3 	bl	d8ddc <strcpy>
   d7896:	ae14      	add	r6, sp, #80	; 0x50
{
   d7898:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d789a:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d789e:	45ab      	cmp	fp, r5
   d78a0:	d936      	bls.n	d7910 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d78a2:	46b1      	mov	r9, r6
   d78a4:	f105 0a01 	add.w	sl, r5, #1
   d78a8:	f819 3b01 	ldrb.w	r3, [r9], #1
   d78ac:	2b25      	cmp	r3, #37	; 0x25
   d78ae:	d117      	bne.n	d78e0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d78b0:	7873      	ldrb	r3, [r6, #1]
   d78b2:	2b7a      	cmp	r3, #122	; 0x7a
   d78b4:	d114      	bne.n	d78e0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d78b6:	a803      	add	r0, sp, #12
   d78b8:	f001 fab5 	bl	d8e26 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d78bc:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d78be:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d78c0:	1828      	adds	r0, r5, r0
   d78c2:	4418      	add	r0, r3
   d78c4:	ebab 0205 	sub.w	r2, fp, r5
   d78c8:	1cb1      	adds	r1, r6, #2
   d78ca:	f001 fa29 	bl	d8d20 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d78ce:	4622      	mov	r2, r4
   d78d0:	a903      	add	r1, sp, #12
   d78d2:	4630      	mov	r0, r6
   d78d4:	f001 fa24 	bl	d8d20 <memcpy>
            len = strlen(format_str);
   d78d8:	a814      	add	r0, sp, #80	; 0x50
   d78da:	f001 faa4 	bl	d8e26 <strlen>
   d78de:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d78e0:	464e      	mov	r6, r9
   d78e2:	4655      	mov	r5, sl
   d78e4:	e7d9      	b.n	d789a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d78e6:	213c      	movs	r1, #60	; 0x3c
   d78e8:	fb95 f3f1 	sdiv	r3, r5, r1
   d78ec:	2b00      	cmp	r3, #0
   d78ee:	bfb8      	it	lt
   d78f0:	425b      	neglt	r3, r3
   d78f2:	fbb3 f2f1 	udiv	r2, r3, r1
   d78f6:	fb01 3312 	mls	r3, r1, r2, r3
   d78fa:	9300      	str	r3, [sp, #0]
   d78fc:	4a0f      	ldr	r2, [pc, #60]	; (d793c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d78fe:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d7902:	2110      	movs	r1, #16
   d7904:	a803      	add	r0, sp, #12
   d7906:	fb95 f3f3 	sdiv	r3, r5, r3
   d790a:	f7ff f80d 	bl	d6928 <snprintf>
   d790e:	e7c2      	b.n	d7896 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d7910:	2100      	movs	r1, #0
   d7912:	222e      	movs	r2, #46	; 0x2e
   d7914:	a808      	add	r0, sp, #32
   d7916:	9107      	str	r1, [sp, #28]
   d7918:	f001 fa2a 	bl	d8d70 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d791c:	4643      	mov	r3, r8
   d791e:	aa14      	add	r2, sp, #80	; 0x50
   d7920:	2132      	movs	r1, #50	; 0x32
   d7922:	a807      	add	r0, sp, #28
   d7924:	f7ff f828 	bl	d6978 <strftime>
    return String(buf);
   d7928:	a907      	add	r1, sp, #28
   d792a:	4638      	mov	r0, r7
   d792c:	f7ff fe39 	bl	d75a2 <_ZN6StringC1EPKc>
}
   d7930:	4638      	mov	r0, r7
   d7932:	b025      	add	sp, #148	; 0x94
   d7934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7938:	000db374 	.word	0x000db374
   d793c:	000db376 	.word	0x000db376

000d7940 <_ZN9TimeClass6formatExPKc>:
{
   d7940:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7942:	b08d      	sub	sp, #52	; 0x34
   d7944:	e9cd 2300 	strd	r2, r3, [sp]
   d7948:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d794a:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d794c:	b915      	cbnz	r5, d7954 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d794e:	4b19      	ldr	r3, [pc, #100]	; (d79b4 <_ZN9TimeClass6formatExPKc+0x74>)
   d7950:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d7952:	b12d      	cbz	r5, d7960 <_ZN9TimeClass6formatExPKc+0x20>
   d7954:	4b18      	ldr	r3, [pc, #96]	; (d79b8 <_ZN9TimeClass6formatExPKc+0x78>)
   d7956:	4628      	mov	r0, r5
   d7958:	6819      	ldr	r1, [r3, #0]
   d795a:	f001 fa35 	bl	d8dc8 <strcmp>
   d795e:	b938      	cbnz	r0, d7970 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d7960:	e9dd 2300 	ldrd	r2, r3, [sp]
   d7964:	4620      	mov	r0, r4
   d7966:	f7ff ff47 	bl	d77f8 <_ZN9TimeClass7timeStrEx>
}
   d796a:	4620      	mov	r0, r4
   d796c:	b00d      	add	sp, #52	; 0x34
   d796e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d7970:	4e12      	ldr	r6, [pc, #72]	; (d79bc <_ZN9TimeClass6formatExPKc+0x7c>)
   d7972:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d7974:	4f12      	ldr	r7, [pc, #72]	; (d79c0 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d7976:	e9d6 3200 	ldrd	r3, r2, [r6]
   d797a:	185b      	adds	r3, r3, r1
   d797c:	9901      	ldr	r1, [sp, #4]
   d797e:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d7982:	e9d7 0100 	ldrd	r0, r1, [r7]
   d7986:	181b      	adds	r3, r3, r0
   d7988:	eb41 0202 	adc.w	r2, r1, r2
   d798c:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d7990:	2100      	movs	r1, #0
   d7992:	2224      	movs	r2, #36	; 0x24
   d7994:	a803      	add	r0, sp, #12
   d7996:	f001 f9eb 	bl	d8d70 <memset>
    localtime_r(&t, &calendar_time);
   d799a:	a903      	add	r1, sp, #12
   d799c:	4668      	mov	r0, sp
   d799e:	f7fe fff3 	bl	d6988 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d79a2:	6832      	ldr	r2, [r6, #0]
   d79a4:	683b      	ldr	r3, [r7, #0]
   d79a6:	a903      	add	r1, sp, #12
   d79a8:	4413      	add	r3, r2
   d79aa:	4620      	mov	r0, r4
   d79ac:	462a      	mov	r2, r5
   d79ae:	f7ff ff5b 	bl	d7868 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d79b2:	e7da      	b.n	d796a <_ZN9TimeClass6formatExPKc+0x2a>
   d79b4:	2003e63c 	.word	0x2003e63c
   d79b8:	2003de84 	.word	0x2003de84
   d79bc:	2003e670 	.word	0x2003e670
   d79c0:	2003e668 	.word	0x2003e668

000d79c4 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d79c4:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d79c6:	2000      	movs	r0, #0
   d79c8:	f7fe fd18 	bl	d63fc <hal_rtc_time_is_valid>
    if (rtcstate)
   d79cc:	4604      	mov	r4, r0
   d79ce:	b9a0      	cbnz	r0, d79fa <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d79d0:	f7fe fe7c 	bl	d66cc <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d79d4:	2801      	cmp	r0, #1
   d79d6:	d110      	bne.n	d79fa <_ZN9TimeClass7isValidEv+0x36>
   d79d8:	4620      	mov	r0, r4
   d79da:	f7fe fea7 	bl	d672c <system_thread_get_state>
   d79de:	b960      	cbnz	r0, d79fa <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d79e0:	f7ff feea 	bl	d77b8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d79e4:	b910      	cbnz	r0, d79ec <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d79e6:	f7fe fedf 	bl	d67a8 <spark_process>
        while (_while() && !_condition()) {
   d79ea:	e7f9      	b.n	d79e0 <_ZN9TimeClass7isValidEv+0x1c>
   d79ec:	f7ff fee4 	bl	d77b8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d79f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d79f4:	2000      	movs	r0, #0
   d79f6:	f7fe bd01 	b.w	d63fc <hal_rtc_time_is_valid>
}
   d79fa:	4620      	mov	r0, r4
   d79fc:	bd10      	pop	{r4, pc}

000d79fe <_ZN9TimeClass3nowEv>:
{
   d79fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d7a00:	f7ff ffe0 	bl	d79c4 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d7a04:	2210      	movs	r2, #16
   d7a06:	2100      	movs	r1, #0
   d7a08:	4668      	mov	r0, sp
   d7a0a:	f001 f9b1 	bl	d8d70 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d7a0e:	2100      	movs	r1, #0
   d7a10:	4668      	mov	r0, sp
   d7a12:	f7fe fd03 	bl	d641c <hal_rtc_get_time>
}
   d7a16:	9800      	ldr	r0, [sp, #0]
   d7a18:	b005      	add	sp, #20
   d7a1a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7a20 <_ZN9TimeClass4hourEv>:
{
   d7a20:	b508      	push	{r3, lr}
	return hour(now());
   d7a22:	f7ff ffec 	bl	d79fe <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d7a26:	17c1      	asrs	r1, r0, #31
   d7a28:	f7ff fe90 	bl	d774c <_ZL22Refresh_UnixTime_Cachex>
}
   d7a2c:	4b01      	ldr	r3, [pc, #4]	; (d7a34 <_ZN9TimeClass4hourEv+0x14>)
   d7a2e:	6898      	ldr	r0, [r3, #8]
   d7a30:	bd08      	pop	{r3, pc}
   d7a32:	bf00      	nop
   d7a34:	2003e640 	.word	0x2003e640

000d7a38 <_ZN9TimeClass4yearEv>:
{
   d7a38:	b508      	push	{r3, lr}
	return year(now());
   d7a3a:	f7ff ffe0 	bl	d79fe <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d7a3e:	17c1      	asrs	r1, r0, #31
   d7a40:	f7ff fe84 	bl	d774c <_ZL22Refresh_UnixTime_Cachex>
}
   d7a44:	4b01      	ldr	r3, [pc, #4]	; (d7a4c <_ZN9TimeClass4yearEv+0x14>)
   d7a46:	6958      	ldr	r0, [r3, #20]
   d7a48:	bd08      	pop	{r3, pc}
   d7a4a:	bf00      	nop
   d7a4c:	2003e640 	.word	0x2003e640

000d7a50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7a50:	4b02      	ldr	r3, [pc, #8]	; (d7a5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7a52:	681a      	ldr	r2, [r3, #0]
   d7a54:	4b02      	ldr	r3, [pc, #8]	; (d7a60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7a56:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7a58:	4770      	bx	lr
   d7a5a:	bf00      	nop
   d7a5c:	2003de84 	.word	0x2003de84
   d7a60:	2003e63c 	.word	0x2003e63c

000d7a64 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7a64:	4770      	bx	lr

000d7a66 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7a66:	7441      	strb	r1, [r0, #17]
}
   d7a68:	4770      	bx	lr

000d7a6a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d7a6a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7a6c:	7c00      	ldrb	r0, [r0, #16]
   d7a6e:	f7fe fde5 	bl	d663c <hal_usart_available_data_for_write>
}
   d7a72:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7a76:	bd08      	pop	{r3, pc}

000d7a78 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7a78:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7a7a:	7c00      	ldrb	r0, [r0, #16]
   d7a7c:	f7fe fdb6 	bl	d65ec <hal_usart_available>
}
   d7a80:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7a84:	bd08      	pop	{r3, pc}

000d7a86 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7a86:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7a88:	7c00      	ldrb	r0, [r0, #16]
   d7a8a:	f7fe fdbf 	bl	d660c <hal_usart_peek>
}
   d7a8e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7a92:	bd08      	pop	{r3, pc}

000d7a94 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7a94:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d7a96:	7c00      	ldrb	r0, [r0, #16]
   d7a98:	f7fe fdb0 	bl	d65fc <hal_usart_read>
}
   d7a9c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7aa0:	bd08      	pop	{r3, pc}

000d7aa2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d7aa2:	7c00      	ldrb	r0, [r0, #16]
   d7aa4:	f7fe bdba 	b.w	d661c <hal_usart_flush>

000d7aa8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7aa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7aaa:	7c45      	ldrb	r5, [r0, #17]
{
   d7aac:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7aae:	b12d      	cbz	r5, d7abc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d7ab0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7ab2:	b003      	add	sp, #12
   d7ab4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7ab8:	f7fe bd90 	b.w	d65dc <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7abc:	7c00      	ldrb	r0, [r0, #16]
   d7abe:	9101      	str	r1, [sp, #4]
   d7ac0:	f7fe fdbc 	bl	d663c <hal_usart_available_data_for_write>
   d7ac4:	2800      	cmp	r0, #0
   d7ac6:	9901      	ldr	r1, [sp, #4]
   d7ac8:	dcf2      	bgt.n	d7ab0 <_ZN11USARTSerial5writeEh+0x8>
}
   d7aca:	4628      	mov	r0, r5
   d7acc:	b003      	add	sp, #12
   d7ace:	bd30      	pop	{r4, r5, pc}

000d7ad0 <_ZN11USARTSerialD0Ev>:
   d7ad0:	b510      	push	{r4, lr}
   d7ad2:	2114      	movs	r1, #20
   d7ad4:	4604      	mov	r4, r0
   d7ad6:	f000 faae 	bl	d8036 <_ZdlPvj>
   d7ada:	4620      	mov	r0, r4
   d7adc:	bd10      	pop	{r4, pc}
	...

000d7ae0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7ae0:	b510      	push	{r4, lr}
   d7ae2:	f04f 0c00 	mov.w	ip, #0
   d7ae6:	4604      	mov	r4, r0
   d7ae8:	4608      	mov	r0, r1
   d7aea:	4611      	mov	r1, r2
   d7aec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7af0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7af4:	4a04      	ldr	r2, [pc, #16]	; (d7b08 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d7af6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7af8:	2201      	movs	r2, #1
  _serial = serial;
   d7afa:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7afc:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7afe:	461a      	mov	r2, r3
   d7b00:	f7fe fd64 	bl	d65cc <hal_usart_init>
}
   d7b04:	4620      	mov	r0, r4
   d7b06:	bd10      	pop	{r4, pc}
   d7b08:	000db3a8 	.word	0x000db3a8

000d7b0c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7b0c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7b0e:	4c0e      	ldr	r4, [pc, #56]	; (d7b48 <_Z22__fetch_global_Serial1v+0x3c>)
   d7b10:	7821      	ldrb	r1, [r4, #0]
   d7b12:	f3bf 8f5b 	dmb	ish
   d7b16:	f011 0101 	ands.w	r1, r1, #1
   d7b1a:	d112      	bne.n	d7b42 <_Z22__fetch_global_Serial1v+0x36>
   d7b1c:	4620      	mov	r0, r4
   d7b1e:	9101      	str	r1, [sp, #4]
   d7b20:	f7fc faca 	bl	d40b8 <__cxa_guard_acquire>
   d7b24:	9901      	ldr	r1, [sp, #4]
   d7b26:	b160      	cbz	r0, d7b42 <_Z22__fetch_global_Serial1v+0x36>
   d7b28:	4a08      	ldr	r2, [pc, #32]	; (d7b4c <_Z22__fetch_global_Serial1v+0x40>)
   d7b2a:	4b09      	ldr	r3, [pc, #36]	; (d7b50 <_Z22__fetch_global_Serial1v+0x44>)
   d7b2c:	4809      	ldr	r0, [pc, #36]	; (d7b54 <_Z22__fetch_global_Serial1v+0x48>)
   d7b2e:	f7ff ffd7 	bl	d7ae0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7b32:	4620      	mov	r0, r4
   d7b34:	f7fc fac5 	bl	d40c2 <__cxa_guard_release>
   d7b38:	4a07      	ldr	r2, [pc, #28]	; (d7b58 <_Z22__fetch_global_Serial1v+0x4c>)
   d7b3a:	4908      	ldr	r1, [pc, #32]	; (d7b5c <_Z22__fetch_global_Serial1v+0x50>)
   d7b3c:	4805      	ldr	r0, [pc, #20]	; (d7b54 <_Z22__fetch_global_Serial1v+0x48>)
   d7b3e:	f000 fa75 	bl	d802c <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7b42:	4804      	ldr	r0, [pc, #16]	; (d7b54 <_Z22__fetch_global_Serial1v+0x48>)
   d7b44:	b002      	add	sp, #8
   d7b46:	bd10      	pop	{r4, pc}
   d7b48:	2003e680 	.word	0x2003e680
   d7b4c:	2003e684 	.word	0x2003e684
   d7b50:	2003e708 	.word	0x2003e708
   d7b54:	2003e78c 	.word	0x2003e78c
   d7b58:	2003e060 	.word	0x2003e060
   d7b5c:	000d7a65 	.word	0x000d7a65

000d7b60 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7b60:	7441      	strb	r1, [r0, #17]
}
   d7b62:	4770      	bx	lr

000d7b64 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7b64:	4770      	bx	lr

000d7b66 <_ZN9USBSerial4readEv>:
{
   d7b66:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7b68:	2100      	movs	r1, #0
   d7b6a:	7c00      	ldrb	r0, [r0, #16]
   d7b6c:	f7fe fd86 	bl	d667c <HAL_USB_USART_Receive_Data>
}
   d7b70:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7b74:	bd08      	pop	{r3, pc}

000d7b76 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d7b76:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7b78:	2101      	movs	r1, #1
   d7b7a:	7c00      	ldrb	r0, [r0, #16]
   d7b7c:	f7fe fd7e 	bl	d667c <HAL_USB_USART_Receive_Data>
}
   d7b80:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7b84:	bd08      	pop	{r3, pc}

000d7b86 <_ZN9USBSerial17availableForWriteEv>:
{
   d7b86:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7b88:	7c00      	ldrb	r0, [r0, #16]
   d7b8a:	f7fe fd6f 	bl	d666c <HAL_USB_USART_Available_Data_For_Write>
}
   d7b8e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7b92:	bd08      	pop	{r3, pc}

000d7b94 <_ZN9USBSerial9availableEv>:
{
   d7b94:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7b96:	7c00      	ldrb	r0, [r0, #16]
   d7b98:	f7fe fd60 	bl	d665c <HAL_USB_USART_Available_Data>
}
   d7b9c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7ba0:	bd08      	pop	{r3, pc}

000d7ba2 <_ZN9USBSerial5writeEh>:
{
   d7ba2:	b513      	push	{r0, r1, r4, lr}
   d7ba4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7ba6:	7c00      	ldrb	r0, [r0, #16]
{
   d7ba8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7baa:	f7fe fd5f 	bl	d666c <HAL_USB_USART_Available_Data_For_Write>
   d7bae:	2800      	cmp	r0, #0
   d7bb0:	9901      	ldr	r1, [sp, #4]
   d7bb2:	dc01      	bgt.n	d7bb8 <_ZN9USBSerial5writeEh+0x16>
   d7bb4:	7c60      	ldrb	r0, [r4, #17]
   d7bb6:	b120      	cbz	r0, d7bc2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7bb8:	7c20      	ldrb	r0, [r4, #16]
   d7bba:	f7fe fd67 	bl	d668c <HAL_USB_USART_Send_Data>
   d7bbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d7bc2:	b002      	add	sp, #8
   d7bc4:	bd10      	pop	{r4, pc}

000d7bc6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d7bc6:	7c00      	ldrb	r0, [r0, #16]
   d7bc8:	f7fe bd68 	b.w	d669c <HAL_USB_USART_Flush_Data>

000d7bcc <_ZN9USBSerialD0Ev>:
   d7bcc:	b510      	push	{r4, lr}
   d7bce:	2114      	movs	r1, #20
   d7bd0:	4604      	mov	r4, r0
   d7bd2:	f000 fa30 	bl	d8036 <_ZdlPvj>
   d7bd6:	4620      	mov	r0, r4
   d7bd8:	bd10      	pop	{r4, pc}
	...

000d7bdc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7bdc:	b510      	push	{r4, lr}
   d7bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7be2:	4604      	mov	r4, r0
   d7be4:	4608      	mov	r0, r1
   d7be6:	2100      	movs	r1, #0
   d7be8:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7bec:	4b04      	ldr	r3, [pc, #16]	; (d7c00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7bee:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7bf0:	2301      	movs	r3, #1
  _serial = serial;
   d7bf2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7bf4:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d7bf6:	4611      	mov	r1, r2
   d7bf8:	f7fe fd28 	bl	d664c <HAL_USB_USART_Init>
}
   d7bfc:	4620      	mov	r0, r4
   d7bfe:	bd10      	pop	{r4, pc}
   d7c00:	000db3d8 	.word	0x000db3d8

000d7c04 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7c04:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7c06:	2214      	movs	r2, #20
{
   d7c08:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7c0a:	2100      	movs	r1, #0
   d7c0c:	f001 f8b0 	bl	d8d70 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7c10:	4620      	mov	r0, r4
   d7c12:	bd10      	pop	{r4, pc}

000d7c14 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7c14:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7c16:	4c10      	ldr	r4, [pc, #64]	; (d7c58 <_Z16_fetch_usbserialv+0x44>)
{
   d7c18:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7c1a:	a803      	add	r0, sp, #12
   d7c1c:	f7ff fff2 	bl	d7c04 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7c20:	7821      	ldrb	r1, [r4, #0]
   d7c22:	f3bf 8f5b 	dmb	ish
   d7c26:	f011 0101 	ands.w	r1, r1, #1
   d7c2a:	d111      	bne.n	d7c50 <_Z16_fetch_usbserialv+0x3c>
   d7c2c:	4620      	mov	r0, r4
   d7c2e:	9101      	str	r1, [sp, #4]
   d7c30:	f7fc fa42 	bl	d40b8 <__cxa_guard_acquire>
   d7c34:	9901      	ldr	r1, [sp, #4]
   d7c36:	b158      	cbz	r0, d7c50 <_Z16_fetch_usbserialv+0x3c>
   d7c38:	aa03      	add	r2, sp, #12
   d7c3a:	4808      	ldr	r0, [pc, #32]	; (d7c5c <_Z16_fetch_usbserialv+0x48>)
   d7c3c:	f7ff ffce 	bl	d7bdc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7c40:	4620      	mov	r0, r4
   d7c42:	f7fc fa3e 	bl	d40c2 <__cxa_guard_release>
   d7c46:	4a06      	ldr	r2, [pc, #24]	; (d7c60 <_Z16_fetch_usbserialv+0x4c>)
   d7c48:	4906      	ldr	r1, [pc, #24]	; (d7c64 <_Z16_fetch_usbserialv+0x50>)
   d7c4a:	4804      	ldr	r0, [pc, #16]	; (d7c5c <_Z16_fetch_usbserialv+0x48>)
   d7c4c:	f000 f9ee 	bl	d802c <__aeabi_atexit>
	return _usbserial;
}
   d7c50:	4802      	ldr	r0, [pc, #8]	; (d7c5c <_Z16_fetch_usbserialv+0x48>)
   d7c52:	b008      	add	sp, #32
   d7c54:	bd10      	pop	{r4, pc}
   d7c56:	bf00      	nop
   d7c58:	2003e7a0 	.word	0x2003e7a0
   d7c5c:	2003e7a4 	.word	0x2003e7a4
   d7c60:	2003e060 	.word	0x2003e060
   d7c64:	000d7b65 	.word	0x000d7b65

000d7c68 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7c68:	2200      	movs	r2, #0
   d7c6a:	6840      	ldr	r0, [r0, #4]
   d7c6c:	4611      	mov	r1, r2
   d7c6e:	f7fe be03 	b.w	d6878 <network_ready>

000d7c72 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7c72:	2200      	movs	r2, #0
   d7c74:	6840      	ldr	r0, [r0, #4]
   d7c76:	4611      	mov	r1, r2
   d7c78:	f7fe be1e 	b.w	d68b8 <network_listening>

000d7c7c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7c7c:	2200      	movs	r2, #0
   d7c7e:	6840      	ldr	r0, [r0, #4]
   d7c80:	4611      	mov	r1, r2
   d7c82:	f7fe be29 	b.w	d68d8 <network_get_listen_timeout>

000d7c86 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7c86:	6840      	ldr	r0, [r0, #4]
   d7c88:	2200      	movs	r2, #0
   d7c8a:	f7fe be1d 	b.w	d68c8 <network_set_listen_timeout>

000d7c8e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7c8e:	6840      	ldr	r0, [r0, #4]
   d7c90:	2200      	movs	r2, #0
   d7c92:	f081 0101 	eor.w	r1, r1, #1
   d7c96:	f7fe be07 	b.w	d68a8 <network_listen>

000d7c9a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7c9a:	2300      	movs	r3, #0
   d7c9c:	6840      	ldr	r0, [r0, #4]
   d7c9e:	461a      	mov	r2, r3
   d7ca0:	4619      	mov	r1, r3
   d7ca2:	f7fe bdf9 	b.w	d6898 <network_off>

000d7ca6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7ca6:	2300      	movs	r3, #0
   d7ca8:	6840      	ldr	r0, [r0, #4]
   d7caa:	461a      	mov	r2, r3
   d7cac:	4619      	mov	r1, r3
   d7cae:	f7fe bdeb 	b.w	d6888 <network_on>

000d7cb2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7cb2:	2200      	movs	r2, #0
   d7cb4:	6840      	ldr	r0, [r0, #4]
   d7cb6:	4611      	mov	r1, r2
   d7cb8:	f7fe bdce 	b.w	d6858 <network_connecting>

000d7cbc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7cbc:	6840      	ldr	r0, [r0, #4]
   d7cbe:	2200      	movs	r2, #0
   d7cc0:	2102      	movs	r1, #2
   d7cc2:	f7fe bdd1 	b.w	d6868 <network_disconnect>

000d7cc6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7cc6:	2300      	movs	r3, #0
   d7cc8:	6840      	ldr	r0, [r0, #4]
   d7cca:	461a      	mov	r2, r3
   d7ccc:	f7fe bdbc 	b.w	d6848 <network_connect>

000d7cd0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7cd0:	4b02      	ldr	r3, [pc, #8]	; (d7cdc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7cd2:	2204      	movs	r2, #4
   d7cd4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7cd6:	4a02      	ldr	r2, [pc, #8]	; (d7ce0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7cd8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d7cda:	4770      	bx	lr
   d7cdc:	2003e7b8 	.word	0x2003e7b8
   d7ce0:	000db408 	.word	0x000db408

000d7ce4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d7ce4:	b510      	push	{r4, lr}
   d7ce6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d7ce8:	f001 f89d 	bl	d8e26 <strlen>
   d7cec:	3801      	subs	r0, #1
   d7cee:	1823      	adds	r3, r4, r0
   d7cf0:	4620      	mov	r0, r4
	while(i<j){
   d7cf2:	4283      	cmp	r3, r0
   d7cf4:	d906      	bls.n	d7d04 <_Z11str_reversePc+0x20>
		c = *i;
   d7cf6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d7cf8:	7819      	ldrb	r1, [r3, #0]
   d7cfa:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d7cfe:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d7d02:	e7f6      	b.n	d7cf2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d7d04:	bd10      	pop	{r4, pc}

000d7d06 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d7d06:	b570      	push	{r4, r5, r6, lr}
   d7d08:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d7d0a:	1e91      	subs	r1, r2, #2
   d7d0c:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d7d0e:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d7d10:	d822      	bhi.n	d7d58 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d7d12:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d7d14:	b16d      	cbz	r5, d7d32 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d7d16:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d7d1a:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d7d1e:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d7d20:	2d09      	cmp	r5, #9
                *ptr += '0';
   d7d22:	bf94      	ite	ls
   d7d24:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d7d26:	3157      	addhi	r1, #87	; 0x57
   d7d28:	b2c9      	uxtb	r1, r1
   d7d2a:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d7d2e:	4635      	mov	r5, r6
	while(a){
   d7d30:	e7f0      	b.n	d7d14 <ultoa+0xe>
   d7d32:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d7d34:	4423      	add	r3, r4
            *ptr++ = '0';
   d7d36:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d7d38:	4293      	cmp	r3, r2
   d7d3a:	d902      	bls.n	d7d42 <ultoa+0x3c>
            *ptr++ = '0';
   d7d3c:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d7d40:	e7fa      	b.n	d7d38 <ultoa+0x32>
   d7d42:	1a1a      	subs	r2, r3, r0
   d7d44:	4283      	cmp	r3, r0
   d7d46:	bf38      	it	cc
   d7d48:	2200      	movcc	r2, #0

	*ptr = '\0';
   d7d4a:	2300      	movs	r3, #0
   d7d4c:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d7d4e:	4620      	mov	r0, r4
   d7d50:	f7ff ffc8 	bl	d7ce4 <_Z11str_reversePc>
	return buffer;
   d7d54:	4620      	mov	r0, r4
}
   d7d56:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d7d58:	2000      	movs	r0, #0
   d7d5a:	e7fc      	b.n	d7d56 <ultoa+0x50>

000d7d5c <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d7d5c:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d7d5e:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d7d60:	460c      	mov	r4, r1
   d7d62:	4615      	mov	r5, r2
	if(a<0){
   d7d64:	da0e      	bge.n	d7d84 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d7d66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d7d6a:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d7d6e:	bf14      	ite	ne
   d7d70:	4258      	negne	r0, r3
   d7d72:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d7d74:	2301      	movs	r3, #1
		*buffer = '-';
   d7d76:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d7d78:	462a      	mov	r2, r5
   d7d7a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d7d7c:	f7ff ffc3 	bl	d7d06 <ultoa>
	}
	return buffer;
}
   d7d80:	4620      	mov	r0, r4
   d7d82:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d7d84:	2301      	movs	r3, #1
   d7d86:	e7f9      	b.n	d7d7c <itoa+0x20>

000d7d88 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7d88:	4b01      	ldr	r3, [pc, #4]	; (d7d90 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d7d8a:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7d8c:	4770      	bx	lr
   d7d8e:	bf00      	nop
   d7d90:	2003de8c 	.word	0x2003de8c

000d7d94 <serialEventRun>:
{
   d7d94:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7d96:	4b0b      	ldr	r3, [pc, #44]	; (d7dc4 <serialEventRun+0x30>)
   d7d98:	b143      	cbz	r3, d7dac <serialEventRun+0x18>
   d7d9a:	f7ff ff3b 	bl	d7c14 <_Z16_fetch_usbserialv>
   d7d9e:	6803      	ldr	r3, [r0, #0]
   d7da0:	691b      	ldr	r3, [r3, #16]
   d7da2:	4798      	blx	r3
   d7da4:	2800      	cmp	r0, #0
   d7da6:	dd01      	ble.n	d7dac <serialEventRun+0x18>
        serialEvent();
   d7da8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7dac:	4b06      	ldr	r3, [pc, #24]	; (d7dc8 <serialEventRun+0x34>)
   d7dae:	b143      	cbz	r3, d7dc2 <serialEventRun+0x2e>
   d7db0:	f7ff feac 	bl	d7b0c <_Z22__fetch_global_Serial1v>
   d7db4:	6803      	ldr	r3, [r0, #0]
   d7db6:	691b      	ldr	r3, [r3, #16]
   d7db8:	4798      	blx	r3
   d7dba:	2800      	cmp	r0, #0
   d7dbc:	dd01      	ble.n	d7dc2 <serialEventRun+0x2e>
        serialEvent1();
   d7dbe:	f3af 8000 	nop.w
}
   d7dc2:	bd08      	pop	{r3, pc}
	...

000d7dcc <_post_loop>:
{
   d7dcc:	b508      	push	{r3, lr}
	serialEventRun();
   d7dce:	f7ff ffe1 	bl	d7d94 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7dd2:	f7fe fb0b 	bl	d63ec <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7dd6:	4b01      	ldr	r3, [pc, #4]	; (d7ddc <_post_loop+0x10>)
   d7dd8:	6018      	str	r0, [r3, #0]
}
   d7dda:	bd08      	pop	{r3, pc}
   d7ddc:	2003e7d4 	.word	0x2003e7d4

000d7de0 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7de0:	4802      	ldr	r0, [pc, #8]	; (d7dec <_Z33system_initialize_user_backup_ramv+0xc>)
   d7de2:	4a03      	ldr	r2, [pc, #12]	; (d7df0 <_Z33system_initialize_user_backup_ramv+0x10>)
   d7de4:	4903      	ldr	r1, [pc, #12]	; (d7df4 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7de6:	1a12      	subs	r2, r2, r0
   d7de8:	f000 bf9a 	b.w	d8d20 <memcpy>
   d7dec:	2003f400 	.word	0x2003f400
   d7df0:	2003fc04 	.word	0x2003fc04
   d7df4:	000db740 	.word	0x000db740

000d7df8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7df8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7dfa:	2300      	movs	r3, #0
   d7dfc:	9300      	str	r3, [sp, #0]
   d7dfe:	461a      	mov	r2, r3
   d7e00:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7e04:	f7fe fcac 	bl	d6760 <system_ctrl_set_result>
}
   d7e08:	b003      	add	sp, #12
   d7e0a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7e10 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d7e10:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7e12:	8843      	ldrh	r3, [r0, #2]
   d7e14:	2b0a      	cmp	r3, #10
   d7e16:	d008      	beq.n	d7e2a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7e18:	2b50      	cmp	r3, #80	; 0x50
   d7e1a:	d10b      	bne.n	d7e34 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d7e1c:	4b09      	ldr	r3, [pc, #36]	; (d7e44 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7e1e:	681b      	ldr	r3, [r3, #0]
   d7e20:	b14b      	cbz	r3, d7e36 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d7e22:	b003      	add	sp, #12
   d7e24:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7e28:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d7e2a:	f7ff ffe5 	bl	d7df8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d7e2e:	b003      	add	sp, #12
   d7e30:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7e34:	2300      	movs	r3, #0
   d7e36:	9300      	str	r3, [sp, #0]
   d7e38:	461a      	mov	r2, r3
   d7e3a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7e3e:	f7fe fc8f 	bl	d6760 <system_ctrl_set_result>
}
   d7e42:	e7f4      	b.n	d7e2e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7e44:	2003e7c4 	.word	0x2003e7c4

000d7e48 <module_user_init_hook>:
{
   d7e48:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7e4a:	4c12      	ldr	r4, [pc, #72]	; (d7e94 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7e4c:	4812      	ldr	r0, [pc, #72]	; (d7e98 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7e4e:	4d13      	ldr	r5, [pc, #76]	; (d7e9c <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7e50:	2100      	movs	r1, #0
   d7e52:	f7fe fd89 	bl	d6968 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7e56:	6823      	ldr	r3, [r4, #0]
   d7e58:	42ab      	cmp	r3, r5
   d7e5a:	4b11      	ldr	r3, [pc, #68]	; (d7ea0 <module_user_init_hook+0x58>)
   d7e5c:	bf0c      	ite	eq
   d7e5e:	2201      	moveq	r2, #1
   d7e60:	2200      	movne	r2, #0
   d7e62:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7e64:	d002      	beq.n	d7e6c <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d7e66:	f7ff ffbb 	bl	d7de0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7e6a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7e6c:	f7fe faa6 	bl	d63bc <HAL_RNG_GetRandomNumber>
   d7e70:	4604      	mov	r4, r0
    srand(seed);
   d7e72:	f000 ff85 	bl	d8d80 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7e76:	4b0b      	ldr	r3, [pc, #44]	; (d7ea4 <module_user_init_hook+0x5c>)
   d7e78:	b113      	cbz	r3, d7e80 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d7e7a:	4620      	mov	r0, r4
   d7e7c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7e80:	2100      	movs	r1, #0
   d7e82:	4808      	ldr	r0, [pc, #32]	; (d7ea4 <module_user_init_hook+0x5c>)
   d7e84:	f7fe fcd8 	bl	d6838 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7e8c:	4806      	ldr	r0, [pc, #24]	; (d7ea8 <module_user_init_hook+0x60>)
   d7e8e:	2100      	movs	r1, #0
   d7e90:	f7fe bc5c 	b.w	d674c <system_ctrl_set_app_request_handler>
   d7e94:	2003fc00 	.word	0x2003fc00
   d7e98:	000d7d89 	.word	0x000d7d89
   d7e9c:	9a271c1e 	.word	0x9a271c1e
   d7ea0:	2003e7c0 	.word	0x2003e7c0
   d7ea4:	00000000 	.word	0x00000000
   d7ea8:	000d7e11 	.word	0x000d7e11

000d7eac <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7eac:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7eae:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7eb0:	d902      	bls.n	d7eb8 <pinAvailable+0xc>
    return false;
   d7eb2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7eb4:	b002      	add	sp, #8
   d7eb6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7eb8:	f1a0 030b 	sub.w	r3, r0, #11
   d7ebc:	2b02      	cmp	r3, #2
   d7ebe:	d81a      	bhi.n	d7ef6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7ec0:	4c17      	ldr	r4, [pc, #92]	; (d7f20 <pinAvailable+0x74>)
   d7ec2:	7821      	ldrb	r1, [r4, #0]
   d7ec4:	f3bf 8f5b 	dmb	ish
   d7ec8:	f011 0101 	ands.w	r1, r1, #1
   d7ecc:	d10b      	bne.n	d7ee6 <pinAvailable+0x3a>
   d7ece:	4620      	mov	r0, r4
   d7ed0:	9101      	str	r1, [sp, #4]
   d7ed2:	f7fc f8f1 	bl	d40b8 <__cxa_guard_acquire>
   d7ed6:	9901      	ldr	r1, [sp, #4]
   d7ed8:	b128      	cbz	r0, d7ee6 <pinAvailable+0x3a>
   d7eda:	4812      	ldr	r0, [pc, #72]	; (d7f24 <pinAvailable+0x78>)
   d7edc:	f7ff fb0c 	bl	d74f8 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7ee0:	4620      	mov	r0, r4
   d7ee2:	f7fc f8ee 	bl	d40c2 <__cxa_guard_release>
   d7ee6:	4b0f      	ldr	r3, [pc, #60]	; (d7f24 <pinAvailable+0x78>)
   d7ee8:	7818      	ldrb	r0, [r3, #0]
   d7eea:	f7fe fb67 	bl	d65bc <hal_spi_is_enabled>
   d7eee:	2800      	cmp	r0, #0
   d7ef0:	d1df      	bne.n	d7eb2 <pinAvailable+0x6>
  return true; // 'pin' is available
   d7ef2:	2001      	movs	r0, #1
   d7ef4:	e7de      	b.n	d7eb4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7ef6:	2801      	cmp	r0, #1
   d7ef8:	d809      	bhi.n	d7f0e <pinAvailable+0x62>
   d7efa:	f000 f86f 	bl	d7fdc <_Z19__fetch_global_Wirev>
   d7efe:	2100      	movs	r1, #0
   d7f00:	7c00      	ldrb	r0, [r0, #16]
   d7f02:	f7fe fb13 	bl	d652c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7f06:	f080 0001 	eor.w	r0, r0, #1
   d7f0a:	b2c0      	uxtb	r0, r0
   d7f0c:	e7d2      	b.n	d7eb4 <pinAvailable+0x8>
   d7f0e:	3809      	subs	r0, #9
   d7f10:	2801      	cmp	r0, #1
   d7f12:	d8ee      	bhi.n	d7ef2 <pinAvailable+0x46>
   d7f14:	f7ff fdfa 	bl	d7b0c <_Z22__fetch_global_Serial1v>
   d7f18:	7c00      	ldrb	r0, [r0, #16]
   d7f1a:	f7fe fb87 	bl	d662c <hal_usart_is_enabled>
   d7f1e:	e7f2      	b.n	d7f06 <pinAvailable+0x5a>
   d7f20:	2003e7c8 	.word	0x2003e7c8
   d7f24:	2003e7cc 	.word	0x2003e7cc

000d7f28 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7f28:	2823      	cmp	r0, #35	; 0x23
{
   d7f2a:	b538      	push	{r3, r4, r5, lr}
   d7f2c:	4604      	mov	r4, r0
   d7f2e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7f30:	d80a      	bhi.n	d7f48 <pinMode+0x20>
   d7f32:	29ff      	cmp	r1, #255	; 0xff
   d7f34:	d008      	beq.n	d7f48 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7f36:	f7ff ffb9 	bl	d7eac <pinAvailable>
   d7f3a:	b128      	cbz	r0, d7f48 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d7f3c:	4629      	mov	r1, r5
   d7f3e:	4620      	mov	r0, r4
}
   d7f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7f44:	f7fe ba82 	b.w	d644c <HAL_Pin_Mode>
}
   d7f48:	bd38      	pop	{r3, r4, r5, pc}

000d7f4a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7f4a:	b538      	push	{r3, r4, r5, lr}
   d7f4c:	4604      	mov	r4, r0
   d7f4e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7f50:	f7fe fa84 	bl	d645c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7f54:	28ff      	cmp	r0, #255	; 0xff
   d7f56:	d010      	beq.n	d7f7a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d7f58:	2806      	cmp	r0, #6
   d7f5a:	d804      	bhi.n	d7f66 <digitalWrite+0x1c>
   d7f5c:	234d      	movs	r3, #77	; 0x4d
   d7f5e:	fa23 f000 	lsr.w	r0, r3, r0
   d7f62:	07c3      	lsls	r3, r0, #31
   d7f64:	d409      	bmi.n	d7f7a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7f66:	4620      	mov	r0, r4
   d7f68:	f7ff ffa0 	bl	d7eac <pinAvailable>
   d7f6c:	b128      	cbz	r0, d7f7a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7f6e:	4629      	mov	r1, r5
   d7f70:	4620      	mov	r0, r4
}
   d7f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d7f76:	f7fe ba79 	b.w	d646c <HAL_GPIO_Write>
}
   d7f7a:	bd38      	pop	{r3, r4, r5, pc}

000d7f7c <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7f7c:	280d      	cmp	r0, #13
{
   d7f7e:	b510      	push	{r4, lr}
   d7f80:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7f82:	bf9c      	itt	ls
   d7f84:	340e      	addls	r4, #14
   d7f86:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7f88:	4620      	mov	r0, r4
   d7f8a:	f7ff ff8f 	bl	d7eac <pinAvailable>
   d7f8e:	b150      	cbz	r0, d7fa6 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7f90:	2103      	movs	r1, #3
   d7f92:	4620      	mov	r0, r4
   d7f94:	f7fe fa52 	bl	d643c <HAL_Validate_Pin_Function>
   d7f98:	2803      	cmp	r0, #3
   d7f9a:	d104      	bne.n	d7fa6 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d7f9c:	4620      	mov	r0, r4
}
   d7f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d7fa2:	f7fe ba7b 	b.w	d649c <hal_adc_read>
}
   d7fa6:	2000      	movs	r0, #0
   d7fa8:	bd10      	pop	{r4, pc}
	...

000d7fac <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7fac:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7fae:	2300      	movs	r3, #0
   d7fb0:	2520      	movs	r5, #32
   d7fb2:	8043      	strh	r3, [r0, #2]
   d7fb4:	2314      	movs	r3, #20
{
   d7fb6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7fb8:	8003      	strh	r3, [r0, #0]
   d7fba:	6085      	str	r5, [r0, #8]
   d7fbc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7fbe:	4906      	ldr	r1, [pc, #24]	; (d7fd8 <_Z17acquireWireBufferv+0x2c>)
   d7fc0:	4628      	mov	r0, r5
   d7fc2:	f000 f83c 	bl	d803e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7fc6:	4904      	ldr	r1, [pc, #16]	; (d7fd8 <_Z17acquireWireBufferv+0x2c>)
	};
   d7fc8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7fca:	4628      	mov	r0, r5
   d7fcc:	f000 f837 	bl	d803e <_ZnajRKSt9nothrow_t>
	};
   d7fd0:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7fd2:	4620      	mov	r0, r4
   d7fd4:	bd38      	pop	{r3, r4, r5, pc}
   d7fd6:	bf00      	nop
   d7fd8:	000db434 	.word	0x000db434

000d7fdc <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7fdc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7fde:	4d0f      	ldr	r5, [pc, #60]	; (d801c <_Z19__fetch_global_Wirev+0x40>)
   d7fe0:	7829      	ldrb	r1, [r5, #0]
   d7fe2:	f3bf 8f5b 	dmb	ish
   d7fe6:	f011 0401 	ands.w	r4, r1, #1
{
   d7fea:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7fec:	d113      	bne.n	d8016 <_Z19__fetch_global_Wirev+0x3a>
   d7fee:	4628      	mov	r0, r5
   d7ff0:	f7fc f862 	bl	d40b8 <__cxa_guard_acquire>
   d7ff4:	b178      	cbz	r0, d8016 <_Z19__fetch_global_Wirev+0x3a>
   d7ff6:	a801      	add	r0, sp, #4
   d7ff8:	f7ff ffd8 	bl	d7fac <_Z17acquireWireBufferv>
   d7ffc:	aa01      	add	r2, sp, #4
   d7ffe:	4621      	mov	r1, r4
   d8000:	4807      	ldr	r0, [pc, #28]	; (d8020 <_Z19__fetch_global_Wirev+0x44>)
   d8002:	f7ff f86f 	bl	d70e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d8006:	4628      	mov	r0, r5
   d8008:	f7fc f85b 	bl	d40c2 <__cxa_guard_release>
   d800c:	4a05      	ldr	r2, [pc, #20]	; (d8024 <_Z19__fetch_global_Wirev+0x48>)
   d800e:	4906      	ldr	r1, [pc, #24]	; (d8028 <_Z19__fetch_global_Wirev+0x4c>)
   d8010:	4803      	ldr	r0, [pc, #12]	; (d8020 <_Z19__fetch_global_Wirev+0x44>)
   d8012:	f000 f80b 	bl	d802c <__aeabi_atexit>
	return wire;
}
   d8016:	4802      	ldr	r0, [pc, #8]	; (d8020 <_Z19__fetch_global_Wirev+0x44>)
   d8018:	b007      	add	sp, #28
   d801a:	bd30      	pop	{r4, r5, pc}
   d801c:	2003e7d8 	.word	0x2003e7d8
   d8020:	2003e7dc 	.word	0x2003e7dc
   d8024:	2003e060 	.word	0x2003e060
   d8028:	000d708d 	.word	0x000d708d

000d802c <__aeabi_atexit>:
   d802c:	460b      	mov	r3, r1
   d802e:	4601      	mov	r1, r0
   d8030:	4618      	mov	r0, r3
   d8032:	f000 be55 	b.w	d8ce0 <__cxa_atexit>

000d8036 <_ZdlPvj>:
   d8036:	f7fc b832 	b.w	d409e <_ZdlPv>

000d803a <_ZnwjRKSt9nothrow_t>:
   d803a:	f7fc b82c 	b.w	d4096 <_Znwj>

000d803e <_ZnajRKSt9nothrow_t>:
   d803e:	f7fc b82c 	b.w	d409a <_Znaj>

000d8042 <_ZSt25__throw_bad_function_callv>:
   d8042:	b508      	push	{r3, lr}
   d8044:	f7fe fc78 	bl	d6938 <abort>

000d8048 <sqrt>:
   d8048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d804c:	ed2d 8b02 	vpush	{d8}
   d8050:	b08b      	sub	sp, #44	; 0x2c
   d8052:	ec55 4b10 	vmov	r4, r5, d0
   d8056:	f000 f855 	bl	d8104 <__ieee754_sqrt>
   d805a:	4b28      	ldr	r3, [pc, #160]	; (d80fc <sqrt+0xb4>)
   d805c:	eeb0 8a40 	vmov.f32	s16, s0
   d8060:	eef0 8a60 	vmov.f32	s17, s1
   d8064:	f993 7000 	ldrsb.w	r7, [r3]
   d8068:	1c7b      	adds	r3, r7, #1
   d806a:	d012      	beq.n	d8092 <sqrt+0x4a>
   d806c:	4622      	mov	r2, r4
   d806e:	462b      	mov	r3, r5
   d8070:	4620      	mov	r0, r4
   d8072:	4629      	mov	r1, r5
   d8074:	f000 fd62 	bl	d8b3c <__aeabi_dcmpun>
   d8078:	4606      	mov	r6, r0
   d807a:	b950      	cbnz	r0, d8092 <sqrt+0x4a>
   d807c:	f04f 0800 	mov.w	r8, #0
   d8080:	f04f 0900 	mov.w	r9, #0
   d8084:	4620      	mov	r0, r4
   d8086:	4629      	mov	r1, r5
   d8088:	4642      	mov	r2, r8
   d808a:	464b      	mov	r3, r9
   d808c:	f000 fd2e 	bl	d8aec <__aeabi_dcmplt>
   d8090:	b940      	cbnz	r0, d80a4 <sqrt+0x5c>
   d8092:	eeb0 0a48 	vmov.f32	s0, s16
   d8096:	eef0 0a68 	vmov.f32	s1, s17
   d809a:	b00b      	add	sp, #44	; 0x2c
   d809c:	ecbd 8b02 	vpop	{d8}
   d80a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d80a4:	4b16      	ldr	r3, [pc, #88]	; (d8100 <sqrt+0xb8>)
   d80a6:	9608      	str	r6, [sp, #32]
   d80a8:	2201      	movs	r2, #1
   d80aa:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d80ae:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d80b2:	9200      	str	r2, [sp, #0]
   d80b4:	9301      	str	r3, [sp, #4]
   d80b6:	b197      	cbz	r7, d80de <sqrt+0x96>
   d80b8:	4642      	mov	r2, r8
   d80ba:	464b      	mov	r3, r9
   d80bc:	4640      	mov	r0, r8
   d80be:	4649      	mov	r1, r9
   d80c0:	f000 fbcc 	bl	d885c <__aeabi_ddiv>
   d80c4:	2f02      	cmp	r7, #2
   d80c6:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d80ca:	d10a      	bne.n	d80e2 <sqrt+0x9a>
   d80cc:	f7fe fc44 	bl	d6958 <__errno>
   d80d0:	2321      	movs	r3, #33	; 0x21
   d80d2:	6003      	str	r3, [r0, #0]
   d80d4:	9b08      	ldr	r3, [sp, #32]
   d80d6:	b963      	cbnz	r3, d80f2 <sqrt+0xaa>
   d80d8:	ed9d 8b06 	vldr	d8, [sp, #24]
   d80dc:	e7d9      	b.n	d8092 <sqrt+0x4a>
   d80de:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d80e2:	4668      	mov	r0, sp
   d80e4:	f000 f8d2 	bl	d828c <matherr>
   d80e8:	2800      	cmp	r0, #0
   d80ea:	d0ef      	beq.n	d80cc <sqrt+0x84>
   d80ec:	9b08      	ldr	r3, [sp, #32]
   d80ee:	2b00      	cmp	r3, #0
   d80f0:	d0f2      	beq.n	d80d8 <sqrt+0x90>
   d80f2:	f7fe fc31 	bl	d6958 <__errno>
   d80f6:	9b08      	ldr	r3, [sp, #32]
   d80f8:	6003      	str	r3, [r0, #0]
   d80fa:	e7ed      	b.n	d80d8 <sqrt+0x90>
   d80fc:	2003de88 	.word	0x2003de88
   d8100:	000db438 	.word	0x000db438

000d8104 <__ieee754_sqrt>:
   d8104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8108:	4a5f      	ldr	r2, [pc, #380]	; (d8288 <__ieee754_sqrt+0x184>)
   d810a:	ec57 6b10 	vmov	r6, r7, d0
   d810e:	43ba      	bics	r2, r7
   d8110:	f000 8098 	beq.w	d8244 <__ieee754_sqrt+0x140>
   d8114:	2f00      	cmp	r7, #0
   d8116:	ee10 4a10 	vmov	r4, s0
   d811a:	463b      	mov	r3, r7
   d811c:	dd4e      	ble.n	d81bc <__ieee754_sqrt+0xb8>
   d811e:	1539      	asrs	r1, r7, #20
   d8120:	d05b      	beq.n	d81da <__ieee754_sqrt+0xd6>
   d8122:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d8126:	07ca      	lsls	r2, r1, #31
   d8128:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d812c:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d8130:	d403      	bmi.n	d813a <__ieee754_sqrt+0x36>
   d8132:	005b      	lsls	r3, r3, #1
   d8134:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d8138:	0064      	lsls	r4, r4, #1
   d813a:	0fe2      	lsrs	r2, r4, #31
   d813c:	f04f 0c00 	mov.w	ip, #0
   d8140:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d8144:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d8148:	0064      	lsls	r4, r4, #1
   d814a:	4666      	mov	r6, ip
   d814c:	2516      	movs	r5, #22
   d814e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d8152:	18b1      	adds	r1, r6, r2
   d8154:	4299      	cmp	r1, r3
   d8156:	dc02      	bgt.n	d815e <__ieee754_sqrt+0x5a>
   d8158:	1a5b      	subs	r3, r3, r1
   d815a:	188e      	adds	r6, r1, r2
   d815c:	4494      	add	ip, r2
   d815e:	005b      	lsls	r3, r3, #1
   d8160:	3d01      	subs	r5, #1
   d8162:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d8166:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d816a:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d816e:	d1f0      	bne.n	d8152 <__ieee754_sqrt+0x4e>
   d8170:	462f      	mov	r7, r5
   d8172:	2020      	movs	r0, #32
   d8174:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d8178:	e009      	b.n	d818e <__ieee754_sqrt+0x8a>
   d817a:	d03e      	beq.n	d81fa <__ieee754_sqrt+0xf6>
   d817c:	0fe1      	lsrs	r1, r4, #31
   d817e:	3801      	subs	r0, #1
   d8180:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d8184:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d8188:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d818c:	d03e      	beq.n	d820c <__ieee754_sqrt+0x108>
   d818e:	42b3      	cmp	r3, r6
   d8190:	eb02 0105 	add.w	r1, r2, r5
   d8194:	ddf1      	ble.n	d817a <__ieee754_sqrt+0x76>
   d8196:	2900      	cmp	r1, #0
   d8198:	eb01 0502 	add.w	r5, r1, r2
   d819c:	db09      	blt.n	d81b2 <__ieee754_sqrt+0xae>
   d819e:	46b0      	mov	r8, r6
   d81a0:	1b9b      	subs	r3, r3, r6
   d81a2:	42a1      	cmp	r1, r4
   d81a4:	bf88      	it	hi
   d81a6:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   d81aa:	1a64      	subs	r4, r4, r1
   d81ac:	4417      	add	r7, r2
   d81ae:	4646      	mov	r6, r8
   d81b0:	e7e4      	b.n	d817c <__ieee754_sqrt+0x78>
   d81b2:	2d00      	cmp	r5, #0
   d81b4:	dbf3      	blt.n	d819e <__ieee754_sqrt+0x9a>
   d81b6:	f106 0801 	add.w	r8, r6, #1
   d81ba:	e7f1      	b.n	d81a0 <__ieee754_sqrt+0x9c>
   d81bc:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d81c0:	4332      	orrs	r2, r6
   d81c2:	d036      	beq.n	d8232 <__ieee754_sqrt+0x12e>
   d81c4:	2f00      	cmp	r7, #0
   d81c6:	d14d      	bne.n	d8264 <__ieee754_sqrt+0x160>
   d81c8:	4639      	mov	r1, r7
   d81ca:	0ae2      	lsrs	r2, r4, #11
   d81cc:	3915      	subs	r1, #21
   d81ce:	0564      	lsls	r4, r4, #21
   d81d0:	4613      	mov	r3, r2
   d81d2:	2a00      	cmp	r2, #0
   d81d4:	d0f9      	beq.n	d81ca <__ieee754_sqrt+0xc6>
   d81d6:	02d7      	lsls	r7, r2, #11
   d81d8:	d451      	bmi.n	d827e <__ieee754_sqrt+0x17a>
   d81da:	2000      	movs	r0, #0
   d81dc:	005b      	lsls	r3, r3, #1
   d81de:	02de      	lsls	r6, r3, #11
   d81e0:	4605      	mov	r5, r0
   d81e2:	f100 0001 	add.w	r0, r0, #1
   d81e6:	d5f9      	bpl.n	d81dc <__ieee754_sqrt+0xd8>
   d81e8:	461a      	mov	r2, r3
   d81ea:	4623      	mov	r3, r4
   d81ec:	4084      	lsls	r4, r0
   d81ee:	f1c0 0020 	rsb	r0, r0, #32
   d81f2:	40c3      	lsrs	r3, r0
   d81f4:	4313      	orrs	r3, r2
   d81f6:	1b49      	subs	r1, r1, r5
   d81f8:	e793      	b.n	d8122 <__ieee754_sqrt+0x1e>
   d81fa:	42a1      	cmp	r1, r4
   d81fc:	d8be      	bhi.n	d817c <__ieee754_sqrt+0x78>
   d81fe:	2900      	cmp	r1, #0
   d8200:	eb01 0502 	add.w	r5, r1, r2
   d8204:	dbd5      	blt.n	d81b2 <__ieee754_sqrt+0xae>
   d8206:	4698      	mov	r8, r3
   d8208:	2300      	movs	r3, #0
   d820a:	e7ce      	b.n	d81aa <__ieee754_sqrt+0xa6>
   d820c:	4323      	orrs	r3, r4
   d820e:	d112      	bne.n	d8236 <__ieee754_sqrt+0x132>
   d8210:	0878      	lsrs	r0, r7, #1
   d8212:	ea4f 016c 	mov.w	r1, ip, asr #1
   d8216:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d821a:	f01c 0f01 	tst.w	ip, #1
   d821e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d8222:	bf18      	it	ne
   d8224:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d8228:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d822c:	4602      	mov	r2, r0
   d822e:	ec43 2b10 	vmov	d0, r2, r3
   d8232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8236:	1c7b      	adds	r3, r7, #1
   d8238:	bf16      	itet	ne
   d823a:	1c78      	addne	r0, r7, #1
   d823c:	f10c 0c01 	addeq.w	ip, ip, #1
   d8240:	0840      	lsrne	r0, r0, #1
   d8242:	e7e6      	b.n	d8212 <__ieee754_sqrt+0x10e>
   d8244:	ee10 2a10 	vmov	r2, s0
   d8248:	ee10 0a10 	vmov	r0, s0
   d824c:	463b      	mov	r3, r7
   d824e:	4639      	mov	r1, r7
   d8250:	f000 f9da 	bl	d8608 <__aeabi_dmul>
   d8254:	4632      	mov	r2, r6
   d8256:	463b      	mov	r3, r7
   d8258:	f000 f820 	bl	d829c <__adddf3>
   d825c:	ec41 0b10 	vmov	d0, r0, r1
   d8260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8264:	ee10 2a10 	vmov	r2, s0
   d8268:	4630      	mov	r0, r6
   d826a:	4639      	mov	r1, r7
   d826c:	f000 f814 	bl	d8298 <__aeabi_dsub>
   d8270:	4602      	mov	r2, r0
   d8272:	460b      	mov	r3, r1
   d8274:	f000 faf2 	bl	d885c <__aeabi_ddiv>
   d8278:	ec41 0b10 	vmov	d0, r0, r1
   d827c:	e7d9      	b.n	d8232 <__ieee754_sqrt+0x12e>
   d827e:	4623      	mov	r3, r4
   d8280:	2020      	movs	r0, #32
   d8282:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d8286:	e7b4      	b.n	d81f2 <__ieee754_sqrt+0xee>
   d8288:	7ff00000 	.word	0x7ff00000

000d828c <matherr>:
   d828c:	2000      	movs	r0, #0
   d828e:	4770      	bx	lr

000d8290 <__aeabi_drsub>:
   d8290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8294:	e002      	b.n	d829c <__adddf3>
   d8296:	bf00      	nop

000d8298 <__aeabi_dsub>:
   d8298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d829c <__adddf3>:
   d829c:	b530      	push	{r4, r5, lr}
   d829e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d82a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d82a6:	ea94 0f05 	teq	r4, r5
   d82aa:	bf08      	it	eq
   d82ac:	ea90 0f02 	teqeq	r0, r2
   d82b0:	bf1f      	itttt	ne
   d82b2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d82b6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d82ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d82be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d82c2:	f000 80e2 	beq.w	d848a <__adddf3+0x1ee>
   d82c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d82ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d82ce:	bfb8      	it	lt
   d82d0:	426d      	neglt	r5, r5
   d82d2:	dd0c      	ble.n	d82ee <__adddf3+0x52>
   d82d4:	442c      	add	r4, r5
   d82d6:	ea80 0202 	eor.w	r2, r0, r2
   d82da:	ea81 0303 	eor.w	r3, r1, r3
   d82de:	ea82 0000 	eor.w	r0, r2, r0
   d82e2:	ea83 0101 	eor.w	r1, r3, r1
   d82e6:	ea80 0202 	eor.w	r2, r0, r2
   d82ea:	ea81 0303 	eor.w	r3, r1, r3
   d82ee:	2d36      	cmp	r5, #54	; 0x36
   d82f0:	bf88      	it	hi
   d82f2:	bd30      	pophi	{r4, r5, pc}
   d82f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d82f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d82fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8304:	d002      	beq.n	d830c <__adddf3+0x70>
   d8306:	4240      	negs	r0, r0
   d8308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d830c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8310:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8318:	d002      	beq.n	d8320 <__adddf3+0x84>
   d831a:	4252      	negs	r2, r2
   d831c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8320:	ea94 0f05 	teq	r4, r5
   d8324:	f000 80a7 	beq.w	d8476 <__adddf3+0x1da>
   d8328:	f1a4 0401 	sub.w	r4, r4, #1
   d832c:	f1d5 0e20 	rsbs	lr, r5, #32
   d8330:	db0d      	blt.n	d834e <__adddf3+0xb2>
   d8332:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8336:	fa22 f205 	lsr.w	r2, r2, r5
   d833a:	1880      	adds	r0, r0, r2
   d833c:	f141 0100 	adc.w	r1, r1, #0
   d8340:	fa03 f20e 	lsl.w	r2, r3, lr
   d8344:	1880      	adds	r0, r0, r2
   d8346:	fa43 f305 	asr.w	r3, r3, r5
   d834a:	4159      	adcs	r1, r3
   d834c:	e00e      	b.n	d836c <__adddf3+0xd0>
   d834e:	f1a5 0520 	sub.w	r5, r5, #32
   d8352:	f10e 0e20 	add.w	lr, lr, #32
   d8356:	2a01      	cmp	r2, #1
   d8358:	fa03 fc0e 	lsl.w	ip, r3, lr
   d835c:	bf28      	it	cs
   d835e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8362:	fa43 f305 	asr.w	r3, r3, r5
   d8366:	18c0      	adds	r0, r0, r3
   d8368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d836c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8370:	d507      	bpl.n	d8382 <__adddf3+0xe6>
   d8372:	f04f 0e00 	mov.w	lr, #0
   d8376:	f1dc 0c00 	rsbs	ip, ip, #0
   d837a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d837e:	eb6e 0101 	sbc.w	r1, lr, r1
   d8382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8386:	d31b      	bcc.n	d83c0 <__adddf3+0x124>
   d8388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d838c:	d30c      	bcc.n	d83a8 <__adddf3+0x10c>
   d838e:	0849      	lsrs	r1, r1, #1
   d8390:	ea5f 0030 	movs.w	r0, r0, rrx
   d8394:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8398:	f104 0401 	add.w	r4, r4, #1
   d839c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d83a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d83a4:	f080 809a 	bcs.w	d84dc <__adddf3+0x240>
   d83a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d83ac:	bf08      	it	eq
   d83ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d83b2:	f150 0000 	adcs.w	r0, r0, #0
   d83b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d83ba:	ea41 0105 	orr.w	r1, r1, r5
   d83be:	bd30      	pop	{r4, r5, pc}
   d83c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d83c4:	4140      	adcs	r0, r0
   d83c6:	eb41 0101 	adc.w	r1, r1, r1
   d83ca:	3c01      	subs	r4, #1
   d83cc:	bf28      	it	cs
   d83ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d83d2:	d2e9      	bcs.n	d83a8 <__adddf3+0x10c>
   d83d4:	f091 0f00 	teq	r1, #0
   d83d8:	bf04      	itt	eq
   d83da:	4601      	moveq	r1, r0
   d83dc:	2000      	moveq	r0, #0
   d83de:	fab1 f381 	clz	r3, r1
   d83e2:	bf08      	it	eq
   d83e4:	3320      	addeq	r3, #32
   d83e6:	f1a3 030b 	sub.w	r3, r3, #11
   d83ea:	f1b3 0220 	subs.w	r2, r3, #32
   d83ee:	da0c      	bge.n	d840a <__adddf3+0x16e>
   d83f0:	320c      	adds	r2, #12
   d83f2:	dd08      	ble.n	d8406 <__adddf3+0x16a>
   d83f4:	f102 0c14 	add.w	ip, r2, #20
   d83f8:	f1c2 020c 	rsb	r2, r2, #12
   d83fc:	fa01 f00c 	lsl.w	r0, r1, ip
   d8400:	fa21 f102 	lsr.w	r1, r1, r2
   d8404:	e00c      	b.n	d8420 <__adddf3+0x184>
   d8406:	f102 0214 	add.w	r2, r2, #20
   d840a:	bfd8      	it	le
   d840c:	f1c2 0c20 	rsble	ip, r2, #32
   d8410:	fa01 f102 	lsl.w	r1, r1, r2
   d8414:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8418:	bfdc      	itt	le
   d841a:	ea41 010c 	orrle.w	r1, r1, ip
   d841e:	4090      	lslle	r0, r2
   d8420:	1ae4      	subs	r4, r4, r3
   d8422:	bfa2      	ittt	ge
   d8424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8428:	4329      	orrge	r1, r5
   d842a:	bd30      	popge	{r4, r5, pc}
   d842c:	ea6f 0404 	mvn.w	r4, r4
   d8430:	3c1f      	subs	r4, #31
   d8432:	da1c      	bge.n	d846e <__adddf3+0x1d2>
   d8434:	340c      	adds	r4, #12
   d8436:	dc0e      	bgt.n	d8456 <__adddf3+0x1ba>
   d8438:	f104 0414 	add.w	r4, r4, #20
   d843c:	f1c4 0220 	rsb	r2, r4, #32
   d8440:	fa20 f004 	lsr.w	r0, r0, r4
   d8444:	fa01 f302 	lsl.w	r3, r1, r2
   d8448:	ea40 0003 	orr.w	r0, r0, r3
   d844c:	fa21 f304 	lsr.w	r3, r1, r4
   d8450:	ea45 0103 	orr.w	r1, r5, r3
   d8454:	bd30      	pop	{r4, r5, pc}
   d8456:	f1c4 040c 	rsb	r4, r4, #12
   d845a:	f1c4 0220 	rsb	r2, r4, #32
   d845e:	fa20 f002 	lsr.w	r0, r0, r2
   d8462:	fa01 f304 	lsl.w	r3, r1, r4
   d8466:	ea40 0003 	orr.w	r0, r0, r3
   d846a:	4629      	mov	r1, r5
   d846c:	bd30      	pop	{r4, r5, pc}
   d846e:	fa21 f004 	lsr.w	r0, r1, r4
   d8472:	4629      	mov	r1, r5
   d8474:	bd30      	pop	{r4, r5, pc}
   d8476:	f094 0f00 	teq	r4, #0
   d847a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d847e:	bf06      	itte	eq
   d8480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8484:	3401      	addeq	r4, #1
   d8486:	3d01      	subne	r5, #1
   d8488:	e74e      	b.n	d8328 <__adddf3+0x8c>
   d848a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d848e:	bf18      	it	ne
   d8490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8494:	d029      	beq.n	d84ea <__adddf3+0x24e>
   d8496:	ea94 0f05 	teq	r4, r5
   d849a:	bf08      	it	eq
   d849c:	ea90 0f02 	teqeq	r0, r2
   d84a0:	d005      	beq.n	d84ae <__adddf3+0x212>
   d84a2:	ea54 0c00 	orrs.w	ip, r4, r0
   d84a6:	bf04      	itt	eq
   d84a8:	4619      	moveq	r1, r3
   d84aa:	4610      	moveq	r0, r2
   d84ac:	bd30      	pop	{r4, r5, pc}
   d84ae:	ea91 0f03 	teq	r1, r3
   d84b2:	bf1e      	ittt	ne
   d84b4:	2100      	movne	r1, #0
   d84b6:	2000      	movne	r0, #0
   d84b8:	bd30      	popne	{r4, r5, pc}
   d84ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d84be:	d105      	bne.n	d84cc <__adddf3+0x230>
   d84c0:	0040      	lsls	r0, r0, #1
   d84c2:	4149      	adcs	r1, r1
   d84c4:	bf28      	it	cs
   d84c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d84ca:	bd30      	pop	{r4, r5, pc}
   d84cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d84d0:	bf3c      	itt	cc
   d84d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d84d6:	bd30      	popcc	{r4, r5, pc}
   d84d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d84dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d84e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d84e4:	f04f 0000 	mov.w	r0, #0
   d84e8:	bd30      	pop	{r4, r5, pc}
   d84ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d84ee:	bf1a      	itte	ne
   d84f0:	4619      	movne	r1, r3
   d84f2:	4610      	movne	r0, r2
   d84f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d84f8:	bf1c      	itt	ne
   d84fa:	460b      	movne	r3, r1
   d84fc:	4602      	movne	r2, r0
   d84fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8502:	bf06      	itte	eq
   d8504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8508:	ea91 0f03 	teqeq	r1, r3
   d850c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8510:	bd30      	pop	{r4, r5, pc}
   d8512:	bf00      	nop

000d8514 <__aeabi_ui2d>:
   d8514:	f090 0f00 	teq	r0, #0
   d8518:	bf04      	itt	eq
   d851a:	2100      	moveq	r1, #0
   d851c:	4770      	bxeq	lr
   d851e:	b530      	push	{r4, r5, lr}
   d8520:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8524:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8528:	f04f 0500 	mov.w	r5, #0
   d852c:	f04f 0100 	mov.w	r1, #0
   d8530:	e750      	b.n	d83d4 <__adddf3+0x138>
   d8532:	bf00      	nop

000d8534 <__aeabi_i2d>:
   d8534:	f090 0f00 	teq	r0, #0
   d8538:	bf04      	itt	eq
   d853a:	2100      	moveq	r1, #0
   d853c:	4770      	bxeq	lr
   d853e:	b530      	push	{r4, r5, lr}
   d8540:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8544:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d854c:	bf48      	it	mi
   d854e:	4240      	negmi	r0, r0
   d8550:	f04f 0100 	mov.w	r1, #0
   d8554:	e73e      	b.n	d83d4 <__adddf3+0x138>
   d8556:	bf00      	nop

000d8558 <__aeabi_f2d>:
   d8558:	0042      	lsls	r2, r0, #1
   d855a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d855e:	ea4f 0131 	mov.w	r1, r1, rrx
   d8562:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8566:	bf1f      	itttt	ne
   d8568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d856c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8574:	4770      	bxne	lr
   d8576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d857a:	bf08      	it	eq
   d857c:	4770      	bxeq	lr
   d857e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8582:	bf04      	itt	eq
   d8584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8588:	4770      	bxeq	lr
   d858a:	b530      	push	{r4, r5, lr}
   d858c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8598:	e71c      	b.n	d83d4 <__adddf3+0x138>
   d859a:	bf00      	nop

000d859c <__aeabi_ul2d>:
   d859c:	ea50 0201 	orrs.w	r2, r0, r1
   d85a0:	bf08      	it	eq
   d85a2:	4770      	bxeq	lr
   d85a4:	b530      	push	{r4, r5, lr}
   d85a6:	f04f 0500 	mov.w	r5, #0
   d85aa:	e00a      	b.n	d85c2 <__aeabi_l2d+0x16>

000d85ac <__aeabi_l2d>:
   d85ac:	ea50 0201 	orrs.w	r2, r0, r1
   d85b0:	bf08      	it	eq
   d85b2:	4770      	bxeq	lr
   d85b4:	b530      	push	{r4, r5, lr}
   d85b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d85ba:	d502      	bpl.n	d85c2 <__aeabi_l2d+0x16>
   d85bc:	4240      	negs	r0, r0
   d85be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d85c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d85c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d85ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d85ce:	f43f aed8 	beq.w	d8382 <__adddf3+0xe6>
   d85d2:	f04f 0203 	mov.w	r2, #3
   d85d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d85da:	bf18      	it	ne
   d85dc:	3203      	addne	r2, #3
   d85de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d85e2:	bf18      	it	ne
   d85e4:	3203      	addne	r2, #3
   d85e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d85ea:	f1c2 0320 	rsb	r3, r2, #32
   d85ee:	fa00 fc03 	lsl.w	ip, r0, r3
   d85f2:	fa20 f002 	lsr.w	r0, r0, r2
   d85f6:	fa01 fe03 	lsl.w	lr, r1, r3
   d85fa:	ea40 000e 	orr.w	r0, r0, lr
   d85fe:	fa21 f102 	lsr.w	r1, r1, r2
   d8602:	4414      	add	r4, r2
   d8604:	e6bd      	b.n	d8382 <__adddf3+0xe6>
   d8606:	bf00      	nop

000d8608 <__aeabi_dmul>:
   d8608:	b570      	push	{r4, r5, r6, lr}
   d860a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d860e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8616:	bf1d      	ittte	ne
   d8618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d861c:	ea94 0f0c 	teqne	r4, ip
   d8620:	ea95 0f0c 	teqne	r5, ip
   d8624:	f000 f8de 	bleq	d87e4 <__aeabi_dmul+0x1dc>
   d8628:	442c      	add	r4, r5
   d862a:	ea81 0603 	eor.w	r6, r1, r3
   d862e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d863a:	bf18      	it	ne
   d863c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8648:	d038      	beq.n	d86bc <__aeabi_dmul+0xb4>
   d864a:	fba0 ce02 	umull	ip, lr, r0, r2
   d864e:	f04f 0500 	mov.w	r5, #0
   d8652:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d865a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d865e:	f04f 0600 	mov.w	r6, #0
   d8662:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8666:	f09c 0f00 	teq	ip, #0
   d866a:	bf18      	it	ne
   d866c:	f04e 0e01 	orrne.w	lr, lr, #1
   d8670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d867c:	d204      	bcs.n	d8688 <__aeabi_dmul+0x80>
   d867e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8682:	416d      	adcs	r5, r5
   d8684:	eb46 0606 	adc.w	r6, r6, r6
   d8688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d868c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d869c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d86a0:	bf88      	it	hi
   d86a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d86a6:	d81e      	bhi.n	d86e6 <__aeabi_dmul+0xde>
   d86a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d86ac:	bf08      	it	eq
   d86ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d86b2:	f150 0000 	adcs.w	r0, r0, #0
   d86b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d86ba:	bd70      	pop	{r4, r5, r6, pc}
   d86bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d86c0:	ea46 0101 	orr.w	r1, r6, r1
   d86c4:	ea40 0002 	orr.w	r0, r0, r2
   d86c8:	ea81 0103 	eor.w	r1, r1, r3
   d86cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d86d0:	bfc2      	ittt	gt
   d86d2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d86d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d86da:	bd70      	popgt	{r4, r5, r6, pc}
   d86dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d86e0:	f04f 0e00 	mov.w	lr, #0
   d86e4:	3c01      	subs	r4, #1
   d86e6:	f300 80ab 	bgt.w	d8840 <__aeabi_dmul+0x238>
   d86ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d86ee:	bfde      	ittt	le
   d86f0:	2000      	movle	r0, #0
   d86f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d86f6:	bd70      	pople	{r4, r5, r6, pc}
   d86f8:	f1c4 0400 	rsb	r4, r4, #0
   d86fc:	3c20      	subs	r4, #32
   d86fe:	da35      	bge.n	d876c <__aeabi_dmul+0x164>
   d8700:	340c      	adds	r4, #12
   d8702:	dc1b      	bgt.n	d873c <__aeabi_dmul+0x134>
   d8704:	f104 0414 	add.w	r4, r4, #20
   d8708:	f1c4 0520 	rsb	r5, r4, #32
   d870c:	fa00 f305 	lsl.w	r3, r0, r5
   d8710:	fa20 f004 	lsr.w	r0, r0, r4
   d8714:	fa01 f205 	lsl.w	r2, r1, r5
   d8718:	ea40 0002 	orr.w	r0, r0, r2
   d871c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8728:	fa21 f604 	lsr.w	r6, r1, r4
   d872c:	eb42 0106 	adc.w	r1, r2, r6
   d8730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8734:	bf08      	it	eq
   d8736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d873a:	bd70      	pop	{r4, r5, r6, pc}
   d873c:	f1c4 040c 	rsb	r4, r4, #12
   d8740:	f1c4 0520 	rsb	r5, r4, #32
   d8744:	fa00 f304 	lsl.w	r3, r0, r4
   d8748:	fa20 f005 	lsr.w	r0, r0, r5
   d874c:	fa01 f204 	lsl.w	r2, r1, r4
   d8750:	ea40 0002 	orr.w	r0, r0, r2
   d8754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d875c:	f141 0100 	adc.w	r1, r1, #0
   d8760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8764:	bf08      	it	eq
   d8766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d876a:	bd70      	pop	{r4, r5, r6, pc}
   d876c:	f1c4 0520 	rsb	r5, r4, #32
   d8770:	fa00 f205 	lsl.w	r2, r0, r5
   d8774:	ea4e 0e02 	orr.w	lr, lr, r2
   d8778:	fa20 f304 	lsr.w	r3, r0, r4
   d877c:	fa01 f205 	lsl.w	r2, r1, r5
   d8780:	ea43 0302 	orr.w	r3, r3, r2
   d8784:	fa21 f004 	lsr.w	r0, r1, r4
   d8788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d878c:	fa21 f204 	lsr.w	r2, r1, r4
   d8790:	ea20 0002 	bic.w	r0, r0, r2
   d8794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d879c:	bf08      	it	eq
   d879e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d87a2:	bd70      	pop	{r4, r5, r6, pc}
   d87a4:	f094 0f00 	teq	r4, #0
   d87a8:	d10f      	bne.n	d87ca <__aeabi_dmul+0x1c2>
   d87aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d87ae:	0040      	lsls	r0, r0, #1
   d87b0:	eb41 0101 	adc.w	r1, r1, r1
   d87b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d87b8:	bf08      	it	eq
   d87ba:	3c01      	subeq	r4, #1
   d87bc:	d0f7      	beq.n	d87ae <__aeabi_dmul+0x1a6>
   d87be:	ea41 0106 	orr.w	r1, r1, r6
   d87c2:	f095 0f00 	teq	r5, #0
   d87c6:	bf18      	it	ne
   d87c8:	4770      	bxne	lr
   d87ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d87ce:	0052      	lsls	r2, r2, #1
   d87d0:	eb43 0303 	adc.w	r3, r3, r3
   d87d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d87d8:	bf08      	it	eq
   d87da:	3d01      	subeq	r5, #1
   d87dc:	d0f7      	beq.n	d87ce <__aeabi_dmul+0x1c6>
   d87de:	ea43 0306 	orr.w	r3, r3, r6
   d87e2:	4770      	bx	lr
   d87e4:	ea94 0f0c 	teq	r4, ip
   d87e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d87ec:	bf18      	it	ne
   d87ee:	ea95 0f0c 	teqne	r5, ip
   d87f2:	d00c      	beq.n	d880e <__aeabi_dmul+0x206>
   d87f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d87f8:	bf18      	it	ne
   d87fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d87fe:	d1d1      	bne.n	d87a4 <__aeabi_dmul+0x19c>
   d8800:	ea81 0103 	eor.w	r1, r1, r3
   d8804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8808:	f04f 0000 	mov.w	r0, #0
   d880c:	bd70      	pop	{r4, r5, r6, pc}
   d880e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8812:	bf06      	itte	eq
   d8814:	4610      	moveq	r0, r2
   d8816:	4619      	moveq	r1, r3
   d8818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d881c:	d019      	beq.n	d8852 <__aeabi_dmul+0x24a>
   d881e:	ea94 0f0c 	teq	r4, ip
   d8822:	d102      	bne.n	d882a <__aeabi_dmul+0x222>
   d8824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8828:	d113      	bne.n	d8852 <__aeabi_dmul+0x24a>
   d882a:	ea95 0f0c 	teq	r5, ip
   d882e:	d105      	bne.n	d883c <__aeabi_dmul+0x234>
   d8830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8834:	bf1c      	itt	ne
   d8836:	4610      	movne	r0, r2
   d8838:	4619      	movne	r1, r3
   d883a:	d10a      	bne.n	d8852 <__aeabi_dmul+0x24a>
   d883c:	ea81 0103 	eor.w	r1, r1, r3
   d8840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d884c:	f04f 0000 	mov.w	r0, #0
   d8850:	bd70      	pop	{r4, r5, r6, pc}
   d8852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d885a:	bd70      	pop	{r4, r5, r6, pc}

000d885c <__aeabi_ddiv>:
   d885c:	b570      	push	{r4, r5, r6, lr}
   d885e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d886a:	bf1d      	ittte	ne
   d886c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8870:	ea94 0f0c 	teqne	r4, ip
   d8874:	ea95 0f0c 	teqne	r5, ip
   d8878:	f000 f8a7 	bleq	d89ca <__aeabi_ddiv+0x16e>
   d887c:	eba4 0405 	sub.w	r4, r4, r5
   d8880:	ea81 0e03 	eor.w	lr, r1, r3
   d8884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8888:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d888c:	f000 8088 	beq.w	d89a0 <__aeabi_ddiv+0x144>
   d8890:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d889c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d88a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d88a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d88a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d88ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d88b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d88b4:	429d      	cmp	r5, r3
   d88b6:	bf08      	it	eq
   d88b8:	4296      	cmpeq	r6, r2
   d88ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d88be:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d88c2:	d202      	bcs.n	d88ca <__aeabi_ddiv+0x6e>
   d88c4:	085b      	lsrs	r3, r3, #1
   d88c6:	ea4f 0232 	mov.w	r2, r2, rrx
   d88ca:	1ab6      	subs	r6, r6, r2
   d88cc:	eb65 0503 	sbc.w	r5, r5, r3
   d88d0:	085b      	lsrs	r3, r3, #1
   d88d2:	ea4f 0232 	mov.w	r2, r2, rrx
   d88d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d88da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d88de:	ebb6 0e02 	subs.w	lr, r6, r2
   d88e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d88e6:	bf22      	ittt	cs
   d88e8:	1ab6      	subcs	r6, r6, r2
   d88ea:	4675      	movcs	r5, lr
   d88ec:	ea40 000c 	orrcs.w	r0, r0, ip
   d88f0:	085b      	lsrs	r3, r3, #1
   d88f2:	ea4f 0232 	mov.w	r2, r2, rrx
   d88f6:	ebb6 0e02 	subs.w	lr, r6, r2
   d88fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d88fe:	bf22      	ittt	cs
   d8900:	1ab6      	subcs	r6, r6, r2
   d8902:	4675      	movcs	r5, lr
   d8904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8908:	085b      	lsrs	r3, r3, #1
   d890a:	ea4f 0232 	mov.w	r2, r2, rrx
   d890e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8912:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8916:	bf22      	ittt	cs
   d8918:	1ab6      	subcs	r6, r6, r2
   d891a:	4675      	movcs	r5, lr
   d891c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8920:	085b      	lsrs	r3, r3, #1
   d8922:	ea4f 0232 	mov.w	r2, r2, rrx
   d8926:	ebb6 0e02 	subs.w	lr, r6, r2
   d892a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d892e:	bf22      	ittt	cs
   d8930:	1ab6      	subcs	r6, r6, r2
   d8932:	4675      	movcs	r5, lr
   d8934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8938:	ea55 0e06 	orrs.w	lr, r5, r6
   d893c:	d018      	beq.n	d8970 <__aeabi_ddiv+0x114>
   d893e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8946:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d894a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d894e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d895a:	d1c0      	bne.n	d88de <__aeabi_ddiv+0x82>
   d895c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8960:	d10b      	bne.n	d897a <__aeabi_ddiv+0x11e>
   d8962:	ea41 0100 	orr.w	r1, r1, r0
   d8966:	f04f 0000 	mov.w	r0, #0
   d896a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d896e:	e7b6      	b.n	d88de <__aeabi_ddiv+0x82>
   d8970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8974:	bf04      	itt	eq
   d8976:	4301      	orreq	r1, r0
   d8978:	2000      	moveq	r0, #0
   d897a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d897e:	bf88      	it	hi
   d8980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8984:	f63f aeaf 	bhi.w	d86e6 <__aeabi_dmul+0xde>
   d8988:	ebb5 0c03 	subs.w	ip, r5, r3
   d898c:	bf04      	itt	eq
   d898e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8996:	f150 0000 	adcs.w	r0, r0, #0
   d899a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d899e:	bd70      	pop	{r4, r5, r6, pc}
   d89a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d89a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d89a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d89ac:	bfc2      	ittt	gt
   d89ae:	ebd4 050c 	rsbsgt	r5, r4, ip
   d89b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d89b6:	bd70      	popgt	{r4, r5, r6, pc}
   d89b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d89bc:	f04f 0e00 	mov.w	lr, #0
   d89c0:	3c01      	subs	r4, #1
   d89c2:	e690      	b.n	d86e6 <__aeabi_dmul+0xde>
   d89c4:	ea45 0e06 	orr.w	lr, r5, r6
   d89c8:	e68d      	b.n	d86e6 <__aeabi_dmul+0xde>
   d89ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d89ce:	ea94 0f0c 	teq	r4, ip
   d89d2:	bf08      	it	eq
   d89d4:	ea95 0f0c 	teqeq	r5, ip
   d89d8:	f43f af3b 	beq.w	d8852 <__aeabi_dmul+0x24a>
   d89dc:	ea94 0f0c 	teq	r4, ip
   d89e0:	d10a      	bne.n	d89f8 <__aeabi_ddiv+0x19c>
   d89e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d89e6:	f47f af34 	bne.w	d8852 <__aeabi_dmul+0x24a>
   d89ea:	ea95 0f0c 	teq	r5, ip
   d89ee:	f47f af25 	bne.w	d883c <__aeabi_dmul+0x234>
   d89f2:	4610      	mov	r0, r2
   d89f4:	4619      	mov	r1, r3
   d89f6:	e72c      	b.n	d8852 <__aeabi_dmul+0x24a>
   d89f8:	ea95 0f0c 	teq	r5, ip
   d89fc:	d106      	bne.n	d8a0c <__aeabi_ddiv+0x1b0>
   d89fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8a02:	f43f aefd 	beq.w	d8800 <__aeabi_dmul+0x1f8>
   d8a06:	4610      	mov	r0, r2
   d8a08:	4619      	mov	r1, r3
   d8a0a:	e722      	b.n	d8852 <__aeabi_dmul+0x24a>
   d8a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8a10:	bf18      	it	ne
   d8a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8a16:	f47f aec5 	bne.w	d87a4 <__aeabi_dmul+0x19c>
   d8a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8a1e:	f47f af0d 	bne.w	d883c <__aeabi_dmul+0x234>
   d8a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8a26:	f47f aeeb 	bne.w	d8800 <__aeabi_dmul+0x1f8>
   d8a2a:	e712      	b.n	d8852 <__aeabi_dmul+0x24a>

000d8a2c <__gedf2>:
   d8a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8a30:	e006      	b.n	d8a40 <__cmpdf2+0x4>
   d8a32:	bf00      	nop

000d8a34 <__ledf2>:
   d8a34:	f04f 0c01 	mov.w	ip, #1
   d8a38:	e002      	b.n	d8a40 <__cmpdf2+0x4>
   d8a3a:	bf00      	nop

000d8a3c <__cmpdf2>:
   d8a3c:	f04f 0c01 	mov.w	ip, #1
   d8a40:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8a50:	bf18      	it	ne
   d8a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8a56:	d01b      	beq.n	d8a90 <__cmpdf2+0x54>
   d8a58:	b001      	add	sp, #4
   d8a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8a5e:	bf0c      	ite	eq
   d8a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8a64:	ea91 0f03 	teqne	r1, r3
   d8a68:	bf02      	ittt	eq
   d8a6a:	ea90 0f02 	teqeq	r0, r2
   d8a6e:	2000      	moveq	r0, #0
   d8a70:	4770      	bxeq	lr
   d8a72:	f110 0f00 	cmn.w	r0, #0
   d8a76:	ea91 0f03 	teq	r1, r3
   d8a7a:	bf58      	it	pl
   d8a7c:	4299      	cmppl	r1, r3
   d8a7e:	bf08      	it	eq
   d8a80:	4290      	cmpeq	r0, r2
   d8a82:	bf2c      	ite	cs
   d8a84:	17d8      	asrcs	r0, r3, #31
   d8a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8a8a:	f040 0001 	orr.w	r0, r0, #1
   d8a8e:	4770      	bx	lr
   d8a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8a98:	d102      	bne.n	d8aa0 <__cmpdf2+0x64>
   d8a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8a9e:	d107      	bne.n	d8ab0 <__cmpdf2+0x74>
   d8aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8aa8:	d1d6      	bne.n	d8a58 <__cmpdf2+0x1c>
   d8aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8aae:	d0d3      	beq.n	d8a58 <__cmpdf2+0x1c>
   d8ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8ab4:	4770      	bx	lr
   d8ab6:	bf00      	nop

000d8ab8 <__aeabi_cdrcmple>:
   d8ab8:	4684      	mov	ip, r0
   d8aba:	4610      	mov	r0, r2
   d8abc:	4662      	mov	r2, ip
   d8abe:	468c      	mov	ip, r1
   d8ac0:	4619      	mov	r1, r3
   d8ac2:	4663      	mov	r3, ip
   d8ac4:	e000      	b.n	d8ac8 <__aeabi_cdcmpeq>
   d8ac6:	bf00      	nop

000d8ac8 <__aeabi_cdcmpeq>:
   d8ac8:	b501      	push	{r0, lr}
   d8aca:	f7ff ffb7 	bl	d8a3c <__cmpdf2>
   d8ace:	2800      	cmp	r0, #0
   d8ad0:	bf48      	it	mi
   d8ad2:	f110 0f00 	cmnmi.w	r0, #0
   d8ad6:	bd01      	pop	{r0, pc}

000d8ad8 <__aeabi_dcmpeq>:
   d8ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8adc:	f7ff fff4 	bl	d8ac8 <__aeabi_cdcmpeq>
   d8ae0:	bf0c      	ite	eq
   d8ae2:	2001      	moveq	r0, #1
   d8ae4:	2000      	movne	r0, #0
   d8ae6:	f85d fb08 	ldr.w	pc, [sp], #8
   d8aea:	bf00      	nop

000d8aec <__aeabi_dcmplt>:
   d8aec:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8af0:	f7ff ffea 	bl	d8ac8 <__aeabi_cdcmpeq>
   d8af4:	bf34      	ite	cc
   d8af6:	2001      	movcc	r0, #1
   d8af8:	2000      	movcs	r0, #0
   d8afa:	f85d fb08 	ldr.w	pc, [sp], #8
   d8afe:	bf00      	nop

000d8b00 <__aeabi_dcmple>:
   d8b00:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8b04:	f7ff ffe0 	bl	d8ac8 <__aeabi_cdcmpeq>
   d8b08:	bf94      	ite	ls
   d8b0a:	2001      	movls	r0, #1
   d8b0c:	2000      	movhi	r0, #0
   d8b0e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8b12:	bf00      	nop

000d8b14 <__aeabi_dcmpge>:
   d8b14:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8b18:	f7ff ffce 	bl	d8ab8 <__aeabi_cdrcmple>
   d8b1c:	bf94      	ite	ls
   d8b1e:	2001      	movls	r0, #1
   d8b20:	2000      	movhi	r0, #0
   d8b22:	f85d fb08 	ldr.w	pc, [sp], #8
   d8b26:	bf00      	nop

000d8b28 <__aeabi_dcmpgt>:
   d8b28:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8b2c:	f7ff ffc4 	bl	d8ab8 <__aeabi_cdrcmple>
   d8b30:	bf34      	ite	cc
   d8b32:	2001      	movcc	r0, #1
   d8b34:	2000      	movcs	r0, #0
   d8b36:	f85d fb08 	ldr.w	pc, [sp], #8
   d8b3a:	bf00      	nop

000d8b3c <__aeabi_dcmpun>:
   d8b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8b44:	d102      	bne.n	d8b4c <__aeabi_dcmpun+0x10>
   d8b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8b4a:	d10a      	bne.n	d8b62 <__aeabi_dcmpun+0x26>
   d8b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8b54:	d102      	bne.n	d8b5c <__aeabi_dcmpun+0x20>
   d8b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8b5a:	d102      	bne.n	d8b62 <__aeabi_dcmpun+0x26>
   d8b5c:	f04f 0000 	mov.w	r0, #0
   d8b60:	4770      	bx	lr
   d8b62:	f04f 0001 	mov.w	r0, #1
   d8b66:	4770      	bx	lr

000d8b68 <__aeabi_d2uiz>:
   d8b68:	004a      	lsls	r2, r1, #1
   d8b6a:	d211      	bcs.n	d8b90 <__aeabi_d2uiz+0x28>
   d8b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8b70:	d211      	bcs.n	d8b96 <__aeabi_d2uiz+0x2e>
   d8b72:	d50d      	bpl.n	d8b90 <__aeabi_d2uiz+0x28>
   d8b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8b7c:	d40e      	bmi.n	d8b9c <__aeabi_d2uiz+0x34>
   d8b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8b8a:	fa23 f002 	lsr.w	r0, r3, r2
   d8b8e:	4770      	bx	lr
   d8b90:	f04f 0000 	mov.w	r0, #0
   d8b94:	4770      	bx	lr
   d8b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8b9a:	d102      	bne.n	d8ba2 <__aeabi_d2uiz+0x3a>
   d8b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8ba0:	4770      	bx	lr
   d8ba2:	f04f 0000 	mov.w	r0, #0
   d8ba6:	4770      	bx	lr

000d8ba8 <__aeabi_d2f>:
   d8ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8bb0:	bf24      	itt	cs
   d8bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8bba:	d90d      	bls.n	d8bd8 <__aeabi_d2f+0x30>
   d8bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8bd0:	bf08      	it	eq
   d8bd2:	f020 0001 	biceq.w	r0, r0, #1
   d8bd6:	4770      	bx	lr
   d8bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8bdc:	d121      	bne.n	d8c22 <__aeabi_d2f+0x7a>
   d8bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8be2:	bfbc      	itt	lt
   d8be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8be8:	4770      	bxlt	lr
   d8bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8bf2:	f1c2 0218 	rsb	r2, r2, #24
   d8bf6:	f1c2 0c20 	rsb	ip, r2, #32
   d8bfa:	fa10 f30c 	lsls.w	r3, r0, ip
   d8bfe:	fa20 f002 	lsr.w	r0, r0, r2
   d8c02:	bf18      	it	ne
   d8c04:	f040 0001 	orrne.w	r0, r0, #1
   d8c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8c10:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8c14:	ea40 000c 	orr.w	r0, r0, ip
   d8c18:	fa23 f302 	lsr.w	r3, r3, r2
   d8c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8c20:	e7cc      	b.n	d8bbc <__aeabi_d2f+0x14>
   d8c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8c26:	d107      	bne.n	d8c38 <__aeabi_d2f+0x90>
   d8c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8c2c:	bf1e      	ittt	ne
   d8c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8c36:	4770      	bxne	lr
   d8c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8c44:	4770      	bx	lr
   d8c46:	bf00      	nop

000d8c48 <__aeabi_d2ulz>:
   d8c48:	b5d0      	push	{r4, r6, r7, lr}
   d8c4a:	4b0c      	ldr	r3, [pc, #48]	; (d8c7c <__aeabi_d2ulz+0x34>)
   d8c4c:	2200      	movs	r2, #0
   d8c4e:	4606      	mov	r6, r0
   d8c50:	460f      	mov	r7, r1
   d8c52:	f7ff fcd9 	bl	d8608 <__aeabi_dmul>
   d8c56:	f7ff ff87 	bl	d8b68 <__aeabi_d2uiz>
   d8c5a:	4604      	mov	r4, r0
   d8c5c:	f7ff fc5a 	bl	d8514 <__aeabi_ui2d>
   d8c60:	4b07      	ldr	r3, [pc, #28]	; (d8c80 <__aeabi_d2ulz+0x38>)
   d8c62:	2200      	movs	r2, #0
   d8c64:	f7ff fcd0 	bl	d8608 <__aeabi_dmul>
   d8c68:	4602      	mov	r2, r0
   d8c6a:	460b      	mov	r3, r1
   d8c6c:	4630      	mov	r0, r6
   d8c6e:	4639      	mov	r1, r7
   d8c70:	f7ff fb12 	bl	d8298 <__aeabi_dsub>
   d8c74:	f7ff ff78 	bl	d8b68 <__aeabi_d2uiz>
   d8c78:	4621      	mov	r1, r4
   d8c7a:	bdd0      	pop	{r4, r6, r7, pc}
   d8c7c:	3df00000 	.word	0x3df00000
   d8c80:	41f00000 	.word	0x41f00000

000d8c84 <asctime_r>:
   d8c84:	b510      	push	{r4, lr}
   d8c86:	460c      	mov	r4, r1
   d8c88:	6941      	ldr	r1, [r0, #20]
   d8c8a:	6903      	ldr	r3, [r0, #16]
   d8c8c:	6982      	ldr	r2, [r0, #24]
   d8c8e:	b086      	sub	sp, #24
   d8c90:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d8c94:	9104      	str	r1, [sp, #16]
   d8c96:	6801      	ldr	r1, [r0, #0]
   d8c98:	9103      	str	r1, [sp, #12]
   d8c9a:	6841      	ldr	r1, [r0, #4]
   d8c9c:	9102      	str	r1, [sp, #8]
   d8c9e:	6881      	ldr	r1, [r0, #8]
   d8ca0:	9101      	str	r1, [sp, #4]
   d8ca2:	68c1      	ldr	r1, [r0, #12]
   d8ca4:	9100      	str	r1, [sp, #0]
   d8ca6:	4907      	ldr	r1, [pc, #28]	; (d8cc4 <asctime_r+0x40>)
   d8ca8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d8cac:	440b      	add	r3, r1
   d8cae:	4906      	ldr	r1, [pc, #24]	; (d8cc8 <asctime_r+0x44>)
   d8cb0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d8cb4:	440a      	add	r2, r1
   d8cb6:	4620      	mov	r0, r4
   d8cb8:	4904      	ldr	r1, [pc, #16]	; (d8ccc <asctime_r+0x48>)
   d8cba:	f7fd fe2d 	bl	d6918 <siprintf>
   d8cbe:	4620      	mov	r0, r4
   d8cc0:	b006      	add	sp, #24
   d8cc2:	bd10      	pop	{r4, pc}
   d8cc4:	000db472 	.word	0x000db472
   d8cc8:	000db45d 	.word	0x000db45d
   d8ccc:	000db43d 	.word	0x000db43d

000d8cd0 <atof>:
   d8cd0:	2100      	movs	r1, #0
   d8cd2:	f000 befb 	b.w	d9acc <strtod>

000d8cd6 <atoi>:
   d8cd6:	220a      	movs	r2, #10
   d8cd8:	2100      	movs	r1, #0
   d8cda:	f000 bf7d 	b.w	d9bd8 <strtol>
	...

000d8ce0 <__cxa_atexit>:
   d8ce0:	b510      	push	{r4, lr}
   d8ce2:	4c05      	ldr	r4, [pc, #20]	; (d8cf8 <__cxa_atexit+0x18>)
   d8ce4:	4613      	mov	r3, r2
   d8ce6:	b12c      	cbz	r4, d8cf4 <__cxa_atexit+0x14>
   d8ce8:	460a      	mov	r2, r1
   d8cea:	4601      	mov	r1, r0
   d8cec:	2002      	movs	r0, #2
   d8cee:	f3af 8000 	nop.w
   d8cf2:	bd10      	pop	{r4, pc}
   d8cf4:	4620      	mov	r0, r4
   d8cf6:	e7fc      	b.n	d8cf2 <__cxa_atexit+0x12>
   d8cf8:	00000000 	.word	0x00000000

000d8cfc <gmtime>:
   d8cfc:	b538      	push	{r3, r4, r5, lr}
   d8cfe:	4b07      	ldr	r3, [pc, #28]	; (d8d1c <gmtime+0x20>)
   d8d00:	681d      	ldr	r5, [r3, #0]
   d8d02:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   d8d04:	4604      	mov	r4, r0
   d8d06:	b91b      	cbnz	r3, d8d10 <gmtime+0x14>
   d8d08:	2024      	movs	r0, #36	; 0x24
   d8d0a:	f7fd fded 	bl	d68e8 <malloc>
   d8d0e:	63e8      	str	r0, [r5, #60]	; 0x3c
   d8d10:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   d8d12:	4620      	mov	r0, r4
   d8d14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8d18:	f7fd be3e 	b.w	d6998 <gmtime_r>
   d8d1c:	2003de8c 	.word	0x2003de8c

000d8d20 <memcpy>:
   d8d20:	440a      	add	r2, r1
   d8d22:	4291      	cmp	r1, r2
   d8d24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8d28:	d100      	bne.n	d8d2c <memcpy+0xc>
   d8d2a:	4770      	bx	lr
   d8d2c:	b510      	push	{r4, lr}
   d8d2e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8d32:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8d36:	4291      	cmp	r1, r2
   d8d38:	d1f9      	bne.n	d8d2e <memcpy+0xe>
   d8d3a:	bd10      	pop	{r4, pc}

000d8d3c <memmove>:
   d8d3c:	4288      	cmp	r0, r1
   d8d3e:	b510      	push	{r4, lr}
   d8d40:	eb01 0402 	add.w	r4, r1, r2
   d8d44:	d902      	bls.n	d8d4c <memmove+0x10>
   d8d46:	4284      	cmp	r4, r0
   d8d48:	4623      	mov	r3, r4
   d8d4a:	d807      	bhi.n	d8d5c <memmove+0x20>
   d8d4c:	1e43      	subs	r3, r0, #1
   d8d4e:	42a1      	cmp	r1, r4
   d8d50:	d008      	beq.n	d8d64 <memmove+0x28>
   d8d52:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8d56:	f803 2f01 	strb.w	r2, [r3, #1]!
   d8d5a:	e7f8      	b.n	d8d4e <memmove+0x12>
   d8d5c:	4402      	add	r2, r0
   d8d5e:	4601      	mov	r1, r0
   d8d60:	428a      	cmp	r2, r1
   d8d62:	d100      	bne.n	d8d66 <memmove+0x2a>
   d8d64:	bd10      	pop	{r4, pc}
   d8d66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8d6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d8d6e:	e7f7      	b.n	d8d60 <memmove+0x24>

000d8d70 <memset>:
   d8d70:	4402      	add	r2, r0
   d8d72:	4603      	mov	r3, r0
   d8d74:	4293      	cmp	r3, r2
   d8d76:	d100      	bne.n	d8d7a <memset+0xa>
   d8d78:	4770      	bx	lr
   d8d7a:	f803 1b01 	strb.w	r1, [r3], #1
   d8d7e:	e7f9      	b.n	d8d74 <memset+0x4>

000d8d80 <srand>:
   d8d80:	b538      	push	{r3, r4, r5, lr}
   d8d82:	4b0d      	ldr	r3, [pc, #52]	; (d8db8 <srand+0x38>)
   d8d84:	681d      	ldr	r5, [r3, #0]
   d8d86:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8d88:	4604      	mov	r4, r0
   d8d8a:	b97b      	cbnz	r3, d8dac <srand+0x2c>
   d8d8c:	2018      	movs	r0, #24
   d8d8e:	f7fd fdab 	bl	d68e8 <malloc>
   d8d92:	4a0a      	ldr	r2, [pc, #40]	; (d8dbc <srand+0x3c>)
   d8d94:	4b0a      	ldr	r3, [pc, #40]	; (d8dc0 <srand+0x40>)
   d8d96:	63a8      	str	r0, [r5, #56]	; 0x38
   d8d98:	e9c0 2300 	strd	r2, r3, [r0]
   d8d9c:	4b09      	ldr	r3, [pc, #36]	; (d8dc4 <srand+0x44>)
   d8d9e:	6083      	str	r3, [r0, #8]
   d8da0:	230b      	movs	r3, #11
   d8da2:	8183      	strh	r3, [r0, #12]
   d8da4:	2201      	movs	r2, #1
   d8da6:	2300      	movs	r3, #0
   d8da8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8dac:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8dae:	2200      	movs	r2, #0
   d8db0:	611c      	str	r4, [r3, #16]
   d8db2:	615a      	str	r2, [r3, #20]
   d8db4:	bd38      	pop	{r3, r4, r5, pc}
   d8db6:	bf00      	nop
   d8db8:	2003de8c 	.word	0x2003de8c
   d8dbc:	abcd330e 	.word	0xabcd330e
   d8dc0:	e66d1234 	.word	0xe66d1234
   d8dc4:	0005deec 	.word	0x0005deec

000d8dc8 <strcmp>:
   d8dc8:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8dcc:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8dd0:	2a01      	cmp	r2, #1
   d8dd2:	bf28      	it	cs
   d8dd4:	429a      	cmpcs	r2, r3
   d8dd6:	d0f7      	beq.n	d8dc8 <strcmp>
   d8dd8:	1ad0      	subs	r0, r2, r3
   d8dda:	4770      	bx	lr

000d8ddc <strcpy>:
   d8ddc:	4603      	mov	r3, r0
   d8dde:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8de2:	f803 2b01 	strb.w	r2, [r3], #1
   d8de6:	2a00      	cmp	r2, #0
   d8de8:	d1f9      	bne.n	d8dde <strcpy+0x2>
   d8dea:	4770      	bx	lr

000d8dec <strdup>:
   d8dec:	4b02      	ldr	r3, [pc, #8]	; (d8df8 <strdup+0xc>)
   d8dee:	4601      	mov	r1, r0
   d8df0:	6818      	ldr	r0, [r3, #0]
   d8df2:	f000 b803 	b.w	d8dfc <_strdup_r>
   d8df6:	bf00      	nop
   d8df8:	2003de8c 	.word	0x2003de8c

000d8dfc <_strdup_r>:
   d8dfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8dfe:	4604      	mov	r4, r0
   d8e00:	4608      	mov	r0, r1
   d8e02:	460d      	mov	r5, r1
   d8e04:	f000 f80f 	bl	d8e26 <strlen>
   d8e08:	1c42      	adds	r2, r0, #1
   d8e0a:	4611      	mov	r1, r2
   d8e0c:	4620      	mov	r0, r4
   d8e0e:	9201      	str	r2, [sp, #4]
   d8e10:	f7fd fd9a 	bl	d6948 <_malloc_r>
   d8e14:	4604      	mov	r4, r0
   d8e16:	b118      	cbz	r0, d8e20 <_strdup_r+0x24>
   d8e18:	9a01      	ldr	r2, [sp, #4]
   d8e1a:	4629      	mov	r1, r5
   d8e1c:	f7ff ff80 	bl	d8d20 <memcpy>
   d8e20:	4620      	mov	r0, r4
   d8e22:	b003      	add	sp, #12
   d8e24:	bd30      	pop	{r4, r5, pc}

000d8e26 <strlen>:
   d8e26:	4603      	mov	r3, r0
   d8e28:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8e2c:	2a00      	cmp	r2, #0
   d8e2e:	d1fb      	bne.n	d8e28 <strlen+0x2>
   d8e30:	1a18      	subs	r0, r3, r0
   d8e32:	3801      	subs	r0, #1
   d8e34:	4770      	bx	lr

000d8e36 <strncmp>:
   d8e36:	b510      	push	{r4, lr}
   d8e38:	b16a      	cbz	r2, d8e56 <strncmp+0x20>
   d8e3a:	3901      	subs	r1, #1
   d8e3c:	1884      	adds	r4, r0, r2
   d8e3e:	f810 3b01 	ldrb.w	r3, [r0], #1
   d8e42:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d8e46:	4293      	cmp	r3, r2
   d8e48:	d103      	bne.n	d8e52 <strncmp+0x1c>
   d8e4a:	42a0      	cmp	r0, r4
   d8e4c:	d001      	beq.n	d8e52 <strncmp+0x1c>
   d8e4e:	2b00      	cmp	r3, #0
   d8e50:	d1f5      	bne.n	d8e3e <strncmp+0x8>
   d8e52:	1a98      	subs	r0, r3, r2
   d8e54:	bd10      	pop	{r4, pc}
   d8e56:	4610      	mov	r0, r2
   d8e58:	e7fc      	b.n	d8e54 <strncmp+0x1e>

000d8e5a <strncpy>:
   d8e5a:	b510      	push	{r4, lr}
   d8e5c:	3901      	subs	r1, #1
   d8e5e:	4603      	mov	r3, r0
   d8e60:	b132      	cbz	r2, d8e70 <strncpy+0x16>
   d8e62:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8e66:	f803 4b01 	strb.w	r4, [r3], #1
   d8e6a:	3a01      	subs	r2, #1
   d8e6c:	2c00      	cmp	r4, #0
   d8e6e:	d1f7      	bne.n	d8e60 <strncpy+0x6>
   d8e70:	441a      	add	r2, r3
   d8e72:	2100      	movs	r1, #0
   d8e74:	4293      	cmp	r3, r2
   d8e76:	d100      	bne.n	d8e7a <strncpy+0x20>
   d8e78:	bd10      	pop	{r4, pc}
   d8e7a:	f803 1b01 	strb.w	r1, [r3], #1
   d8e7e:	e7f9      	b.n	d8e74 <strncpy+0x1a>

000d8e80 <sulp>:
   d8e80:	b570      	push	{r4, r5, r6, lr}
   d8e82:	4604      	mov	r4, r0
   d8e84:	460d      	mov	r5, r1
   d8e86:	ec45 4b10 	vmov	d0, r4, r5
   d8e8a:	4616      	mov	r6, r2
   d8e8c:	f001 fd1a 	bl	da8c4 <__ulp>
   d8e90:	ec51 0b10 	vmov	r0, r1, d0
   d8e94:	b17e      	cbz	r6, d8eb6 <sulp+0x36>
   d8e96:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d8e9a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d8e9e:	2b00      	cmp	r3, #0
   d8ea0:	dd09      	ble.n	d8eb6 <sulp+0x36>
   d8ea2:	051b      	lsls	r3, r3, #20
   d8ea4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d8ea8:	2400      	movs	r4, #0
   d8eaa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d8eae:	4622      	mov	r2, r4
   d8eb0:	462b      	mov	r3, r5
   d8eb2:	f7ff fba9 	bl	d8608 <__aeabi_dmul>
   d8eb6:	bd70      	pop	{r4, r5, r6, pc}

000d8eb8 <_strtod_l>:
   d8eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8ebc:	b0a3      	sub	sp, #140	; 0x8c
   d8ebe:	461f      	mov	r7, r3
   d8ec0:	2300      	movs	r3, #0
   d8ec2:	931e      	str	r3, [sp, #120]	; 0x78
   d8ec4:	4ba4      	ldr	r3, [pc, #656]	; (d9158 <_strtod_l+0x2a0>)
   d8ec6:	9219      	str	r2, [sp, #100]	; 0x64
   d8ec8:	681b      	ldr	r3, [r3, #0]
   d8eca:	9307      	str	r3, [sp, #28]
   d8ecc:	4604      	mov	r4, r0
   d8ece:	4618      	mov	r0, r3
   d8ed0:	4688      	mov	r8, r1
   d8ed2:	f7ff ffa8 	bl	d8e26 <strlen>
   d8ed6:	f04f 0a00 	mov.w	sl, #0
   d8eda:	4605      	mov	r5, r0
   d8edc:	f04f 0b00 	mov.w	fp, #0
   d8ee0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d8ee4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8ee6:	781a      	ldrb	r2, [r3, #0]
   d8ee8:	2a2b      	cmp	r2, #43	; 0x2b
   d8eea:	d04c      	beq.n	d8f86 <_strtod_l+0xce>
   d8eec:	d839      	bhi.n	d8f62 <_strtod_l+0xaa>
   d8eee:	2a0d      	cmp	r2, #13
   d8ef0:	d832      	bhi.n	d8f58 <_strtod_l+0xa0>
   d8ef2:	2a08      	cmp	r2, #8
   d8ef4:	d832      	bhi.n	d8f5c <_strtod_l+0xa4>
   d8ef6:	2a00      	cmp	r2, #0
   d8ef8:	d03c      	beq.n	d8f74 <_strtod_l+0xbc>
   d8efa:	2300      	movs	r3, #0
   d8efc:	930e      	str	r3, [sp, #56]	; 0x38
   d8efe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d8f00:	7833      	ldrb	r3, [r6, #0]
   d8f02:	2b30      	cmp	r3, #48	; 0x30
   d8f04:	f040 80b4 	bne.w	d9070 <_strtod_l+0x1b8>
   d8f08:	7873      	ldrb	r3, [r6, #1]
   d8f0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d8f0e:	2b58      	cmp	r3, #88	; 0x58
   d8f10:	d16c      	bne.n	d8fec <_strtod_l+0x134>
   d8f12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d8f14:	9301      	str	r3, [sp, #4]
   d8f16:	ab1e      	add	r3, sp, #120	; 0x78
   d8f18:	9702      	str	r7, [sp, #8]
   d8f1a:	9300      	str	r3, [sp, #0]
   d8f1c:	4a8f      	ldr	r2, [pc, #572]	; (d915c <_strtod_l+0x2a4>)
   d8f1e:	ab1f      	add	r3, sp, #124	; 0x7c
   d8f20:	a91d      	add	r1, sp, #116	; 0x74
   d8f22:	4620      	mov	r0, r4
   d8f24:	f000 feca 	bl	d9cbc <__gethex>
   d8f28:	f010 0707 	ands.w	r7, r0, #7
   d8f2c:	4605      	mov	r5, r0
   d8f2e:	d005      	beq.n	d8f3c <_strtod_l+0x84>
   d8f30:	2f06      	cmp	r7, #6
   d8f32:	d12a      	bne.n	d8f8a <_strtod_l+0xd2>
   d8f34:	3601      	adds	r6, #1
   d8f36:	2300      	movs	r3, #0
   d8f38:	961d      	str	r6, [sp, #116]	; 0x74
   d8f3a:	930e      	str	r3, [sp, #56]	; 0x38
   d8f3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d8f3e:	2b00      	cmp	r3, #0
   d8f40:	f040 8596 	bne.w	d9a70 <_strtod_l+0xbb8>
   d8f44:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d8f46:	b1db      	cbz	r3, d8f80 <_strtod_l+0xc8>
   d8f48:	4652      	mov	r2, sl
   d8f4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d8f4e:	ec43 2b10 	vmov	d0, r2, r3
   d8f52:	b023      	add	sp, #140	; 0x8c
   d8f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8f58:	2a20      	cmp	r2, #32
   d8f5a:	d1ce      	bne.n	d8efa <_strtod_l+0x42>
   d8f5c:	3301      	adds	r3, #1
   d8f5e:	931d      	str	r3, [sp, #116]	; 0x74
   d8f60:	e7c0      	b.n	d8ee4 <_strtod_l+0x2c>
   d8f62:	2a2d      	cmp	r2, #45	; 0x2d
   d8f64:	d1c9      	bne.n	d8efa <_strtod_l+0x42>
   d8f66:	2201      	movs	r2, #1
   d8f68:	920e      	str	r2, [sp, #56]	; 0x38
   d8f6a:	1c5a      	adds	r2, r3, #1
   d8f6c:	921d      	str	r2, [sp, #116]	; 0x74
   d8f6e:	785b      	ldrb	r3, [r3, #1]
   d8f70:	2b00      	cmp	r3, #0
   d8f72:	d1c4      	bne.n	d8efe <_strtod_l+0x46>
   d8f74:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d8f76:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d8f7a:	2b00      	cmp	r3, #0
   d8f7c:	f040 8576 	bne.w	d9a6c <_strtod_l+0xbb4>
   d8f80:	4652      	mov	r2, sl
   d8f82:	465b      	mov	r3, fp
   d8f84:	e7e3      	b.n	d8f4e <_strtod_l+0x96>
   d8f86:	2200      	movs	r2, #0
   d8f88:	e7ee      	b.n	d8f68 <_strtod_l+0xb0>
   d8f8a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d8f8c:	b13a      	cbz	r2, d8f9e <_strtod_l+0xe6>
   d8f8e:	2135      	movs	r1, #53	; 0x35
   d8f90:	a820      	add	r0, sp, #128	; 0x80
   d8f92:	f001 fd96 	bl	daac2 <__copybits>
   d8f96:	991e      	ldr	r1, [sp, #120]	; 0x78
   d8f98:	4620      	mov	r0, r4
   d8f9a:	f001 f9cb 	bl	da334 <_Bfree>
   d8f9e:	3f01      	subs	r7, #1
   d8fa0:	2f05      	cmp	r7, #5
   d8fa2:	d807      	bhi.n	d8fb4 <_strtod_l+0xfc>
   d8fa4:	e8df f007 	tbb	[pc, r7]
   d8fa8:	1d180b0e 	.word	0x1d180b0e
   d8fac:	030e      	.short	0x030e
   d8fae:	f04f 0b00 	mov.w	fp, #0
   d8fb2:	46da      	mov	sl, fp
   d8fb4:	0728      	lsls	r0, r5, #28
   d8fb6:	d5c1      	bpl.n	d8f3c <_strtod_l+0x84>
   d8fb8:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d8fbc:	e7be      	b.n	d8f3c <_strtod_l+0x84>
   d8fbe:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d8fc2:	e7f7      	b.n	d8fb4 <_strtod_l+0xfc>
   d8fc4:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d8fc8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d8fca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d8fce:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d8fd2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d8fd6:	e7ed      	b.n	d8fb4 <_strtod_l+0xfc>
   d8fd8:	f8df b184 	ldr.w	fp, [pc, #388]	; d9160 <_strtod_l+0x2a8>
   d8fdc:	f04f 0a00 	mov.w	sl, #0
   d8fe0:	e7e8      	b.n	d8fb4 <_strtod_l+0xfc>
   d8fe2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d8fe6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d8fea:	e7e3      	b.n	d8fb4 <_strtod_l+0xfc>
   d8fec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8fee:	1c5a      	adds	r2, r3, #1
   d8ff0:	921d      	str	r2, [sp, #116]	; 0x74
   d8ff2:	785b      	ldrb	r3, [r3, #1]
   d8ff4:	2b30      	cmp	r3, #48	; 0x30
   d8ff6:	d0f9      	beq.n	d8fec <_strtod_l+0x134>
   d8ff8:	2b00      	cmp	r3, #0
   d8ffa:	d09f      	beq.n	d8f3c <_strtod_l+0x84>
   d8ffc:	2301      	movs	r3, #1
   d8ffe:	f04f 0900 	mov.w	r9, #0
   d9002:	9304      	str	r3, [sp, #16]
   d9004:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9006:	930a      	str	r3, [sp, #40]	; 0x28
   d9008:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d900c:	464f      	mov	r7, r9
   d900e:	220a      	movs	r2, #10
   d9010:	981d      	ldr	r0, [sp, #116]	; 0x74
   d9012:	7806      	ldrb	r6, [r0, #0]
   d9014:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d9018:	b2d9      	uxtb	r1, r3
   d901a:	2909      	cmp	r1, #9
   d901c:	d92a      	bls.n	d9074 <_strtod_l+0x1bc>
   d901e:	9907      	ldr	r1, [sp, #28]
   d9020:	462a      	mov	r2, r5
   d9022:	f7ff ff08 	bl	d8e36 <strncmp>
   d9026:	b398      	cbz	r0, d9090 <_strtod_l+0x1d8>
   d9028:	2000      	movs	r0, #0
   d902a:	4633      	mov	r3, r6
   d902c:	463d      	mov	r5, r7
   d902e:	9007      	str	r0, [sp, #28]
   d9030:	4602      	mov	r2, r0
   d9032:	2b65      	cmp	r3, #101	; 0x65
   d9034:	d001      	beq.n	d903a <_strtod_l+0x182>
   d9036:	2b45      	cmp	r3, #69	; 0x45
   d9038:	d118      	bne.n	d906c <_strtod_l+0x1b4>
   d903a:	b91d      	cbnz	r5, d9044 <_strtod_l+0x18c>
   d903c:	9b04      	ldr	r3, [sp, #16]
   d903e:	4303      	orrs	r3, r0
   d9040:	d098      	beq.n	d8f74 <_strtod_l+0xbc>
   d9042:	2500      	movs	r5, #0
   d9044:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d9048:	f108 0301 	add.w	r3, r8, #1
   d904c:	931d      	str	r3, [sp, #116]	; 0x74
   d904e:	f898 3001 	ldrb.w	r3, [r8, #1]
   d9052:	2b2b      	cmp	r3, #43	; 0x2b
   d9054:	d075      	beq.n	d9142 <_strtod_l+0x28a>
   d9056:	2b2d      	cmp	r3, #45	; 0x2d
   d9058:	d07b      	beq.n	d9152 <_strtod_l+0x29a>
   d905a:	f04f 0c00 	mov.w	ip, #0
   d905e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d9062:	2909      	cmp	r1, #9
   d9064:	f240 8082 	bls.w	d916c <_strtod_l+0x2b4>
   d9068:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d906c:	2600      	movs	r6, #0
   d906e:	e09d      	b.n	d91ac <_strtod_l+0x2f4>
   d9070:	2300      	movs	r3, #0
   d9072:	e7c4      	b.n	d8ffe <_strtod_l+0x146>
   d9074:	2f08      	cmp	r7, #8
   d9076:	bfd8      	it	le
   d9078:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d907a:	f100 0001 	add.w	r0, r0, #1
   d907e:	bfda      	itte	le
   d9080:	fb02 3301 	mlale	r3, r2, r1, r3
   d9084:	9309      	strle	r3, [sp, #36]	; 0x24
   d9086:	fb02 3909 	mlagt	r9, r2, r9, r3
   d908a:	3701      	adds	r7, #1
   d908c:	901d      	str	r0, [sp, #116]	; 0x74
   d908e:	e7bf      	b.n	d9010 <_strtod_l+0x158>
   d9090:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9092:	195a      	adds	r2, r3, r5
   d9094:	921d      	str	r2, [sp, #116]	; 0x74
   d9096:	5d5b      	ldrb	r3, [r3, r5]
   d9098:	2f00      	cmp	r7, #0
   d909a:	d037      	beq.n	d910c <_strtod_l+0x254>
   d909c:	9007      	str	r0, [sp, #28]
   d909e:	463d      	mov	r5, r7
   d90a0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d90a4:	2a09      	cmp	r2, #9
   d90a6:	d912      	bls.n	d90ce <_strtod_l+0x216>
   d90a8:	2201      	movs	r2, #1
   d90aa:	e7c2      	b.n	d9032 <_strtod_l+0x17a>
   d90ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d90ae:	1c5a      	adds	r2, r3, #1
   d90b0:	921d      	str	r2, [sp, #116]	; 0x74
   d90b2:	785b      	ldrb	r3, [r3, #1]
   d90b4:	3001      	adds	r0, #1
   d90b6:	2b30      	cmp	r3, #48	; 0x30
   d90b8:	d0f8      	beq.n	d90ac <_strtod_l+0x1f4>
   d90ba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d90be:	2a08      	cmp	r2, #8
   d90c0:	f200 84db 	bhi.w	d9a7a <_strtod_l+0xbc2>
   d90c4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d90c6:	9007      	str	r0, [sp, #28]
   d90c8:	2000      	movs	r0, #0
   d90ca:	920a      	str	r2, [sp, #40]	; 0x28
   d90cc:	4605      	mov	r5, r0
   d90ce:	3b30      	subs	r3, #48	; 0x30
   d90d0:	f100 0201 	add.w	r2, r0, #1
   d90d4:	d014      	beq.n	d9100 <_strtod_l+0x248>
   d90d6:	9907      	ldr	r1, [sp, #28]
   d90d8:	4411      	add	r1, r2
   d90da:	9107      	str	r1, [sp, #28]
   d90dc:	462a      	mov	r2, r5
   d90de:	eb00 0e05 	add.w	lr, r0, r5
   d90e2:	210a      	movs	r1, #10
   d90e4:	4572      	cmp	r2, lr
   d90e6:	d113      	bne.n	d9110 <_strtod_l+0x258>
   d90e8:	182a      	adds	r2, r5, r0
   d90ea:	2a08      	cmp	r2, #8
   d90ec:	f105 0501 	add.w	r5, r5, #1
   d90f0:	4405      	add	r5, r0
   d90f2:	dc1c      	bgt.n	d912e <_strtod_l+0x276>
   d90f4:	9909      	ldr	r1, [sp, #36]	; 0x24
   d90f6:	220a      	movs	r2, #10
   d90f8:	fb02 3301 	mla	r3, r2, r1, r3
   d90fc:	9309      	str	r3, [sp, #36]	; 0x24
   d90fe:	2200      	movs	r2, #0
   d9100:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9102:	1c59      	adds	r1, r3, #1
   d9104:	911d      	str	r1, [sp, #116]	; 0x74
   d9106:	785b      	ldrb	r3, [r3, #1]
   d9108:	4610      	mov	r0, r2
   d910a:	e7c9      	b.n	d90a0 <_strtod_l+0x1e8>
   d910c:	4638      	mov	r0, r7
   d910e:	e7d2      	b.n	d90b6 <_strtod_l+0x1fe>
   d9110:	2a08      	cmp	r2, #8
   d9112:	dc04      	bgt.n	d911e <_strtod_l+0x266>
   d9114:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d9116:	434e      	muls	r6, r1
   d9118:	9609      	str	r6, [sp, #36]	; 0x24
   d911a:	3201      	adds	r2, #1
   d911c:	e7e2      	b.n	d90e4 <_strtod_l+0x22c>
   d911e:	f102 0c01 	add.w	ip, r2, #1
   d9122:	f1bc 0f10 	cmp.w	ip, #16
   d9126:	bfd8      	it	le
   d9128:	fb01 f909 	mulle.w	r9, r1, r9
   d912c:	e7f5      	b.n	d911a <_strtod_l+0x262>
   d912e:	2d10      	cmp	r5, #16
   d9130:	bfdc      	itt	le
   d9132:	220a      	movle	r2, #10
   d9134:	fb02 3909 	mlale	r9, r2, r9, r3
   d9138:	e7e1      	b.n	d90fe <_strtod_l+0x246>
   d913a:	2300      	movs	r3, #0
   d913c:	9307      	str	r3, [sp, #28]
   d913e:	2201      	movs	r2, #1
   d9140:	e77c      	b.n	d903c <_strtod_l+0x184>
   d9142:	f04f 0c00 	mov.w	ip, #0
   d9146:	f108 0302 	add.w	r3, r8, #2
   d914a:	931d      	str	r3, [sp, #116]	; 0x74
   d914c:	f898 3002 	ldrb.w	r3, [r8, #2]
   d9150:	e785      	b.n	d905e <_strtod_l+0x1a6>
   d9152:	f04f 0c01 	mov.w	ip, #1
   d9156:	e7f6      	b.n	d9146 <_strtod_l+0x28e>
   d9158:	000db5fc 	.word	0x000db5fc
   d915c:	000db4a4 	.word	0x000db4a4
   d9160:	7ff00000 	.word	0x7ff00000
   d9164:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9166:	1c59      	adds	r1, r3, #1
   d9168:	911d      	str	r1, [sp, #116]	; 0x74
   d916a:	785b      	ldrb	r3, [r3, #1]
   d916c:	2b30      	cmp	r3, #48	; 0x30
   d916e:	d0f9      	beq.n	d9164 <_strtod_l+0x2ac>
   d9170:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d9174:	2908      	cmp	r1, #8
   d9176:	f63f af79 	bhi.w	d906c <_strtod_l+0x1b4>
   d917a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d917e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9180:	9308      	str	r3, [sp, #32]
   d9182:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9184:	1c59      	adds	r1, r3, #1
   d9186:	911d      	str	r1, [sp, #116]	; 0x74
   d9188:	785b      	ldrb	r3, [r3, #1]
   d918a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d918e:	2e09      	cmp	r6, #9
   d9190:	d937      	bls.n	d9202 <_strtod_l+0x34a>
   d9192:	9e08      	ldr	r6, [sp, #32]
   d9194:	1b89      	subs	r1, r1, r6
   d9196:	2908      	cmp	r1, #8
   d9198:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d919c:	dc02      	bgt.n	d91a4 <_strtod_l+0x2ec>
   d919e:	4576      	cmp	r6, lr
   d91a0:	bfa8      	it	ge
   d91a2:	4676      	movge	r6, lr
   d91a4:	f1bc 0f00 	cmp.w	ip, #0
   d91a8:	d000      	beq.n	d91ac <_strtod_l+0x2f4>
   d91aa:	4276      	negs	r6, r6
   d91ac:	2d00      	cmp	r5, #0
   d91ae:	d14f      	bne.n	d9250 <_strtod_l+0x398>
   d91b0:	9904      	ldr	r1, [sp, #16]
   d91b2:	4301      	orrs	r1, r0
   d91b4:	f47f aec2 	bne.w	d8f3c <_strtod_l+0x84>
   d91b8:	2a00      	cmp	r2, #0
   d91ba:	f47f aedb 	bne.w	d8f74 <_strtod_l+0xbc>
   d91be:	2b69      	cmp	r3, #105	; 0x69
   d91c0:	d027      	beq.n	d9212 <_strtod_l+0x35a>
   d91c2:	dc24      	bgt.n	d920e <_strtod_l+0x356>
   d91c4:	2b49      	cmp	r3, #73	; 0x49
   d91c6:	d024      	beq.n	d9212 <_strtod_l+0x35a>
   d91c8:	2b4e      	cmp	r3, #78	; 0x4e
   d91ca:	f47f aed3 	bne.w	d8f74 <_strtod_l+0xbc>
   d91ce:	499e      	ldr	r1, [pc, #632]	; (d9448 <_strtod_l+0x590>)
   d91d0:	a81d      	add	r0, sp, #116	; 0x74
   d91d2:	f000 ffb9 	bl	da148 <__match>
   d91d6:	2800      	cmp	r0, #0
   d91d8:	f43f aecc 	beq.w	d8f74 <_strtod_l+0xbc>
   d91dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d91de:	781b      	ldrb	r3, [r3, #0]
   d91e0:	2b28      	cmp	r3, #40	; 0x28
   d91e2:	d12d      	bne.n	d9240 <_strtod_l+0x388>
   d91e4:	4999      	ldr	r1, [pc, #612]	; (d944c <_strtod_l+0x594>)
   d91e6:	aa20      	add	r2, sp, #128	; 0x80
   d91e8:	a81d      	add	r0, sp, #116	; 0x74
   d91ea:	f000 ffc1 	bl	da170 <__hexnan>
   d91ee:	2805      	cmp	r0, #5
   d91f0:	d126      	bne.n	d9240 <_strtod_l+0x388>
   d91f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d91f4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d91f8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d91fc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d9200:	e69c      	b.n	d8f3c <_strtod_l+0x84>
   d9202:	210a      	movs	r1, #10
   d9204:	fb01 3e0e 	mla	lr, r1, lr, r3
   d9208:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d920c:	e7b9      	b.n	d9182 <_strtod_l+0x2ca>
   d920e:	2b6e      	cmp	r3, #110	; 0x6e
   d9210:	e7db      	b.n	d91ca <_strtod_l+0x312>
   d9212:	498f      	ldr	r1, [pc, #572]	; (d9450 <_strtod_l+0x598>)
   d9214:	a81d      	add	r0, sp, #116	; 0x74
   d9216:	f000 ff97 	bl	da148 <__match>
   d921a:	2800      	cmp	r0, #0
   d921c:	f43f aeaa 	beq.w	d8f74 <_strtod_l+0xbc>
   d9220:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9222:	498c      	ldr	r1, [pc, #560]	; (d9454 <_strtod_l+0x59c>)
   d9224:	3b01      	subs	r3, #1
   d9226:	a81d      	add	r0, sp, #116	; 0x74
   d9228:	931d      	str	r3, [sp, #116]	; 0x74
   d922a:	f000 ff8d 	bl	da148 <__match>
   d922e:	b910      	cbnz	r0, d9236 <_strtod_l+0x37e>
   d9230:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9232:	3301      	adds	r3, #1
   d9234:	931d      	str	r3, [sp, #116]	; 0x74
   d9236:	f8df b22c 	ldr.w	fp, [pc, #556]	; d9464 <_strtod_l+0x5ac>
   d923a:	f04f 0a00 	mov.w	sl, #0
   d923e:	e67d      	b.n	d8f3c <_strtod_l+0x84>
   d9240:	4885      	ldr	r0, [pc, #532]	; (d9458 <_strtod_l+0x5a0>)
   d9242:	f001 fc91 	bl	dab68 <nan>
   d9246:	ed8d 0b04 	vstr	d0, [sp, #16]
   d924a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d924e:	e675      	b.n	d8f3c <_strtod_l+0x84>
   d9250:	9b07      	ldr	r3, [sp, #28]
   d9252:	9809      	ldr	r0, [sp, #36]	; 0x24
   d9254:	1af3      	subs	r3, r6, r3
   d9256:	2f00      	cmp	r7, #0
   d9258:	bf08      	it	eq
   d925a:	462f      	moveq	r7, r5
   d925c:	2d10      	cmp	r5, #16
   d925e:	9308      	str	r3, [sp, #32]
   d9260:	46a8      	mov	r8, r5
   d9262:	bfa8      	it	ge
   d9264:	f04f 0810 	movge.w	r8, #16
   d9268:	f7ff f954 	bl	d8514 <__aeabi_ui2d>
   d926c:	2d09      	cmp	r5, #9
   d926e:	4682      	mov	sl, r0
   d9270:	468b      	mov	fp, r1
   d9272:	dd13      	ble.n	d929c <_strtod_l+0x3e4>
   d9274:	4b79      	ldr	r3, [pc, #484]	; (d945c <_strtod_l+0x5a4>)
   d9276:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d927a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d927e:	f7ff f9c3 	bl	d8608 <__aeabi_dmul>
   d9282:	4682      	mov	sl, r0
   d9284:	4648      	mov	r0, r9
   d9286:	468b      	mov	fp, r1
   d9288:	f7ff f944 	bl	d8514 <__aeabi_ui2d>
   d928c:	4602      	mov	r2, r0
   d928e:	460b      	mov	r3, r1
   d9290:	4650      	mov	r0, sl
   d9292:	4659      	mov	r1, fp
   d9294:	f7ff f802 	bl	d829c <__adddf3>
   d9298:	4682      	mov	sl, r0
   d929a:	468b      	mov	fp, r1
   d929c:	2d0f      	cmp	r5, #15
   d929e:	dc38      	bgt.n	d9312 <_strtod_l+0x45a>
   d92a0:	9b08      	ldr	r3, [sp, #32]
   d92a2:	2b00      	cmp	r3, #0
   d92a4:	f43f ae4a 	beq.w	d8f3c <_strtod_l+0x84>
   d92a8:	dd24      	ble.n	d92f4 <_strtod_l+0x43c>
   d92aa:	2b16      	cmp	r3, #22
   d92ac:	dc0b      	bgt.n	d92c6 <_strtod_l+0x40e>
   d92ae:	4d6b      	ldr	r5, [pc, #428]	; (d945c <_strtod_l+0x5a4>)
   d92b0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d92b4:	e9d5 0100 	ldrd	r0, r1, [r5]
   d92b8:	4652      	mov	r2, sl
   d92ba:	465b      	mov	r3, fp
   d92bc:	f7ff f9a4 	bl	d8608 <__aeabi_dmul>
   d92c0:	4682      	mov	sl, r0
   d92c2:	468b      	mov	fp, r1
   d92c4:	e63a      	b.n	d8f3c <_strtod_l+0x84>
   d92c6:	9a08      	ldr	r2, [sp, #32]
   d92c8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d92cc:	4293      	cmp	r3, r2
   d92ce:	db20      	blt.n	d9312 <_strtod_l+0x45a>
   d92d0:	4c62      	ldr	r4, [pc, #392]	; (d945c <_strtod_l+0x5a4>)
   d92d2:	f1c5 050f 	rsb	r5, r5, #15
   d92d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d92da:	4652      	mov	r2, sl
   d92dc:	465b      	mov	r3, fp
   d92de:	e9d1 0100 	ldrd	r0, r1, [r1]
   d92e2:	f7ff f991 	bl	d8608 <__aeabi_dmul>
   d92e6:	9b08      	ldr	r3, [sp, #32]
   d92e8:	1b5d      	subs	r5, r3, r5
   d92ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d92ee:	e9d4 2300 	ldrd	r2, r3, [r4]
   d92f2:	e7e3      	b.n	d92bc <_strtod_l+0x404>
   d92f4:	9b08      	ldr	r3, [sp, #32]
   d92f6:	3316      	adds	r3, #22
   d92f8:	db0b      	blt.n	d9312 <_strtod_l+0x45a>
   d92fa:	9b07      	ldr	r3, [sp, #28]
   d92fc:	4a57      	ldr	r2, [pc, #348]	; (d945c <_strtod_l+0x5a4>)
   d92fe:	1b9e      	subs	r6, r3, r6
   d9300:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d9304:	e9d6 2300 	ldrd	r2, r3, [r6]
   d9308:	4650      	mov	r0, sl
   d930a:	4659      	mov	r1, fp
   d930c:	f7ff faa6 	bl	d885c <__aeabi_ddiv>
   d9310:	e7d6      	b.n	d92c0 <_strtod_l+0x408>
   d9312:	9b08      	ldr	r3, [sp, #32]
   d9314:	eba5 0808 	sub.w	r8, r5, r8
   d9318:	4498      	add	r8, r3
   d931a:	f1b8 0f00 	cmp.w	r8, #0
   d931e:	dd71      	ble.n	d9404 <_strtod_l+0x54c>
   d9320:	f018 030f 	ands.w	r3, r8, #15
   d9324:	d00a      	beq.n	d933c <_strtod_l+0x484>
   d9326:	494d      	ldr	r1, [pc, #308]	; (d945c <_strtod_l+0x5a4>)
   d9328:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d932c:	4652      	mov	r2, sl
   d932e:	465b      	mov	r3, fp
   d9330:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9334:	f7ff f968 	bl	d8608 <__aeabi_dmul>
   d9338:	4682      	mov	sl, r0
   d933a:	468b      	mov	fp, r1
   d933c:	f038 080f 	bics.w	r8, r8, #15
   d9340:	d04d      	beq.n	d93de <_strtod_l+0x526>
   d9342:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d9346:	dd22      	ble.n	d938e <_strtod_l+0x4d6>
   d9348:	2500      	movs	r5, #0
   d934a:	462e      	mov	r6, r5
   d934c:	9509      	str	r5, [sp, #36]	; 0x24
   d934e:	9507      	str	r5, [sp, #28]
   d9350:	2322      	movs	r3, #34	; 0x22
   d9352:	f8df b110 	ldr.w	fp, [pc, #272]	; d9464 <_strtod_l+0x5ac>
   d9356:	6023      	str	r3, [r4, #0]
   d9358:	f04f 0a00 	mov.w	sl, #0
   d935c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d935e:	2b00      	cmp	r3, #0
   d9360:	f43f adec 	beq.w	d8f3c <_strtod_l+0x84>
   d9364:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9366:	4620      	mov	r0, r4
   d9368:	f000 ffe4 	bl	da334 <_Bfree>
   d936c:	9907      	ldr	r1, [sp, #28]
   d936e:	4620      	mov	r0, r4
   d9370:	f000 ffe0 	bl	da334 <_Bfree>
   d9374:	4631      	mov	r1, r6
   d9376:	4620      	mov	r0, r4
   d9378:	f000 ffdc 	bl	da334 <_Bfree>
   d937c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d937e:	4620      	mov	r0, r4
   d9380:	f000 ffd8 	bl	da334 <_Bfree>
   d9384:	4629      	mov	r1, r5
   d9386:	4620      	mov	r0, r4
   d9388:	f000 ffd4 	bl	da334 <_Bfree>
   d938c:	e5d6      	b.n	d8f3c <_strtod_l+0x84>
   d938e:	2300      	movs	r3, #0
   d9390:	ea4f 1828 	mov.w	r8, r8, asr #4
   d9394:	4650      	mov	r0, sl
   d9396:	4659      	mov	r1, fp
   d9398:	4699      	mov	r9, r3
   d939a:	f1b8 0f01 	cmp.w	r8, #1
   d939e:	dc21      	bgt.n	d93e4 <_strtod_l+0x52c>
   d93a0:	b10b      	cbz	r3, d93a6 <_strtod_l+0x4ee>
   d93a2:	4682      	mov	sl, r0
   d93a4:	468b      	mov	fp, r1
   d93a6:	4b2e      	ldr	r3, [pc, #184]	; (d9460 <_strtod_l+0x5a8>)
   d93a8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d93ac:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d93b0:	4652      	mov	r2, sl
   d93b2:	465b      	mov	r3, fp
   d93b4:	e9d9 0100 	ldrd	r0, r1, [r9]
   d93b8:	f7ff f926 	bl	d8608 <__aeabi_dmul>
   d93bc:	4b29      	ldr	r3, [pc, #164]	; (d9464 <_strtod_l+0x5ac>)
   d93be:	460a      	mov	r2, r1
   d93c0:	400b      	ands	r3, r1
   d93c2:	4929      	ldr	r1, [pc, #164]	; (d9468 <_strtod_l+0x5b0>)
   d93c4:	428b      	cmp	r3, r1
   d93c6:	4682      	mov	sl, r0
   d93c8:	d8be      	bhi.n	d9348 <_strtod_l+0x490>
   d93ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d93ce:	428b      	cmp	r3, r1
   d93d0:	bf86      	itte	hi
   d93d2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d946c <_strtod_l+0x5b4>
   d93d6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d93da:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d93de:	2300      	movs	r3, #0
   d93e0:	9304      	str	r3, [sp, #16]
   d93e2:	e081      	b.n	d94e8 <_strtod_l+0x630>
   d93e4:	f018 0f01 	tst.w	r8, #1
   d93e8:	d007      	beq.n	d93fa <_strtod_l+0x542>
   d93ea:	4b1d      	ldr	r3, [pc, #116]	; (d9460 <_strtod_l+0x5a8>)
   d93ec:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d93f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d93f4:	f7ff f908 	bl	d8608 <__aeabi_dmul>
   d93f8:	2301      	movs	r3, #1
   d93fa:	f109 0901 	add.w	r9, r9, #1
   d93fe:	ea4f 0868 	mov.w	r8, r8, asr #1
   d9402:	e7ca      	b.n	d939a <_strtod_l+0x4e2>
   d9404:	d0eb      	beq.n	d93de <_strtod_l+0x526>
   d9406:	f1c8 0800 	rsb	r8, r8, #0
   d940a:	f018 020f 	ands.w	r2, r8, #15
   d940e:	d00a      	beq.n	d9426 <_strtod_l+0x56e>
   d9410:	4b12      	ldr	r3, [pc, #72]	; (d945c <_strtod_l+0x5a4>)
   d9412:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d9416:	4650      	mov	r0, sl
   d9418:	4659      	mov	r1, fp
   d941a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d941e:	f7ff fa1d 	bl	d885c <__aeabi_ddiv>
   d9422:	4682      	mov	sl, r0
   d9424:	468b      	mov	fp, r1
   d9426:	ea5f 1828 	movs.w	r8, r8, asr #4
   d942a:	d0d8      	beq.n	d93de <_strtod_l+0x526>
   d942c:	f1b8 0f1f 	cmp.w	r8, #31
   d9430:	dd1e      	ble.n	d9470 <_strtod_l+0x5b8>
   d9432:	2500      	movs	r5, #0
   d9434:	462e      	mov	r6, r5
   d9436:	9509      	str	r5, [sp, #36]	; 0x24
   d9438:	9507      	str	r5, [sp, #28]
   d943a:	2322      	movs	r3, #34	; 0x22
   d943c:	f04f 0a00 	mov.w	sl, #0
   d9440:	f04f 0b00 	mov.w	fp, #0
   d9444:	6023      	str	r3, [r4, #0]
   d9446:	e789      	b.n	d935c <_strtod_l+0x4a4>
   d9448:	000db49f 	.word	0x000db49f
   d944c:	000db4b8 	.word	0x000db4b8
   d9450:	000db496 	.word	0x000db496
   d9454:	000db499 	.word	0x000db499
   d9458:	000db45c 	.word	0x000db45c
   d945c:	000db638 	.word	0x000db638
   d9460:	000db610 	.word	0x000db610
   d9464:	7ff00000 	.word	0x7ff00000
   d9468:	7ca00000 	.word	0x7ca00000
   d946c:	7fefffff 	.word	0x7fefffff
   d9470:	f018 0310 	ands.w	r3, r8, #16
   d9474:	bf18      	it	ne
   d9476:	236a      	movne	r3, #106	; 0x6a
   d9478:	f8df 93b4 	ldr.w	r9, [pc, #948]	; d9830 <_strtod_l+0x978>
   d947c:	9304      	str	r3, [sp, #16]
   d947e:	4650      	mov	r0, sl
   d9480:	4659      	mov	r1, fp
   d9482:	2300      	movs	r3, #0
   d9484:	f018 0f01 	tst.w	r8, #1
   d9488:	d004      	beq.n	d9494 <_strtod_l+0x5dc>
   d948a:	e9d9 2300 	ldrd	r2, r3, [r9]
   d948e:	f7ff f8bb 	bl	d8608 <__aeabi_dmul>
   d9492:	2301      	movs	r3, #1
   d9494:	ea5f 0868 	movs.w	r8, r8, asr #1
   d9498:	f109 0908 	add.w	r9, r9, #8
   d949c:	d1f2      	bne.n	d9484 <_strtod_l+0x5cc>
   d949e:	b10b      	cbz	r3, d94a4 <_strtod_l+0x5ec>
   d94a0:	4682      	mov	sl, r0
   d94a2:	468b      	mov	fp, r1
   d94a4:	9b04      	ldr	r3, [sp, #16]
   d94a6:	b1bb      	cbz	r3, d94d8 <_strtod_l+0x620>
   d94a8:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d94ac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d94b0:	2b00      	cmp	r3, #0
   d94b2:	4659      	mov	r1, fp
   d94b4:	dd10      	ble.n	d94d8 <_strtod_l+0x620>
   d94b6:	2b1f      	cmp	r3, #31
   d94b8:	f340 8128 	ble.w	d970c <_strtod_l+0x854>
   d94bc:	2b34      	cmp	r3, #52	; 0x34
   d94be:	bfde      	ittt	le
   d94c0:	3b20      	suble	r3, #32
   d94c2:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d94c6:	fa02 f303 	lslle.w	r3, r2, r3
   d94ca:	f04f 0a00 	mov.w	sl, #0
   d94ce:	bfcc      	ite	gt
   d94d0:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d94d4:	ea03 0b01 	andle.w	fp, r3, r1
   d94d8:	2200      	movs	r2, #0
   d94da:	2300      	movs	r3, #0
   d94dc:	4650      	mov	r0, sl
   d94de:	4659      	mov	r1, fp
   d94e0:	f7ff fafa 	bl	d8ad8 <__aeabi_dcmpeq>
   d94e4:	2800      	cmp	r0, #0
   d94e6:	d1a4      	bne.n	d9432 <_strtod_l+0x57a>
   d94e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d94ea:	9300      	str	r3, [sp, #0]
   d94ec:	990a      	ldr	r1, [sp, #40]	; 0x28
   d94ee:	462b      	mov	r3, r5
   d94f0:	463a      	mov	r2, r7
   d94f2:	4620      	mov	r0, r4
   d94f4:	f000 ff73 	bl	da3de <__s2b>
   d94f8:	9009      	str	r0, [sp, #36]	; 0x24
   d94fa:	2800      	cmp	r0, #0
   d94fc:	f43f af24 	beq.w	d9348 <_strtod_l+0x490>
   d9500:	9b07      	ldr	r3, [sp, #28]
   d9502:	1b9e      	subs	r6, r3, r6
   d9504:	9b08      	ldr	r3, [sp, #32]
   d9506:	2b00      	cmp	r3, #0
   d9508:	bfb4      	ite	lt
   d950a:	4633      	movlt	r3, r6
   d950c:	2300      	movge	r3, #0
   d950e:	9310      	str	r3, [sp, #64]	; 0x40
   d9510:	9b08      	ldr	r3, [sp, #32]
   d9512:	2500      	movs	r5, #0
   d9514:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d9518:	9318      	str	r3, [sp, #96]	; 0x60
   d951a:	462e      	mov	r6, r5
   d951c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d951e:	4620      	mov	r0, r4
   d9520:	6859      	ldr	r1, [r3, #4]
   d9522:	f000 fed3 	bl	da2cc <_Balloc>
   d9526:	9007      	str	r0, [sp, #28]
   d9528:	2800      	cmp	r0, #0
   d952a:	f43f af11 	beq.w	d9350 <_strtod_l+0x498>
   d952e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9530:	691a      	ldr	r2, [r3, #16]
   d9532:	3202      	adds	r2, #2
   d9534:	f103 010c 	add.w	r1, r3, #12
   d9538:	0092      	lsls	r2, r2, #2
   d953a:	300c      	adds	r0, #12
   d953c:	f7ff fbf0 	bl	d8d20 <memcpy>
   d9540:	ec4b ab10 	vmov	d0, sl, fp
   d9544:	aa20      	add	r2, sp, #128	; 0x80
   d9546:	a91f      	add	r1, sp, #124	; 0x7c
   d9548:	4620      	mov	r0, r4
   d954a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   d954e:	f001 fa35 	bl	da9bc <__d2b>
   d9552:	901e      	str	r0, [sp, #120]	; 0x78
   d9554:	2800      	cmp	r0, #0
   d9556:	f43f aefb 	beq.w	d9350 <_strtod_l+0x498>
   d955a:	2101      	movs	r1, #1
   d955c:	4620      	mov	r0, r4
   d955e:	f000 ffcc 	bl	da4fa <__i2b>
   d9562:	4606      	mov	r6, r0
   d9564:	2800      	cmp	r0, #0
   d9566:	f43f aef3 	beq.w	d9350 <_strtod_l+0x498>
   d956a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d956c:	9904      	ldr	r1, [sp, #16]
   d956e:	2b00      	cmp	r3, #0
   d9570:	bfab      	itete	ge
   d9572:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   d9574:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   d9576:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   d9578:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   d957c:	bfac      	ite	ge
   d957e:	eb03 0902 	addge.w	r9, r3, r2
   d9582:	1ad7      	sublt	r7, r2, r3
   d9584:	9a20      	ldr	r2, [sp, #128]	; 0x80
   d9586:	eba3 0801 	sub.w	r8, r3, r1
   d958a:	4490      	add	r8, r2
   d958c:	4ba3      	ldr	r3, [pc, #652]	; (d981c <_strtod_l+0x964>)
   d958e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d9592:	4598      	cmp	r8, r3
   d9594:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   d9598:	f280 80cc 	bge.w	d9734 <_strtod_l+0x87c>
   d959c:	eba3 0308 	sub.w	r3, r3, r8
   d95a0:	2b1f      	cmp	r3, #31
   d95a2:	eba2 0203 	sub.w	r2, r2, r3
   d95a6:	f04f 0101 	mov.w	r1, #1
   d95aa:	f300 80b6 	bgt.w	d971a <_strtod_l+0x862>
   d95ae:	fa01 f303 	lsl.w	r3, r1, r3
   d95b2:	9311      	str	r3, [sp, #68]	; 0x44
   d95b4:	2300      	movs	r3, #0
   d95b6:	930c      	str	r3, [sp, #48]	; 0x30
   d95b8:	eb09 0802 	add.w	r8, r9, r2
   d95bc:	9b04      	ldr	r3, [sp, #16]
   d95be:	45c1      	cmp	r9, r8
   d95c0:	4417      	add	r7, r2
   d95c2:	441f      	add	r7, r3
   d95c4:	464b      	mov	r3, r9
   d95c6:	bfa8      	it	ge
   d95c8:	4643      	movge	r3, r8
   d95ca:	42bb      	cmp	r3, r7
   d95cc:	bfa8      	it	ge
   d95ce:	463b      	movge	r3, r7
   d95d0:	2b00      	cmp	r3, #0
   d95d2:	bfc2      	ittt	gt
   d95d4:	eba8 0803 	subgt.w	r8, r8, r3
   d95d8:	1aff      	subgt	r7, r7, r3
   d95da:	eba9 0903 	subgt.w	r9, r9, r3
   d95de:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d95e0:	2b00      	cmp	r3, #0
   d95e2:	dd17      	ble.n	d9614 <_strtod_l+0x75c>
   d95e4:	4631      	mov	r1, r6
   d95e6:	461a      	mov	r2, r3
   d95e8:	4620      	mov	r0, r4
   d95ea:	f001 f82b 	bl	da644 <__pow5mult>
   d95ee:	4606      	mov	r6, r0
   d95f0:	2800      	cmp	r0, #0
   d95f2:	f43f aead 	beq.w	d9350 <_strtod_l+0x498>
   d95f6:	4601      	mov	r1, r0
   d95f8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d95fa:	4620      	mov	r0, r4
   d95fc:	f000 ff86 	bl	da50c <__multiply>
   d9600:	900f      	str	r0, [sp, #60]	; 0x3c
   d9602:	2800      	cmp	r0, #0
   d9604:	f43f aea4 	beq.w	d9350 <_strtod_l+0x498>
   d9608:	991e      	ldr	r1, [sp, #120]	; 0x78
   d960a:	4620      	mov	r0, r4
   d960c:	f000 fe92 	bl	da334 <_Bfree>
   d9610:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9612:	931e      	str	r3, [sp, #120]	; 0x78
   d9614:	f1b8 0f00 	cmp.w	r8, #0
   d9618:	f300 8091 	bgt.w	d973e <_strtod_l+0x886>
   d961c:	9b08      	ldr	r3, [sp, #32]
   d961e:	2b00      	cmp	r3, #0
   d9620:	dd08      	ble.n	d9634 <_strtod_l+0x77c>
   d9622:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d9624:	9907      	ldr	r1, [sp, #28]
   d9626:	4620      	mov	r0, r4
   d9628:	f001 f80c 	bl	da644 <__pow5mult>
   d962c:	9007      	str	r0, [sp, #28]
   d962e:	2800      	cmp	r0, #0
   d9630:	f43f ae8e 	beq.w	d9350 <_strtod_l+0x498>
   d9634:	2f00      	cmp	r7, #0
   d9636:	dd08      	ble.n	d964a <_strtod_l+0x792>
   d9638:	9907      	ldr	r1, [sp, #28]
   d963a:	463a      	mov	r2, r7
   d963c:	4620      	mov	r0, r4
   d963e:	f001 f84f 	bl	da6e0 <__lshift>
   d9642:	9007      	str	r0, [sp, #28]
   d9644:	2800      	cmp	r0, #0
   d9646:	f43f ae83 	beq.w	d9350 <_strtod_l+0x498>
   d964a:	f1b9 0f00 	cmp.w	r9, #0
   d964e:	dd08      	ble.n	d9662 <_strtod_l+0x7aa>
   d9650:	4631      	mov	r1, r6
   d9652:	464a      	mov	r2, r9
   d9654:	4620      	mov	r0, r4
   d9656:	f001 f843 	bl	da6e0 <__lshift>
   d965a:	4606      	mov	r6, r0
   d965c:	2800      	cmp	r0, #0
   d965e:	f43f ae77 	beq.w	d9350 <_strtod_l+0x498>
   d9662:	9a07      	ldr	r2, [sp, #28]
   d9664:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9666:	4620      	mov	r0, r4
   d9668:	f001 f8b5 	bl	da7d6 <__mdiff>
   d966c:	4605      	mov	r5, r0
   d966e:	2800      	cmp	r0, #0
   d9670:	f43f ae6e 	beq.w	d9350 <_strtod_l+0x498>
   d9674:	68c3      	ldr	r3, [r0, #12]
   d9676:	930f      	str	r3, [sp, #60]	; 0x3c
   d9678:	2300      	movs	r3, #0
   d967a:	60c3      	str	r3, [r0, #12]
   d967c:	4631      	mov	r1, r6
   d967e:	f001 f88e 	bl	da79e <__mcmp>
   d9682:	2800      	cmp	r0, #0
   d9684:	da65      	bge.n	d9752 <_strtod_l+0x89a>
   d9686:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9688:	ea53 030a 	orrs.w	r3, r3, sl
   d968c:	f040 8087 	bne.w	d979e <_strtod_l+0x8e6>
   d9690:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9694:	2b00      	cmp	r3, #0
   d9696:	f040 8082 	bne.w	d979e <_strtod_l+0x8e6>
   d969a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d969e:	0d1b      	lsrs	r3, r3, #20
   d96a0:	051b      	lsls	r3, r3, #20
   d96a2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d96a6:	d97a      	bls.n	d979e <_strtod_l+0x8e6>
   d96a8:	696b      	ldr	r3, [r5, #20]
   d96aa:	b913      	cbnz	r3, d96b2 <_strtod_l+0x7fa>
   d96ac:	692b      	ldr	r3, [r5, #16]
   d96ae:	2b01      	cmp	r3, #1
   d96b0:	dd75      	ble.n	d979e <_strtod_l+0x8e6>
   d96b2:	4629      	mov	r1, r5
   d96b4:	2201      	movs	r2, #1
   d96b6:	4620      	mov	r0, r4
   d96b8:	f001 f812 	bl	da6e0 <__lshift>
   d96bc:	4631      	mov	r1, r6
   d96be:	4605      	mov	r5, r0
   d96c0:	f001 f86d 	bl	da79e <__mcmp>
   d96c4:	2800      	cmp	r0, #0
   d96c6:	dd6a      	ble.n	d979e <_strtod_l+0x8e6>
   d96c8:	9904      	ldr	r1, [sp, #16]
   d96ca:	4a55      	ldr	r2, [pc, #340]	; (d9820 <_strtod_l+0x968>)
   d96cc:	465b      	mov	r3, fp
   d96ce:	2900      	cmp	r1, #0
   d96d0:	f000 8085 	beq.w	d97de <_strtod_l+0x926>
   d96d4:	ea02 010b 	and.w	r1, r2, fp
   d96d8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   d96dc:	dc7f      	bgt.n	d97de <_strtod_l+0x926>
   d96de:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   d96e2:	f77f aeaa 	ble.w	d943a <_strtod_l+0x582>
   d96e6:	4a4f      	ldr	r2, [pc, #316]	; (d9824 <_strtod_l+0x96c>)
   d96e8:	2300      	movs	r3, #0
   d96ea:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   d96ee:	4650      	mov	r0, sl
   d96f0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   d96f4:	4659      	mov	r1, fp
   d96f6:	f7fe ff87 	bl	d8608 <__aeabi_dmul>
   d96fa:	460b      	mov	r3, r1
   d96fc:	4303      	orrs	r3, r0
   d96fe:	bf08      	it	eq
   d9700:	2322      	moveq	r3, #34	; 0x22
   d9702:	4682      	mov	sl, r0
   d9704:	468b      	mov	fp, r1
   d9706:	bf08      	it	eq
   d9708:	6023      	streq	r3, [r4, #0]
   d970a:	e62b      	b.n	d9364 <_strtod_l+0x4ac>
   d970c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9710:	fa02 f303 	lsl.w	r3, r2, r3
   d9714:	ea03 0a0a 	and.w	sl, r3, sl
   d9718:	e6de      	b.n	d94d8 <_strtod_l+0x620>
   d971a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   d971e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   d9722:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   d9726:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   d972a:	fa01 f308 	lsl.w	r3, r1, r8
   d972e:	930c      	str	r3, [sp, #48]	; 0x30
   d9730:	9111      	str	r1, [sp, #68]	; 0x44
   d9732:	e741      	b.n	d95b8 <_strtod_l+0x700>
   d9734:	2300      	movs	r3, #0
   d9736:	930c      	str	r3, [sp, #48]	; 0x30
   d9738:	2301      	movs	r3, #1
   d973a:	9311      	str	r3, [sp, #68]	; 0x44
   d973c:	e73c      	b.n	d95b8 <_strtod_l+0x700>
   d973e:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9740:	4642      	mov	r2, r8
   d9742:	4620      	mov	r0, r4
   d9744:	f000 ffcc 	bl	da6e0 <__lshift>
   d9748:	901e      	str	r0, [sp, #120]	; 0x78
   d974a:	2800      	cmp	r0, #0
   d974c:	f47f af66 	bne.w	d961c <_strtod_l+0x764>
   d9750:	e5fe      	b.n	d9350 <_strtod_l+0x498>
   d9752:	465f      	mov	r7, fp
   d9754:	d16e      	bne.n	d9834 <_strtod_l+0x97c>
   d9756:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d9758:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d975c:	b342      	cbz	r2, d97b0 <_strtod_l+0x8f8>
   d975e:	4a32      	ldr	r2, [pc, #200]	; (d9828 <_strtod_l+0x970>)
   d9760:	4293      	cmp	r3, r2
   d9762:	d128      	bne.n	d97b6 <_strtod_l+0x8fe>
   d9764:	9b04      	ldr	r3, [sp, #16]
   d9766:	4650      	mov	r0, sl
   d9768:	b1eb      	cbz	r3, d97a6 <_strtod_l+0x8ee>
   d976a:	4a2d      	ldr	r2, [pc, #180]	; (d9820 <_strtod_l+0x968>)
   d976c:	403a      	ands	r2, r7
   d976e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   d9772:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d9776:	d819      	bhi.n	d97ac <_strtod_l+0x8f4>
   d9778:	0d12      	lsrs	r2, r2, #20
   d977a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   d977e:	fa01 f303 	lsl.w	r3, r1, r3
   d9782:	4298      	cmp	r0, r3
   d9784:	d117      	bne.n	d97b6 <_strtod_l+0x8fe>
   d9786:	4b29      	ldr	r3, [pc, #164]	; (d982c <_strtod_l+0x974>)
   d9788:	429f      	cmp	r7, r3
   d978a:	d102      	bne.n	d9792 <_strtod_l+0x8da>
   d978c:	3001      	adds	r0, #1
   d978e:	f43f addf 	beq.w	d9350 <_strtod_l+0x498>
   d9792:	4b23      	ldr	r3, [pc, #140]	; (d9820 <_strtod_l+0x968>)
   d9794:	403b      	ands	r3, r7
   d9796:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d979a:	f04f 0a00 	mov.w	sl, #0
   d979e:	9b04      	ldr	r3, [sp, #16]
   d97a0:	2b00      	cmp	r3, #0
   d97a2:	d1a0      	bne.n	d96e6 <_strtod_l+0x82e>
   d97a4:	e5de      	b.n	d9364 <_strtod_l+0x4ac>
   d97a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d97aa:	e7ea      	b.n	d9782 <_strtod_l+0x8ca>
   d97ac:	460b      	mov	r3, r1
   d97ae:	e7e8      	b.n	d9782 <_strtod_l+0x8ca>
   d97b0:	ea53 030a 	orrs.w	r3, r3, sl
   d97b4:	d088      	beq.n	d96c8 <_strtod_l+0x810>
   d97b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d97b8:	b1db      	cbz	r3, d97f2 <_strtod_l+0x93a>
   d97ba:	423b      	tst	r3, r7
   d97bc:	d0ef      	beq.n	d979e <_strtod_l+0x8e6>
   d97be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d97c0:	9a04      	ldr	r2, [sp, #16]
   d97c2:	4650      	mov	r0, sl
   d97c4:	4659      	mov	r1, fp
   d97c6:	b1c3      	cbz	r3, d97fa <_strtod_l+0x942>
   d97c8:	f7ff fb5a 	bl	d8e80 <sulp>
   d97cc:	4602      	mov	r2, r0
   d97ce:	460b      	mov	r3, r1
   d97d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d97d4:	f7fe fd62 	bl	d829c <__adddf3>
   d97d8:	4682      	mov	sl, r0
   d97da:	468b      	mov	fp, r1
   d97dc:	e7df      	b.n	d979e <_strtod_l+0x8e6>
   d97de:	4013      	ands	r3, r2
   d97e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d97e4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d97e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d97ec:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d97f0:	e7d5      	b.n	d979e <_strtod_l+0x8e6>
   d97f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d97f4:	ea13 0f0a 	tst.w	r3, sl
   d97f8:	e7e0      	b.n	d97bc <_strtod_l+0x904>
   d97fa:	f7ff fb41 	bl	d8e80 <sulp>
   d97fe:	4602      	mov	r2, r0
   d9800:	460b      	mov	r3, r1
   d9802:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d9806:	f7fe fd47 	bl	d8298 <__aeabi_dsub>
   d980a:	2200      	movs	r2, #0
   d980c:	2300      	movs	r3, #0
   d980e:	4682      	mov	sl, r0
   d9810:	468b      	mov	fp, r1
   d9812:	f7ff f961 	bl	d8ad8 <__aeabi_dcmpeq>
   d9816:	2800      	cmp	r0, #0
   d9818:	d0c1      	beq.n	d979e <_strtod_l+0x8e6>
   d981a:	e60e      	b.n	d943a <_strtod_l+0x582>
   d981c:	fffffc02 	.word	0xfffffc02
   d9820:	7ff00000 	.word	0x7ff00000
   d9824:	39500000 	.word	0x39500000
   d9828:	000fffff 	.word	0x000fffff
   d982c:	7fefffff 	.word	0x7fefffff
   d9830:	000db4d0 	.word	0x000db4d0
   d9834:	4631      	mov	r1, r6
   d9836:	4628      	mov	r0, r5
   d9838:	f001 f910 	bl	daa5c <__ratio>
   d983c:	ec59 8b10 	vmov	r8, r9, d0
   d9840:	ee10 0a10 	vmov	r0, s0
   d9844:	2200      	movs	r2, #0
   d9846:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d984a:	4649      	mov	r1, r9
   d984c:	f7ff f958 	bl	d8b00 <__aeabi_dcmple>
   d9850:	2800      	cmp	r0, #0
   d9852:	d07c      	beq.n	d994e <_strtod_l+0xa96>
   d9854:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9856:	2b00      	cmp	r3, #0
   d9858:	d04c      	beq.n	d98f4 <_strtod_l+0xa3c>
   d985a:	4b95      	ldr	r3, [pc, #596]	; (d9ab0 <_strtod_l+0xbf8>)
   d985c:	2200      	movs	r2, #0
   d985e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9862:	f8df 924c 	ldr.w	r9, [pc, #588]	; d9ab0 <_strtod_l+0xbf8>
   d9866:	f04f 0800 	mov.w	r8, #0
   d986a:	4b92      	ldr	r3, [pc, #584]	; (d9ab4 <_strtod_l+0xbfc>)
   d986c:	403b      	ands	r3, r7
   d986e:	9311      	str	r3, [sp, #68]	; 0x44
   d9870:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9872:	4b91      	ldr	r3, [pc, #580]	; (d9ab8 <_strtod_l+0xc00>)
   d9874:	429a      	cmp	r2, r3
   d9876:	f040 80b2 	bne.w	d99de <_strtod_l+0xb26>
   d987a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d987e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9882:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   d9886:	ec4b ab10 	vmov	d0, sl, fp
   d988a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   d988e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d9892:	f001 f817 	bl	da8c4 <__ulp>
   d9896:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d989a:	ec53 2b10 	vmov	r2, r3, d0
   d989e:	f7fe feb3 	bl	d8608 <__aeabi_dmul>
   d98a2:	4652      	mov	r2, sl
   d98a4:	465b      	mov	r3, fp
   d98a6:	f7fe fcf9 	bl	d829c <__adddf3>
   d98aa:	460b      	mov	r3, r1
   d98ac:	4981      	ldr	r1, [pc, #516]	; (d9ab4 <_strtod_l+0xbfc>)
   d98ae:	4a83      	ldr	r2, [pc, #524]	; (d9abc <_strtod_l+0xc04>)
   d98b0:	4019      	ands	r1, r3
   d98b2:	4291      	cmp	r1, r2
   d98b4:	4682      	mov	sl, r0
   d98b6:	d95e      	bls.n	d9976 <_strtod_l+0xabe>
   d98b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d98ba:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   d98be:	4293      	cmp	r3, r2
   d98c0:	d103      	bne.n	d98ca <_strtod_l+0xa12>
   d98c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d98c4:	3301      	adds	r3, #1
   d98c6:	f43f ad43 	beq.w	d9350 <_strtod_l+0x498>
   d98ca:	f8df b1fc 	ldr.w	fp, [pc, #508]	; d9ac8 <_strtod_l+0xc10>
   d98ce:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d98d2:	991e      	ldr	r1, [sp, #120]	; 0x78
   d98d4:	4620      	mov	r0, r4
   d98d6:	f000 fd2d 	bl	da334 <_Bfree>
   d98da:	9907      	ldr	r1, [sp, #28]
   d98dc:	4620      	mov	r0, r4
   d98de:	f000 fd29 	bl	da334 <_Bfree>
   d98e2:	4631      	mov	r1, r6
   d98e4:	4620      	mov	r0, r4
   d98e6:	f000 fd25 	bl	da334 <_Bfree>
   d98ea:	4629      	mov	r1, r5
   d98ec:	4620      	mov	r0, r4
   d98ee:	f000 fd21 	bl	da334 <_Bfree>
   d98f2:	e613      	b.n	d951c <_strtod_l+0x664>
   d98f4:	f1ba 0f00 	cmp.w	sl, #0
   d98f8:	d11b      	bne.n	d9932 <_strtod_l+0xa7a>
   d98fa:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d98fe:	b9f3      	cbnz	r3, d993e <_strtod_l+0xa86>
   d9900:	4b6b      	ldr	r3, [pc, #428]	; (d9ab0 <_strtod_l+0xbf8>)
   d9902:	2200      	movs	r2, #0
   d9904:	4640      	mov	r0, r8
   d9906:	4649      	mov	r1, r9
   d9908:	f7ff f8f0 	bl	d8aec <__aeabi_dcmplt>
   d990c:	b9d0      	cbnz	r0, d9944 <_strtod_l+0xa8c>
   d990e:	4640      	mov	r0, r8
   d9910:	4649      	mov	r1, r9
   d9912:	4b6b      	ldr	r3, [pc, #428]	; (d9ac0 <_strtod_l+0xc08>)
   d9914:	2200      	movs	r2, #0
   d9916:	f7fe fe77 	bl	d8608 <__aeabi_dmul>
   d991a:	4680      	mov	r8, r0
   d991c:	4689      	mov	r9, r1
   d991e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d9922:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   d9926:	931b      	str	r3, [sp, #108]	; 0x6c
   d9928:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   d992c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9930:	e79b      	b.n	d986a <_strtod_l+0x9b2>
   d9932:	f1ba 0f01 	cmp.w	sl, #1
   d9936:	d102      	bne.n	d993e <_strtod_l+0xa86>
   d9938:	2f00      	cmp	r7, #0
   d993a:	f43f ad7e 	beq.w	d943a <_strtod_l+0x582>
   d993e:	4b61      	ldr	r3, [pc, #388]	; (d9ac4 <_strtod_l+0xc0c>)
   d9940:	2200      	movs	r2, #0
   d9942:	e78c      	b.n	d985e <_strtod_l+0x9a6>
   d9944:	f8df 9178 	ldr.w	r9, [pc, #376]	; d9ac0 <_strtod_l+0xc08>
   d9948:	f04f 0800 	mov.w	r8, #0
   d994c:	e7e7      	b.n	d991e <_strtod_l+0xa66>
   d994e:	4b5c      	ldr	r3, [pc, #368]	; (d9ac0 <_strtod_l+0xc08>)
   d9950:	4640      	mov	r0, r8
   d9952:	4649      	mov	r1, r9
   d9954:	2200      	movs	r2, #0
   d9956:	f7fe fe57 	bl	d8608 <__aeabi_dmul>
   d995a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d995c:	4680      	mov	r8, r0
   d995e:	4689      	mov	r9, r1
   d9960:	b933      	cbnz	r3, d9970 <_strtod_l+0xab8>
   d9962:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9966:	9012      	str	r0, [sp, #72]	; 0x48
   d9968:	9313      	str	r3, [sp, #76]	; 0x4c
   d996a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   d996e:	e7dd      	b.n	d992c <_strtod_l+0xa74>
   d9970:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   d9974:	e7f9      	b.n	d996a <_strtod_l+0xab2>
   d9976:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   d997a:	9b04      	ldr	r3, [sp, #16]
   d997c:	2b00      	cmp	r3, #0
   d997e:	d1a8      	bne.n	d98d2 <_strtod_l+0xa1a>
   d9980:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9984:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9986:	0d1b      	lsrs	r3, r3, #20
   d9988:	051b      	lsls	r3, r3, #20
   d998a:	429a      	cmp	r2, r3
   d998c:	d1a1      	bne.n	d98d2 <_strtod_l+0xa1a>
   d998e:	4640      	mov	r0, r8
   d9990:	4649      	mov	r1, r9
   d9992:	f001 f8ff 	bl	dab94 <__aeabi_d2lz>
   d9996:	f7fe fe09 	bl	d85ac <__aeabi_l2d>
   d999a:	4602      	mov	r2, r0
   d999c:	460b      	mov	r3, r1
   d999e:	4640      	mov	r0, r8
   d99a0:	4649      	mov	r1, r9
   d99a2:	f7fe fc79 	bl	d8298 <__aeabi_dsub>
   d99a6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d99a8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d99ac:	ea43 030a 	orr.w	r3, r3, sl
   d99b0:	4313      	orrs	r3, r2
   d99b2:	4680      	mov	r8, r0
   d99b4:	4689      	mov	r9, r1
   d99b6:	d053      	beq.n	d9a60 <_strtod_l+0xba8>
   d99b8:	a335      	add	r3, pc, #212	; (adr r3, d9a90 <_strtod_l+0xbd8>)
   d99ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   d99be:	f7ff f895 	bl	d8aec <__aeabi_dcmplt>
   d99c2:	2800      	cmp	r0, #0
   d99c4:	f47f acce 	bne.w	d9364 <_strtod_l+0x4ac>
   d99c8:	a333      	add	r3, pc, #204	; (adr r3, d9a98 <_strtod_l+0xbe0>)
   d99ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d99ce:	4640      	mov	r0, r8
   d99d0:	4649      	mov	r1, r9
   d99d2:	f7ff f8a9 	bl	d8b28 <__aeabi_dcmpgt>
   d99d6:	2800      	cmp	r0, #0
   d99d8:	f43f af7b 	beq.w	d98d2 <_strtod_l+0xa1a>
   d99dc:	e4c2      	b.n	d9364 <_strtod_l+0x4ac>
   d99de:	9b04      	ldr	r3, [sp, #16]
   d99e0:	b333      	cbz	r3, d9a30 <_strtod_l+0xb78>
   d99e2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d99e4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d99e8:	d822      	bhi.n	d9a30 <_strtod_l+0xb78>
   d99ea:	a32d      	add	r3, pc, #180	; (adr r3, d9aa0 <_strtod_l+0xbe8>)
   d99ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   d99f0:	4640      	mov	r0, r8
   d99f2:	4649      	mov	r1, r9
   d99f4:	f7ff f884 	bl	d8b00 <__aeabi_dcmple>
   d99f8:	b1a0      	cbz	r0, d9a24 <_strtod_l+0xb6c>
   d99fa:	4649      	mov	r1, r9
   d99fc:	4640      	mov	r0, r8
   d99fe:	f7ff f8b3 	bl	d8b68 <__aeabi_d2uiz>
   d9a02:	2801      	cmp	r0, #1
   d9a04:	bf38      	it	cc
   d9a06:	2001      	movcc	r0, #1
   d9a08:	f7fe fd84 	bl	d8514 <__aeabi_ui2d>
   d9a0c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9a0e:	4680      	mov	r8, r0
   d9a10:	4689      	mov	r9, r1
   d9a12:	bb13      	cbnz	r3, d9a5a <_strtod_l+0xba2>
   d9a14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d9a18:	9014      	str	r0, [sp, #80]	; 0x50
   d9a1a:	9315      	str	r3, [sp, #84]	; 0x54
   d9a1c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   d9a20:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9a24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d9a26:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9a28:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   d9a2c:	1a9b      	subs	r3, r3, r2
   d9a2e:	930d      	str	r3, [sp, #52]	; 0x34
   d9a30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9a34:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   d9a38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d9a3c:	f000 ff42 	bl	da8c4 <__ulp>
   d9a40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9a44:	ec53 2b10 	vmov	r2, r3, d0
   d9a48:	f7fe fdde 	bl	d8608 <__aeabi_dmul>
   d9a4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9a50:	f7fe fc24 	bl	d829c <__adddf3>
   d9a54:	4682      	mov	sl, r0
   d9a56:	468b      	mov	fp, r1
   d9a58:	e78f      	b.n	d997a <_strtod_l+0xac2>
   d9a5a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   d9a5e:	e7dd      	b.n	d9a1c <_strtod_l+0xb64>
   d9a60:	a311      	add	r3, pc, #68	; (adr r3, d9aa8 <_strtod_l+0xbf0>)
   d9a62:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9a66:	f7ff f841 	bl	d8aec <__aeabi_dcmplt>
   d9a6a:	e7b4      	b.n	d99d6 <_strtod_l+0xb1e>
   d9a6c:	2300      	movs	r3, #0
   d9a6e:	930e      	str	r3, [sp, #56]	; 0x38
   d9a70:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d9a72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9a74:	6013      	str	r3, [r2, #0]
   d9a76:	f7ff ba65 	b.w	d8f44 <_strtod_l+0x8c>
   d9a7a:	2b65      	cmp	r3, #101	; 0x65
   d9a7c:	f43f ab5d 	beq.w	d913a <_strtod_l+0x282>
   d9a80:	2b45      	cmp	r3, #69	; 0x45
   d9a82:	f43f ab5a 	beq.w	d913a <_strtod_l+0x282>
   d9a86:	2201      	movs	r2, #1
   d9a88:	f7ff bb92 	b.w	d91b0 <_strtod_l+0x2f8>
   d9a8c:	f3af 8000 	nop.w
   d9a90:	94a03595 	.word	0x94a03595
   d9a94:	3fdfffff 	.word	0x3fdfffff
   d9a98:	35afe535 	.word	0x35afe535
   d9a9c:	3fe00000 	.word	0x3fe00000
   d9aa0:	ffc00000 	.word	0xffc00000
   d9aa4:	41dfffff 	.word	0x41dfffff
   d9aa8:	94a03595 	.word	0x94a03595
   d9aac:	3fcfffff 	.word	0x3fcfffff
   d9ab0:	3ff00000 	.word	0x3ff00000
   d9ab4:	7ff00000 	.word	0x7ff00000
   d9ab8:	7fe00000 	.word	0x7fe00000
   d9abc:	7c9fffff 	.word	0x7c9fffff
   d9ac0:	3fe00000 	.word	0x3fe00000
   d9ac4:	bff00000 	.word	0xbff00000
   d9ac8:	7fefffff 	.word	0x7fefffff

000d9acc <strtod>:
   d9acc:	460a      	mov	r2, r1
   d9ace:	4601      	mov	r1, r0
   d9ad0:	4802      	ldr	r0, [pc, #8]	; (d9adc <strtod+0x10>)
   d9ad2:	4b03      	ldr	r3, [pc, #12]	; (d9ae0 <strtod+0x14>)
   d9ad4:	6800      	ldr	r0, [r0, #0]
   d9ad6:	f7ff b9ef 	b.w	d8eb8 <_strtod_l>
   d9ada:	bf00      	nop
   d9adc:	2003de8c 	.word	0x2003de8c
   d9ae0:	2003def4 	.word	0x2003def4

000d9ae4 <_strtol_l.isra.0>:
   d9ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9ae8:	4e3a      	ldr	r6, [pc, #232]	; (d9bd4 <_strtol_l.isra.0+0xf0>)
   d9aea:	4686      	mov	lr, r0
   d9aec:	468c      	mov	ip, r1
   d9aee:	4660      	mov	r0, ip
   d9af0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9af4:	5da5      	ldrb	r5, [r4, r6]
   d9af6:	f015 0508 	ands.w	r5, r5, #8
   d9afa:	d1f8      	bne.n	d9aee <_strtol_l.isra.0+0xa>
   d9afc:	2c2d      	cmp	r4, #45	; 0x2d
   d9afe:	d133      	bne.n	d9b68 <_strtol_l.isra.0+0x84>
   d9b00:	f89c 4000 	ldrb.w	r4, [ip]
   d9b04:	f04f 0801 	mov.w	r8, #1
   d9b08:	f100 0c02 	add.w	ip, r0, #2
   d9b0c:	2b00      	cmp	r3, #0
   d9b0e:	d05c      	beq.n	d9bca <_strtol_l.isra.0+0xe6>
   d9b10:	2b10      	cmp	r3, #16
   d9b12:	d10c      	bne.n	d9b2e <_strtol_l.isra.0+0x4a>
   d9b14:	2c30      	cmp	r4, #48	; 0x30
   d9b16:	d10a      	bne.n	d9b2e <_strtol_l.isra.0+0x4a>
   d9b18:	f89c 0000 	ldrb.w	r0, [ip]
   d9b1c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9b20:	2858      	cmp	r0, #88	; 0x58
   d9b22:	d14d      	bne.n	d9bc0 <_strtol_l.isra.0+0xdc>
   d9b24:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d9b28:	2310      	movs	r3, #16
   d9b2a:	f10c 0c02 	add.w	ip, ip, #2
   d9b2e:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d9b32:	3f01      	subs	r7, #1
   d9b34:	2600      	movs	r6, #0
   d9b36:	fbb7 f9f3 	udiv	r9, r7, r3
   d9b3a:	4630      	mov	r0, r6
   d9b3c:	fb03 7a19 	mls	sl, r3, r9, r7
   d9b40:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d9b44:	2d09      	cmp	r5, #9
   d9b46:	d818      	bhi.n	d9b7a <_strtol_l.isra.0+0x96>
   d9b48:	462c      	mov	r4, r5
   d9b4a:	42a3      	cmp	r3, r4
   d9b4c:	dd24      	ble.n	d9b98 <_strtol_l.isra.0+0xb4>
   d9b4e:	1c75      	adds	r5, r6, #1
   d9b50:	d007      	beq.n	d9b62 <_strtol_l.isra.0+0x7e>
   d9b52:	4581      	cmp	r9, r0
   d9b54:	d31d      	bcc.n	d9b92 <_strtol_l.isra.0+0xae>
   d9b56:	d101      	bne.n	d9b5c <_strtol_l.isra.0+0x78>
   d9b58:	45a2      	cmp	sl, r4
   d9b5a:	db1a      	blt.n	d9b92 <_strtol_l.isra.0+0xae>
   d9b5c:	fb00 4003 	mla	r0, r0, r3, r4
   d9b60:	2601      	movs	r6, #1
   d9b62:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9b66:	e7eb      	b.n	d9b40 <_strtol_l.isra.0+0x5c>
   d9b68:	2c2b      	cmp	r4, #43	; 0x2b
   d9b6a:	bf08      	it	eq
   d9b6c:	f89c 4000 	ldrbeq.w	r4, [ip]
   d9b70:	46a8      	mov	r8, r5
   d9b72:	bf08      	it	eq
   d9b74:	f100 0c02 	addeq.w	ip, r0, #2
   d9b78:	e7c8      	b.n	d9b0c <_strtol_l.isra.0+0x28>
   d9b7a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d9b7e:	2d19      	cmp	r5, #25
   d9b80:	d801      	bhi.n	d9b86 <_strtol_l.isra.0+0xa2>
   d9b82:	3c37      	subs	r4, #55	; 0x37
   d9b84:	e7e1      	b.n	d9b4a <_strtol_l.isra.0+0x66>
   d9b86:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d9b8a:	2d19      	cmp	r5, #25
   d9b8c:	d804      	bhi.n	d9b98 <_strtol_l.isra.0+0xb4>
   d9b8e:	3c57      	subs	r4, #87	; 0x57
   d9b90:	e7db      	b.n	d9b4a <_strtol_l.isra.0+0x66>
   d9b92:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d9b96:	e7e4      	b.n	d9b62 <_strtol_l.isra.0+0x7e>
   d9b98:	1c73      	adds	r3, r6, #1
   d9b9a:	d106      	bne.n	d9baa <_strtol_l.isra.0+0xc6>
   d9b9c:	2322      	movs	r3, #34	; 0x22
   d9b9e:	f8ce 3000 	str.w	r3, [lr]
   d9ba2:	4638      	mov	r0, r7
   d9ba4:	b942      	cbnz	r2, d9bb8 <_strtol_l.isra.0+0xd4>
   d9ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9baa:	f1b8 0f00 	cmp.w	r8, #0
   d9bae:	d000      	beq.n	d9bb2 <_strtol_l.isra.0+0xce>
   d9bb0:	4240      	negs	r0, r0
   d9bb2:	2a00      	cmp	r2, #0
   d9bb4:	d0f7      	beq.n	d9ba6 <_strtol_l.isra.0+0xc2>
   d9bb6:	b10e      	cbz	r6, d9bbc <_strtol_l.isra.0+0xd8>
   d9bb8:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d9bbc:	6011      	str	r1, [r2, #0]
   d9bbe:	e7f2      	b.n	d9ba6 <_strtol_l.isra.0+0xc2>
   d9bc0:	2430      	movs	r4, #48	; 0x30
   d9bc2:	2b00      	cmp	r3, #0
   d9bc4:	d1b3      	bne.n	d9b2e <_strtol_l.isra.0+0x4a>
   d9bc6:	2308      	movs	r3, #8
   d9bc8:	e7b1      	b.n	d9b2e <_strtol_l.isra.0+0x4a>
   d9bca:	2c30      	cmp	r4, #48	; 0x30
   d9bcc:	d0a4      	beq.n	d9b18 <_strtol_l.isra.0+0x34>
   d9bce:	230a      	movs	r3, #10
   d9bd0:	e7ad      	b.n	d9b2e <_strtol_l.isra.0+0x4a>
   d9bd2:	bf00      	nop
   d9bd4:	000db4f9 	.word	0x000db4f9

000d9bd8 <strtol>:
   d9bd8:	4613      	mov	r3, r2
   d9bda:	460a      	mov	r2, r1
   d9bdc:	4601      	mov	r1, r0
   d9bde:	4802      	ldr	r0, [pc, #8]	; (d9be8 <strtol+0x10>)
   d9be0:	6800      	ldr	r0, [r0, #0]
   d9be2:	f7ff bf7f 	b.w	d9ae4 <_strtol_l.isra.0>
   d9be6:	bf00      	nop
   d9be8:	2003de8c 	.word	0x2003de8c

000d9bec <rshift>:
   d9bec:	6903      	ldr	r3, [r0, #16]
   d9bee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   d9bf2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d9bf6:	ea4f 1261 	mov.w	r2, r1, asr #5
   d9bfa:	f100 0414 	add.w	r4, r0, #20
   d9bfe:	dd45      	ble.n	d9c8c <rshift+0xa0>
   d9c00:	f011 011f 	ands.w	r1, r1, #31
   d9c04:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   d9c08:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   d9c0c:	d10c      	bne.n	d9c28 <rshift+0x3c>
   d9c0e:	f100 0710 	add.w	r7, r0, #16
   d9c12:	4629      	mov	r1, r5
   d9c14:	42b1      	cmp	r1, r6
   d9c16:	d334      	bcc.n	d9c82 <rshift+0x96>
   d9c18:	1a9b      	subs	r3, r3, r2
   d9c1a:	009b      	lsls	r3, r3, #2
   d9c1c:	1eea      	subs	r2, r5, #3
   d9c1e:	4296      	cmp	r6, r2
   d9c20:	bf38      	it	cc
   d9c22:	2300      	movcc	r3, #0
   d9c24:	4423      	add	r3, r4
   d9c26:	e015      	b.n	d9c54 <rshift+0x68>
   d9c28:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   d9c2c:	f1c1 0820 	rsb	r8, r1, #32
   d9c30:	40cf      	lsrs	r7, r1
   d9c32:	f105 0e04 	add.w	lr, r5, #4
   d9c36:	46a1      	mov	r9, r4
   d9c38:	4576      	cmp	r6, lr
   d9c3a:	46f4      	mov	ip, lr
   d9c3c:	d815      	bhi.n	d9c6a <rshift+0x7e>
   d9c3e:	1a9b      	subs	r3, r3, r2
   d9c40:	009a      	lsls	r2, r3, #2
   d9c42:	3a04      	subs	r2, #4
   d9c44:	3501      	adds	r5, #1
   d9c46:	42ae      	cmp	r6, r5
   d9c48:	bf38      	it	cc
   d9c4a:	2200      	movcc	r2, #0
   d9c4c:	18a3      	adds	r3, r4, r2
   d9c4e:	50a7      	str	r7, [r4, r2]
   d9c50:	b107      	cbz	r7, d9c54 <rshift+0x68>
   d9c52:	3304      	adds	r3, #4
   d9c54:	1b1a      	subs	r2, r3, r4
   d9c56:	42a3      	cmp	r3, r4
   d9c58:	ea4f 02a2 	mov.w	r2, r2, asr #2
   d9c5c:	bf08      	it	eq
   d9c5e:	2300      	moveq	r3, #0
   d9c60:	6102      	str	r2, [r0, #16]
   d9c62:	bf08      	it	eq
   d9c64:	6143      	streq	r3, [r0, #20]
   d9c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d9c6a:	f8dc c000 	ldr.w	ip, [ip]
   d9c6e:	fa0c fc08 	lsl.w	ip, ip, r8
   d9c72:	ea4c 0707 	orr.w	r7, ip, r7
   d9c76:	f849 7b04 	str.w	r7, [r9], #4
   d9c7a:	f85e 7b04 	ldr.w	r7, [lr], #4
   d9c7e:	40cf      	lsrs	r7, r1
   d9c80:	e7da      	b.n	d9c38 <rshift+0x4c>
   d9c82:	f851 cb04 	ldr.w	ip, [r1], #4
   d9c86:	f847 cf04 	str.w	ip, [r7, #4]!
   d9c8a:	e7c3      	b.n	d9c14 <rshift+0x28>
   d9c8c:	4623      	mov	r3, r4
   d9c8e:	e7e1      	b.n	d9c54 <rshift+0x68>

000d9c90 <__hexdig_fun>:
   d9c90:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d9c94:	2b09      	cmp	r3, #9
   d9c96:	d802      	bhi.n	d9c9e <__hexdig_fun+0xe>
   d9c98:	3820      	subs	r0, #32
   d9c9a:	b2c0      	uxtb	r0, r0
   d9c9c:	4770      	bx	lr
   d9c9e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d9ca2:	2b05      	cmp	r3, #5
   d9ca4:	d801      	bhi.n	d9caa <__hexdig_fun+0x1a>
   d9ca6:	3847      	subs	r0, #71	; 0x47
   d9ca8:	e7f7      	b.n	d9c9a <__hexdig_fun+0xa>
   d9caa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d9cae:	2b05      	cmp	r3, #5
   d9cb0:	d801      	bhi.n	d9cb6 <__hexdig_fun+0x26>
   d9cb2:	3827      	subs	r0, #39	; 0x27
   d9cb4:	e7f1      	b.n	d9c9a <__hexdig_fun+0xa>
   d9cb6:	2000      	movs	r0, #0
   d9cb8:	4770      	bx	lr
	...

000d9cbc <__gethex>:
   d9cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9cc0:	ed2d 8b02 	vpush	{d8}
   d9cc4:	b089      	sub	sp, #36	; 0x24
   d9cc6:	ee08 0a10 	vmov	s16, r0
   d9cca:	9304      	str	r3, [sp, #16]
   d9ccc:	4bbc      	ldr	r3, [pc, #752]	; (d9fc0 <__gethex+0x304>)
   d9cce:	681b      	ldr	r3, [r3, #0]
   d9cd0:	9301      	str	r3, [sp, #4]
   d9cd2:	4618      	mov	r0, r3
   d9cd4:	468b      	mov	fp, r1
   d9cd6:	4690      	mov	r8, r2
   d9cd8:	f7ff f8a5 	bl	d8e26 <strlen>
   d9cdc:	9b01      	ldr	r3, [sp, #4]
   d9cde:	f8db 2000 	ldr.w	r2, [fp]
   d9ce2:	4403      	add	r3, r0
   d9ce4:	4682      	mov	sl, r0
   d9ce6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d9cea:	9305      	str	r3, [sp, #20]
   d9cec:	1c93      	adds	r3, r2, #2
   d9cee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   d9cf2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   d9cf6:	32fe      	adds	r2, #254	; 0xfe
   d9cf8:	18d1      	adds	r1, r2, r3
   d9cfa:	461f      	mov	r7, r3
   d9cfc:	f813 0b01 	ldrb.w	r0, [r3], #1
   d9d00:	9100      	str	r1, [sp, #0]
   d9d02:	2830      	cmp	r0, #48	; 0x30
   d9d04:	d0f8      	beq.n	d9cf8 <__gethex+0x3c>
   d9d06:	f7ff ffc3 	bl	d9c90 <__hexdig_fun>
   d9d0a:	4604      	mov	r4, r0
   d9d0c:	2800      	cmp	r0, #0
   d9d0e:	d13a      	bne.n	d9d86 <__gethex+0xca>
   d9d10:	9901      	ldr	r1, [sp, #4]
   d9d12:	4652      	mov	r2, sl
   d9d14:	4638      	mov	r0, r7
   d9d16:	f7ff f88e 	bl	d8e36 <strncmp>
   d9d1a:	4605      	mov	r5, r0
   d9d1c:	2800      	cmp	r0, #0
   d9d1e:	d168      	bne.n	d9df2 <__gethex+0x136>
   d9d20:	f817 000a 	ldrb.w	r0, [r7, sl]
   d9d24:	eb07 060a 	add.w	r6, r7, sl
   d9d28:	f7ff ffb2 	bl	d9c90 <__hexdig_fun>
   d9d2c:	2800      	cmp	r0, #0
   d9d2e:	d062      	beq.n	d9df6 <__gethex+0x13a>
   d9d30:	4633      	mov	r3, r6
   d9d32:	7818      	ldrb	r0, [r3, #0]
   d9d34:	2830      	cmp	r0, #48	; 0x30
   d9d36:	461f      	mov	r7, r3
   d9d38:	f103 0301 	add.w	r3, r3, #1
   d9d3c:	d0f9      	beq.n	d9d32 <__gethex+0x76>
   d9d3e:	f7ff ffa7 	bl	d9c90 <__hexdig_fun>
   d9d42:	2301      	movs	r3, #1
   d9d44:	fab0 f480 	clz	r4, r0
   d9d48:	0964      	lsrs	r4, r4, #5
   d9d4a:	4635      	mov	r5, r6
   d9d4c:	9300      	str	r3, [sp, #0]
   d9d4e:	463a      	mov	r2, r7
   d9d50:	4616      	mov	r6, r2
   d9d52:	3201      	adds	r2, #1
   d9d54:	7830      	ldrb	r0, [r6, #0]
   d9d56:	f7ff ff9b 	bl	d9c90 <__hexdig_fun>
   d9d5a:	2800      	cmp	r0, #0
   d9d5c:	d1f8      	bne.n	d9d50 <__gethex+0x94>
   d9d5e:	9901      	ldr	r1, [sp, #4]
   d9d60:	4652      	mov	r2, sl
   d9d62:	4630      	mov	r0, r6
   d9d64:	f7ff f867 	bl	d8e36 <strncmp>
   d9d68:	b980      	cbnz	r0, d9d8c <__gethex+0xd0>
   d9d6a:	b94d      	cbnz	r5, d9d80 <__gethex+0xc4>
   d9d6c:	eb06 050a 	add.w	r5, r6, sl
   d9d70:	462a      	mov	r2, r5
   d9d72:	4616      	mov	r6, r2
   d9d74:	3201      	adds	r2, #1
   d9d76:	7830      	ldrb	r0, [r6, #0]
   d9d78:	f7ff ff8a 	bl	d9c90 <__hexdig_fun>
   d9d7c:	2800      	cmp	r0, #0
   d9d7e:	d1f8      	bne.n	d9d72 <__gethex+0xb6>
   d9d80:	1bad      	subs	r5, r5, r6
   d9d82:	00ad      	lsls	r5, r5, #2
   d9d84:	e004      	b.n	d9d90 <__gethex+0xd4>
   d9d86:	2400      	movs	r4, #0
   d9d88:	4625      	mov	r5, r4
   d9d8a:	e7e0      	b.n	d9d4e <__gethex+0x92>
   d9d8c:	2d00      	cmp	r5, #0
   d9d8e:	d1f7      	bne.n	d9d80 <__gethex+0xc4>
   d9d90:	7833      	ldrb	r3, [r6, #0]
   d9d92:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d9d96:	2b50      	cmp	r3, #80	; 0x50
   d9d98:	d13b      	bne.n	d9e12 <__gethex+0x156>
   d9d9a:	7873      	ldrb	r3, [r6, #1]
   d9d9c:	2b2b      	cmp	r3, #43	; 0x2b
   d9d9e:	d02c      	beq.n	d9dfa <__gethex+0x13e>
   d9da0:	2b2d      	cmp	r3, #45	; 0x2d
   d9da2:	d02e      	beq.n	d9e02 <__gethex+0x146>
   d9da4:	1c71      	adds	r1, r6, #1
   d9da6:	f04f 0900 	mov.w	r9, #0
   d9daa:	7808      	ldrb	r0, [r1, #0]
   d9dac:	f7ff ff70 	bl	d9c90 <__hexdig_fun>
   d9db0:	1e43      	subs	r3, r0, #1
   d9db2:	b2db      	uxtb	r3, r3
   d9db4:	2b18      	cmp	r3, #24
   d9db6:	d82c      	bhi.n	d9e12 <__gethex+0x156>
   d9db8:	f1a0 0210 	sub.w	r2, r0, #16
   d9dbc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d9dc0:	f7ff ff66 	bl	d9c90 <__hexdig_fun>
   d9dc4:	1e43      	subs	r3, r0, #1
   d9dc6:	b2db      	uxtb	r3, r3
   d9dc8:	2b18      	cmp	r3, #24
   d9dca:	d91d      	bls.n	d9e08 <__gethex+0x14c>
   d9dcc:	f1b9 0f00 	cmp.w	r9, #0
   d9dd0:	d000      	beq.n	d9dd4 <__gethex+0x118>
   d9dd2:	4252      	negs	r2, r2
   d9dd4:	4415      	add	r5, r2
   d9dd6:	f8cb 1000 	str.w	r1, [fp]
   d9dda:	b1e4      	cbz	r4, d9e16 <__gethex+0x15a>
   d9ddc:	9b00      	ldr	r3, [sp, #0]
   d9dde:	2b00      	cmp	r3, #0
   d9de0:	bf14      	ite	ne
   d9de2:	2700      	movne	r7, #0
   d9de4:	2706      	moveq	r7, #6
   d9de6:	4638      	mov	r0, r7
   d9de8:	b009      	add	sp, #36	; 0x24
   d9dea:	ecbd 8b02 	vpop	{d8}
   d9dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9df2:	463e      	mov	r6, r7
   d9df4:	4625      	mov	r5, r4
   d9df6:	2401      	movs	r4, #1
   d9df8:	e7ca      	b.n	d9d90 <__gethex+0xd4>
   d9dfa:	f04f 0900 	mov.w	r9, #0
   d9dfe:	1cb1      	adds	r1, r6, #2
   d9e00:	e7d3      	b.n	d9daa <__gethex+0xee>
   d9e02:	f04f 0901 	mov.w	r9, #1
   d9e06:	e7fa      	b.n	d9dfe <__gethex+0x142>
   d9e08:	230a      	movs	r3, #10
   d9e0a:	fb03 0202 	mla	r2, r3, r2, r0
   d9e0e:	3a10      	subs	r2, #16
   d9e10:	e7d4      	b.n	d9dbc <__gethex+0x100>
   d9e12:	4631      	mov	r1, r6
   d9e14:	e7df      	b.n	d9dd6 <__gethex+0x11a>
   d9e16:	1bf3      	subs	r3, r6, r7
   d9e18:	3b01      	subs	r3, #1
   d9e1a:	4621      	mov	r1, r4
   d9e1c:	2b07      	cmp	r3, #7
   d9e1e:	dc52      	bgt.n	d9ec6 <__gethex+0x20a>
   d9e20:	ee18 0a10 	vmov	r0, s16
   d9e24:	f000 fa52 	bl	da2cc <_Balloc>
   d9e28:	f04f 0b00 	mov.w	fp, #0
   d9e2c:	f100 0914 	add.w	r9, r0, #20
   d9e30:	f1ca 0301 	rsb	r3, sl, #1
   d9e34:	4604      	mov	r4, r0
   d9e36:	f8cd 9008 	str.w	r9, [sp, #8]
   d9e3a:	f8cd b000 	str.w	fp, [sp]
   d9e3e:	9306      	str	r3, [sp, #24]
   d9e40:	42b7      	cmp	r7, r6
   d9e42:	d343      	bcc.n	d9ecc <__gethex+0x210>
   d9e44:	9802      	ldr	r0, [sp, #8]
   d9e46:	9b00      	ldr	r3, [sp, #0]
   d9e48:	f840 3b04 	str.w	r3, [r0], #4
   d9e4c:	eba0 0009 	sub.w	r0, r0, r9
   d9e50:	1080      	asrs	r0, r0, #2
   d9e52:	0146      	lsls	r6, r0, #5
   d9e54:	6120      	str	r0, [r4, #16]
   d9e56:	4618      	mov	r0, r3
   d9e58:	f000 faff 	bl	da45a <__hi0bits>
   d9e5c:	1a30      	subs	r0, r6, r0
   d9e5e:	f8d8 6000 	ldr.w	r6, [r8]
   d9e62:	42b0      	cmp	r0, r6
   d9e64:	dd66      	ble.n	d9f34 <__gethex+0x278>
   d9e66:	1b87      	subs	r7, r0, r6
   d9e68:	4639      	mov	r1, r7
   d9e6a:	4620      	mov	r0, r4
   d9e6c:	f000 fe4c 	bl	dab08 <__any_on>
   d9e70:	4682      	mov	sl, r0
   d9e72:	b1a8      	cbz	r0, d9ea0 <__gethex+0x1e4>
   d9e74:	1e7b      	subs	r3, r7, #1
   d9e76:	1159      	asrs	r1, r3, #5
   d9e78:	f003 021f 	and.w	r2, r3, #31
   d9e7c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   d9e80:	f04f 0a01 	mov.w	sl, #1
   d9e84:	fa0a f202 	lsl.w	r2, sl, r2
   d9e88:	420a      	tst	r2, r1
   d9e8a:	d009      	beq.n	d9ea0 <__gethex+0x1e4>
   d9e8c:	4553      	cmp	r3, sl
   d9e8e:	dd05      	ble.n	d9e9c <__gethex+0x1e0>
   d9e90:	1eb9      	subs	r1, r7, #2
   d9e92:	4620      	mov	r0, r4
   d9e94:	f000 fe38 	bl	dab08 <__any_on>
   d9e98:	2800      	cmp	r0, #0
   d9e9a:	d148      	bne.n	d9f2e <__gethex+0x272>
   d9e9c:	f04f 0a02 	mov.w	sl, #2
   d9ea0:	4639      	mov	r1, r7
   d9ea2:	4620      	mov	r0, r4
   d9ea4:	f7ff fea2 	bl	d9bec <rshift>
   d9ea8:	443d      	add	r5, r7
   d9eaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d9eae:	42ab      	cmp	r3, r5
   d9eb0:	da4f      	bge.n	d9f52 <__gethex+0x296>
   d9eb2:	ee18 0a10 	vmov	r0, s16
   d9eb6:	4621      	mov	r1, r4
   d9eb8:	f000 fa3c 	bl	da334 <_Bfree>
   d9ebc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9ebe:	2300      	movs	r3, #0
   d9ec0:	6013      	str	r3, [r2, #0]
   d9ec2:	27a3      	movs	r7, #163	; 0xa3
   d9ec4:	e78f      	b.n	d9de6 <__gethex+0x12a>
   d9ec6:	3101      	adds	r1, #1
   d9ec8:	105b      	asrs	r3, r3, #1
   d9eca:	e7a7      	b.n	d9e1c <__gethex+0x160>
   d9ecc:	1e73      	subs	r3, r6, #1
   d9ece:	9a05      	ldr	r2, [sp, #20]
   d9ed0:	9303      	str	r3, [sp, #12]
   d9ed2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d9ed6:	4293      	cmp	r3, r2
   d9ed8:	d019      	beq.n	d9f0e <__gethex+0x252>
   d9eda:	f1bb 0f20 	cmp.w	fp, #32
   d9ede:	d107      	bne.n	d9ef0 <__gethex+0x234>
   d9ee0:	9b02      	ldr	r3, [sp, #8]
   d9ee2:	9a00      	ldr	r2, [sp, #0]
   d9ee4:	f843 2b04 	str.w	r2, [r3], #4
   d9ee8:	9302      	str	r3, [sp, #8]
   d9eea:	2300      	movs	r3, #0
   d9eec:	9300      	str	r3, [sp, #0]
   d9eee:	469b      	mov	fp, r3
   d9ef0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d9ef4:	f7ff fecc 	bl	d9c90 <__hexdig_fun>
   d9ef8:	9b00      	ldr	r3, [sp, #0]
   d9efa:	f000 000f 	and.w	r0, r0, #15
   d9efe:	fa00 f00b 	lsl.w	r0, r0, fp
   d9f02:	4303      	orrs	r3, r0
   d9f04:	9300      	str	r3, [sp, #0]
   d9f06:	f10b 0b04 	add.w	fp, fp, #4
   d9f0a:	9b03      	ldr	r3, [sp, #12]
   d9f0c:	e00d      	b.n	d9f2a <__gethex+0x26e>
   d9f0e:	9b03      	ldr	r3, [sp, #12]
   d9f10:	9a06      	ldr	r2, [sp, #24]
   d9f12:	4413      	add	r3, r2
   d9f14:	42bb      	cmp	r3, r7
   d9f16:	d3e0      	bcc.n	d9eda <__gethex+0x21e>
   d9f18:	4618      	mov	r0, r3
   d9f1a:	9901      	ldr	r1, [sp, #4]
   d9f1c:	9307      	str	r3, [sp, #28]
   d9f1e:	4652      	mov	r2, sl
   d9f20:	f7fe ff89 	bl	d8e36 <strncmp>
   d9f24:	9b07      	ldr	r3, [sp, #28]
   d9f26:	2800      	cmp	r0, #0
   d9f28:	d1d7      	bne.n	d9eda <__gethex+0x21e>
   d9f2a:	461e      	mov	r6, r3
   d9f2c:	e788      	b.n	d9e40 <__gethex+0x184>
   d9f2e:	f04f 0a03 	mov.w	sl, #3
   d9f32:	e7b5      	b.n	d9ea0 <__gethex+0x1e4>
   d9f34:	da0a      	bge.n	d9f4c <__gethex+0x290>
   d9f36:	1a37      	subs	r7, r6, r0
   d9f38:	4621      	mov	r1, r4
   d9f3a:	ee18 0a10 	vmov	r0, s16
   d9f3e:	463a      	mov	r2, r7
   d9f40:	f000 fbce 	bl	da6e0 <__lshift>
   d9f44:	1bed      	subs	r5, r5, r7
   d9f46:	4604      	mov	r4, r0
   d9f48:	f100 0914 	add.w	r9, r0, #20
   d9f4c:	f04f 0a00 	mov.w	sl, #0
   d9f50:	e7ab      	b.n	d9eaa <__gethex+0x1ee>
   d9f52:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d9f56:	42a8      	cmp	r0, r5
   d9f58:	dd6d      	ble.n	da036 <__gethex+0x37a>
   d9f5a:	1b45      	subs	r5, r0, r5
   d9f5c:	42ae      	cmp	r6, r5
   d9f5e:	dc31      	bgt.n	d9fc4 <__gethex+0x308>
   d9f60:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d9f64:	2b02      	cmp	r3, #2
   d9f66:	d023      	beq.n	d9fb0 <__gethex+0x2f4>
   d9f68:	2b03      	cmp	r3, #3
   d9f6a:	d025      	beq.n	d9fb8 <__gethex+0x2fc>
   d9f6c:	2b01      	cmp	r3, #1
   d9f6e:	d115      	bne.n	d9f9c <__gethex+0x2e0>
   d9f70:	42ae      	cmp	r6, r5
   d9f72:	d113      	bne.n	d9f9c <__gethex+0x2e0>
   d9f74:	2e01      	cmp	r6, #1
   d9f76:	d10b      	bne.n	d9f90 <__gethex+0x2d4>
   d9f78:	9a04      	ldr	r2, [sp, #16]
   d9f7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d9f7e:	6013      	str	r3, [r2, #0]
   d9f80:	2301      	movs	r3, #1
   d9f82:	6123      	str	r3, [r4, #16]
   d9f84:	f8c9 3000 	str.w	r3, [r9]
   d9f88:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d9f8a:	2762      	movs	r7, #98	; 0x62
   d9f8c:	601c      	str	r4, [r3, #0]
   d9f8e:	e72a      	b.n	d9de6 <__gethex+0x12a>
   d9f90:	1e71      	subs	r1, r6, #1
   d9f92:	4620      	mov	r0, r4
   d9f94:	f000 fdb8 	bl	dab08 <__any_on>
   d9f98:	2800      	cmp	r0, #0
   d9f9a:	d1ed      	bne.n	d9f78 <__gethex+0x2bc>
   d9f9c:	ee18 0a10 	vmov	r0, s16
   d9fa0:	4621      	mov	r1, r4
   d9fa2:	f000 f9c7 	bl	da334 <_Bfree>
   d9fa6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9fa8:	2300      	movs	r3, #0
   d9faa:	6013      	str	r3, [r2, #0]
   d9fac:	2750      	movs	r7, #80	; 0x50
   d9fae:	e71a      	b.n	d9de6 <__gethex+0x12a>
   d9fb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9fb2:	2b00      	cmp	r3, #0
   d9fb4:	d1f2      	bne.n	d9f9c <__gethex+0x2e0>
   d9fb6:	e7df      	b.n	d9f78 <__gethex+0x2bc>
   d9fb8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9fba:	2b00      	cmp	r3, #0
   d9fbc:	d1dc      	bne.n	d9f78 <__gethex+0x2bc>
   d9fbe:	e7ed      	b.n	d9f9c <__gethex+0x2e0>
   d9fc0:	000db5fc 	.word	0x000db5fc
   d9fc4:	1e6f      	subs	r7, r5, #1
   d9fc6:	f1ba 0f00 	cmp.w	sl, #0
   d9fca:	d131      	bne.n	da030 <__gethex+0x374>
   d9fcc:	b127      	cbz	r7, d9fd8 <__gethex+0x31c>
   d9fce:	4639      	mov	r1, r7
   d9fd0:	4620      	mov	r0, r4
   d9fd2:	f000 fd99 	bl	dab08 <__any_on>
   d9fd6:	4682      	mov	sl, r0
   d9fd8:	117b      	asrs	r3, r7, #5
   d9fda:	2101      	movs	r1, #1
   d9fdc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   d9fe0:	f007 071f 	and.w	r7, r7, #31
   d9fe4:	fa01 f707 	lsl.w	r7, r1, r7
   d9fe8:	421f      	tst	r7, r3
   d9fea:	4629      	mov	r1, r5
   d9fec:	4620      	mov	r0, r4
   d9fee:	bf18      	it	ne
   d9ff0:	f04a 0a02 	orrne.w	sl, sl, #2
   d9ff4:	1b76      	subs	r6, r6, r5
   d9ff6:	f7ff fdf9 	bl	d9bec <rshift>
   d9ffa:	f8d8 5004 	ldr.w	r5, [r8, #4]
   d9ffe:	2702      	movs	r7, #2
   da000:	f1ba 0f00 	cmp.w	sl, #0
   da004:	d048      	beq.n	da098 <__gethex+0x3dc>
   da006:	f8d8 300c 	ldr.w	r3, [r8, #12]
   da00a:	2b02      	cmp	r3, #2
   da00c:	d015      	beq.n	da03a <__gethex+0x37e>
   da00e:	2b03      	cmp	r3, #3
   da010:	d017      	beq.n	da042 <__gethex+0x386>
   da012:	2b01      	cmp	r3, #1
   da014:	d109      	bne.n	da02a <__gethex+0x36e>
   da016:	f01a 0f02 	tst.w	sl, #2
   da01a:	d006      	beq.n	da02a <__gethex+0x36e>
   da01c:	f8d9 0000 	ldr.w	r0, [r9]
   da020:	ea4a 0a00 	orr.w	sl, sl, r0
   da024:	f01a 0f01 	tst.w	sl, #1
   da028:	d10e      	bne.n	da048 <__gethex+0x38c>
   da02a:	f047 0710 	orr.w	r7, r7, #16
   da02e:	e033      	b.n	da098 <__gethex+0x3dc>
   da030:	f04f 0a01 	mov.w	sl, #1
   da034:	e7d0      	b.n	d9fd8 <__gethex+0x31c>
   da036:	2701      	movs	r7, #1
   da038:	e7e2      	b.n	da000 <__gethex+0x344>
   da03a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da03c:	f1c3 0301 	rsb	r3, r3, #1
   da040:	9315      	str	r3, [sp, #84]	; 0x54
   da042:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da044:	2b00      	cmp	r3, #0
   da046:	d0f0      	beq.n	da02a <__gethex+0x36e>
   da048:	f8d4 9010 	ldr.w	r9, [r4, #16]
   da04c:	f104 0314 	add.w	r3, r4, #20
   da050:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   da054:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   da058:	f04f 0c00 	mov.w	ip, #0
   da05c:	4618      	mov	r0, r3
   da05e:	f853 2b04 	ldr.w	r2, [r3], #4
   da062:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   da066:	d01c      	beq.n	da0a2 <__gethex+0x3e6>
   da068:	3201      	adds	r2, #1
   da06a:	6002      	str	r2, [r0, #0]
   da06c:	2f02      	cmp	r7, #2
   da06e:	f104 0314 	add.w	r3, r4, #20
   da072:	d13a      	bne.n	da0ea <__gethex+0x42e>
   da074:	f8d8 2000 	ldr.w	r2, [r8]
   da078:	3a01      	subs	r2, #1
   da07a:	42b2      	cmp	r2, r6
   da07c:	d10a      	bne.n	da094 <__gethex+0x3d8>
   da07e:	1171      	asrs	r1, r6, #5
   da080:	2201      	movs	r2, #1
   da082:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   da086:	f006 061f 	and.w	r6, r6, #31
   da08a:	fa02 f606 	lsl.w	r6, r2, r6
   da08e:	421e      	tst	r6, r3
   da090:	bf18      	it	ne
   da092:	4617      	movne	r7, r2
   da094:	f047 0720 	orr.w	r7, r7, #32
   da098:	9b14      	ldr	r3, [sp, #80]	; 0x50
   da09a:	601c      	str	r4, [r3, #0]
   da09c:	9b04      	ldr	r3, [sp, #16]
   da09e:	601d      	str	r5, [r3, #0]
   da0a0:	e6a1      	b.n	d9de6 <__gethex+0x12a>
   da0a2:	4299      	cmp	r1, r3
   da0a4:	f843 cc04 	str.w	ip, [r3, #-4]
   da0a8:	d8d8      	bhi.n	da05c <__gethex+0x3a0>
   da0aa:	68a3      	ldr	r3, [r4, #8]
   da0ac:	4599      	cmp	r9, r3
   da0ae:	db14      	blt.n	da0da <__gethex+0x41e>
   da0b0:	6861      	ldr	r1, [r4, #4]
   da0b2:	ee18 0a10 	vmov	r0, s16
   da0b6:	3101      	adds	r1, #1
   da0b8:	f000 f908 	bl	da2cc <_Balloc>
   da0bc:	6922      	ldr	r2, [r4, #16]
   da0be:	3202      	adds	r2, #2
   da0c0:	f104 010c 	add.w	r1, r4, #12
   da0c4:	4682      	mov	sl, r0
   da0c6:	0092      	lsls	r2, r2, #2
   da0c8:	300c      	adds	r0, #12
   da0ca:	f7fe fe29 	bl	d8d20 <memcpy>
   da0ce:	4621      	mov	r1, r4
   da0d0:	ee18 0a10 	vmov	r0, s16
   da0d4:	f000 f92e 	bl	da334 <_Bfree>
   da0d8:	4654      	mov	r4, sl
   da0da:	6923      	ldr	r3, [r4, #16]
   da0dc:	1c5a      	adds	r2, r3, #1
   da0de:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   da0e2:	6122      	str	r2, [r4, #16]
   da0e4:	2201      	movs	r2, #1
   da0e6:	615a      	str	r2, [r3, #20]
   da0e8:	e7c0      	b.n	da06c <__gethex+0x3b0>
   da0ea:	6922      	ldr	r2, [r4, #16]
   da0ec:	454a      	cmp	r2, r9
   da0ee:	dd0b      	ble.n	da108 <__gethex+0x44c>
   da0f0:	2101      	movs	r1, #1
   da0f2:	4620      	mov	r0, r4
   da0f4:	f7ff fd7a 	bl	d9bec <rshift>
   da0f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da0fc:	3501      	adds	r5, #1
   da0fe:	42ab      	cmp	r3, r5
   da100:	f6ff aed7 	blt.w	d9eb2 <__gethex+0x1f6>
   da104:	2701      	movs	r7, #1
   da106:	e7c5      	b.n	da094 <__gethex+0x3d8>
   da108:	f016 061f 	ands.w	r6, r6, #31
   da10c:	d0fa      	beq.n	da104 <__gethex+0x448>
   da10e:	449b      	add	fp, r3
   da110:	f1c6 0620 	rsb	r6, r6, #32
   da114:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   da118:	f000 f99f 	bl	da45a <__hi0bits>
   da11c:	42b0      	cmp	r0, r6
   da11e:	dbe7      	blt.n	da0f0 <__gethex+0x434>
   da120:	e7f0      	b.n	da104 <__gethex+0x448>
   da122:	bf00      	nop

000da124 <L_shift>:
   da124:	f1c2 0208 	rsb	r2, r2, #8
   da128:	0092      	lsls	r2, r2, #2
   da12a:	b570      	push	{r4, r5, r6, lr}
   da12c:	f1c2 0620 	rsb	r6, r2, #32
   da130:	6843      	ldr	r3, [r0, #4]
   da132:	6804      	ldr	r4, [r0, #0]
   da134:	fa03 f506 	lsl.w	r5, r3, r6
   da138:	432c      	orrs	r4, r5
   da13a:	40d3      	lsrs	r3, r2
   da13c:	6004      	str	r4, [r0, #0]
   da13e:	f840 3f04 	str.w	r3, [r0, #4]!
   da142:	4288      	cmp	r0, r1
   da144:	d3f4      	bcc.n	da130 <L_shift+0xc>
   da146:	bd70      	pop	{r4, r5, r6, pc}

000da148 <__match>:
   da148:	b530      	push	{r4, r5, lr}
   da14a:	6803      	ldr	r3, [r0, #0]
   da14c:	3301      	adds	r3, #1
   da14e:	f811 4b01 	ldrb.w	r4, [r1], #1
   da152:	b914      	cbnz	r4, da15a <__match+0x12>
   da154:	6003      	str	r3, [r0, #0]
   da156:	2001      	movs	r0, #1
   da158:	bd30      	pop	{r4, r5, pc}
   da15a:	f813 2b01 	ldrb.w	r2, [r3], #1
   da15e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   da162:	2d19      	cmp	r5, #25
   da164:	bf98      	it	ls
   da166:	3220      	addls	r2, #32
   da168:	42a2      	cmp	r2, r4
   da16a:	d0f0      	beq.n	da14e <__match+0x6>
   da16c:	2000      	movs	r0, #0
   da16e:	e7f3      	b.n	da158 <__match+0x10>

000da170 <__hexnan>:
   da170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da174:	680b      	ldr	r3, [r1, #0]
   da176:	6801      	ldr	r1, [r0, #0]
   da178:	115e      	asrs	r6, r3, #5
   da17a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   da17e:	f013 031f 	ands.w	r3, r3, #31
   da182:	b087      	sub	sp, #28
   da184:	bf18      	it	ne
   da186:	3604      	addne	r6, #4
   da188:	2500      	movs	r5, #0
   da18a:	1f37      	subs	r7, r6, #4
   da18c:	4682      	mov	sl, r0
   da18e:	4690      	mov	r8, r2
   da190:	9301      	str	r3, [sp, #4]
   da192:	f846 5c04 	str.w	r5, [r6, #-4]
   da196:	46b9      	mov	r9, r7
   da198:	463c      	mov	r4, r7
   da19a:	9502      	str	r5, [sp, #8]
   da19c:	46ab      	mov	fp, r5
   da19e:	784a      	ldrb	r2, [r1, #1]
   da1a0:	1c4b      	adds	r3, r1, #1
   da1a2:	9303      	str	r3, [sp, #12]
   da1a4:	b342      	cbz	r2, da1f8 <__hexnan+0x88>
   da1a6:	4610      	mov	r0, r2
   da1a8:	9105      	str	r1, [sp, #20]
   da1aa:	9204      	str	r2, [sp, #16]
   da1ac:	f7ff fd70 	bl	d9c90 <__hexdig_fun>
   da1b0:	2800      	cmp	r0, #0
   da1b2:	d14f      	bne.n	da254 <__hexnan+0xe4>
   da1b4:	9a04      	ldr	r2, [sp, #16]
   da1b6:	9905      	ldr	r1, [sp, #20]
   da1b8:	2a20      	cmp	r2, #32
   da1ba:	d818      	bhi.n	da1ee <__hexnan+0x7e>
   da1bc:	9b02      	ldr	r3, [sp, #8]
   da1be:	459b      	cmp	fp, r3
   da1c0:	dd13      	ble.n	da1ea <__hexnan+0x7a>
   da1c2:	454c      	cmp	r4, r9
   da1c4:	d206      	bcs.n	da1d4 <__hexnan+0x64>
   da1c6:	2d07      	cmp	r5, #7
   da1c8:	dc04      	bgt.n	da1d4 <__hexnan+0x64>
   da1ca:	462a      	mov	r2, r5
   da1cc:	4649      	mov	r1, r9
   da1ce:	4620      	mov	r0, r4
   da1d0:	f7ff ffa8 	bl	da124 <L_shift>
   da1d4:	4544      	cmp	r4, r8
   da1d6:	d950      	bls.n	da27a <__hexnan+0x10a>
   da1d8:	2300      	movs	r3, #0
   da1da:	f1a4 0904 	sub.w	r9, r4, #4
   da1de:	f844 3c04 	str.w	r3, [r4, #-4]
   da1e2:	f8cd b008 	str.w	fp, [sp, #8]
   da1e6:	464c      	mov	r4, r9
   da1e8:	461d      	mov	r5, r3
   da1ea:	9903      	ldr	r1, [sp, #12]
   da1ec:	e7d7      	b.n	da19e <__hexnan+0x2e>
   da1ee:	2a29      	cmp	r2, #41	; 0x29
   da1f0:	d156      	bne.n	da2a0 <__hexnan+0x130>
   da1f2:	3102      	adds	r1, #2
   da1f4:	f8ca 1000 	str.w	r1, [sl]
   da1f8:	f1bb 0f00 	cmp.w	fp, #0
   da1fc:	d050      	beq.n	da2a0 <__hexnan+0x130>
   da1fe:	454c      	cmp	r4, r9
   da200:	d206      	bcs.n	da210 <__hexnan+0xa0>
   da202:	2d07      	cmp	r5, #7
   da204:	dc04      	bgt.n	da210 <__hexnan+0xa0>
   da206:	462a      	mov	r2, r5
   da208:	4649      	mov	r1, r9
   da20a:	4620      	mov	r0, r4
   da20c:	f7ff ff8a 	bl	da124 <L_shift>
   da210:	4544      	cmp	r4, r8
   da212:	d934      	bls.n	da27e <__hexnan+0x10e>
   da214:	f1a8 0204 	sub.w	r2, r8, #4
   da218:	4623      	mov	r3, r4
   da21a:	f853 1b04 	ldr.w	r1, [r3], #4
   da21e:	f842 1f04 	str.w	r1, [r2, #4]!
   da222:	429f      	cmp	r7, r3
   da224:	d2f9      	bcs.n	da21a <__hexnan+0xaa>
   da226:	1b3b      	subs	r3, r7, r4
   da228:	f023 0303 	bic.w	r3, r3, #3
   da22c:	3304      	adds	r3, #4
   da22e:	3401      	adds	r4, #1
   da230:	3e03      	subs	r6, #3
   da232:	42b4      	cmp	r4, r6
   da234:	bf88      	it	hi
   da236:	2304      	movhi	r3, #4
   da238:	4443      	add	r3, r8
   da23a:	2200      	movs	r2, #0
   da23c:	f843 2b04 	str.w	r2, [r3], #4
   da240:	429f      	cmp	r7, r3
   da242:	d2fb      	bcs.n	da23c <__hexnan+0xcc>
   da244:	683b      	ldr	r3, [r7, #0]
   da246:	b91b      	cbnz	r3, da250 <__hexnan+0xe0>
   da248:	4547      	cmp	r7, r8
   da24a:	d127      	bne.n	da29c <__hexnan+0x12c>
   da24c:	2301      	movs	r3, #1
   da24e:	603b      	str	r3, [r7, #0]
   da250:	2005      	movs	r0, #5
   da252:	e026      	b.n	da2a2 <__hexnan+0x132>
   da254:	3501      	adds	r5, #1
   da256:	2d08      	cmp	r5, #8
   da258:	f10b 0b01 	add.w	fp, fp, #1
   da25c:	dd06      	ble.n	da26c <__hexnan+0xfc>
   da25e:	4544      	cmp	r4, r8
   da260:	d9c3      	bls.n	da1ea <__hexnan+0x7a>
   da262:	2300      	movs	r3, #0
   da264:	f844 3c04 	str.w	r3, [r4, #-4]
   da268:	2501      	movs	r5, #1
   da26a:	3c04      	subs	r4, #4
   da26c:	6822      	ldr	r2, [r4, #0]
   da26e:	f000 000f 	and.w	r0, r0, #15
   da272:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   da276:	6022      	str	r2, [r4, #0]
   da278:	e7b7      	b.n	da1ea <__hexnan+0x7a>
   da27a:	2508      	movs	r5, #8
   da27c:	e7b5      	b.n	da1ea <__hexnan+0x7a>
   da27e:	9b01      	ldr	r3, [sp, #4]
   da280:	2b00      	cmp	r3, #0
   da282:	d0df      	beq.n	da244 <__hexnan+0xd4>
   da284:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da288:	f1c3 0320 	rsb	r3, r3, #32
   da28c:	fa22 f303 	lsr.w	r3, r2, r3
   da290:	f856 2c04 	ldr.w	r2, [r6, #-4]
   da294:	401a      	ands	r2, r3
   da296:	f846 2c04 	str.w	r2, [r6, #-4]
   da29a:	e7d3      	b.n	da244 <__hexnan+0xd4>
   da29c:	3f04      	subs	r7, #4
   da29e:	e7d1      	b.n	da244 <__hexnan+0xd4>
   da2a0:	2004      	movs	r0, #4
   da2a2:	b007      	add	sp, #28
   da2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000da2a8 <__ascii_mbtowc>:
   da2a8:	b082      	sub	sp, #8
   da2aa:	b901      	cbnz	r1, da2ae <__ascii_mbtowc+0x6>
   da2ac:	a901      	add	r1, sp, #4
   da2ae:	b142      	cbz	r2, da2c2 <__ascii_mbtowc+0x1a>
   da2b0:	b14b      	cbz	r3, da2c6 <__ascii_mbtowc+0x1e>
   da2b2:	7813      	ldrb	r3, [r2, #0]
   da2b4:	600b      	str	r3, [r1, #0]
   da2b6:	7812      	ldrb	r2, [r2, #0]
   da2b8:	1e10      	subs	r0, r2, #0
   da2ba:	bf18      	it	ne
   da2bc:	2001      	movne	r0, #1
   da2be:	b002      	add	sp, #8
   da2c0:	4770      	bx	lr
   da2c2:	4610      	mov	r0, r2
   da2c4:	e7fb      	b.n	da2be <__ascii_mbtowc+0x16>
   da2c6:	f06f 0001 	mvn.w	r0, #1
   da2ca:	e7f8      	b.n	da2be <__ascii_mbtowc+0x16>

000da2cc <_Balloc>:
   da2cc:	b570      	push	{r4, r5, r6, lr}
   da2ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
   da2d0:	4604      	mov	r4, r0
   da2d2:	460d      	mov	r5, r1
   da2d4:	b93e      	cbnz	r6, da2e6 <_Balloc+0x1a>
   da2d6:	2010      	movs	r0, #16
   da2d8:	f7fc fb06 	bl	d68e8 <malloc>
   da2dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
   da2e0:	6260      	str	r0, [r4, #36]	; 0x24
   da2e2:	6006      	str	r6, [r0, #0]
   da2e4:	60c6      	str	r6, [r0, #12]
   da2e6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   da2e8:	68f3      	ldr	r3, [r6, #12]
   da2ea:	b183      	cbz	r3, da30e <_Balloc+0x42>
   da2ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da2ee:	68db      	ldr	r3, [r3, #12]
   da2f0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   da2f4:	b9b8      	cbnz	r0, da326 <_Balloc+0x5a>
   da2f6:	2101      	movs	r1, #1
   da2f8:	fa01 f605 	lsl.w	r6, r1, r5
   da2fc:	1d72      	adds	r2, r6, #5
   da2fe:	0092      	lsls	r2, r2, #2
   da300:	4620      	mov	r0, r4
   da302:	f000 fc22 	bl	dab4a <_calloc_r>
   da306:	b160      	cbz	r0, da322 <_Balloc+0x56>
   da308:	e9c0 5601 	strd	r5, r6, [r0, #4]
   da30c:	e00e      	b.n	da32c <_Balloc+0x60>
   da30e:	2221      	movs	r2, #33	; 0x21
   da310:	2104      	movs	r1, #4
   da312:	4620      	mov	r0, r4
   da314:	f000 fc19 	bl	dab4a <_calloc_r>
   da318:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da31a:	60f0      	str	r0, [r6, #12]
   da31c:	68db      	ldr	r3, [r3, #12]
   da31e:	2b00      	cmp	r3, #0
   da320:	d1e4      	bne.n	da2ec <_Balloc+0x20>
   da322:	2000      	movs	r0, #0
   da324:	bd70      	pop	{r4, r5, r6, pc}
   da326:	6802      	ldr	r2, [r0, #0]
   da328:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   da32c:	2300      	movs	r3, #0
   da32e:	e9c0 3303 	strd	r3, r3, [r0, #12]
   da332:	e7f7      	b.n	da324 <_Balloc+0x58>

000da334 <_Bfree>:
   da334:	b570      	push	{r4, r5, r6, lr}
   da336:	6a46      	ldr	r6, [r0, #36]	; 0x24
   da338:	4605      	mov	r5, r0
   da33a:	460c      	mov	r4, r1
   da33c:	b93e      	cbnz	r6, da34e <_Bfree+0x1a>
   da33e:	2010      	movs	r0, #16
   da340:	f7fc fad2 	bl	d68e8 <malloc>
   da344:	e9c0 6601 	strd	r6, r6, [r0, #4]
   da348:	6268      	str	r0, [r5, #36]	; 0x24
   da34a:	6006      	str	r6, [r0, #0]
   da34c:	60c6      	str	r6, [r0, #12]
   da34e:	b13c      	cbz	r4, da360 <_Bfree+0x2c>
   da350:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   da352:	6862      	ldr	r2, [r4, #4]
   da354:	68db      	ldr	r3, [r3, #12]
   da356:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   da35a:	6021      	str	r1, [r4, #0]
   da35c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   da360:	bd70      	pop	{r4, r5, r6, pc}

000da362 <__multadd>:
   da362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   da366:	690e      	ldr	r6, [r1, #16]
   da368:	4607      	mov	r7, r0
   da36a:	4698      	mov	r8, r3
   da36c:	460c      	mov	r4, r1
   da36e:	f101 0014 	add.w	r0, r1, #20
   da372:	2300      	movs	r3, #0
   da374:	6805      	ldr	r5, [r0, #0]
   da376:	b2a9      	uxth	r1, r5
   da378:	fb02 8101 	mla	r1, r2, r1, r8
   da37c:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   da380:	0c2d      	lsrs	r5, r5, #16
   da382:	fb02 c505 	mla	r5, r2, r5, ip
   da386:	b289      	uxth	r1, r1
   da388:	3301      	adds	r3, #1
   da38a:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   da38e:	429e      	cmp	r6, r3
   da390:	f840 1b04 	str.w	r1, [r0], #4
   da394:	ea4f 4815 	mov.w	r8, r5, lsr #16
   da398:	dcec      	bgt.n	da374 <__multadd+0x12>
   da39a:	f1b8 0f00 	cmp.w	r8, #0
   da39e:	d01b      	beq.n	da3d8 <__multadd+0x76>
   da3a0:	68a3      	ldr	r3, [r4, #8]
   da3a2:	42b3      	cmp	r3, r6
   da3a4:	dc12      	bgt.n	da3cc <__multadd+0x6a>
   da3a6:	6861      	ldr	r1, [r4, #4]
   da3a8:	4638      	mov	r0, r7
   da3aa:	3101      	adds	r1, #1
   da3ac:	f7ff ff8e 	bl	da2cc <_Balloc>
   da3b0:	6922      	ldr	r2, [r4, #16]
   da3b2:	3202      	adds	r2, #2
   da3b4:	f104 010c 	add.w	r1, r4, #12
   da3b8:	4605      	mov	r5, r0
   da3ba:	0092      	lsls	r2, r2, #2
   da3bc:	300c      	adds	r0, #12
   da3be:	f7fe fcaf 	bl	d8d20 <memcpy>
   da3c2:	4621      	mov	r1, r4
   da3c4:	4638      	mov	r0, r7
   da3c6:	f7ff ffb5 	bl	da334 <_Bfree>
   da3ca:	462c      	mov	r4, r5
   da3cc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   da3d0:	3601      	adds	r6, #1
   da3d2:	f8c3 8014 	str.w	r8, [r3, #20]
   da3d6:	6126      	str	r6, [r4, #16]
   da3d8:	4620      	mov	r0, r4
   da3da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000da3de <__s2b>:
   da3de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da3e2:	460c      	mov	r4, r1
   da3e4:	4615      	mov	r5, r2
   da3e6:	461f      	mov	r7, r3
   da3e8:	2209      	movs	r2, #9
   da3ea:	3308      	adds	r3, #8
   da3ec:	4606      	mov	r6, r0
   da3ee:	fb93 f3f2 	sdiv	r3, r3, r2
   da3f2:	2100      	movs	r1, #0
   da3f4:	2201      	movs	r2, #1
   da3f6:	429a      	cmp	r2, r3
   da3f8:	db20      	blt.n	da43c <__s2b+0x5e>
   da3fa:	4630      	mov	r0, r6
   da3fc:	f7ff ff66 	bl	da2cc <_Balloc>
   da400:	9b08      	ldr	r3, [sp, #32]
   da402:	6143      	str	r3, [r0, #20]
   da404:	2d09      	cmp	r5, #9
   da406:	f04f 0301 	mov.w	r3, #1
   da40a:	6103      	str	r3, [r0, #16]
   da40c:	dd19      	ble.n	da442 <__s2b+0x64>
   da40e:	f104 0909 	add.w	r9, r4, #9
   da412:	46c8      	mov	r8, r9
   da414:	442c      	add	r4, r5
   da416:	f818 3b01 	ldrb.w	r3, [r8], #1
   da41a:	4601      	mov	r1, r0
   da41c:	3b30      	subs	r3, #48	; 0x30
   da41e:	220a      	movs	r2, #10
   da420:	4630      	mov	r0, r6
   da422:	f7ff ff9e 	bl	da362 <__multadd>
   da426:	45a0      	cmp	r8, r4
   da428:	d1f5      	bne.n	da416 <__s2b+0x38>
   da42a:	f1a5 0408 	sub.w	r4, r5, #8
   da42e:	444c      	add	r4, r9
   da430:	1b2d      	subs	r5, r5, r4
   da432:	1963      	adds	r3, r4, r5
   da434:	42bb      	cmp	r3, r7
   da436:	db07      	blt.n	da448 <__s2b+0x6a>
   da438:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da43c:	0052      	lsls	r2, r2, #1
   da43e:	3101      	adds	r1, #1
   da440:	e7d9      	b.n	da3f6 <__s2b+0x18>
   da442:	340a      	adds	r4, #10
   da444:	2509      	movs	r5, #9
   da446:	e7f3      	b.n	da430 <__s2b+0x52>
   da448:	f814 3b01 	ldrb.w	r3, [r4], #1
   da44c:	4601      	mov	r1, r0
   da44e:	3b30      	subs	r3, #48	; 0x30
   da450:	220a      	movs	r2, #10
   da452:	4630      	mov	r0, r6
   da454:	f7ff ff85 	bl	da362 <__multadd>
   da458:	e7eb      	b.n	da432 <__s2b+0x54>

000da45a <__hi0bits>:
   da45a:	0c03      	lsrs	r3, r0, #16
   da45c:	041b      	lsls	r3, r3, #16
   da45e:	b9d3      	cbnz	r3, da496 <__hi0bits+0x3c>
   da460:	0400      	lsls	r0, r0, #16
   da462:	2310      	movs	r3, #16
   da464:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   da468:	bf04      	itt	eq
   da46a:	0200      	lsleq	r0, r0, #8
   da46c:	3308      	addeq	r3, #8
   da46e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   da472:	bf04      	itt	eq
   da474:	0100      	lsleq	r0, r0, #4
   da476:	3304      	addeq	r3, #4
   da478:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   da47c:	bf04      	itt	eq
   da47e:	0080      	lsleq	r0, r0, #2
   da480:	3302      	addeq	r3, #2
   da482:	2800      	cmp	r0, #0
   da484:	db05      	blt.n	da492 <__hi0bits+0x38>
   da486:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   da48a:	f103 0301 	add.w	r3, r3, #1
   da48e:	bf08      	it	eq
   da490:	2320      	moveq	r3, #32
   da492:	4618      	mov	r0, r3
   da494:	4770      	bx	lr
   da496:	2300      	movs	r3, #0
   da498:	e7e4      	b.n	da464 <__hi0bits+0xa>

000da49a <__lo0bits>:
   da49a:	6803      	ldr	r3, [r0, #0]
   da49c:	f013 0207 	ands.w	r2, r3, #7
   da4a0:	4601      	mov	r1, r0
   da4a2:	d00b      	beq.n	da4bc <__lo0bits+0x22>
   da4a4:	07da      	lsls	r2, r3, #31
   da4a6:	d424      	bmi.n	da4f2 <__lo0bits+0x58>
   da4a8:	0798      	lsls	r0, r3, #30
   da4aa:	bf49      	itett	mi
   da4ac:	085b      	lsrmi	r3, r3, #1
   da4ae:	089b      	lsrpl	r3, r3, #2
   da4b0:	2001      	movmi	r0, #1
   da4b2:	600b      	strmi	r3, [r1, #0]
   da4b4:	bf5c      	itt	pl
   da4b6:	600b      	strpl	r3, [r1, #0]
   da4b8:	2002      	movpl	r0, #2
   da4ba:	4770      	bx	lr
   da4bc:	b298      	uxth	r0, r3
   da4be:	b9b0      	cbnz	r0, da4ee <__lo0bits+0x54>
   da4c0:	0c1b      	lsrs	r3, r3, #16
   da4c2:	2010      	movs	r0, #16
   da4c4:	f013 0fff 	tst.w	r3, #255	; 0xff
   da4c8:	bf04      	itt	eq
   da4ca:	0a1b      	lsreq	r3, r3, #8
   da4cc:	3008      	addeq	r0, #8
   da4ce:	071a      	lsls	r2, r3, #28
   da4d0:	bf04      	itt	eq
   da4d2:	091b      	lsreq	r3, r3, #4
   da4d4:	3004      	addeq	r0, #4
   da4d6:	079a      	lsls	r2, r3, #30
   da4d8:	bf04      	itt	eq
   da4da:	089b      	lsreq	r3, r3, #2
   da4dc:	3002      	addeq	r0, #2
   da4de:	07da      	lsls	r2, r3, #31
   da4e0:	d403      	bmi.n	da4ea <__lo0bits+0x50>
   da4e2:	085b      	lsrs	r3, r3, #1
   da4e4:	f100 0001 	add.w	r0, r0, #1
   da4e8:	d005      	beq.n	da4f6 <__lo0bits+0x5c>
   da4ea:	600b      	str	r3, [r1, #0]
   da4ec:	4770      	bx	lr
   da4ee:	4610      	mov	r0, r2
   da4f0:	e7e8      	b.n	da4c4 <__lo0bits+0x2a>
   da4f2:	2000      	movs	r0, #0
   da4f4:	4770      	bx	lr
   da4f6:	2020      	movs	r0, #32
   da4f8:	4770      	bx	lr

000da4fa <__i2b>:
   da4fa:	b510      	push	{r4, lr}
   da4fc:	460c      	mov	r4, r1
   da4fe:	2101      	movs	r1, #1
   da500:	f7ff fee4 	bl	da2cc <_Balloc>
   da504:	2201      	movs	r2, #1
   da506:	6144      	str	r4, [r0, #20]
   da508:	6102      	str	r2, [r0, #16]
   da50a:	bd10      	pop	{r4, pc}

000da50c <__multiply>:
   da50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da510:	4615      	mov	r5, r2
   da512:	690a      	ldr	r2, [r1, #16]
   da514:	692b      	ldr	r3, [r5, #16]
   da516:	429a      	cmp	r2, r3
   da518:	bfb8      	it	lt
   da51a:	460b      	movlt	r3, r1
   da51c:	460c      	mov	r4, r1
   da51e:	bfbc      	itt	lt
   da520:	462c      	movlt	r4, r5
   da522:	461d      	movlt	r5, r3
   da524:	6927      	ldr	r7, [r4, #16]
   da526:	f8d5 9010 	ldr.w	r9, [r5, #16]
   da52a:	68a3      	ldr	r3, [r4, #8]
   da52c:	6861      	ldr	r1, [r4, #4]
   da52e:	eb07 0609 	add.w	r6, r7, r9
   da532:	42b3      	cmp	r3, r6
   da534:	bfb8      	it	lt
   da536:	3101      	addlt	r1, #1
   da538:	b085      	sub	sp, #20
   da53a:	f7ff fec7 	bl	da2cc <_Balloc>
   da53e:	f100 0114 	add.w	r1, r0, #20
   da542:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   da546:	460b      	mov	r3, r1
   da548:	2200      	movs	r2, #0
   da54a:	4543      	cmp	r3, r8
   da54c:	d31d      	bcc.n	da58a <__multiply+0x7e>
   da54e:	f104 0314 	add.w	r3, r4, #20
   da552:	f105 0214 	add.w	r2, r5, #20
   da556:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   da55a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   da55e:	9302      	str	r3, [sp, #8]
   da560:	1b3b      	subs	r3, r7, r4
   da562:	3b15      	subs	r3, #21
   da564:	f023 0303 	bic.w	r3, r3, #3
   da568:	3304      	adds	r3, #4
   da56a:	f104 0515 	add.w	r5, r4, #21
   da56e:	42af      	cmp	r7, r5
   da570:	bf38      	it	cc
   da572:	2304      	movcc	r3, #4
   da574:	9301      	str	r3, [sp, #4]
   da576:	9b02      	ldr	r3, [sp, #8]
   da578:	9203      	str	r2, [sp, #12]
   da57a:	4293      	cmp	r3, r2
   da57c:	d808      	bhi.n	da590 <__multiply+0x84>
   da57e:	2e00      	cmp	r6, #0
   da580:	dc5a      	bgt.n	da638 <__multiply+0x12c>
   da582:	6106      	str	r6, [r0, #16]
   da584:	b005      	add	sp, #20
   da586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da58a:	f843 2b04 	str.w	r2, [r3], #4
   da58e:	e7dc      	b.n	da54a <__multiply+0x3e>
   da590:	f8b2 a000 	ldrh.w	sl, [r2]
   da594:	f1ba 0f00 	cmp.w	sl, #0
   da598:	d024      	beq.n	da5e4 <__multiply+0xd8>
   da59a:	f104 0e14 	add.w	lr, r4, #20
   da59e:	4689      	mov	r9, r1
   da5a0:	f04f 0c00 	mov.w	ip, #0
   da5a4:	f85e 5b04 	ldr.w	r5, [lr], #4
   da5a8:	f8d9 b000 	ldr.w	fp, [r9]
   da5ac:	b2ab      	uxth	r3, r5
   da5ae:	fa1f fb8b 	uxth.w	fp, fp
   da5b2:	fb0a b303 	mla	r3, sl, r3, fp
   da5b6:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   da5ba:	f8d9 5000 	ldr.w	r5, [r9]
   da5be:	4463      	add	r3, ip
   da5c0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   da5c4:	fb0a c50b 	mla	r5, sl, fp, ip
   da5c8:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   da5cc:	b29b      	uxth	r3, r3
   da5ce:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   da5d2:	4577      	cmp	r7, lr
   da5d4:	f849 3b04 	str.w	r3, [r9], #4
   da5d8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   da5dc:	d8e2      	bhi.n	da5a4 <__multiply+0x98>
   da5de:	9b01      	ldr	r3, [sp, #4]
   da5e0:	f841 c003 	str.w	ip, [r1, r3]
   da5e4:	9b03      	ldr	r3, [sp, #12]
   da5e6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   da5ea:	3204      	adds	r2, #4
   da5ec:	f1b9 0f00 	cmp.w	r9, #0
   da5f0:	d020      	beq.n	da634 <__multiply+0x128>
   da5f2:	680b      	ldr	r3, [r1, #0]
   da5f4:	f104 0c14 	add.w	ip, r4, #20
   da5f8:	468e      	mov	lr, r1
   da5fa:	f04f 0a00 	mov.w	sl, #0
   da5fe:	f8bc 5000 	ldrh.w	r5, [ip]
   da602:	f8be b002 	ldrh.w	fp, [lr, #2]
   da606:	fb09 b505 	mla	r5, r9, r5, fp
   da60a:	44aa      	add	sl, r5
   da60c:	b29b      	uxth	r3, r3
   da60e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   da612:	f84e 3b04 	str.w	r3, [lr], #4
   da616:	f85c 3b04 	ldr.w	r3, [ip], #4
   da61a:	f8be 5000 	ldrh.w	r5, [lr]
   da61e:	0c1b      	lsrs	r3, r3, #16
   da620:	fb09 5303 	mla	r3, r9, r3, r5
   da624:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   da628:	4567      	cmp	r7, ip
   da62a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   da62e:	d8e6      	bhi.n	da5fe <__multiply+0xf2>
   da630:	9d01      	ldr	r5, [sp, #4]
   da632:	514b      	str	r3, [r1, r5]
   da634:	3104      	adds	r1, #4
   da636:	e79e      	b.n	da576 <__multiply+0x6a>
   da638:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   da63c:	2b00      	cmp	r3, #0
   da63e:	d1a0      	bne.n	da582 <__multiply+0x76>
   da640:	3e01      	subs	r6, #1
   da642:	e79c      	b.n	da57e <__multiply+0x72>

000da644 <__pow5mult>:
   da644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   da648:	4615      	mov	r5, r2
   da64a:	f012 0203 	ands.w	r2, r2, #3
   da64e:	4606      	mov	r6, r0
   da650:	460f      	mov	r7, r1
   da652:	d007      	beq.n	da664 <__pow5mult+0x20>
   da654:	4c21      	ldr	r4, [pc, #132]	; (da6dc <__pow5mult+0x98>)
   da656:	3a01      	subs	r2, #1
   da658:	2300      	movs	r3, #0
   da65a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   da65e:	f7ff fe80 	bl	da362 <__multadd>
   da662:	4607      	mov	r7, r0
   da664:	10ad      	asrs	r5, r5, #2
   da666:	d035      	beq.n	da6d4 <__pow5mult+0x90>
   da668:	6a74      	ldr	r4, [r6, #36]	; 0x24
   da66a:	b93c      	cbnz	r4, da67c <__pow5mult+0x38>
   da66c:	2010      	movs	r0, #16
   da66e:	f7fc f93b 	bl	d68e8 <malloc>
   da672:	e9c0 4401 	strd	r4, r4, [r0, #4]
   da676:	6270      	str	r0, [r6, #36]	; 0x24
   da678:	6004      	str	r4, [r0, #0]
   da67a:	60c4      	str	r4, [r0, #12]
   da67c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   da680:	f8d8 4008 	ldr.w	r4, [r8, #8]
   da684:	b94c      	cbnz	r4, da69a <__pow5mult+0x56>
   da686:	f240 2171 	movw	r1, #625	; 0x271
   da68a:	4630      	mov	r0, r6
   da68c:	f7ff ff35 	bl	da4fa <__i2b>
   da690:	2300      	movs	r3, #0
   da692:	f8c8 0008 	str.w	r0, [r8, #8]
   da696:	4604      	mov	r4, r0
   da698:	6003      	str	r3, [r0, #0]
   da69a:	f04f 0900 	mov.w	r9, #0
   da69e:	07eb      	lsls	r3, r5, #31
   da6a0:	d50a      	bpl.n	da6b8 <__pow5mult+0x74>
   da6a2:	4639      	mov	r1, r7
   da6a4:	4622      	mov	r2, r4
   da6a6:	4630      	mov	r0, r6
   da6a8:	f7ff ff30 	bl	da50c <__multiply>
   da6ac:	4639      	mov	r1, r7
   da6ae:	4680      	mov	r8, r0
   da6b0:	4630      	mov	r0, r6
   da6b2:	f7ff fe3f 	bl	da334 <_Bfree>
   da6b6:	4647      	mov	r7, r8
   da6b8:	106d      	asrs	r5, r5, #1
   da6ba:	d00b      	beq.n	da6d4 <__pow5mult+0x90>
   da6bc:	6820      	ldr	r0, [r4, #0]
   da6be:	b938      	cbnz	r0, da6d0 <__pow5mult+0x8c>
   da6c0:	4622      	mov	r2, r4
   da6c2:	4621      	mov	r1, r4
   da6c4:	4630      	mov	r0, r6
   da6c6:	f7ff ff21 	bl	da50c <__multiply>
   da6ca:	6020      	str	r0, [r4, #0]
   da6cc:	f8c0 9000 	str.w	r9, [r0]
   da6d0:	4604      	mov	r4, r0
   da6d2:	e7e4      	b.n	da69e <__pow5mult+0x5a>
   da6d4:	4638      	mov	r0, r7
   da6d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   da6da:	bf00      	nop
   da6dc:	000db700 	.word	0x000db700

000da6e0 <__lshift>:
   da6e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da6e4:	460c      	mov	r4, r1
   da6e6:	6849      	ldr	r1, [r1, #4]
   da6e8:	6923      	ldr	r3, [r4, #16]
   da6ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
   da6ee:	68a3      	ldr	r3, [r4, #8]
   da6f0:	4607      	mov	r7, r0
   da6f2:	4691      	mov	r9, r2
   da6f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
   da6f8:	f108 0601 	add.w	r6, r8, #1
   da6fc:	42b3      	cmp	r3, r6
   da6fe:	db3f      	blt.n	da780 <__lshift+0xa0>
   da700:	4638      	mov	r0, r7
   da702:	f7ff fde3 	bl	da2cc <_Balloc>
   da706:	2300      	movs	r3, #0
   da708:	4605      	mov	r5, r0
   da70a:	f100 0114 	add.w	r1, r0, #20
   da70e:	f100 0210 	add.w	r2, r0, #16
   da712:	4618      	mov	r0, r3
   da714:	4553      	cmp	r3, sl
   da716:	db36      	blt.n	da786 <__lshift+0xa6>
   da718:	6920      	ldr	r0, [r4, #16]
   da71a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   da71e:	f104 0314 	add.w	r3, r4, #20
   da722:	f019 091f 	ands.w	r9, r9, #31
   da726:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   da72a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   da72e:	d02e      	beq.n	da78e <__lshift+0xae>
   da730:	f1c9 0e20 	rsb	lr, r9, #32
   da734:	468a      	mov	sl, r1
   da736:	2200      	movs	r2, #0
   da738:	6818      	ldr	r0, [r3, #0]
   da73a:	fa00 f009 	lsl.w	r0, r0, r9
   da73e:	4302      	orrs	r2, r0
   da740:	f84a 2b04 	str.w	r2, [sl], #4
   da744:	f853 2b04 	ldr.w	r2, [r3], #4
   da748:	459c      	cmp	ip, r3
   da74a:	fa22 f20e 	lsr.w	r2, r2, lr
   da74e:	d8f3      	bhi.n	da738 <__lshift+0x58>
   da750:	ebac 0304 	sub.w	r3, ip, r4
   da754:	3b15      	subs	r3, #21
   da756:	f023 0303 	bic.w	r3, r3, #3
   da75a:	3304      	adds	r3, #4
   da75c:	f104 0015 	add.w	r0, r4, #21
   da760:	4560      	cmp	r0, ip
   da762:	bf88      	it	hi
   da764:	2304      	movhi	r3, #4
   da766:	50ca      	str	r2, [r1, r3]
   da768:	b10a      	cbz	r2, da76e <__lshift+0x8e>
   da76a:	f108 0602 	add.w	r6, r8, #2
   da76e:	3e01      	subs	r6, #1
   da770:	4638      	mov	r0, r7
   da772:	612e      	str	r6, [r5, #16]
   da774:	4621      	mov	r1, r4
   da776:	f7ff fddd 	bl	da334 <_Bfree>
   da77a:	4628      	mov	r0, r5
   da77c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da780:	3101      	adds	r1, #1
   da782:	005b      	lsls	r3, r3, #1
   da784:	e7ba      	b.n	da6fc <__lshift+0x1c>
   da786:	f842 0f04 	str.w	r0, [r2, #4]!
   da78a:	3301      	adds	r3, #1
   da78c:	e7c2      	b.n	da714 <__lshift+0x34>
   da78e:	3904      	subs	r1, #4
   da790:	f853 2b04 	ldr.w	r2, [r3], #4
   da794:	f841 2f04 	str.w	r2, [r1, #4]!
   da798:	459c      	cmp	ip, r3
   da79a:	d8f9      	bhi.n	da790 <__lshift+0xb0>
   da79c:	e7e7      	b.n	da76e <__lshift+0x8e>

000da79e <__mcmp>:
   da79e:	b530      	push	{r4, r5, lr}
   da7a0:	6902      	ldr	r2, [r0, #16]
   da7a2:	690c      	ldr	r4, [r1, #16]
   da7a4:	1b12      	subs	r2, r2, r4
   da7a6:	d10e      	bne.n	da7c6 <__mcmp+0x28>
   da7a8:	f100 0314 	add.w	r3, r0, #20
   da7ac:	3114      	adds	r1, #20
   da7ae:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   da7b2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   da7b6:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   da7ba:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   da7be:	42a5      	cmp	r5, r4
   da7c0:	d003      	beq.n	da7ca <__mcmp+0x2c>
   da7c2:	d305      	bcc.n	da7d0 <__mcmp+0x32>
   da7c4:	2201      	movs	r2, #1
   da7c6:	4610      	mov	r0, r2
   da7c8:	bd30      	pop	{r4, r5, pc}
   da7ca:	4283      	cmp	r3, r0
   da7cc:	d3f3      	bcc.n	da7b6 <__mcmp+0x18>
   da7ce:	e7fa      	b.n	da7c6 <__mcmp+0x28>
   da7d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da7d4:	e7f7      	b.n	da7c6 <__mcmp+0x28>

000da7d6 <__mdiff>:
   da7d6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da7da:	460c      	mov	r4, r1
   da7dc:	4606      	mov	r6, r0
   da7de:	4611      	mov	r1, r2
   da7e0:	4620      	mov	r0, r4
   da7e2:	4617      	mov	r7, r2
   da7e4:	f7ff ffdb 	bl	da79e <__mcmp>
   da7e8:	1e05      	subs	r5, r0, #0
   da7ea:	d108      	bne.n	da7fe <__mdiff+0x28>
   da7ec:	4629      	mov	r1, r5
   da7ee:	4630      	mov	r0, r6
   da7f0:	f7ff fd6c 	bl	da2cc <_Balloc>
   da7f4:	2301      	movs	r3, #1
   da7f6:	e9c0 3504 	strd	r3, r5, [r0, #16]
   da7fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da7fe:	bfa4      	itt	ge
   da800:	463b      	movge	r3, r7
   da802:	4627      	movge	r7, r4
   da804:	4630      	mov	r0, r6
   da806:	6879      	ldr	r1, [r7, #4]
   da808:	bfa6      	itte	ge
   da80a:	461c      	movge	r4, r3
   da80c:	2500      	movge	r5, #0
   da80e:	2501      	movlt	r5, #1
   da810:	f7ff fd5c 	bl	da2cc <_Balloc>
   da814:	693e      	ldr	r6, [r7, #16]
   da816:	60c5      	str	r5, [r0, #12]
   da818:	6925      	ldr	r5, [r4, #16]
   da81a:	f107 0114 	add.w	r1, r7, #20
   da81e:	f104 0914 	add.w	r9, r4, #20
   da822:	f100 0e14 	add.w	lr, r0, #20
   da826:	f107 0210 	add.w	r2, r7, #16
   da82a:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   da82e:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   da832:	46f2      	mov	sl, lr
   da834:	2700      	movs	r7, #0
   da836:	f859 3b04 	ldr.w	r3, [r9], #4
   da83a:	f852 bf04 	ldr.w	fp, [r2, #4]!
   da83e:	fa1f f883 	uxth.w	r8, r3
   da842:	fa17 f78b 	uxtah	r7, r7, fp
   da846:	0c1b      	lsrs	r3, r3, #16
   da848:	eba7 0808 	sub.w	r8, r7, r8
   da84c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   da850:	eb03 4328 	add.w	r3, r3, r8, asr #16
   da854:	fa1f f888 	uxth.w	r8, r8
   da858:	141f      	asrs	r7, r3, #16
   da85a:	454d      	cmp	r5, r9
   da85c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   da860:	f84a 3b04 	str.w	r3, [sl], #4
   da864:	d8e7      	bhi.n	da836 <__mdiff+0x60>
   da866:	1b2b      	subs	r3, r5, r4
   da868:	3b15      	subs	r3, #21
   da86a:	f023 0303 	bic.w	r3, r3, #3
   da86e:	3304      	adds	r3, #4
   da870:	3415      	adds	r4, #21
   da872:	42a5      	cmp	r5, r4
   da874:	bf38      	it	cc
   da876:	2304      	movcc	r3, #4
   da878:	4419      	add	r1, r3
   da87a:	4473      	add	r3, lr
   da87c:	469e      	mov	lr, r3
   da87e:	460d      	mov	r5, r1
   da880:	4565      	cmp	r5, ip
   da882:	d30e      	bcc.n	da8a2 <__mdiff+0xcc>
   da884:	f10c 0203 	add.w	r2, ip, #3
   da888:	1a52      	subs	r2, r2, r1
   da88a:	f022 0203 	bic.w	r2, r2, #3
   da88e:	3903      	subs	r1, #3
   da890:	458c      	cmp	ip, r1
   da892:	bf38      	it	cc
   da894:	2200      	movcc	r2, #0
   da896:	441a      	add	r2, r3
   da898:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   da89c:	b17b      	cbz	r3, da8be <__mdiff+0xe8>
   da89e:	6106      	str	r6, [r0, #16]
   da8a0:	e7ab      	b.n	da7fa <__mdiff+0x24>
   da8a2:	f855 8b04 	ldr.w	r8, [r5], #4
   da8a6:	fa17 f488 	uxtah	r4, r7, r8
   da8aa:	1422      	asrs	r2, r4, #16
   da8ac:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   da8b0:	b2a4      	uxth	r4, r4
   da8b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   da8b6:	f84e 4b04 	str.w	r4, [lr], #4
   da8ba:	1417      	asrs	r7, r2, #16
   da8bc:	e7e0      	b.n	da880 <__mdiff+0xaa>
   da8be:	3e01      	subs	r6, #1
   da8c0:	e7ea      	b.n	da898 <__mdiff+0xc2>
	...

000da8c4 <__ulp>:
   da8c4:	b082      	sub	sp, #8
   da8c6:	ed8d 0b00 	vstr	d0, [sp]
   da8ca:	9b01      	ldr	r3, [sp, #4]
   da8cc:	4912      	ldr	r1, [pc, #72]	; (da918 <__ulp+0x54>)
   da8ce:	4019      	ands	r1, r3
   da8d0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   da8d4:	2900      	cmp	r1, #0
   da8d6:	dd05      	ble.n	da8e4 <__ulp+0x20>
   da8d8:	2200      	movs	r2, #0
   da8da:	460b      	mov	r3, r1
   da8dc:	ec43 2b10 	vmov	d0, r2, r3
   da8e0:	b002      	add	sp, #8
   da8e2:	4770      	bx	lr
   da8e4:	4249      	negs	r1, r1
   da8e6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   da8ea:	ea4f 5021 	mov.w	r0, r1, asr #20
   da8ee:	f04f 0200 	mov.w	r2, #0
   da8f2:	f04f 0300 	mov.w	r3, #0
   da8f6:	da04      	bge.n	da902 <__ulp+0x3e>
   da8f8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   da8fc:	fa41 f300 	asr.w	r3, r1, r0
   da900:	e7ec      	b.n	da8dc <__ulp+0x18>
   da902:	f1a0 0114 	sub.w	r1, r0, #20
   da906:	291e      	cmp	r1, #30
   da908:	bfda      	itte	le
   da90a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   da90e:	fa20 f101 	lsrle.w	r1, r0, r1
   da912:	2101      	movgt	r1, #1
   da914:	460a      	mov	r2, r1
   da916:	e7e1      	b.n	da8dc <__ulp+0x18>
   da918:	7ff00000 	.word	0x7ff00000

000da91c <__b2d>:
   da91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da91e:	6905      	ldr	r5, [r0, #16]
   da920:	f100 0714 	add.w	r7, r0, #20
   da924:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   da928:	1f2e      	subs	r6, r5, #4
   da92a:	f855 4c04 	ldr.w	r4, [r5, #-4]
   da92e:	4620      	mov	r0, r4
   da930:	f7ff fd93 	bl	da45a <__hi0bits>
   da934:	f1c0 0320 	rsb	r3, r0, #32
   da938:	280a      	cmp	r0, #10
   da93a:	f8df c07c 	ldr.w	ip, [pc, #124]	; da9b8 <__b2d+0x9c>
   da93e:	600b      	str	r3, [r1, #0]
   da940:	dc14      	bgt.n	da96c <__b2d+0x50>
   da942:	f1c0 0e0b 	rsb	lr, r0, #11
   da946:	fa24 f10e 	lsr.w	r1, r4, lr
   da94a:	42b7      	cmp	r7, r6
   da94c:	ea41 030c 	orr.w	r3, r1, ip
   da950:	bf34      	ite	cc
   da952:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   da956:	2100      	movcs	r1, #0
   da958:	3015      	adds	r0, #21
   da95a:	fa04 f000 	lsl.w	r0, r4, r0
   da95e:	fa21 f10e 	lsr.w	r1, r1, lr
   da962:	ea40 0201 	orr.w	r2, r0, r1
   da966:	ec43 2b10 	vmov	d0, r2, r3
   da96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   da96c:	42b7      	cmp	r7, r6
   da96e:	bf3a      	itte	cc
   da970:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   da974:	f1a5 0608 	subcc.w	r6, r5, #8
   da978:	2100      	movcs	r1, #0
   da97a:	380b      	subs	r0, #11
   da97c:	d017      	beq.n	da9ae <__b2d+0x92>
   da97e:	f1c0 0c20 	rsb	ip, r0, #32
   da982:	fa04 f500 	lsl.w	r5, r4, r0
   da986:	42be      	cmp	r6, r7
   da988:	fa21 f40c 	lsr.w	r4, r1, ip
   da98c:	ea45 0504 	orr.w	r5, r5, r4
   da990:	bf8c      	ite	hi
   da992:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   da996:	2400      	movls	r4, #0
   da998:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   da99c:	fa01 f000 	lsl.w	r0, r1, r0
   da9a0:	fa24 f40c 	lsr.w	r4, r4, ip
   da9a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   da9a8:	ea40 0204 	orr.w	r2, r0, r4
   da9ac:	e7db      	b.n	da966 <__b2d+0x4a>
   da9ae:	ea44 030c 	orr.w	r3, r4, ip
   da9b2:	460a      	mov	r2, r1
   da9b4:	e7d7      	b.n	da966 <__b2d+0x4a>
   da9b6:	bf00      	nop
   da9b8:	3ff00000 	.word	0x3ff00000

000da9bc <__d2b>:
   da9bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   da9c0:	4689      	mov	r9, r1
   da9c2:	2101      	movs	r1, #1
   da9c4:	ec57 6b10 	vmov	r6, r7, d0
   da9c8:	4690      	mov	r8, r2
   da9ca:	f7ff fc7f 	bl	da2cc <_Balloc>
   da9ce:	f3c7 550a 	ubfx	r5, r7, #20, #11
   da9d2:	4604      	mov	r4, r0
   da9d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
   da9d8:	bb35      	cbnz	r5, daa28 <__d2b+0x6c>
   da9da:	2e00      	cmp	r6, #0
   da9dc:	9301      	str	r3, [sp, #4]
   da9de:	d028      	beq.n	daa32 <__d2b+0x76>
   da9e0:	4668      	mov	r0, sp
   da9e2:	9600      	str	r6, [sp, #0]
   da9e4:	f7ff fd59 	bl	da49a <__lo0bits>
   da9e8:	9900      	ldr	r1, [sp, #0]
   da9ea:	b300      	cbz	r0, daa2e <__d2b+0x72>
   da9ec:	9a01      	ldr	r2, [sp, #4]
   da9ee:	f1c0 0320 	rsb	r3, r0, #32
   da9f2:	fa02 f303 	lsl.w	r3, r2, r3
   da9f6:	430b      	orrs	r3, r1
   da9f8:	40c2      	lsrs	r2, r0
   da9fa:	6163      	str	r3, [r4, #20]
   da9fc:	9201      	str	r2, [sp, #4]
   da9fe:	9b01      	ldr	r3, [sp, #4]
   daa00:	61a3      	str	r3, [r4, #24]
   daa02:	2b00      	cmp	r3, #0
   daa04:	bf14      	ite	ne
   daa06:	2202      	movne	r2, #2
   daa08:	2201      	moveq	r2, #1
   daa0a:	6122      	str	r2, [r4, #16]
   daa0c:	b1d5      	cbz	r5, daa44 <__d2b+0x88>
   daa0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   daa12:	4405      	add	r5, r0
   daa14:	f8c9 5000 	str.w	r5, [r9]
   daa18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   daa1c:	f8c8 0000 	str.w	r0, [r8]
   daa20:	4620      	mov	r0, r4
   daa22:	b003      	add	sp, #12
   daa24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   daa28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   daa2c:	e7d5      	b.n	da9da <__d2b+0x1e>
   daa2e:	6161      	str	r1, [r4, #20]
   daa30:	e7e5      	b.n	da9fe <__d2b+0x42>
   daa32:	a801      	add	r0, sp, #4
   daa34:	f7ff fd31 	bl	da49a <__lo0bits>
   daa38:	9b01      	ldr	r3, [sp, #4]
   daa3a:	6163      	str	r3, [r4, #20]
   daa3c:	2201      	movs	r2, #1
   daa3e:	6122      	str	r2, [r4, #16]
   daa40:	3020      	adds	r0, #32
   daa42:	e7e3      	b.n	daa0c <__d2b+0x50>
   daa44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   daa48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   daa4c:	f8c9 0000 	str.w	r0, [r9]
   daa50:	6918      	ldr	r0, [r3, #16]
   daa52:	f7ff fd02 	bl	da45a <__hi0bits>
   daa56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   daa5a:	e7df      	b.n	daa1c <__d2b+0x60>

000daa5c <__ratio>:
   daa5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   daa60:	4688      	mov	r8, r1
   daa62:	4669      	mov	r1, sp
   daa64:	4681      	mov	r9, r0
   daa66:	f7ff ff59 	bl	da91c <__b2d>
   daa6a:	a901      	add	r1, sp, #4
   daa6c:	4640      	mov	r0, r8
   daa6e:	ec55 4b10 	vmov	r4, r5, d0
   daa72:	f7ff ff53 	bl	da91c <__b2d>
   daa76:	f8d9 3010 	ldr.w	r3, [r9, #16]
   daa7a:	f8d8 2010 	ldr.w	r2, [r8, #16]
   daa7e:	eba3 0c02 	sub.w	ip, r3, r2
   daa82:	e9dd 3200 	ldrd	r3, r2, [sp]
   daa86:	1a9b      	subs	r3, r3, r2
   daa88:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   daa8c:	ec51 0b10 	vmov	r0, r1, d0
   daa90:	2b00      	cmp	r3, #0
   daa92:	bfd6      	itet	le
   daa94:	460a      	movle	r2, r1
   daa96:	462a      	movgt	r2, r5
   daa98:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   daa9c:	468b      	mov	fp, r1
   daa9e:	462f      	mov	r7, r5
   daaa0:	bfd4      	ite	le
   daaa2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   daaa6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   daaaa:	4620      	mov	r0, r4
   daaac:	ee10 2a10 	vmov	r2, s0
   daab0:	465b      	mov	r3, fp
   daab2:	4639      	mov	r1, r7
   daab4:	f7fd fed2 	bl	d885c <__aeabi_ddiv>
   daab8:	ec41 0b10 	vmov	d0, r0, r1
   daabc:	b003      	add	sp, #12
   daabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000daac2 <__copybits>:
   daac2:	3901      	subs	r1, #1
   daac4:	b570      	push	{r4, r5, r6, lr}
   daac6:	1149      	asrs	r1, r1, #5
   daac8:	6914      	ldr	r4, [r2, #16]
   daaca:	3101      	adds	r1, #1
   daacc:	f102 0314 	add.w	r3, r2, #20
   daad0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   daad4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   daad8:	1f05      	subs	r5, r0, #4
   daada:	42a3      	cmp	r3, r4
   daadc:	d30c      	bcc.n	daaf8 <__copybits+0x36>
   daade:	1aa3      	subs	r3, r4, r2
   daae0:	3b11      	subs	r3, #17
   daae2:	f023 0303 	bic.w	r3, r3, #3
   daae6:	3211      	adds	r2, #17
   daae8:	42a2      	cmp	r2, r4
   daaea:	bf88      	it	hi
   daaec:	2300      	movhi	r3, #0
   daaee:	4418      	add	r0, r3
   daaf0:	2300      	movs	r3, #0
   daaf2:	4288      	cmp	r0, r1
   daaf4:	d305      	bcc.n	dab02 <__copybits+0x40>
   daaf6:	bd70      	pop	{r4, r5, r6, pc}
   daaf8:	f853 6b04 	ldr.w	r6, [r3], #4
   daafc:	f845 6f04 	str.w	r6, [r5, #4]!
   dab00:	e7eb      	b.n	daada <__copybits+0x18>
   dab02:	f840 3b04 	str.w	r3, [r0], #4
   dab06:	e7f4      	b.n	daaf2 <__copybits+0x30>

000dab08 <__any_on>:
   dab08:	f100 0214 	add.w	r2, r0, #20
   dab0c:	6900      	ldr	r0, [r0, #16]
   dab0e:	114b      	asrs	r3, r1, #5
   dab10:	4298      	cmp	r0, r3
   dab12:	b510      	push	{r4, lr}
   dab14:	db11      	blt.n	dab3a <__any_on+0x32>
   dab16:	dd0a      	ble.n	dab2e <__any_on+0x26>
   dab18:	f011 011f 	ands.w	r1, r1, #31
   dab1c:	d007      	beq.n	dab2e <__any_on+0x26>
   dab1e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   dab22:	fa24 f001 	lsr.w	r0, r4, r1
   dab26:	fa00 f101 	lsl.w	r1, r0, r1
   dab2a:	428c      	cmp	r4, r1
   dab2c:	d10b      	bne.n	dab46 <__any_on+0x3e>
   dab2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   dab32:	4293      	cmp	r3, r2
   dab34:	d803      	bhi.n	dab3e <__any_on+0x36>
   dab36:	2000      	movs	r0, #0
   dab38:	bd10      	pop	{r4, pc}
   dab3a:	4603      	mov	r3, r0
   dab3c:	e7f7      	b.n	dab2e <__any_on+0x26>
   dab3e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   dab42:	2900      	cmp	r1, #0
   dab44:	d0f5      	beq.n	dab32 <__any_on+0x2a>
   dab46:	2001      	movs	r0, #1
   dab48:	e7f6      	b.n	dab38 <__any_on+0x30>

000dab4a <_calloc_r>:
   dab4a:	b513      	push	{r0, r1, r4, lr}
   dab4c:	434a      	muls	r2, r1
   dab4e:	4611      	mov	r1, r2
   dab50:	9201      	str	r2, [sp, #4]
   dab52:	f7fb fef9 	bl	d6948 <_malloc_r>
   dab56:	4604      	mov	r4, r0
   dab58:	b118      	cbz	r0, dab62 <_calloc_r+0x18>
   dab5a:	9a01      	ldr	r2, [sp, #4]
   dab5c:	2100      	movs	r1, #0
   dab5e:	f7fe f907 	bl	d8d70 <memset>
   dab62:	4620      	mov	r0, r4
   dab64:	b002      	add	sp, #8
   dab66:	bd10      	pop	{r4, pc}

000dab68 <nan>:
   dab68:	ed9f 0b01 	vldr	d0, [pc, #4]	; dab70 <nan+0x8>
   dab6c:	4770      	bx	lr
   dab6e:	bf00      	nop
   dab70:	00000000 	.word	0x00000000
   dab74:	7ff80000 	.word	0x7ff80000

000dab78 <__ascii_wctomb>:
   dab78:	b149      	cbz	r1, dab8e <__ascii_wctomb+0x16>
   dab7a:	2aff      	cmp	r2, #255	; 0xff
   dab7c:	bf85      	ittet	hi
   dab7e:	238a      	movhi	r3, #138	; 0x8a
   dab80:	6003      	strhi	r3, [r0, #0]
   dab82:	700a      	strbls	r2, [r1, #0]
   dab84:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   dab88:	bf98      	it	ls
   dab8a:	2001      	movls	r0, #1
   dab8c:	4770      	bx	lr
   dab8e:	4608      	mov	r0, r1
   dab90:	4770      	bx	lr
	...

000dab94 <__aeabi_d2lz>:
   dab94:	b538      	push	{r3, r4, r5, lr}
   dab96:	2200      	movs	r2, #0
   dab98:	2300      	movs	r3, #0
   dab9a:	4604      	mov	r4, r0
   dab9c:	460d      	mov	r5, r1
   dab9e:	f7fd ffa5 	bl	d8aec <__aeabi_dcmplt>
   daba2:	b928      	cbnz	r0, dabb0 <__aeabi_d2lz+0x1c>
   daba4:	4620      	mov	r0, r4
   daba6:	4629      	mov	r1, r5
   daba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dabac:	f7fe b84c 	b.w	d8c48 <__aeabi_d2ulz>
   dabb0:	4620      	mov	r0, r4
   dabb2:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   dabb6:	f7fe f847 	bl	d8c48 <__aeabi_d2ulz>
   dabba:	4240      	negs	r0, r0
   dabbc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   dabc0:	bd38      	pop	{r3, r4, r5, pc}
   dabc2:	bf00      	nop

000dabc4 <dynalib_user>:
   dabc4:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   dabd4:	0000 0000 6e55 6e6b 776f 006e 6f4e 2074     ....Unknown.Not 
   dabe4:	6843 7261 6967 676e 4300 6168 6772 6465     Charging.Charged
   dabf4:	4400 7369 6863 7261 6967 676e 4600 7561     .Discharging.Fau
   dac04:	746c 4400 6369 6e6f 656e 7463 6465 3100     lt.Diconnected.1
   dac14:	2a00 4e00 206f 6144 6174 5200 7365 6f70     .*.No Data.Respo
   dac24:	736e 2065 6552 6563 7669 6465 5500 6b6e     nse Received.Unk
   dac34:	6f6e 6e77 7220 7365 6f70 736e 2065 6572     nown response re
   dac44:	6563 6976 6465 2520 0069 6255 6469 746f     cevied %i.Ubidot
   dac54:	2073 6f48 6b6f 5300 7465 5620 7265 6f62     s Hook.Set Verbo
   dac64:	6573 4d20 646f 0065 0030 6c43 6165 6572     se Mode.0.Cleare
   dac74:	2064 6556 6272 736f 2065 6f4d 6564 5300     d Verbose Mode.S
   dac84:	7465 7420 206f 7233 2064 6150 7472 2079     et to 3rd Party 
   dac94:	6953 006d 6553 2074 6f74 5020 7261 6974     Sim.Set to Parti
   daca4:	6c63 2065 6953 006d 654b 7065 4120 696c     cle Sim.Keep Ali
   dacb4:	6576 7320 7465 7420 206f 6925 7320 6365     ve set to %i sec
   dacc4:	4b00 6565 2070 6c41 7669 0065 6f43 736e     .Keep Alive.Cons
   dacd4:	6174 746e 4f20 656e 5620 6c61 6575 7320     tant One Value s
   dace4:	7465 7420 206f 4300 6e6f 7473 6e61 2074     et to .Constant 
   dacf4:	7754 206f 6156 756c 2065 6573 2074 6f74     Two Value set to
   dad04:	0020 6f43 736e 6174 746e 5420 7268 6565      .Constant Three
   dad14:	5620 6c61 6575 7320 7465 7420 206f 4300      Value set to .C
   dad24:	6e6f 7473 6e61 2074 6f46 7275 5620 6c61     onstant Four Val
   dad34:	6575 7320 7465 7420 206f 4300 6e6f 7473     ue set to .Const
   dad44:	6e61 2074 6946 6576 5620 6c61 6575 7320     ant Five Value s
   dad54:	7465 7420 206f 4300 6e6f 7473 6e61 2074     et to .Constant 
   dad64:	6953 2078 6156 756c 2065 6573 2074 6f74     Six Value set to
   dad74:	0020 6f4c 6461 6e69 2067 7953 7473 6d65      .Loading System
   dad84:	4420 6665 7561 746c 0073 6550 7474 6465      Defaults.Petted
   dad94:	5700 7461 6863 6f64 0067 227b 6573 736e     .Watchdog.{"sens
   dada4:	726f 6e4f 2265 253a 2e34 6631 202c 7322     orOne":%4.1f, "s
   dadb4:	6e65 6f73 5472 6f77 3a22 3425 312e 2c66     ensorTwo":%4.1f,
   dadc4:	2020 7322 6e65 6f73 5472 7268 6565 3a22       "sensorThree":
   dadd4:	3425 312e 2c66 2020 7322 6e65 6f73 4672     %4.1f,  "sensorF
   dade4:	756f 2272 253a 2e34 6631 202c 2220 6573     our":%4.1f,  "se
   dadf4:	736e 726f 6946 6576 3a22 3425 312e 2c66     nsorFive":%4.1f,
   dae04:	7322 6e65 6f73 5372 7869 3a22 3425 312e     "sensorSix":%4.1
   dae14:	7d66 7000 776f 7265 6f6d 696e 6f74 6972     f}.powermonitori
   dae24:	676e 685f 6f6f 006b 7246 6d6f 2520 2073     ng_hook.From %s 
   dae34:	6f74 2520 0073 7453 7461 2065 7254 6e61     to %s.State Tran
   dae44:	6973 6974 6e6f 4500 5252 524f 4620 4f52     sition.ERROR FRO
   dae54:	204d 4552 4f50 5452 4e49 0047 4544 5542     M REPORTING.DEBU
   dae64:	2d47 5320 6174 7472 7075 4400 4245 4755     G- Startup.DEBUG
   dae74:	202d 4150 5452 4349 454c 4320 4e4f 454e     - PARTICLE CONNE
   dae84:	5443 4445 7300 6170 6b72 642f 7665 6369     CTED.spark/devic
   dae94:	2f65 6573 7373 6f69 2f6e 6e65 0064 7245     e/session/end.Er
   daea4:	6f72 2072 7453 7461 2065 202d 6552 6573     ror State - Rese
   daeb4:	0074 7453 7461 0065 682f 6f6f 2d6b 6572     t.State./hook-re
   daec4:	7073 6e6f 6573 702f 776f 7265 6f6d 696e     sponse/powermoni
   daed4:	6f74 6972 676e 685f 6f6f 2f6b 5200 6c65     toring_hook/.Rel
   daee4:	6165 6573 4200 7461 6574 7972 4200 7461     ease.Battery.Bat
   daef4:	6574 7972 6f43 746e 7865 0074 654b 7065     teryContext.Keep
   daf04:	4120 696c 6576 5320 6365 4d00 6165 7573      Alive Sec.Measu
   daf14:	6572 4e2d 776f 5600 7265 6f62 6573 4d2d     re-Now.Verbose-M
   daf24:	646f 0065 6553 2074 6f43 736e 6174 746e     ode.Set Constant
   daf34:	4f20 656e 5300 7465 4320 6e6f 7473 6e61      One.Set Constan
   daf44:	2074 7754 006f 6553 2074 6f43 736e 6174     t Two.Set Consta
   daf54:	746e 5420 7268 6565 5300 7465 4320 6e6f     nt Three.Set Con
   daf64:	7473 6e61 2074 6f46 7275 5300 7465 4320     stant Four.Set C
   daf74:	6e6f 7473 6e61 2074 6946 6576 5300 7465     onstant Five.Set
   daf84:	4320 6e6f 7473 6e61 2074 6953 0078 0000      Constant Six...

000daf94 <_ZTV5Timer>:
	...
   daf9c:	4219 000d 426d 000d 410d 000d               .B..mB...A..

000dafa8 <_ZTV17PublishQueueAsync>:
	...
   dafb0:	4119 000d 412d 000d 5c6d 000d 5df9 000d     .A..-A..m\...]..
   dafc0:	5db9 000d 5d97 000d 5f3f 000d 5ddf 000d     .]...]..?_...]..

000dafd0 <_ZTV8MB85RC64>:
	...
   dafd8:	4141 000d 4155 000d 5265 000d 52fb 000d     AA..UA..eR...R..
   dafe8:	537d 000d abd8 000d abe0 000d abe4 000d     }S..............
   daff8:	abed 000d abf5 000d ac01 000d ac07 000d     ................
   db008:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   db018:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000db048 <_ZL13releaseNumber>:
   db048:	2e31 3030 0000 0000                         1.00....

000db050 <_ZL17FRAMversionNumber>:
   db050:	0005 0000 7277 7469 4465 7461 2061 6166     ....writeData fa
   db060:	6c69 6465 6420 7275 6e69 2067 7265 7361     iled during eras
   db070:	2065 7266 6d61 6441 7264 253d 0075 0000     e framAddr=%u...

000db080 <_ZTV6MB85RC>:
	...
   db088:	5185 000d 5187 000d 5265 000d 52fb 000d     .Q...Q..eR...R..
   db098:	537d 000d 6564 6976 6563 6552 6461 6620     }S..deviceRead f
   db0a8:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   db0b8:	2074 6954 656d 6620 6f72 206d 5452 2043     t Time from RTC 
   db0c8:	7325 6400 7665 6369 5765 6972 6574 6620     %s.deviceWrite f
   db0d8:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   db0e8:	2074 5452 2043 7266 6d6f 6320 6f6c 6475     t RTC from cloud
   db0f8:	2520 0073 6c63 756f 2064 6974 656d 6e20      %s.cloud time n
   db108:	746f 7620 6c61 6469 6400 7665 6369 5765     ot valid.deviceW
   db118:	6972 6574 4545 5250 4d4f 6620 6961 656c     riteEEPROM faile
   db128:	2064 7473 7461 253d 0064 7061 2e70 7472     d stat=%d.app.rt
   db138:	0063 0000                                   c...

000db13c <_ZTV12MCP79410SRAM>:
	...
   db144:	543d 000d 5453 000d 542d 000d 5431 000d     =T..ST..-T..1T..
   db154:	547d 000d 5765 000d 5985 000d               }T..eW...Y..

000db160 <_ZTV12MCP79410Time>:
	...
   db168:	5441 000d 5445 000d                         AT..ET..

000db170 <_ZTV14MCP79410EEPROM>:
	...
   db178:	543f 000d 5461 000d 5435 000d 5439 000d     ?T..aT..5T..9T..
   db188:	547d 000d 579f 000d 5bc5 000d               }T...W...[..

000db194 <_ZTV8MCP79410>:
	...
   db19c:	5443 000d 546f 000d 7550 6c62 7369 5168     CT..oT..PublishQ
   db1ac:	6575 6575 7341 6e79 0063 7571 7565 6965     ueueAsync.queuei
   db1bc:	676e 6520 6576 746e 614e 656d 253d 2073     ng eventName=%s 
   db1cc:	6164 6174 253d 2073 7474 3d6c 6425 6620     data=%s ttl=%d f
   db1dc:	616c 7367 3d31 6425 6620 616c 7367 3d32     lags1=%d flags2=
   db1ec:	6425 7320 7a69 3d65 6425 7000 6275 696c     %d size=%d.publi
   db1fc:	6873 6e69 2067 7325 2520 2073 7474 3d6c     shing %s %s ttl=
   db20c:	6425 6620 616c 7367 253d 0078 7570 6c62     %d flags=%x.publ
   db21c:	7369 6568 2064 7573 6363 7365 6673 6c75     ished successful
   db22c:	796c 7000 6275 696c 6873 6465 6620 6961     ly.published fai
   db23c:	656c 2c64 7720 6c69 206c 6572 7274 2079     led, will retry 
   db24c:	6e69 2520 756c 6d20 0073 7061 2e70 7570     in %lu ms.app.pu
   db25c:	7162 0000                                   bq..

000db260 <_ZTV21PublishQueueAsyncBase>:
	...
   db270:	5c6d 000d 40a5 000d 40a5 000d 40a5 000d     m\...@...@...@..
   db280:	40a5 000d 40a5 000d                         .@...@..

000db288 <_ZTV25PublishQueueAsyncRetained>:
	...
   db290:	5d55 000d 5d69 000d 5c6d 000d 5df9 000d     U]..i]..m\...]..
   db2a0:	5db9 000d 5d97 000d 5f3f 000d 5ddf 000d     .]...]..?_...]..

000db2b0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   db2b8:	6a65 000d 6a6b 000d 6aa9 000d 6a79 000d     ej..kj...j..yj..
   db2c8:	6a67 000d                                   gj..

000db2cc <_ZTVN5spark13EthernetClassE>:
	...
   db2d4:	706f 000d 7065 000d 705b 000d 7051 000d     op..ep..[p..Qp..
   db2e4:	7045 000d 7039 000d 702d 000d 7025 000d     Ep..9p..-p..%p..
   db2f4:	701b 000d 7011 000d 7355 000d               .p...p..Us..

000db300 <_ZTV7TwoWire>:
	...
   db308:	708d 000d 70d7 000d 70af 000d 708f 000d     .p...p...p...p..
   db318:	70b7 000d 70bf 000d 70c7 000d 70cf 000d     .p...p...p...p..

000db328 <_ZTV9IPAddress>:
	...
   db330:	7209 000d 71f9 000d 71fb 000d 7061 0070     .r...q...q..app.

000db340 <_ZTVN5spark12NetworkClassE>:
	...
   db348:	72ed 000d 72f7 000d 7301 000d 730b 000d     .r...r...s...s..
   db358:	7315 000d 7321 000d 732d 000d 7339 000d     .s..!s..-s..9s..
   db368:	7341 000d 734b 000d 7355 000d 005a 2b25     As..Ks..Us..Z.%+
   db378:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   db388:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   db398:	6974 656d 0000 0000                         time....

000db3a0 <_ZTV11USARTSerial>:
	...
   db3a8:	7a65 000d 7ad1 000d 7aa9 000d 743d 000d     ez...z...z..=t..
   db3b8:	7a79 000d 7a95 000d 7a87 000d 7aa3 000d     yz...z...z...z..
   db3c8:	7a67 000d 7a6b 000d                         gz..kz..

000db3d0 <_ZTV9USBSerial>:
	...
   db3d8:	7b65 000d 7bcd 000d 7ba3 000d 743d 000d     e{...{...{..=t..
   db3e8:	7b95 000d 7b67 000d 7b77 000d 7bc7 000d     .{..g{..w{...{..
   db3f8:	7b87 000d 7b61 000d                         .{..a{..

000db400 <_ZTVN5spark9WiFiClassE>:
	...
   db408:	7cc7 000d 7cbd 000d 7cb3 000d 7c69 000d     .|...|...|..i|..
   db418:	7ca7 000d 7c9b 000d 7c8f 000d 7c87 000d     .|...|...|...|..
   db428:	7c7d 000d 7c73 000d 7355 000d               }|..s|..Us..

000db434 <_ZSt7nothrow>:
   db434:	0000 0000 7173 7472 2500 332e 2073 2e25     ....sqrt.%.3s %.
   db444:	7333 3325 2064 2e25 6432 253a 322e 3a64     3s%3d %.2d:%.2d:
   db454:	2e25 6432 2520 0a64                          %.2d %d..

000db45d <day_name.6145>:
   db45d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   db46d:	6972 6153                                    riSat

000db472 <mon_name.6146>:
   db472:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   db482:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   db492:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000db4a4 <fpi.7566>:
   db4a4:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   db4b4:	0000 0000                                   ....

000db4b8 <fpinan.7602>:
   db4b8:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000db4d0 <tinytens>:
   db4d0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   db4e0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   db4f0:	6f43 64ac 0628 1168                         Co.d(.h.

000db4f8 <_ctype_>:
   db4f8:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   db508:	2020 2020 2020 2020 2020 2020 2020 2020                     
   db518:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   db528:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   db538:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   db548:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   db558:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   db568:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   db578:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   db5f8:	2e00 0000                                   ....

000db5fc <_C_numeric_locale>:
   db5fc:	b5f9 000d b45c 000d def0 2003 0043 4f50     ....\...... C.PO
   db60c:	4953 0058                                   SIX.

000db610 <__mprec_bigtens>:
   db610:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   db620:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   db630:	bf3c 7f73 4fdd 7515                         <.s..O.u

000db638 <__mprec_tens>:
   db638:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   db648:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   db658:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   db668:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   db678:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   db688:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   db698:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   db6a8:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   db6b8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   db6c8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   db6d8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   db6e8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   db6f8:	9db4 79d9 7843 44ea                         ...yCx.D

000db700 <p05.7490>:
   db700:	0005 0000 0019 0000 007d 0000               ........}...

000db70c <link_const_variable_data_end>:
   db70c:	000d5019 	.word	0x000d5019
   db710:	000d5bf5 	.word	0x000d5bf5
   db714:	000d61d1 	.word	0x000d61d1
   db718:	000d6a3d 	.word	0x000d6a3d
   db71c:	000d7079 	.word	0x000d7079
   db720:	000d72dd 	.word	0x000d72dd
   db724:	000d7429 	.word	0x000d7429
   db728:	000d74dd 	.word	0x000d74dd
   db72c:	000d7711 	.word	0x000d7711
   db730:	000d7a51 	.word	0x000d7a51
   db734:	000d7cd1 	.word	0x000d7cd1

000db738 <link_constructors_end>:
	...
