
/Users/abdulhannanmustajab/Desktop/IoT/Power-Monitoring/PowerMonitoring/target/2.0.1/boron/PowerMonitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005800  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000d9820  000d9820  00009820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000804  2003f400  000d9828  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000014c  2003e2a8  000da02c  0001e2a8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000400  2003e3f8  2003e3f8  0002e3f8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000da178  000da178  0002a178  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000da1a0  000da1a0  0002a1a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001a59d0  00000000  00000000  0002a1a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001b2b9  00000000  00000000  001cfb74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00032169  00000000  00000000  001eae2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002e70  00000000  00000000  0021cf96  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00008898  00000000  00000000  0021fe06  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003eaf1  00000000  00000000  0022869e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00045c46  00000000  00000000  0026718f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00113d22  00000000  00000000  002acdd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  000082c0  00000000  00000000  003c0af8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 feab 	bl	d8d8c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fecd 	bl	d8ddc <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e2a8 	.word	0x2003e2a8
   d404c:	000da02c 	.word	0x000da02c
   d4050:	2003e3f4 	.word	0x2003e3f4
   d4054:	2003e3f8 	.word	0x2003e3f8
   d4058:	2003e7f8 	.word	0x2003e7f8

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f003 fdaf 	bl	d7bc4 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d97f4 	.word	0x000d97f4
   d4080:	000d9820 	.word	0x000d9820

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bcca 	b.w	d4a1c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fbd1 	bl	d4830 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f003 bd59 	b.w	d7b48 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 bab3 	b.w	d6600 <malloc>

000d409a <_Znaj>:
   d409a:	f002 bab1 	b.w	d6600 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 bab7 	b.w	d6610 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 f98a 	bl	d63c4 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d60f5 	.word	0x000d60f5

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z11watchdogISRv>:
}


void watchdogISR()
{
  watchdogFlag = true;
   d40c8:	4b01      	ldr	r3, [pc, #4]	; (d40d0 <_Z11watchdogISRv+0x8>)
   d40ca:	2201      	movs	r2, #1
   d40cc:	701a      	strb	r2, [r3, #0]
}
   d40ce:	4770      	bx	lr
   d40d0:	2003e5d1 	.word	0x2003e5d1

000d40d4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40d4:	6803      	ldr	r3, [r0, #0]
   d40d6:	4718      	bx	r3

000d40d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40d8:	2a01      	cmp	r2, #1
   d40da:	d003      	beq.n	d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40dc:	2a02      	cmp	r2, #2
   d40de:	d003      	beq.n	d40e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40e0:	2000      	movs	r0, #0
   d40e2:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40e4:	6001      	str	r1, [r0, #0]
	      break;
   d40e6:	e7fb      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40e8:	680b      	ldr	r3, [r1, #0]
   d40ea:	6003      	str	r3, [r0, #0]
	}
   d40ec:	e7f8      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	...

000d40f0 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
   d40f0:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40f2:	4904      	ldr	r1, [pc, #16]	; (d4104 <_Z10measureNow6String+0x14>)
   d40f4:	f003 f9e1 	bl	d74ba <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d40f8:	b118      	cbz	r0, d4102 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d40fa:	4b03      	ldr	r3, [pc, #12]	; (d4108 <_Z10measureNow6String+0x18>)
   d40fc:	2203      	movs	r2, #3
   d40fe:	701a      	strb	r2, [r3, #0]
    return 1;
   d4100:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4102:	bd08      	pop	{r3, pc}
   d4104:	000d901f 	.word	0x000d901f
   d4108:	2003e594 	.word	0x2003e594

000d410c <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d410c:	6943      	ldr	r3, [r0, #20]
   d410e:	b113      	cbz	r3, d4116 <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4110:	6983      	ldr	r3, [r0, #24]
   d4112:	300c      	adds	r0, #12
   d4114:	4718      	bx	r3
            callback();
        }
    }
   d4116:	4770      	bx	lr

000d4118 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d4118:	b510      	push	{r4, lr}
   d411a:	4b03      	ldr	r3, [pc, #12]	; (d4128 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d411c:	6003      	str	r3, [r0, #0]
   d411e:	4604      	mov	r4, r0
   d4120:	f001 fce6 	bl	d5af0 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d4124:	4620      	mov	r0, r4
   d4126:	bd10      	pop	{r4, pc}
   d4128:	000d920c 	.word	0x000d920c

000d412c <_ZN17PublishQueueAsyncD0Ev>:
   d412c:	b510      	push	{r4, lr}
   d412e:	4604      	mov	r4, r0
   d4130:	f7ff fff2 	bl	d4118 <_ZN17PublishQueueAsyncD1Ev>
   d4134:	4620      	mov	r0, r4
   d4136:	2138      	movs	r1, #56	; 0x38
   d4138:	f003 fe3b 	bl	d7db2 <_ZdlPvj>
   d413c:	4620      	mov	r0, r4
   d413e:	bd10      	pop	{r4, pc}

000d4140 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4140:	b510      	push	{r4, lr}
   d4142:	4b03      	ldr	r3, [pc, #12]	; (d4150 <_ZN8MB85RC64D1Ev+0x10>)
   d4144:	6003      	str	r3, [r0, #0]
   d4146:	4604      	mov	r4, r0
   d4148:	f000 feea 	bl	d4f20 <_ZN6MB85RCD1Ev>
   d414c:	4620      	mov	r0, r4
   d414e:	bd10      	pop	{r4, pc}
   d4150:	000d9234 	.word	0x000d9234

000d4154 <_ZN8MB85RC64D0Ev>:
   d4154:	b510      	push	{r4, lr}
   d4156:	4604      	mov	r4, r0
   d4158:	f7ff fff2 	bl	d4140 <_ZN8MB85RC64D1Ev>
   d415c:	4620      	mov	r0, r4
   d415e:	2110      	movs	r1, #16
   d4160:	f003 fe27 	bl	d7db2 <_ZdlPvj>
   d4164:	4620      	mov	r0, r4
   d4166:	bd10      	pop	{r4, pc}

000d4168 <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d4168:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d416a:	2100      	movs	r1, #0
   d416c:	4604      	mov	r4, r0
   d416e:	4608      	mov	r0, r1
   d4170:	f001 ff48 	bl	d6004 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4174:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d4176:	4620      	mov	r0, r4
   d4178:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d417a:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d417c:	f001 ff5a 	bl	d6034 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4180:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4182:	b10c      	cbz	r4, d4188 <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d4184:	2301      	movs	r3, #1
   d4186:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d4188:	2100      	movs	r1, #0
   d418a:	2001      	movs	r0, #1
   d418c:	f001 ff3a 	bl	d6004 <os_thread_scheduling>
            }
        }
        if (t) {
   d4190:	b12c      	cbz	r4, d419e <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d4192:	6823      	ldr	r3, [r4, #0]
   d4194:	4620      	mov	r0, r4
   d4196:	689b      	ldr	r3, [r3, #8]
   d4198:	4798      	blx	r3
            t->running = false;
   d419a:	2300      	movs	r3, #0
   d419c:	7123      	strb	r3, [r4, #4]
        }
    }
   d419e:	b002      	add	sp, #8
   d41a0:	bd10      	pop	{r4, pc}

000d41a2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d41a2:	b510      	push	{r4, lr}
   d41a4:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d41a6:	6800      	ldr	r0, [r0, #0]
   d41a8:	b108      	cbz	r0, d41ae <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d41aa:	f002 fa31 	bl	d6610 <free>
class SystemClass {
   d41ae:	4620      	mov	r0, r4
   d41b0:	bd10      	pop	{r4, pc}

000d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d41b2:	2300      	movs	r3, #0
   d41b4:	2204      	movs	r2, #4
   d41b6:	f002 b973 	b.w	d64a0 <spark_variable>
	...

000d41bc <_Z16keepAliveMessagev>:
void keepAliveMessage() {
   d41bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d41be:	4b10      	ldr	r3, [pc, #64]	; (d4200 <_Z16keepAliveMessagev+0x44>)
   d41c0:	4a10      	ldr	r2, [pc, #64]	; (d4204 <_Z16keepAliveMessagev+0x48>)
   d41c2:	781b      	ldrb	r3, [r3, #0]
   d41c4:	7812      	ldrb	r2, [r2, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41c6:	4910      	ldr	r1, [pc, #64]	; (d4208 <_Z16keepAliveMessagev+0x4c>)
   d41c8:	4313      	orrs	r3, r2
   d41ca:	f88d 3000 	strb.w	r3, [sp]
   d41ce:	2200      	movs	r2, #0
   d41d0:	233c      	movs	r3, #60	; 0x3c
   d41d2:	a802      	add	r0, sp, #8
   d41d4:	f002 fc7e 	bl	d6ad4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d41d8:	9c03      	ldr	r4, [sp, #12]
   d41da:	b17c      	cbz	r4, d41fc <_Z16keepAliveMessagev+0x40>
      if (--_M_use_count == 0)
   d41dc:	6863      	ldr	r3, [r4, #4]
   d41de:	3b01      	subs	r3, #1
   d41e0:	6063      	str	r3, [r4, #4]
   d41e2:	b95b      	cbnz	r3, d41fc <_Z16keepAliveMessagev+0x40>
          _M_dispose();
   d41e4:	6823      	ldr	r3, [r4, #0]
   d41e6:	4620      	mov	r0, r4
   d41e8:	689b      	ldr	r3, [r3, #8]
   d41ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d41ec:	68a3      	ldr	r3, [r4, #8]
   d41ee:	3b01      	subs	r3, #1
   d41f0:	60a3      	str	r3, [r4, #8]
   d41f2:	b91b      	cbnz	r3, d41fc <_Z16keepAliveMessagev+0x40>
            _M_destroy();
   d41f4:	6823      	ldr	r3, [r4, #0]
   d41f6:	4620      	mov	r0, r4
   d41f8:	68db      	ldr	r3, [r3, #12]
   d41fa:	4798      	blx	r3
}
   d41fc:	b004      	add	sp, #16
   d41fe:	bd10      	pop	{r4, pc}
   d4200:	2003e458 	.word	0x2003e458
   d4204:	2003e459 	.word	0x2003e459
   d4208:	000d9021 	.word	0x000d9021

000d420c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d420c:	b510      	push	{r4, lr}
      if (_M_manager)
   d420e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4210:	4604      	mov	r4, r0
      if (_M_manager)
   d4212:	b113      	cbz	r3, d421a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4214:	2203      	movs	r2, #3
   d4216:	4601      	mov	r1, r0
   d4218:	4798      	blx	r3
    }
   d421a:	4620      	mov	r0, r4
   d421c:	bd10      	pop	{r4, pc}
	...

000d4220 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d4220:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4222:	4b13      	ldr	r3, [pc, #76]	; (d4270 <_ZN5TimerD1Ev+0x50>)
   d4224:	6003      	str	r3, [r0, #0]
   d4226:	4604      	mov	r4, r0
        if (handle) {
   d4228:	6880      	ldr	r0, [r0, #8]
   d422a:	b1c8      	cbz	r0, d4260 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d422c:	2500      	movs	r5, #0
   d422e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d4232:	e9cd 3500 	strd	r3, r5, [sp]
   d4236:	2102      	movs	r1, #2
   d4238:	462b      	mov	r3, r5
   d423a:	462a      	mov	r2, r5
   d423c:	f001 ff02 	bl	d6044 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   d4240:	68a0      	ldr	r0, [r4, #8]
   d4242:	4629      	mov	r1, r5
   d4244:	f001 ff36 	bl	d60b4 <os_timer_set_id>
            while (running) {
   d4248:	7923      	ldrb	r3, [r4, #4]
   d424a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d424e:	b113      	cbz	r3, d4256 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d4250:	f001 fed0 	bl	d5ff4 <os_thread_yield>
            while (running) {
   d4254:	e7f8      	b.n	d4248 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   d4256:	68a0      	ldr	r0, [r4, #8]
   d4258:	4629      	mov	r1, r5
   d425a:	f001 fee3 	bl	d6024 <os_timer_destroy>
            handle = nullptr;
   d425e:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d4260:	f104 000c 	add.w	r0, r4, #12
   d4264:	f7ff ffd2 	bl	d420c <_ZNSt14_Function_baseD1Ev>
    }
   d4268:	4620      	mov	r0, r4
   d426a:	b003      	add	sp, #12
   d426c:	bd30      	pop	{r4, r5, pc}
   d426e:	bf00      	nop
   d4270:	000d91f8 	.word	0x000d91f8

000d4274 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d4274:	b510      	push	{r4, lr}
   d4276:	4604      	mov	r4, r0
    }
   d4278:	f7ff ffd2 	bl	d4220 <_ZN5TimerD1Ev>
   d427c:	4620      	mov	r0, r4
   d427e:	211c      	movs	r1, #28
   d4280:	f003 fd97 	bl	d7db2 <_ZdlPvj>
   d4284:	4620      	mov	r0, r4
   d4286:	bd10      	pop	{r4, pc}

000d4288 <_ZN10CloudClass9keepAliveEj>:
    		spark_process();
    }
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
   d4288:	b507      	push	{r0, r1, r2, lr}
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d428a:	2208      	movs	r2, #8
        particle::protocol::connection_properties_t conn_prop = {0};
   d428c:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   d428e:	f8ad 2000 	strh.w	r2, [sp]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4292:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d4296:	2201      	movs	r2, #1
   d4298:	9201      	str	r2, [sp, #4]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d429a:	4341      	muls	r1, r0
   d429c:	466a      	mov	r2, sp
   d429e:	4618      	mov	r0, r3
        particle::protocol::connection_properties_t conn_prop = {0};
   d42a0:	f8ad 3002 	strh.w	r3, [sp, #2]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d42a4:	f002 f94c 	bl	d6540 <spark_set_connection_property>
    }
   d42a8:	b003      	add	sp, #12
   d42aa:	f85d fb04 	ldr.w	pc, [sp], #4

000d42ae <_ZN5Timer12changePeriodEjj>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d42ae:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d42b0:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d42b2:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d42b4:	2100      	movs	r1, #0
   d42b6:	b140      	cbz	r0, d42ca <_ZN5Timer12changePeriodEjj+0x1c>
   d42b8:	e9cd 2100 	strd	r2, r1, [sp]
   d42bc:	460a      	mov	r2, r1
   d42be:	2103      	movs	r1, #3
   d42c0:	f001 fec0 	bl	d6044 <os_timer_change>
   d42c4:	fab0 f080 	clz	r0, r0
   d42c8:	0940      	lsrs	r0, r0, #5
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d42ca:	b003      	add	sp, #12
   d42cc:	f85d fb04 	ldr.w	pc, [sp], #4

000d42d0 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d42d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d42d2:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d42d4:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d42d8:	f88d 3000 	strb.w	r3, [sp]
   d42dc:	f88d 5004 	strb.w	r5, [sp, #4]
   d42e0:	68e4      	ldr	r4, [r4, #12]
   d42e2:	233c      	movs	r3, #60	; 0x3c
   d42e4:	47a0      	blx	r4
	}
   d42e6:	b003      	add	sp, #12
   d42e8:	bd30      	pop	{r4, r5, pc}
	...

000d42ec <_Z14UbidotsHandlerPKcS0_>:
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d42ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d42ee:	4d17      	ldr	r5, [pc, #92]	; (d434c <_Z14UbidotsHandlerPKcS0_+0x60>)
  if (!data) {                                                                    // First check to see if there is any data
   d42f0:	460c      	mov	r4, r1
   d42f2:	b959      	cbnz	r1, d430c <_Z14UbidotsHandlerPKcS0_+0x20>
    if (sysStatus.verboseMode) {
   d42f4:	7a6b      	ldrb	r3, [r5, #9]
   d42f6:	b1f3      	cbz	r3, d4336 <_Z14UbidotsHandlerPKcS0_+0x4a>
      publishQueue.publish("Ubidots Hook", "No Data", PRIVATE);
   d42f8:	4b15      	ldr	r3, [pc, #84]	; (d4350 <_Z14UbidotsHandlerPKcS0_+0x64>)
   d42fa:	f88d 1000 	strb.w	r1, [sp]
   d42fe:	781b      	ldrb	r3, [r3, #0]
   d4300:	4a14      	ldr	r2, [pc, #80]	; (d4354 <_Z14UbidotsHandlerPKcS0_+0x68>)
    publishQueue.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d4302:	4915      	ldr	r1, [pc, #84]	; (d4358 <_Z14UbidotsHandlerPKcS0_+0x6c>)
   d4304:	4815      	ldr	r0, [pc, #84]	; (d435c <_Z14UbidotsHandlerPKcS0_+0x70>)
   d4306:	f7ff ffe3 	bl	d42d0 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d430a:	e014      	b.n	d4336 <_Z14UbidotsHandlerPKcS0_+0x4a>
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
   d430c:	4608      	mov	r0, r1
   d430e:	f004 fd19 	bl	d8d44 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d4312:	38c8      	subs	r0, #200	; 0xc8
   d4314:	2801      	cmp	r0, #1
    if (sysStatus.verboseMode) {
   d4316:	7a6b      	ldrb	r3, [r5, #9]
  if ((responseCode == 200) || (responseCode == 201))
   d4318:	d80f      	bhi.n	d433a <_Z14UbidotsHandlerPKcS0_+0x4e>
    if (sysStatus.verboseMode) {
   d431a:	b14b      	cbz	r3, d4330 <_Z14UbidotsHandlerPKcS0_+0x44>
        val_(0) {
   d431c:	2300      	movs	r3, #0
      publishQueue.publish("State", "Response Received", PRIVATE);
   d431e:	f88d 3000 	strb.w	r3, [sp]
   d4322:	4b0b      	ldr	r3, [pc, #44]	; (d4350 <_Z14UbidotsHandlerPKcS0_+0x64>)
   d4324:	4a0e      	ldr	r2, [pc, #56]	; (d4360 <_Z14UbidotsHandlerPKcS0_+0x74>)
   d4326:	781b      	ldrb	r3, [r3, #0]
   d4328:	490e      	ldr	r1, [pc, #56]	; (d4364 <_Z14UbidotsHandlerPKcS0_+0x78>)
   d432a:	480c      	ldr	r0, [pc, #48]	; (d435c <_Z14UbidotsHandlerPKcS0_+0x70>)
   d432c:	f7ff ffd0 	bl	d42d0 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    dataInFlight = false;    
   d4330:	4b0d      	ldr	r3, [pc, #52]	; (d4368 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4332:	2200      	movs	r2, #0
   d4334:	701a      	strb	r2, [r3, #0]
}
   d4336:	b003      	add	sp, #12
   d4338:	bd30      	pop	{r4, r5, pc}
  else if (sysStatus.verboseMode) {  
   d433a:	2b00      	cmp	r3, #0
   d433c:	d0fb      	beq.n	d4336 <_Z14UbidotsHandlerPKcS0_+0x4a>
   d433e:	2300      	movs	r3, #0
    publishQueue.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d4340:	f88d 3000 	strb.w	r3, [sp]
   d4344:	4b02      	ldr	r3, [pc, #8]	; (d4350 <_Z14UbidotsHandlerPKcS0_+0x64>)
   d4346:	4622      	mov	r2, r4
   d4348:	781b      	ldrb	r3, [r3, #0]
   d434a:	e7da      	b.n	d4302 <_Z14UbidotsHandlerPKcS0_+0x16>
   d434c:	2003e598 	.word	0x2003e598
   d4350:	2003e459 	.word	0x2003e459
   d4354:	000d9023 	.word	0x000d9023
   d4358:	000d902b 	.word	0x000d902b
   d435c:	2003e4d8 	.word	0x2003e4d8
   d4360:	000d9038 	.word	0x000d9038
   d4364:	000d904a 	.word	0x000d904a
   d4368:	2003e488 	.word	0x2003e488

000d436c <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
   d436c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d436e:	4916      	ldr	r1, [pc, #88]	; (d43c8 <_Z14setVerboseMode6String+0x5c>)
   d4370:	4605      	mov	r5, r0
   d4372:	f003 f8a2 	bl	d74ba <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4376:	4604      	mov	r4, r0
   d4378:	b188      	cbz	r0, d439e <_Z14setVerboseMode6String+0x32>
  {
    sysStatus.verboseMode = true;
   d437a:	4b14      	ldr	r3, [pc, #80]	; (d43cc <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d437c:	4a14      	ldr	r2, [pc, #80]	; (d43d0 <_Z14setVerboseMode6String+0x64>)
   d437e:	4915      	ldr	r1, [pc, #84]	; (d43d4 <_Z14setVerboseMode6String+0x68>)
   d4380:	4815      	ldr	r0, [pc, #84]	; (d43d8 <_Z14setVerboseMode6String+0x6c>)
    sysStatus.verboseMode = true;
   d4382:	2401      	movs	r4, #1
   d4384:	725c      	strb	r4, [r3, #9]
   d4386:	2300      	movs	r3, #0
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d4388:	f88d 3000 	strb.w	r3, [sp]
   d438c:	4b13      	ldr	r3, [pc, #76]	; (d43dc <_Z14setVerboseMode6String+0x70>)
   d438e:	781b      	ldrb	r3, [r3, #0]
   d4390:	f7ff ff9e 	bl	d42d0 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d4394:	4b12      	ldr	r3, [pc, #72]	; (d43e0 <_Z14setVerboseMode6String+0x74>)
    return 1;
   d4396:	4620      	mov	r0, r4
    sysStatusWriteNeeded = true;
   d4398:	701c      	strb	r4, [r3, #0]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
    sysStatusWriteNeeded = true;
    return 1;
  }
  else return 0;
}
   d439a:	b003      	add	sp, #12
   d439c:	bd30      	pop	{r4, r5, pc}
   d439e:	4911      	ldr	r1, [pc, #68]	; (d43e4 <_Z14setVerboseMode6String+0x78>)
   d43a0:	4628      	mov	r0, r5
   d43a2:	f003 f88a 	bl	d74ba <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d43a6:	2800      	cmp	r0, #0
   d43a8:	d0f7      	beq.n	d439a <_Z14setVerboseMode6String+0x2e>
    sysStatus.verboseMode = false;
   d43aa:	4b08      	ldr	r3, [pc, #32]	; (d43cc <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d43ac:	4a0e      	ldr	r2, [pc, #56]	; (d43e8 <_Z14setVerboseMode6String+0x7c>)
    sysStatus.verboseMode = false;
   d43ae:	725c      	strb	r4, [r3, #9]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d43b0:	4b0a      	ldr	r3, [pc, #40]	; (d43dc <_Z14setVerboseMode6String+0x70>)
   d43b2:	f88d 4000 	strb.w	r4, [sp]
   d43b6:	781b      	ldrb	r3, [r3, #0]
   d43b8:	4906      	ldr	r1, [pc, #24]	; (d43d4 <_Z14setVerboseMode6String+0x68>)
   d43ba:	4807      	ldr	r0, [pc, #28]	; (d43d8 <_Z14setVerboseMode6String+0x6c>)
   d43bc:	f7ff ff88 	bl	d42d0 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d43c0:	4b07      	ldr	r3, [pc, #28]	; (d43e0 <_Z14setVerboseMode6String+0x74>)
   d43c2:	2001      	movs	r0, #1
   d43c4:	7018      	strb	r0, [r3, #0]
    return 1;
   d43c6:	e7e8      	b.n	d439a <_Z14setVerboseMode6String+0x2e>
   d43c8:	000d901f 	.word	0x000d901f
   d43cc:	2003e598 	.word	0x2003e598
   d43d0:	000d9050 	.word	0x000d9050
   d43d4:	000d9073 	.word	0x000d9073
   d43d8:	2003e4d8 	.word	0x2003e4d8
   d43dc:	2003e459 	.word	0x2003e459
   d43e0:	2003e5c0 	.word	0x2003e5c0
   d43e4:	000d9061 	.word	0x000d9061
   d43e8:	000d9063 	.word	0x000d9063

000d43ec <_Z16setThirdPartySim6String>:
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
}


int setThirdPartySim(String command) // Function to force sending data in current hour
{
   d43ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43ee:	491c      	ldr	r1, [pc, #112]	; (d4460 <_Z16setThirdPartySim6String+0x74>)
   d43f0:	4605      	mov	r5, r0
   d43f2:	f003 f862 	bl	d74ba <_ZNK6String6equalsEPKc>
  if (command == "1")
   d43f6:	4604      	mov	r4, r0
   d43f8:	b300      	cbz	r0, d443c <_Z16setThirdPartySim6String+0x50>
  {
    sysStatus.thirdPartySim = true;
   d43fa:	4c1a      	ldr	r4, [pc, #104]	; (d4464 <_Z16setThirdPartySim6String+0x78>)
   d43fc:	2301      	movs	r3, #1
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d43fe:	6860      	ldr	r0, [r4, #4]
    sysStatus.thirdPartySim = true;
   d4400:	7063      	strb	r3, [r4, #1]
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d4402:	f7ff ff41 	bl	d4288 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d4406:	6863      	ldr	r3, [r4, #4]
   d4408:	4817      	ldr	r0, [pc, #92]	; (d4468 <_Z16setThirdPartySim6String+0x7c>)
   d440a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d440e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4412:	4359      	muls	r1, r3
   d4414:	f7ff ff4b 	bl	d42ae <_ZN5Timer12changePeriodEjj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4418:	f002 f85a 	bl	d64d0 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to 3rd Party Sim", PRIVATE);
   d441c:	b148      	cbz	r0, d4432 <_Z16setThirdPartySim6String+0x46>
   d441e:	2300      	movs	r3, #0
   d4420:	f88d 3000 	strb.w	r3, [sp]
   d4424:	4b11      	ldr	r3, [pc, #68]	; (d446c <_Z16setThirdPartySim6String+0x80>)
   d4426:	4a12      	ldr	r2, [pc, #72]	; (d4470 <_Z16setThirdPartySim6String+0x84>)
   d4428:	781b      	ldrb	r3, [r3, #0]
   d442a:	4912      	ldr	r1, [pc, #72]	; (d4474 <_Z16setThirdPartySim6String+0x88>)
   d442c:	4812      	ldr	r0, [pc, #72]	; (d4478 <_Z16setThirdPartySim6String+0x8c>)
   d442e:	f7ff ff4f 	bl	d42d0 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d4432:	4b12      	ldr	r3, [pc, #72]	; (d447c <_Z16setThirdPartySim6String+0x90>)
   d4434:	2001      	movs	r0, #1
   d4436:	7018      	strb	r0, [r3, #0]
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
    sysStatusWriteNeeded = true;
    return 1;
  }
  else return 0;
}
   d4438:	b003      	add	sp, #12
   d443a:	bd30      	pop	{r4, r5, pc}
   d443c:	4910      	ldr	r1, [pc, #64]	; (d4480 <_Z16setThirdPartySim6String+0x94>)
   d443e:	4628      	mov	r0, r5
   d4440:	f003 f83b 	bl	d74ba <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4444:	2800      	cmp	r0, #0
   d4446:	d0f7      	beq.n	d4438 <_Z16setThirdPartySim6String+0x4c>
    sysStatus.thirdPartySim = false;
   d4448:	4b06      	ldr	r3, [pc, #24]	; (d4464 <_Z16setThirdPartySim6String+0x78>)
   d444a:	705c      	strb	r4, [r3, #1]
   d444c:	f002 f840 	bl	d64d0 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
   d4450:	2800      	cmp	r0, #0
   d4452:	d0ee      	beq.n	d4432 <_Z16setThirdPartySim6String+0x46>
   d4454:	4b05      	ldr	r3, [pc, #20]	; (d446c <_Z16setThirdPartySim6String+0x80>)
   d4456:	f88d 4000 	strb.w	r4, [sp]
   d445a:	781b      	ldrb	r3, [r3, #0]
   d445c:	4a09      	ldr	r2, [pc, #36]	; (d4484 <_Z16setThirdPartySim6String+0x98>)
   d445e:	e7e4      	b.n	d442a <_Z16setThirdPartySim6String+0x3e>
   d4460:	000d901f 	.word	0x000d901f
   d4464:	2003e598 	.word	0x2003e598
   d4468:	2003e4ac 	.word	0x2003e4ac
   d446c:	2003e459 	.word	0x2003e459
   d4470:	000d9078 	.word	0x000d9078
   d4474:	000d9073 	.word	0x000d9073
   d4478:	2003e4d8 	.word	0x2003e4d8
   d447c:	2003e5c0 	.word	0x2003e5c0
   d4480:	000d9061 	.word	0x000d9061
   d4484:	000d908d 	.word	0x000d908d

000d4488 <_Z12setKeepAlive6String>:


int setKeepAlive(String command)
{
   d4488:	b510      	push	{r4, lr}
   d448a:	b0c4      	sub	sp, #272	; 0x110
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d448c:	6800      	ldr	r0, [r0, #0]
   d448e:	220a      	movs	r2, #10
   d4490:	a903      	add	r1, sp, #12
   d4492:	f004 fd93 	bl	d8fbc <strtol>
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d4496:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   d449a:	d822      	bhi.n	d44e2 <_Z12setKeepAlive6String+0x5a>
  sysStatus.keepAlive = tempTime;
   d449c:	4c12      	ldr	r4, [pc, #72]	; (d44e8 <_Z12setKeepAlive6String+0x60>)
   d449e:	6060      	str	r0, [r4, #4]
  Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d44a0:	f7ff fef2 	bl	d4288 <_ZN10CloudClass9keepAliveEj>
  keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d44a4:	6863      	ldr	r3, [r4, #4]
   d44a6:	4811      	ldr	r0, [pc, #68]	; (d44ec <_Z12setKeepAlive6String+0x64>)
   d44a8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d44ac:	4359      	muls	r1, r3
   d44ae:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d44b2:	f7ff fefc 	bl	d42ae <_ZN5Timer12changePeriodEjj>
  snprintf(data, sizeof(data), "Keep Alive set to %i sec",sysStatus.keepAlive);
   d44b6:	6863      	ldr	r3, [r4, #4]
   d44b8:	4a0d      	ldr	r2, [pc, #52]	; (d44f0 <_Z12setKeepAlive6String+0x68>)
   d44ba:	f44f 7180 	mov.w	r1, #256	; 0x100
   d44be:	a804      	add	r0, sp, #16
   d44c0:	f002 f8be 	bl	d6640 <snprintf>
   d44c4:	2300      	movs	r3, #0
  publishQueue.publish("Keep Alive",data, PRIVATE);
   d44c6:	f88d 3000 	strb.w	r3, [sp]
   d44ca:	4b0a      	ldr	r3, [pc, #40]	; (d44f4 <_Z12setKeepAlive6String+0x6c>)
   d44cc:	490a      	ldr	r1, [pc, #40]	; (d44f8 <_Z12setKeepAlive6String+0x70>)
   d44ce:	781b      	ldrb	r3, [r3, #0]
   d44d0:	480a      	ldr	r0, [pc, #40]	; (d44fc <_Z12setKeepAlive6String+0x74>)
   d44d2:	aa04      	add	r2, sp, #16
   d44d4:	f7ff fefc 	bl	d42d0 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatusWriteNeeded = true;                                                           // Need to store to FRAM back in the main loop
   d44d8:	4b09      	ldr	r3, [pc, #36]	; (d4500 <_Z12setKeepAlive6String+0x78>)
   d44da:	2001      	movs	r0, #1
   d44dc:	7018      	strb	r0, [r3, #0]
  return 1;
}
   d44de:	b044      	add	sp, #272	; 0x110
   d44e0:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d44e2:	2000      	movs	r0, #0
   d44e4:	e7fb      	b.n	d44de <_Z12setKeepAlive6String+0x56>
   d44e6:	bf00      	nop
   d44e8:	2003e598 	.word	0x2003e598
   d44ec:	2003e4ac 	.word	0x2003e4ac
   d44f0:	000d90a1 	.word	0x000d90a1
   d44f4:	2003e459 	.word	0x2003e459
   d44f8:	000d90ba 	.word	0x000d90ba
   d44fc:	2003e4d8 	.word	0x2003e4d8
   d4500:	2003e5c0 	.word	0x2003e5c0

000d4504 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                                                 // Default settings for the device - connected, not-low power and always on
   d4504:	b507      	push	{r0, r1, r2, lr}
   d4506:	f001 ffe3 	bl	d64d0 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d450a:	b148      	cbz	r0, d4520 <_Z18loadSystemDefaultsv+0x1c>
   d450c:	2300      	movs	r3, #0
   d450e:	f88d 3000 	strb.w	r3, [sp]
   d4512:	4b0b      	ldr	r3, [pc, #44]	; (d4540 <_Z18loadSystemDefaultsv+0x3c>)
   d4514:	4a0b      	ldr	r2, [pc, #44]	; (d4544 <_Z18loadSystemDefaultsv+0x40>)
   d4516:	781b      	ldrb	r3, [r3, #0]
   d4518:	490b      	ldr	r1, [pc, #44]	; (d4548 <_Z18loadSystemDefaultsv+0x44>)
   d451a:	480c      	ldr	r0, [pc, #48]	; (d454c <_Z18loadSystemDefaultsv+0x48>)
   d451c:	f7ff fed8 	bl	d42d0 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.keepAlive = 120;
   d4520:	4a0b      	ldr	r2, [pc, #44]	; (d4550 <_Z18loadSystemDefaultsv+0x4c>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4522:	480c      	ldr	r0, [pc, #48]	; (d4554 <_Z18loadSystemDefaultsv+0x50>)
   d4524:	2378      	movs	r3, #120	; 0x78
   d4526:	6053      	str	r3, [r2, #4]
  sysStatus.verboseMode = false;
   d4528:	2300      	movs	r3, #0
  sysStatus.structuresVersion = 1;
   d452a:	2101      	movs	r1, #1
  sysStatus.verboseMode = false;
   d452c:	7253      	strb	r3, [r2, #9]
  sysStatus.lowBatteryMode = false;
   d452e:	7293      	strb	r3, [r2, #10]
   d4530:	2328      	movs	r3, #40	; 0x28
  sysStatus.structuresVersion = 1;
   d4532:	8011      	strh	r1, [r2, #0]
}
   d4534:	b003      	add	sp, #12
   d4536:	f85d eb04 	ldr.w	lr, [sp], #4
   d453a:	f000 bdac 	b.w	d5096 <_ZN6MB85RC9writeDataEjPKhj>
   d453e:	bf00      	nop
   d4540:	2003e459 	.word	0x2003e459
   d4544:	000d90c5 	.word	0x000d90c5
   d4548:	000d9073 	.word	0x000d9073
   d454c:	2003e4d8 	.word	0x2003e4d8
   d4550:	2003e598 	.word	0x2003e598
   d4554:	2003e48c 	.word	0x2003e48c

000d4558 <_Z17checkSystemValuesv>:
void checkSystemValues() {                                                                  // Checks to ensure that all system values are in reasonable range 
   d4558:	b510      	push	{r4, lr}
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d455a:	4c12      	ldr	r4, [pc, #72]	; (d45a4 <_Z17checkSystemValuesv+0x4c>)
   d455c:	7a23      	ldrb	r3, [r4, #8]
   d455e:	2b01      	cmp	r3, #1
   d4560:	d904      	bls.n	d456c <_Z17checkSystemValuesv+0x14>
   d4562:	f001 ffb5 	bl	d64d0 <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d4566:	b1d8      	cbz	r0, d45a0 <_Z17checkSystemValuesv+0x48>
   d4568:	2301      	movs	r3, #1
   d456a:	7223      	strb	r3, [r4, #8]
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   d456c:	6863      	ldr	r3, [r4, #4]
   d456e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   d4572:	bf84      	itt	hi
   d4574:	f44f 7316 	movhi.w	r3, #600	; 0x258
   d4578:	6063      	strhi	r3, [r4, #4]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d457a:	7a63      	ldrb	r3, [r4, #9]
   d457c:	2b01      	cmp	r3, #1
   d457e:	bf84      	itt	hi
   d4580:	2300      	movhi	r3, #0
   d4582:	7263      	strbhi	r3, [r4, #9]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
   d4584:	7aa3      	ldrb	r3, [r4, #10]
   d4586:	2b01      	cmp	r3, #1
   d4588:	bf84      	itt	hi
   d458a:	2300      	movhi	r3, #0
   d458c:	72a3      	strbhi	r3, [r4, #10]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d458e:	6963      	ldr	r3, [r4, #20]
   d4590:	2bff      	cmp	r3, #255	; 0xff
   d4592:	bf84      	itt	hi
   d4594:	2300      	movhi	r3, #0
   d4596:	6163      	strhi	r3, [r4, #20]
  sysStatusWriteNeeded = true;
   d4598:	4b03      	ldr	r3, [pc, #12]	; (d45a8 <_Z17checkSystemValuesv+0x50>)
   d459a:	2201      	movs	r2, #1
   d459c:	701a      	strb	r2, [r3, #0]
}
   d459e:	bd10      	pop	{r4, pc}
    else sysStatus.connectedStatus = false;
   d45a0:	7220      	strb	r0, [r4, #8]
   d45a2:	e7e3      	b.n	d456c <_Z17checkSystemValuesv+0x14>
   d45a4:	2003e598 	.word	0x2003e598
   d45a8:	2003e5c0 	.word	0x2003e5c0

000d45ac <_Z11petWatchdogv>:
{
   d45ac:	b507      	push	{r0, r1, r2, lr}
  digitalWrite(donePin, HIGH);                                                              // Pet the watchdog
   d45ae:	2101      	movs	r1, #1
   d45b0:	2005      	movs	r0, #5
   d45b2:	f003 fb88 	bl	d7cc6 <digitalWrite>
  digitalWrite(donePin, LOW);
   d45b6:	2100      	movs	r1, #0
   d45b8:	2005      	movs	r0, #5
   d45ba:	f003 fb84 	bl	d7cc6 <digitalWrite>
  watchdogFlag = false;
   d45be:	4a09      	ldr	r2, [pc, #36]	; (d45e4 <_Z11petWatchdogv+0x38>)
   d45c0:	2300      	movs	r3, #0
   d45c2:	7013      	strb	r3, [r2, #0]
  if (Particle.connected && sysStatus.verboseMode) publishQueue.publish("Watchdog","Petted",PRIVATE);
   d45c4:	4a08      	ldr	r2, [pc, #32]	; (d45e8 <_Z11petWatchdogv+0x3c>)
   d45c6:	7a52      	ldrb	r2, [r2, #9]
   d45c8:	b142      	cbz	r2, d45dc <_Z11petWatchdogv+0x30>
   d45ca:	f88d 3000 	strb.w	r3, [sp]
   d45ce:	4b07      	ldr	r3, [pc, #28]	; (d45ec <_Z11petWatchdogv+0x40>)
   d45d0:	4a07      	ldr	r2, [pc, #28]	; (d45f0 <_Z11petWatchdogv+0x44>)
   d45d2:	781b      	ldrb	r3, [r3, #0]
   d45d4:	4907      	ldr	r1, [pc, #28]	; (d45f4 <_Z11petWatchdogv+0x48>)
   d45d6:	4808      	ldr	r0, [pc, #32]	; (d45f8 <_Z11petWatchdogv+0x4c>)
   d45d8:	f7ff fe7a 	bl	d42d0 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d45dc:	b003      	add	sp, #12
   d45de:	f85d fb04 	ldr.w	pc, [sp], #4
   d45e2:	bf00      	nop
   d45e4:	2003e5d1 	.word	0x2003e5d1
   d45e8:	2003e598 	.word	0x2003e598
   d45ec:	2003e459 	.word	0x2003e459
   d45f0:	000d90dd 	.word	0x000d90dd
   d45f4:	000d90e4 	.word	0x000d90e4
   d45f8:	2003e4d8 	.word	0x2003e4d8

000d45fc <_Z9sendEventv>:
{
   d45fc:	b500      	push	{lr}
  snprintf(data, sizeof(data), "{\"sensorOne\":%4.1f}", I_LightingFirstFloor);
   d45fe:	4b10      	ldr	r3, [pc, #64]	; (d4640 <_Z9sendEventv+0x44>)
{
   d4600:	b09d      	sub	sp, #116	; 0x74
  snprintf(data, sizeof(data), "{\"sensorOne\":%4.1f}", I_LightingFirstFloor);
   d4602:	6818      	ldr	r0, [r3, #0]
   d4604:	f003 fe66 	bl	d82d4 <__aeabi_f2d>
   d4608:	4a0e      	ldr	r2, [pc, #56]	; (d4644 <_Z9sendEventv+0x48>)
   d460a:	e9cd 0100 	strd	r0, r1, [sp]
   d460e:	2164      	movs	r1, #100	; 0x64
   d4610:	a803      	add	r0, sp, #12
   d4612:	f002 f815 	bl	d6640 <snprintf>
  publishQueue.publish("powermonitoring_hook", data, PRIVATE);
   d4616:	2300      	movs	r3, #0
   d4618:	f88d 3000 	strb.w	r3, [sp]
   d461c:	4b0a      	ldr	r3, [pc, #40]	; (d4648 <_Z9sendEventv+0x4c>)
   d461e:	490b      	ldr	r1, [pc, #44]	; (d464c <_Z9sendEventv+0x50>)
   d4620:	781b      	ldrb	r3, [r3, #0]
   d4622:	480b      	ldr	r0, [pc, #44]	; (d4650 <_Z9sendEventv+0x54>)
   d4624:	aa03      	add	r2, sp, #12
   d4626:	f7ff fe53 	bl	d42d0 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                                      // set the data inflight flag
   d462a:	4b0a      	ldr	r3, [pc, #40]	; (d4654 <_Z9sendEventv+0x58>)
   d462c:	2201      	movs	r2, #1
   d462e:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4630:	f001 fd68 	bl	d6104 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d4634:	4b08      	ldr	r3, [pc, #32]	; (d4658 <_Z9sendEventv+0x5c>)
   d4636:	6018      	str	r0, [r3, #0]
}
   d4638:	b01d      	add	sp, #116	; 0x74
   d463a:	f85d fb04 	ldr.w	pc, [sp], #4
   d463e:	bf00      	nop
   d4640:	2003e3fc 	.word	0x2003e3fc
   d4644:	000d90ed 	.word	0x000d90ed
   d4648:	2003e459 	.word	0x2003e459
   d464c:	000d9101 	.word	0x000d9101
   d4650:	2003e4d8 	.word	0x2003e4d8
   d4654:	2003e488 	.word	0x2003e488
   d4658:	2003e5d4 	.word	0x2003e5d4

000d465c <_Z20Single_Phase_MonitorN12Load_Monitor7CT_DataEPfS1_>:
void Single_Phase_Monitor(Load_Monitor::CT_Property_Struct Load_Name, float *Current_rms,float *Power){
   d465c:	b530      	push	{r4, r5, lr}
   d465e:	b087      	sub	sp, #28
   d4660:	ac02      	add	r4, sp, #8
   d4662:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   i_rms=KUMVA_IO.calcIrms(Load_Name);
   d4666:	ab06      	add	r3, sp, #24
   d4668:	e913 0003 	ldmdb	r3, {r0, r1}
   d466c:	e88d 0003 	stmia.w	sp, {r0, r1}
   d4670:	480f      	ldr	r0, [pc, #60]	; (d46b0 <_Z20Single_Phase_MonitorN12Load_Monitor7CT_DataEPfS1_+0x54>)
   d4672:	e894 000c 	ldmia.w	r4, {r2, r3}
   d4676:	f000 fbdf 	bl	d4e38 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE>
   d467a:	ec55 4b10 	vmov	r4, r5, d0
  *Current_rms=i_rms;
   d467e:	ee10 0a10 	vmov	r0, s0
   d4682:	4629      	mov	r1, r5
   d4684:	f004 f94e 	bl	d8924 <__aeabi_d2f>
   d4688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d468a:	6018      	str	r0, [r3, #0]
  *Power=((i_rms*Vrms)/1000); //in kW
   d468c:	4b09      	ldr	r3, [pc, #36]	; (d46b4 <_Z20Single_Phase_MonitorN12Load_Monitor7CT_DataEPfS1_+0x58>)
   d468e:	4620      	mov	r0, r4
   d4690:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4694:	4629      	mov	r1, r5
   d4696:	f003 fe75 	bl	d8384 <__aeabi_dmul>
   d469a:	4b07      	ldr	r3, [pc, #28]	; (d46b8 <_Z20Single_Phase_MonitorN12Load_Monitor7CT_DataEPfS1_+0x5c>)
   d469c:	2200      	movs	r2, #0
   d469e:	f003 ff9b 	bl	d85d8 <__aeabi_ddiv>
   d46a2:	f004 f93f 	bl	d8924 <__aeabi_d2f>
   d46a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d46a8:	6018      	str	r0, [r3, #0]
}
   d46aa:	b007      	add	sp, #28
   d46ac:	bd30      	pop	{r4, r5, pc}
   d46ae:	bf00      	nop
   d46b0:	2003e400 	.word	0x2003e400
   d46b4:	2003e2b0 	.word	0x2003e2b0
   d46b8:	408f4000 	.word	0x408f4000

000d46bc <_Z22publishStateTransitionv>:
{
   d46bc:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d46be:	4d11      	ldr	r5, [pc, #68]	; (d4704 <_Z22publishStateTransitionv+0x48>)
   d46c0:	4c11      	ldr	r4, [pc, #68]	; (d4708 <_Z22publishStateTransitionv+0x4c>)
   d46c2:	4912      	ldr	r1, [pc, #72]	; (d470c <_Z22publishStateTransitionv+0x50>)
   d46c4:	782a      	ldrb	r2, [r5, #0]
   d46c6:	7820      	ldrb	r0, [r4, #0]
{
   d46c8:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d46ca:	231a      	movs	r3, #26
   d46cc:	fb03 1202 	mla	r2, r3, r2, r1
   d46d0:	9200      	str	r2, [sp, #0]
   d46d2:	fb03 1300 	mla	r3, r3, r0, r1
   d46d6:	4a0e      	ldr	r2, [pc, #56]	; (d4710 <_Z22publishStateTransitionv+0x54>)
   d46d8:	2128      	movs	r1, #40	; 0x28
   d46da:	a802      	add	r0, sp, #8
   d46dc:	f001 ffb0 	bl	d6640 <snprintf>
  oldState = state;
   d46e0:	782b      	ldrb	r3, [r5, #0]
   d46e2:	7023      	strb	r3, [r4, #0]
   d46e4:	f001 fef4 	bl	d64d0 <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d46e8:	b148      	cbz	r0, d46fe <_Z22publishStateTransitionv+0x42>
   d46ea:	2300      	movs	r3, #0
   d46ec:	f88d 3000 	strb.w	r3, [sp]
   d46f0:	4b08      	ldr	r3, [pc, #32]	; (d4714 <_Z22publishStateTransitionv+0x58>)
   d46f2:	4909      	ldr	r1, [pc, #36]	; (d4718 <_Z22publishStateTransitionv+0x5c>)
   d46f4:	781b      	ldrb	r3, [r3, #0]
   d46f6:	4809      	ldr	r0, [pc, #36]	; (d471c <_Z22publishStateTransitionv+0x60>)
   d46f8:	aa02      	add	r2, sp, #8
   d46fa:	f7ff fde9 	bl	d42d0 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d46fe:	b00d      	add	sp, #52	; 0x34
   d4700:	bd30      	pop	{r4, r5, pc}
   d4702:	bf00      	nop
   d4704:	2003e594 	.word	0x2003e594
   d4708:	2003e4c8 	.word	0x2003e4c8
   d470c:	2003e2b8 	.word	0x2003e2b8
   d4710:	000d9116 	.word	0x000d9116
   d4714:	2003e459 	.word	0x2003e459
   d4718:	000d9124 	.word	0x000d9124
   d471c:	2003e4d8 	.word	0x2003e4d8

000d4720 <_Z17getBatteryContextv>:


void getBatteryContext() 
{
   d4720:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4722:	4d0d      	ldr	r5, [pc, #52]	; (d4758 <_Z17getBatteryContextv+0x38>)
   d4724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   d4726:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4728:	ac01      	add	r4, sp, #4
   d472a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d472c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-
  // sysStatus.batteryState = System.batteryState();
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d4730:	4b0a      	ldr	r3, [pc, #40]	; (d475c <_Z17getBatteryContextv+0x3c>)
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4732:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d4736:	7c1b      	ldrb	r3, [r3, #16]
   d4738:	4809      	ldr	r0, [pc, #36]	; (d4760 <_Z17getBatteryContextv+0x40>)
   d473a:	aa08      	add	r2, sp, #32
   d473c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d4740:	2110      	movs	r1, #16
   d4742:	f853 3c1c 	ldr.w	r3, [r3, #-28]
   d4746:	4a07      	ldr	r2, [pc, #28]	; (d4764 <_Z17getBatteryContextv+0x44>)
   d4748:	f001 ff7a 	bl	d6640 <snprintf>
  sysStatusWriteNeeded = true;
   d474c:	4b06      	ldr	r3, [pc, #24]	; (d4768 <_Z17getBatteryContextv+0x48>)
   d474e:	2201      	movs	r2, #1
   d4750:	701a      	strb	r2, [r3, #0]
}
   d4752:	b009      	add	sp, #36	; 0x24
   d4754:	bd30      	pop	{r4, r5, pc}
   d4756:	bf00      	nop
   d4758:	000d9248 	.word	0x000d9248
   d475c:	2003e598 	.word	0x2003e598
   d4760:	2003e45a 	.word	0x2003e45a
   d4764:	000d9324 	.word	0x000d9324
   d4768:	2003e5c0 	.word	0x2003e5c0

000d476c <_Z16takeMeasurementsv>:
bool takeMeasurements() {
   d476c:	b5f0      	push	{r4, r5, r6, r7, lr}
  sensorData.validData = false;
   d476e:	4e25      	ldr	r6, [pc, #148]	; (d4804 <_Z16takeMeasurementsv+0x98>)
  Single_Phase_Monitor(Lighting_meter_FirstFloor,&I_LightingFirstFloor,&P_LightingFirstFloor);
   d4770:	4c25      	ldr	r4, [pc, #148]	; (d4808 <_Z16takeMeasurementsv+0x9c>)
  current_irms = I_LightingFirstFloor;                                  // Calculate Irms only
   d4772:	4f26      	ldr	r7, [pc, #152]	; (d480c <_Z16takeMeasurementsv+0xa0>)
bool takeMeasurements() {
   d4774:	b087      	sub	sp, #28
  sensorData.validData = false;
   d4776:	2300      	movs	r3, #0
   d4778:	f886 3020 	strb.w	r3, [r6, #32]
  getBatteryContext();                    
   d477c:	f7ff ffd0 	bl	d4720 <_Z17getBatteryContextv>
  Single_Phase_Monitor(Lighting_meter_FirstFloor,&I_LightingFirstFloor,&P_LightingFirstFloor);
   d4780:	4a23      	ldr	r2, [pc, #140]	; (d4810 <_Z16takeMeasurementsv+0xa4>)
   d4782:	4b24      	ldr	r3, [pc, #144]	; (d4814 <_Z16takeMeasurementsv+0xa8>)
   d4784:	9400      	str	r4, [sp, #0]
   d4786:	9201      	str	r2, [sp, #4]
   d4788:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   d478a:	f7ff ff67 	bl	d465c <_Z20Single_Phase_MonitorN12Load_Monitor7CT_DataEPfS1_>
  current_irms = I_LightingFirstFloor;                                  // Calculate Irms only
   d478e:	6820      	ldr	r0, [r4, #0]
   d4790:	f003 fda0 	bl	d82d4 <__aeabi_f2d>
   d4794:	4602      	mov	r2, r0
   d4796:	460b      	mov	r3, r1
   d4798:	e9c7 2300 	strd	r2, r3, [r7]
  if (abs(current_irms - previous_irms) > 0.5){
   d479c:	4b1e      	ldr	r3, [pc, #120]	; (d4818 <_Z16takeMeasurementsv+0xac>)
   d479e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47a2:	f003 fc37 	bl	d8014 <__aeabi_dsub>
   d47a6:	2200      	movs	r2, #0
   d47a8:	2300      	movs	r3, #0
   d47aa:	4604      	mov	r4, r0
   d47ac:	460d      	mov	r5, r1
   d47ae:	f004 f879 	bl	d88a4 <__aeabi_dcmpgt>
   d47b2:	b910      	cbnz	r0, d47ba <_Z16takeMeasurementsv+0x4e>
   d47b4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   d47b8:	461d      	mov	r5, r3
   d47ba:	4b18      	ldr	r3, [pc, #96]	; (d481c <_Z16takeMeasurementsv+0xb0>)
   d47bc:	2200      	movs	r2, #0
   d47be:	4620      	mov	r0, r4
   d47c0:	4629      	mov	r1, r5
   d47c2:	f004 f86f 	bl	d88a4 <__aeabi_dcmpgt>
   d47c6:	b1d0      	cbz	r0, d47fe <_Z16takeMeasurementsv+0x92>
    sensorData.validData = true;
   d47c8:	2401      	movs	r4, #1
   d47ca:	f886 4020 	strb.w	r4, [r6, #32]
    sensorData.timeStamp = Time.now();
   d47ce:	f003 f828 	bl	d7822 <_ZN9TimeClass3nowEv>
    sensorDataWriteNeeded = true;
   d47d2:	4b13      	ldr	r3, [pc, #76]	; (d4820 <_Z16takeMeasurementsv+0xb4>)
    sensorData.timeStamp = Time.now();
   d47d4:	61b0      	str	r0, [r6, #24]
    publishQueue.publish("sensor_data",String(current_irms),PRIVATE);
   d47d6:	ed97 0b00 	vldr	d0, [r7]
   d47da:	2106      	movs	r1, #6
   d47dc:	a802      	add	r0, sp, #8
    sensorDataWriteNeeded = true;
   d47de:	701c      	strb	r4, [r3, #0]
    publishQueue.publish("sensor_data",String(current_irms),PRIVATE);
   d47e0:	f002 fe57 	bl	d7492 <_ZN6StringC1Edi>
   d47e4:	2300      	movs	r3, #0
   d47e6:	f88d 3000 	strb.w	r3, [sp]
   d47ea:	4b0e      	ldr	r3, [pc, #56]	; (d4824 <_Z16takeMeasurementsv+0xb8>)
   d47ec:	9a02      	ldr	r2, [sp, #8]
   d47ee:	781b      	ldrb	r3, [r3, #0]
   d47f0:	490d      	ldr	r1, [pc, #52]	; (d4828 <_Z16takeMeasurementsv+0xbc>)
   d47f2:	480e      	ldr	r0, [pc, #56]	; (d482c <_Z16takeMeasurementsv+0xc0>)
   d47f4:	f7ff fd6c 	bl	d42d0 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d47f8:	a802      	add	r0, sp, #8
   d47fa:	f002 fdbf 	bl	d737c <_ZN6StringD1Ev>
}
   d47fe:	2001      	movs	r0, #1
   d4800:	b007      	add	sp, #28
   d4802:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4804:	2003e560 	.word	0x2003e560
   d4808:	2003e3fc 	.word	0x2003e3fc
   d480c:	2003e480 	.word	0x2003e480
   d4810:	2003e448 	.word	0x2003e448
   d4814:	2003e438 	.word	0x2003e438
   d4818:	2003e4d0 	.word	0x2003e4d0
   d481c:	3fe00000 	.word	0x3fe00000
   d4820:	2003e584 	.word	0x2003e584
   d4824:	2003e459 	.word	0x2003e459
   d4828:	000d9135 	.word	0x000d9135
   d482c:	2003e4d8 	.word	0x2003e4d8

000d4830 <loop>:
void loop() {
   d4830:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch(state) {
   d4832:	4c66      	ldr	r4, [pc, #408]	; (d49cc <loop+0x19c>)
   d4834:	7823      	ldrb	r3, [r4, #0]
   d4836:	3b01      	subs	r3, #1
   d4838:	2b04      	cmp	r3, #4
   d483a:	d82e      	bhi.n	d489a <loop+0x6a>
   d483c:	e8df f003 	tbb	[pc, r3]
   d4840:	4d1703a0 	.word	0x4d1703a0
   d4844:	6e          	.byte	0x6e
   d4845:	00          	.byte	0x00
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4846:	4b62      	ldr	r3, [pc, #392]	; (d49d0 <loop+0x1a0>)
   d4848:	7a5b      	ldrb	r3, [r3, #9]
   d484a:	b12b      	cbz	r3, d4858 <loop+0x28>
   d484c:	4b61      	ldr	r3, [pc, #388]	; (d49d4 <loop+0x1a4>)
   d484e:	781b      	ldrb	r3, [r3, #0]
   d4850:	2b02      	cmp	r3, #2
   d4852:	d001      	beq.n	d4858 <loop+0x28>
   d4854:	f7ff ff32 	bl	d46bc <_Z22publishStateTransitionv>
    if (!(Time.now() % wakeBoundary)) state = MEASURING_STATE;                                                     
   d4858:	f002 ffe3 	bl	d7822 <_ZN9TimeClass3nowEv>
   d485c:	230a      	movs	r3, #10
   d485e:	fb90 f2f3 	sdiv	r2, r0, r3
   d4862:	fb02 0313 	mls	r3, r2, r3, r0
   d4866:	b9c3      	cbnz	r3, d489a <loop+0x6a>
   d4868:	2303      	movs	r3, #3
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d486a:	7023      	strb	r3, [r4, #0]
   d486c:	e015      	b.n	d489a <loop+0x6a>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d486e:	4b58      	ldr	r3, [pc, #352]	; (d49d0 <loop+0x1a0>)
   d4870:	7a5b      	ldrb	r3, [r3, #9]
   d4872:	b12b      	cbz	r3, d4880 <loop+0x50>
   d4874:	4b57      	ldr	r3, [pc, #348]	; (d49d4 <loop+0x1a4>)
   d4876:	781b      	ldrb	r3, [r3, #0]
   d4878:	2b03      	cmp	r3, #3
   d487a:	d001      	beq.n	d4880 <loop+0x50>
   d487c:	f7ff ff1e 	bl	d46bc <_Z22publishStateTransitionv>
    if (!takeMeasurements())
   d4880:	f7ff ff74 	bl	d476c <_Z16takeMeasurementsv>
   d4884:	b908      	cbnz	r0, d488a <loop+0x5a>
      state = IDLE_STATE;
   d4886:	2302      	movs	r3, #2
   d4888:	e7ef      	b.n	d486a <loop+0x3a>
      state = REPORTING_STATE;
   d488a:	2304      	movs	r3, #4
   d488c:	7023      	strb	r3, [r4, #0]
      previous_irms = current_irms;
   d488e:	4b52      	ldr	r3, [pc, #328]	; (d49d8 <loop+0x1a8>)
   d4890:	e9d3 0100 	ldrd	r0, r1, [r3]
   d4894:	4b51      	ldr	r3, [pc, #324]	; (d49dc <loop+0x1ac>)
   d4896:	e9c3 0100 	strd	r0, r1, [r3]
  rtc.loop();                                                                               // keeps the clock up to date
   d489a:	4851      	ldr	r0, [pc, #324]	; (d49e0 <loop+0x1b0>)
   d489c:	f000 ffd8 	bl	d5850 <_ZN8MCP794104loopEv>
  if (watchdogFlag) petWatchdog();                                                          // Watchdog flag is raised - time to pet the watchdog
   d48a0:	4b50      	ldr	r3, [pc, #320]	; (d49e4 <loop+0x1b4>)
   d48a2:	781b      	ldrb	r3, [r3, #0]
   d48a4:	b10b      	cbz	r3, d48aa <loop+0x7a>
   d48a6:	f7ff fe81 	bl	d45ac <_Z11petWatchdogv>
  if (sysStatusWriteNeeded) {
   d48aa:	4c4f      	ldr	r4, [pc, #316]	; (d49e8 <loop+0x1b8>)
   d48ac:	7823      	ldrb	r3, [r4, #0]
   d48ae:	b13b      	cbz	r3, d48c0 <loop+0x90>
   d48b0:	2328      	movs	r3, #40	; 0x28
   d48b2:	4a47      	ldr	r2, [pc, #284]	; (d49d0 <loop+0x1a0>)
   d48b4:	484d      	ldr	r0, [pc, #308]	; (d49ec <loop+0x1bc>)
   d48b6:	2101      	movs	r1, #1
   d48b8:	f000 fbed 	bl	d5096 <_ZN6MB85RC9writeDataEjPKhj>
    sysStatusWriteNeeded = false;
   d48bc:	2300      	movs	r3, #0
   d48be:	7023      	strb	r3, [r4, #0]
  if (sensorDataWriteNeeded) {
   d48c0:	4c4b      	ldr	r4, [pc, #300]	; (d49f0 <loop+0x1c0>)
   d48c2:	7823      	ldrb	r3, [r4, #0]
   d48c4:	b13b      	cbz	r3, d48d6 <loop+0xa6>
   d48c6:	2324      	movs	r3, #36	; 0x24
   d48c8:	4a4a      	ldr	r2, [pc, #296]	; (d49f4 <loop+0x1c4>)
   d48ca:	4848      	ldr	r0, [pc, #288]	; (d49ec <loop+0x1bc>)
   d48cc:	21a0      	movs	r1, #160	; 0xa0
   d48ce:	f000 fbe2 	bl	d5096 <_ZN6MB85RC9writeDataEjPKhj>
    sensorDataWriteNeeded = false;
   d48d2:	2300      	movs	r3, #0
   d48d4:	7023      	strb	r3, [r4, #0]
}
   d48d6:	b003      	add	sp, #12
   d48d8:	bd30      	pop	{r4, r5, pc}
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();               // Reporting - hourly or on command
   d48da:	4b3d      	ldr	r3, [pc, #244]	; (d49d0 <loop+0x1a0>)
   d48dc:	7a5b      	ldrb	r3, [r3, #9]
   d48de:	b12b      	cbz	r3, d48ec <loop+0xbc>
   d48e0:	4b3c      	ldr	r3, [pc, #240]	; (d49d4 <loop+0x1a4>)
   d48e2:	781b      	ldrb	r3, [r3, #0]
   d48e4:	2b04      	cmp	r3, #4
   d48e6:	d001      	beq.n	d48ec <loop+0xbc>
   d48e8:	f7ff fee8 	bl	d46bc <_Z22publishStateTransitionv>
   d48ec:	f001 fdf0 	bl	d64d0 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d48f0:	b168      	cbz	r0, d490e <loop+0xde>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d48f2:	f002 ffa7 	bl	d7844 <_ZN9TimeClass4hourEv>
   d48f6:	280c      	cmp	r0, #12
   d48f8:	d105      	bne.n	d4906 <loop+0xd6>
   d48fa:	f001 fde9 	bl	d64d0 <spark_cloud_flag_connected>
        if (!connected()) {
   d48fe:	b110      	cbz	r0, d4906 <loop+0xd6>
        return spark_sync_time(NULL);
   d4900:	2000      	movs	r0, #0
   d4902:	f001 fe05 	bl	d6510 <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
   d4906:	f7ff fe79 	bl	d45fc <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d490a:	2305      	movs	r3, #5
   d490c:	e7ad      	b.n	d486a <loop+0x3a>
      state = ERROR_STATE;
   d490e:	2301      	movs	r3, #1
   d4910:	7023      	strb	r3, [r4, #0]
   d4912:	f001 fbf7 	bl	d6104 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4916:	4b38      	ldr	r3, [pc, #224]	; (d49f8 <loop+0x1c8>)
   d4918:	6018      	str	r0, [r3, #0]
   d491a:	e7be      	b.n	d489a <loop+0x6a>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d491c:	4b2c      	ldr	r3, [pc, #176]	; (d49d0 <loop+0x1a0>)
   d491e:	7a5b      	ldrb	r3, [r3, #9]
   d4920:	b12b      	cbz	r3, d492e <loop+0xfe>
   d4922:	4b2c      	ldr	r3, [pc, #176]	; (d49d4 <loop+0x1a4>)
   d4924:	781b      	ldrb	r3, [r3, #0]
   d4926:	2b05      	cmp	r3, #5
   d4928:	d001      	beq.n	d492e <loop+0xfe>
   d492a:	f7ff fec7 	bl	d46bc <_Z22publishStateTransitionv>
    if (!dataInFlight && (Time.now() % wakeBoundary))                                       // Response received back to IDLE state - make sure we don't allow repetivie reporting events
   d492e:	4b33      	ldr	r3, [pc, #204]	; (d49fc <loop+0x1cc>)
   d4930:	781b      	ldrb	r3, [r3, #0]
   d4932:	b943      	cbnz	r3, d4946 <loop+0x116>
   d4934:	f002 ff75 	bl	d7822 <_ZN9TimeClass3nowEv>
   d4938:	230a      	movs	r3, #10
   d493a:	fb90 f2f3 	sdiv	r2, r0, r3
   d493e:	fb02 0313 	mls	r3, r2, r3, r0
   d4942:	2b00      	cmp	r3, #0
   d4944:	d19f      	bne.n	d4886 <loop+0x56>
   d4946:	f001 fbdd 	bl	d6104 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {                                   // If it takes too long - will need to reset
   d494a:	4b2d      	ldr	r3, [pc, #180]	; (d4a00 <loop+0x1d0>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	1ac0      	subs	r0, r0, r3
   d4950:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d4954:	4298      	cmp	r0, r3
   d4956:	d9a0      	bls.n	d489a <loop+0x6a>
   d4958:	f001 fbd4 	bl	d6104 <HAL_Timer_Get_Milli_Seconds>
   d495c:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d495e:	f88d 3000 	strb.w	r3, [sp]
      resetTimeStamp = millis();
   d4962:	4d25      	ldr	r5, [pc, #148]	; (d49f8 <loop+0x1c8>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4964:	4b27      	ldr	r3, [pc, #156]	; (d4a04 <loop+0x1d4>)
   d4966:	4a28      	ldr	r2, [pc, #160]	; (d4a08 <loop+0x1d8>)
   d4968:	781b      	ldrb	r3, [r3, #0]
   d496a:	4928      	ldr	r1, [pc, #160]	; (d4a0c <loop+0x1dc>)
      resetTimeStamp = millis();
   d496c:	6028      	str	r0, [r5, #0]
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d496e:	4828      	ldr	r0, [pc, #160]	; (d4a10 <loop+0x1e0>)
   d4970:	f7ff fcae 	bl	d42d0 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      state = ERROR_STATE;                                                                  // Response timed out
   d4974:	2301      	movs	r3, #1
   d4976:	7023      	strb	r3, [r4, #0]
   d4978:	f001 fbc4 	bl	d6104 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d497c:	6028      	str	r0, [r5, #0]
   d497e:	e78c      	b.n	d489a <loop+0x6a>
    if (state != oldState) publishStateTransition();
   d4980:	4b14      	ldr	r3, [pc, #80]	; (d49d4 <loop+0x1a4>)
   d4982:	781b      	ldrb	r3, [r3, #0]
   d4984:	2b01      	cmp	r3, #1
   d4986:	d001      	beq.n	d498c <loop+0x15c>
   d4988:	f7ff fe98 	bl	d46bc <_Z22publishStateTransitionv>
   d498c:	f001 fbba 	bl	d6104 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d4990:	4b19      	ldr	r3, [pc, #100]	; (d49f8 <loop+0x1c8>)
   d4992:	681b      	ldr	r3, [r3, #0]
   d4994:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d4998:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d499c:	4283      	cmp	r3, r0
   d499e:	f4bf af7c 	bcs.w	d489a <loop+0x6a>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d49a2:	f001 fd95 	bl	d64d0 <spark_cloud_flag_connected>
      if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE); // Brodcast Reset Action
   d49a6:	b148      	cbz	r0, d49bc <loop+0x18c>
   d49a8:	2300      	movs	r3, #0
   d49aa:	f88d 3000 	strb.w	r3, [sp]
   d49ae:	4b15      	ldr	r3, [pc, #84]	; (d4a04 <loop+0x1d4>)
   d49b0:	4a18      	ldr	r2, [pc, #96]	; (d4a14 <loop+0x1e4>)
   d49b2:	781b      	ldrb	r3, [r3, #0]
   d49b4:	4918      	ldr	r1, [pc, #96]	; (d4a18 <loop+0x1e8>)
   d49b6:	4816      	ldr	r0, [pc, #88]	; (d4a10 <loop+0x1e0>)
   d49b8:	f7ff fc8a 	bl	d42d0 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      delay(2000);
   d49bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d49c0:	f001 fe86 	bl	d66d0 <delay>
      System.reset();
   d49c4:	f002 fdb3 	bl	d752e <_ZN11SystemClass5resetEv>
   d49c8:	e767      	b.n	d489a <loop+0x6a>
   d49ca:	bf00      	nop
   d49cc:	2003e594 	.word	0x2003e594
   d49d0:	2003e598 	.word	0x2003e598
   d49d4:	2003e4c8 	.word	0x2003e4c8
   d49d8:	2003e480 	.word	0x2003e480
   d49dc:	2003e4d0 	.word	0x2003e4d0
   d49e0:	2003e514 	.word	0x2003e514
   d49e4:	2003e5d1 	.word	0x2003e5d1
   d49e8:	2003e5c0 	.word	0x2003e5c0
   d49ec:	2003e48c 	.word	0x2003e48c
   d49f0:	2003e584 	.word	0x2003e584
   d49f4:	2003e560 	.word	0x2003e560
   d49f8:	2003e510 	.word	0x2003e510
   d49fc:	2003e488 	.word	0x2003e488
   d4a00:	2003e5d4 	.word	0x2003e5d4
   d4a04:	2003e459 	.word	0x2003e459
   d4a08:	000d96b8 	.word	0x000d96b8
   d4a0c:	000d9141 	.word	0x000d9141
   d4a10:	2003e4d8 	.word	0x2003e4d8
   d4a14:	000d915a 	.word	0x000d915a
   d4a18:	000d904a 	.word	0x000d904a

000d4a1c <setup>:
void setup() {
   d4a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d4a20:	2100      	movs	r1, #0
void setup() {
   d4a22:	b0b8      	sub	sp, #224	; 0xe0
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d4a24:	2008      	movs	r0, #8
   d4a26:	f003 f93d 	bl	d7ca4 <pinMode>
  pinMode(donePin,OUTPUT);                                                                  // Allows us to pet the watchdog
   d4a2a:	2101      	movs	r1, #1
   d4a2c:	2005      	movs	r0, #5
   d4a2e:	f003 f939 	bl	d7ca4 <pinMode>
  petWatchdog();                                                                            // Pet the watchdog - This will reset the watchdog time period AND 
   d4a32:	f7ff fdbb 	bl	d45ac <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                                          // The watchdog timer will signal us and we have to respond
   d4a36:	2300      	movs	r3, #0
   d4a38:	9300      	str	r3, [sp, #0]
   d4a3a:	2201      	movs	r2, #1
   d4a3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4a40:	4975      	ldr	r1, [pc, #468]	; (d4c18 <setup+0x1fc>)
   d4a42:	2008      	movs	r0, #8
   d4a44:	f002 fa88 	bl	d6f58 <_Z15attachInterrupttPFvvE13InterruptModeah>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4a48:	4b74      	ldr	r3, [pc, #464]	; (d4c1c <setup+0x200>)
   d4a4a:	aa08      	add	r2, sp, #32
   d4a4c:	f103 0510 	add.w	r5, r3, #16
   d4a50:	4617      	mov	r7, r2
   d4a52:	6818      	ldr	r0, [r3, #0]
   d4a54:	6859      	ldr	r1, [r3, #4]
   d4a56:	4614      	mov	r4, r2
   d4a58:	c403      	stmia	r4!, {r0, r1}
   d4a5a:	3308      	adds	r3, #8
   d4a5c:	42ab      	cmp	r3, r5
   d4a5e:	4622      	mov	r2, r4
   d4a60:	d1f7      	bne.n	d4a52 <setup+0x36>
   d4a62:	8819      	ldrh	r1, [r3, #0]
   d4a64:	789b      	ldrb	r3, [r3, #2]
   d4a66:	70a3      	strb	r3, [r4, #2]
   d4a68:	8021      	strh	r1, [r4, #0]
   d4a6a:	222d      	movs	r2, #45	; 0x2d
   d4a6c:	2100      	movs	r1, #0
  state = INITIALIZATION_STATE;
   d4a6e:	4c6c      	ldr	r4, [pc, #432]	; (d4c20 <setup+0x204>)
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4a70:	f10d 0033 	add.w	r0, sp, #51	; 0x33
  state = INITIALIZATION_STATE;
   d4a74:	2500      	movs	r5, #0
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4a76:	f004 f9b1 	bl	d8ddc <memset>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d4a7a:	a804      	add	r0, sp, #16
  state = INITIALIZATION_STATE;
   d4a7c:	7025      	strb	r5, [r4, #0]
   d4a7e:	f001 fd2f 	bl	d64e0 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4a82:	462b      	mov	r3, r5
   d4a84:	227d      	movs	r2, #125	; 0x7d
   d4a86:	a918      	add	r1, sp, #96	; 0x60
   d4a88:	a804      	add	r0, sp, #16
   d4a8a:	f002 fd28 	bl	d74de <_ZNK6String8getBytesEPhjj>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d4a8e:	462b      	mov	r3, r5
   d4a90:	462a      	mov	r2, r5
   d4a92:	4964      	ldr	r1, [pc, #400]	; (d4c24 <setup+0x208>)
   d4a94:	e9cd 5500 	strd	r5, r5, [sp]
   d4a98:	a818      	add	r0, sp, #96	; 0x60
   d4a9a:	f001 fd31 	bl	d6500 <spark_subscribe>
        return _variable(varKey, var, STRING);
   d4a9e:	4962      	ldr	r1, [pc, #392]	; (d4c28 <setup+0x20c>)
   d4aa0:	4862      	ldr	r0, [pc, #392]	; (d4c2c <setup+0x210>)
   d4aa2:	f7ff fb86 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4aa6:	4962      	ldr	r1, [pc, #392]	; (d4c30 <setup+0x214>)
   d4aa8:	4862      	ldr	r0, [pc, #392]	; (d4c34 <setup+0x218>)
   d4aaa:	f7ff fb82 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4aae:	4962      	ldr	r1, [pc, #392]	; (d4c38 <setup+0x21c>)
   d4ab0:	4862      	ldr	r0, [pc, #392]	; (d4c3c <setup+0x220>)
   d4ab2:	f7ff fb7e 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4ab6:	4962      	ldr	r1, [pc, #392]	; (d4c40 <setup+0x224>)
   d4ab8:	4862      	ldr	r0, [pc, #392]	; (d4c44 <setup+0x228>)
   d4aba:	f7ff fb7a 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4abe:	4962      	ldr	r1, [pc, #392]	; (d4c48 <setup+0x22c>)
   d4ac0:	4862      	ldr	r0, [pc, #392]	; (d4c4c <setup+0x230>)
   d4ac2:	f7ff fb76 	bl	d41b2 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4ac6:	4962      	ldr	r1, [pc, #392]	; (d4c50 <setup+0x234>)
   d4ac8:	4862      	ldr	r0, [pc, #392]	; (d4c54 <setup+0x238>)
   d4aca:	462b      	mov	r3, r5
   d4acc:	2202      	movs	r2, #2
   d4ace:	f001 fce7 	bl	d64a0 <spark_variable>
   d4ad2:	462b      	mov	r3, r5
   d4ad4:	4960      	ldr	r1, [pc, #384]	; (d4c58 <setup+0x23c>)
   d4ad6:	4861      	ldr	r0, [pc, #388]	; (d4c5c <setup+0x240>)
   d4ad8:	2201      	movs	r2, #1
   d4ada:	f001 fce1 	bl	d64a0 <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4ade:	4a60      	ldr	r2, [pc, #384]	; (d4c60 <setup+0x244>)
   d4ae0:	4960      	ldr	r1, [pc, #384]	; (d4c64 <setup+0x248>)
   d4ae2:	4861      	ldr	r0, [pc, #388]	; (d4c68 <setup+0x24c>)
   d4ae4:	f001 fef1 	bl	d68ca <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4ae8:	4a60      	ldr	r2, [pc, #384]	; (d4c6c <setup+0x250>)
   d4aea:	4961      	ldr	r1, [pc, #388]	; (d4c70 <setup+0x254>)
   d4aec:	485e      	ldr	r0, [pc, #376]	; (d4c68 <setup+0x24c>)
   d4aee:	f001 feec 	bl	d68ca <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4af2:	4a60      	ldr	r2, [pc, #384]	; (d4c74 <setup+0x258>)
   d4af4:	4960      	ldr	r1, [pc, #384]	; (d4c78 <setup+0x25c>)
   d4af6:	485c      	ldr	r0, [pc, #368]	; (d4c68 <setup+0x24c>)
   d4af8:	f001 fee7 	bl	d68ca <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4afc:	4a57      	ldr	r2, [pc, #348]	; (d4c5c <setup+0x240>)
   d4afe:	495f      	ldr	r1, [pc, #380]	; (d4c7c <setup+0x260>)
   d4b00:	4859      	ldr	r0, [pc, #356]	; (d4c68 <setup+0x24c>)
   d4b02:	f001 fee2 	bl	d68ca <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  rtc.setup();                                                        // Start the real time clock
   d4b06:	485e      	ldr	r0, [pc, #376]	; (d4c80 <setup+0x264>)
   d4b08:	f000 fd9c 	bl	d5644 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d4b0c:	4629      	mov	r1, r5
   d4b0e:	485c      	ldr	r0, [pc, #368]	; (d4c80 <setup+0x264>)
   d4b10:	f000 fed5 	bl	d58be <_ZN8MCP7941010clearAlarmEi>
  if (!sht31.begin(0x44)) {                                                                 // Start the i2c connected SHT-31 sensor
   d4b14:	485b      	ldr	r0, [pc, #364]	; (d4c84 <setup+0x268>)
   d4b16:	2144      	movs	r1, #68	; 0x44
   d4b18:	f001 fa57 	bl	d5fca <_ZN14Adafruit_SHT315beginEh>
   d4b1c:	b948      	cbnz	r0, d4b32 <setup+0x116>
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   d4b1e:	495a      	ldr	r1, [pc, #360]	; (d4c88 <setup+0x26c>)
   d4b20:	4638      	mov	r0, r7
   d4b22:	f004 f991 	bl	d8e48 <strcpy>
    state = ERROR_STATE;
   d4b26:	2301      	movs	r3, #1
   d4b28:	7023      	strb	r3, [r4, #0]
   d4b2a:	f001 faeb 	bl	d6104 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4b2e:	4b57      	ldr	r3, [pc, #348]	; (d4c8c <setup+0x270>)
   d4b30:	6018      	str	r0, [r3, #0]
  fram.begin();                                                                             // Initialize the FRAM module
   d4b32:	4857      	ldr	r0, [pc, #348]	; (d4c90 <setup+0x274>)
   d4b34:	f000 fa22 	bl	d4f7c <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4b38:	2301      	movs	r3, #1
   d4b3a:	4855      	ldr	r0, [pc, #340]	; (d4c90 <setup+0x274>)
   d4b3c:	f10d 020f 	add.w	r2, sp, #15
   d4b40:	2100      	movs	r1, #0
   d4b42:	f000 fa5d 	bl	d5000 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                                                   // Check to see if the memory map in the sketch matches the data on the chip
   d4b46:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d4b4a:	2b02      	cmp	r3, #2
   d4b4c:	d037      	beq.n	d4bbe <setup+0x1a2>
    fram.erase();                                                                           // Reset the FRAM to correct the issue
   d4b4e:	4850      	ldr	r0, [pc, #320]	; (d4c90 <setup+0x274>)
   d4b50:	f000 fa1e 	bl	d4f90 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4b54:	4a4f      	ldr	r2, [pc, #316]	; (d4c94 <setup+0x278>)
   d4b56:	484e      	ldr	r0, [pc, #312]	; (d4c90 <setup+0x274>)
   d4b58:	2304      	movs	r3, #4
   d4b5a:	2100      	movs	r1, #0
   d4b5c:	f000 fa9b 	bl	d5096 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4b60:	2301      	movs	r3, #1
   d4b62:	484b      	ldr	r0, [pc, #300]	; (d4c90 <setup+0x274>)
   d4b64:	f10d 020f 	add.w	r2, sp, #15
   d4b68:	2100      	movs	r1, #0
   d4b6a:	f000 fa49 	bl	d5000 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;                              // Device will not work without FRAM
   d4b6e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d4b72:	2b02      	cmp	r3, #2
   d4b74:	d020      	beq.n	d4bb8 <setup+0x19c>
   d4b76:	2301      	movs	r3, #1
   d4b78:	7023      	strb	r3, [r4, #0]
  if (sysStatus.thirdPartySim) {
   d4b7a:	4d47      	ldr	r5, [pc, #284]	; (d4c98 <setup+0x27c>)
  checkSystemValues();                                                                      // Make sure System values are all in valid range
   d4b7c:	f7ff fcec 	bl	d4558 <_Z17checkSystemValuesv>
  if (sysStatus.thirdPartySim) {
   d4b80:	786b      	ldrb	r3, [r5, #1]
   d4b82:	b38b      	cbz	r3, d4be8 <setup+0x1cc>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4b84:	2000      	movs	r0, #0
   d4b86:	f001 facd 	bl	d6124 <hal_timer_millis>
   d4b8a:	f04f 0a00 	mov.w	sl, #0
   d4b8e:	4606      	mov	r6, r0
   d4b90:	2000      	movs	r0, #0
   d4b92:	f001 fac7 	bl	d6124 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4b96:	ebb0 0806 	subs.w	r8, r0, r6
   d4b9a:	eb61 090a 	sbc.w	r9, r1, sl
        while (_while() && !_condition()) {
   d4b9e:	2300      	movs	r3, #0
   d4ba0:	f247 522f 	movw	r2, #29999	; 0x752f
   d4ba4:	454b      	cmp	r3, r9
   d4ba6:	bf08      	it	eq
   d4ba8:	4542      	cmpeq	r2, r8
   d4baa:	d30f      	bcc.n	d4bcc <setup+0x1b0>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4bac:	f001 fc90 	bl	d64d0 <spark_cloud_flag_connected>
   d4bb0:	b960      	cbnz	r0, d4bcc <setup+0x1b0>
            spark_process();
   d4bb2:	f001 fc85 	bl	d64c0 <spark_process>
        while (_while() && !_condition()) {
   d4bb6:	e7eb      	b.n	d4b90 <setup+0x174>
      loadSystemDefaults();                                                                 // Out of the box, we need the device to be awake and connected
   d4bb8:	f7ff fca4 	bl	d4504 <_Z18loadSystemDefaultsv>
   d4bbc:	e7dd      	b.n	d4b7a <setup+0x15e>
   d4bbe:	4a36      	ldr	r2, [pc, #216]	; (d4c98 <setup+0x27c>)
   d4bc0:	4833      	ldr	r0, [pc, #204]	; (d4c90 <setup+0x274>)
   d4bc2:	2328      	movs	r3, #40	; 0x28
   d4bc4:	2101      	movs	r1, #1
   d4bc6:	f000 fa1b 	bl	d5000 <_ZN6MB85RC8readDataEjPhj>
        return t;
   d4bca:	e7d6      	b.n	d4b7a <setup+0x15e>
   d4bcc:	f001 fc80 	bl	d64d0 <spark_cloud_flag_connected>
    Particle.keepAlive(sysStatus.keepAlive);                                              // Set the keep alive value
   d4bd0:	6868      	ldr	r0, [r5, #4]
   d4bd2:	f7ff fb59 	bl	d4288 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d4bd6:	686b      	ldr	r3, [r5, #4]
   d4bd8:	4830      	ldr	r0, [pc, #192]	; (d4c9c <setup+0x280>)
   d4bda:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4bde:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4be2:	4359      	muls	r1, r3
   d4be4:	f7ff fb63 	bl	d42ae <_ZN5Timer12changePeriodEjj>
  takeMeasurements();                                                                       // For the benefit of monitoring the device
   d4be8:	f7ff fdc0 	bl	d476c <_Z16takeMeasurementsv>
  if(sysStatus.verboseMode) publishQueue.publish("Startup",StartupMessage,PRIVATE);                       // Let Particle know how the startup process went
   d4bec:	7a6b      	ldrb	r3, [r5, #9]
   d4bee:	b14b      	cbz	r3, d4c04 <setup+0x1e8>
   d4bf0:	2300      	movs	r3, #0
   d4bf2:	f88d 3000 	strb.w	r3, [sp]
   d4bf6:	4b2a      	ldr	r3, [pc, #168]	; (d4ca0 <setup+0x284>)
   d4bf8:	492a      	ldr	r1, [pc, #168]	; (d4ca4 <setup+0x288>)
   d4bfa:	781b      	ldrb	r3, [r3, #0]
   d4bfc:	482a      	ldr	r0, [pc, #168]	; (d4ca8 <setup+0x28c>)
   d4bfe:	463a      	mov	r2, r7
   d4c00:	f7ff fb66 	bl	d42d0 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;                                    // We made it throughgo let's go to idle
   d4c04:	7823      	ldrb	r3, [r4, #0]
   d4c06:	b90b      	cbnz	r3, d4c0c <setup+0x1f0>
   d4c08:	2302      	movs	r3, #2
   d4c0a:	7023      	strb	r3, [r4, #0]
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
   d4c0c:	a804      	add	r0, sp, #16
   d4c0e:	f002 fbb5 	bl	d737c <_ZN6StringD1Ev>
}
   d4c12:	b038      	add	sp, #224	; 0xe0
   d4c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d4c18:	000d40c9 	.word	0x000d40c9
   d4c1c:	000d9264 	.word	0x000d9264
   d4c20:	2003e594 	.word	0x2003e594
   d4c24:	000d42ed 	.word	0x000d42ed
   d4c28:	000d92a4 	.word	0x000d92a4
   d4c2c:	000d916e 	.word	0x000d916e
   d4c30:	2003e5c1 	.word	0x2003e5c1
   d4c34:	000d9176 	.word	0x000d9176
   d4c38:	2003e49c 	.word	0x2003e49c
   d4c3c:	000d9182 	.word	0x000d9182
   d4c40:	2003e46a 	.word	0x2003e46a
   d4c44:	000d918b 	.word	0x000d918b
   d4c48:	2003e45a 	.word	0x2003e45a
   d4c4c:	000d9193 	.word	0x000d9193
   d4c50:	2003e59c 	.word	0x2003e59c
   d4c54:	000d91a2 	.word	0x000d91a2
   d4c58:	2003e599 	.word	0x2003e599
   d4c5c:	000d907f 	.word	0x000d907f
   d4c60:	000d91b1 	.word	0x000d91b1
   d4c64:	000d40f1 	.word	0x000d40f1
   d4c68:	000d689f 	.word	0x000d689f
   d4c6c:	000d91bd 	.word	0x000d91bd
   d4c70:	000d436d 	.word	0x000d436d
   d4c74:	000d90ba 	.word	0x000d90ba
   d4c78:	000d4489 	.word	0x000d4489
   d4c7c:	000d43ed 	.word	0x000d43ed
   d4c80:	2003e514 	.word	0x2003e514
   d4c84:	2003e588 	.word	0x2003e588
   d4c88:	000d91ca 	.word	0x000d91ca
   d4c8c:	2003e510 	.word	0x2003e510
   d4c90:	2003e48c 	.word	0x2003e48c
   d4c94:	000d92ac 	.word	0x000d92ac
   d4c98:	2003e598 	.word	0x2003e598
   d4c9c:	2003e4ac 	.word	0x2003e4ac
   d4ca0:	2003e459 	.word	0x2003e459
   d4ca4:	000d91e7 	.word	0x000d91e7
   d4ca8:	2003e4d8 	.word	0x2003e4d8

000d4cac <_GLOBAL__sub_I_sysStatus>:
        val_(val) {
   d4cac:	4b45      	ldr	r3, [pc, #276]	; (d4dc4 <_GLOBAL__sub_I_sysStatus+0x118>)
}
   d4cae:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4cb0:	2701      	movs	r7, #1
   d4cb2:	701f      	strb	r7, [r3, #0]
   d4cb4:	4b44      	ldr	r3, [pc, #272]	; (d4dc8 <_GLOBAL__sub_I_sysStatus+0x11c>)
              error_(SYSTEM_ERROR_NONE) {
   d4cb6:	4c45      	ldr	r4, [pc, #276]	; (d4dcc <_GLOBAL__sub_I_sysStatus+0x120>)
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d4cb8:	4e45      	ldr	r6, [pc, #276]	; (d4dd0 <_GLOBAL__sub_I_sysStatus+0x124>)
   d4cba:	2202      	movs	r2, #2
   d4cbc:	701a      	strb	r2, [r3, #0]
struct sensor_data_struct {                                                               // Here we define the structure for collecting and storing data from the sensors
   d4cbe:	4b45      	ldr	r3, [pc, #276]	; (d4dd4 <_GLOBAL__sub_I_sysStatus+0x128>)
   d4cc0:	4a45      	ldr	r2, [pc, #276]	; (d4dd8 <_GLOBAL__sub_I_sysStatus+0x12c>)
   d4cc2:	601a      	str	r2, [r3, #0]
   d4cc4:	2500      	movs	r5, #0
    SleepResult() {}
   d4cc6:	4b45      	ldr	r3, [pc, #276]	; (d4ddc <_GLOBAL__sub_I_sysStatus+0x130>)
   d4cc8:	60a3      	str	r3, [r4, #8]
}
   d4cca:	b089      	sub	sp, #36	; 0x24
              error_(SYSTEM_ERROR_NONE) {
   d4ccc:	6025      	str	r5, [r4, #0]
   d4cce:	80a5      	strh	r5, [r4, #4]
    SleepResult() {}
   d4cd0:	71a5      	strb	r5, [r4, #6]
        set_system_mode(mode);
   d4cd2:	4638      	mov	r0, r7
   d4cd4:	f001 fb8e 	bl	d63f4 <set_system_mode>
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d4cd8:	4632      	mov	r2, r6
   d4cda:	4941      	ldr	r1, [pc, #260]	; (d4de0 <_GLOBAL__sub_I_sysStatus+0x134>)
   d4cdc:	4620      	mov	r0, r4
   d4cde:	f003 f863 	bl	d7da8 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   d4ce2:	4629      	mov	r1, r5
   d4ce4:	4638      	mov	r0, r7
   d4ce6:	f001 fb95 	bl	d6414 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d4cea:	4639      	mov	r1, r7
   d4cec:	2004      	movs	r0, #4
   d4cee:	f001 f9e9 	bl	d60c4 <HAL_Feature_Set>
Adafruit_SHT31 sht31 = Adafruit_SHT31();
   d4cf2:	483c      	ldr	r0, [pc, #240]	; (d4de4 <_GLOBAL__sub_I_sysStatus+0x138>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d4cf4:	4c3c      	ldr	r4, [pc, #240]	; (d4de8 <_GLOBAL__sub_I_sysStatus+0x13c>)
   d4cf6:	f001 f945 	bl	d5f84 <_ZN14Adafruit_SHT31C1Ev>
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   d4cfa:	f003 f82d 	bl	d7d58 <_Z19__fetch_global_Wirev>
   d4cfe:	462b      	mov	r3, r5
   d4d00:	4601      	mov	r1, r0
   d4d02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d4d06:	4620      	mov	r0, r4
   d4d08:	f000 f92e 	bl	d4f68 <_ZN6MB85RCC1ER7TwoWireji>
   d4d0c:	4b37      	ldr	r3, [pc, #220]	; (d4dec <_GLOBAL__sub_I_sysStatus+0x140>)
   d4d0e:	6023      	str	r3, [r4, #0]
   d4d10:	4632      	mov	r2, r6
   d4d12:	4937      	ldr	r1, [pc, #220]	; (d4df0 <_GLOBAL__sub_I_sysStatus+0x144>)
   d4d14:	4620      	mov	r0, r4
   d4d16:	f003 f847 	bl	d7da8 <__aeabi_atexit>
MCP79410 rtc;                                                                               // Rickkas MCP79410 libarary
   d4d1a:	f003 f81d 	bl	d7d58 <_Z19__fetch_global_Wirev>
   d4d1e:	4c35      	ldr	r4, [pc, #212]	; (d4df4 <_GLOBAL__sub_I_sysStatus+0x148>)
   d4d20:	4601      	mov	r1, r0
   d4d22:	4620      	mov	r0, r4
   d4d24:	f000 fb96 	bl	d5454 <_ZN8MCP79410C1ER7TwoWire>
   d4d28:	4620      	mov	r0, r4
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d4d2a:	4c33      	ldr	r4, [pc, #204]	; (d4df8 <_GLOBAL__sub_I_sysStatus+0x14c>)
   d4d2c:	4933      	ldr	r1, [pc, #204]	; (d4dfc <_GLOBAL__sub_I_sysStatus+0x150>)
   d4d2e:	4632      	mov	r2, r6
   d4d30:	f003 f83a 	bl	d7da8 <__aeabi_atexit>
   d4d34:	4932      	ldr	r1, [pc, #200]	; (d4e00 <_GLOBAL__sub_I_sysStatus+0x154>)
   d4d36:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d4d3a:	4620      	mov	r0, r4
   d4d3c:	f001 f800 	bl	d5d40 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d4d40:	4b30      	ldr	r3, [pc, #192]	; (d4e04 <_GLOBAL__sub_I_sysStatus+0x158>)
   d4d42:	6023      	str	r3, [r4, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d4d44:	4632      	mov	r2, r6
   d4d46:	4930      	ldr	r1, [pc, #192]	; (d4e08 <_GLOBAL__sub_I_sysStatus+0x15c>)
   d4d48:	4620      	mov	r0, r4
   d4d4a:	f003 f82d 	bl	d7da8 <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d4d4e:	4b2f      	ldr	r3, [pc, #188]	; (d4e0c <_GLOBAL__sub_I_sysStatus+0x160>)
   d4d50:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d52:	af04      	add	r7, sp, #16
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4d54:	4c2e      	ldr	r4, [pc, #184]	; (d4e10 <_GLOBAL__sub_I_sysStatus+0x164>)
   d4d56:	4b2f      	ldr	r3, [pc, #188]	; (d4e14 <_GLOBAL__sub_I_sysStatus+0x168>)
   d4d58:	6023      	str	r3, [r4, #0]
   d4d5a:	e897 0003 	ldmia.w	r7, {r0, r1}
   d4d5e:	aa02      	add	r2, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d4d60:	f104 030c 	add.w	r3, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4d64:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4d68:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4d6c:	e887 0003 	stmia.w	r7, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4d70:	e892 0003 	ldmia.w	r2, {r0, r1}
   d4d74:	e883 0003 	stmia.w	r3, {r0, r1}
   d4d78:	4b27      	ldr	r3, [pc, #156]	; (d4e18 <_GLOBAL__sub_I_sysStatus+0x16c>)
   d4d7a:	6163      	str	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4d7c:	69a3      	ldr	r3, [r4, #24]
   d4d7e:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d4d80:	4b26      	ldr	r3, [pc, #152]	; (d4e1c <_GLOBAL__sub_I_sysStatus+0x170>)
   d4d82:	61a3      	str	r3, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4d84:	4a26      	ldr	r2, [pc, #152]	; (d4e20 <_GLOBAL__sub_I_sysStatus+0x174>)
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4d86:	7125      	strb	r5, [r4, #4]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4d88:	4623      	mov	r3, r4
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d4d8a:	60a5      	str	r5, [r4, #8]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d4d8c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4d90:	e9cd 5500 	strd	r5, r5, [sp]
   d4d94:	f104 0008 	add.w	r0, r4, #8
      __a = _GLIBCXX_MOVE(__b);
   d4d98:	9506      	str	r5, [sp, #24]
   d4d9a:	f001 f93b 	bl	d6014 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d4d9e:	4638      	mov	r0, r7
   d4da0:	f7ff fa34 	bl	d420c <_ZNSt14_Function_baseD1Ev>
Timer keepAliveTimer(1000, keepAliveMessage);
   d4da4:	4632      	mov	r2, r6
   d4da6:	491f      	ldr	r1, [pc, #124]	; (d4e24 <_GLOBAL__sub_I_sysStatus+0x178>)
   d4da8:	4620      	mov	r0, r4
   d4daa:	f002 fffd 	bl	d7da8 <__aeabi_atexit>
Load_Monitor::CT_Property_Struct Lighting_meter_FirstFloor={CT1_PIN, sensorConstants.sensorOneConstant};
   d4dae:	4a1e      	ldr	r2, [pc, #120]	; (d4e28 <_GLOBAL__sub_I_sysStatus+0x17c>)
   d4db0:	4b1e      	ldr	r3, [pc, #120]	; (d4e2c <_GLOBAL__sub_I_sysStatus+0x180>)
   d4db2:	7812      	ldrb	r2, [r2, #0]
   d4db4:	601a      	str	r2, [r3, #0]
   d4db6:	4a1e      	ldr	r2, [pc, #120]	; (d4e30 <_GLOBAL__sub_I_sysStatus+0x184>)
   d4db8:	e9d2 0100 	ldrd	r0, r1, [r2]
   d4dbc:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   d4dc0:	b009      	add	sp, #36	; 0x24
   d4dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4dc4:	2003e459 	.word	0x2003e459
   d4dc8:	2003e458 	.word	0x2003e458
   d4dcc:	2003e44c 	.word	0x2003e44c
   d4dd0:	2003e3f8 	.word	0x2003e3f8
   d4dd4:	2003e560 	.word	0x2003e560
   d4dd8:	42b5d1ec 	.word	0x42b5d1ec
   d4ddc:	ffff0000 	.word	0xffff0000
   d4de0:	000d41a3 	.word	0x000d41a3
   d4de4:	2003e588 	.word	0x2003e588
   d4de8:	2003e48c 	.word	0x2003e48c
   d4dec:	000d9234 	.word	0x000d9234
   d4df0:	000d4141 	.word	0x000d4141
   d4df4:	2003e514 	.word	0x2003e514
   d4df8:	2003e4d8 	.word	0x2003e4d8
   d4dfc:	000d51df 	.word	0x000d51df
   d4e00:	2003f400 	.word	0x2003f400
   d4e04:	000d920c 	.word	0x000d920c
   d4e08:	000d4119 	.word	0x000d4119
   d4e0c:	000d41bd 	.word	0x000d41bd
   d4e10:	2003e4ac 	.word	0x2003e4ac
   d4e14:	000d91f8 	.word	0x000d91f8
   d4e18:	000d40d9 	.word	0x000d40d9
   d4e1c:	000d40d5 	.word	0x000d40d5
   d4e20:	000d4169 	.word	0x000d4169
   d4e24:	000d4221 	.word	0x000d4221
   d4e28:	2003e2a8 	.word	0x2003e2a8
   d4e2c:	2003e438 	.word	0x2003e438
   d4e30:	2003e530 	.word	0x2003e530
   d4e34:	00000000 	.word	0x00000000

000d4e38 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE>:
#include "WProgram.h"
#endif


//--------------------------------------------------------------------------------------
double Load_Monitor::calcIrms(CT_Property_Struct data){
   d4e38:	b082      	sub	sp, #8
   d4e3a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4e3e:	a90a      	add	r1, sp, #40	; 0x28
   d4e40:	e881 000c 	stmia.w	r1, {r2, r3}
    
    double Irms=0;
    
    offsetI = ADC_COUNTS>>1;
   d4e44:	4b34      	ldr	r3, [pc, #208]	; (d4f18 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xe0>)
  {
    sampleI = analogRead(data.CT_PIN);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset,
    //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d4e46:	f8df b0d4 	ldr.w	fp, [pc, #212]	; d4f1c <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xe4>
    offsetI = ADC_COUNTS>>1;
   d4e4a:	2200      	movs	r2, #0
   d4e4c:	e9c0 2304 	strd	r2, r3, [r0, #16]
double Load_Monitor::calcIrms(CT_Property_Struct data){
   d4e50:	4604      	mov	r4, r0
    offsetI = ADC_COUNTS>>1;
   d4e52:	f240 657e 	movw	r5, #1662	; 0x67e
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d4e56:	f04f 0a00 	mov.w	sl, #0
    sampleI = analogRead(data.CT_PIN);
   d4e5a:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
   d4e5e:	f002 ff4b 	bl	d7cf8 <analogRead>
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d4e62:	e9d4 8904 	ldrd	r8, r9, [r4, #16]
    sampleI = analogRead(data.CT_PIN);
   d4e66:	6020      	str	r0, [r4, #0]
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d4e68:	f003 fa22 	bl	d82b0 <__aeabi_i2d>
   d4e6c:	4642      	mov	r2, r8
   d4e6e:	464b      	mov	r3, r9
   d4e70:	4606      	mov	r6, r0
   d4e72:	460f      	mov	r7, r1
   d4e74:	f003 f8ce 	bl	d8014 <__aeabi_dsub>
   d4e78:	4652      	mov	r2, sl
   d4e7a:	465b      	mov	r3, fp
   d4e7c:	f003 fa82 	bl	d8384 <__aeabi_dmul>
   d4e80:	4642      	mov	r2, r8
   d4e82:	464b      	mov	r3, r9
   d4e84:	f003 f8c8 	bl	d8018 <__adddf3>
   d4e88:	4602      	mov	r2, r0
   d4e8a:	460b      	mov	r3, r1
   d4e8c:	e9c4 2304 	strd	r2, r3, [r4, #16]
    filteredI = sampleI - offsetI;
   d4e90:	4630      	mov	r0, r6
   d4e92:	4639      	mov	r1, r7
   d4e94:	f003 f8be 	bl	d8014 <__aeabi_dsub>
   d4e98:	4602      	mov	r2, r0
   d4e9a:	460b      	mov	r3, r1
   d4e9c:	e9c4 2302 	strd	r2, r3, [r4, #8]

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d4ea0:	f003 fa70 	bl	d8384 <__aeabi_dmul>
   d4ea4:	4602      	mov	r2, r0
   d4ea6:	460b      	mov	r3, r1
   d4ea8:	e9c4 2306 	strd	r2, r3, [r4, #24]
    // 2) sum
    sumI += sqI;
   d4eac:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   d4eb0:	f003 f8b2 	bl	d8018 <__adddf3>
  for (unsigned int n = 0; n < 1662 /*Number_of_Samples*/; n++)
   d4eb4:	3d01      	subs	r5, #1
    sumI += sqI;
   d4eb6:	4606      	mov	r6, r0
   d4eb8:	460f      	mov	r7, r1
   d4eba:	e9c4 6708 	strd	r6, r7, [r4, #32]
  for (unsigned int n = 0; n < 1662 /*Number_of_Samples*/; n++)
   d4ebe:	d1cc      	bne.n	d4e5a <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0x22>
  }

  double I_RATIO = data.ICAL*((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d4ec0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d4ec4:	a310      	add	r3, pc, #64	; (adr r3, d4f08 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xd0>)
   d4ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4eca:	f003 fa5b 	bl	d8384 <__aeabi_dmul>
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d4ece:	a310      	add	r3, pc, #64	; (adr r3, d4f10 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xd8>)
   d4ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
  double I_RATIO = data.ICAL*((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d4ed4:	4680      	mov	r8, r0
   d4ed6:	4689      	mov	r9, r1
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d4ed8:	4630      	mov	r0, r6
   d4eda:	4639      	mov	r1, r7
   d4edc:	f003 fb7c 	bl	d85d8 <__aeabi_ddiv>
   d4ee0:	ec41 0b10 	vmov	d0, r0, r1
   d4ee4:	f002 ff6e 	bl	d7dc4 <sqrt>

  //Reset accumulators
  sumI = 0;
   d4ee8:	2200      	movs	r2, #0
   d4eea:	2300      	movs	r3, #0
   d4eec:	e9c4 2308 	strd	r2, r3, [r4, #32]
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d4ef0:	ec51 0b10 	vmov	r0, r1, d0
   d4ef4:	4642      	mov	r2, r8
   d4ef6:	464b      	mov	r3, r9
   d4ef8:	f003 fa44 	bl	d8384 <__aeabi_dmul>
  //--------------------------------------------------------------------------------------

  return Irms;
}
   d4efc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4f00:	ec41 0b10 	vmov	d0, r0, r1
   d4f04:	b002      	add	sp, #8
   d4f06:	4770      	bx	lr
   d4f08:	66666666 	.word	0x66666666
   d4f0c:	3f4a6666 	.word	0x3f4a6666
   d4f10:	00000000 	.word	0x00000000
   d4f14:	4099f800 	.word	0x4099f800
   d4f18:	40a00000 	.word	0x40a00000
   d4f1c:	3f500000 	.word	0x3f500000

000d4f20 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d4f20:	4770      	bx	lr

000d4f22 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d4f22:	b510      	push	{r4, lr}
}
   d4f24:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d4f26:	4604      	mov	r4, r0
}
   d4f28:	f002 ff43 	bl	d7db2 <_ZdlPvj>
   d4f2c:	4620      	mov	r0, r4
   d4f2e:	bd10      	pop	{r4, pc}

000d4f30 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d4f30:	6803      	ldr	r3, [r0, #0]
   d4f32:	b2c9      	uxtb	r1, r1
   d4f34:	689b      	ldr	r3, [r3, #8]
   d4f36:	4718      	bx	r3

000d4f38 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4f38:	b40e      	push	{r1, r2, r3}
   d4f3a:	b510      	push	{r4, lr}
   d4f3c:	b08d      	sub	sp, #52	; 0x34
   d4f3e:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4f40:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d4f42:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4f46:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4f48:	2300      	movs	r3, #0
   d4f4a:	2020      	movs	r0, #32
   d4f4c:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4f50:	e9cd 4200 	strd	r4, r2, [sp]
   d4f54:	201e      	movs	r0, #30
   d4f56:	aa04      	add	r2, sp, #16
   d4f58:	f001 fa3c 	bl	d63d4 <log_message_v>
}
   d4f5c:	b00d      	add	sp, #52	; 0x34
   d4f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4f62:	b003      	add	sp, #12
   d4f64:	4770      	bx	lr
	...

000d4f68 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d4f68:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d4f6a:	4d03      	ldr	r5, [pc, #12]	; (d4f78 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d4f6c:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d4f70:	e9c0 5100 	strd	r5, r1, [r0]
}
   d4f74:	bd30      	pop	{r4, r5, pc}
   d4f76:	bf00      	nop
   d4f78:	000d92e4 	.word	0x000d92e4

000d4f7c <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d4f7c:	6840      	ldr	r0, [r0, #4]
   d4f7e:	f001 bf9b 	b.w	d6eb8 <_ZN7TwoWire5beginEv>

000d4f82 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d4f82:	b510      	push	{r4, lr}
   d4f84:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d4f86:	6800      	ldr	r0, [r0, #0]
   d4f88:	f001 ffdc 	bl	d6f44 <_ZN7TwoWire6unlockEv>
   d4f8c:	4620      	mov	r0, r4
   d4f8e:	bd10      	pop	{r4, pc}

000d4f90 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d4f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4f94:	b08a      	sub	sp, #40	; 0x28
   d4f96:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d4f98:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d4f9a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d4f9c:	f001 ffc9 	bl	d6f32 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d4fa0:	221e      	movs	r2, #30
   d4fa2:	2100      	movs	r1, #0
   d4fa4:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d4fa6:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d4fa8:	f003 ff18 	bl	d8ddc <memset>
		size_t framAddr = 0;
   d4fac:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d4fae:	b1ef      	cbz	r7, d4fec <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d4fb0:	6823      	ldr	r3, [r4, #0]
   d4fb2:	2f1e      	cmp	r7, #30
   d4fb4:	46b8      	mov	r8, r7
   d4fb6:	bf28      	it	cs
   d4fb8:	f04f 081e 	movcs.w	r8, #30
   d4fbc:	68dd      	ldr	r5, [r3, #12]
   d4fbe:	aa02      	add	r2, sp, #8
   d4fc0:	4643      	mov	r3, r8
   d4fc2:	4631      	mov	r1, r6
   d4fc4:	4620      	mov	r0, r4
   d4fc6:	47a8      	blx	r5
			if (!result) {
   d4fc8:	4605      	mov	r5, r0
   d4fca:	b958      	cbnz	r0, d4fe4 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d4fcc:	480a      	ldr	r0, [pc, #40]	; (d4ff8 <_ZN6MB85RC5eraseEv+0x68>)
   d4fce:	490b      	ldr	r1, [pc, #44]	; (d4ffc <_ZN6MB85RC5eraseEv+0x6c>)
   d4fd0:	4632      	mov	r2, r6
   d4fd2:	f7ff ffb1 	bl	d4f38 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d4fd6:	a801      	add	r0, sp, #4
   d4fd8:	f7ff ffd3 	bl	d4f82 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d4fdc:	4628      	mov	r0, r5
   d4fde:	b00a      	add	sp, #40	; 0x28
   d4fe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d4fe4:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d4fe8:	4446      	add	r6, r8
		while(totalLen > 0) {
   d4fea:	e7e0      	b.n	d4fae <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d4fec:	a801      	add	r0, sp, #4
   d4fee:	f7ff ffc8 	bl	d4f82 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d4ff2:	2501      	movs	r5, #1
   d4ff4:	e7f2      	b.n	d4fdc <_ZN6MB85RC5eraseEv+0x4c>
   d4ff6:	bf00      	nop
   d4ff8:	2003e61c 	.word	0x2003e61c
   d4ffc:	000d92b0 	.word	0x000d92b0

000d5000 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5000:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5004:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5006:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5008:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d500a:	460d      	mov	r5, r1
   d500c:	4616      	mov	r6, r2
   d500e:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d5010:	f001 ff8f 	bl	d6f32 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d5014:	b1a7      	cbz	r7, d5040 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5016:	68e1      	ldr	r1, [r4, #12]
   d5018:	6860      	ldr	r0, [r4, #4]
   d501a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d501e:	f001 ff7e 	bl	d6f1e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5022:	0a29      	lsrs	r1, r5, #8
   d5024:	6860      	ldr	r0, [r4, #4]
   d5026:	f7ff ff83 	bl	d4f30 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d502a:	4629      	mov	r1, r5
   d502c:	6860      	ldr	r0, [r4, #4]
   d502e:	f7ff ff7f 	bl	d4f30 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d5032:	6860      	ldr	r0, [r4, #4]
   d5034:	2100      	movs	r1, #0
   d5036:	f001 ff75 	bl	d6f24 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d503a:	b148      	cbz	r0, d5050 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d503c:	2400      	movs	r4, #0
   d503e:	e000      	b.n	d5042 <_ZN6MB85RC8readDataEjPhj+0x42>
   d5040:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5042:	a801      	add	r0, sp, #4
   d5044:	f7ff ff9d 	bl	d4f82 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d5048:	4620      	mov	r0, r4
   d504a:	b003      	add	sp, #12
   d504c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d5050:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d5052:	7b21      	ldrb	r1, [r4, #12]
   d5054:	6860      	ldr	r0, [r4, #4]
   d5056:	46b8      	mov	r8, r7
   d5058:	bf28      	it	cs
   d505a:	f04f 0820 	movcs.w	r8, #32
   d505e:	2301      	movs	r3, #1
   d5060:	4642      	mov	r2, r8
   d5062:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5066:	f001 ff44 	bl	d6ef2 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d506a:	f002 fe75 	bl	d7d58 <_Z19__fetch_global_Wirev>
   d506e:	6803      	ldr	r3, [r0, #0]
   d5070:	691b      	ldr	r3, [r3, #16]
   d5072:	4798      	blx	r3
   d5074:	4540      	cmp	r0, r8
   d5076:	dbe1      	blt.n	d503c <_ZN6MB85RC8readDataEjPhj+0x3c>
   d5078:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d507c:	f002 fe6c 	bl	d7d58 <_Z19__fetch_global_Wirev>
   d5080:	6803      	ldr	r3, [r0, #0]
   d5082:	695b      	ldr	r3, [r3, #20]
   d5084:	4798      	blx	r3
   d5086:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d508a:	454e      	cmp	r6, r9
   d508c:	d1f6      	bne.n	d507c <_ZN6MB85RC8readDataEjPhj+0x7c>
   d508e:	4445      	add	r5, r8
   d5090:	eba7 0708 	sub.w	r7, r7, r8
   d5094:	e7be      	b.n	d5014 <_ZN6MB85RC8readDataEjPhj+0x14>

000d5096 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5096:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d509a:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d509c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d509e:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d50a0:	460e      	mov	r6, r1
   d50a2:	4690      	mov	r8, r2
   d50a4:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d50a6:	f001 ff44 	bl	d6f32 <_ZN7TwoWire4lockEv>
   d50aa:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d50ae:	f1b9 0f00 	cmp.w	r9, #0
   d50b2:	d02a      	beq.n	d510a <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d50b4:	b34d      	cbz	r5, d510a <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d50b6:	68e1      	ldr	r1, [r4, #12]
   d50b8:	6860      	ldr	r0, [r4, #4]
   d50ba:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d50be:	f001 ff2e 	bl	d6f1e <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d50c2:	0a31      	lsrs	r1, r6, #8
   d50c4:	6860      	ldr	r0, [r4, #4]
   d50c6:	f7ff ff33 	bl	d4f30 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d50ca:	6860      	ldr	r0, [r4, #4]
   d50cc:	4631      	mov	r1, r6
   d50ce:	f7ff ff2f 	bl	d4f30 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d50d2:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d50d6:	4647      	mov	r7, r8
   d50d8:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d50dc:	6860      	ldr	r0, [r4, #4]
   d50de:	f817 1b01 	ldrb.w	r1, [r7], #1
   d50e2:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d50e4:	3d01      	subs	r5, #1
				wire.write(*data);
   d50e6:	689b      	ldr	r3, [r3, #8]
   d50e8:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d50ea:	4555      	cmp	r5, sl
   d50ec:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d50f0:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d50f2:	d001      	beq.n	d50f8 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d50f4:	2d00      	cmp	r5, #0
   d50f6:	d1f1      	bne.n	d50dc <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d50f8:	6860      	ldr	r0, [r4, #4]
   d50fa:	2101      	movs	r1, #1
   d50fc:	f001 ff12 	bl	d6f24 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5100:	2800      	cmp	r0, #0
   d5102:	d0d7      	beq.n	d50b4 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d5104:	f04f 0900 	mov.w	r9, #0
   d5108:	e7d1      	b.n	d50ae <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d510a:	a801      	add	r0, sp, #4
   d510c:	f7ff ff39 	bl	d4f82 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d5110:	4648      	mov	r0, r9
   d5112:	b003      	add	sp, #12
   d5114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5118 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5118:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d511c:	b08b      	sub	sp, #44	; 0x2c
   d511e:	460e      	mov	r6, r1
   d5120:	4615      	mov	r5, r2
   d5122:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5124:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5126:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5128:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d512a:	f001 ff02 	bl	d6f32 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d512e:	42ae      	cmp	r6, r5
   d5130:	d229      	bcs.n	d5186 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d5132:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d5134:	4425      	add	r5, r4
			while(numBytes > 0) {
   d5136:	b18c      	cbz	r4, d515c <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d5138:	2c1e      	cmp	r4, #30
   d513a:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d513c:	f8d8 3000 	ldr.w	r3, [r8]
   d5140:	bf28      	it	cs
   d5142:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d5144:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d5146:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d514a:	aa02      	add	r2, sp, #8
   d514c:	463b      	mov	r3, r7
   d514e:	4631      	mov	r1, r6
   d5150:	4640      	mov	r0, r8
				framAddrTo -= count;
   d5152:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d5154:	47c8      	blx	r9
				if (!result) {
   d5156:	b948      	cbnz	r0, d516c <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5158:	2400      	movs	r4, #0
   d515a:	e000      	b.n	d515e <_ZN6MB85RC8moveDataEjjj+0x46>
   d515c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d515e:	a801      	add	r0, sp, #4
   d5160:	f7ff ff0f 	bl	d4f82 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d5164:	4620      	mov	r0, r4
   d5166:	b00b      	add	sp, #44	; 0x2c
   d5168:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d516c:	f8d8 3000 	ldr.w	r3, [r8]
   d5170:	aa02      	add	r2, sp, #8
   d5172:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5176:	4629      	mov	r1, r5
   d5178:	463b      	mov	r3, r7
   d517a:	4640      	mov	r0, r8
   d517c:	47c8      	blx	r9
				if (!result) {
   d517e:	2800      	cmp	r0, #0
   d5180:	d0ea      	beq.n	d5158 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d5182:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d5184:	e7d7      	b.n	d5136 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d5186:	d9e9      	bls.n	d515c <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d5188:	2c00      	cmp	r4, #0
   d518a:	d0e7      	beq.n	d515c <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d518c:	f8d8 3000 	ldr.w	r3, [r8]
   d5190:	2c1e      	cmp	r4, #30
   d5192:	4627      	mov	r7, r4
   d5194:	bf28      	it	cs
   d5196:	271e      	movcs	r7, #30
   d5198:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d519c:	aa02      	add	r2, sp, #8
   d519e:	463b      	mov	r3, r7
   d51a0:	4631      	mov	r1, r6
   d51a2:	4640      	mov	r0, r8
   d51a4:	47c8      	blx	r9
				if (!result) {
   d51a6:	2800      	cmp	r0, #0
   d51a8:	d0d6      	beq.n	d5158 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d51aa:	f8d8 3000 	ldr.w	r3, [r8]
   d51ae:	aa02      	add	r2, sp, #8
   d51b0:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d51b4:	4629      	mov	r1, r5
   d51b6:	463b      	mov	r3, r7
   d51b8:	4640      	mov	r0, r8
   d51ba:	47c8      	blx	r9
				if (!result) {
   d51bc:	2800      	cmp	r0, #0
   d51be:	d0cb      	beq.n	d5158 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d51c0:	443e      	add	r6, r7
				framAddrTo += count;
   d51c2:	443d      	add	r5, r7
				numBytes -= count;
   d51c4:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d51c6:	e7df      	b.n	d5188 <_ZN6MB85RC8moveDataEjjj+0x70>

000d51c8 <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d51c8:	2040      	movs	r0, #64	; 0x40
   d51ca:	4770      	bx	lr

000d51cc <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d51cc:	2000      	movs	r0, #0
   d51ce:	4770      	bx	lr

000d51d0 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d51d0:	2080      	movs	r0, #128	; 0x80
   d51d2:	4770      	bx	lr

000d51d4 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d51d4:	20ff      	movs	r0, #255	; 0xff
   d51d6:	4770      	bx	lr

000d51d8 <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d51d8:	4770      	bx	lr

000d51da <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d51da:	4770      	bx	lr

000d51dc <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d51dc:	4770      	bx	lr

000d51de <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d51de:	4770      	bx	lr

000d51e0 <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d51e0:	b510      	push	{r4, lr}
}
   d51e2:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d51e4:	4604      	mov	r4, r0
}
   d51e6:	f002 fde4 	bl	d7db2 <_ZdlPvj>
   d51ea:	4620      	mov	r0, r4
   d51ec:	bd10      	pop	{r4, pc}

000d51ee <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d51ee:	b510      	push	{r4, lr}
}
   d51f0:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d51f2:	4604      	mov	r4, r0
}
   d51f4:	f002 fddd 	bl	d7db2 <_ZdlPvj>
   d51f8:	4620      	mov	r0, r4
   d51fa:	bd10      	pop	{r4, pc}

000d51fc <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d51fc:	b510      	push	{r4, lr}
}
   d51fe:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d5200:	4604      	mov	r4, r0
}
   d5202:	f002 fdd6 	bl	d7db2 <_ZdlPvj>
   d5206:	4620      	mov	r0, r4
   d5208:	bd10      	pop	{r4, pc}

000d520a <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d520a:	b510      	push	{r4, lr}
}
   d520c:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d520e:	4604      	mov	r4, r0
}
   d5210:	f002 fdcf 	bl	d7db2 <_ZdlPvj>
   d5214:	4620      	mov	r0, r4
   d5216:	bd10      	pop	{r4, pc}

000d5218 <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d5218:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d521c:	6803      	ldr	r3, [r0, #0]
   d521e:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d5220:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d5222:	4798      	blx	r3
   d5224:	2210      	movs	r2, #16
   d5226:	4601      	mov	r1, r0
   d5228:	4668      	mov	r0, sp
   d522a:	f003 fdd7 	bl	d8ddc <memset>
	size_t len = length();
   d522e:	6823      	ldr	r3, [r4, #0]
   d5230:	4620      	mov	r0, r4
   d5232:	689b      	ldr	r3, [r3, #8]
   d5234:	4798      	blx	r3
	size_t offset = 0;
   d5236:	2500      	movs	r5, #0
	size_t len = length();
   d5238:	4607      	mov	r7, r0
	bool bResult = false;
   d523a:	4628      	mov	r0, r5
	while(offset < len) {
   d523c:	42bd      	cmp	r5, r7
   d523e:	d20e      	bcs.n	d525e <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d5240:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d5242:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d5244:	2e10      	cmp	r6, #16
   d5246:	bf28      	it	cs
   d5248:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d524a:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d524e:	466a      	mov	r2, sp
   d5250:	4633      	mov	r3, r6
   d5252:	4629      	mov	r1, r5
   d5254:	4620      	mov	r0, r4
   d5256:	47c0      	blx	r8
		if (!bResult) {
   d5258:	b108      	cbz	r0, d525e <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d525a:	4435      	add	r5, r6
	while(offset < len) {
   d525c:	e7ee      	b.n	d523c <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d525e:	b004      	add	sp, #16
   d5260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5264 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d5264:	f44f 7380 	mov.w	r3, #256	; 0x100
   d5268:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d526a:	f240 1301 	movw	r3, #257	; 0x101
   d526e:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d5270:	2300      	movs	r3, #0
   d5272:	8203      	strh	r3, [r0, #16]
}
   d5274:	4770      	bx	lr
	...

000d5278 <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d5278:	b508      	push	{r3, lr}
   d527a:	4b06      	ldr	r3, [pc, #24]	; (d5294 <_ZN12MCP79410TimeC1Ev+0x1c>)
   d527c:	6003      	str	r3, [r0, #0]
   d527e:	4b06      	ldr	r3, [pc, #24]	; (d5298 <_ZN12MCP79410TimeC1Ev+0x20>)
   d5280:	6043      	str	r3, [r0, #4]
   d5282:	f240 7304 	movw	r3, #1796	; 0x704
   d5286:	8103      	strh	r3, [r0, #8]
   d5288:	2300      	movs	r3, #0
   d528a:	7443      	strb	r3, [r0, #17]
	clear();
   d528c:	f7ff ffea 	bl	d5264 <_ZN12MCP79410Time5clearEv>
}
   d5290:	bd08      	pop	{r3, pc}
   d5292:	bf00      	nop
   d5294:	000d93c4 	.word	0x000d93c4
   d5298:	03020100 	.word	0x03020100

000d529c <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d529c:	0903      	lsrs	r3, r0, #4
}
   d529e:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d52a0:	f000 000f 	and.w	r0, r0, #15
}
   d52a4:	fb02 0003 	mla	r0, r2, r3, r0
   d52a8:	4770      	bx	lr

000d52aa <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d52aa:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d52ac:	7a80      	ldrb	r0, [r0, #10]
   d52ae:	f7ff fff5 	bl	d529c <_ZN12MCP79410Time8bcdToIntEh>
}
   d52b2:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d52b6:	bd08      	pop	{r3, pc}

000d52b8 <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d52b8:	7ac0      	ldrb	r0, [r0, #11]
   d52ba:	f000 001f 	and.w	r0, r0, #31
   d52be:	f7ff bfed 	b.w	d529c <_ZN12MCP79410Time8bcdToIntEh>

000d52c2 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d52c2:	7b00      	ldrb	r0, [r0, #12]
   d52c4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d52c8:	f7ff bfe8 	b.w	d529c <_ZN12MCP79410Time8bcdToIntEh>

000d52cc <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d52cc:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d52ce:	7b81      	ldrb	r1, [r0, #14]
   d52d0:	064a      	lsls	r2, r1, #25
   d52d2:	d50d      	bpl.n	d52f0 <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d52d4:	f001 001f 	and.w	r0, r1, #31
   d52d8:	f7ff ffe0 	bl	d529c <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d52dc:	068b      	lsls	r3, r1, #26
   d52de:	d503      	bpl.n	d52e8 <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d52e0:	280c      	cmp	r0, #12
   d52e2:	d000      	beq.n	d52e6 <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d52e4:	300c      	adds	r0, #12
}
   d52e6:	bd08      	pop	{r3, pc}
				return 0;
   d52e8:	280c      	cmp	r0, #12
   d52ea:	bf08      	it	eq
   d52ec:	2000      	moveq	r0, #0
   d52ee:	e7fa      	b.n	d52e6 <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d52f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d52f4:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d52f8:	f7ff bfd0 	b.w	d529c <_ZN12MCP79410Time8bcdToIntEh>

000d52fc <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d52fc:	7bc0      	ldrb	r0, [r0, #15]
   d52fe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5302:	f7ff bfcb 	b.w	d529c <_ZN12MCP79410Time8bcdToIntEh>

000d5306 <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d5306:	7c00      	ldrb	r0, [r0, #16]
   d5308:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d530c:	f7ff bfc6 	b.w	d529c <_ZN12MCP79410Time8bcdToIntEh>

000d5310 <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d5310:	b510      	push	{r4, lr}
   d5312:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d5314:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d5316:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d5318:	2100      	movs	r1, #0
   d531a:	a801      	add	r0, sp, #4
   d531c:	f003 fd5e 	bl	d8ddc <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d5320:	4620      	mov	r0, r4
   d5322:	f7ff ffc2 	bl	d52aa <_ZNK12MCP79410Time7getYearEv>
   d5326:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d532a:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d532c:	4620      	mov	r0, r4
   d532e:	f7ff ffc3 	bl	d52b8 <_ZNK12MCP79410Time8getMonthEv>
   d5332:	3801      	subs	r0, #1
   d5334:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d5336:	4620      	mov	r0, r4
   d5338:	f7ff ffc3 	bl	d52c2 <_ZNK12MCP79410Time13getDayOfMonthEv>
   d533c:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d533e:	4620      	mov	r0, r4
   d5340:	f7ff ffc4 	bl	d52cc <_ZNK12MCP79410Time7getHourEv>
   d5344:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d5346:	4620      	mov	r0, r4
   d5348:	f7ff ffd8 	bl	d52fc <_ZNK12MCP79410Time9getMinuteEv>
   d534c:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d534e:	4620      	mov	r0, r4
   d5350:	f7ff ffd9 	bl	d5306 <_ZNK12MCP79410Time9getSecondEv>
   d5354:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d5356:	a801      	add	r0, sp, #4
   d5358:	f001 f9b2 	bl	d66c0 <mktime>
}
   d535c:	b00a      	add	sp, #40	; 0x28
   d535e:	bd10      	pop	{r4, pc}

000d5360 <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d5360:	210a      	movs	r1, #10
   d5362:	fb90 f2f1 	sdiv	r2, r0, r1
   d5366:	fb92 f3f1 	sdiv	r3, r2, r1
   d536a:	fb01 2313 	mls	r3, r1, r3, r2
   d536e:	011b      	lsls	r3, r3, #4
   d5370:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d5372:	fb01 0012 	mls	r0, r1, r2, r0
   d5376:	4318      	orrs	r0, r3
}
   d5378:	b2c0      	uxtb	r0, r0
   d537a:	4770      	bx	lr

000d537c <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d537c:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d537e:	b510      	push	{r4, lr}
   d5380:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d5382:	fb91 f0f3 	sdiv	r0, r1, r3
   d5386:	fb00 1013 	mls	r0, r0, r3, r1
   d538a:	f7ff ffe9 	bl	d5360 <_ZN12MCP79410Time8intToBcdEi>
   d538e:	72a0      	strb	r0, [r4, #10]
}
   d5390:	bd10      	pop	{r4, pc}

000d5392 <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d5392:	b510      	push	{r4, lr}
   d5394:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d5396:	4608      	mov	r0, r1
   d5398:	f7ff ffe2 	bl	d5360 <_ZN12MCP79410Time8intToBcdEi>
   d539c:	72e0      	strb	r0, [r4, #11]
}
   d539e:	bd10      	pop	{r4, pc}

000d53a0 <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d53a0:	b510      	push	{r4, lr}
   d53a2:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d53a4:	4608      	mov	r0, r1
   d53a6:	f7ff ffdb 	bl	d5360 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d53aa:	7b23      	ldrb	r3, [r4, #12]
   d53ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d53b0:	4318      	orrs	r0, r3
   d53b2:	7320      	strb	r0, [r4, #12]
}
   d53b4:	bd10      	pop	{r4, pc}

000d53b6 <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d53b6:	b510      	push	{r4, lr}
   d53b8:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d53ba:	1c48      	adds	r0, r1, #1
   d53bc:	f7ff ffd0 	bl	d5360 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d53c0:	7b63      	ldrb	r3, [r4, #13]
   d53c2:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d53c6:	4318      	orrs	r0, r3
   d53c8:	7360      	strb	r0, [r4, #13]
}
   d53ca:	bd10      	pop	{r4, pc}

000d53cc <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d53cc:	b510      	push	{r4, lr}
   d53ce:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d53d0:	4608      	mov	r0, r1
   d53d2:	f7ff ffc5 	bl	d5360 <_ZN12MCP79410Time8intToBcdEi>
   d53d6:	73a0      	strb	r0, [r4, #14]
}
   d53d8:	bd10      	pop	{r4, pc}

000d53da <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d53da:	b510      	push	{r4, lr}
   d53dc:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d53de:	4608      	mov	r0, r1
   d53e0:	f7ff ffbe 	bl	d5360 <_ZN12MCP79410Time8intToBcdEi>
   d53e4:	73e0      	strb	r0, [r4, #15]
}
   d53e6:	bd10      	pop	{r4, pc}

000d53e8 <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d53e8:	b510      	push	{r4, lr}
   d53ea:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d53ec:	4608      	mov	r0, r1
   d53ee:	f7ff ffb7 	bl	d5360 <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d53f2:	7c23      	ldrb	r3, [r4, #16]
   d53f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d53f8:	4318      	orrs	r0, r3
   d53fa:	7420      	strb	r0, [r4, #16]
}
   d53fc:	bd10      	pop	{r4, pc}

000d53fe <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d53fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5400:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d5402:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d5404:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d5408:	f003 fcae 	bl	d8d68 <gmtime>
   d540c:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d540e:	6941      	ldr	r1, [r0, #20]
   d5410:	4620      	mov	r0, r4
   d5412:	f7ff ffb3 	bl	d537c <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d5416:	6929      	ldr	r1, [r5, #16]
   d5418:	4620      	mov	r0, r4
   d541a:	3101      	adds	r1, #1
   d541c:	f7ff ffb9 	bl	d5392 <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d5420:	68e9      	ldr	r1, [r5, #12]
   d5422:	4620      	mov	r0, r4
   d5424:	f7ff ffbc 	bl	d53a0 <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d5428:	69a9      	ldr	r1, [r5, #24]
   d542a:	4620      	mov	r0, r4
   d542c:	f7ff ffc3 	bl	d53b6 <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d5430:	68a9      	ldr	r1, [r5, #8]
   d5432:	4620      	mov	r0, r4
   d5434:	f7ff ffca 	bl	d53cc <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d5438:	6869      	ldr	r1, [r5, #4]
   d543a:	4620      	mov	r0, r4
   d543c:	f7ff ffcd 	bl	d53da <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d5440:	6829      	ldr	r1, [r5, #0]
   d5442:	293b      	cmp	r1, #59	; 0x3b
   d5444:	bfa8      	it	ge
   d5446:	213b      	movge	r1, #59	; 0x3b
   d5448:	4620      	mov	r0, r4
   d544a:	f7ff ffcd 	bl	d53e8 <_ZN12MCP79410Time9setSecondEi>
}
   d544e:	b003      	add	sp, #12
   d5450:	bd30      	pop	{r4, r5, pc}
	...

000d5454 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5454:	4a05      	ldr	r2, [pc, #20]	; (d546c <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d5456:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5458:	e9c0 2100 	strd	r2, r1, [r0]
   d545c:	4a04      	ldr	r2, [pc, #16]	; (d5470 <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d545e:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5460:	4a04      	ldr	r2, [pc, #16]	; (d5474 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d5462:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5464:	4a04      	ldr	r2, [pc, #16]	; (d5478 <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d5466:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5468:	6142      	str	r2, [r0, #20]
}
   d546a:	4770      	bx	lr
   d546c:	000d93f8 	.word	0x000d93f8
   d5470:	03010000 	.word	0x03010000
   d5474:	000d93a0 	.word	0x000d93a0
   d5478:	000d93d4 	.word	0x000d93d4

000d547c <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d547c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5480:	4604      	mov	r4, r0
   d5482:	460f      	mov	r7, r1
   d5484:	4690      	mov	r8, r2
   d5486:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d5488:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d548a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d548c:	429e      	cmp	r6, r3
   d548e:	d231      	bcs.n	d54f4 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d5490:	6860      	ldr	r0, [r4, #4]
   d5492:	4639      	mov	r1, r7
   d5494:	f001 fd3f 	bl	d6f16 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d5498:	eb08 0106 	add.w	r1, r8, r6
   d549c:	6860      	ldr	r0, [r4, #4]
   d549e:	f7ff fd47 	bl	d4f30 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d54a2:	6860      	ldr	r0, [r4, #4]
   d54a4:	2100      	movs	r1, #0
   d54a6:	f001 fd3d 	bl	d6f24 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d54aa:	4605      	mov	r5, r0
   d54ac:	b9d0      	cbnz	r0, d54e4 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d54ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d54b0:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d54b2:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d54b4:	2a20      	cmp	r2, #32
   d54b6:	f04f 0301 	mov.w	r3, #1
   d54ba:	bf28      	it	cs
   d54bc:	2220      	movcs	r2, #32
   d54be:	4639      	mov	r1, r7
   d54c0:	f001 fd17 	bl	d6ef2 <_ZN7TwoWire11requestFromEhjh>
   d54c4:	eb09 0b06 	add.w	fp, r9, r6
   d54c8:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d54ca:	eb0b 0a00 	add.w	sl, fp, r0
   d54ce:	45da      	cmp	sl, fp
   d54d0:	d006      	beq.n	d54e0 <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d54d2:	6860      	ldr	r0, [r4, #4]
   d54d4:	6803      	ldr	r3, [r0, #0]
   d54d6:	695b      	ldr	r3, [r3, #20]
   d54d8:	4798      	blx	r3
   d54da:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d54de:	e7f6      	b.n	d54ce <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d54e0:	442e      	add	r6, r5
	while(offset < bufLen) {
   d54e2:	e7d2      	b.n	d548a <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d54e4:	4602      	mov	r2, r0
   d54e6:	4904      	ldr	r1, [pc, #16]	; (d54f8 <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d54e8:	4804      	ldr	r0, [pc, #16]	; (d54fc <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d54ea:	f7ff fd25 	bl	d4f38 <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d54ee:	4628      	mov	r0, r5
   d54f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d54f4:	2500      	movs	r5, #0
	return stat;
   d54f6:	e7fa      	b.n	d54ee <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d54f8:	000d92f8 	.word	0x000d92f8
   d54fc:	2003e5d8 	.word	0x2003e5d8

000d5500 <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5500:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d5504:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5508:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d550a:	6803      	ldr	r3, [r0, #0]
   d550c:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d550e:	4605      	mov	r5, r0
   d5510:	460c      	mov	r4, r1
   d5512:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d5514:	4798      	blx	r3
   d5516:	4580      	cmp	r8, r0
   d5518:	d80d      	bhi.n	d5536 <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d551a:	3420      	adds	r4, #32
   d551c:	6868      	ldr	r0, [r5, #4]
   d551e:	9600      	str	r6, [sp, #0]
   d5520:	463b      	mov	r3, r7
   d5522:	b2e2      	uxtb	r2, r4
   d5524:	216f      	movs	r1, #111	; 0x6f
   d5526:	f7ff ffa9 	bl	d547c <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d552a:	fab0 f080 	clz	r0, r0
   d552e:	0940      	lsrs	r0, r0, #5
}
   d5530:	b002      	add	sp, #8
   d5532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d5536:	2000      	movs	r0, #0
   d5538:	e7fa      	b.n	d5530 <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d553a <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d553a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d553e:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5542:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5544:	6803      	ldr	r3, [r0, #0]
   d5546:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5548:	4604      	mov	r4, r0
   d554a:	460d      	mov	r5, r1
   d554c:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d554e:	4798      	blx	r3
   d5550:	4580      	cmp	r8, r0
   d5552:	d80c      	bhi.n	d556e <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d5554:	6860      	ldr	r0, [r4, #4]
   d5556:	9600      	str	r6, [sp, #0]
   d5558:	463b      	mov	r3, r7
   d555a:	b2ea      	uxtb	r2, r5
   d555c:	2157      	movs	r1, #87	; 0x57
   d555e:	f7ff ff8d 	bl	d547c <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d5562:	fab0 f080 	clz	r0, r0
   d5566:	0940      	lsrs	r0, r0, #5
}
   d5568:	b002      	add	sp, #8
   d556a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d556e:	2000      	movs	r0, #0
   d5570:	e7fa      	b.n	d5568 <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d5572 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d5572:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d5574:	1e1e      	subs	r6, r3, #0
   d5576:	bf0c      	ite	eq
   d5578:	2307      	moveq	r3, #7
   d557a:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d557c:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d557e:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d5580:	ab02      	add	r3, sp, #8
   d5582:	460a      	mov	r2, r1
   d5584:	216f      	movs	r1, #111	; 0x6f
   d5586:	f7ff ff79 	bl	d547c <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d558a:	4605      	mov	r5, r0
   d558c:	b9a8      	cbnz	r0, d55ba <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d558e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d5592:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d5594:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d5598:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d559a:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d559e:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d55a0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d55a4:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d55a6:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d55aa:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d55ac:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d55b0:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d55b2:	b92e      	cbnz	r6, d55c0 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d55b4:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d55b8:	72a3      	strb	r3, [r4, #10]
}
   d55ba:	4628      	mov	r0, r5
   d55bc:	b004      	add	sp, #16
   d55be:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d55c0:	f002 f94c 	bl	d785c <_ZN9TimeClass4yearEv>
   d55c4:	f7ff fecc 	bl	d5360 <_ZN12MCP79410Time8intToBcdEi>
   d55c8:	72a0      	strb	r0, [r4, #10]
	return stat;
   d55ca:	e7f6      	b.n	d55ba <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d55cc <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d55cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d55ce:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d55d0:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d55d2:	9300      	str	r3, [sp, #0]
   d55d4:	216f      	movs	r1, #111	; 0x6f
   d55d6:	ab03      	add	r3, sp, #12
   d55d8:	f7ff ff50 	bl	d547c <_ZNK8MCP7941010deviceReadEhhPhj>
   d55dc:	b920      	cbnz	r0, d55e8 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d55de:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d55e2:	b005      	add	sp, #20
   d55e4:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d55e8:	2000      	movs	r0, #0
   d55ea:	e7fa      	b.n	d55e2 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d55ec <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d55ec:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d55ee:	2103      	movs	r1, #3
   d55f0:	f7ff ffec 	bl	d55cc <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d55f4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d55f8:	bd08      	pop	{r3, pc}

000d55fa <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d55fa:	b538      	push	{r3, r4, r5, lr}
   d55fc:	2300      	movs	r3, #0
   d55fe:	460c      	mov	r4, r1
   d5600:	460a      	mov	r2, r1
   d5602:	4619      	mov	r1, r3
   d5604:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d5606:	f7ff ffb4 	bl	d5572 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d560a:	b930      	cbnz	r0, d561a <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d560c:	7aa3      	ldrb	r3, [r4, #10]
   d560e:	b123      	cbz	r3, d561a <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d5610:	4628      	mov	r0, r5
}
   d5612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d5616:	f7ff bfe9 	b.w	d55ec <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d561a:	2000      	movs	r0, #0
   d561c:	bd38      	pop	{r3, r4, r5, pc}

000d561e <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d561e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5620:	4602      	mov	r2, r0
	MCP79410Time time;
   d5622:	a801      	add	r0, sp, #4
   d5624:	f7ff fe28 	bl	d5278 <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d5628:	a901      	add	r1, sp, #4
   d562a:	4610      	mov	r0, r2
   d562c:	f7ff ffe5 	bl	d55fa <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d5630:	b128      	cbz	r0, d563e <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d5632:	a801      	add	r0, sp, #4
   d5634:	f7ff fe6c 	bl	d5310 <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d5638:	b007      	add	sp, #28
   d563a:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d563e:	2000      	movs	r0, #0
   d5640:	4601      	mov	r1, r0
MCP79410Time::~MCP79410Time() {
   d5642:	e7f9      	b.n	d5638 <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d5644 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d5644:	b5d0      	push	{r4, r6, r7, lr}
   d5646:	4604      	mov	r4, r0
   d5648:	b086      	sub	sp, #24
	wire.begin();
   d564a:	6840      	ldr	r0, [r0, #4]
   d564c:	f001 fc34 	bl	d6eb8 <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d5650:	f002 f8ca 	bl	d77e8 <_ZN9TimeClass7isValidEv>
   d5654:	b9e8      	cbnz	r0, d5692 <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d5656:	7ae3      	ldrb	r3, [r4, #11]
   d5658:	079b      	lsls	r3, r3, #30
   d565a:	d51a      	bpl.n	d5692 <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d565c:	4620      	mov	r0, r4
   d565e:	f7ff ffde 	bl	d561e <_ZNK8MCP7941010getRTCTimeEv>
   d5662:	4606      	mov	r6, r0
   d5664:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d5666:	ea56 0307 	orrs.w	r3, r6, r7
   d566a:	d012      	beq.n	d5692 <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d566c:	f001 ffc3 	bl	d75f6 <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d5670:	4b0a      	ldr	r3, [pc, #40]	; (d569c <_ZN8MCP794105setupEv+0x58>)
   d5672:	490b      	ldr	r1, [pc, #44]	; (d56a0 <_ZN8MCP794105setupEv+0x5c>)
   d5674:	681b      	ldr	r3, [r3, #0]
   d5676:	9300      	str	r3, [sp, #0]
   d5678:	4632      	mov	r2, r6
   d567a:	463b      	mov	r3, r7
   d567c:	a802      	add	r0, sp, #8
   d567e:	f002 f871 	bl	d7764 <_ZN9TimeClass6formatExPKc>
   d5682:	4808      	ldr	r0, [pc, #32]	; (d56a4 <_ZN8MCP794105setupEv+0x60>)
   d5684:	9a02      	ldr	r2, [sp, #8]
   d5686:	4908      	ldr	r1, [pc, #32]	; (d56a8 <_ZN8MCP794105setupEv+0x64>)
   d5688:	f7ff fc56 	bl	d4f38 <_ZNK5spark6Logger4infoEPKcz>
   d568c:	a802      	add	r0, sp, #8
   d568e:	f001 fe75 	bl	d737c <_ZN6StringD1Ev>
	setupDone = true;
   d5692:	2301      	movs	r3, #1
   d5694:	7223      	strb	r3, [r4, #8]
}
   d5696:	b006      	add	sp, #24
   d5698:	bdd0      	pop	{r4, r6, r7, pc}
   d569a:	bf00      	nop
   d569c:	2003e388 	.word	0x2003e388
   d56a0:	2003e648 	.word	0x2003e648
   d56a4:	2003e5d8 	.word	0x2003e5d8
   d56a8:	000d9312 	.word	0x000d9312

000d56ac <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d56ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d56b0:	4606      	mov	r6, r0
   d56b2:	4688      	mov	r8, r1
   d56b4:	4691      	mov	r9, r2
   d56b6:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d56b8:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d56ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d56bc:	429d      	cmp	r5, r3
   d56be:	d229      	bcs.n	d5714 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d56c0:	6870      	ldr	r0, [r6, #4]
   d56c2:	4641      	mov	r1, r8
   d56c4:	f001 fc27 	bl	d6f16 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d56c8:	6870      	ldr	r0, [r6, #4]
   d56ca:	eb09 0105 	add.w	r1, r9, r5
   d56ce:	f7ff fc2f 	bl	d4f30 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d56d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d56d4:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d56d6:	2f1f      	cmp	r7, #31
   d56d8:	bf28      	it	cs
   d56da:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d56dc:	eb0a 0405 	add.w	r4, sl, r5
   d56e0:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d56e4:	6870      	ldr	r0, [r6, #4]
   d56e6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d56ea:	6802      	ldr	r2, [r0, #0]
   d56ec:	6892      	ldr	r2, [r2, #8]
   d56ee:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d56f0:	45a3      	cmp	fp, r4
   d56f2:	d1f7      	bne.n	d56e4 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d56f4:	6870      	ldr	r0, [r6, #4]
   d56f6:	2101      	movs	r1, #1
   d56f8:	f001 fc14 	bl	d6f24 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d56fc:	4604      	mov	r4, r0
   d56fe:	b138      	cbz	r0, d5710 <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d5700:	4602      	mov	r2, r0
   d5702:	4905      	ldr	r1, [pc, #20]	; (d5718 <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d5704:	4805      	ldr	r0, [pc, #20]	; (d571c <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d5706:	f7ff fc17 	bl	d4f38 <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d570a:	4620      	mov	r0, r4
   d570c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d5710:	443d      	add	r5, r7
	while(offset < bufLen) {
   d5712:	e7d2      	b.n	d56ba <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d5714:	2400      	movs	r4, #0
	return stat;
   d5716:	e7f8      	b.n	d570a <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d5718:	000d9327 	.word	0x000d9327
   d571c:	2003e5d8 	.word	0x2003e5d8

000d5720 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5720:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d5724:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5728:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d572a:	6803      	ldr	r3, [r0, #0]
   d572c:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d572e:	4605      	mov	r5, r0
   d5730:	460c      	mov	r4, r1
   d5732:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d5734:	4798      	blx	r3
   d5736:	4580      	cmp	r8, r0
   d5738:	d80d      	bhi.n	d5756 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d573a:	3420      	adds	r4, #32
   d573c:	6868      	ldr	r0, [r5, #4]
   d573e:	9600      	str	r6, [sp, #0]
   d5740:	463b      	mov	r3, r7
   d5742:	b2e2      	uxtb	r2, r4
   d5744:	216f      	movs	r1, #111	; 0x6f
   d5746:	f7ff ffb1 	bl	d56ac <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d574a:	fab0 f080 	clz	r0, r0
   d574e:	0940      	lsrs	r0, r0, #5
}
   d5750:	b002      	add	sp, #8
   d5752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d5756:	2000      	movs	r0, #0
   d5758:	e7fa      	b.n	d5750 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d575a <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d575a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d575c:	7c13      	ldrb	r3, [r2, #16]
   d575e:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d5762:	7bd3      	ldrb	r3, [r2, #15]
   d5764:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d5768:	7b93      	ldrb	r3, [r2, #14]
   d576a:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d576e:	7b53      	ldrb	r3, [r2, #13]
   d5770:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d5774:	7b13      	ldrb	r3, [r2, #12]
   d5776:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d577a:	7ad3      	ldrb	r3, [r2, #11]
   d577c:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d5780:	7a93      	ldrb	r3, [r2, #10]
   d5782:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d5786:	2307      	movs	r3, #7
   d5788:	9300      	str	r3, [sp, #0]
   d578a:	460a      	mov	r2, r1
   d578c:	ab02      	add	r3, sp, #8
   d578e:	216f      	movs	r1, #111	; 0x6f
   d5790:	f7ff ff8c 	bl	d56ac <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d5794:	b005      	add	sp, #20
   d5796:	f85d fb04 	ldr.w	pc, [sp], #4

000d579a <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d579a:	b510      	push	{r4, lr}
   d579c:	b088      	sub	sp, #32
   d579e:	4604      	mov	r4, r0
	MCP79410Time time;
   d57a0:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d57a2:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d57a4:	f7ff fd68 	bl	d5278 <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d57a8:	9b01      	ldr	r3, [sp, #4]
   d57aa:	a803      	add	r0, sp, #12
   d57ac:	f7ff fe27 	bl	d53fe <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d57b0:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d57b4:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d57b6:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d57ba:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d57be:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d57c2:	b16a      	cbz	r2, d57e0 <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d57c4:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d57c8:	aa03      	add	r2, sp, #12
   d57ca:	2100      	movs	r1, #0
   d57cc:	4620      	mov	r0, r4
   d57ce:	f88d 3019 	strb.w	r3, [sp, #25]
   d57d2:	f7ff ffc2 	bl	d575a <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d57d6:	fab0 f080 	clz	r0, r0
   d57da:	0940      	lsrs	r0, r0, #5
   d57dc:	b008      	add	sp, #32
   d57de:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d57e0:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d57e4:	e7f0      	b.n	d57c8 <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d57e8 <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d57e8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d57ea:	b087      	sub	sp, #28
   d57ec:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d57ee:	f001 fffb 	bl	d77e8 <_ZN9TimeClass7isValidEv>
   d57f2:	4604      	mov	r4, r0
   d57f4:	b1e8      	cbz	r0, d5832 <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d57f6:	f002 f814 	bl	d7822 <_ZN9TimeClass3nowEv>
   d57fa:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d57fc:	4602      	mov	r2, r0
		time_t now = Time.now();
   d57fe:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d5800:	463b      	mov	r3, r7
   d5802:	4628      	mov	r0, r5
   d5804:	f7ff ffc9 	bl	d579a <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d5808:	4b0c      	ldr	r3, [pc, #48]	; (d583c <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d580a:	490d      	ldr	r1, [pc, #52]	; (d5840 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d580c:	681b      	ldr	r3, [r3, #0]
   d580e:	9300      	str	r3, [sp, #0]
   d5810:	4632      	mov	r2, r6
   d5812:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d5814:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d5816:	a802      	add	r0, sp, #8
   d5818:	f001 ffa4 	bl	d7764 <_ZN9TimeClass6formatExPKc>
   d581c:	4809      	ldr	r0, [pc, #36]	; (d5844 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d581e:	9a02      	ldr	r2, [sp, #8]
   d5820:	4909      	ldr	r1, [pc, #36]	; (d5848 <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d5822:	f7ff fb89 	bl	d4f38 <_ZNK5spark6Logger4infoEPKcz>
   d5826:	a802      	add	r0, sp, #8
   d5828:	f001 fda8 	bl	d737c <_ZN6StringD1Ev>
}
   d582c:	4620      	mov	r0, r4
   d582e:	b007      	add	sp, #28
   d5830:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d5832:	4906      	ldr	r1, [pc, #24]	; (d584c <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d5834:	4803      	ldr	r0, [pc, #12]	; (d5844 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d5836:	f7ff fb7f 	bl	d4f38 <_ZNK5spark6Logger4infoEPKcz>
   d583a:	e7f7      	b.n	d582c <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d583c:	2003e388 	.word	0x2003e388
   d5840:	2003e648 	.word	0x2003e648
   d5844:	2003e5d8 	.word	0x2003e5d8
   d5848:	000d9342 	.word	0x000d9342
   d584c:	000d9358 	.word	0x000d9358

000d5850 <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d5850:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d5852:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d5854:	4604      	mov	r4, r0
	if (!timeSet) {
   d5856:	b99d      	cbnz	r5, d5880 <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d5858:	f001 ffc6 	bl	d77e8 <_ZN9TimeClass7isValidEv>
   d585c:	b180      	cbz	r0, d5880 <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d585e:	2200      	movs	r2, #0
   d5860:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d5862:	4669      	mov	r1, sp
   d5864:	4628      	mov	r0, r5
        tm = 0;
   d5866:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d586a:	f000 fe61 	bl	d6530 <spark_sync_time_last>
			if (lastSync != 0) {
   d586e:	b138      	cbz	r0, d5880 <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d5870:	7ae3      	ldrb	r3, [r4, #11]
   d5872:	07db      	lsls	r3, r3, #31
   d5874:	d502      	bpl.n	d587c <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d5876:	4620      	mov	r0, r4
   d5878:	f7ff ffb6 	bl	d57e8 <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d587c:	2301      	movs	r3, #1
   d587e:	7263      	strb	r3, [r4, #9]
}
   d5880:	b003      	add	sp, #12
   d5882:	bd30      	pop	{r4, r5, pc}

000d5884 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d5884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d5886:	2301      	movs	r3, #1
	buf[0] = value;
   d5888:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d588c:	9300      	str	r3, [sp, #0]
   d588e:	460a      	mov	r2, r1
   d5890:	ab03      	add	r3, sp, #12
   d5892:	216f      	movs	r1, #111	; 0x6f
   d5894:	f7ff ff0a 	bl	d56ac <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d5898:	b005      	add	sp, #20
   d589a:	f85d fb04 	ldr.w	pc, [sp], #4

000d589e <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d589e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d58a0:	4604      	mov	r4, r0
   d58a2:	460d      	mov	r5, r1
   d58a4:	4617      	mov	r7, r2
   d58a6:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d58a8:	f7ff fe90 	bl	d55cc <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   d58ac:	ea00 0207 	and.w	r2, r0, r7
	return deviceWriteRegisterByte(addr, value);
   d58b0:	4332      	orrs	r2, r6
   d58b2:	4629      	mov	r1, r5
   d58b4:	4620      	mov	r0, r4
}
   d58b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   d58ba:	f7ff bfe3 	b.w	d5884 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d58be <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   d58be:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   d58c0:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d58c2:	d80c      	bhi.n	d58de <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d58c4:	2900      	cmp	r1, #0
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d58c6:	f04f 0300 	mov.w	r3, #0
   d58ca:	bf14      	ite	ne
   d58cc:	22df      	movne	r2, #223	; 0xdf
   d58ce:	22ef      	moveq	r2, #239	; 0xef
   d58d0:	2107      	movs	r1, #7
   d58d2:	f7ff ffe4 	bl	d589e <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d58d6:	fab0 f080 	clz	r0, r0
   d58da:	0940      	lsrs	r0, r0, #5
}
   d58dc:	bd08      	pop	{r3, pc}
		return false;
   d58de:	2000      	movs	r0, #0
   d58e0:	e7fc      	b.n	d58dc <_ZN8MCP7941010clearAlarmEi+0x1e>

000d58e2 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d58e2:	b538      	push	{r3, r4, r5, lr}
   d58e4:	4604      	mov	r4, r0
   d58e6:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d58e8:	6860      	ldr	r0, [r4, #4]
   d58ea:	2157      	movs	r1, #87	; 0x57
   d58ec:	f001 fb13 	bl	d6f16 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d58f0:	6860      	ldr	r0, [r4, #4]
   d58f2:	2101      	movs	r1, #1
   d58f4:	f001 fb16 	bl	d6f24 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d58f8:	b108      	cbz	r0, d58fe <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d58fa:	3d01      	subs	r5, #1
   d58fc:	d1f4      	bne.n	d58e8 <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d58fe:	bd38      	pop	{r3, r4, r5, pc}

000d5900 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d5900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5904:	4604      	mov	r4, r0
   d5906:	460f      	mov	r7, r1
   d5908:	4616      	mov	r6, r2
   d590a:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d590e:	45b0      	cmp	r8, r6
   d5910:	d020      	beq.n	d5954 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d5912:	6860      	ldr	r0, [r4, #4]
   d5914:	2157      	movs	r1, #87	; 0x57
   d5916:	f001 fafe 	bl	d6f16 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d591a:	4639      	mov	r1, r7
   d591c:	6860      	ldr	r0, [r4, #4]
   d591e:	f7ff fb07 	bl	d4f30 <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d5922:	6860      	ldr	r0, [r4, #4]
   d5924:	f816 1b01 	ldrb.w	r1, [r6], #1
   d5928:	6803      	ldr	r3, [r0, #0]
   d592a:	689b      	ldr	r3, [r3, #8]
   d592c:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d592e:	6860      	ldr	r0, [r4, #4]
   d5930:	2101      	movs	r1, #1
   d5932:	f001 faf7 	bl	d6f24 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d5936:	3701      	adds	r7, #1
   d5938:	4605      	mov	r5, r0
   d593a:	b138      	cbz	r0, d594c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d593c:	4602      	mov	r2, r0
   d593e:	4906      	ldr	r1, [pc, #24]	; (d5958 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d5940:	4806      	ldr	r0, [pc, #24]	; (d595c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d5942:	f7ff faf9 	bl	d4f38 <_ZNK5spark6Logger4infoEPKcz>
}
   d5946:	4628      	mov	r0, r5
   d5948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d594c:	4620      	mov	r0, r4
   d594e:	f7ff ffc8 	bl	d58e2 <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d5952:	e7dc      	b.n	d590e <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d5954:	2500      	movs	r5, #0
	return stat;
   d5956:	e7f6      	b.n	d5946 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d5958:	000d936d 	.word	0x000d936d
   d595c:	2003e5d8 	.word	0x2003e5d8

000d5960 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d5962:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5964:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5966:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d5968:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d596a:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d596c:	4604      	mov	r4, r0
   d596e:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d5970:	4798      	blx	r3
   d5972:	4287      	cmp	r7, r0
   d5974:	d80a      	bhi.n	d598c <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d5976:	9a01      	ldr	r2, [sp, #4]
   d5978:	6860      	ldr	r0, [r4, #4]
   d597a:	4633      	mov	r3, r6
   d597c:	b2e9      	uxtb	r1, r5
   d597e:	f7ff ffbf 	bl	d5900 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d5982:	fab0 f080 	clz	r0, r0
   d5986:	0940      	lsrs	r0, r0, #5
}
   d5988:	b003      	add	sp, #12
   d598a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d598c:	2000      	movs	r0, #0
   d598e:	e7fb      	b.n	d5988 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d5990 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   d5990:	4b01      	ldr	r3, [pc, #4]	; (d5998 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d5992:	4a02      	ldr	r2, [pc, #8]	; (d599c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d5994:	601a      	str	r2, [r3, #0]
}
   d5996:	4770      	bx	lr
   d5998:	2003e5d8 	.word	0x2003e5d8
   d599c:	000d938e 	.word	0x000d938e

000d59a0 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d59a0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d59a2:	4603      	mov	r3, r0
	switch (__op)
   d59a4:	d102      	bne.n	d59ac <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d59a6:	6001      	str	r1, [r0, #0]
      }
   d59a8:	2000      	movs	r0, #0
   d59aa:	4770      	bx	lr
	  switch (__op)
   d59ac:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d59ae:	bf04      	itt	eq
   d59b0:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d59b4:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d59b8:	e7f6      	b.n	d59a8 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d59ba <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d59ba:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d59bc:	2301      	movs	r3, #1
   d59be:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d59c0:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d59c2:	4604      	mov	r4, r0
        if (th->func) {
   d59c4:	b143      	cbz	r3, d59d8 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d59c6:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d59c8:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d59ca:	2301      	movs	r3, #1
   d59cc:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d59ce:	2000      	movs	r0, #0
    }
   d59d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d59d4:	f000 bb66 	b.w	d60a4 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d59d8:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d59da:	2800      	cmp	r0, #0
   d59dc:	d0f5      	beq.n	d59ca <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d59de:	6883      	ldr	r3, [r0, #8]
   d59e0:	b90b      	cbnz	r3, d59e6 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d59e2:	f002 f9ec 	bl	d7dbe <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d59e6:	68c3      	ldr	r3, [r0, #12]
   d59e8:	e7ee      	b.n	d59c8 <_ZN6Thread3runEPv+0xe>

000d59ea <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d59ea:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d59ec:	6842      	ldr	r2, [r0, #4]
   d59ee:	4603      	mov	r3, r0
   d59f0:	1054      	asrs	r4, r2, #1
   d59f2:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d59f6:	07d2      	lsls	r2, r2, #31
   d59f8:	bf48      	it	mi
   d59fa:	590a      	ldrmi	r2, [r1, r4]
   d59fc:	681b      	ldr	r3, [r3, #0]
      }
   d59fe:	f85d 4b04 	ldr.w	r4, [sp], #4
   d5a02:	bf48      	it	mi
   d5a04:	58d3      	ldrmi	r3, [r2, r3]
   d5a06:	4718      	bx	r3

000d5a08 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d5a08:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d5a0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d5a0c:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d5a10:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d5a12:	3008      	adds	r0, #8
   d5a14:	f000 fb1e 	bl	d6054 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d5a18:	2004      	movs	r0, #4
   d5a1a:	f7fe fb3c 	bl	d4096 <_Znwj>
   d5a1e:	4605      	mov	r5, r0
   d5a20:	b398      	cbz	r0, d5a8a <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d5a22:	491b      	ldr	r1, [pc, #108]	; (d5a90 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d5a24:	2014      	movs	r0, #20
   d5a26:	f002 f9c6 	bl	d7db6 <_ZnwjRKSt9nothrow_t>
   d5a2a:	b130      	cbz	r0, d5a3a <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5a2c:	2300      	movs	r3, #0
            exited(false) {
   d5a2e:	e9c0 3300 	strd	r3, r3, [r0]
   d5a32:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d5a36:	7403      	strb	r3, [r0, #16]
   d5a38:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d5a3a:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d5a3c:	b1a0      	cbz	r0, d5a68 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d5a3e:	4b15      	ldr	r3, [pc, #84]	; (d5a94 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5a40:	4915      	ldr	r1, [pc, #84]	; (d5a98 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d5a42:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d5a46:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d5a4a:	e9cd 0300 	strd	r0, r3, [sp]
   d5a4e:	2202      	movs	r2, #2
   d5a50:	4b12      	ldr	r3, [pc, #72]	; (d5a9c <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d5a52:	3004      	adds	r0, #4
   d5a54:	f000 fac6 	bl	d5fe4 <os_thread_create>
   d5a58:	b930      	cbnz	r0, d5a68 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d5a5a:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d5a5c:	7c1b      	ldrb	r3, [r3, #16]
   d5a5e:	b9a3      	cbnz	r3, d5a8a <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d5a60:	2001      	movs	r0, #1
   d5a62:	f000 fb3f 	bl	d60e4 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d5a66:	e7f8      	b.n	d5a5a <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a68:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5a6a:	2300      	movs	r3, #0
   d5a6c:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d5a6e:	b164      	cbz	r4, d5a8a <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d5a70:	6827      	ldr	r7, [r4, #0]
   d5a72:	b137      	cbz	r7, d5a82 <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d5a74:	4638      	mov	r0, r7
   d5a76:	f7fe fbc9 	bl	d420c <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d5a7a:	2110      	movs	r1, #16
   d5a7c:	4638      	mov	r0, r7
   d5a7e:	f002 f998 	bl	d7db2 <_ZdlPvj>
   d5a82:	2114      	movs	r1, #20
   d5a84:	4620      	mov	r0, r4
   d5a86:	f002 f994 	bl	d7db2 <_ZdlPvj>
   d5a8a:	6075      	str	r5, [r6, #4]
}
   d5a8c:	b003      	add	sp, #12
   d5a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5a90:	000d9690 	.word	0x000d9690
   d5a94:	000d5ca7 	.word	0x000d5ca7
   d5a98:	000d9400 	.word	0x000d9400
   d5a9c:	000d59bb 	.word	0x000d59bb

000d5aa0 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d5aa0:	f247 5130 	movw	r1, #30000	; 0x7530
   d5aa4:	4a08      	ldr	r2, [pc, #32]	; (d5ac8 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d5aa6:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5aa8:	4908      	ldr	r1, [pc, #32]	; (d5acc <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d5aaa:	6002      	str	r2, [r0, #0]
   d5aac:	2200      	movs	r2, #0
   d5aae:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d5ab2:	4907      	ldr	r1, [pc, #28]	; (d5ad0 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d5ab4:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d5ab6:	4907      	ldr	r1, [pc, #28]	; (d5ad4 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d5ab8:	6042      	str	r2, [r0, #4]
   d5aba:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d5abe:	6181      	str	r1, [r0, #24]
   d5ac0:	8502      	strh	r2, [r0, #40]	; 0x28
   d5ac2:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d5ac6:	4770      	bx	lr
   d5ac8:	000d94c4 	.word	0x000d94c4
   d5acc:	000d5e11 	.word	0x000d5e11
   d5ad0:	000d59eb 	.word	0x000d59eb
   d5ad4:	000d59a1 	.word	0x000d59a1

000d5ad8 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d5ad8:	b510      	push	{r4, lr}
   d5ada:	4b04      	ldr	r3, [pc, #16]	; (d5aec <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d5adc:	4604      	mov	r4, r0
   d5ade:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d5ae2:	f7fe fb93 	bl	d420c <_ZNSt14_Function_baseD1Ev>
}
   d5ae6:	4620      	mov	r0, r4
   d5ae8:	bd10      	pop	{r4, pc}
   d5aea:	bf00      	nop
   d5aec:	000d94c4 	.word	0x000d94c4

000d5af0 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d5af0:	b510      	push	{r4, lr}
   d5af2:	4b03      	ldr	r3, [pc, #12]	; (d5b00 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d5af4:	6003      	str	r3, [r0, #0]
   d5af6:	4604      	mov	r4, r0
   d5af8:	f7ff ffee 	bl	d5ad8 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d5afc:	4620      	mov	r0, r4
   d5afe:	bd10      	pop	{r4, pc}
   d5b00:	000d94ec 	.word	0x000d94ec

000d5b04 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d5b04:	b510      	push	{r4, lr}
   d5b06:	4604      	mov	r4, r0
}
   d5b08:	f7ff fff2 	bl	d5af0 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d5b0c:	4620      	mov	r0, r4
   d5b0e:	2138      	movs	r1, #56	; 0x38
   d5b10:	f002 f94f 	bl	d7db2 <_ZdlPvj>
   d5b14:	4620      	mov	r0, r4
   d5b16:	bd10      	pop	{r4, pc}

000d5b18 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d5b18:	6880      	ldr	r0, [r0, #8]
   d5b1a:	f000 baa3 	b.w	d6064 <os_mutex_lock>

000d5b1e <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d5b1e:	6880      	ldr	r0, [r0, #8]
   d5b20:	f000 baa8 	b.w	d6074 <os_mutex_unlock>

000d5b24 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d5b24:	b510      	push	{r4, lr}
   d5b26:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d5b28:	6800      	ldr	r0, [r0, #0]
   d5b2a:	f7ff fff8 	bl	d5b1e <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d5b2e:	4620      	mov	r0, r4
   d5b30:	bd10      	pop	{r4, pc}

000d5b32 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d5b32:	b513      	push	{r0, r1, r4, lr}
   d5b34:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d5b36:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d5b38:	f7ff ffee 	bl	d5b18 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d5b3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d5b3e:	88dc      	ldrh	r4, [r3, #6]
   d5b40:	b2a4      	uxth	r4, r4
   d5b42:	b10c      	cbz	r4, d5b48 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d5b44:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d5b48:	a801      	add	r0, sp, #4
   d5b4a:	f7ff ffeb 	bl	d5b24 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d5b4e:	4620      	mov	r0, r4
   d5b50:	b002      	add	sp, #8
   d5b52:	bd10      	pop	{r4, pc}

000d5b54 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d5b54:	b513      	push	{r0, r1, r4, lr}
   d5b56:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d5b58:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d5b5a:	f7ff ffdd 	bl	d5b18 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d5b5e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d5b62:	b943      	cbnz	r3, d5b76 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d5b64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d5b66:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d5b68:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d5b6a:	a801      	add	r0, sp, #4
   d5b6c:	f7ff ffda 	bl	d5b24 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d5b70:	4620      	mov	r0, r4
   d5b72:	b002      	add	sp, #8
   d5b74:	bd10      	pop	{r4, pc}
	bool result = false;
   d5b76:	2400      	movs	r4, #0
   d5b78:	e7f7      	b.n	d5b6a <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d5b7a <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d5b7a:	b513      	push	{r0, r1, r4, lr}
   d5b7c:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d5b7e:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d5b80:	f7ff ffca 	bl	d5b18 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d5b84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d5b86:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d5b88:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d5b8a:	f7ff ffcb 	bl	d5b24 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d5b8e:	4620      	mov	r0, r4
   d5b90:	b002      	add	sp, #8
   d5b92:	bd10      	pop	{r4, pc}

000d5b94 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d5b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5b98:	4699      	mov	r9, r3
   d5b9a:	b086      	sub	sp, #24
	if (!haveSetup) {
   d5b9c:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d5ba0:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d5ba4:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d5ba8:	4604      	mov	r4, r0
   d5baa:	460f      	mov	r7, r1
   d5bac:	4616      	mov	r6, r2
	if (!haveSetup) {
   d5bae:	b913      	cbnz	r3, d5bb6 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d5bb0:	6803      	ldr	r3, [r0, #0]
   d5bb2:	689b      	ldr	r3, [r3, #8]
   d5bb4:	4798      	blx	r3
		data = "";
   d5bb6:	4b31      	ldr	r3, [pc, #196]	; (d5c7c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d5bb8:	4638      	mov	r0, r7
		data = "";
   d5bba:	2e00      	cmp	r6, #0
   d5bbc:	bf08      	it	eq
   d5bbe:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d5bc0:	f003 f967 	bl	d8e92 <strlen>
   d5bc4:	4605      	mov	r5, r0
   d5bc6:	4630      	mov	r0, r6
   d5bc8:	f003 f963 	bl	d8e92 <strlen>
   d5bcc:	4428      	add	r0, r5
   d5bce:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d5bd2:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d5bd4:	bf1c      	itt	ne
   d5bd6:	f025 0503 	bicne.w	r5, r5, #3
   d5bda:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d5bdc:	4633      	mov	r3, r6
   d5bde:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d5be2:	e9cd 9a00 	strd	r9, sl, [sp]
   d5be6:	4926      	ldr	r1, [pc, #152]	; (d5c80 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d5be8:	4826      	ldr	r0, [pc, #152]	; (d5c84 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d5bea:	463a      	mov	r2, r7
   d5bec:	f7ff f9a4 	bl	d4f38 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d5bf0:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d5bf2:	3b08      	subs	r3, #8
   d5bf4:	42ab      	cmp	r3, r5
   d5bf6:	d212      	bcs.n	d5c1e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d5bf8:	2400      	movs	r4, #0
}
   d5bfa:	4620      	mov	r0, r4
   d5bfc:	b006      	add	sp, #24
   d5bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d5c02:	88cb      	ldrh	r3, [r1, #6]
   d5c04:	2b01      	cmp	r3, #1
   d5c06:	d036      	beq.n	d5c76 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d5c08:	a805      	add	r0, sp, #20
   d5c0a:	f7ff ff8b 	bl	d5b24 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d5c0e:	6823      	ldr	r3, [r4, #0]
   d5c10:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d5c14:	699b      	ldr	r3, [r3, #24]
   d5c16:	4620      	mov	r0, r4
   d5c18:	4798      	blx	r3
   d5c1a:	2800      	cmp	r0, #0
   d5c1c:	d0ec      	beq.n	d5bf8 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d5c1e:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d5c20:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d5c22:	f7ff ff79 	bl	d5b18 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d5c26:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d5c28:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d5c2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d5c2c:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d5c2e:	1ad2      	subs	r2, r2, r3
   d5c30:	42aa      	cmp	r2, r5
   d5c32:	d3e6      	bcc.n	d5c02 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d5c34:	ea48 080a 	orr.w	r8, r8, sl
   d5c38:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d5c3c:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d5c40:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d5c42:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d5c46:	4639      	mov	r1, r7
   d5c48:	4640      	mov	r0, r8
   d5c4a:	f003 f8fd 	bl	d8e48 <strcpy>
				cp += strlen(cp) + 1;
   d5c4e:	4640      	mov	r0, r8
   d5c50:	f003 f91f 	bl	d8e92 <strlen>
   d5c54:	3001      	adds	r0, #1
				strcpy(cp, data);
   d5c56:	4631      	mov	r1, r6
   d5c58:	4440      	add	r0, r8
   d5c5a:	f003 f8f5 	bl	d8e48 <strcpy>
				nextFree += size;
   d5c5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d5c60:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d5c62:	441d      	add	r5, r3
   d5c64:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d5c66:	88d3      	ldrh	r3, [r2, #6]
   d5c68:	3301      	adds	r3, #1
   d5c6a:	80d3      	strh	r3, [r2, #6]
				return true;
   d5c6c:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d5c6e:	a805      	add	r0, sp, #20
   d5c70:	f7ff ff58 	bl	d5b24 <_ZN11StMutexLockD1Ev>
   d5c74:	e7c1      	b.n	d5bfa <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d5c76:	2400      	movs	r4, #0
   d5c78:	e7f9      	b.n	d5c6e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d5c7a:	bf00      	nop
   d5c7c:	000d96b8 	.word	0x000d96b8
   d5c80:	000d9412 	.word	0x000d9412
   d5c84:	2003e5dc 	.word	0x2003e5dc

000d5c88 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d5c88:	b508      	push	{r3, lr}
   d5c8a:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5c8c:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d5c90:	69a3      	ldr	r3, [r4, #24]
   d5c92:	b90b      	cbnz	r3, d5c98 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d5c94:	f002 f893 	bl	d7dbe <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5c98:	69e3      	ldr	r3, [r4, #28]
   d5c9a:	4621      	mov	r1, r4
   d5c9c:	4628      	mov	r0, r5
   d5c9e:	4798      	blx	r3
		os_thread_yield();
   d5ca0:	f000 f9a8 	bl	d5ff4 <os_thread_yield>
	while(true) {
   d5ca4:	e7f4      	b.n	d5c90 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d5ca6 <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d5ca6:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d5ca8:	f7ff ffee 	bl	d5c88 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d5cac <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d5cac:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d5cae:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d5cb2:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d5cb4:	4628      	mov	r0, r5
   d5cb6:	f003 f8ec 	bl	d8e92 <strlen>
   d5cba:	3001      	adds	r0, #1
   d5cbc:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d5cbe:	4628      	mov	r0, r5
   d5cc0:	f003 f8e7 	bl	d8e92 <strlen>
	size_t offset = start - retainedBuffer;
   d5cc4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d5cc6:	3001      	adds	r0, #1
   d5cc8:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d5cca:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d5ccc:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d5cd0:	bf1c      	itt	ne
   d5cd2:	f1c3 0304 	rsbne	r3, r3, #4
   d5cd6:	18c0      	addne	r0, r0, r3
}
   d5cd8:	bd68      	pop	{r3, r5, r6, pc}

000d5cda <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d5cda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5cdc:	4604      	mov	r4, r0
   d5cde:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d5ce0:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d5ce2:	f7ff ff19 	bl	d5b18 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d5ce6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d5ce8:	88fb      	ldrh	r3, [r7, #6]
   d5cea:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d5cee:	b1e6      	cbz	r6, d5d2a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d5cf0:	2b01      	cmp	r3, #1
   d5cf2:	d922      	bls.n	d5d3a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d5cf4:	4629      	mov	r1, r5
   d5cf6:	4620      	mov	r0, r4
   d5cf8:	f7ff ffd8 	bl	d5cac <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d5cfc:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d5cfe:	4629      	mov	r1, r5
   d5d00:	4620      	mov	r0, r4
   d5d02:	f7ff ffd3 	bl	d5cac <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d5d06:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d5d08:	443a      	add	r2, r7
	if (after > 0) {
   d5d0a:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d5d0c:	4601      	mov	r1, r0
	size_t len = next - start;
   d5d0e:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d5d12:	d002      	beq.n	d5d1a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d5d14:	4628      	mov	r0, r5
   d5d16:	f003 f847 	bl	d8da8 <memmove>
	nextFree -= len;
   d5d1a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d5d1c:	1b9b      	subs	r3, r3, r6
   d5d1e:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d5d20:	88fb      	ldrh	r3, [r7, #6]
   d5d22:	3b01      	subs	r3, #1
   d5d24:	80fb      	strh	r3, [r7, #6]
	return true;
   d5d26:	2601      	movs	r6, #1
   d5d28:	e001      	b.n	d5d2e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d5d2a:	2b00      	cmp	r3, #0
   d5d2c:	d1e7      	bne.n	d5cfe <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d5d2e:	a801      	add	r0, sp, #4
   d5d30:	f7ff fef8 	bl	d5b24 <_ZN11StMutexLockD1Ev>
}
   d5d34:	4630      	mov	r0, r6
   d5d36:	b003      	add	sp, #12
   d5d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d5d3a:	2600      	movs	r6, #0
   d5d3c:	e7f7      	b.n	d5d2e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d5d40 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d5d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5d44:	460d      	mov	r5, r1
   d5d46:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5d48:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d5d4a:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d5d4c:	f7ff fea8 	bl	d5aa0 <_ZN21PublishQueueAsyncBaseC1Ev>
   d5d50:	4b15      	ldr	r3, [pc, #84]	; (d5da8 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5d52:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d5d56:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5d58:	4b14      	ldr	r3, [pc, #80]	; (d5dac <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d5d5a:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5d5c:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d5d5e:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d5d60:	4698      	mov	r8, r3
   d5d62:	d117      	bne.n	d5d94 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d5d64:	88ab      	ldrh	r3, [r5, #4]
   d5d66:	b29b      	uxth	r3, r3
   d5d68:	42b3      	cmp	r3, r6
   d5d6a:	d113      	bne.n	d5d94 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d5d6c:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d5d70:	6367      	str	r7, [r4, #52]	; 0x34
   d5d72:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d5d76:	88eb      	ldrh	r3, [r5, #6]
   d5d78:	fa1f f289 	uxth.w	r2, r9
   d5d7c:	b29b      	uxth	r3, r3
   d5d7e:	429a      	cmp	r2, r3
   d5d80:	d20e      	bcs.n	d5da0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d5d82:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d5d84:	4620      	mov	r0, r4
   d5d86:	f7ff ff91 	bl	d5cac <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d5d8a:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d5d8c:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d5d8e:	f109 0901 	add.w	r9, r9, #1
   d5d92:	d9f0      	bls.n	d5d76 <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d5d94:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d5d96:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d5d9a:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d5d9c:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d5d9e:	80eb      	strh	r3, [r5, #6]
}
   d5da0:	4620      	mov	r0, r4
   d5da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5da6:	bf00      	nop
   d5da8:	000d94ec 	.word	0x000d94ec
   d5dac:	d19cab61 	.word	0xd19cab61

000d5db0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d5db0:	b510      	push	{r4, lr}
   d5db2:	e9d1 2300 	ldrd	r2, r3, [r1]
   d5db6:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d5db8:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d5dba:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d5dbc:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d5dbe:	b90a      	cbnz	r2, d5dc4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d5dc0:	07d9      	lsls	r1, r3, #31
   d5dc2:	d505      	bpl.n	d5dd0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5dc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d5dc8:	4b0f      	ldr	r3, [pc, #60]	; (d5e08 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d5dca:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d5dcc:	4b0f      	ldr	r3, [pc, #60]	; (d5e0c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d5dce:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5dd0:	ab02      	add	r3, sp, #8
   d5dd2:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5dd6:	466a      	mov	r2, sp
   d5dd8:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5ddc:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5de0:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5de4:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5de8:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d5dea:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5dee:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5df0:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5df2:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5df4:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d5df6:	4618      	mov	r0, r3
   d5df8:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5dfa:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5dfc:	9105      	str	r1, [sp, #20]
   d5dfe:	f7fe fa05 	bl	d420c <_ZNSt14_Function_baseD1Ev>
	}
   d5e02:	4620      	mov	r0, r4
   d5e04:	b006      	add	sp, #24
   d5e06:	bd10      	pop	{r4, pc}
   d5e08:	000d59eb 	.word	0x000d59eb
   d5e0c:	000d59a1 	.word	0x000d59a1

000d5e10 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d5e10:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d5e12:	4b05      	ldr	r3, [pc, #20]	; (d5e28 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d5e14:	9300      	str	r3, [sp, #0]
   d5e16:	4669      	mov	r1, sp
   d5e18:	2300      	movs	r3, #0
   d5e1a:	3010      	adds	r0, #16
   d5e1c:	9301      	str	r3, [sp, #4]
   d5e1e:	f7ff ffc7 	bl	d5db0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d5e22:	b003      	add	sp, #12
   d5e24:	f85d fb04 	ldr.w	pc, [sp], #4
   d5e28:	000d5e59 	.word	0x000d5e59

000d5e2c <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d5e2c:	b513      	push	{r0, r1, r4, lr}
   d5e2e:	4604      	mov	r4, r0
   d5e30:	f000 f968 	bl	d6104 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d5e34:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5e36:	1ac0      	subs	r0, r0, r3
   d5e38:	68e3      	ldr	r3, [r4, #12]
   d5e3a:	4298      	cmp	r0, r3
   d5e3c:	d308      	bcc.n	d5e50 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d5e3e:	4b05      	ldr	r3, [pc, #20]	; (d5e54 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d5e40:	9300      	str	r3, [sp, #0]
   d5e42:	4669      	mov	r1, sp
   d5e44:	2300      	movs	r3, #0
   d5e46:	f104 0010 	add.w	r0, r4, #16
   d5e4a:	9301      	str	r3, [sp, #4]
   d5e4c:	f7ff ffb0 	bl	d5db0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d5e50:	b002      	add	sp, #8
   d5e52:	bd10      	pop	{r4, pc}
   d5e54:	000d5e59 	.word	0x000d5e59

000d5e58 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d5e58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d5e5c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d5e60:	b086      	sub	sp, #24
   d5e62:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d5e64:	2b00      	cmp	r3, #0
   d5e66:	d164      	bne.n	d5f32 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5e68:	f000 fb32 	bl	d64d0 <spark_cloud_flag_connected>
   d5e6c:	2800      	cmp	r0, #0
   d5e6e:	d060      	beq.n	d5f32 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d5e70:	f000 f948 	bl	d6104 <HAL_Timer_Get_Milli_Seconds>
   d5e74:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d5e76:	1ac0      	subs	r0, r0, r3
   d5e78:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d5e7c:	4298      	cmp	r0, r3
   d5e7e:	d958      	bls.n	d5f32 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d5e80:	6823      	ldr	r3, [r4, #0]
   d5e82:	4620      	mov	r0, r4
   d5e84:	695b      	ldr	r3, [r3, #20]
   d5e86:	4798      	blx	r3
		if (data) {
   d5e88:	4605      	mov	r5, r0
   d5e8a:	2800      	cmp	r0, #0
   d5e8c:	d051      	beq.n	d5f32 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d5e8e:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d5e92:	2301      	movs	r3, #1
   d5e94:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d5e98:	4638      	mov	r0, r7
   d5e9a:	f002 fffa 	bl	d8e92 <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d5e9e:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d5ea2:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d5ea6:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d5ea8:	682b      	ldr	r3, [r5, #0]
   d5eaa:	492b      	ldr	r1, [pc, #172]	; (d5f58 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d5eac:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d5eae:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d5eb0:	4633      	mov	r3, r6
   d5eb2:	482a      	ldr	r0, [pc, #168]	; (d5f5c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d5eb4:	463a      	mov	r2, r7
   d5eb6:	f7ff f83f 	bl	d4f38 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d5eba:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d5ebc:	f88d 8000 	strb.w	r8, [sp]
   d5ec0:	4632      	mov	r2, r6
   d5ec2:	4639      	mov	r1, r7
   d5ec4:	a802      	add	r0, sp, #8
   d5ec6:	f000 fe05 	bl	d6ad4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d5eca:	9d02      	ldr	r5, [sp, #8]
   d5ecc:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d5ece:	b91b      	cbnz	r3, d5ed8 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d5ed0:	2001      	movs	r0, #1
   d5ed2:	f000 fbfd 	bl	d66d0 <delay>
			while(!request.isDone()) {
   d5ed6:	e7f8      	b.n	d5eca <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5ed8:	2000      	movs	r0, #0
   d5eda:	f000 faa3 	bl	d6424 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5ede:	b120      	cbz	r0, d5eea <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d5ee0:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d5ee2:	b913      	cbnz	r3, d5eea <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d5ee4:	f000 faec 	bl	d64c0 <spark_process>
    }
   d5ee8:	e7fa      	b.n	d5ee0 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5eea:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d5eec:	2b01      	cmp	r3, #1
   d5eee:	d123      	bne.n	d5f38 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d5ef0:	491b      	ldr	r1, [pc, #108]	; (d5f60 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d5ef2:	481a      	ldr	r0, [pc, #104]	; (d5f5c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d5ef4:	f7ff f820 	bl	d4f38 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d5ef8:	6823      	ldr	r3, [r4, #0]
   d5efa:	2100      	movs	r1, #0
   d5efc:	699b      	ldr	r3, [r3, #24]
   d5efe:	4620      	mov	r0, r4
   d5f00:	4798      	blx	r3
			isSending = false;
   d5f02:	2300      	movs	r3, #0
   d5f04:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d5f08:	f000 f8fc 	bl	d6104 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d5f0c:	6260      	str	r0, [r4, #36]	; 0x24
	if (_M_pi != nullptr)
   d5f0e:	9c03      	ldr	r4, [sp, #12]
   d5f10:	b17c      	cbz	r4, d5f32 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d5f12:	6863      	ldr	r3, [r4, #4]
   d5f14:	3b01      	subs	r3, #1
   d5f16:	6063      	str	r3, [r4, #4]
   d5f18:	b95b      	cbnz	r3, d5f32 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d5f1a:	6823      	ldr	r3, [r4, #0]
   d5f1c:	4620      	mov	r0, r4
   d5f1e:	689b      	ldr	r3, [r3, #8]
   d5f20:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5f22:	68a3      	ldr	r3, [r4, #8]
   d5f24:	3b01      	subs	r3, #1
   d5f26:	60a3      	str	r3, [r4, #8]
   d5f28:	b91b      	cbnz	r3, d5f32 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d5f2a:	6823      	ldr	r3, [r4, #0]
   d5f2c:	4620      	mov	r0, r4
   d5f2e:	68db      	ldr	r3, [r3, #12]
   d5f30:	4798      	blx	r3
}
   d5f32:	b006      	add	sp, #24
   d5f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d5f38:	68e2      	ldr	r2, [r4, #12]
   d5f3a:	490a      	ldr	r1, [pc, #40]	; (d5f64 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d5f3c:	4807      	ldr	r0, [pc, #28]	; (d5f5c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d5f3e:	f7fe fffb 	bl	d4f38 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d5f42:	4b09      	ldr	r3, [pc, #36]	; (d5f68 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d5f44:	9304      	str	r3, [sp, #16]
   d5f46:	a904      	add	r1, sp, #16
   d5f48:	2300      	movs	r3, #0
   d5f4a:	f104 0010 	add.w	r0, r4, #16
   d5f4e:	9305      	str	r3, [sp, #20]
   d5f50:	f7ff ff2e 	bl	d5db0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d5f54:	e7d5      	b.n	d5f02 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d5f56:	bf00      	nop
   d5f58:	000d9453 	.word	0x000d9453
   d5f5c:	2003e5dc 	.word	0x2003e5dc
   d5f60:	000d9474 	.word	0x000d9474
   d5f64:	000d948b 	.word	0x000d948b
   d5f68:	000d5e2d 	.word	0x000d5e2d

000d5f6c <_GLOBAL__sub_I_pubqLogger>:
   d5f6c:	4b01      	ldr	r3, [pc, #4]	; (d5f74 <_GLOBAL__sub_I_pubqLogger+0x8>)
   d5f6e:	4a02      	ldr	r2, [pc, #8]	; (d5f78 <_GLOBAL__sub_I_pubqLogger+0xc>)
   d5f70:	601a      	str	r2, [r3, #0]
}
   d5f72:	4770      	bx	lr
   d5f74:	2003e5dc 	.word	0x2003e5dc
   d5f78:	000d94b2 	.word	0x000d94b2

000d5f7c <_ZN7TwoWire5writeEi>:
  inline size_t write(int n) { return write((uint8_t)n); }
   d5f7c:	6803      	ldr	r3, [r0, #0]
   d5f7e:	b2c9      	uxtb	r1, r1
   d5f80:	689b      	ldr	r3, [r3, #8]
   d5f82:	4718      	bx	r3

000d5f84 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d5f84:	4770      	bx	lr

000d5f86 <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d5f86:	b538      	push	{r3, r4, r5, lr}
   d5f88:	4605      	mov	r5, r0
   d5f8a:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d5f8c:	f001 fee4 	bl	d7d58 <_Z19__fetch_global_Wirev>
   d5f90:	7829      	ldrb	r1, [r5, #0]
   d5f92:	f000 ffc0 	bl	d6f16 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d5f96:	f001 fedf 	bl	d7d58 <_Z19__fetch_global_Wirev>
   d5f9a:	0a21      	lsrs	r1, r4, #8
   d5f9c:	f7ff ffee 	bl	d5f7c <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d5fa0:	f001 feda 	bl	d7d58 <_Z19__fetch_global_Wirev>
   d5fa4:	b2e1      	uxtb	r1, r4
   d5fa6:	f7ff ffe9 	bl	d5f7c <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d5faa:	f001 fed5 	bl	d7d58 <_Z19__fetch_global_Wirev>
}
   d5fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();  
   d5fb2:	f000 bfbb 	b.w	d6f2c <_ZN7TwoWire15endTransmissionEv>

000d5fb6 <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
   d5fb6:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d5fb8:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d5fbc:	f7ff ffe3 	bl	d5f86 <_ZN14Adafruit_SHT3112writeCommandEt>
}
   d5fc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
   d5fc4:	200a      	movs	r0, #10
   d5fc6:	f000 bb83 	b.w	d66d0 <delay>

000d5fca <_ZN14Adafruit_SHT315beginEh>:
boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d5fca:	b538      	push	{r3, r4, r5, lr}
   d5fcc:	4604      	mov	r4, r0
   d5fce:	460d      	mov	r5, r1
  Wire.begin();
   d5fd0:	f001 fec2 	bl	d7d58 <_Z19__fetch_global_Wirev>
   d5fd4:	f000 ff70 	bl	d6eb8 <_ZN7TwoWire5beginEv>
  reset();
   d5fd8:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
   d5fda:	7025      	strb	r5, [r4, #0]
  reset();
   d5fdc:	f7ff ffeb 	bl	d5fb6 <_ZN14Adafruit_SHT315resetEv>
}
   d5fe0:	2001      	movs	r0, #1
   d5fe2:	bd38      	pop	{r3, r4, r5, pc}

000d5fe4 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d5fe4:	b508      	push	{r3, lr}
   d5fe6:	4b02      	ldr	r3, [pc, #8]	; (d5ff0 <os_thread_create+0xc>)
   d5fe8:	681b      	ldr	r3, [r3, #0]
   d5fea:	685b      	ldr	r3, [r3, #4]
   d5fec:	9301      	str	r3, [sp, #4]
   d5fee:	bd08      	pop	{r3, pc}
   d5ff0:	00030248 	.word	0x00030248

000d5ff4 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d5ff4:	b508      	push	{r3, lr}
   d5ff6:	4b02      	ldr	r3, [pc, #8]	; (d6000 <os_thread_yield+0xc>)
   d5ff8:	681b      	ldr	r3, [r3, #0]
   d5ffa:	68db      	ldr	r3, [r3, #12]
   d5ffc:	9301      	str	r3, [sp, #4]
   d5ffe:	bd08      	pop	{r3, pc}
   d6000:	00030248 	.word	0x00030248

000d6004 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d6004:	b508      	push	{r3, lr}
   d6006:	4b02      	ldr	r3, [pc, #8]	; (d6010 <os_thread_scheduling+0xc>)
   d6008:	681b      	ldr	r3, [r3, #0]
   d600a:	69db      	ldr	r3, [r3, #28]
   d600c:	9301      	str	r3, [sp, #4]
   d600e:	bd08      	pop	{r3, pc}
   d6010:	00030248 	.word	0x00030248

000d6014 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d6014:	b508      	push	{r3, lr}
   d6016:	4b02      	ldr	r3, [pc, #8]	; (d6020 <os_timer_create+0xc>)
   d6018:	681b      	ldr	r3, [r3, #0]
   d601a:	6a1b      	ldr	r3, [r3, #32]
   d601c:	9301      	str	r3, [sp, #4]
   d601e:	bd08      	pop	{r3, pc}
   d6020:	00030248 	.word	0x00030248

000d6024 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d6024:	b508      	push	{r3, lr}
   d6026:	4b02      	ldr	r3, [pc, #8]	; (d6030 <os_timer_destroy+0xc>)
   d6028:	681b      	ldr	r3, [r3, #0]
   d602a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d602c:	9301      	str	r3, [sp, #4]
   d602e:	bd08      	pop	{r3, pc}
   d6030:	00030248 	.word	0x00030248

000d6034 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d6034:	b508      	push	{r3, lr}
   d6036:	4b02      	ldr	r3, [pc, #8]	; (d6040 <os_timer_get_id+0xc>)
   d6038:	681b      	ldr	r3, [r3, #0]
   d603a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d603c:	9301      	str	r3, [sp, #4]
   d603e:	bd08      	pop	{r3, pc}
   d6040:	00030248 	.word	0x00030248

000d6044 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d6044:	b508      	push	{r3, lr}
   d6046:	4b02      	ldr	r3, [pc, #8]	; (d6050 <os_timer_change+0xc>)
   d6048:	681b      	ldr	r3, [r3, #0]
   d604a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d604c:	9301      	str	r3, [sp, #4]
   d604e:	bd08      	pop	{r3, pc}
   d6050:	00030248 	.word	0x00030248

000d6054 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d6054:	b508      	push	{r3, lr}
   d6056:	4b02      	ldr	r3, [pc, #8]	; (d6060 <os_mutex_create+0xc>)
   d6058:	681b      	ldr	r3, [r3, #0]
   d605a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d605c:	9301      	str	r3, [sp, #4]
   d605e:	bd08      	pop	{r3, pc}
   d6060:	00030248 	.word	0x00030248

000d6064 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d6064:	b508      	push	{r3, lr}
   d6066:	4b02      	ldr	r3, [pc, #8]	; (d6070 <os_mutex_lock+0xc>)
   d6068:	681b      	ldr	r3, [r3, #0]
   d606a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d606c:	9301      	str	r3, [sp, #4]
   d606e:	bd08      	pop	{r3, pc}
   d6070:	00030248 	.word	0x00030248

000d6074 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d6074:	b508      	push	{r3, lr}
   d6076:	4b02      	ldr	r3, [pc, #8]	; (d6080 <os_mutex_unlock+0xc>)
   d6078:	681b      	ldr	r3, [r3, #0]
   d607a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d607c:	9301      	str	r3, [sp, #4]
   d607e:	bd08      	pop	{r3, pc}
   d6080:	00030248 	.word	0x00030248

000d6084 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6084:	b508      	push	{r3, lr}
   d6086:	4b02      	ldr	r3, [pc, #8]	; (d6090 <os_mutex_recursive_create+0xc>)
   d6088:	681b      	ldr	r3, [r3, #0]
   d608a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d608c:	9301      	str	r3, [sp, #4]
   d608e:	bd08      	pop	{r3, pc}
   d6090:	00030248 	.word	0x00030248

000d6094 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6094:	b508      	push	{r3, lr}
   d6096:	4b02      	ldr	r3, [pc, #8]	; (d60a0 <os_mutex_recursive_destroy+0xc>)
   d6098:	681b      	ldr	r3, [r3, #0]
   d609a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d609c:	9301      	str	r3, [sp, #4]
   d609e:	bd08      	pop	{r3, pc}
   d60a0:	00030248 	.word	0x00030248

000d60a4 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d60a4:	b508      	push	{r3, lr}
   d60a6:	4b02      	ldr	r3, [pc, #8]	; (d60b0 <os_thread_exit+0xc>)
   d60a8:	681b      	ldr	r3, [r3, #0]
   d60aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d60ac:	9301      	str	r3, [sp, #4]
   d60ae:	bd08      	pop	{r3, pc}
   d60b0:	00030248 	.word	0x00030248

000d60b4 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d60b4:	b508      	push	{r3, lr}
   d60b6:	4b02      	ldr	r3, [pc, #8]	; (d60c0 <os_timer_set_id+0xc>)
   d60b8:	681b      	ldr	r3, [r3, #0]
   d60ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d60bc:	9301      	str	r3, [sp, #4]
   d60be:	bd08      	pop	{r3, pc}
   d60c0:	00030248 	.word	0x00030248

000d60c4 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d60c4:	b508      	push	{r3, lr}
   d60c6:	4b02      	ldr	r3, [pc, #8]	; (d60d0 <HAL_Feature_Set+0xc>)
   d60c8:	681b      	ldr	r3, [r3, #0]
   d60ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d60cc:	9301      	str	r3, [sp, #4]
   d60ce:	bd08      	pop	{r3, pc}
   d60d0:	00030234 	.word	0x00030234

000d60d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d60d4:	b508      	push	{r3, lr}
   d60d6:	4b02      	ldr	r3, [pc, #8]	; (d60e0 <HAL_RNG_GetRandomNumber+0xc>)
   d60d8:	681b      	ldr	r3, [r3, #0]
   d60da:	685b      	ldr	r3, [r3, #4]
   d60dc:	9301      	str	r3, [sp, #4]
   d60de:	bd08      	pop	{r3, pc}
   d60e0:	00030218 	.word	0x00030218

000d60e4 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d60e4:	b508      	push	{r3, lr}
   d60e6:	4b02      	ldr	r3, [pc, #8]	; (d60f0 <HAL_Delay_Milliseconds+0xc>)
   d60e8:	681b      	ldr	r3, [r3, #0]
   d60ea:	689b      	ldr	r3, [r3, #8]
   d60ec:	9301      	str	r3, [sp, #4]
   d60ee:	bd08      	pop	{r3, pc}
   d60f0:	00030218 	.word	0x00030218

000d60f4 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d60f4:	b508      	push	{r3, lr}
   d60f6:	4b02      	ldr	r3, [pc, #8]	; (d6100 <HAL_Delay_Microseconds+0xc>)
   d60f8:	681b      	ldr	r3, [r3, #0]
   d60fa:	68db      	ldr	r3, [r3, #12]
   d60fc:	9301      	str	r3, [sp, #4]
   d60fe:	bd08      	pop	{r3, pc}
   d6100:	00030218 	.word	0x00030218

000d6104 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6104:	b508      	push	{r3, lr}
   d6106:	4b02      	ldr	r3, [pc, #8]	; (d6110 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6108:	681b      	ldr	r3, [r3, #0]
   d610a:	695b      	ldr	r3, [r3, #20]
   d610c:	9301      	str	r3, [sp, #4]
   d610e:	bd08      	pop	{r3, pc}
   d6110:	00030218 	.word	0x00030218

000d6114 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d6114:	b508      	push	{r3, lr}
   d6116:	4b02      	ldr	r3, [pc, #8]	; (d6120 <hal_rtc_time_is_valid+0xc>)
   d6118:	681b      	ldr	r3, [r3, #0]
   d611a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d611c:	9301      	str	r3, [sp, #4]
   d611e:	bd08      	pop	{r3, pc}
   d6120:	00030218 	.word	0x00030218

000d6124 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d6124:	b508      	push	{r3, lr}
   d6126:	4b02      	ldr	r3, [pc, #8]	; (d6130 <hal_timer_millis+0xc>)
   d6128:	681b      	ldr	r3, [r3, #0]
   d612a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d612c:	9301      	str	r3, [sp, #4]
   d612e:	bd08      	pop	{r3, pc}
   d6130:	00030218 	.word	0x00030218

000d6134 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d6134:	b508      	push	{r3, lr}
   d6136:	4b02      	ldr	r3, [pc, #8]	; (d6140 <hal_rtc_get_time+0xc>)
   d6138:	681b      	ldr	r3, [r3, #0]
   d613a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d613c:	9301      	str	r3, [sp, #4]
   d613e:	bd08      	pop	{r3, pc}
   d6140:	00030218 	.word	0x00030218

000d6144 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d6144:	b508      	push	{r3, lr}
   d6146:	4b02      	ldr	r3, [pc, #8]	; (d6150 <hal_rtc_set_time+0xc>)
   d6148:	681b      	ldr	r3, [r3, #0]
   d614a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d614c:	9301      	str	r3, [sp, #4]
   d614e:	bd08      	pop	{r3, pc}
   d6150:	00030218 	.word	0x00030218

000d6154 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6154:	b508      	push	{r3, lr}
   d6156:	4b02      	ldr	r3, [pc, #8]	; (d6160 <HAL_Validate_Pin_Function+0xc>)
   d6158:	681b      	ldr	r3, [r3, #0]
   d615a:	685b      	ldr	r3, [r3, #4]
   d615c:	9301      	str	r3, [sp, #4]
   d615e:	bd08      	pop	{r3, pc}
   d6160:	0003022c 	.word	0x0003022c

000d6164 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6164:	b508      	push	{r3, lr}
   d6166:	4b02      	ldr	r3, [pc, #8]	; (d6170 <HAL_Pin_Mode+0xc>)
   d6168:	681b      	ldr	r3, [r3, #0]
   d616a:	689b      	ldr	r3, [r3, #8]
   d616c:	9301      	str	r3, [sp, #4]
   d616e:	bd08      	pop	{r3, pc}
   d6170:	0003022c 	.word	0x0003022c

000d6174 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6174:	b508      	push	{r3, lr}
   d6176:	4b02      	ldr	r3, [pc, #8]	; (d6180 <HAL_Get_Pin_Mode+0xc>)
   d6178:	681b      	ldr	r3, [r3, #0]
   d617a:	68db      	ldr	r3, [r3, #12]
   d617c:	9301      	str	r3, [sp, #4]
   d617e:	bd08      	pop	{r3, pc}
   d6180:	0003022c 	.word	0x0003022c

000d6184 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6184:	b508      	push	{r3, lr}
   d6186:	4b02      	ldr	r3, [pc, #8]	; (d6190 <HAL_GPIO_Write+0xc>)
   d6188:	681b      	ldr	r3, [r3, #0]
   d618a:	691b      	ldr	r3, [r3, #16]
   d618c:	9301      	str	r3, [sp, #4]
   d618e:	bd08      	pop	{r3, pc}
   d6190:	0003022c 	.word	0x0003022c

000d6194 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d6194:	b508      	push	{r3, lr}
   d6196:	4b02      	ldr	r3, [pc, #8]	; (d61a0 <HAL_Interrupts_Attach+0xc>)
   d6198:	681b      	ldr	r3, [r3, #0]
   d619a:	699b      	ldr	r3, [r3, #24]
   d619c:	9301      	str	r3, [sp, #4]
   d619e:	bd08      	pop	{r3, pc}
   d61a0:	0003022c 	.word	0x0003022c

000d61a4 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d61a4:	b508      	push	{r3, lr}
   d61a6:	4b02      	ldr	r3, [pc, #8]	; (d61b0 <HAL_Interrupts_Detach+0xc>)
   d61a8:	681b      	ldr	r3, [r3, #0]
   d61aa:	69db      	ldr	r3, [r3, #28]
   d61ac:	9301      	str	r3, [sp, #4]
   d61ae:	bd08      	pop	{r3, pc}
   d61b0:	0003022c 	.word	0x0003022c

000d61b4 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d61b4:	b508      	push	{r3, lr}
   d61b6:	4b02      	ldr	r3, [pc, #8]	; (d61c0 <hal_adc_read+0xc>)
   d61b8:	681b      	ldr	r3, [r3, #0]
   d61ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d61bc:	9301      	str	r3, [sp, #4]
   d61be:	bd08      	pop	{r3, pc}
   d61c0:	0003022c 	.word	0x0003022c

000d61c4 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d61c4:	b508      	push	{r3, lr}
   d61c6:	4b02      	ldr	r3, [pc, #8]	; (d61d0 <hal_i2c_begin+0xc>)
   d61c8:	681b      	ldr	r3, [r3, #0]
   d61ca:	68db      	ldr	r3, [r3, #12]
   d61cc:	9301      	str	r3, [sp, #4]
   d61ce:	bd08      	pop	{r3, pc}
   d61d0:	00030228 	.word	0x00030228

000d61d4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d61d4:	b508      	push	{r3, lr}
   d61d6:	4b02      	ldr	r3, [pc, #8]	; (d61e0 <hal_i2c_begin_transmission+0xc>)
   d61d8:	681b      	ldr	r3, [r3, #0]
   d61da:	699b      	ldr	r3, [r3, #24]
   d61dc:	9301      	str	r3, [sp, #4]
   d61de:	bd08      	pop	{r3, pc}
   d61e0:	00030228 	.word	0x00030228

000d61e4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d61e4:	b508      	push	{r3, lr}
   d61e6:	4b02      	ldr	r3, [pc, #8]	; (d61f0 <hal_i2c_end_transmission+0xc>)
   d61e8:	681b      	ldr	r3, [r3, #0]
   d61ea:	69db      	ldr	r3, [r3, #28]
   d61ec:	9301      	str	r3, [sp, #4]
   d61ee:	bd08      	pop	{r3, pc}
   d61f0:	00030228 	.word	0x00030228

000d61f4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d61f4:	b508      	push	{r3, lr}
   d61f6:	4b02      	ldr	r3, [pc, #8]	; (d6200 <hal_i2c_write+0xc>)
   d61f8:	681b      	ldr	r3, [r3, #0]
   d61fa:	6a1b      	ldr	r3, [r3, #32]
   d61fc:	9301      	str	r3, [sp, #4]
   d61fe:	bd08      	pop	{r3, pc}
   d6200:	00030228 	.word	0x00030228

000d6204 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6204:	b508      	push	{r3, lr}
   d6206:	4b02      	ldr	r3, [pc, #8]	; (d6210 <hal_i2c_available+0xc>)
   d6208:	681b      	ldr	r3, [r3, #0]
   d620a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d620c:	9301      	str	r3, [sp, #4]
   d620e:	bd08      	pop	{r3, pc}
   d6210:	00030228 	.word	0x00030228

000d6214 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6214:	b508      	push	{r3, lr}
   d6216:	4b02      	ldr	r3, [pc, #8]	; (d6220 <hal_i2c_read+0xc>)
   d6218:	681b      	ldr	r3, [r3, #0]
   d621a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d621c:	9301      	str	r3, [sp, #4]
   d621e:	bd08      	pop	{r3, pc}
   d6220:	00030228 	.word	0x00030228

000d6224 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d6224:	b508      	push	{r3, lr}
   d6226:	4b02      	ldr	r3, [pc, #8]	; (d6230 <hal_i2c_peek+0xc>)
   d6228:	681b      	ldr	r3, [r3, #0]
   d622a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d622c:	9301      	str	r3, [sp, #4]
   d622e:	bd08      	pop	{r3, pc}
   d6230:	00030228 	.word	0x00030228

000d6234 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d6234:	b508      	push	{r3, lr}
   d6236:	4b02      	ldr	r3, [pc, #8]	; (d6240 <hal_i2c_flush+0xc>)
   d6238:	681b      	ldr	r3, [r3, #0]
   d623a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d623c:	9301      	str	r3, [sp, #4]
   d623e:	bd08      	pop	{r3, pc}
   d6240:	00030228 	.word	0x00030228

000d6244 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d6244:	b508      	push	{r3, lr}
   d6246:	4b02      	ldr	r3, [pc, #8]	; (d6250 <hal_i2c_is_enabled+0xc>)
   d6248:	681b      	ldr	r3, [r3, #0]
   d624a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d624c:	9301      	str	r3, [sp, #4]
   d624e:	bd08      	pop	{r3, pc}
   d6250:	00030228 	.word	0x00030228

000d6254 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d6254:	b508      	push	{r3, lr}
   d6256:	4b02      	ldr	r3, [pc, #8]	; (d6260 <hal_i2c_init+0xc>)
   d6258:	681b      	ldr	r3, [r3, #0]
   d625a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d625c:	9301      	str	r3, [sp, #4]
   d625e:	bd08      	pop	{r3, pc}
   d6260:	00030228 	.word	0x00030228

000d6264 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d6264:	b508      	push	{r3, lr}
   d6266:	4b02      	ldr	r3, [pc, #8]	; (d6270 <hal_i2c_lock+0xc>)
   d6268:	681b      	ldr	r3, [r3, #0]
   d626a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d626c:	9301      	str	r3, [sp, #4]
   d626e:	bd08      	pop	{r3, pc}
   d6270:	00030228 	.word	0x00030228

000d6274 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d6274:	b508      	push	{r3, lr}
   d6276:	4b02      	ldr	r3, [pc, #8]	; (d6280 <hal_i2c_unlock+0xc>)
   d6278:	681b      	ldr	r3, [r3, #0]
   d627a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d627c:	9301      	str	r3, [sp, #4]
   d627e:	bd08      	pop	{r3, pc}
   d6280:	00030228 	.word	0x00030228

000d6284 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d6284:	b508      	push	{r3, lr}
   d6286:	4b02      	ldr	r3, [pc, #8]	; (d6290 <hal_i2c_request_ex+0xc>)
   d6288:	681b      	ldr	r3, [r3, #0]
   d628a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d628c:	9301      	str	r3, [sp, #4]
   d628e:	bd08      	pop	{r3, pc}
   d6290:	00030228 	.word	0x00030228

000d6294 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6294:	b508      	push	{r3, lr}
   d6296:	4b02      	ldr	r3, [pc, #8]	; (d62a0 <inet_inet_ntop+0xc>)
   d6298:	681b      	ldr	r3, [r3, #0]
   d629a:	695b      	ldr	r3, [r3, #20]
   d629c:	9301      	str	r3, [sp, #4]
   d629e:	bd08      	pop	{r3, pc}
   d62a0:	00030264 	.word	0x00030264

000d62a4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d62a4:	b508      	push	{r3, lr}
   d62a6:	4b02      	ldr	r3, [pc, #8]	; (d62b0 <netdb_freeaddrinfo+0xc>)
   d62a8:	681b      	ldr	r3, [r3, #0]
   d62aa:	689b      	ldr	r3, [r3, #8]
   d62ac:	9301      	str	r3, [sp, #4]
   d62ae:	bd08      	pop	{r3, pc}
   d62b0:	00030268 	.word	0x00030268

000d62b4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d62b4:	b508      	push	{r3, lr}
   d62b6:	4b02      	ldr	r3, [pc, #8]	; (d62c0 <netdb_getaddrinfo+0xc>)
   d62b8:	681b      	ldr	r3, [r3, #0]
   d62ba:	68db      	ldr	r3, [r3, #12]
   d62bc:	9301      	str	r3, [sp, #4]
   d62be:	bd08      	pop	{r3, pc}
   d62c0:	00030268 	.word	0x00030268

000d62c4 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d62c4:	b508      	push	{r3, lr}
   d62c6:	4b02      	ldr	r3, [pc, #8]	; (d62d0 <hal_spi_init+0xc>)
   d62c8:	681b      	ldr	r3, [r3, #0]
   d62ca:	69db      	ldr	r3, [r3, #28]
   d62cc:	9301      	str	r3, [sp, #4]
   d62ce:	bd08      	pop	{r3, pc}
   d62d0:	00030230 	.word	0x00030230

000d62d4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d62d4:	b508      	push	{r3, lr}
   d62d6:	4b02      	ldr	r3, [pc, #8]	; (d62e0 <hal_spi_is_enabled+0xc>)
   d62d8:	681b      	ldr	r3, [r3, #0]
   d62da:	6a1b      	ldr	r3, [r3, #32]
   d62dc:	9301      	str	r3, [sp, #4]
   d62de:	bd08      	pop	{r3, pc}
   d62e0:	00030230 	.word	0x00030230

000d62e4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d62e4:	b508      	push	{r3, lr}
   d62e6:	4b02      	ldr	r3, [pc, #8]	; (d62f0 <hal_usart_init+0xc>)
   d62e8:	681b      	ldr	r3, [r3, #0]
   d62ea:	681b      	ldr	r3, [r3, #0]
   d62ec:	9301      	str	r3, [sp, #4]
   d62ee:	bd08      	pop	{r3, pc}
   d62f0:	0003023c 	.word	0x0003023c

000d62f4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d62f4:	b508      	push	{r3, lr}
   d62f6:	4b02      	ldr	r3, [pc, #8]	; (d6300 <hal_usart_write+0xc>)
   d62f8:	681b      	ldr	r3, [r3, #0]
   d62fa:	68db      	ldr	r3, [r3, #12]
   d62fc:	9301      	str	r3, [sp, #4]
   d62fe:	bd08      	pop	{r3, pc}
   d6300:	0003023c 	.word	0x0003023c

000d6304 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6304:	b508      	push	{r3, lr}
   d6306:	4b02      	ldr	r3, [pc, #8]	; (d6310 <hal_usart_available+0xc>)
   d6308:	681b      	ldr	r3, [r3, #0]
   d630a:	691b      	ldr	r3, [r3, #16]
   d630c:	9301      	str	r3, [sp, #4]
   d630e:	bd08      	pop	{r3, pc}
   d6310:	0003023c 	.word	0x0003023c

000d6314 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6314:	b508      	push	{r3, lr}
   d6316:	4b02      	ldr	r3, [pc, #8]	; (d6320 <hal_usart_read+0xc>)
   d6318:	681b      	ldr	r3, [r3, #0]
   d631a:	695b      	ldr	r3, [r3, #20]
   d631c:	9301      	str	r3, [sp, #4]
   d631e:	bd08      	pop	{r3, pc}
   d6320:	0003023c 	.word	0x0003023c

000d6324 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d6324:	b508      	push	{r3, lr}
   d6326:	4b02      	ldr	r3, [pc, #8]	; (d6330 <hal_usart_peek+0xc>)
   d6328:	681b      	ldr	r3, [r3, #0]
   d632a:	699b      	ldr	r3, [r3, #24]
   d632c:	9301      	str	r3, [sp, #4]
   d632e:	bd08      	pop	{r3, pc}
   d6330:	0003023c 	.word	0x0003023c

000d6334 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d6334:	b508      	push	{r3, lr}
   d6336:	4b02      	ldr	r3, [pc, #8]	; (d6340 <hal_usart_flush+0xc>)
   d6338:	681b      	ldr	r3, [r3, #0]
   d633a:	69db      	ldr	r3, [r3, #28]
   d633c:	9301      	str	r3, [sp, #4]
   d633e:	bd08      	pop	{r3, pc}
   d6340:	0003023c 	.word	0x0003023c

000d6344 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d6344:	b508      	push	{r3, lr}
   d6346:	4b02      	ldr	r3, [pc, #8]	; (d6350 <hal_usart_is_enabled+0xc>)
   d6348:	681b      	ldr	r3, [r3, #0]
   d634a:	6a1b      	ldr	r3, [r3, #32]
   d634c:	9301      	str	r3, [sp, #4]
   d634e:	bd08      	pop	{r3, pc}
   d6350:	0003023c 	.word	0x0003023c

000d6354 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d6354:	b508      	push	{r3, lr}
   d6356:	4b02      	ldr	r3, [pc, #8]	; (d6360 <hal_usart_available_data_for_write+0xc>)
   d6358:	681b      	ldr	r3, [r3, #0]
   d635a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d635c:	9301      	str	r3, [sp, #4]
   d635e:	bd08      	pop	{r3, pc}
   d6360:	0003023c 	.word	0x0003023c

000d6364 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6364:	b508      	push	{r3, lr}
   d6366:	4b02      	ldr	r3, [pc, #8]	; (d6370 <HAL_USB_USART_Init+0xc>)
   d6368:	681b      	ldr	r3, [r3, #0]
   d636a:	681b      	ldr	r3, [r3, #0]
   d636c:	9301      	str	r3, [sp, #4]
   d636e:	bd08      	pop	{r3, pc}
   d6370:	0003024c 	.word	0x0003024c

000d6374 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6374:	b508      	push	{r3, lr}
   d6376:	4b02      	ldr	r3, [pc, #8]	; (d6380 <HAL_USB_USART_Available_Data+0xc>)
   d6378:	681b      	ldr	r3, [r3, #0]
   d637a:	691b      	ldr	r3, [r3, #16]
   d637c:	9301      	str	r3, [sp, #4]
   d637e:	bd08      	pop	{r3, pc}
   d6380:	0003024c 	.word	0x0003024c

000d6384 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6384:	b508      	push	{r3, lr}
   d6386:	4b02      	ldr	r3, [pc, #8]	; (d6390 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6388:	681b      	ldr	r3, [r3, #0]
   d638a:	695b      	ldr	r3, [r3, #20]
   d638c:	9301      	str	r3, [sp, #4]
   d638e:	bd08      	pop	{r3, pc}
   d6390:	0003024c 	.word	0x0003024c

000d6394 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6394:	b508      	push	{r3, lr}
   d6396:	4b02      	ldr	r3, [pc, #8]	; (d63a0 <HAL_USB_USART_Receive_Data+0xc>)
   d6398:	681b      	ldr	r3, [r3, #0]
   d639a:	699b      	ldr	r3, [r3, #24]
   d639c:	9301      	str	r3, [sp, #4]
   d639e:	bd08      	pop	{r3, pc}
   d63a0:	0003024c 	.word	0x0003024c

000d63a4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d63a4:	b508      	push	{r3, lr}
   d63a6:	4b02      	ldr	r3, [pc, #8]	; (d63b0 <HAL_USB_USART_Send_Data+0xc>)
   d63a8:	681b      	ldr	r3, [r3, #0]
   d63aa:	69db      	ldr	r3, [r3, #28]
   d63ac:	9301      	str	r3, [sp, #4]
   d63ae:	bd08      	pop	{r3, pc}
   d63b0:	0003024c 	.word	0x0003024c

000d63b4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d63b4:	b508      	push	{r3, lr}
   d63b6:	4b02      	ldr	r3, [pc, #8]	; (d63c0 <HAL_USB_USART_Flush_Data+0xc>)
   d63b8:	681b      	ldr	r3, [r3, #0]
   d63ba:	6a1b      	ldr	r3, [r3, #32]
   d63bc:	9301      	str	r3, [sp, #4]
   d63be:	bd08      	pop	{r3, pc}
   d63c0:	0003024c 	.word	0x0003024c

000d63c4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d63c4:	b508      	push	{r3, lr}
   d63c6:	4b02      	ldr	r3, [pc, #8]	; (d63d0 <panic_+0xc>)
   d63c8:	681b      	ldr	r3, [r3, #0]
   d63ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d63cc:	9301      	str	r3, [sp, #4]
   d63ce:	bd08      	pop	{r3, pc}
   d63d0:	00030260 	.word	0x00030260

000d63d4 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d63d4:	b508      	push	{r3, lr}
   d63d6:	4b02      	ldr	r3, [pc, #8]	; (d63e0 <log_message_v+0xc>)
   d63d8:	681b      	ldr	r3, [r3, #0]
   d63da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d63dc:	9301      	str	r3, [sp, #4]
   d63de:	bd08      	pop	{r3, pc}
   d63e0:	00030260 	.word	0x00030260

000d63e4 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d63e4:	b508      	push	{r3, lr}
   d63e6:	4b02      	ldr	r3, [pc, #8]	; (d63f0 <system_mode+0xc>)
   d63e8:	681b      	ldr	r3, [r3, #0]
   d63ea:	681b      	ldr	r3, [r3, #0]
   d63ec:	9301      	str	r3, [sp, #4]
   d63ee:	bd08      	pop	{r3, pc}
   d63f0:	00030220 	.word	0x00030220

000d63f4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d63f4:	b508      	push	{r3, lr}
   d63f6:	4b02      	ldr	r3, [pc, #8]	; (d6400 <set_system_mode+0xc>)
   d63f8:	681b      	ldr	r3, [r3, #0]
   d63fa:	685b      	ldr	r3, [r3, #4]
   d63fc:	9301      	str	r3, [sp, #4]
   d63fe:	bd08      	pop	{r3, pc}
   d6400:	00030220 	.word	0x00030220

000d6404 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6404:	b508      	push	{r3, lr}
   d6406:	4b02      	ldr	r3, [pc, #8]	; (d6410 <system_delay_ms+0xc>)
   d6408:	681b      	ldr	r3, [r3, #0]
   d640a:	695b      	ldr	r3, [r3, #20]
   d640c:	9301      	str	r3, [sp, #4]
   d640e:	bd08      	pop	{r3, pc}
   d6410:	00030220 	.word	0x00030220

000d6414 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6414:	b508      	push	{r3, lr}
   d6416:	4b02      	ldr	r3, [pc, #8]	; (d6420 <system_thread_set_state+0xc>)
   d6418:	681b      	ldr	r3, [r3, #0]
   d641a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d641c:	9301      	str	r3, [sp, #4]
   d641e:	bd08      	pop	{r3, pc}
   d6420:	00030220 	.word	0x00030220

000d6424 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6424:	b508      	push	{r3, lr}
   d6426:	4b02      	ldr	r3, [pc, #8]	; (d6430 <application_thread_current+0xc>)
   d6428:	681b      	ldr	r3, [r3, #0]
   d642a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d642c:	9301      	str	r3, [sp, #4]
   d642e:	bd08      	pop	{r3, pc}
   d6430:	00030220 	.word	0x00030220

000d6434 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6434:	b508      	push	{r3, lr}
   d6436:	4b02      	ldr	r3, [pc, #8]	; (d6440 <application_thread_invoke+0xc>)
   d6438:	681b      	ldr	r3, [r3, #0]
   d643a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d643c:	9301      	str	r3, [sp, #4]
   d643e:	bd08      	pop	{r3, pc}
   d6440:	00030220 	.word	0x00030220

000d6444 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6444:	b508      	push	{r3, lr}
   d6446:	4b02      	ldr	r3, [pc, #8]	; (d6450 <system_thread_get_state+0xc>)
   d6448:	681b      	ldr	r3, [r3, #0]
   d644a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d644c:	9301      	str	r3, [sp, #4]
   d644e:	bd08      	pop	{r3, pc}
   d6450:	00030220 	.word	0x00030220

000d6454 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d6454:	b508      	push	{r3, lr}
   d6456:	4b02      	ldr	r3, [pc, #8]	; (d6460 <system_notify_time_changed+0xc>)
   d6458:	681b      	ldr	r3, [r3, #0]
   d645a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d645c:	9301      	str	r3, [sp, #4]
   d645e:	bd08      	pop	{r3, pc}
   d6460:	00030220 	.word	0x00030220

000d6464 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6464:	b508      	push	{r3, lr}
   d6466:	4b03      	ldr	r3, [pc, #12]	; (d6474 <system_ctrl_set_app_request_handler+0x10>)
   d6468:	681b      	ldr	r3, [r3, #0]
   d646a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d646e:	9301      	str	r3, [sp, #4]
   d6470:	bd08      	pop	{r3, pc}
   d6472:	0000      	.short	0x0000
   d6474:	00030220 	.word	0x00030220

000d6478 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6478:	b508      	push	{r3, lr}
   d647a:	4b03      	ldr	r3, [pc, #12]	; (d6488 <system_ctrl_set_result+0x10>)
   d647c:	681b      	ldr	r3, [r3, #0]
   d647e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6482:	9301      	str	r3, [sp, #4]
   d6484:	bd08      	pop	{r3, pc}
   d6486:	0000      	.short	0x0000
   d6488:	00030220 	.word	0x00030220

000d648c <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d648c:	b508      	push	{r3, lr}
   d648e:	4b03      	ldr	r3, [pc, #12]	; (d649c <system_reset+0x10>)
   d6490:	681b      	ldr	r3, [r3, #0]
   d6492:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d6496:	9301      	str	r3, [sp, #4]
   d6498:	bd08      	pop	{r3, pc}
   d649a:	0000      	.short	0x0000
   d649c:	00030220 	.word	0x00030220

000d64a0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d64a0:	b508      	push	{r3, lr}
   d64a2:	4b02      	ldr	r3, [pc, #8]	; (d64ac <spark_variable+0xc>)
   d64a4:	681b      	ldr	r3, [r3, #0]
   d64a6:	681b      	ldr	r3, [r3, #0]
   d64a8:	9301      	str	r3, [sp, #4]
   d64aa:	bd08      	pop	{r3, pc}
   d64ac:	00030244 	.word	0x00030244

000d64b0 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d64b0:	b508      	push	{r3, lr}
   d64b2:	4b02      	ldr	r3, [pc, #8]	; (d64bc <spark_function+0xc>)
   d64b4:	681b      	ldr	r3, [r3, #0]
   d64b6:	685b      	ldr	r3, [r3, #4]
   d64b8:	9301      	str	r3, [sp, #4]
   d64ba:	bd08      	pop	{r3, pc}
   d64bc:	00030244 	.word	0x00030244

000d64c0 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d64c0:	b508      	push	{r3, lr}
   d64c2:	4b02      	ldr	r3, [pc, #8]	; (d64cc <spark_process+0xc>)
   d64c4:	681b      	ldr	r3, [r3, #0]
   d64c6:	689b      	ldr	r3, [r3, #8]
   d64c8:	9301      	str	r3, [sp, #4]
   d64ca:	bd08      	pop	{r3, pc}
   d64cc:	00030244 	.word	0x00030244

000d64d0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d64d0:	b508      	push	{r3, lr}
   d64d2:	4b02      	ldr	r3, [pc, #8]	; (d64dc <spark_cloud_flag_connected+0xc>)
   d64d4:	681b      	ldr	r3, [r3, #0]
   d64d6:	695b      	ldr	r3, [r3, #20]
   d64d8:	9301      	str	r3, [sp, #4]
   d64da:	bd08      	pop	{r3, pc}
   d64dc:	00030244 	.word	0x00030244

000d64e0 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d64e0:	b508      	push	{r3, lr}
   d64e2:	4b02      	ldr	r3, [pc, #8]	; (d64ec <spark_deviceID+0xc>)
   d64e4:	681b      	ldr	r3, [r3, #0]
   d64e6:	69db      	ldr	r3, [r3, #28]
   d64e8:	9301      	str	r3, [sp, #4]
   d64ea:	bd08      	pop	{r3, pc}
   d64ec:	00030244 	.word	0x00030244

000d64f0 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d64f0:	b508      	push	{r3, lr}
   d64f2:	4b02      	ldr	r3, [pc, #8]	; (d64fc <spark_send_event+0xc>)
   d64f4:	681b      	ldr	r3, [r3, #0]
   d64f6:	6a1b      	ldr	r3, [r3, #32]
   d64f8:	9301      	str	r3, [sp, #4]
   d64fa:	bd08      	pop	{r3, pc}
   d64fc:	00030244 	.word	0x00030244

000d6500 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d6500:	b508      	push	{r3, lr}
   d6502:	4b02      	ldr	r3, [pc, #8]	; (d650c <spark_subscribe+0xc>)
   d6504:	681b      	ldr	r3, [r3, #0]
   d6506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6508:	9301      	str	r3, [sp, #4]
   d650a:	bd08      	pop	{r3, pc}
   d650c:	00030244 	.word	0x00030244

000d6510 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d6510:	b508      	push	{r3, lr}
   d6512:	4b02      	ldr	r3, [pc, #8]	; (d651c <spark_sync_time+0xc>)
   d6514:	681b      	ldr	r3, [r3, #0]
   d6516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6518:	9301      	str	r3, [sp, #4]
   d651a:	bd08      	pop	{r3, pc}
   d651c:	00030244 	.word	0x00030244

000d6520 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6520:	b508      	push	{r3, lr}
   d6522:	4b02      	ldr	r3, [pc, #8]	; (d652c <spark_sync_time_pending+0xc>)
   d6524:	681b      	ldr	r3, [r3, #0]
   d6526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6528:	9301      	str	r3, [sp, #4]
   d652a:	bd08      	pop	{r3, pc}
   d652c:	00030244 	.word	0x00030244

000d6530 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d6530:	b508      	push	{r3, lr}
   d6532:	4b02      	ldr	r3, [pc, #8]	; (d653c <spark_sync_time_last+0xc>)
   d6534:	681b      	ldr	r3, [r3, #0]
   d6536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6538:	9301      	str	r3, [sp, #4]
   d653a:	bd08      	pop	{r3, pc}
   d653c:	00030244 	.word	0x00030244

000d6540 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d6540:	b508      	push	{r3, lr}
   d6542:	4b02      	ldr	r3, [pc, #8]	; (d654c <spark_set_connection_property+0xc>)
   d6544:	681b      	ldr	r3, [r3, #0]
   d6546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6548:	9301      	str	r3, [sp, #4]
   d654a:	bd08      	pop	{r3, pc}
   d654c:	00030244 	.word	0x00030244

000d6550 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6550:	b508      	push	{r3, lr}
   d6552:	4b02      	ldr	r3, [pc, #8]	; (d655c <spark_set_random_seed_from_cloud_handler+0xc>)
   d6554:	681b      	ldr	r3, [r3, #0]
   d6556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6558:	9301      	str	r3, [sp, #4]
   d655a:	bd08      	pop	{r3, pc}
   d655c:	00030244 	.word	0x00030244

000d6560 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6560:	b508      	push	{r3, lr}
   d6562:	4b02      	ldr	r3, [pc, #8]	; (d656c <network_connect+0xc>)
   d6564:	681b      	ldr	r3, [r3, #0]
   d6566:	685b      	ldr	r3, [r3, #4]
   d6568:	9301      	str	r3, [sp, #4]
   d656a:	bd08      	pop	{r3, pc}
   d656c:	00030240 	.word	0x00030240

000d6570 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6570:	b508      	push	{r3, lr}
   d6572:	4b02      	ldr	r3, [pc, #8]	; (d657c <network_connecting+0xc>)
   d6574:	681b      	ldr	r3, [r3, #0]
   d6576:	689b      	ldr	r3, [r3, #8]
   d6578:	9301      	str	r3, [sp, #4]
   d657a:	bd08      	pop	{r3, pc}
   d657c:	00030240 	.word	0x00030240

000d6580 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6580:	b508      	push	{r3, lr}
   d6582:	4b02      	ldr	r3, [pc, #8]	; (d658c <network_disconnect+0xc>)
   d6584:	681b      	ldr	r3, [r3, #0]
   d6586:	68db      	ldr	r3, [r3, #12]
   d6588:	9301      	str	r3, [sp, #4]
   d658a:	bd08      	pop	{r3, pc}
   d658c:	00030240 	.word	0x00030240

000d6590 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6590:	b508      	push	{r3, lr}
   d6592:	4b02      	ldr	r3, [pc, #8]	; (d659c <network_ready+0xc>)
   d6594:	681b      	ldr	r3, [r3, #0]
   d6596:	691b      	ldr	r3, [r3, #16]
   d6598:	9301      	str	r3, [sp, #4]
   d659a:	bd08      	pop	{r3, pc}
   d659c:	00030240 	.word	0x00030240

000d65a0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d65a0:	b508      	push	{r3, lr}
   d65a2:	4b02      	ldr	r3, [pc, #8]	; (d65ac <network_on+0xc>)
   d65a4:	681b      	ldr	r3, [r3, #0]
   d65a6:	695b      	ldr	r3, [r3, #20]
   d65a8:	9301      	str	r3, [sp, #4]
   d65aa:	bd08      	pop	{r3, pc}
   d65ac:	00030240 	.word	0x00030240

000d65b0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d65b0:	b508      	push	{r3, lr}
   d65b2:	4b02      	ldr	r3, [pc, #8]	; (d65bc <network_off+0xc>)
   d65b4:	681b      	ldr	r3, [r3, #0]
   d65b6:	699b      	ldr	r3, [r3, #24]
   d65b8:	9301      	str	r3, [sp, #4]
   d65ba:	bd08      	pop	{r3, pc}
   d65bc:	00030240 	.word	0x00030240

000d65c0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d65c0:	b508      	push	{r3, lr}
   d65c2:	4b02      	ldr	r3, [pc, #8]	; (d65cc <network_listen+0xc>)
   d65c4:	681b      	ldr	r3, [r3, #0]
   d65c6:	69db      	ldr	r3, [r3, #28]
   d65c8:	9301      	str	r3, [sp, #4]
   d65ca:	bd08      	pop	{r3, pc}
   d65cc:	00030240 	.word	0x00030240

000d65d0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d65d0:	b508      	push	{r3, lr}
   d65d2:	4b02      	ldr	r3, [pc, #8]	; (d65dc <network_listening+0xc>)
   d65d4:	681b      	ldr	r3, [r3, #0]
   d65d6:	6a1b      	ldr	r3, [r3, #32]
   d65d8:	9301      	str	r3, [sp, #4]
   d65da:	bd08      	pop	{r3, pc}
   d65dc:	00030240 	.word	0x00030240

000d65e0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d65e0:	b508      	push	{r3, lr}
   d65e2:	4b02      	ldr	r3, [pc, #8]	; (d65ec <network_set_listen_timeout+0xc>)
   d65e4:	681b      	ldr	r3, [r3, #0]
   d65e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d65e8:	9301      	str	r3, [sp, #4]
   d65ea:	bd08      	pop	{r3, pc}
   d65ec:	00030240 	.word	0x00030240

000d65f0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d65f0:	b508      	push	{r3, lr}
   d65f2:	4b02      	ldr	r3, [pc, #8]	; (d65fc <network_get_listen_timeout+0xc>)
   d65f4:	681b      	ldr	r3, [r3, #0]
   d65f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d65f8:	9301      	str	r3, [sp, #4]
   d65fa:	bd08      	pop	{r3, pc}
   d65fc:	00030240 	.word	0x00030240

000d6600 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6600:	b508      	push	{r3, lr}
   d6602:	4b02      	ldr	r3, [pc, #8]	; (d660c <malloc+0xc>)
   d6604:	681b      	ldr	r3, [r3, #0]
   d6606:	681b      	ldr	r3, [r3, #0]
   d6608:	9301      	str	r3, [sp, #4]
   d660a:	bd08      	pop	{r3, pc}
   d660c:	0003021c 	.word	0x0003021c

000d6610 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6610:	b508      	push	{r3, lr}
   d6612:	4b02      	ldr	r3, [pc, #8]	; (d661c <free+0xc>)
   d6614:	681b      	ldr	r3, [r3, #0]
   d6616:	685b      	ldr	r3, [r3, #4]
   d6618:	9301      	str	r3, [sp, #4]
   d661a:	bd08      	pop	{r3, pc}
   d661c:	0003021c 	.word	0x0003021c

000d6620 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6620:	b508      	push	{r3, lr}
   d6622:	4b02      	ldr	r3, [pc, #8]	; (d662c <realloc+0xc>)
   d6624:	681b      	ldr	r3, [r3, #0]
   d6626:	689b      	ldr	r3, [r3, #8]
   d6628:	9301      	str	r3, [sp, #4]
   d662a:	bd08      	pop	{r3, pc}
   d662c:	0003021c 	.word	0x0003021c

000d6630 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d6630:	b508      	push	{r3, lr}
   d6632:	4b02      	ldr	r3, [pc, #8]	; (d663c <siprintf+0xc>)
   d6634:	681b      	ldr	r3, [r3, #0]
   d6636:	691b      	ldr	r3, [r3, #16]
   d6638:	9301      	str	r3, [sp, #4]
   d663a:	bd08      	pop	{r3, pc}
   d663c:	0003021c 	.word	0x0003021c

000d6640 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6640:	b508      	push	{r3, lr}
   d6642:	4b02      	ldr	r3, [pc, #8]	; (d664c <snprintf+0xc>)
   d6644:	681b      	ldr	r3, [r3, #0]
   d6646:	69db      	ldr	r3, [r3, #28]
   d6648:	9301      	str	r3, [sp, #4]
   d664a:	bd08      	pop	{r3, pc}
   d664c:	0003021c 	.word	0x0003021c

000d6650 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6650:	b508      	push	{r3, lr}
   d6652:	4b02      	ldr	r3, [pc, #8]	; (d665c <abort+0xc>)
   d6654:	681b      	ldr	r3, [r3, #0]
   d6656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6658:	9301      	str	r3, [sp, #4]
   d665a:	bd08      	pop	{r3, pc}
   d665c:	0003021c 	.word	0x0003021c

000d6660 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6660:	b508      	push	{r3, lr}
   d6662:	4b02      	ldr	r3, [pc, #8]	; (d666c <_malloc_r+0xc>)
   d6664:	681b      	ldr	r3, [r3, #0]
   d6666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6668:	9301      	str	r3, [sp, #4]
   d666a:	bd08      	pop	{r3, pc}
   d666c:	0003021c 	.word	0x0003021c

000d6670 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6670:	b508      	push	{r3, lr}
   d6672:	4b02      	ldr	r3, [pc, #8]	; (d667c <__errno+0xc>)
   d6674:	681b      	ldr	r3, [r3, #0]
   d6676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6678:	9301      	str	r3, [sp, #4]
   d667a:	bd08      	pop	{r3, pc}
   d667c:	0003021c 	.word	0x0003021c

000d6680 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6680:	b508      	push	{r3, lr}
   d6682:	4b02      	ldr	r3, [pc, #8]	; (d668c <newlib_impure_ptr_callback+0xc>)
   d6684:	681b      	ldr	r3, [r3, #0]
   d6686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6688:	9301      	str	r3, [sp, #4]
   d668a:	bd08      	pop	{r3, pc}
   d668c:	0003021c 	.word	0x0003021c

000d6690 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d6690:	b508      	push	{r3, lr}
   d6692:	4b02      	ldr	r3, [pc, #8]	; (d669c <strftime+0xc>)
   d6694:	681b      	ldr	r3, [r3, #0]
   d6696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6698:	9301      	str	r3, [sp, #4]
   d669a:	bd08      	pop	{r3, pc}
   d669c:	0003021c 	.word	0x0003021c

000d66a0 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d66a0:	b508      	push	{r3, lr}
   d66a2:	4b02      	ldr	r3, [pc, #8]	; (d66ac <localtime_r+0xc>)
   d66a4:	681b      	ldr	r3, [r3, #0]
   d66a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d66a8:	9301      	str	r3, [sp, #4]
   d66aa:	bd08      	pop	{r3, pc}
   d66ac:	0003021c 	.word	0x0003021c

000d66b0 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d66b0:	b508      	push	{r3, lr}
   d66b2:	4b02      	ldr	r3, [pc, #8]	; (d66bc <gmtime_r+0xc>)
   d66b4:	681b      	ldr	r3, [r3, #0]
   d66b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d66b8:	9301      	str	r3, [sp, #4]
   d66ba:	bd08      	pop	{r3, pc}
   d66bc:	0003021c 	.word	0x0003021c

000d66c0 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d66c0:	b508      	push	{r3, lr}
   d66c2:	4b02      	ldr	r3, [pc, #8]	; (d66cc <mktime+0xc>)
   d66c4:	681b      	ldr	r3, [r3, #0]
   d66c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d66c8:	9301      	str	r3, [sp, #4]
   d66ca:	bd08      	pop	{r3, pc}
   d66cc:	0003021c 	.word	0x0003021c

000d66d0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d66d0:	2100      	movs	r1, #0
   d66d2:	f7ff be97 	b.w	d6404 <system_delay_ms>

000d66d6 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d66d6:	b510      	push	{r4, lr}
      if (_M_empty())
   d66d8:	6883      	ldr	r3, [r0, #8]
   d66da:	4604      	mov	r4, r0
   d66dc:	b90b      	cbnz	r3, d66e2 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d66de:	f001 fb6e 	bl	d7dbe <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d66e2:	68c3      	ldr	r3, [r0, #12]
   d66e4:	4798      	blx	r3
      if (_M_manager)
   d66e6:	68a3      	ldr	r3, [r4, #8]
   d66e8:	b11b      	cbz	r3, d66f2 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d66ea:	2203      	movs	r2, #3
   d66ec:	4621      	mov	r1, r4
   d66ee:	4620      	mov	r0, r4
   d66f0:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d66f2:	4620      	mov	r0, r4
   d66f4:	2110      	movs	r1, #16
}
   d66f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d66fa:	f001 bb5a 	b.w	d7db2 <_ZdlPvj>

000d66fe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d66fe:	b510      	push	{r4, lr}
          _M_dispose();
   d6700:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d6702:	4604      	mov	r4, r0
          _M_dispose();
   d6704:	689b      	ldr	r3, [r3, #8]
   d6706:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6708:	68a3      	ldr	r3, [r4, #8]
   d670a:	3b01      	subs	r3, #1
   d670c:	60a3      	str	r3, [r4, #8]
   d670e:	b92b      	cbnz	r3, d671c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d6710:	6823      	ldr	r3, [r4, #0]
   d6712:	4620      	mov	r0, r4
   d6714:	68db      	ldr	r3, [r3, #12]
    }
   d6716:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d671a:	4718      	bx	r3
    }
   d671c:	bd10      	pop	{r4, pc}

000d671e <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d671e:	b510      	push	{r4, lr}
   d6720:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6722:	6800      	ldr	r0, [r0, #0]
   d6724:	b108      	cbz	r0, d672a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6726:	f7ff fcb5 	bl	d6094 <os_mutex_recursive_destroy>
    }
   d672a:	4620      	mov	r0, r4
   d672c:	bd10      	pop	{r4, pc}

000d672e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d672e:	680b      	ldr	r3, [r1, #0]
   d6730:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d6732:	b113      	cbz	r3, d673a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d6734:	685a      	ldr	r2, [r3, #4]
   d6736:	3201      	adds	r2, #1
   d6738:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d673a:	4770      	bx	lr

000d673c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d673c:	b510      	push	{r4, lr}
   d673e:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d6740:	6800      	ldr	r0, [r0, #0]
   d6742:	b128      	cbz	r0, d6750 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d6744:	6843      	ldr	r3, [r0, #4]
   d6746:	3b01      	subs	r3, #1
   d6748:	6043      	str	r3, [r0, #4]
   d674a:	b90b      	cbnz	r3, d6750 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d674c:	f7ff ffd7 	bl	d66fe <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d6750:	4620      	mov	r0, r4
   d6752:	bd10      	pop	{r4, pc}

000d6754 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6754:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d6756:	4c06      	ldr	r4, [pc, #24]	; (d6770 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6758:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d675a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d675c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d675e:	f7ff fc91 	bl	d6084 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6762:	4620      	mov	r0, r4
   d6764:	4a03      	ldr	r2, [pc, #12]	; (d6774 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6766:	4904      	ldr	r1, [pc, #16]	; (d6778 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d6768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d676c:	f001 bb1c 	b.w	d7da8 <__aeabi_atexit>
   d6770:	2003e5e0 	.word	0x2003e5e0
   d6774:	2003e3f8 	.word	0x2003e3f8
   d6778:	000d671f 	.word	0x000d671f

000d677c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d677c:	2200      	movs	r2, #0
   d677e:	6840      	ldr	r0, [r0, #4]
   d6780:	4611      	mov	r1, r2
   d6782:	f7ff bf05 	b.w	d6590 <network_ready>

000d6786 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d6786:	2200      	movs	r2, #0
   d6788:	6840      	ldr	r0, [r0, #4]
   d678a:	4611      	mov	r1, r2
   d678c:	f7ff bf20 	b.w	d65d0 <network_listening>

000d6790 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6790:	2200      	movs	r2, #0
   d6792:	6840      	ldr	r0, [r0, #4]
   d6794:	4611      	mov	r1, r2
   d6796:	f7ff bf2b 	b.w	d65f0 <network_get_listen_timeout>

000d679a <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d679a:	6840      	ldr	r0, [r0, #4]
   d679c:	2200      	movs	r2, #0
   d679e:	f7ff bf1f 	b.w	d65e0 <network_set_listen_timeout>

000d67a2 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d67a2:	6840      	ldr	r0, [r0, #4]
   d67a4:	2200      	movs	r2, #0
   d67a6:	f081 0101 	eor.w	r1, r1, #1
   d67aa:	f7ff bf09 	b.w	d65c0 <network_listen>

000d67ae <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d67ae:	2300      	movs	r3, #0
   d67b0:	6840      	ldr	r0, [r0, #4]
   d67b2:	461a      	mov	r2, r3
   d67b4:	4619      	mov	r1, r3
   d67b6:	f7ff befb 	b.w	d65b0 <network_off>

000d67ba <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d67ba:	2300      	movs	r3, #0
   d67bc:	6840      	ldr	r0, [r0, #4]
   d67be:	461a      	mov	r2, r3
   d67c0:	4619      	mov	r1, r3
   d67c2:	f7ff beed 	b.w	d65a0 <network_on>

000d67c6 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d67c6:	2200      	movs	r2, #0
   d67c8:	6840      	ldr	r0, [r0, #4]
   d67ca:	4611      	mov	r1, r2
   d67cc:	f7ff bed0 	b.w	d6570 <network_connecting>

000d67d0 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d67d0:	6840      	ldr	r0, [r0, #4]
   d67d2:	2200      	movs	r2, #0
   d67d4:	2102      	movs	r1, #2
   d67d6:	f7ff bed3 	b.w	d6580 <network_disconnect>

000d67da <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d67da:	2300      	movs	r3, #0
   d67dc:	6840      	ldr	r0, [r0, #4]
   d67de:	461a      	mov	r2, r3
   d67e0:	f7ff bebe 	b.w	d6560 <network_connect>

000d67e4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d67e4:	4b08      	ldr	r3, [pc, #32]	; (d6808 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d67e6:	b510      	push	{r4, lr}
   d67e8:	2428      	movs	r4, #40	; 0x28
   d67ea:	4622      	mov	r2, r4
   d67ec:	4618      	mov	r0, r3
   d67ee:	2100      	movs	r1, #0
   d67f0:	f002 faf4 	bl	d8ddc <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d67f4:	4b05      	ldr	r3, [pc, #20]	; (d680c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d67f6:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d67f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d67fc:	6042      	str	r2, [r0, #4]
   d67fe:	2204      	movs	r2, #4
   d6800:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d6802:	4a03      	ldr	r2, [pc, #12]	; (d6810 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d6804:	601a      	str	r2, [r3, #0]
   d6806:	bd10      	pop	{r4, pc}
   d6808:	2003e5ec 	.word	0x2003e5ec
   d680c:	2003e5e4 	.word	0x2003e5e4
   d6810:	000d9514 	.word	0x000d9514

000d6814 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6814:	4770      	bx	lr

000d6816 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d6816:	2000      	movs	r0, #0
   d6818:	4770      	bx	lr

000d681a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d681a:	b510      	push	{r4, lr}
   d681c:	2110      	movs	r1, #16
   d681e:	4604      	mov	r4, r0
   d6820:	f001 fac7 	bl	d7db2 <_ZdlPvj>
   d6824:	4620      	mov	r0, r4
   d6826:	bd10      	pop	{r4, pc}

000d6828 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d6828:	b508      	push	{r3, lr}
      { delete this; }
   d682a:	f7ff fff6 	bl	d681a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d682e:	bd08      	pop	{r3, pc}

000d6830 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6830:	b530      	push	{r4, r5, lr}
        type_(type) {
   d6832:	2200      	movs	r2, #0
   d6834:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d6838:	6002      	str	r2, [r0, #0]
   d683a:	8084      	strh	r4, [r0, #4]
   d683c:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d683e:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6840:	680c      	ldr	r4, [r1, #0]
   d6842:	8085      	strh	r5, [r0, #4]
   d6844:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6846:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d6848:	bd30      	pop	{r4, r5, pc}

000d684a <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d684a:	b510      	push	{r4, lr}
   d684c:	4604      	mov	r4, r0
    free((void*)msg_);
   d684e:	6800      	ldr	r0, [r0, #0]
   d6850:	f7ff fede 	bl	d6610 <free>
}
   d6854:	4620      	mov	r0, r4
   d6856:	bd10      	pop	{r4, pc}

000d6858 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6858:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d685a:	68c4      	ldr	r4, [r0, #12]
   d685c:	b1f4      	cbz	r4, d689c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d685e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6860:	2b02      	cmp	r3, #2
   d6862:	d103      	bne.n	d686c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6864:	f104 000c 	add.w	r0, r4, #12
   d6868:	f7ff ffef 	bl	d684a <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d686c:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d686e:	b135      	cbz	r5, d687e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d6870:	4628      	mov	r0, r5
   d6872:	f7fd fccb 	bl	d420c <_ZNSt14_Function_baseD1Ev>
   d6876:	2110      	movs	r1, #16
   d6878:	4628      	mov	r0, r5
   d687a:	f001 fa9a 	bl	d7db2 <_ZdlPvj>
   d687e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6880:	b135      	cbz	r5, d6890 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6882:	4628      	mov	r0, r5
   d6884:	f7fd fcc2 	bl	d420c <_ZNSt14_Function_baseD1Ev>
   d6888:	2110      	movs	r1, #16
   d688a:	4628      	mov	r0, r5
   d688c:	f001 fa91 	bl	d7db2 <_ZdlPvj>
   d6890:	4620      	mov	r0, r4
   d6892:	2114      	movs	r1, #20
   d6894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6898:	f001 ba8b 	b.w	d7db2 <_ZdlPvj>
   d689c:	bd38      	pop	{r3, r4, r5, pc}

000d689e <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d689e:	b510      	push	{r4, lr}
   d68a0:	b088      	sub	sp, #32
   d68a2:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d68a4:	4668      	mov	r0, sp
   d68a6:	f000 fdb4 	bl	d7412 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d68aa:	4669      	mov	r1, sp
   d68ac:	a804      	add	r0, sp, #16
   d68ae:	f000 fdd3 	bl	d7458 <_ZN6StringC1ERKS_>
   d68b2:	a804      	add	r0, sp, #16
   d68b4:	47a0      	blx	r4
   d68b6:	4604      	mov	r4, r0
   d68b8:	a804      	add	r0, sp, #16
   d68ba:	f000 fd5f 	bl	d737c <_ZN6StringD1Ev>
    String p(param);
   d68be:	4668      	mov	r0, sp
   d68c0:	f000 fd5c 	bl	d737c <_ZN6StringD1Ev>
}
   d68c4:	4620      	mov	r0, r4
   d68c6:	b008      	add	sp, #32
   d68c8:	bd10      	pop	{r4, pc}

000d68ca <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d68ca:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d68cc:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d68ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d68d2:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d68d4:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d68d6:	461a      	mov	r2, r3
   d68d8:	4669      	mov	r1, sp
   d68da:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d68dc:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d68e0:	f8ad 4000 	strh.w	r4, [sp]
   d68e4:	f7ff fde4 	bl	d64b0 <spark_function>
}
   d68e8:	b004      	add	sp, #16
   d68ea:	bd10      	pop	{r4, pc}

000d68ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d68ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d68ee:	460e      	mov	r6, r1
   d68f0:	4604      	mov	r4, r0
   d68f2:	f856 3b04 	ldr.w	r3, [r6], #4
   d68f6:	9300      	str	r3, [sp, #0]
   d68f8:	460d      	mov	r5, r1
   d68fa:	a801      	add	r0, sp, #4
   d68fc:	4631      	mov	r1, r6
   d68fe:	f7ff ff16 	bl	d672e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6902:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6904:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d6906:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6908:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d690a:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d690c:	2300      	movs	r3, #0
   d690e:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d6910:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d6912:	f7ff ff13 	bl	d673c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6916:	4630      	mov	r0, r6
   d6918:	f7ff ff10 	bl	d673c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d691c:	4628      	mov	r0, r5
   d691e:	2108      	movs	r1, #8
   d6920:	f001 fa47 	bl	d7db2 <_ZdlPvj>
        return p;
    }
   d6924:	4620      	mov	r0, r4
   d6926:	b002      	add	sp, #8
   d6928:	bd70      	pop	{r4, r5, r6, pc}

000d692a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d692a:	b513      	push	{r0, r1, r4, lr}
   d692c:	460b      	mov	r3, r1
   d692e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6930:	e9d0 0100 	ldrd	r0, r1, [r0]
   d6934:	466c      	mov	r4, sp
   d6936:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d693a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d693e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6942:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6946:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d694a:	b002      	add	sp, #8
   d694c:	bd10      	pop	{r4, pc}

000d694e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d694e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6950:	b510      	push	{r4, lr}
      if (_M_empty())
   d6952:	b90a      	cbnz	r2, d6958 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6954:	f001 fa33 	bl	d7dbe <_ZSt25__throw_bad_function_callv>
    }
   d6958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d695c:	68c3      	ldr	r3, [r0, #12]
   d695e:	4718      	bx	r3

000d6960 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6960:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6962:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d6964:	f100 0110 	add.w	r1, r0, #16
   d6968:	f7ff fff1 	bl	d694e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d696c:	bd08      	pop	{r3, pc}

000d696e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d696e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6970:	b510      	push	{r4, lr}
      if (_M_empty())
   d6972:	b90a      	cbnz	r2, d6978 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6974:	f001 fa23 	bl	d7dbe <_ZSt25__throw_bad_function_callv>
    }
   d6978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d697c:	68c3      	ldr	r3, [r0, #12]
   d697e:	4718      	bx	r3

000d6980 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6980:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6982:	6800      	ldr	r0, [r0, #0]
   d6984:	f100 0110 	add.w	r1, r0, #16
   d6988:	f7ff fff1 	bl	d696e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d698c:	bd08      	pop	{r3, pc}
	...

000d6990 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d6990:	b538      	push	{r3, r4, r5, lr}
   d6992:	2300      	movs	r3, #0
   d6994:	4604      	mov	r4, r0
   d6996:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6998:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d699a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d699c:	f7fd fb7b 	bl	d4096 <_Znwj>
   d69a0:	b128      	cbz	r0, d69ae <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d69a2:	2301      	movs	r3, #1
   d69a4:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d69a8:	4b02      	ldr	r3, [pc, #8]	; (d69b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d69aa:	6003      	str	r3, [r0, #0]
   d69ac:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d69ae:	6020      	str	r0, [r4, #0]
	}
   d69b0:	4620      	mov	r0, r4
   d69b2:	bd38      	pop	{r3, r4, r5, pc}
   d69b4:	000d9548 	.word	0x000d9548

000d69b8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d69b8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d69ba:	2300      	movs	r3, #0
   d69bc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d69be:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d69c0:	4604      	mov	r4, r0
   d69c2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d69c4:	b12b      	cbz	r3, d69d2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d69c6:	2202      	movs	r2, #2
   d69c8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d69ca:	68eb      	ldr	r3, [r5, #12]
   d69cc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d69ce:	68ab      	ldr	r3, [r5, #8]
   d69d0:	60a3      	str	r3, [r4, #8]
    }
   d69d2:	4620      	mov	r0, r4
   d69d4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d69d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d69d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d69da:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d69dc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d69de:	4668      	mov	r0, sp
   d69e0:	f7ff ff26 	bl	d6830 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d69e4:	f04f 0302 	mov.w	r3, #2
   d69e8:	e8d4 2f4f 	ldrexb	r2, [r4]
   d69ec:	2a00      	cmp	r2, #0
   d69ee:	d103      	bne.n	d69f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d69f0:	e8c4 3f41 	strexb	r1, r3, [r4]
   d69f4:	2900      	cmp	r1, #0
   d69f6:	d1f7      	bne.n	d69e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d69f8:	d125      	bne.n	d6a46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d69fa:	f104 050c 	add.w	r5, r4, #12
   d69fe:	4669      	mov	r1, sp
   d6a00:	4628      	mov	r0, r5
   d6a02:	f7ff ff15 	bl	d6830 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d6a06:	f3bf 8f5b 	dmb	ish
   d6a0a:	2301      	movs	r3, #1
   d6a0c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6a0e:	2000      	movs	r0, #0
   d6a10:	f104 0308 	add.w	r3, r4, #8
   d6a14:	f3bf 8f5b 	dmb	ish
   d6a18:	e853 6f00 	ldrex	r6, [r3]
   d6a1c:	e843 0200 	strex	r2, r0, [r3]
   d6a20:	2a00      	cmp	r2, #0
   d6a22:	d1f9      	bne.n	d6a18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d6a24:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6a28:	b16e      	cbz	r6, d6a46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d6a2a:	f7ff fcfb 	bl	d6424 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6a2e:	b178      	cbz	r0, d6a50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6a30:	4629      	mov	r1, r5
   d6a32:	4630      	mov	r0, r6
   d6a34:	f7ff ff8b 	bl	d694e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d6a38:	4630      	mov	r0, r6
   d6a3a:	f7fd fbe7 	bl	d420c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6a3e:	2110      	movs	r1, #16
   d6a40:	4630      	mov	r0, r6
   d6a42:	f001 f9b6 	bl	d7db2 <_ZdlPvj>
        p_->setError(std::move(error));
   d6a46:	4668      	mov	r0, sp
   d6a48:	f7ff feff 	bl	d684a <_ZN8particle5ErrorD1Ev>
    }
   d6a4c:	b009      	add	sp, #36	; 0x24
   d6a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6a50:	4631      	mov	r1, r6
   d6a52:	a802      	add	r0, sp, #8
   d6a54:	f7ff ffb0 	bl	d69b8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6a58:	68e0      	ldr	r0, [r4, #12]
   d6a5a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6a5e:	b108      	cbz	r0, d6a64 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d6a60:	f002 f9fa 	bl	d8e58 <strdup>
        type_(type) {
   d6a64:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6a66:	2010      	movs	r0, #16
   d6a68:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6a6c:	f7fd fb13 	bl	d4096 <_Znwj>
   d6a70:	4605      	mov	r5, r0
   d6a72:	b1e8      	cbz	r0, d6ab0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d6a74:	2700      	movs	r7, #0
   d6a76:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6a78:	2018      	movs	r0, #24
   d6a7a:	f7fd fb0c 	bl	d4096 <_Znwj>
   d6a7e:	4604      	mov	r4, r0
   d6a80:	b188      	cbz	r0, d6aa6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d6a82:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d6a84:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6a86:	a802      	add	r0, sp, #8
   d6a88:	f7ff ff4f 	bl	d692a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a8c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6a8e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6a90:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a92:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6a94:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6a96:	a906      	add	r1, sp, #24
   d6a98:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6a9a:	60e3      	str	r3, [r4, #12]
   d6a9c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d6aa0:	9205      	str	r2, [sp, #20]
   d6aa2:	f7ff fec5 	bl	d6830 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d6aa6:	4b08      	ldr	r3, [pc, #32]	; (d6ac8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d6aa8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6aaa:	4b08      	ldr	r3, [pc, #32]	; (d6acc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6aac:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6aae:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d6ab0:	a806      	add	r0, sp, #24
   d6ab2:	f7ff feca 	bl	d684a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6ab6:	a802      	add	r0, sp, #8
   d6ab8:	f7fd fba8 	bl	d420c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6abc:	2200      	movs	r2, #0
   d6abe:	4629      	mov	r1, r5
   d6ac0:	4803      	ldr	r0, [pc, #12]	; (d6ad0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d6ac2:	f7ff fcb7 	bl	d6434 <application_thread_invoke>
   d6ac6:	e7b7      	b.n	d6a38 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d6ac8:	000d6961 	.word	0x000d6961
   d6acc:	000d6bf9 	.word	0x000d6bf9
   d6ad0:	000d66d7 	.word	0x000d66d7

000d6ad4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6ad8:	b08a      	sub	sp, #40	; 0x28
   d6ada:	4605      	mov	r5, r0
   d6adc:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d6ae0:	460c      	mov	r4, r1
   d6ae2:	4617      	mov	r7, r2
   d6ae4:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6ae6:	f7ff fcf3 	bl	d64d0 <spark_cloud_flag_connected>
   d6aea:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d6aec:	4682      	mov	sl, r0
   d6aee:	bb38      	cbnz	r0, d6b40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d6af0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6af4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6af6:	a905      	add	r1, sp, #20
   d6af8:	4630      	mov	r0, r6
   d6afa:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6afe:	f7ff fe97 	bl	d6830 <_ZN8particle5ErrorC1EOS0_>
   d6b02:	2014      	movs	r0, #20
   d6b04:	f7fd fac7 	bl	d4096 <_Znwj>
   d6b08:	4604      	mov	r4, r0
   d6b0a:	b148      	cbz	r0, d6b20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6b0c:	2302      	movs	r3, #2
   d6b0e:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6b10:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6b12:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6b16:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6b18:	4631      	mov	r1, r6
   d6b1a:	300c      	adds	r0, #12
   d6b1c:	f7ff fe88 	bl	d6830 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6b20:	4628      	mov	r0, r5
	: __shared_count(__p)
   d6b22:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6b24:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d6b28:	f7ff ff32 	bl	d6990 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6b2c:	4630      	mov	r0, r6
   d6b2e:	f7ff fe8c 	bl	d684a <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6b32:	a805      	add	r0, sp, #20
   d6b34:	f7ff fe89 	bl	d684a <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d6b38:	4628      	mov	r0, r5
   d6b3a:	b00a      	add	sp, #40	; 0x28
   d6b3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6b40:	230c      	movs	r3, #12
   d6b42:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6b46:	2014      	movs	r0, #20
   d6b48:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d6b4c:	9307      	str	r3, [sp, #28]
   d6b4e:	f7fd faa2 	bl	d4096 <_Znwj>
   d6b52:	4601      	mov	r1, r0
   d6b54:	b128      	cbz	r0, d6b62 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6b56:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d6b5a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6b5e:	f880 a001 	strb.w	sl, [r0, #1]
   d6b62:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6b64:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d6b66:	f7ff ff13 	bl	d6990 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d6b6a:	4b22      	ldr	r3, [pc, #136]	; (d6bf4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d6b6c:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6b6e:	2008      	movs	r0, #8
   d6b70:	f7fd fa91 	bl	d4096 <_Znwj>
   d6b74:	4682      	mov	sl, r0
   d6b76:	b128      	cbz	r0, d6b84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6b78:	9b03      	ldr	r3, [sp, #12]
   d6b7a:	f840 3b04 	str.w	r3, [r0], #4
   d6b7e:	a904      	add	r1, sp, #16
   d6b80:	f7ff fdd5 	bl	d672e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6b84:	9600      	str	r6, [sp, #0]
   d6b86:	fa5f f389 	uxtb.w	r3, r9
   d6b8a:	4642      	mov	r2, r8
   d6b8c:	4639      	mov	r1, r7
   d6b8e:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d6b90:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6b94:	f7ff fcac 	bl	d64f0 <spark_send_event>
   d6b98:	b9b8      	cbnz	r0, d6bca <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d6b9a:	9b03      	ldr	r3, [sp, #12]
   d6b9c:	785b      	ldrb	r3, [r3, #1]
   d6b9e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6ba2:	b993      	cbnz	r3, d6bca <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d6ba4:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d6ba8:	a905      	add	r1, sp, #20
   d6baa:	a803      	add	r0, sp, #12
   d6bac:	9205      	str	r2, [sp, #20]
   d6bae:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6bb2:	f7ff ff11 	bl	d69d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6bb6:	a805      	add	r0, sp, #20
   d6bb8:	f7ff fe47 	bl	d684a <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6bbc:	a805      	add	r0, sp, #20
   d6bbe:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6bc0:	f7ff fe94 	bl	d68ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d6bc4:	a806      	add	r0, sp, #24
   d6bc6:	f7ff fdb9 	bl	d673c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6bca:	9b03      	ldr	r3, [sp, #12]
   d6bcc:	9305      	str	r3, [sp, #20]
   d6bce:	a904      	add	r1, sp, #16
   d6bd0:	a806      	add	r0, sp, #24
   d6bd2:	f7ff fdac 	bl	d672e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6bd6:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6bd8:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6bda:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d6bdc:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d6bde:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d6be0:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d6be2:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d6be4:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d6be6:	f7ff fda9 	bl	d673c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6bea:	a804      	add	r0, sp, #16
   d6bec:	f7ff fda6 	bl	d673c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d6bf0:	e7a2      	b.n	d6b38 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d6bf2:	bf00      	nop
   d6bf4:	000d6cbd 	.word	0x000d6cbd

000d6bf8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d6bf8:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6bfc:	4605      	mov	r5, r0
	  switch (__op)
   d6bfe:	d007      	beq.n	d6c10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d6c00:	2a03      	cmp	r2, #3
   d6c02:	d018      	beq.n	d6c36 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d6c04:	2a01      	cmp	r2, #1
   d6c06:	d101      	bne.n	d6c0c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6c08:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6c0a:	6003      	str	r3, [r0, #0]
	}
   d6c0c:	2000      	movs	r0, #0
   d6c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6c10:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d6c12:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6c14:	f7fd fa3f 	bl	d4096 <_Znwj>
   d6c18:	4604      	mov	r4, r0
   d6c1a:	b150      	cbz	r0, d6c32 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6c1c:	4631      	mov	r1, r6
   d6c1e:	f7ff fecb 	bl	d69b8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6c22:	6930      	ldr	r0, [r6, #16]
   d6c24:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6c28:	b108      	cbz	r0, d6c2e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d6c2a:	f002 f915 	bl	d8e58 <strdup>
        type_(type) {
   d6c2e:	6120      	str	r0, [r4, #16]
   d6c30:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d6c32:	602c      	str	r4, [r5, #0]
	}
   d6c34:	e7ea      	b.n	d6c0c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6c36:	6804      	ldr	r4, [r0, #0]
   d6c38:	2c00      	cmp	r4, #0
   d6c3a:	d0e7      	beq.n	d6c0c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d6c3c:	f104 0010 	add.w	r0, r4, #16
   d6c40:	f7ff fe03 	bl	d684a <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6c44:	4620      	mov	r0, r4
   d6c46:	f7fd fae1 	bl	d420c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6c4a:	2118      	movs	r1, #24
   d6c4c:	4620      	mov	r0, r4
   d6c4e:	f001 f8b0 	bl	d7db2 <_ZdlPvj>
   d6c52:	e7db      	b.n	d6c0c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d6c54 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d6c54:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6c56:	2300      	movs	r3, #0
   d6c58:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6c5a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6c5c:	4604      	mov	r4, r0
   d6c5e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6c60:	b12b      	cbz	r3, d6c6e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6c62:	2202      	movs	r2, #2
   d6c64:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6c66:	68eb      	ldr	r3, [r5, #12]
   d6c68:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6c6a:	68ab      	ldr	r3, [r5, #8]
   d6c6c:	60a3      	str	r3, [r4, #8]
    }
   d6c6e:	4620      	mov	r0, r4
   d6c70:	bd38      	pop	{r3, r4, r5, pc}

000d6c72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d6c72:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6c74:	b570      	push	{r4, r5, r6, lr}
   d6c76:	4604      	mov	r4, r0
	  switch (__op)
   d6c78:	d007      	beq.n	d6c8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d6c7a:	2a03      	cmp	r2, #3
   d6c7c:	d012      	beq.n	d6ca4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d6c7e:	2a01      	cmp	r2, #1
   d6c80:	d101      	bne.n	d6c86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6c82:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6c84:	6003      	str	r3, [r0, #0]
	}
   d6c86:	2000      	movs	r0, #0
   d6c88:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6c8a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d6c8c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6c8e:	f7fd fa02 	bl	d4096 <_Znwj>
   d6c92:	4605      	mov	r5, r0
   d6c94:	b120      	cbz	r0, d6ca0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d6c96:	4631      	mov	r1, r6
   d6c98:	f7ff ffdc 	bl	d6c54 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6c9c:	7c33      	ldrb	r3, [r6, #16]
   d6c9e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d6ca0:	6025      	str	r5, [r4, #0]
	}
   d6ca2:	e7f0      	b.n	d6c86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6ca4:	6804      	ldr	r4, [r0, #0]
   d6ca6:	2c00      	cmp	r4, #0
   d6ca8:	d0ed      	beq.n	d6c86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d6caa:	4620      	mov	r0, r4
   d6cac:	f7fd faae 	bl	d420c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6cb0:	2114      	movs	r1, #20
   d6cb2:	4620      	mov	r0, r4
   d6cb4:	f001 f87d 	bl	d7db2 <_ZdlPvj>
   d6cb8:	e7e5      	b.n	d6c86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d6cbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6cbe:	b089      	sub	sp, #36	; 0x24
   d6cc0:	4604      	mov	r4, r0
   d6cc2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6cc4:	a801      	add	r0, sp, #4
   d6cc6:	4611      	mov	r1, r2
   d6cc8:	f7ff fe10 	bl	d68ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6ccc:	b1a4      	cbz	r4, d6cf8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6cce:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6cd0:	b11d      	cbz	r5, d6cda <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d6cd2:	4628      	mov	r0, r5
   d6cd4:	f002 f8c0 	bl	d8e58 <strdup>
   d6cd8:	4605      	mov	r5, r0
   d6cda:	a801      	add	r0, sp, #4
   d6cdc:	a903      	add	r1, sp, #12
        type_(type) {
   d6cde:	9503      	str	r5, [sp, #12]
   d6ce0:	f8ad 4010 	strh.w	r4, [sp, #16]
   d6ce4:	f7ff fe78 	bl	d69d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6ce8:	a803      	add	r0, sp, #12
   d6cea:	f7ff fdae 	bl	d684a <_ZN8particle5ErrorD1Ev>
   d6cee:	a802      	add	r0, sp, #8
   d6cf0:	f7ff fd24 	bl	d673c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6cf4:	b009      	add	sp, #36	; 0x24
   d6cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6cf8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6cfa:	2301      	movs	r3, #1
   d6cfc:	e8d5 2f4f 	ldrexb	r2, [r5]
   d6d00:	2a00      	cmp	r2, #0
   d6d02:	d103      	bne.n	d6d0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d6d04:	e8c5 3f41 	strexb	r1, r3, [r5]
   d6d08:	2900      	cmp	r1, #0
   d6d0a:	d1f7      	bne.n	d6cfc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d6d0c:	d1ef      	bne.n	d6cee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d6d0e:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d6d10:	f3bf 8f5b 	dmb	ish
   d6d14:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6d16:	1d2b      	adds	r3, r5, #4
   d6d18:	f3bf 8f5b 	dmb	ish
   d6d1c:	e853 6f00 	ldrex	r6, [r3]
   d6d20:	e843 4200 	strex	r2, r4, [r3]
   d6d24:	2a00      	cmp	r2, #0
   d6d26:	d1f9      	bne.n	d6d1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d6d28:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6d2c:	2e00      	cmp	r6, #0
   d6d2e:	d0de      	beq.n	d6cee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d6d30:	4620      	mov	r0, r4
   d6d32:	f7ff fb77 	bl	d6424 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6d36:	4607      	mov	r7, r0
   d6d38:	b160      	cbz	r0, d6d54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6d3a:	f105 010c 	add.w	r1, r5, #12
   d6d3e:	4630      	mov	r0, r6
   d6d40:	f7ff fe15 	bl	d696e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d6d44:	4630      	mov	r0, r6
   d6d46:	f7fd fa61 	bl	d420c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6d4a:	2110      	movs	r1, #16
   d6d4c:	4630      	mov	r0, r6
   d6d4e:	f001 f830 	bl	d7db2 <_ZdlPvj>
   d6d52:	e7cc      	b.n	d6cee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6d54:	4631      	mov	r1, r6
   d6d56:	a803      	add	r0, sp, #12
   d6d58:	f7ff ff7c 	bl	d6c54 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6d5c:	7b2b      	ldrb	r3, [r5, #12]
   d6d5e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6d62:	2010      	movs	r0, #16
   d6d64:	f7fd f997 	bl	d4096 <_Znwj>
   d6d68:	4605      	mov	r5, r0
   d6d6a:	b1d0      	cbz	r0, d6da2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d6d6c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6d6e:	2014      	movs	r0, #20
   d6d70:	f7fd f991 	bl	d4096 <_Znwj>
   d6d74:	4604      	mov	r4, r0
   d6d76:	b178      	cbz	r0, d6d98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d6d78:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6d7a:	4601      	mov	r1, r0
   d6d7c:	a803      	add	r0, sp, #12
   d6d7e:	f7ff fdd4 	bl	d692a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d82:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6d84:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d86:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6d88:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d6d8a:	9205      	str	r2, [sp, #20]
   d6d8c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6d8e:	60e3      	str	r3, [r4, #12]
   d6d90:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6d94:	9206      	str	r2, [sp, #24]
   d6d96:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6d98:	4b06      	ldr	r3, [pc, #24]	; (d6db4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d6d9a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6d9c:	4b06      	ldr	r3, [pc, #24]	; (d6db8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6d9e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6da0:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d6da2:	a803      	add	r0, sp, #12
   d6da4:	f7fd fa32 	bl	d420c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6da8:	2200      	movs	r2, #0
   d6daa:	4629      	mov	r1, r5
   d6dac:	4803      	ldr	r0, [pc, #12]	; (d6dbc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d6dae:	f7ff fb41 	bl	d6434 <application_thread_invoke>
   d6db2:	e7c7      	b.n	d6d44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d6db4:	000d6981 	.word	0x000d6981
   d6db8:	000d6c73 	.word	0x000d6c73
   d6dbc:	000d66d7 	.word	0x000d66d7

000d6dc0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6dc0:	2200      	movs	r2, #0
   d6dc2:	6840      	ldr	r0, [r0, #4]
   d6dc4:	4611      	mov	r1, r2
   d6dc6:	f7ff bc03 	b.w	d65d0 <network_listening>

000d6dca <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6dca:	2200      	movs	r2, #0
   d6dcc:	6840      	ldr	r0, [r0, #4]
   d6dce:	4611      	mov	r1, r2
   d6dd0:	f7ff bc0e 	b.w	d65f0 <network_get_listen_timeout>

000d6dd4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6dd4:	6840      	ldr	r0, [r0, #4]
   d6dd6:	2200      	movs	r2, #0
   d6dd8:	f7ff bc02 	b.w	d65e0 <network_set_listen_timeout>

000d6ddc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6ddc:	6840      	ldr	r0, [r0, #4]
   d6dde:	2200      	movs	r2, #0
   d6de0:	f081 0101 	eor.w	r1, r1, #1
   d6de4:	f7ff bbec 	b.w	d65c0 <network_listen>

000d6de8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6de8:	2300      	movs	r3, #0
   d6dea:	6840      	ldr	r0, [r0, #4]
   d6dec:	461a      	mov	r2, r3
   d6dee:	4619      	mov	r1, r3
   d6df0:	f7ff bbde 	b.w	d65b0 <network_off>

000d6df4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6df4:	2300      	movs	r3, #0
   d6df6:	6840      	ldr	r0, [r0, #4]
   d6df8:	461a      	mov	r2, r3
   d6dfa:	4619      	mov	r1, r3
   d6dfc:	f7ff bbd0 	b.w	d65a0 <network_on>

000d6e00 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6e00:	2200      	movs	r2, #0
   d6e02:	6840      	ldr	r0, [r0, #4]
   d6e04:	4611      	mov	r1, r2
   d6e06:	f7ff bbc3 	b.w	d6590 <network_ready>

000d6e0a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6e0a:	2200      	movs	r2, #0
   d6e0c:	6840      	ldr	r0, [r0, #4]
   d6e0e:	4611      	mov	r1, r2
   d6e10:	f7ff bbae 	b.w	d6570 <network_connecting>

000d6e14 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6e14:	6840      	ldr	r0, [r0, #4]
   d6e16:	2200      	movs	r2, #0
   d6e18:	2102      	movs	r1, #2
   d6e1a:	f7ff bbb1 	b.w	d6580 <network_disconnect>

000d6e1e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6e1e:	2300      	movs	r3, #0
   d6e20:	6840      	ldr	r0, [r0, #4]
   d6e22:	461a      	mov	r2, r3
   d6e24:	f7ff bb9c 	b.w	d6560 <network_connect>

000d6e28 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d6e28:	4b02      	ldr	r3, [pc, #8]	; (d6e34 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6e2a:	2203      	movs	r2, #3
   d6e2c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6e2e:	4a02      	ldr	r2, [pc, #8]	; (d6e38 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6e30:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d6e32:	4770      	bx	lr
   d6e34:	2003e614 	.word	0x2003e614
   d6e38:	000d9564 	.word	0x000d9564

000d6e3c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6e3c:	4770      	bx	lr

000d6e3e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6e3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e40:	4606      	mov	r6, r0
   d6e42:	4615      	mov	r5, r2
   d6e44:	460c      	mov	r4, r1
   d6e46:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6e48:	42bc      	cmp	r4, r7
   d6e4a:	d006      	beq.n	d6e5a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6e4c:	6833      	ldr	r3, [r6, #0]
   d6e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6e52:	689b      	ldr	r3, [r3, #8]
   d6e54:	4630      	mov	r0, r6
   d6e56:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6e58:	e7f6      	b.n	d6e48 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6e5a:	4628      	mov	r0, r5
   d6e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e5e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d6e5e:	7c00      	ldrb	r0, [r0, #16]
   d6e60:	2200      	movs	r2, #0
   d6e62:	f7ff b9c7 	b.w	d61f4 <hal_i2c_write>

000d6e66 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6e66:	7c00      	ldrb	r0, [r0, #16]
   d6e68:	2100      	movs	r1, #0
   d6e6a:	f7ff b9cb 	b.w	d6204 <hal_i2c_available>

000d6e6e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d6e6e:	7c00      	ldrb	r0, [r0, #16]
   d6e70:	2100      	movs	r1, #0
   d6e72:	f7ff b9cf 	b.w	d6214 <hal_i2c_read>

000d6e76 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d6e76:	7c00      	ldrb	r0, [r0, #16]
   d6e78:	2100      	movs	r1, #0
   d6e7a:	f7ff b9d3 	b.w	d6224 <hal_i2c_peek>

000d6e7e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d6e7e:	7c00      	ldrb	r0, [r0, #16]
   d6e80:	2100      	movs	r1, #0
   d6e82:	f7ff b9d7 	b.w	d6234 <hal_i2c_flush>

000d6e86 <_ZN7TwoWireD0Ev>:
   d6e86:	b510      	push	{r4, lr}
   d6e88:	2114      	movs	r1, #20
   d6e8a:	4604      	mov	r4, r0
   d6e8c:	f000 ff91 	bl	d7db2 <_ZdlPvj>
   d6e90:	4620      	mov	r0, r4
   d6e92:	bd10      	pop	{r4, pc}

000d6e94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6e94:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6e96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6e9a:	4604      	mov	r4, r0
   d6e9c:	4608      	mov	r0, r1
   d6e9e:	2100      	movs	r1, #0
   d6ea0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6ea4:	4b03      	ldr	r3, [pc, #12]	; (d6eb4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d6ea6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6ea8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d6eaa:	4611      	mov	r1, r2
   d6eac:	f7ff f9d2 	bl	d6254 <hal_i2c_init>
}
   d6eb0:	4620      	mov	r0, r4
   d6eb2:	bd10      	pop	{r4, pc}
   d6eb4:	000d9598 	.word	0x000d9598

000d6eb8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6eb8:	2300      	movs	r3, #0
   d6eba:	7c00      	ldrb	r0, [r0, #16]
   d6ebc:	461a      	mov	r2, r3
   d6ebe:	4619      	mov	r1, r3
   d6ec0:	f7ff b980 	b.w	d61c4 <hal_i2c_begin>

000d6ec4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6ec4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d6ec6:	2200      	movs	r2, #0
   d6ec8:	2314      	movs	r3, #20
   d6eca:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d6ece:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d6ed2:	780b      	ldrb	r3, [r1, #0]
   d6ed4:	f88d 3008 	strb.w	r3, [sp, #8]
   d6ed8:	684b      	ldr	r3, [r1, #4]
   d6eda:	9303      	str	r3, [sp, #12]
   d6edc:	68cb      	ldr	r3, [r1, #12]
   d6ede:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d6ee0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d6ee2:	7a0b      	ldrb	r3, [r1, #8]
   d6ee4:	9305      	str	r3, [sp, #20]
   d6ee6:	a901      	add	r1, sp, #4
   d6ee8:	f7ff f9cc 	bl	d6284 <hal_i2c_request_ex>
}
   d6eec:	b007      	add	sp, #28
   d6eee:	f85d fb04 	ldr.w	pc, [sp], #4

000d6ef2 <_ZN7TwoWire11requestFromEhjh>:
{
   d6ef2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d6ef4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d6ef6:	f88d 1000 	strb.w	r1, [sp]
   d6efa:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6efe:	9103      	str	r1, [sp, #12]
   d6f00:	bf18      	it	ne
   d6f02:	2301      	movne	r3, #1
   d6f04:	4669      	mov	r1, sp
    size_ = size;
   d6f06:	9201      	str	r2, [sp, #4]
   d6f08:	f88d 3008 	strb.w	r3, [sp, #8]
   d6f0c:	f7ff ffda 	bl	d6ec4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6f10:	b005      	add	sp, #20
   d6f12:	f85d fb04 	ldr.w	pc, [sp], #4

000d6f16 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d6f16:	7c00      	ldrb	r0, [r0, #16]
   d6f18:	2200      	movs	r2, #0
   d6f1a:	f7ff b95b 	b.w	d61d4 <hal_i2c_begin_transmission>

000d6f1e <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d6f1e:	b2c9      	uxtb	r1, r1
   d6f20:	f7ff bff9 	b.w	d6f16 <_ZN7TwoWire17beginTransmissionEh>

000d6f24 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d6f24:	7c00      	ldrb	r0, [r0, #16]
   d6f26:	2200      	movs	r2, #0
   d6f28:	f7ff b95c 	b.w	d61e4 <hal_i2c_end_transmission>

000d6f2c <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d6f2c:	2101      	movs	r1, #1
   d6f2e:	f7ff bff9 	b.w	d6f24 <_ZN7TwoWire15endTransmissionEh>

000d6f32 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d6f32:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d6f34:	2100      	movs	r1, #0
   d6f36:	7c00      	ldrb	r0, [r0, #16]
   d6f38:	f7ff f994 	bl	d6264 <hal_i2c_lock>
}
   d6f3c:	fab0 f080 	clz	r0, r0
   d6f40:	0940      	lsrs	r0, r0, #5
   d6f42:	bd08      	pop	{r3, pc}

000d6f44 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d6f44:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d6f46:	2100      	movs	r1, #0
   d6f48:	7c00      	ldrb	r0, [r0, #16]
   d6f4a:	f7ff f993 	bl	d6274 <hal_i2c_unlock>
}
   d6f4e:	fab0 f080 	clz	r0, r0
   d6f52:	0940      	lsrs	r0, r0, #5
   d6f54:	bd08      	pop	{r3, pc}

000d6f56 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d6f56:	4700      	bx	r0

000d6f58 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d6f58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d6f5c:	2400      	movs	r4, #0
{
   d6f5e:	461d      	mov	r5, r3
   d6f60:	460f      	mov	r7, r1
   d6f62:	4690      	mov	r8, r2
   d6f64:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d6f66:	f7ff f91d 	bl	d61a4 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d6f6a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d6f6c:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d6f70:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d6f74:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d6f78:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d6f7c:	bfa2      	ittt	ge
   d6f7e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d6f82:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d6f86:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d6f88:	4907      	ldr	r1, [pc, #28]	; (d6fa8 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d6f8a:	9400      	str	r4, [sp, #0]
   d6f8c:	4643      	mov	r3, r8
   d6f8e:	463a      	mov	r2, r7
   d6f90:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d6f92:	bfa8      	it	ge
   d6f94:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d6f98:	f7ff f8fc 	bl	d6194 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d6f9c:	fab0 f080 	clz	r0, r0
   d6fa0:	0940      	lsrs	r0, r0, #5
   d6fa2:	b004      	add	sp, #16
   d6fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6fa8:	000d6f57 	.word	0x000d6f57

000d6fac <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6fac:	4770      	bx	lr

000d6fae <_ZN9IPAddressD0Ev>:
   d6fae:	b510      	push	{r4, lr}
   d6fb0:	2118      	movs	r1, #24
   d6fb2:	4604      	mov	r4, r0
   d6fb4:	f000 fefd 	bl	d7db2 <_ZdlPvj>
   d6fb8:	4620      	mov	r0, r4
   d6fba:	bd10      	pop	{r4, pc}

000d6fbc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6fbe:	7d03      	ldrb	r3, [r0, #20]
   d6fc0:	2b06      	cmp	r3, #6
{
   d6fc2:	b08d      	sub	sp, #52	; 0x34
   d6fc4:	460e      	mov	r6, r1
   d6fc6:	f100 0704 	add.w	r7, r0, #4
   d6fca:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6fce:	d012      	beq.n	d6ff6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d6fd0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6fd4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6fd8:	220a      	movs	r2, #10
   d6fda:	4630      	mov	r0, r6
   d6fdc:	f000 f933 	bl	d7246 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6fe0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6fe2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6fe4:	d019      	beq.n	d701a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6fe6:	2c00      	cmp	r4, #0
   d6fe8:	d0f4      	beq.n	d6fd4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d6fea:	212e      	movs	r1, #46	; 0x2e
   d6fec:	4630      	mov	r0, r6
   d6fee:	f000 f927 	bl	d7240 <_ZN5Print5printEc>
   d6ff2:	4404      	add	r4, r0
   d6ff4:	e7ee      	b.n	d6fd4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6ff6:	232f      	movs	r3, #47	; 0x2f
   d6ff8:	466a      	mov	r2, sp
   d6ffa:	4639      	mov	r1, r7
   d6ffc:	200a      	movs	r0, #10
		buf[0] = 0;
   d6ffe:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7002:	f7ff f947 	bl	d6294 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d7006:	4668      	mov	r0, sp
   d7008:	f001 ff43 	bl	d8e92 <strlen>
   d700c:	6833      	ldr	r3, [r6, #0]
   d700e:	4602      	mov	r2, r0
   d7010:	68db      	ldr	r3, [r3, #12]
   d7012:	4669      	mov	r1, sp
   d7014:	4630      	mov	r0, r6
   d7016:	4798      	blx	r3
   d7018:	4604      	mov	r4, r0
    }
    return n;
}
   d701a:	4620      	mov	r0, r4
   d701c:	b00d      	add	sp, #52	; 0x34
   d701e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7020 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d7020:	b510      	push	{r4, lr}
   d7022:	4b05      	ldr	r3, [pc, #20]	; (d7038 <_ZN9IPAddressC1Ev+0x18>)
   d7024:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7026:	2211      	movs	r2, #17
   d7028:	f840 3b04 	str.w	r3, [r0], #4
   d702c:	2100      	movs	r1, #0
   d702e:	f001 fed5 	bl	d8ddc <memset>
}
   d7032:	4620      	mov	r0, r4
   d7034:	bd10      	pop	{r4, pc}
   d7036:	bf00      	nop
   d7038:	000d95c0 	.word	0x000d95c0

000d703c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d703c:	4603      	mov	r3, r0
   d703e:	4a07      	ldr	r2, [pc, #28]	; (d705c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7040:	b510      	push	{r4, lr}
   d7042:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7046:	f101 0210 	add.w	r2, r1, #16
   d704a:	f851 4b04 	ldr.w	r4, [r1], #4
   d704e:	f843 4b04 	str.w	r4, [r3], #4
   d7052:	4291      	cmp	r1, r2
   d7054:	d1f9      	bne.n	d704a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7056:	780a      	ldrb	r2, [r1, #0]
   d7058:	701a      	strb	r2, [r3, #0]
}
   d705a:	bd10      	pop	{r4, pc}
   d705c:	000d95c0 	.word	0x000d95c0

000d7060 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7060:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7062:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7066:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d706a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d706e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7072:	2304      	movs	r3, #4
   d7074:	6041      	str	r1, [r0, #4]
   d7076:	7503      	strb	r3, [r0, #20]
}
   d7078:	bd10      	pop	{r4, pc}

000d707a <_ZN9IPAddressaSEPKh>:
{
   d707a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d707c:	78cb      	ldrb	r3, [r1, #3]
   d707e:	9300      	str	r3, [sp, #0]
   d7080:	788b      	ldrb	r3, [r1, #2]
   d7082:	784a      	ldrb	r2, [r1, #1]
   d7084:	7809      	ldrb	r1, [r1, #0]
   d7086:	f7ff ffeb 	bl	d7060 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d708a:	b002      	add	sp, #8
   d708c:	bd10      	pop	{r4, pc}
	...

000d7090 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7090:	4b01      	ldr	r3, [pc, #4]	; (d7098 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7092:	4a02      	ldr	r2, [pc, #8]	; (d709c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7094:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7096:	4770      	bx	lr
   d7098:	2003e61c 	.word	0x2003e61c
   d709c:	000d95cc 	.word	0x000d95cc

000d70a0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d70a0:	2300      	movs	r3, #0
   d70a2:	6840      	ldr	r0, [r0, #4]
   d70a4:	461a      	mov	r2, r3
   d70a6:	f7ff ba5b 	b.w	d6560 <network_connect>

000d70aa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d70aa:	6840      	ldr	r0, [r0, #4]
   d70ac:	2200      	movs	r2, #0
   d70ae:	2102      	movs	r1, #2
   d70b0:	f7ff ba66 	b.w	d6580 <network_disconnect>

000d70b4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d70b4:	2200      	movs	r2, #0
   d70b6:	6840      	ldr	r0, [r0, #4]
   d70b8:	4611      	mov	r1, r2
   d70ba:	f7ff ba59 	b.w	d6570 <network_connecting>

000d70be <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d70be:	2200      	movs	r2, #0
   d70c0:	6840      	ldr	r0, [r0, #4]
   d70c2:	4611      	mov	r1, r2
   d70c4:	f7ff ba64 	b.w	d6590 <network_ready>

000d70c8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d70c8:	2300      	movs	r3, #0
   d70ca:	6840      	ldr	r0, [r0, #4]
   d70cc:	461a      	mov	r2, r3
   d70ce:	4619      	mov	r1, r3
   d70d0:	f7ff ba66 	b.w	d65a0 <network_on>

000d70d4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d70d4:	2300      	movs	r3, #0
   d70d6:	6840      	ldr	r0, [r0, #4]
   d70d8:	461a      	mov	r2, r3
   d70da:	4619      	mov	r1, r3
   d70dc:	f7ff ba68 	b.w	d65b0 <network_off>

000d70e0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d70e0:	6840      	ldr	r0, [r0, #4]
   d70e2:	2200      	movs	r2, #0
   d70e4:	f081 0101 	eor.w	r1, r1, #1
   d70e8:	f7ff ba6a 	b.w	d65c0 <network_listen>

000d70ec <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d70ec:	6840      	ldr	r0, [r0, #4]
   d70ee:	2200      	movs	r2, #0
   d70f0:	f7ff ba76 	b.w	d65e0 <network_set_listen_timeout>

000d70f4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d70f4:	2200      	movs	r2, #0
   d70f6:	6840      	ldr	r0, [r0, #4]
   d70f8:	4611      	mov	r1, r2
   d70fa:	f7ff ba79 	b.w	d65f0 <network_get_listen_timeout>

000d70fe <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d70fe:	2200      	movs	r2, #0
   d7100:	6840      	ldr	r0, [r0, #4]
   d7102:	4611      	mov	r1, r2
   d7104:	f7ff ba64 	b.w	d65d0 <network_listening>

000d7108 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d710c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d710e:	b095      	sub	sp, #84	; 0x54
   d7110:	4616      	mov	r6, r2
   d7112:	460d      	mov	r5, r1
   d7114:	4607      	mov	r7, r0
    IPAddress addr;
   d7116:	f7ff ff83 	bl	d7020 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d711a:	4621      	mov	r1, r4
   d711c:	2218      	movs	r2, #24
   d711e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7120:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7122:	f001 fe5b 	bl	d8ddc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7126:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7128:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d712c:	4621      	mov	r1, r4
   d712e:	466b      	mov	r3, sp
   d7130:	aa0c      	add	r2, sp, #48	; 0x30
   d7132:	4630      	mov	r0, r6
   d7134:	f7ff f8be 	bl	d62b4 <netdb_getaddrinfo>
    if (!r) {
   d7138:	4604      	mov	r4, r0
   d713a:	2800      	cmp	r0, #0
   d713c:	d146      	bne.n	d71cc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d713e:	4602      	mov	r2, r0
   d7140:	2101      	movs	r1, #1
   d7142:	6868      	ldr	r0, [r5, #4]
   d7144:	f7ff fa24 	bl	d6590 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7148:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d714a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d714c:	4622      	mov	r2, r4
   d714e:	6868      	ldr	r0, [r5, #4]
   d7150:	f7ff fa1e 	bl	d6590 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7154:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7156:	4681      	mov	r9, r0
        bool ok = false;
   d7158:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d715a:	2e00      	cmp	r6, #0
   d715c:	d036      	beq.n	d71cc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d715e:	2900      	cmp	r1, #0
   d7160:	d134      	bne.n	d71cc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7162:	6873      	ldr	r3, [r6, #4]
   d7164:	2b02      	cmp	r3, #2
   d7166:	d003      	beq.n	d7170 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7168:	2b0a      	cmp	r3, #10
   d716a:	d00b      	beq.n	d7184 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d716c:	69f6      	ldr	r6, [r6, #28]
   d716e:	e7f4      	b.n	d715a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7170:	f1b8 0f00 	cmp.w	r8, #0
   d7174:	d004      	beq.n	d7180 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7176:	6971      	ldr	r1, [r6, #20]
   d7178:	4638      	mov	r0, r7
   d717a:	3104      	adds	r1, #4
   d717c:	f7ff ff7d 	bl	d707a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d7180:	4641      	mov	r1, r8
   d7182:	e7f3      	b.n	d716c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7184:	f1b9 0f00 	cmp.w	r9, #0
   d7188:	d101      	bne.n	d718e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d718a:	4649      	mov	r1, r9
   d718c:	e7ee      	b.n	d716c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d718e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7190:	2210      	movs	r2, #16
   d7192:	a801      	add	r0, sp, #4
   d7194:	f001 fe22 	bl	d8ddc <memset>
                    a.v = 6;
   d7198:	2306      	movs	r3, #6
   d719a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d719e:	ad01      	add	r5, sp, #4
   d71a0:	f104 0308 	add.w	r3, r4, #8
   d71a4:	3418      	adds	r4, #24
   d71a6:	6818      	ldr	r0, [r3, #0]
   d71a8:	6859      	ldr	r1, [r3, #4]
   d71aa:	462a      	mov	r2, r5
   d71ac:	c203      	stmia	r2!, {r0, r1}
   d71ae:	3308      	adds	r3, #8
   d71b0:	42a3      	cmp	r3, r4
   d71b2:	4615      	mov	r5, r2
   d71b4:	d1f7      	bne.n	d71a6 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d71b6:	a901      	add	r1, sp, #4
   d71b8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d71ba:	ad07      	add	r5, sp, #28
   d71bc:	f7ff ff3e 	bl	d703c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d71c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d71c2:	1d3c      	adds	r4, r7, #4
   d71c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d71c6:	682b      	ldr	r3, [r5, #0]
   d71c8:	7023      	strb	r3, [r4, #0]
   d71ca:	e7de      	b.n	d718a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d71cc:	9800      	ldr	r0, [sp, #0]
   d71ce:	f7ff f869 	bl	d62a4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d71d2:	4638      	mov	r0, r7
   d71d4:	b015      	add	sp, #84	; 0x54
   d71d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d71dc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d71dc:	4b02      	ldr	r3, [pc, #8]	; (d71e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d71de:	4a03      	ldr	r2, [pc, #12]	; (d71ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d71e0:	601a      	str	r2, [r3, #0]
   d71e2:	2200      	movs	r2, #0
   d71e4:	605a      	str	r2, [r3, #4]

} // spark
   d71e6:	4770      	bx	lr
   d71e8:	2003e620 	.word	0x2003e620
   d71ec:	000d95d8 	.word	0x000d95d8

000d71f0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d71f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d71f2:	4606      	mov	r6, r0
   d71f4:	460d      	mov	r5, r1
  size_t n = 0;
   d71f6:	188f      	adds	r7, r1, r2
   d71f8:	2400      	movs	r4, #0
  while (size--) {
   d71fa:	42bd      	cmp	r5, r7
   d71fc:	d00c      	beq.n	d7218 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d71fe:	6833      	ldr	r3, [r6, #0]
   d7200:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7204:	689b      	ldr	r3, [r3, #8]
   d7206:	4630      	mov	r0, r6
   d7208:	4798      	blx	r3
     if (chunk>=0)
   d720a:	1e03      	subs	r3, r0, #0
   d720c:	db01      	blt.n	d7212 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d720e:	441c      	add	r4, r3
  while (size--) {
   d7210:	e7f3      	b.n	d71fa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7212:	2c00      	cmp	r4, #0
   d7214:	bf08      	it	eq
   d7216:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7218:	4620      	mov	r0, r4
   d721a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d721c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d721c:	b513      	push	{r0, r1, r4, lr}
   d721e:	4604      	mov	r4, r0
    }
   d7220:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d7222:	b159      	cbz	r1, d723c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7224:	9101      	str	r1, [sp, #4]
   d7226:	f001 fe34 	bl	d8e92 <strlen>
   d722a:	6823      	ldr	r3, [r4, #0]
   d722c:	9901      	ldr	r1, [sp, #4]
   d722e:	68db      	ldr	r3, [r3, #12]
   d7230:	4602      	mov	r2, r0
   d7232:	4620      	mov	r0, r4
    }
   d7234:	b002      	add	sp, #8
   d7236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d723a:	4718      	bx	r3
    }
   d723c:	b002      	add	sp, #8
   d723e:	bd10      	pop	{r4, pc}

000d7240 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7240:	6803      	ldr	r3, [r0, #0]
   d7242:	689b      	ldr	r3, [r3, #8]
   d7244:	4718      	bx	r3

000d7246 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7246:	b530      	push	{r4, r5, lr}
   d7248:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d724a:	2300      	movs	r3, #0
   d724c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7250:	2a01      	cmp	r2, #1
   d7252:	bf98      	it	ls
   d7254:	220a      	movls	r2, #10
   d7256:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7258:	460d      	mov	r5, r1
   d725a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d725e:	fb01 5312 	mls	r3, r1, r2, r5
   d7262:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7266:	2b09      	cmp	r3, #9
   d7268:	bf94      	ite	ls
   d726a:	3330      	addls	r3, #48	; 0x30
   d726c:	3337      	addhi	r3, #55	; 0x37
   d726e:	b2db      	uxtb	r3, r3
  } while(n);
   d7270:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7272:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7276:	d9ef      	bls.n	d7258 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7278:	4621      	mov	r1, r4
   d727a:	f7ff ffcf 	bl	d721c <_ZN5Print5writeEPKc>
}
   d727e:	b00b      	add	sp, #44	; 0x2c
   d7280:	bd30      	pop	{r4, r5, pc}

000d7282 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7282:	b510      	push	{r4, lr}
   d7284:	4604      	mov	r4, r0
   d7286:	f7fc ffc1 	bl	d420c <_ZNSt14_Function_baseD1Ev>
   d728a:	4620      	mov	r0, r4
   d728c:	bd10      	pop	{r4, pc}
	...

000d7290 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7290:	4803      	ldr	r0, [pc, #12]	; (d72a0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7292:	4a04      	ldr	r2, [pc, #16]	; (d72a4 <_GLOBAL__sub_I_RGB+0x14>)
   d7294:	4904      	ldr	r1, [pc, #16]	; (d72a8 <_GLOBAL__sub_I_RGB+0x18>)
   d7296:	2300      	movs	r3, #0
   d7298:	6083      	str	r3, [r0, #8]
   d729a:	f000 bd85 	b.w	d7da8 <__aeabi_atexit>
   d729e:	bf00      	nop
   d72a0:	2003e628 	.word	0x2003e628
   d72a4:	2003e3f8 	.word	0x2003e3f8
   d72a8:	000d7283 	.word	0x000d7283

000d72ac <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d72ac:	b510      	push	{r4, lr}
   d72ae:	4604      	mov	r4, r0
   d72b0:	4608      	mov	r0, r1
{
    _spi = spi;
   d72b2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d72b4:	f7ff f806 	bl	d62c4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d72b8:	2300      	movs	r3, #0
   d72ba:	6063      	str	r3, [r4, #4]
}
   d72bc:	4620      	mov	r0, r4
   d72be:	bd10      	pop	{r4, pc}

000d72c0 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d72c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d72c4:	ec57 6b10 	vmov	r6, r7, d0
   d72c8:	4680      	mov	r8, r0
   d72ca:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d72cc:	ee10 0a10 	vmov	r0, s0
   d72d0:	2200      	movs	r2, #0
   d72d2:	2300      	movs	r3, #0
   d72d4:	4639      	mov	r1, r7
   d72d6:	f001 fac7 	bl	d8868 <__aeabi_dcmplt>
   d72da:	b128      	cbz	r0, d72e8 <_Z4dtoadhPc+0x28>
        val = -val;
   d72dc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d72e0:	461f      	mov	r7, r3
        *sout++ = '-';
   d72e2:	232d      	movs	r3, #45	; 0x2d
   d72e4:	f804 3b01 	strb.w	r3, [r4], #1
   d72e8:	2300      	movs	r3, #0
    }
    long scale = 1;
   d72ea:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d72ee:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d72f0:	b2d9      	uxtb	r1, r3
   d72f2:	4588      	cmp	r8, r1
   d72f4:	d903      	bls.n	d72fe <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d72f6:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d72fa:	3301      	adds	r3, #1
   d72fc:	e7f8      	b.n	d72f0 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d72fe:	4648      	mov	r0, r9
   d7300:	f000 ffd6 	bl	d82b0 <__aeabi_i2d>
   d7304:	4632      	mov	r2, r6
   d7306:	463b      	mov	r3, r7
   d7308:	f001 f83c 	bl	d8384 <__aeabi_dmul>
   d730c:	4606      	mov	r6, r0
   d730e:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d7310:	f001 fb70 	bl	d89f4 <__aeabi_d2ulz>
   d7314:	4605      	mov	r5, r0
   d7316:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d7318:	f000 fffe 	bl	d8318 <__aeabi_ul2d>
   d731c:	4602      	mov	r2, r0
   d731e:	460b      	mov	r3, r1
   d7320:	4630      	mov	r0, r6
   d7322:	4639      	mov	r1, r7
   d7324:	f000 fe76 	bl	d8014 <__aeabi_dsub>
   d7328:	4b13      	ldr	r3, [pc, #76]	; (d7378 <_Z4dtoadhPc+0xb8>)
   d732a:	2200      	movs	r2, #0
   d732c:	f001 fab0 	bl	d8890 <__aeabi_dcmpge>
   d7330:	b110      	cbz	r0, d7338 <_Z4dtoadhPc+0x78>
        fixed++;
   d7332:	3501      	adds	r5, #1
   d7334:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d7338:	464a      	mov	r2, r9
   d733a:	4628      	mov	r0, r5
   d733c:	17d3      	asrs	r3, r2, #31
   d733e:	4651      	mov	r1, sl
   d7340:	f001 fb40 	bl	d89c4 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d7344:	2301      	movs	r3, #1
   d7346:	4615      	mov	r5, r2
   d7348:	4621      	mov	r1, r4
   d734a:	220a      	movs	r2, #10
   d734c:	f000 fbaf 	bl	d7aae <ultoa>
    if (prec) {
   d7350:	f1b8 0f00 	cmp.w	r8, #0
   d7354:	d00d      	beq.n	d7372 <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d7356:	4620      	mov	r0, r4
   d7358:	f001 fd9b 	bl	d8e92 <strlen>
        *sout++ = '.';
   d735c:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d735e:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d7360:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d7362:	220a      	movs	r2, #10
   d7364:	4643      	mov	r3, r8
   d7366:	4628      	mov	r0, r5
   d7368:	3101      	adds	r1, #1
    }
}
   d736a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d736e:	f000 bb9e 	b.w	d7aae <ultoa>
}
   d7372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7376:	bf00      	nop
   d7378:	3fe00000 	.word	0x3fe00000

000d737c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d737c:	b510      	push	{r4, lr}
   d737e:	4604      	mov	r4, r0
{
	free(buffer);
   d7380:	6800      	ldr	r0, [r0, #0]
   d7382:	f7ff f945 	bl	d6610 <free>
}
   d7386:	4620      	mov	r0, r4
   d7388:	bd10      	pop	{r4, pc}

000d738a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d738a:	b510      	push	{r4, lr}
   d738c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d738e:	6800      	ldr	r0, [r0, #0]
   d7390:	b108      	cbz	r0, d7396 <_ZN6String10invalidateEv+0xc>
   d7392:	f7ff f93d 	bl	d6610 <free>
	buffer = NULL;
   d7396:	2300      	movs	r3, #0
	capacity = len = 0;
   d7398:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d739c:	6023      	str	r3, [r4, #0]
}
   d739e:	bd10      	pop	{r4, pc}

000d73a0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d73a0:	b538      	push	{r3, r4, r5, lr}
   d73a2:	4604      	mov	r4, r0
   d73a4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d73a6:	6800      	ldr	r0, [r0, #0]
   d73a8:	3101      	adds	r1, #1
   d73aa:	f7ff f939 	bl	d6620 <realloc>
	if (newbuffer) {
   d73ae:	b110      	cbz	r0, d73b6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d73b0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d73b4:	2001      	movs	r0, #1
	}
	return 0;
}
   d73b6:	bd38      	pop	{r3, r4, r5, pc}

000d73b8 <_ZN6String7reserveEj>:
{
   d73b8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d73ba:	6803      	ldr	r3, [r0, #0]
{
   d73bc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d73be:	b123      	cbz	r3, d73ca <_ZN6String7reserveEj+0x12>
   d73c0:	6843      	ldr	r3, [r0, #4]
   d73c2:	428b      	cmp	r3, r1
   d73c4:	d301      	bcc.n	d73ca <_ZN6String7reserveEj+0x12>
   d73c6:	2001      	movs	r0, #1
}
   d73c8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d73ca:	4620      	mov	r0, r4
   d73cc:	f7ff ffe8 	bl	d73a0 <_ZN6String12changeBufferEj>
   d73d0:	2800      	cmp	r0, #0
   d73d2:	d0f9      	beq.n	d73c8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d73d4:	68a3      	ldr	r3, [r4, #8]
   d73d6:	2b00      	cmp	r3, #0
   d73d8:	d1f5      	bne.n	d73c6 <_ZN6String7reserveEj+0xe>
   d73da:	6822      	ldr	r2, [r4, #0]
   d73dc:	7013      	strb	r3, [r2, #0]
   d73de:	e7f2      	b.n	d73c6 <_ZN6String7reserveEj+0xe>

000d73e0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d73e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d73e2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d73e4:	4611      	mov	r1, r2
   d73e6:	9201      	str	r2, [sp, #4]
{
   d73e8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d73ea:	f7ff ffe5 	bl	d73b8 <_ZN6String7reserveEj>
   d73ee:	9a01      	ldr	r2, [sp, #4]
   d73f0:	b928      	cbnz	r0, d73fe <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d73f2:	4620      	mov	r0, r4
   d73f4:	f7ff ffc9 	bl	d738a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d73f8:	4620      	mov	r0, r4
   d73fa:	b003      	add	sp, #12
   d73fc:	bd30      	pop	{r4, r5, pc}
	len = length;
   d73fe:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d7400:	4629      	mov	r1, r5
   d7402:	6820      	ldr	r0, [r4, #0]
   d7404:	f001 fcc2 	bl	d8d8c <memcpy>
	buffer[len] = 0;
   d7408:	6822      	ldr	r2, [r4, #0]
   d740a:	68a3      	ldr	r3, [r4, #8]
   d740c:	2100      	movs	r1, #0
   d740e:	54d1      	strb	r1, [r2, r3]
	return *this;
   d7410:	e7f2      	b.n	d73f8 <_ZN6String4copyEPKcj+0x18>

000d7412 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d7412:	2300      	movs	r3, #0
String::String(const char *cstr)
   d7414:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d7416:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d741a:	4604      	mov	r4, r0
	len = 0;
   d741c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d741e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d7420:	b141      	cbz	r1, d7434 <_ZN6StringC1EPKc+0x22>
   d7422:	4608      	mov	r0, r1
   d7424:	9101      	str	r1, [sp, #4]
   d7426:	f001 fd34 	bl	d8e92 <strlen>
   d742a:	9901      	ldr	r1, [sp, #4]
   d742c:	4602      	mov	r2, r0
   d742e:	4620      	mov	r0, r4
   d7430:	f7ff ffd6 	bl	d73e0 <_ZN6String4copyEPKcj>
}
   d7434:	4620      	mov	r0, r4
   d7436:	b002      	add	sp, #8
   d7438:	bd10      	pop	{r4, pc}

000d743a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d743a:	4288      	cmp	r0, r1
{
   d743c:	b510      	push	{r4, lr}
   d743e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7440:	d005      	beq.n	d744e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7442:	680b      	ldr	r3, [r1, #0]
   d7444:	b12b      	cbz	r3, d7452 <_ZN6StringaSERKS_+0x18>
   d7446:	688a      	ldr	r2, [r1, #8]
   d7448:	4619      	mov	r1, r3
   d744a:	f7ff ffc9 	bl	d73e0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d744e:	4620      	mov	r0, r4
   d7450:	bd10      	pop	{r4, pc}
	else invalidate();
   d7452:	f7ff ff9a 	bl	d738a <_ZN6String10invalidateEv>
   d7456:	e7fa      	b.n	d744e <_ZN6StringaSERKS_+0x14>

000d7458 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d7458:	b510      	push	{r4, lr}
	buffer = NULL;
   d745a:	2300      	movs	r3, #0
String::String(const String &value)
   d745c:	4604      	mov	r4, r0
	capacity = 0;
   d745e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d7462:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7464:	7303      	strb	r3, [r0, #12]
	*this = value;
   d7466:	f7ff ffe8 	bl	d743a <_ZN6StringaSERKS_>
}
   d746a:	4620      	mov	r0, r4
   d746c:	bd10      	pop	{r4, pc}

000d746e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d746e:	b513      	push	{r0, r1, r4, lr}
   d7470:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d7472:	b159      	cbz	r1, d748c <_ZN6StringaSEPKc+0x1e>
   d7474:	4608      	mov	r0, r1
   d7476:	9101      	str	r1, [sp, #4]
   d7478:	f001 fd0b 	bl	d8e92 <strlen>
   d747c:	9901      	ldr	r1, [sp, #4]
   d747e:	4602      	mov	r2, r0
   d7480:	4620      	mov	r0, r4
   d7482:	f7ff ffad 	bl	d73e0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d7486:	4620      	mov	r0, r4
   d7488:	b002      	add	sp, #8
   d748a:	bd10      	pop	{r4, pc}
	else invalidate();
   d748c:	f7ff ff7d 	bl	d738a <_ZN6String10invalidateEv>
   d7490:	e7f9      	b.n	d7486 <_ZN6StringaSEPKc+0x18>

000d7492 <_ZN6StringC1Edi>:
String::String(double value, int decimalPlaces)
   d7492:	b510      	push	{r4, lr}
   d7494:	4604      	mov	r4, r0
   d7496:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d7498:	2300      	movs	r3, #0
String::String(double value, int decimalPlaces)
   d749a:	4608      	mov	r0, r1
	capacity = 0;
   d749c:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d74a0:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d74a2:	7323      	strb	r3, [r4, #12]
	dtoa(value, decimalPlaces, buf);
   d74a4:	a901      	add	r1, sp, #4
   d74a6:	b2c0      	uxtb	r0, r0
   d74a8:	f7ff ff0a 	bl	d72c0 <_Z4dtoadhPc>
        *this = buf;
   d74ac:	a901      	add	r1, sp, #4
   d74ae:	4620      	mov	r0, r4
   d74b0:	f7ff ffdd 	bl	d746e <_ZN6StringaSEPKc>
}
   d74b4:	4620      	mov	r0, r4
   d74b6:	b00a      	add	sp, #40	; 0x28
   d74b8:	bd10      	pop	{r4, pc}

000d74ba <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d74ba:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d74bc:	6882      	ldr	r2, [r0, #8]
   d74be:	b93a      	cbnz	r2, d74d0 <_ZNK6String6equalsEPKc+0x16>
   d74c0:	b121      	cbz	r1, d74cc <_ZNK6String6equalsEPKc+0x12>
   d74c2:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d74c4:	fab0 f080 	clz	r0, r0
   d74c8:	0940      	lsrs	r0, r0, #5
   d74ca:	e000      	b.n	d74ce <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d74cc:	2001      	movs	r0, #1
}
   d74ce:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d74d0:	6800      	ldr	r0, [r0, #0]
   d74d2:	b909      	cbnz	r1, d74d8 <_ZNK6String6equalsEPKc+0x1e>
   d74d4:	7800      	ldrb	r0, [r0, #0]
   d74d6:	e7f5      	b.n	d74c4 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d74d8:	f001 fcac 	bl	d8e34 <strcmp>
   d74dc:	e7f2      	b.n	d74c4 <_ZNK6String6equalsEPKc+0xa>

000d74de <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d74de:	b558      	push	{r3, r4, r6, lr}
   d74e0:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d74e2:	b12a      	cbz	r2, d74f0 <_ZNK6String8getBytesEPhjj+0x12>
   d74e4:	b121      	cbz	r1, d74f0 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d74e6:	6884      	ldr	r4, [r0, #8]
   d74e8:	429c      	cmp	r4, r3
   d74ea:	d802      	bhi.n	d74f2 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d74ec:	2300      	movs	r3, #0
   d74ee:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d74f0:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d74f2:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d74f4:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d74f6:	6801      	ldr	r1, [r0, #0]
   d74f8:	4294      	cmp	r4, r2
   d74fa:	bf28      	it	cs
   d74fc:	4614      	movcs	r4, r2
   d74fe:	4419      	add	r1, r3
   d7500:	4622      	mov	r2, r4
   d7502:	4630      	mov	r0, r6
   d7504:	f001 fccd 	bl	d8ea2 <strncpy>
	buf[n] = 0;
   d7508:	2300      	movs	r3, #0
   d750a:	5533      	strb	r3, [r6, r4]
   d750c:	e7f0      	b.n	d74f0 <_ZNK6String8getBytesEPhjj+0x12>

000d750e <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d750e:	b507      	push	{r0, r1, r2, lr}
   d7510:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d7512:	2100      	movs	r1, #0
{
   d7514:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d7516:	9100      	str	r1, [sp, #0]
   d7518:	2001      	movs	r0, #1
   d751a:	218c      	movs	r1, #140	; 0x8c
   d751c:	f7fe ffb6 	bl	d648c <system_reset>
}
   d7520:	b003      	add	sp, #12
   d7522:	f85d fb04 	ldr.w	pc, [sp], #4

000d7526 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d7526:	4601      	mov	r1, r0
    reset(0, flags);
   d7528:	2000      	movs	r0, #0
   d752a:	f7ff bff0 	b.w	d750e <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d752e <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d752e:	2000      	movs	r0, #0
   d7530:	f7ff bff9 	b.w	d7526 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>

000d7534 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7534:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d7536:	4b09      	ldr	r3, [pc, #36]	; (d755c <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7538:	4c09      	ldr	r4, [pc, #36]	; (d7560 <_GLOBAL__sub_I_System+0x2c>)
   d753a:	2202      	movs	r2, #2
   d753c:	2000      	movs	r0, #0
   d753e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d7540:	4b08      	ldr	r3, [pc, #32]	; (d7564 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d7542:	6020      	str	r0, [r4, #0]
   d7544:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d7546:	71a0      	strb	r0, [r4, #6]
   d7548:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d754a:	f7fe ff53 	bl	d63f4 <set_system_mode>
SystemClass System;
   d754e:	4620      	mov	r0, r4
   d7550:	4a05      	ldr	r2, [pc, #20]	; (d7568 <_GLOBAL__sub_I_System+0x34>)
   d7552:	4906      	ldr	r1, [pc, #24]	; (d756c <_GLOBAL__sub_I_System+0x38>)
   d7554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d7558:	f000 bc26 	b.w	d7da8 <__aeabi_atexit>
   d755c:	2003e644 	.word	0x2003e644
   d7560:	2003e638 	.word	0x2003e638
   d7564:	ffff0000 	.word	0xffff0000
   d7568:	2003e3f8 	.word	0x2003e3f8
   d756c:	000d41a3 	.word	0x000d41a3

000d7570 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d7574:	4a15      	ldr	r2, [pc, #84]	; (d75cc <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7576:	f8df 8060 	ldr.w	r8, [pc, #96]	; d75d8 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d757a:	e9d2 3200 	ldrd	r3, r2, [r2]
   d757e:	18c0      	adds	r0, r0, r3
   d7580:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d7584:	4a12      	ldr	r2, [pc, #72]	; (d75d0 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d7586:	e9d2 3200 	ldrd	r3, r2, [r2]
   d758a:	18c6      	adds	r6, r0, r3
   d758c:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d7590:	e9d8 2300 	ldrd	r2, r3, [r8]
   d7594:	42bb      	cmp	r3, r7
   d7596:	bf08      	it	eq
   d7598:	42b2      	cmpeq	r2, r6
{
   d759a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d759c:	d013      	beq.n	d75c6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d759e:	a903      	add	r1, sp, #12
   d75a0:	4668      	mov	r0, sp
   d75a2:	e9cd 6700 	strd	r6, r7, [sp]
   d75a6:	f7ff f87b 	bl	d66a0 <localtime_r>
	calendar_time.tm_year += 1900;
   d75aa:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d75ac:	4d09      	ldr	r5, [pc, #36]	; (d75d4 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d75ae:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d75b2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d75b4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d75b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d75b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d75ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d75bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d75be:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d75c2:	6823      	ldr	r3, [r4, #0]
   d75c4:	602b      	str	r3, [r5, #0]
    }
}
   d75c6:	b00c      	add	sp, #48	; 0x30
   d75c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d75cc:	2003e680 	.word	0x2003e680
   d75d0:	2003e678 	.word	0x2003e678
   d75d4:	2003e650 	.word	0x2003e650
   d75d8:	2003e688 	.word	0x2003e688

000d75dc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d75dc:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d75de:	2000      	movs	r0, #0
   d75e0:	f7fe ff9e 	bl	d6520 <spark_sync_time_pending>
   d75e4:	b128      	cbz	r0, d75f2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d75e6:	f7fe ff73 	bl	d64d0 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d75ea:	f080 0001 	eor.w	r0, r0, #1
   d75ee:	b2c0      	uxtb	r0, r0
    }
   d75f0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d75f2:	2001      	movs	r0, #1
   d75f4:	e7fc      	b.n	d75f0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d75f6 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d75f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d75f8:	4602      	mov	r2, r0
   d75fa:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d75fc:	4668      	mov	r0, sp
    struct timeval tv = {
   d75fe:	2100      	movs	r1, #0
    };
   d7600:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d7604:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d7608:	f7fe fd9c 	bl	d6144 <hal_rtc_set_time>
   d760c:	4602      	mov	r2, r0
   d760e:	b910      	cbnz	r0, d7616 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d7610:	4601      	mov	r1, r0
   d7612:	f7fe ff1f 	bl	d6454 <system_notify_time_changed>
    }
}
   d7616:	b005      	add	sp, #20
   d7618:	f85d fb04 	ldr.w	pc, [sp], #4

000d761c <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d761c:	b530      	push	{r4, r5, lr}
   d761e:	4604      	mov	r4, r0
    t += time_zone_cache;
   d7620:	4818      	ldr	r0, [pc, #96]	; (d7684 <_ZN9TimeClass7timeStrEx+0x68>)
   d7622:	e9d0 1000 	ldrd	r1, r0, [r0]
   d7626:	1852      	adds	r2, r2, r1
   d7628:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d762c:	4816      	ldr	r0, [pc, #88]	; (d7688 <_ZN9TimeClass7timeStrEx+0x6c>)
   d762e:	e9d0 1000 	ldrd	r1, r0, [r0]
   d7632:	1852      	adds	r2, r2, r1
{
   d7634:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d7636:	eb40 0303 	adc.w	r3, r0, r3
   d763a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d763e:	2224      	movs	r2, #36	; 0x24
   d7640:	eb0d 0002 	add.w	r0, sp, r2
   d7644:	2100      	movs	r1, #0
   d7646:	f001 fbc9 	bl	d8ddc <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d764a:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d764c:	a909      	add	r1, sp, #36	; 0x24
   d764e:	4668      	mov	r0, sp
   d7650:	f7ff f826 	bl	d66a0 <localtime_r>
    char ascstr[26] = {};
   d7654:	2216      	movs	r2, #22
   d7656:	4629      	mov	r1, r5
   d7658:	a803      	add	r0, sp, #12
   d765a:	9502      	str	r5, [sp, #8]
   d765c:	f001 fbbe 	bl	d8ddc <memset>
    asctime_r(&calendar_time, ascstr);
   d7660:	a902      	add	r1, sp, #8
   d7662:	a809      	add	r0, sp, #36	; 0x24
   d7664:	f001 fb48 	bl	d8cf8 <asctime_r>
    int len = strlen(ascstr);
   d7668:	a802      	add	r0, sp, #8
   d766a:	f001 fc12 	bl	d8e92 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d766e:	ab12      	add	r3, sp, #72	; 0x48
   d7670:	4418      	add	r0, r3
    return String(ascstr);
   d7672:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d7674:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d7678:	4620      	mov	r0, r4
   d767a:	f7ff feca 	bl	d7412 <_ZN6StringC1EPKc>
}
   d767e:	4620      	mov	r0, r4
   d7680:	b013      	add	sp, #76	; 0x4c
   d7682:	bd30      	pop	{r4, r5, pc}
   d7684:	2003e680 	.word	0x2003e680
   d7688:	2003e678 	.word	0x2003e678

000d768c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d768c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7690:	b0a5      	sub	sp, #148	; 0x94
   d7692:	4607      	mov	r7, r0
   d7694:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d7696:	a814      	add	r0, sp, #80	; 0x50
{
   d7698:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d769a:	223f      	movs	r2, #63	; 0x3f
{
   d769c:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d769e:	f001 fc00 	bl	d8ea2 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d76a2:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d76a4:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d76a6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d76aa:	f001 fbf2 	bl	d8e92 <strlen>
   d76ae:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d76b0:	bb5d      	cbnz	r5, d770a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d76b2:	492a      	ldr	r1, [pc, #168]	; (d775c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d76b4:	a803      	add	r0, sp, #12
   d76b6:	f001 fbc7 	bl	d8e48 <strcpy>
   d76ba:	ae14      	add	r6, sp, #80	; 0x50
{
   d76bc:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d76be:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d76c2:	45ab      	cmp	fp, r5
   d76c4:	d936      	bls.n	d7734 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d76c6:	46b1      	mov	r9, r6
   d76c8:	f105 0a01 	add.w	sl, r5, #1
   d76cc:	f819 3b01 	ldrb.w	r3, [r9], #1
   d76d0:	2b25      	cmp	r3, #37	; 0x25
   d76d2:	d117      	bne.n	d7704 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d76d4:	7873      	ldrb	r3, [r6, #1]
   d76d6:	2b7a      	cmp	r3, #122	; 0x7a
   d76d8:	d114      	bne.n	d7704 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d76da:	a803      	add	r0, sp, #12
   d76dc:	f001 fbd9 	bl	d8e92 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d76e0:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d76e2:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d76e4:	1828      	adds	r0, r5, r0
   d76e6:	4418      	add	r0, r3
   d76e8:	ebab 0205 	sub.w	r2, fp, r5
   d76ec:	1cb1      	adds	r1, r6, #2
   d76ee:	f001 fb4d 	bl	d8d8c <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d76f2:	4622      	mov	r2, r4
   d76f4:	a903      	add	r1, sp, #12
   d76f6:	4630      	mov	r0, r6
   d76f8:	f001 fb48 	bl	d8d8c <memcpy>
            len = strlen(format_str);
   d76fc:	a814      	add	r0, sp, #80	; 0x50
   d76fe:	f001 fbc8 	bl	d8e92 <strlen>
   d7702:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d7704:	464e      	mov	r6, r9
   d7706:	4655      	mov	r5, sl
   d7708:	e7d9      	b.n	d76be <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d770a:	213c      	movs	r1, #60	; 0x3c
   d770c:	fb95 f3f1 	sdiv	r3, r5, r1
   d7710:	2b00      	cmp	r3, #0
   d7712:	bfb8      	it	lt
   d7714:	425b      	neglt	r3, r3
   d7716:	fbb3 f2f1 	udiv	r2, r3, r1
   d771a:	fb01 3312 	mls	r3, r1, r2, r3
   d771e:	9300      	str	r3, [sp, #0]
   d7720:	4a0f      	ldr	r2, [pc, #60]	; (d7760 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d7722:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d7726:	2110      	movs	r1, #16
   d7728:	a803      	add	r0, sp, #12
   d772a:	fb95 f3f3 	sdiv	r3, r5, r3
   d772e:	f7fe ff87 	bl	d6640 <snprintf>
   d7732:	e7c2      	b.n	d76ba <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d7734:	2100      	movs	r1, #0
   d7736:	222e      	movs	r2, #46	; 0x2e
   d7738:	a808      	add	r0, sp, #32
   d773a:	9107      	str	r1, [sp, #28]
   d773c:	f001 fb4e 	bl	d8ddc <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d7740:	4643      	mov	r3, r8
   d7742:	aa14      	add	r2, sp, #80	; 0x50
   d7744:	2132      	movs	r1, #50	; 0x32
   d7746:	a807      	add	r0, sp, #28
   d7748:	f7fe ffa2 	bl	d6690 <strftime>
    return String(buf);
   d774c:	a907      	add	r1, sp, #28
   d774e:	4638      	mov	r0, r7
   d7750:	f7ff fe5f 	bl	d7412 <_ZN6StringC1EPKc>
}
   d7754:	4638      	mov	r0, r7
   d7756:	b025      	add	sp, #148	; 0x94
   d7758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d775c:	000d9604 	.word	0x000d9604
   d7760:	000d9606 	.word	0x000d9606

000d7764 <_ZN9TimeClass6formatExPKc>:
{
   d7764:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7766:	b08d      	sub	sp, #52	; 0x34
   d7768:	e9cd 2300 	strd	r2, r3, [sp]
   d776c:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d776e:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d7770:	b915      	cbnz	r5, d7778 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d7772:	4b19      	ldr	r3, [pc, #100]	; (d77d8 <_ZN9TimeClass6formatExPKc+0x74>)
   d7774:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d7776:	b12d      	cbz	r5, d7784 <_ZN9TimeClass6formatExPKc+0x20>
   d7778:	4b18      	ldr	r3, [pc, #96]	; (d77dc <_ZN9TimeClass6formatExPKc+0x78>)
   d777a:	4628      	mov	r0, r5
   d777c:	6819      	ldr	r1, [r3, #0]
   d777e:	f001 fb59 	bl	d8e34 <strcmp>
   d7782:	b938      	cbnz	r0, d7794 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d7784:	e9dd 2300 	ldrd	r2, r3, [sp]
   d7788:	4620      	mov	r0, r4
   d778a:	f7ff ff47 	bl	d761c <_ZN9TimeClass7timeStrEx>
}
   d778e:	4620      	mov	r0, r4
   d7790:	b00d      	add	sp, #52	; 0x34
   d7792:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d7794:	4e12      	ldr	r6, [pc, #72]	; (d77e0 <_ZN9TimeClass6formatExPKc+0x7c>)
   d7796:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d7798:	4f12      	ldr	r7, [pc, #72]	; (d77e4 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d779a:	e9d6 3200 	ldrd	r3, r2, [r6]
   d779e:	185b      	adds	r3, r3, r1
   d77a0:	9901      	ldr	r1, [sp, #4]
   d77a2:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d77a6:	e9d7 0100 	ldrd	r0, r1, [r7]
   d77aa:	181b      	adds	r3, r3, r0
   d77ac:	eb41 0202 	adc.w	r2, r1, r2
   d77b0:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d77b4:	2100      	movs	r1, #0
   d77b6:	2224      	movs	r2, #36	; 0x24
   d77b8:	a803      	add	r0, sp, #12
   d77ba:	f001 fb0f 	bl	d8ddc <memset>
    localtime_r(&t, &calendar_time);
   d77be:	a903      	add	r1, sp, #12
   d77c0:	4668      	mov	r0, sp
   d77c2:	f7fe ff6d 	bl	d66a0 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d77c6:	6832      	ldr	r2, [r6, #0]
   d77c8:	683b      	ldr	r3, [r7, #0]
   d77ca:	a903      	add	r1, sp, #12
   d77cc:	4413      	add	r3, r2
   d77ce:	4620      	mov	r0, r4
   d77d0:	462a      	mov	r2, r5
   d77d2:	f7ff ff5b 	bl	d768c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d77d6:	e7da      	b.n	d778e <_ZN9TimeClass6formatExPKc+0x2a>
   d77d8:	2003e64c 	.word	0x2003e64c
   d77dc:	2003e388 	.word	0x2003e388
   d77e0:	2003e680 	.word	0x2003e680
   d77e4:	2003e678 	.word	0x2003e678

000d77e8 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d77e8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d77ea:	2000      	movs	r0, #0
   d77ec:	f7fe fc92 	bl	d6114 <hal_rtc_time_is_valid>
    if (rtcstate)
   d77f0:	4604      	mov	r4, r0
   d77f2:	b9a0      	cbnz	r0, d781e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d77f4:	f7fe fdf6 	bl	d63e4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d77f8:	2801      	cmp	r0, #1
   d77fa:	d110      	bne.n	d781e <_ZN9TimeClass7isValidEv+0x36>
   d77fc:	4620      	mov	r0, r4
   d77fe:	f7fe fe21 	bl	d6444 <system_thread_get_state>
   d7802:	b960      	cbnz	r0, d781e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d7804:	f7ff feea 	bl	d75dc <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7808:	b910      	cbnz	r0, d7810 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d780a:	f7fe fe59 	bl	d64c0 <spark_process>
        while (_while() && !_condition()) {
   d780e:	e7f9      	b.n	d7804 <_ZN9TimeClass7isValidEv+0x1c>
   d7810:	f7ff fee4 	bl	d75dc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d7814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d7818:	2000      	movs	r0, #0
   d781a:	f7fe bc7b 	b.w	d6114 <hal_rtc_time_is_valid>
}
   d781e:	4620      	mov	r0, r4
   d7820:	bd10      	pop	{r4, pc}

000d7822 <_ZN9TimeClass3nowEv>:
{
   d7822:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d7824:	f7ff ffe0 	bl	d77e8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d7828:	2210      	movs	r2, #16
   d782a:	2100      	movs	r1, #0
   d782c:	4668      	mov	r0, sp
   d782e:	f001 fad5 	bl	d8ddc <memset>
    hal_rtc_get_time(&tv, nullptr);
   d7832:	2100      	movs	r1, #0
   d7834:	4668      	mov	r0, sp
   d7836:	f7fe fc7d 	bl	d6134 <hal_rtc_get_time>
}
   d783a:	9800      	ldr	r0, [sp, #0]
   d783c:	b005      	add	sp, #20
   d783e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7844 <_ZN9TimeClass4hourEv>:
{
   d7844:	b508      	push	{r3, lr}
	return hour(now());
   d7846:	f7ff ffec 	bl	d7822 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d784a:	17c1      	asrs	r1, r0, #31
   d784c:	f7ff fe90 	bl	d7570 <_ZL22Refresh_UnixTime_Cachex>
}
   d7850:	4b01      	ldr	r3, [pc, #4]	; (d7858 <_ZN9TimeClass4hourEv+0x14>)
   d7852:	6898      	ldr	r0, [r3, #8]
   d7854:	bd08      	pop	{r3, pc}
   d7856:	bf00      	nop
   d7858:	2003e650 	.word	0x2003e650

000d785c <_ZN9TimeClass4yearEv>:
{
   d785c:	b508      	push	{r3, lr}
	return year(now());
   d785e:	f7ff ffe0 	bl	d7822 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d7862:	17c1      	asrs	r1, r0, #31
   d7864:	f7ff fe84 	bl	d7570 <_ZL22Refresh_UnixTime_Cachex>
}
   d7868:	4b01      	ldr	r3, [pc, #4]	; (d7870 <_ZN9TimeClass4yearEv+0x14>)
   d786a:	6958      	ldr	r0, [r3, #20]
   d786c:	bd08      	pop	{r3, pc}
   d786e:	bf00      	nop
   d7870:	2003e650 	.word	0x2003e650

000d7874 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7874:	4b02      	ldr	r3, [pc, #8]	; (d7880 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7876:	681a      	ldr	r2, [r3, #0]
   d7878:	4b02      	ldr	r3, [pc, #8]	; (d7884 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d787a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d787c:	4770      	bx	lr
   d787e:	bf00      	nop
   d7880:	2003e388 	.word	0x2003e388
   d7884:	2003e64c 	.word	0x2003e64c

000d7888 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7888:	4770      	bx	lr

000d788a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d788a:	7441      	strb	r1, [r0, #17]
}
   d788c:	4770      	bx	lr

000d788e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d788e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7890:	7c00      	ldrb	r0, [r0, #16]
   d7892:	f7fe fd5f 	bl	d6354 <hal_usart_available_data_for_write>
}
   d7896:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d789a:	bd08      	pop	{r3, pc}

000d789c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d789c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d789e:	7c00      	ldrb	r0, [r0, #16]
   d78a0:	f7fe fd30 	bl	d6304 <hal_usart_available>
}
   d78a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d78a8:	bd08      	pop	{r3, pc}

000d78aa <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d78aa:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d78ac:	7c00      	ldrb	r0, [r0, #16]
   d78ae:	f7fe fd39 	bl	d6324 <hal_usart_peek>
}
   d78b2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d78b6:	bd08      	pop	{r3, pc}

000d78b8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d78b8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d78ba:	7c00      	ldrb	r0, [r0, #16]
   d78bc:	f7fe fd2a 	bl	d6314 <hal_usart_read>
}
   d78c0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d78c4:	bd08      	pop	{r3, pc}

000d78c6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d78c6:	7c00      	ldrb	r0, [r0, #16]
   d78c8:	f7fe bd34 	b.w	d6334 <hal_usart_flush>

000d78cc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d78cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d78ce:	7c45      	ldrb	r5, [r0, #17]
{
   d78d0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d78d2:	b12d      	cbz	r5, d78e0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d78d4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d78d6:	b003      	add	sp, #12
   d78d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d78dc:	f7fe bd0a 	b.w	d62f4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d78e0:	7c00      	ldrb	r0, [r0, #16]
   d78e2:	9101      	str	r1, [sp, #4]
   d78e4:	f7fe fd36 	bl	d6354 <hal_usart_available_data_for_write>
   d78e8:	2800      	cmp	r0, #0
   d78ea:	9901      	ldr	r1, [sp, #4]
   d78ec:	dcf2      	bgt.n	d78d4 <_ZN11USARTSerial5writeEh+0x8>
}
   d78ee:	4628      	mov	r0, r5
   d78f0:	b003      	add	sp, #12
   d78f2:	bd30      	pop	{r4, r5, pc}

000d78f4 <_ZN11USARTSerialD0Ev>:
   d78f4:	b510      	push	{r4, lr}
   d78f6:	2114      	movs	r1, #20
   d78f8:	4604      	mov	r4, r0
   d78fa:	f000 fa5a 	bl	d7db2 <_ZdlPvj>
   d78fe:	4620      	mov	r0, r4
   d7900:	bd10      	pop	{r4, pc}
	...

000d7904 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7904:	b510      	push	{r4, lr}
   d7906:	f04f 0c00 	mov.w	ip, #0
   d790a:	4604      	mov	r4, r0
   d790c:	4608      	mov	r0, r1
   d790e:	4611      	mov	r1, r2
   d7910:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7914:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7918:	4a04      	ldr	r2, [pc, #16]	; (d792c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d791a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d791c:	2201      	movs	r2, #1
  _serial = serial;
   d791e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7920:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7922:	461a      	mov	r2, r3
   d7924:	f7fe fcde 	bl	d62e4 <hal_usart_init>
}
   d7928:	4620      	mov	r0, r4
   d792a:	bd10      	pop	{r4, pc}
   d792c:	000d9638 	.word	0x000d9638

000d7930 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7930:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7932:	4c0e      	ldr	r4, [pc, #56]	; (d796c <_Z22__fetch_global_Serial1v+0x3c>)
   d7934:	7821      	ldrb	r1, [r4, #0]
   d7936:	f3bf 8f5b 	dmb	ish
   d793a:	f011 0101 	ands.w	r1, r1, #1
   d793e:	d112      	bne.n	d7966 <_Z22__fetch_global_Serial1v+0x36>
   d7940:	4620      	mov	r0, r4
   d7942:	9101      	str	r1, [sp, #4]
   d7944:	f7fc fbb8 	bl	d40b8 <__cxa_guard_acquire>
   d7948:	9901      	ldr	r1, [sp, #4]
   d794a:	b160      	cbz	r0, d7966 <_Z22__fetch_global_Serial1v+0x36>
   d794c:	4a08      	ldr	r2, [pc, #32]	; (d7970 <_Z22__fetch_global_Serial1v+0x40>)
   d794e:	4b09      	ldr	r3, [pc, #36]	; (d7974 <_Z22__fetch_global_Serial1v+0x44>)
   d7950:	4809      	ldr	r0, [pc, #36]	; (d7978 <_Z22__fetch_global_Serial1v+0x48>)
   d7952:	f7ff ffd7 	bl	d7904 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7956:	4620      	mov	r0, r4
   d7958:	f7fc fbb3 	bl	d40c2 <__cxa_guard_release>
   d795c:	4a07      	ldr	r2, [pc, #28]	; (d797c <_Z22__fetch_global_Serial1v+0x4c>)
   d795e:	4908      	ldr	r1, [pc, #32]	; (d7980 <_Z22__fetch_global_Serial1v+0x50>)
   d7960:	4805      	ldr	r0, [pc, #20]	; (d7978 <_Z22__fetch_global_Serial1v+0x48>)
   d7962:	f000 fa21 	bl	d7da8 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7966:	4804      	ldr	r0, [pc, #16]	; (d7978 <_Z22__fetch_global_Serial1v+0x48>)
   d7968:	b002      	add	sp, #8
   d796a:	bd10      	pop	{r4, pc}
   d796c:	2003e690 	.word	0x2003e690
   d7970:	2003e694 	.word	0x2003e694
   d7974:	2003e718 	.word	0x2003e718
   d7978:	2003e79c 	.word	0x2003e79c
   d797c:	2003e3f8 	.word	0x2003e3f8
   d7980:	000d7889 	.word	0x000d7889

000d7984 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7984:	7441      	strb	r1, [r0, #17]
}
   d7986:	4770      	bx	lr

000d7988 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7988:	4770      	bx	lr

000d798a <_ZN9USBSerial4readEv>:
{
   d798a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d798c:	2100      	movs	r1, #0
   d798e:	7c00      	ldrb	r0, [r0, #16]
   d7990:	f7fe fd00 	bl	d6394 <HAL_USB_USART_Receive_Data>
}
   d7994:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7998:	bd08      	pop	{r3, pc}

000d799a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d799a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d799c:	2101      	movs	r1, #1
   d799e:	7c00      	ldrb	r0, [r0, #16]
   d79a0:	f7fe fcf8 	bl	d6394 <HAL_USB_USART_Receive_Data>
}
   d79a4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d79a8:	bd08      	pop	{r3, pc}

000d79aa <_ZN9USBSerial17availableForWriteEv>:
{
   d79aa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d79ac:	7c00      	ldrb	r0, [r0, #16]
   d79ae:	f7fe fce9 	bl	d6384 <HAL_USB_USART_Available_Data_For_Write>
}
   d79b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d79b6:	bd08      	pop	{r3, pc}

000d79b8 <_ZN9USBSerial9availableEv>:
{
   d79b8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d79ba:	7c00      	ldrb	r0, [r0, #16]
   d79bc:	f7fe fcda 	bl	d6374 <HAL_USB_USART_Available_Data>
}
   d79c0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d79c4:	bd08      	pop	{r3, pc}

000d79c6 <_ZN9USBSerial5writeEh>:
{
   d79c6:	b513      	push	{r0, r1, r4, lr}
   d79c8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d79ca:	7c00      	ldrb	r0, [r0, #16]
{
   d79cc:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d79ce:	f7fe fcd9 	bl	d6384 <HAL_USB_USART_Available_Data_For_Write>
   d79d2:	2800      	cmp	r0, #0
   d79d4:	9901      	ldr	r1, [sp, #4]
   d79d6:	dc01      	bgt.n	d79dc <_ZN9USBSerial5writeEh+0x16>
   d79d8:	7c60      	ldrb	r0, [r4, #17]
   d79da:	b120      	cbz	r0, d79e6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d79dc:	7c20      	ldrb	r0, [r4, #16]
   d79de:	f7fe fce1 	bl	d63a4 <HAL_USB_USART_Send_Data>
   d79e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d79e6:	b002      	add	sp, #8
   d79e8:	bd10      	pop	{r4, pc}

000d79ea <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d79ea:	7c00      	ldrb	r0, [r0, #16]
   d79ec:	f7fe bce2 	b.w	d63b4 <HAL_USB_USART_Flush_Data>

000d79f0 <_ZN9USBSerialD0Ev>:
   d79f0:	b510      	push	{r4, lr}
   d79f2:	2114      	movs	r1, #20
   d79f4:	4604      	mov	r4, r0
   d79f6:	f000 f9dc 	bl	d7db2 <_ZdlPvj>
   d79fa:	4620      	mov	r0, r4
   d79fc:	bd10      	pop	{r4, pc}
	...

000d7a00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7a00:	b510      	push	{r4, lr}
   d7a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7a06:	4604      	mov	r4, r0
   d7a08:	4608      	mov	r0, r1
   d7a0a:	2100      	movs	r1, #0
   d7a0c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7a10:	4b04      	ldr	r3, [pc, #16]	; (d7a24 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7a12:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7a14:	2301      	movs	r3, #1
  _serial = serial;
   d7a16:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7a18:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d7a1a:	4611      	mov	r1, r2
   d7a1c:	f7fe fca2 	bl	d6364 <HAL_USB_USART_Init>
}
   d7a20:	4620      	mov	r0, r4
   d7a22:	bd10      	pop	{r4, pc}
   d7a24:	000d9668 	.word	0x000d9668

000d7a28 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7a28:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7a2a:	2214      	movs	r2, #20
{
   d7a2c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7a2e:	2100      	movs	r1, #0
   d7a30:	f001 f9d4 	bl	d8ddc <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7a34:	4620      	mov	r0, r4
   d7a36:	bd10      	pop	{r4, pc}

000d7a38 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7a38:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7a3a:	4c10      	ldr	r4, [pc, #64]	; (d7a7c <_Z16_fetch_usbserialv+0x44>)
{
   d7a3c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7a3e:	a803      	add	r0, sp, #12
   d7a40:	f7ff fff2 	bl	d7a28 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7a44:	7821      	ldrb	r1, [r4, #0]
   d7a46:	f3bf 8f5b 	dmb	ish
   d7a4a:	f011 0101 	ands.w	r1, r1, #1
   d7a4e:	d111      	bne.n	d7a74 <_Z16_fetch_usbserialv+0x3c>
   d7a50:	4620      	mov	r0, r4
   d7a52:	9101      	str	r1, [sp, #4]
   d7a54:	f7fc fb30 	bl	d40b8 <__cxa_guard_acquire>
   d7a58:	9901      	ldr	r1, [sp, #4]
   d7a5a:	b158      	cbz	r0, d7a74 <_Z16_fetch_usbserialv+0x3c>
   d7a5c:	aa03      	add	r2, sp, #12
   d7a5e:	4808      	ldr	r0, [pc, #32]	; (d7a80 <_Z16_fetch_usbserialv+0x48>)
   d7a60:	f7ff ffce 	bl	d7a00 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7a64:	4620      	mov	r0, r4
   d7a66:	f7fc fb2c 	bl	d40c2 <__cxa_guard_release>
   d7a6a:	4a06      	ldr	r2, [pc, #24]	; (d7a84 <_Z16_fetch_usbserialv+0x4c>)
   d7a6c:	4906      	ldr	r1, [pc, #24]	; (d7a88 <_Z16_fetch_usbserialv+0x50>)
   d7a6e:	4804      	ldr	r0, [pc, #16]	; (d7a80 <_Z16_fetch_usbserialv+0x48>)
   d7a70:	f000 f99a 	bl	d7da8 <__aeabi_atexit>
	return _usbserial;
}
   d7a74:	4802      	ldr	r0, [pc, #8]	; (d7a80 <_Z16_fetch_usbserialv+0x48>)
   d7a76:	b008      	add	sp, #32
   d7a78:	bd10      	pop	{r4, pc}
   d7a7a:	bf00      	nop
   d7a7c:	2003e7b0 	.word	0x2003e7b0
   d7a80:	2003e7b4 	.word	0x2003e7b4
   d7a84:	2003e3f8 	.word	0x2003e3f8
   d7a88:	000d7989 	.word	0x000d7989

000d7a8c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d7a8c:	b510      	push	{r4, lr}
   d7a8e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d7a90:	f001 f9ff 	bl	d8e92 <strlen>
   d7a94:	3801      	subs	r0, #1
   d7a96:	1823      	adds	r3, r4, r0
   d7a98:	4620      	mov	r0, r4
	while(i<j){
   d7a9a:	4283      	cmp	r3, r0
   d7a9c:	d906      	bls.n	d7aac <_Z11str_reversePc+0x20>
		c = *i;
   d7a9e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d7aa0:	7819      	ldrb	r1, [r3, #0]
   d7aa2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d7aa6:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d7aaa:	e7f6      	b.n	d7a9a <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d7aac:	bd10      	pop	{r4, pc}

000d7aae <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d7aae:	b570      	push	{r4, r5, r6, lr}
   d7ab0:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d7ab2:	1e91      	subs	r1, r2, #2
   d7ab4:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d7ab6:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d7ab8:	d822      	bhi.n	d7b00 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d7aba:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d7abc:	b16d      	cbz	r5, d7ada <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d7abe:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d7ac2:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d7ac6:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d7ac8:	2d09      	cmp	r5, #9
                *ptr += '0';
   d7aca:	bf94      	ite	ls
   d7acc:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d7ace:	3157      	addhi	r1, #87	; 0x57
   d7ad0:	b2c9      	uxtb	r1, r1
   d7ad2:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d7ad6:	4635      	mov	r5, r6
	while(a){
   d7ad8:	e7f0      	b.n	d7abc <ultoa+0xe>
   d7ada:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d7adc:	4423      	add	r3, r4
            *ptr++ = '0';
   d7ade:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d7ae0:	4293      	cmp	r3, r2
   d7ae2:	d902      	bls.n	d7aea <ultoa+0x3c>
            *ptr++ = '0';
   d7ae4:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d7ae8:	e7fa      	b.n	d7ae0 <ultoa+0x32>
   d7aea:	1a1a      	subs	r2, r3, r0
   d7aec:	4283      	cmp	r3, r0
   d7aee:	bf38      	it	cc
   d7af0:	2200      	movcc	r2, #0

	*ptr = '\0';
   d7af2:	2300      	movs	r3, #0
   d7af4:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d7af6:	4620      	mov	r0, r4
   d7af8:	f7ff ffc8 	bl	d7a8c <_Z11str_reversePc>
	return buffer;
   d7afc:	4620      	mov	r0, r4
}
   d7afe:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d7b00:	2000      	movs	r0, #0
   d7b02:	e7fc      	b.n	d7afe <ultoa+0x50>

000d7b04 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7b04:	4b01      	ldr	r3, [pc, #4]	; (d7b0c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d7b06:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7b08:	4770      	bx	lr
   d7b0a:	bf00      	nop
   d7b0c:	2003e390 	.word	0x2003e390

000d7b10 <serialEventRun>:
{
   d7b10:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7b12:	4b0b      	ldr	r3, [pc, #44]	; (d7b40 <serialEventRun+0x30>)
   d7b14:	b143      	cbz	r3, d7b28 <serialEventRun+0x18>
   d7b16:	f7ff ff8f 	bl	d7a38 <_Z16_fetch_usbserialv>
   d7b1a:	6803      	ldr	r3, [r0, #0]
   d7b1c:	691b      	ldr	r3, [r3, #16]
   d7b1e:	4798      	blx	r3
   d7b20:	2800      	cmp	r0, #0
   d7b22:	dd01      	ble.n	d7b28 <serialEventRun+0x18>
        serialEvent();
   d7b24:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7b28:	4b06      	ldr	r3, [pc, #24]	; (d7b44 <serialEventRun+0x34>)
   d7b2a:	b143      	cbz	r3, d7b3e <serialEventRun+0x2e>
   d7b2c:	f7ff ff00 	bl	d7930 <_Z22__fetch_global_Serial1v>
   d7b30:	6803      	ldr	r3, [r0, #0]
   d7b32:	691b      	ldr	r3, [r3, #16]
   d7b34:	4798      	blx	r3
   d7b36:	2800      	cmp	r0, #0
   d7b38:	dd01      	ble.n	d7b3e <serialEventRun+0x2e>
        serialEvent1();
   d7b3a:	f3af 8000 	nop.w
}
   d7b3e:	bd08      	pop	{r3, pc}
	...

000d7b48 <_post_loop>:
{
   d7b48:	b508      	push	{r3, lr}
	serialEventRun();
   d7b4a:	f7ff ffe1 	bl	d7b10 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7b4e:	f7fe fad9 	bl	d6104 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7b52:	4b01      	ldr	r3, [pc, #4]	; (d7b58 <_post_loop+0x10>)
   d7b54:	6018      	str	r0, [r3, #0]
}
   d7b56:	bd08      	pop	{r3, pc}
   d7b58:	2003e7dc 	.word	0x2003e7dc

000d7b5c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7b5c:	4802      	ldr	r0, [pc, #8]	; (d7b68 <_Z33system_initialize_user_backup_ramv+0xc>)
   d7b5e:	4a03      	ldr	r2, [pc, #12]	; (d7b6c <_Z33system_initialize_user_backup_ramv+0x10>)
   d7b60:	4903      	ldr	r1, [pc, #12]	; (d7b70 <_Z33system_initialize_user_backup_ramv+0x14>)
   d7b62:	1a12      	subs	r2, r2, r0
   d7b64:	f001 b912 	b.w	d8d8c <memcpy>
   d7b68:	2003f400 	.word	0x2003f400
   d7b6c:	2003fc04 	.word	0x2003fc04
   d7b70:	000d9828 	.word	0x000d9828

000d7b74 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7b74:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7b76:	2300      	movs	r3, #0
   d7b78:	9300      	str	r3, [sp, #0]
   d7b7a:	461a      	mov	r2, r3
   d7b7c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7b80:	f7fe fc7a 	bl	d6478 <system_ctrl_set_result>
}
   d7b84:	b003      	add	sp, #12
   d7b86:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7b8c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d7b8c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7b8e:	8843      	ldrh	r3, [r0, #2]
   d7b90:	2b0a      	cmp	r3, #10
   d7b92:	d008      	beq.n	d7ba6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7b94:	2b50      	cmp	r3, #80	; 0x50
   d7b96:	d10b      	bne.n	d7bb0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d7b98:	4b09      	ldr	r3, [pc, #36]	; (d7bc0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7b9a:	681b      	ldr	r3, [r3, #0]
   d7b9c:	b14b      	cbz	r3, d7bb2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d7b9e:	b003      	add	sp, #12
   d7ba0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7ba4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d7ba6:	f7ff ffe5 	bl	d7b74 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d7baa:	b003      	add	sp, #12
   d7bac:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7bb0:	2300      	movs	r3, #0
   d7bb2:	9300      	str	r3, [sp, #0]
   d7bb4:	461a      	mov	r2, r3
   d7bb6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7bba:	f7fe fc5d 	bl	d6478 <system_ctrl_set_result>
}
   d7bbe:	e7f4      	b.n	d7baa <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7bc0:	2003e7cc 	.word	0x2003e7cc

000d7bc4 <module_user_init_hook>:
{
   d7bc4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7bc6:	4c12      	ldr	r4, [pc, #72]	; (d7c10 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7bc8:	4812      	ldr	r0, [pc, #72]	; (d7c14 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7bca:	4d13      	ldr	r5, [pc, #76]	; (d7c18 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7bcc:	2100      	movs	r1, #0
   d7bce:	f7fe fd57 	bl	d6680 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7bd2:	6823      	ldr	r3, [r4, #0]
   d7bd4:	42ab      	cmp	r3, r5
   d7bd6:	4b11      	ldr	r3, [pc, #68]	; (d7c1c <module_user_init_hook+0x58>)
   d7bd8:	bf0c      	ite	eq
   d7bda:	2201      	moveq	r2, #1
   d7bdc:	2200      	movne	r2, #0
   d7bde:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7be0:	d002      	beq.n	d7be8 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d7be2:	f7ff ffbb 	bl	d7b5c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d7be6:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7be8:	f7fe fa74 	bl	d60d4 <HAL_RNG_GetRandomNumber>
   d7bec:	4604      	mov	r4, r0
    srand(seed);
   d7bee:	f001 f8fd 	bl	d8dec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7bf2:	4b0b      	ldr	r3, [pc, #44]	; (d7c20 <module_user_init_hook+0x5c>)
   d7bf4:	b113      	cbz	r3, d7bfc <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d7bf6:	4620      	mov	r0, r4
   d7bf8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7bfc:	2100      	movs	r1, #0
   d7bfe:	4808      	ldr	r0, [pc, #32]	; (d7c20 <module_user_init_hook+0x5c>)
   d7c00:	f7fe fca6 	bl	d6550 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7c08:	4806      	ldr	r0, [pc, #24]	; (d7c24 <module_user_init_hook+0x60>)
   d7c0a:	2100      	movs	r1, #0
   d7c0c:	f7fe bc2a 	b.w	d6464 <system_ctrl_set_app_request_handler>
   d7c10:	2003fc00 	.word	0x2003fc00
   d7c14:	000d7b05 	.word	0x000d7b05
   d7c18:	9a271c1e 	.word	0x9a271c1e
   d7c1c:	2003e7c8 	.word	0x2003e7c8
   d7c20:	00000000 	.word	0x00000000
   d7c24:	000d7b8d 	.word	0x000d7b8d

000d7c28 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7c28:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7c2a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7c2c:	d902      	bls.n	d7c34 <pinAvailable+0xc>
    return false;
   d7c2e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7c30:	b002      	add	sp, #8
   d7c32:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7c34:	f1a0 030b 	sub.w	r3, r0, #11
   d7c38:	2b02      	cmp	r3, #2
   d7c3a:	d81a      	bhi.n	d7c72 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7c3c:	4c17      	ldr	r4, [pc, #92]	; (d7c9c <pinAvailable+0x74>)
   d7c3e:	7821      	ldrb	r1, [r4, #0]
   d7c40:	f3bf 8f5b 	dmb	ish
   d7c44:	f011 0101 	ands.w	r1, r1, #1
   d7c48:	d10b      	bne.n	d7c62 <pinAvailable+0x3a>
   d7c4a:	4620      	mov	r0, r4
   d7c4c:	9101      	str	r1, [sp, #4]
   d7c4e:	f7fc fa33 	bl	d40b8 <__cxa_guard_acquire>
   d7c52:	9901      	ldr	r1, [sp, #4]
   d7c54:	b128      	cbz	r0, d7c62 <pinAvailable+0x3a>
   d7c56:	4812      	ldr	r0, [pc, #72]	; (d7ca0 <pinAvailable+0x78>)
   d7c58:	f7ff fb28 	bl	d72ac <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7c5c:	4620      	mov	r0, r4
   d7c5e:	f7fc fa30 	bl	d40c2 <__cxa_guard_release>
   d7c62:	4b0f      	ldr	r3, [pc, #60]	; (d7ca0 <pinAvailable+0x78>)
   d7c64:	7818      	ldrb	r0, [r3, #0]
   d7c66:	f7fe fb35 	bl	d62d4 <hal_spi_is_enabled>
   d7c6a:	2800      	cmp	r0, #0
   d7c6c:	d1df      	bne.n	d7c2e <pinAvailable+0x6>
  return true; // 'pin' is available
   d7c6e:	2001      	movs	r0, #1
   d7c70:	e7de      	b.n	d7c30 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7c72:	2801      	cmp	r0, #1
   d7c74:	d809      	bhi.n	d7c8a <pinAvailable+0x62>
   d7c76:	f000 f86f 	bl	d7d58 <_Z19__fetch_global_Wirev>
   d7c7a:	2100      	movs	r1, #0
   d7c7c:	7c00      	ldrb	r0, [r0, #16]
   d7c7e:	f7fe fae1 	bl	d6244 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7c82:	f080 0001 	eor.w	r0, r0, #1
   d7c86:	b2c0      	uxtb	r0, r0
   d7c88:	e7d2      	b.n	d7c30 <pinAvailable+0x8>
   d7c8a:	3809      	subs	r0, #9
   d7c8c:	2801      	cmp	r0, #1
   d7c8e:	d8ee      	bhi.n	d7c6e <pinAvailable+0x46>
   d7c90:	f7ff fe4e 	bl	d7930 <_Z22__fetch_global_Serial1v>
   d7c94:	7c00      	ldrb	r0, [r0, #16]
   d7c96:	f7fe fb55 	bl	d6344 <hal_usart_is_enabled>
   d7c9a:	e7f2      	b.n	d7c82 <pinAvailable+0x5a>
   d7c9c:	2003e7d0 	.word	0x2003e7d0
   d7ca0:	2003e7d4 	.word	0x2003e7d4

000d7ca4 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7ca4:	2823      	cmp	r0, #35	; 0x23
{
   d7ca6:	b538      	push	{r3, r4, r5, lr}
   d7ca8:	4604      	mov	r4, r0
   d7caa:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7cac:	d80a      	bhi.n	d7cc4 <pinMode+0x20>
   d7cae:	29ff      	cmp	r1, #255	; 0xff
   d7cb0:	d008      	beq.n	d7cc4 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7cb2:	f7ff ffb9 	bl	d7c28 <pinAvailable>
   d7cb6:	b128      	cbz	r0, d7cc4 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d7cb8:	4629      	mov	r1, r5
   d7cba:	4620      	mov	r0, r4
}
   d7cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7cc0:	f7fe ba50 	b.w	d6164 <HAL_Pin_Mode>
}
   d7cc4:	bd38      	pop	{r3, r4, r5, pc}

000d7cc6 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7cc6:	b538      	push	{r3, r4, r5, lr}
   d7cc8:	4604      	mov	r4, r0
   d7cca:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7ccc:	f7fe fa52 	bl	d6174 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7cd0:	28ff      	cmp	r0, #255	; 0xff
   d7cd2:	d010      	beq.n	d7cf6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d7cd4:	2806      	cmp	r0, #6
   d7cd6:	d804      	bhi.n	d7ce2 <digitalWrite+0x1c>
   d7cd8:	234d      	movs	r3, #77	; 0x4d
   d7cda:	fa23 f000 	lsr.w	r0, r3, r0
   d7cde:	07c3      	lsls	r3, r0, #31
   d7ce0:	d409      	bmi.n	d7cf6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7ce2:	4620      	mov	r0, r4
   d7ce4:	f7ff ffa0 	bl	d7c28 <pinAvailable>
   d7ce8:	b128      	cbz	r0, d7cf6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7cea:	4629      	mov	r1, r5
   d7cec:	4620      	mov	r0, r4
}
   d7cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d7cf2:	f7fe ba47 	b.w	d6184 <HAL_GPIO_Write>
}
   d7cf6:	bd38      	pop	{r3, r4, r5, pc}

000d7cf8 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d7cf8:	280d      	cmp	r0, #13
{
   d7cfa:	b510      	push	{r4, lr}
   d7cfc:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d7cfe:	bf9c      	itt	ls
   d7d00:	340e      	addls	r4, #14
   d7d02:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d7d04:	4620      	mov	r0, r4
   d7d06:	f7ff ff8f 	bl	d7c28 <pinAvailable>
   d7d0a:	b150      	cbz	r0, d7d22 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d7d0c:	2103      	movs	r1, #3
   d7d0e:	4620      	mov	r0, r4
   d7d10:	f7fe fa20 	bl	d6154 <HAL_Validate_Pin_Function>
   d7d14:	2803      	cmp	r0, #3
   d7d16:	d104      	bne.n	d7d22 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d7d18:	4620      	mov	r0, r4
}
   d7d1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d7d1e:	f7fe ba49 	b.w	d61b4 <hal_adc_read>
}
   d7d22:	2000      	movs	r0, #0
   d7d24:	bd10      	pop	{r4, pc}
	...

000d7d28 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7d28:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7d2a:	2300      	movs	r3, #0
   d7d2c:	2520      	movs	r5, #32
   d7d2e:	8043      	strh	r3, [r0, #2]
   d7d30:	2314      	movs	r3, #20
{
   d7d32:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7d34:	8003      	strh	r3, [r0, #0]
   d7d36:	6085      	str	r5, [r0, #8]
   d7d38:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7d3a:	4906      	ldr	r1, [pc, #24]	; (d7d54 <_Z17acquireWireBufferv+0x2c>)
   d7d3c:	4628      	mov	r0, r5
   d7d3e:	f000 f83c 	bl	d7dba <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7d42:	4904      	ldr	r1, [pc, #16]	; (d7d54 <_Z17acquireWireBufferv+0x2c>)
	};
   d7d44:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7d46:	4628      	mov	r0, r5
   d7d48:	f000 f837 	bl	d7dba <_ZnajRKSt9nothrow_t>
	};
   d7d4c:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7d4e:	4620      	mov	r0, r4
   d7d50:	bd38      	pop	{r3, r4, r5, pc}
   d7d52:	bf00      	nop
   d7d54:	000d9690 	.word	0x000d9690

000d7d58 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7d58:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7d5a:	4d0f      	ldr	r5, [pc, #60]	; (d7d98 <_Z19__fetch_global_Wirev+0x40>)
   d7d5c:	7829      	ldrb	r1, [r5, #0]
   d7d5e:	f3bf 8f5b 	dmb	ish
   d7d62:	f011 0401 	ands.w	r4, r1, #1
{
   d7d66:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7d68:	d113      	bne.n	d7d92 <_Z19__fetch_global_Wirev+0x3a>
   d7d6a:	4628      	mov	r0, r5
   d7d6c:	f7fc f9a4 	bl	d40b8 <__cxa_guard_acquire>
   d7d70:	b178      	cbz	r0, d7d92 <_Z19__fetch_global_Wirev+0x3a>
   d7d72:	a801      	add	r0, sp, #4
   d7d74:	f7ff ffd8 	bl	d7d28 <_Z17acquireWireBufferv>
   d7d78:	aa01      	add	r2, sp, #4
   d7d7a:	4621      	mov	r1, r4
   d7d7c:	4807      	ldr	r0, [pc, #28]	; (d7d9c <_Z19__fetch_global_Wirev+0x44>)
   d7d7e:	f7ff f889 	bl	d6e94 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7d82:	4628      	mov	r0, r5
   d7d84:	f7fc f99d 	bl	d40c2 <__cxa_guard_release>
   d7d88:	4a05      	ldr	r2, [pc, #20]	; (d7da0 <_Z19__fetch_global_Wirev+0x48>)
   d7d8a:	4906      	ldr	r1, [pc, #24]	; (d7da4 <_Z19__fetch_global_Wirev+0x4c>)
   d7d8c:	4803      	ldr	r0, [pc, #12]	; (d7d9c <_Z19__fetch_global_Wirev+0x44>)
   d7d8e:	f000 f80b 	bl	d7da8 <__aeabi_atexit>
	return wire;
}
   d7d92:	4802      	ldr	r0, [pc, #8]	; (d7d9c <_Z19__fetch_global_Wirev+0x44>)
   d7d94:	b007      	add	sp, #28
   d7d96:	bd30      	pop	{r4, r5, pc}
   d7d98:	2003e7e0 	.word	0x2003e7e0
   d7d9c:	2003e7e4 	.word	0x2003e7e4
   d7da0:	2003e3f8 	.word	0x2003e3f8
   d7da4:	000d6e3d 	.word	0x000d6e3d

000d7da8 <__aeabi_atexit>:
   d7da8:	460b      	mov	r3, r1
   d7daa:	4601      	mov	r1, r0
   d7dac:	4618      	mov	r0, r3
   d7dae:	f000 bfcd 	b.w	d8d4c <__cxa_atexit>

000d7db2 <_ZdlPvj>:
   d7db2:	f7fc b974 	b.w	d409e <_ZdlPv>

000d7db6 <_ZnwjRKSt9nothrow_t>:
   d7db6:	f7fc b96e 	b.w	d4096 <_Znwj>

000d7dba <_ZnajRKSt9nothrow_t>:
   d7dba:	f7fc b96e 	b.w	d409a <_Znaj>

000d7dbe <_ZSt25__throw_bad_function_callv>:
   d7dbe:	b508      	push	{r3, lr}
   d7dc0:	f7fe fc46 	bl	d6650 <abort>

000d7dc4 <sqrt>:
   d7dc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7dc8:	ed2d 8b02 	vpush	{d8}
   d7dcc:	b08b      	sub	sp, #44	; 0x2c
   d7dce:	ec55 4b10 	vmov	r4, r5, d0
   d7dd2:	f000 f855 	bl	d7e80 <__ieee754_sqrt>
   d7dd6:	4b28      	ldr	r3, [pc, #160]	; (d7e78 <sqrt+0xb4>)
   d7dd8:	eeb0 8a40 	vmov.f32	s16, s0
   d7ddc:	eef0 8a60 	vmov.f32	s17, s1
   d7de0:	f993 7000 	ldrsb.w	r7, [r3]
   d7de4:	1c7b      	adds	r3, r7, #1
   d7de6:	d012      	beq.n	d7e0e <sqrt+0x4a>
   d7de8:	4622      	mov	r2, r4
   d7dea:	462b      	mov	r3, r5
   d7dec:	4620      	mov	r0, r4
   d7dee:	4629      	mov	r1, r5
   d7df0:	f000 fd62 	bl	d88b8 <__aeabi_dcmpun>
   d7df4:	4606      	mov	r6, r0
   d7df6:	b950      	cbnz	r0, d7e0e <sqrt+0x4a>
   d7df8:	f04f 0800 	mov.w	r8, #0
   d7dfc:	f04f 0900 	mov.w	r9, #0
   d7e00:	4620      	mov	r0, r4
   d7e02:	4629      	mov	r1, r5
   d7e04:	4642      	mov	r2, r8
   d7e06:	464b      	mov	r3, r9
   d7e08:	f000 fd2e 	bl	d8868 <__aeabi_dcmplt>
   d7e0c:	b940      	cbnz	r0, d7e20 <sqrt+0x5c>
   d7e0e:	eeb0 0a48 	vmov.f32	s0, s16
   d7e12:	eef0 0a68 	vmov.f32	s1, s17
   d7e16:	b00b      	add	sp, #44	; 0x2c
   d7e18:	ecbd 8b02 	vpop	{d8}
   d7e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7e20:	4b16      	ldr	r3, [pc, #88]	; (d7e7c <sqrt+0xb8>)
   d7e22:	9608      	str	r6, [sp, #32]
   d7e24:	2201      	movs	r2, #1
   d7e26:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d7e2a:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d7e2e:	9200      	str	r2, [sp, #0]
   d7e30:	9301      	str	r3, [sp, #4]
   d7e32:	b197      	cbz	r7, d7e5a <sqrt+0x96>
   d7e34:	4642      	mov	r2, r8
   d7e36:	464b      	mov	r3, r9
   d7e38:	4640      	mov	r0, r8
   d7e3a:	4649      	mov	r1, r9
   d7e3c:	f000 fbcc 	bl	d85d8 <__aeabi_ddiv>
   d7e40:	2f02      	cmp	r7, #2
   d7e42:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d7e46:	d10a      	bne.n	d7e5e <sqrt+0x9a>
   d7e48:	f7fe fc12 	bl	d6670 <__errno>
   d7e4c:	2321      	movs	r3, #33	; 0x21
   d7e4e:	6003      	str	r3, [r0, #0]
   d7e50:	9b08      	ldr	r3, [sp, #32]
   d7e52:	b963      	cbnz	r3, d7e6e <sqrt+0xaa>
   d7e54:	ed9d 8b06 	vldr	d8, [sp, #24]
   d7e58:	e7d9      	b.n	d7e0e <sqrt+0x4a>
   d7e5a:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d7e5e:	4668      	mov	r0, sp
   d7e60:	f000 f8d2 	bl	d8008 <matherr>
   d7e64:	2800      	cmp	r0, #0
   d7e66:	d0ef      	beq.n	d7e48 <sqrt+0x84>
   d7e68:	9b08      	ldr	r3, [sp, #32]
   d7e6a:	2b00      	cmp	r3, #0
   d7e6c:	d0f2      	beq.n	d7e54 <sqrt+0x90>
   d7e6e:	f7fe fbff 	bl	d6670 <__errno>
   d7e72:	9b08      	ldr	r3, [sp, #32]
   d7e74:	6003      	str	r3, [r0, #0]
   d7e76:	e7ed      	b.n	d7e54 <sqrt+0x90>
   d7e78:	2003e38c 	.word	0x2003e38c
   d7e7c:	000d9694 	.word	0x000d9694

000d7e80 <__ieee754_sqrt>:
   d7e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7e84:	4a5f      	ldr	r2, [pc, #380]	; (d8004 <__ieee754_sqrt+0x184>)
   d7e86:	ec57 6b10 	vmov	r6, r7, d0
   d7e8a:	43ba      	bics	r2, r7
   d7e8c:	f000 8098 	beq.w	d7fc0 <__ieee754_sqrt+0x140>
   d7e90:	2f00      	cmp	r7, #0
   d7e92:	ee10 4a10 	vmov	r4, s0
   d7e96:	463b      	mov	r3, r7
   d7e98:	dd4e      	ble.n	d7f38 <__ieee754_sqrt+0xb8>
   d7e9a:	1539      	asrs	r1, r7, #20
   d7e9c:	d05b      	beq.n	d7f56 <__ieee754_sqrt+0xd6>
   d7e9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d7ea2:	07ca      	lsls	r2, r1, #31
   d7ea4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d7ea8:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d7eac:	d403      	bmi.n	d7eb6 <__ieee754_sqrt+0x36>
   d7eae:	005b      	lsls	r3, r3, #1
   d7eb0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d7eb4:	0064      	lsls	r4, r4, #1
   d7eb6:	0fe2      	lsrs	r2, r4, #31
   d7eb8:	f04f 0c00 	mov.w	ip, #0
   d7ebc:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d7ec0:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d7ec4:	0064      	lsls	r4, r4, #1
   d7ec6:	4666      	mov	r6, ip
   d7ec8:	2516      	movs	r5, #22
   d7eca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d7ece:	18b1      	adds	r1, r6, r2
   d7ed0:	4299      	cmp	r1, r3
   d7ed2:	dc02      	bgt.n	d7eda <__ieee754_sqrt+0x5a>
   d7ed4:	1a5b      	subs	r3, r3, r1
   d7ed6:	188e      	adds	r6, r1, r2
   d7ed8:	4494      	add	ip, r2
   d7eda:	005b      	lsls	r3, r3, #1
   d7edc:	3d01      	subs	r5, #1
   d7ede:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d7ee2:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d7ee6:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d7eea:	d1f0      	bne.n	d7ece <__ieee754_sqrt+0x4e>
   d7eec:	462f      	mov	r7, r5
   d7eee:	2020      	movs	r0, #32
   d7ef0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d7ef4:	e009      	b.n	d7f0a <__ieee754_sqrt+0x8a>
   d7ef6:	d03e      	beq.n	d7f76 <__ieee754_sqrt+0xf6>
   d7ef8:	0fe1      	lsrs	r1, r4, #31
   d7efa:	3801      	subs	r0, #1
   d7efc:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d7f00:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d7f04:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d7f08:	d03e      	beq.n	d7f88 <__ieee754_sqrt+0x108>
   d7f0a:	42b3      	cmp	r3, r6
   d7f0c:	eb02 0105 	add.w	r1, r2, r5
   d7f10:	ddf1      	ble.n	d7ef6 <__ieee754_sqrt+0x76>
   d7f12:	2900      	cmp	r1, #0
   d7f14:	eb01 0502 	add.w	r5, r1, r2
   d7f18:	db09      	blt.n	d7f2e <__ieee754_sqrt+0xae>
   d7f1a:	46b0      	mov	r8, r6
   d7f1c:	1b9b      	subs	r3, r3, r6
   d7f1e:	42a1      	cmp	r1, r4
   d7f20:	bf88      	it	hi
   d7f22:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   d7f26:	1a64      	subs	r4, r4, r1
   d7f28:	4417      	add	r7, r2
   d7f2a:	4646      	mov	r6, r8
   d7f2c:	e7e4      	b.n	d7ef8 <__ieee754_sqrt+0x78>
   d7f2e:	2d00      	cmp	r5, #0
   d7f30:	dbf3      	blt.n	d7f1a <__ieee754_sqrt+0x9a>
   d7f32:	f106 0801 	add.w	r8, r6, #1
   d7f36:	e7f1      	b.n	d7f1c <__ieee754_sqrt+0x9c>
   d7f38:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d7f3c:	4332      	orrs	r2, r6
   d7f3e:	d036      	beq.n	d7fae <__ieee754_sqrt+0x12e>
   d7f40:	2f00      	cmp	r7, #0
   d7f42:	d14d      	bne.n	d7fe0 <__ieee754_sqrt+0x160>
   d7f44:	4639      	mov	r1, r7
   d7f46:	0ae2      	lsrs	r2, r4, #11
   d7f48:	3915      	subs	r1, #21
   d7f4a:	0564      	lsls	r4, r4, #21
   d7f4c:	4613      	mov	r3, r2
   d7f4e:	2a00      	cmp	r2, #0
   d7f50:	d0f9      	beq.n	d7f46 <__ieee754_sqrt+0xc6>
   d7f52:	02d7      	lsls	r7, r2, #11
   d7f54:	d451      	bmi.n	d7ffa <__ieee754_sqrt+0x17a>
   d7f56:	2000      	movs	r0, #0
   d7f58:	005b      	lsls	r3, r3, #1
   d7f5a:	02de      	lsls	r6, r3, #11
   d7f5c:	4605      	mov	r5, r0
   d7f5e:	f100 0001 	add.w	r0, r0, #1
   d7f62:	d5f9      	bpl.n	d7f58 <__ieee754_sqrt+0xd8>
   d7f64:	461a      	mov	r2, r3
   d7f66:	4623      	mov	r3, r4
   d7f68:	4084      	lsls	r4, r0
   d7f6a:	f1c0 0020 	rsb	r0, r0, #32
   d7f6e:	40c3      	lsrs	r3, r0
   d7f70:	4313      	orrs	r3, r2
   d7f72:	1b49      	subs	r1, r1, r5
   d7f74:	e793      	b.n	d7e9e <__ieee754_sqrt+0x1e>
   d7f76:	42a1      	cmp	r1, r4
   d7f78:	d8be      	bhi.n	d7ef8 <__ieee754_sqrt+0x78>
   d7f7a:	2900      	cmp	r1, #0
   d7f7c:	eb01 0502 	add.w	r5, r1, r2
   d7f80:	dbd5      	blt.n	d7f2e <__ieee754_sqrt+0xae>
   d7f82:	4698      	mov	r8, r3
   d7f84:	2300      	movs	r3, #0
   d7f86:	e7ce      	b.n	d7f26 <__ieee754_sqrt+0xa6>
   d7f88:	4323      	orrs	r3, r4
   d7f8a:	d112      	bne.n	d7fb2 <__ieee754_sqrt+0x132>
   d7f8c:	0878      	lsrs	r0, r7, #1
   d7f8e:	ea4f 016c 	mov.w	r1, ip, asr #1
   d7f92:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d7f96:	f01c 0f01 	tst.w	ip, #1
   d7f9a:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d7f9e:	bf18      	it	ne
   d7fa0:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d7fa4:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d7fa8:	4602      	mov	r2, r0
   d7faa:	ec43 2b10 	vmov	d0, r2, r3
   d7fae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7fb2:	1c7b      	adds	r3, r7, #1
   d7fb4:	bf16      	itet	ne
   d7fb6:	1c78      	addne	r0, r7, #1
   d7fb8:	f10c 0c01 	addeq.w	ip, ip, #1
   d7fbc:	0840      	lsrne	r0, r0, #1
   d7fbe:	e7e6      	b.n	d7f8e <__ieee754_sqrt+0x10e>
   d7fc0:	ee10 2a10 	vmov	r2, s0
   d7fc4:	ee10 0a10 	vmov	r0, s0
   d7fc8:	463b      	mov	r3, r7
   d7fca:	4639      	mov	r1, r7
   d7fcc:	f000 f9da 	bl	d8384 <__aeabi_dmul>
   d7fd0:	4632      	mov	r2, r6
   d7fd2:	463b      	mov	r3, r7
   d7fd4:	f000 f820 	bl	d8018 <__adddf3>
   d7fd8:	ec41 0b10 	vmov	d0, r0, r1
   d7fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7fe0:	ee10 2a10 	vmov	r2, s0
   d7fe4:	4630      	mov	r0, r6
   d7fe6:	4639      	mov	r1, r7
   d7fe8:	f000 f814 	bl	d8014 <__aeabi_dsub>
   d7fec:	4602      	mov	r2, r0
   d7fee:	460b      	mov	r3, r1
   d7ff0:	f000 faf2 	bl	d85d8 <__aeabi_ddiv>
   d7ff4:	ec41 0b10 	vmov	d0, r0, r1
   d7ff8:	e7d9      	b.n	d7fae <__ieee754_sqrt+0x12e>
   d7ffa:	4623      	mov	r3, r4
   d7ffc:	2020      	movs	r0, #32
   d7ffe:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d8002:	e7b4      	b.n	d7f6e <__ieee754_sqrt+0xee>
   d8004:	7ff00000 	.word	0x7ff00000

000d8008 <matherr>:
   d8008:	2000      	movs	r0, #0
   d800a:	4770      	bx	lr

000d800c <__aeabi_drsub>:
   d800c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8010:	e002      	b.n	d8018 <__adddf3>
   d8012:	bf00      	nop

000d8014 <__aeabi_dsub>:
   d8014:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8018 <__adddf3>:
   d8018:	b530      	push	{r4, r5, lr}
   d801a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d801e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8022:	ea94 0f05 	teq	r4, r5
   d8026:	bf08      	it	eq
   d8028:	ea90 0f02 	teqeq	r0, r2
   d802c:	bf1f      	itttt	ne
   d802e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8032:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8036:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d803a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d803e:	f000 80e2 	beq.w	d8206 <__adddf3+0x1ee>
   d8042:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8046:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d804a:	bfb8      	it	lt
   d804c:	426d      	neglt	r5, r5
   d804e:	dd0c      	ble.n	d806a <__adddf3+0x52>
   d8050:	442c      	add	r4, r5
   d8052:	ea80 0202 	eor.w	r2, r0, r2
   d8056:	ea81 0303 	eor.w	r3, r1, r3
   d805a:	ea82 0000 	eor.w	r0, r2, r0
   d805e:	ea83 0101 	eor.w	r1, r3, r1
   d8062:	ea80 0202 	eor.w	r2, r0, r2
   d8066:	ea81 0303 	eor.w	r3, r1, r3
   d806a:	2d36      	cmp	r5, #54	; 0x36
   d806c:	bf88      	it	hi
   d806e:	bd30      	pophi	{r4, r5, pc}
   d8070:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8074:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8078:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d807c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8080:	d002      	beq.n	d8088 <__adddf3+0x70>
   d8082:	4240      	negs	r0, r0
   d8084:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8088:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d808c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8090:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8094:	d002      	beq.n	d809c <__adddf3+0x84>
   d8096:	4252      	negs	r2, r2
   d8098:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d809c:	ea94 0f05 	teq	r4, r5
   d80a0:	f000 80a7 	beq.w	d81f2 <__adddf3+0x1da>
   d80a4:	f1a4 0401 	sub.w	r4, r4, #1
   d80a8:	f1d5 0e20 	rsbs	lr, r5, #32
   d80ac:	db0d      	blt.n	d80ca <__adddf3+0xb2>
   d80ae:	fa02 fc0e 	lsl.w	ip, r2, lr
   d80b2:	fa22 f205 	lsr.w	r2, r2, r5
   d80b6:	1880      	adds	r0, r0, r2
   d80b8:	f141 0100 	adc.w	r1, r1, #0
   d80bc:	fa03 f20e 	lsl.w	r2, r3, lr
   d80c0:	1880      	adds	r0, r0, r2
   d80c2:	fa43 f305 	asr.w	r3, r3, r5
   d80c6:	4159      	adcs	r1, r3
   d80c8:	e00e      	b.n	d80e8 <__adddf3+0xd0>
   d80ca:	f1a5 0520 	sub.w	r5, r5, #32
   d80ce:	f10e 0e20 	add.w	lr, lr, #32
   d80d2:	2a01      	cmp	r2, #1
   d80d4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d80d8:	bf28      	it	cs
   d80da:	f04c 0c02 	orrcs.w	ip, ip, #2
   d80de:	fa43 f305 	asr.w	r3, r3, r5
   d80e2:	18c0      	adds	r0, r0, r3
   d80e4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d80e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d80ec:	d507      	bpl.n	d80fe <__adddf3+0xe6>
   d80ee:	f04f 0e00 	mov.w	lr, #0
   d80f2:	f1dc 0c00 	rsbs	ip, ip, #0
   d80f6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d80fa:	eb6e 0101 	sbc.w	r1, lr, r1
   d80fe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8102:	d31b      	bcc.n	d813c <__adddf3+0x124>
   d8104:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8108:	d30c      	bcc.n	d8124 <__adddf3+0x10c>
   d810a:	0849      	lsrs	r1, r1, #1
   d810c:	ea5f 0030 	movs.w	r0, r0, rrx
   d8110:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8114:	f104 0401 	add.w	r4, r4, #1
   d8118:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d811c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8120:	f080 809a 	bcs.w	d8258 <__adddf3+0x240>
   d8124:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8128:	bf08      	it	eq
   d812a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d812e:	f150 0000 	adcs.w	r0, r0, #0
   d8132:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8136:	ea41 0105 	orr.w	r1, r1, r5
   d813a:	bd30      	pop	{r4, r5, pc}
   d813c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8140:	4140      	adcs	r0, r0
   d8142:	eb41 0101 	adc.w	r1, r1, r1
   d8146:	3c01      	subs	r4, #1
   d8148:	bf28      	it	cs
   d814a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d814e:	d2e9      	bcs.n	d8124 <__adddf3+0x10c>
   d8150:	f091 0f00 	teq	r1, #0
   d8154:	bf04      	itt	eq
   d8156:	4601      	moveq	r1, r0
   d8158:	2000      	moveq	r0, #0
   d815a:	fab1 f381 	clz	r3, r1
   d815e:	bf08      	it	eq
   d8160:	3320      	addeq	r3, #32
   d8162:	f1a3 030b 	sub.w	r3, r3, #11
   d8166:	f1b3 0220 	subs.w	r2, r3, #32
   d816a:	da0c      	bge.n	d8186 <__adddf3+0x16e>
   d816c:	320c      	adds	r2, #12
   d816e:	dd08      	ble.n	d8182 <__adddf3+0x16a>
   d8170:	f102 0c14 	add.w	ip, r2, #20
   d8174:	f1c2 020c 	rsb	r2, r2, #12
   d8178:	fa01 f00c 	lsl.w	r0, r1, ip
   d817c:	fa21 f102 	lsr.w	r1, r1, r2
   d8180:	e00c      	b.n	d819c <__adddf3+0x184>
   d8182:	f102 0214 	add.w	r2, r2, #20
   d8186:	bfd8      	it	le
   d8188:	f1c2 0c20 	rsble	ip, r2, #32
   d818c:	fa01 f102 	lsl.w	r1, r1, r2
   d8190:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8194:	bfdc      	itt	le
   d8196:	ea41 010c 	orrle.w	r1, r1, ip
   d819a:	4090      	lslle	r0, r2
   d819c:	1ae4      	subs	r4, r4, r3
   d819e:	bfa2      	ittt	ge
   d81a0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d81a4:	4329      	orrge	r1, r5
   d81a6:	bd30      	popge	{r4, r5, pc}
   d81a8:	ea6f 0404 	mvn.w	r4, r4
   d81ac:	3c1f      	subs	r4, #31
   d81ae:	da1c      	bge.n	d81ea <__adddf3+0x1d2>
   d81b0:	340c      	adds	r4, #12
   d81b2:	dc0e      	bgt.n	d81d2 <__adddf3+0x1ba>
   d81b4:	f104 0414 	add.w	r4, r4, #20
   d81b8:	f1c4 0220 	rsb	r2, r4, #32
   d81bc:	fa20 f004 	lsr.w	r0, r0, r4
   d81c0:	fa01 f302 	lsl.w	r3, r1, r2
   d81c4:	ea40 0003 	orr.w	r0, r0, r3
   d81c8:	fa21 f304 	lsr.w	r3, r1, r4
   d81cc:	ea45 0103 	orr.w	r1, r5, r3
   d81d0:	bd30      	pop	{r4, r5, pc}
   d81d2:	f1c4 040c 	rsb	r4, r4, #12
   d81d6:	f1c4 0220 	rsb	r2, r4, #32
   d81da:	fa20 f002 	lsr.w	r0, r0, r2
   d81de:	fa01 f304 	lsl.w	r3, r1, r4
   d81e2:	ea40 0003 	orr.w	r0, r0, r3
   d81e6:	4629      	mov	r1, r5
   d81e8:	bd30      	pop	{r4, r5, pc}
   d81ea:	fa21 f004 	lsr.w	r0, r1, r4
   d81ee:	4629      	mov	r1, r5
   d81f0:	bd30      	pop	{r4, r5, pc}
   d81f2:	f094 0f00 	teq	r4, #0
   d81f6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d81fa:	bf06      	itte	eq
   d81fc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8200:	3401      	addeq	r4, #1
   d8202:	3d01      	subne	r5, #1
   d8204:	e74e      	b.n	d80a4 <__adddf3+0x8c>
   d8206:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d820a:	bf18      	it	ne
   d820c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8210:	d029      	beq.n	d8266 <__adddf3+0x24e>
   d8212:	ea94 0f05 	teq	r4, r5
   d8216:	bf08      	it	eq
   d8218:	ea90 0f02 	teqeq	r0, r2
   d821c:	d005      	beq.n	d822a <__adddf3+0x212>
   d821e:	ea54 0c00 	orrs.w	ip, r4, r0
   d8222:	bf04      	itt	eq
   d8224:	4619      	moveq	r1, r3
   d8226:	4610      	moveq	r0, r2
   d8228:	bd30      	pop	{r4, r5, pc}
   d822a:	ea91 0f03 	teq	r1, r3
   d822e:	bf1e      	ittt	ne
   d8230:	2100      	movne	r1, #0
   d8232:	2000      	movne	r0, #0
   d8234:	bd30      	popne	{r4, r5, pc}
   d8236:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d823a:	d105      	bne.n	d8248 <__adddf3+0x230>
   d823c:	0040      	lsls	r0, r0, #1
   d823e:	4149      	adcs	r1, r1
   d8240:	bf28      	it	cs
   d8242:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8246:	bd30      	pop	{r4, r5, pc}
   d8248:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d824c:	bf3c      	itt	cc
   d824e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8252:	bd30      	popcc	{r4, r5, pc}
   d8254:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8258:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d825c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8260:	f04f 0000 	mov.w	r0, #0
   d8264:	bd30      	pop	{r4, r5, pc}
   d8266:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d826a:	bf1a      	itte	ne
   d826c:	4619      	movne	r1, r3
   d826e:	4610      	movne	r0, r2
   d8270:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8274:	bf1c      	itt	ne
   d8276:	460b      	movne	r3, r1
   d8278:	4602      	movne	r2, r0
   d827a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d827e:	bf06      	itte	eq
   d8280:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8284:	ea91 0f03 	teqeq	r1, r3
   d8288:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d828c:	bd30      	pop	{r4, r5, pc}
   d828e:	bf00      	nop

000d8290 <__aeabi_ui2d>:
   d8290:	f090 0f00 	teq	r0, #0
   d8294:	bf04      	itt	eq
   d8296:	2100      	moveq	r1, #0
   d8298:	4770      	bxeq	lr
   d829a:	b530      	push	{r4, r5, lr}
   d829c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d82a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d82a4:	f04f 0500 	mov.w	r5, #0
   d82a8:	f04f 0100 	mov.w	r1, #0
   d82ac:	e750      	b.n	d8150 <__adddf3+0x138>
   d82ae:	bf00      	nop

000d82b0 <__aeabi_i2d>:
   d82b0:	f090 0f00 	teq	r0, #0
   d82b4:	bf04      	itt	eq
   d82b6:	2100      	moveq	r1, #0
   d82b8:	4770      	bxeq	lr
   d82ba:	b530      	push	{r4, r5, lr}
   d82bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d82c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d82c4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d82c8:	bf48      	it	mi
   d82ca:	4240      	negmi	r0, r0
   d82cc:	f04f 0100 	mov.w	r1, #0
   d82d0:	e73e      	b.n	d8150 <__adddf3+0x138>
   d82d2:	bf00      	nop

000d82d4 <__aeabi_f2d>:
   d82d4:	0042      	lsls	r2, r0, #1
   d82d6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d82da:	ea4f 0131 	mov.w	r1, r1, rrx
   d82de:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d82e2:	bf1f      	itttt	ne
   d82e4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d82e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d82ec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d82f0:	4770      	bxne	lr
   d82f2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d82f6:	bf08      	it	eq
   d82f8:	4770      	bxeq	lr
   d82fa:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d82fe:	bf04      	itt	eq
   d8300:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8304:	4770      	bxeq	lr
   d8306:	b530      	push	{r4, r5, lr}
   d8308:	f44f 7460 	mov.w	r4, #896	; 0x380
   d830c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8310:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8314:	e71c      	b.n	d8150 <__adddf3+0x138>
   d8316:	bf00      	nop

000d8318 <__aeabi_ul2d>:
   d8318:	ea50 0201 	orrs.w	r2, r0, r1
   d831c:	bf08      	it	eq
   d831e:	4770      	bxeq	lr
   d8320:	b530      	push	{r4, r5, lr}
   d8322:	f04f 0500 	mov.w	r5, #0
   d8326:	e00a      	b.n	d833e <__aeabi_l2d+0x16>

000d8328 <__aeabi_l2d>:
   d8328:	ea50 0201 	orrs.w	r2, r0, r1
   d832c:	bf08      	it	eq
   d832e:	4770      	bxeq	lr
   d8330:	b530      	push	{r4, r5, lr}
   d8332:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8336:	d502      	bpl.n	d833e <__aeabi_l2d+0x16>
   d8338:	4240      	negs	r0, r0
   d833a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d833e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8342:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8346:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d834a:	f43f aed8 	beq.w	d80fe <__adddf3+0xe6>
   d834e:	f04f 0203 	mov.w	r2, #3
   d8352:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8356:	bf18      	it	ne
   d8358:	3203      	addne	r2, #3
   d835a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d835e:	bf18      	it	ne
   d8360:	3203      	addne	r2, #3
   d8362:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8366:	f1c2 0320 	rsb	r3, r2, #32
   d836a:	fa00 fc03 	lsl.w	ip, r0, r3
   d836e:	fa20 f002 	lsr.w	r0, r0, r2
   d8372:	fa01 fe03 	lsl.w	lr, r1, r3
   d8376:	ea40 000e 	orr.w	r0, r0, lr
   d837a:	fa21 f102 	lsr.w	r1, r1, r2
   d837e:	4414      	add	r4, r2
   d8380:	e6bd      	b.n	d80fe <__adddf3+0xe6>
   d8382:	bf00      	nop

000d8384 <__aeabi_dmul>:
   d8384:	b570      	push	{r4, r5, r6, lr}
   d8386:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d838a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d838e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8392:	bf1d      	ittte	ne
   d8394:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8398:	ea94 0f0c 	teqne	r4, ip
   d839c:	ea95 0f0c 	teqne	r5, ip
   d83a0:	f000 f8de 	bleq	d8560 <__aeabi_dmul+0x1dc>
   d83a4:	442c      	add	r4, r5
   d83a6:	ea81 0603 	eor.w	r6, r1, r3
   d83aa:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d83ae:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d83b2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d83b6:	bf18      	it	ne
   d83b8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d83bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d83c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d83c4:	d038      	beq.n	d8438 <__aeabi_dmul+0xb4>
   d83c6:	fba0 ce02 	umull	ip, lr, r0, r2
   d83ca:	f04f 0500 	mov.w	r5, #0
   d83ce:	fbe1 e502 	umlal	lr, r5, r1, r2
   d83d2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d83d6:	fbe0 e503 	umlal	lr, r5, r0, r3
   d83da:	f04f 0600 	mov.w	r6, #0
   d83de:	fbe1 5603 	umlal	r5, r6, r1, r3
   d83e2:	f09c 0f00 	teq	ip, #0
   d83e6:	bf18      	it	ne
   d83e8:	f04e 0e01 	orrne.w	lr, lr, #1
   d83ec:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d83f0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d83f4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d83f8:	d204      	bcs.n	d8404 <__aeabi_dmul+0x80>
   d83fa:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d83fe:	416d      	adcs	r5, r5
   d8400:	eb46 0606 	adc.w	r6, r6, r6
   d8404:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8408:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d840c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8410:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8414:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8418:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d841c:	bf88      	it	hi
   d841e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8422:	d81e      	bhi.n	d8462 <__aeabi_dmul+0xde>
   d8424:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8428:	bf08      	it	eq
   d842a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d842e:	f150 0000 	adcs.w	r0, r0, #0
   d8432:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8436:	bd70      	pop	{r4, r5, r6, pc}
   d8438:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d843c:	ea46 0101 	orr.w	r1, r6, r1
   d8440:	ea40 0002 	orr.w	r0, r0, r2
   d8444:	ea81 0103 	eor.w	r1, r1, r3
   d8448:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d844c:	bfc2      	ittt	gt
   d844e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8452:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8456:	bd70      	popgt	{r4, r5, r6, pc}
   d8458:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d845c:	f04f 0e00 	mov.w	lr, #0
   d8460:	3c01      	subs	r4, #1
   d8462:	f300 80ab 	bgt.w	d85bc <__aeabi_dmul+0x238>
   d8466:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d846a:	bfde      	ittt	le
   d846c:	2000      	movle	r0, #0
   d846e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8472:	bd70      	pople	{r4, r5, r6, pc}
   d8474:	f1c4 0400 	rsb	r4, r4, #0
   d8478:	3c20      	subs	r4, #32
   d847a:	da35      	bge.n	d84e8 <__aeabi_dmul+0x164>
   d847c:	340c      	adds	r4, #12
   d847e:	dc1b      	bgt.n	d84b8 <__aeabi_dmul+0x134>
   d8480:	f104 0414 	add.w	r4, r4, #20
   d8484:	f1c4 0520 	rsb	r5, r4, #32
   d8488:	fa00 f305 	lsl.w	r3, r0, r5
   d848c:	fa20 f004 	lsr.w	r0, r0, r4
   d8490:	fa01 f205 	lsl.w	r2, r1, r5
   d8494:	ea40 0002 	orr.w	r0, r0, r2
   d8498:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d849c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d84a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d84a4:	fa21 f604 	lsr.w	r6, r1, r4
   d84a8:	eb42 0106 	adc.w	r1, r2, r6
   d84ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d84b0:	bf08      	it	eq
   d84b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d84b6:	bd70      	pop	{r4, r5, r6, pc}
   d84b8:	f1c4 040c 	rsb	r4, r4, #12
   d84bc:	f1c4 0520 	rsb	r5, r4, #32
   d84c0:	fa00 f304 	lsl.w	r3, r0, r4
   d84c4:	fa20 f005 	lsr.w	r0, r0, r5
   d84c8:	fa01 f204 	lsl.w	r2, r1, r4
   d84cc:	ea40 0002 	orr.w	r0, r0, r2
   d84d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d84d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d84d8:	f141 0100 	adc.w	r1, r1, #0
   d84dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d84e0:	bf08      	it	eq
   d84e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d84e6:	bd70      	pop	{r4, r5, r6, pc}
   d84e8:	f1c4 0520 	rsb	r5, r4, #32
   d84ec:	fa00 f205 	lsl.w	r2, r0, r5
   d84f0:	ea4e 0e02 	orr.w	lr, lr, r2
   d84f4:	fa20 f304 	lsr.w	r3, r0, r4
   d84f8:	fa01 f205 	lsl.w	r2, r1, r5
   d84fc:	ea43 0302 	orr.w	r3, r3, r2
   d8500:	fa21 f004 	lsr.w	r0, r1, r4
   d8504:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8508:	fa21 f204 	lsr.w	r2, r1, r4
   d850c:	ea20 0002 	bic.w	r0, r0, r2
   d8510:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8514:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8518:	bf08      	it	eq
   d851a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d851e:	bd70      	pop	{r4, r5, r6, pc}
   d8520:	f094 0f00 	teq	r4, #0
   d8524:	d10f      	bne.n	d8546 <__aeabi_dmul+0x1c2>
   d8526:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d852a:	0040      	lsls	r0, r0, #1
   d852c:	eb41 0101 	adc.w	r1, r1, r1
   d8530:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8534:	bf08      	it	eq
   d8536:	3c01      	subeq	r4, #1
   d8538:	d0f7      	beq.n	d852a <__aeabi_dmul+0x1a6>
   d853a:	ea41 0106 	orr.w	r1, r1, r6
   d853e:	f095 0f00 	teq	r5, #0
   d8542:	bf18      	it	ne
   d8544:	4770      	bxne	lr
   d8546:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d854a:	0052      	lsls	r2, r2, #1
   d854c:	eb43 0303 	adc.w	r3, r3, r3
   d8550:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8554:	bf08      	it	eq
   d8556:	3d01      	subeq	r5, #1
   d8558:	d0f7      	beq.n	d854a <__aeabi_dmul+0x1c6>
   d855a:	ea43 0306 	orr.w	r3, r3, r6
   d855e:	4770      	bx	lr
   d8560:	ea94 0f0c 	teq	r4, ip
   d8564:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8568:	bf18      	it	ne
   d856a:	ea95 0f0c 	teqne	r5, ip
   d856e:	d00c      	beq.n	d858a <__aeabi_dmul+0x206>
   d8570:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8574:	bf18      	it	ne
   d8576:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d857a:	d1d1      	bne.n	d8520 <__aeabi_dmul+0x19c>
   d857c:	ea81 0103 	eor.w	r1, r1, r3
   d8580:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8584:	f04f 0000 	mov.w	r0, #0
   d8588:	bd70      	pop	{r4, r5, r6, pc}
   d858a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d858e:	bf06      	itte	eq
   d8590:	4610      	moveq	r0, r2
   d8592:	4619      	moveq	r1, r3
   d8594:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8598:	d019      	beq.n	d85ce <__aeabi_dmul+0x24a>
   d859a:	ea94 0f0c 	teq	r4, ip
   d859e:	d102      	bne.n	d85a6 <__aeabi_dmul+0x222>
   d85a0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d85a4:	d113      	bne.n	d85ce <__aeabi_dmul+0x24a>
   d85a6:	ea95 0f0c 	teq	r5, ip
   d85aa:	d105      	bne.n	d85b8 <__aeabi_dmul+0x234>
   d85ac:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d85b0:	bf1c      	itt	ne
   d85b2:	4610      	movne	r0, r2
   d85b4:	4619      	movne	r1, r3
   d85b6:	d10a      	bne.n	d85ce <__aeabi_dmul+0x24a>
   d85b8:	ea81 0103 	eor.w	r1, r1, r3
   d85bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d85c0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d85c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d85c8:	f04f 0000 	mov.w	r0, #0
   d85cc:	bd70      	pop	{r4, r5, r6, pc}
   d85ce:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d85d2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d85d6:	bd70      	pop	{r4, r5, r6, pc}

000d85d8 <__aeabi_ddiv>:
   d85d8:	b570      	push	{r4, r5, r6, lr}
   d85da:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d85de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d85e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d85e6:	bf1d      	ittte	ne
   d85e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d85ec:	ea94 0f0c 	teqne	r4, ip
   d85f0:	ea95 0f0c 	teqne	r5, ip
   d85f4:	f000 f8a7 	bleq	d8746 <__aeabi_ddiv+0x16e>
   d85f8:	eba4 0405 	sub.w	r4, r4, r5
   d85fc:	ea81 0e03 	eor.w	lr, r1, r3
   d8600:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8604:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8608:	f000 8088 	beq.w	d871c <__aeabi_ddiv+0x144>
   d860c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8610:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8614:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8618:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d861c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8620:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8624:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8628:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d862c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8630:	429d      	cmp	r5, r3
   d8632:	bf08      	it	eq
   d8634:	4296      	cmpeq	r6, r2
   d8636:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d863a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d863e:	d202      	bcs.n	d8646 <__aeabi_ddiv+0x6e>
   d8640:	085b      	lsrs	r3, r3, #1
   d8642:	ea4f 0232 	mov.w	r2, r2, rrx
   d8646:	1ab6      	subs	r6, r6, r2
   d8648:	eb65 0503 	sbc.w	r5, r5, r3
   d864c:	085b      	lsrs	r3, r3, #1
   d864e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8652:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8656:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d865a:	ebb6 0e02 	subs.w	lr, r6, r2
   d865e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8662:	bf22      	ittt	cs
   d8664:	1ab6      	subcs	r6, r6, r2
   d8666:	4675      	movcs	r5, lr
   d8668:	ea40 000c 	orrcs.w	r0, r0, ip
   d866c:	085b      	lsrs	r3, r3, #1
   d866e:	ea4f 0232 	mov.w	r2, r2, rrx
   d8672:	ebb6 0e02 	subs.w	lr, r6, r2
   d8676:	eb75 0e03 	sbcs.w	lr, r5, r3
   d867a:	bf22      	ittt	cs
   d867c:	1ab6      	subcs	r6, r6, r2
   d867e:	4675      	movcs	r5, lr
   d8680:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8684:	085b      	lsrs	r3, r3, #1
   d8686:	ea4f 0232 	mov.w	r2, r2, rrx
   d868a:	ebb6 0e02 	subs.w	lr, r6, r2
   d868e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8692:	bf22      	ittt	cs
   d8694:	1ab6      	subcs	r6, r6, r2
   d8696:	4675      	movcs	r5, lr
   d8698:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d869c:	085b      	lsrs	r3, r3, #1
   d869e:	ea4f 0232 	mov.w	r2, r2, rrx
   d86a2:	ebb6 0e02 	subs.w	lr, r6, r2
   d86a6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d86aa:	bf22      	ittt	cs
   d86ac:	1ab6      	subcs	r6, r6, r2
   d86ae:	4675      	movcs	r5, lr
   d86b0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d86b4:	ea55 0e06 	orrs.w	lr, r5, r6
   d86b8:	d018      	beq.n	d86ec <__aeabi_ddiv+0x114>
   d86ba:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d86be:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d86c2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d86c6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d86ca:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d86ce:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d86d2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d86d6:	d1c0      	bne.n	d865a <__aeabi_ddiv+0x82>
   d86d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d86dc:	d10b      	bne.n	d86f6 <__aeabi_ddiv+0x11e>
   d86de:	ea41 0100 	orr.w	r1, r1, r0
   d86e2:	f04f 0000 	mov.w	r0, #0
   d86e6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d86ea:	e7b6      	b.n	d865a <__aeabi_ddiv+0x82>
   d86ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d86f0:	bf04      	itt	eq
   d86f2:	4301      	orreq	r1, r0
   d86f4:	2000      	moveq	r0, #0
   d86f6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d86fa:	bf88      	it	hi
   d86fc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8700:	f63f aeaf 	bhi.w	d8462 <__aeabi_dmul+0xde>
   d8704:	ebb5 0c03 	subs.w	ip, r5, r3
   d8708:	bf04      	itt	eq
   d870a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d870e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8712:	f150 0000 	adcs.w	r0, r0, #0
   d8716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d871a:	bd70      	pop	{r4, r5, r6, pc}
   d871c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8720:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8724:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8728:	bfc2      	ittt	gt
   d872a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d872e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8732:	bd70      	popgt	{r4, r5, r6, pc}
   d8734:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8738:	f04f 0e00 	mov.w	lr, #0
   d873c:	3c01      	subs	r4, #1
   d873e:	e690      	b.n	d8462 <__aeabi_dmul+0xde>
   d8740:	ea45 0e06 	orr.w	lr, r5, r6
   d8744:	e68d      	b.n	d8462 <__aeabi_dmul+0xde>
   d8746:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d874a:	ea94 0f0c 	teq	r4, ip
   d874e:	bf08      	it	eq
   d8750:	ea95 0f0c 	teqeq	r5, ip
   d8754:	f43f af3b 	beq.w	d85ce <__aeabi_dmul+0x24a>
   d8758:	ea94 0f0c 	teq	r4, ip
   d875c:	d10a      	bne.n	d8774 <__aeabi_ddiv+0x19c>
   d875e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8762:	f47f af34 	bne.w	d85ce <__aeabi_dmul+0x24a>
   d8766:	ea95 0f0c 	teq	r5, ip
   d876a:	f47f af25 	bne.w	d85b8 <__aeabi_dmul+0x234>
   d876e:	4610      	mov	r0, r2
   d8770:	4619      	mov	r1, r3
   d8772:	e72c      	b.n	d85ce <__aeabi_dmul+0x24a>
   d8774:	ea95 0f0c 	teq	r5, ip
   d8778:	d106      	bne.n	d8788 <__aeabi_ddiv+0x1b0>
   d877a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d877e:	f43f aefd 	beq.w	d857c <__aeabi_dmul+0x1f8>
   d8782:	4610      	mov	r0, r2
   d8784:	4619      	mov	r1, r3
   d8786:	e722      	b.n	d85ce <__aeabi_dmul+0x24a>
   d8788:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d878c:	bf18      	it	ne
   d878e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8792:	f47f aec5 	bne.w	d8520 <__aeabi_dmul+0x19c>
   d8796:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d879a:	f47f af0d 	bne.w	d85b8 <__aeabi_dmul+0x234>
   d879e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d87a2:	f47f aeeb 	bne.w	d857c <__aeabi_dmul+0x1f8>
   d87a6:	e712      	b.n	d85ce <__aeabi_dmul+0x24a>

000d87a8 <__gedf2>:
   d87a8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d87ac:	e006      	b.n	d87bc <__cmpdf2+0x4>
   d87ae:	bf00      	nop

000d87b0 <__ledf2>:
   d87b0:	f04f 0c01 	mov.w	ip, #1
   d87b4:	e002      	b.n	d87bc <__cmpdf2+0x4>
   d87b6:	bf00      	nop

000d87b8 <__cmpdf2>:
   d87b8:	f04f 0c01 	mov.w	ip, #1
   d87bc:	f84d cd04 	str.w	ip, [sp, #-4]!
   d87c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d87c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d87c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d87cc:	bf18      	it	ne
   d87ce:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d87d2:	d01b      	beq.n	d880c <__cmpdf2+0x54>
   d87d4:	b001      	add	sp, #4
   d87d6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d87da:	bf0c      	ite	eq
   d87dc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d87e0:	ea91 0f03 	teqne	r1, r3
   d87e4:	bf02      	ittt	eq
   d87e6:	ea90 0f02 	teqeq	r0, r2
   d87ea:	2000      	moveq	r0, #0
   d87ec:	4770      	bxeq	lr
   d87ee:	f110 0f00 	cmn.w	r0, #0
   d87f2:	ea91 0f03 	teq	r1, r3
   d87f6:	bf58      	it	pl
   d87f8:	4299      	cmppl	r1, r3
   d87fa:	bf08      	it	eq
   d87fc:	4290      	cmpeq	r0, r2
   d87fe:	bf2c      	ite	cs
   d8800:	17d8      	asrcs	r0, r3, #31
   d8802:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8806:	f040 0001 	orr.w	r0, r0, #1
   d880a:	4770      	bx	lr
   d880c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8810:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8814:	d102      	bne.n	d881c <__cmpdf2+0x64>
   d8816:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d881a:	d107      	bne.n	d882c <__cmpdf2+0x74>
   d881c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8820:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8824:	d1d6      	bne.n	d87d4 <__cmpdf2+0x1c>
   d8826:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d882a:	d0d3      	beq.n	d87d4 <__cmpdf2+0x1c>
   d882c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8830:	4770      	bx	lr
   d8832:	bf00      	nop

000d8834 <__aeabi_cdrcmple>:
   d8834:	4684      	mov	ip, r0
   d8836:	4610      	mov	r0, r2
   d8838:	4662      	mov	r2, ip
   d883a:	468c      	mov	ip, r1
   d883c:	4619      	mov	r1, r3
   d883e:	4663      	mov	r3, ip
   d8840:	e000      	b.n	d8844 <__aeabi_cdcmpeq>
   d8842:	bf00      	nop

000d8844 <__aeabi_cdcmpeq>:
   d8844:	b501      	push	{r0, lr}
   d8846:	f7ff ffb7 	bl	d87b8 <__cmpdf2>
   d884a:	2800      	cmp	r0, #0
   d884c:	bf48      	it	mi
   d884e:	f110 0f00 	cmnmi.w	r0, #0
   d8852:	bd01      	pop	{r0, pc}

000d8854 <__aeabi_dcmpeq>:
   d8854:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8858:	f7ff fff4 	bl	d8844 <__aeabi_cdcmpeq>
   d885c:	bf0c      	ite	eq
   d885e:	2001      	moveq	r0, #1
   d8860:	2000      	movne	r0, #0
   d8862:	f85d fb08 	ldr.w	pc, [sp], #8
   d8866:	bf00      	nop

000d8868 <__aeabi_dcmplt>:
   d8868:	f84d ed08 	str.w	lr, [sp, #-8]!
   d886c:	f7ff ffea 	bl	d8844 <__aeabi_cdcmpeq>
   d8870:	bf34      	ite	cc
   d8872:	2001      	movcc	r0, #1
   d8874:	2000      	movcs	r0, #0
   d8876:	f85d fb08 	ldr.w	pc, [sp], #8
   d887a:	bf00      	nop

000d887c <__aeabi_dcmple>:
   d887c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8880:	f7ff ffe0 	bl	d8844 <__aeabi_cdcmpeq>
   d8884:	bf94      	ite	ls
   d8886:	2001      	movls	r0, #1
   d8888:	2000      	movhi	r0, #0
   d888a:	f85d fb08 	ldr.w	pc, [sp], #8
   d888e:	bf00      	nop

000d8890 <__aeabi_dcmpge>:
   d8890:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8894:	f7ff ffce 	bl	d8834 <__aeabi_cdrcmple>
   d8898:	bf94      	ite	ls
   d889a:	2001      	movls	r0, #1
   d889c:	2000      	movhi	r0, #0
   d889e:	f85d fb08 	ldr.w	pc, [sp], #8
   d88a2:	bf00      	nop

000d88a4 <__aeabi_dcmpgt>:
   d88a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d88a8:	f7ff ffc4 	bl	d8834 <__aeabi_cdrcmple>
   d88ac:	bf34      	ite	cc
   d88ae:	2001      	movcc	r0, #1
   d88b0:	2000      	movcs	r0, #0
   d88b2:	f85d fb08 	ldr.w	pc, [sp], #8
   d88b6:	bf00      	nop

000d88b8 <__aeabi_dcmpun>:
   d88b8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d88bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d88c0:	d102      	bne.n	d88c8 <__aeabi_dcmpun+0x10>
   d88c2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d88c6:	d10a      	bne.n	d88de <__aeabi_dcmpun+0x26>
   d88c8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d88cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d88d0:	d102      	bne.n	d88d8 <__aeabi_dcmpun+0x20>
   d88d2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d88d6:	d102      	bne.n	d88de <__aeabi_dcmpun+0x26>
   d88d8:	f04f 0000 	mov.w	r0, #0
   d88dc:	4770      	bx	lr
   d88de:	f04f 0001 	mov.w	r0, #1
   d88e2:	4770      	bx	lr

000d88e4 <__aeabi_d2uiz>:
   d88e4:	004a      	lsls	r2, r1, #1
   d88e6:	d211      	bcs.n	d890c <__aeabi_d2uiz+0x28>
   d88e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d88ec:	d211      	bcs.n	d8912 <__aeabi_d2uiz+0x2e>
   d88ee:	d50d      	bpl.n	d890c <__aeabi_d2uiz+0x28>
   d88f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d88f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d88f8:	d40e      	bmi.n	d8918 <__aeabi_d2uiz+0x34>
   d88fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d88fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8902:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8906:	fa23 f002 	lsr.w	r0, r3, r2
   d890a:	4770      	bx	lr
   d890c:	f04f 0000 	mov.w	r0, #0
   d8910:	4770      	bx	lr
   d8912:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8916:	d102      	bne.n	d891e <__aeabi_d2uiz+0x3a>
   d8918:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d891c:	4770      	bx	lr
   d891e:	f04f 0000 	mov.w	r0, #0
   d8922:	4770      	bx	lr

000d8924 <__aeabi_d2f>:
   d8924:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8928:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d892c:	bf24      	itt	cs
   d892e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8932:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8936:	d90d      	bls.n	d8954 <__aeabi_d2f+0x30>
   d8938:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d893c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8940:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8944:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8948:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d894c:	bf08      	it	eq
   d894e:	f020 0001 	biceq.w	r0, r0, #1
   d8952:	4770      	bx	lr
   d8954:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8958:	d121      	bne.n	d899e <__aeabi_d2f+0x7a>
   d895a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d895e:	bfbc      	itt	lt
   d8960:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8964:	4770      	bxlt	lr
   d8966:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d896a:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d896e:	f1c2 0218 	rsb	r2, r2, #24
   d8972:	f1c2 0c20 	rsb	ip, r2, #32
   d8976:	fa10 f30c 	lsls.w	r3, r0, ip
   d897a:	fa20 f002 	lsr.w	r0, r0, r2
   d897e:	bf18      	it	ne
   d8980:	f040 0001 	orrne.w	r0, r0, #1
   d8984:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8988:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d898c:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8990:	ea40 000c 	orr.w	r0, r0, ip
   d8994:	fa23 f302 	lsr.w	r3, r3, r2
   d8998:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d899c:	e7cc      	b.n	d8938 <__aeabi_d2f+0x14>
   d899e:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d89a2:	d107      	bne.n	d89b4 <__aeabi_d2f+0x90>
   d89a4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d89a8:	bf1e      	ittt	ne
   d89aa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d89ae:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d89b2:	4770      	bxne	lr
   d89b4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d89b8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d89bc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d89c0:	4770      	bx	lr
   d89c2:	bf00      	nop

000d89c4 <__aeabi_uldivmod>:
   d89c4:	b953      	cbnz	r3, d89dc <__aeabi_uldivmod+0x18>
   d89c6:	b94a      	cbnz	r2, d89dc <__aeabi_uldivmod+0x18>
   d89c8:	2900      	cmp	r1, #0
   d89ca:	bf08      	it	eq
   d89cc:	2800      	cmpeq	r0, #0
   d89ce:	bf1c      	itt	ne
   d89d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d89d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d89d8:	f000 b98c 	b.w	d8cf4 <__aeabi_idiv0>
   d89dc:	f1ad 0c08 	sub.w	ip, sp, #8
   d89e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d89e4:	f000 f824 	bl	d8a30 <__udivmoddi4>
   d89e8:	f8dd e004 	ldr.w	lr, [sp, #4]
   d89ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d89f0:	b004      	add	sp, #16
   d89f2:	4770      	bx	lr

000d89f4 <__aeabi_d2ulz>:
   d89f4:	b5d0      	push	{r4, r6, r7, lr}
   d89f6:	4b0c      	ldr	r3, [pc, #48]	; (d8a28 <__aeabi_d2ulz+0x34>)
   d89f8:	2200      	movs	r2, #0
   d89fa:	4606      	mov	r6, r0
   d89fc:	460f      	mov	r7, r1
   d89fe:	f7ff fcc1 	bl	d8384 <__aeabi_dmul>
   d8a02:	f7ff ff6f 	bl	d88e4 <__aeabi_d2uiz>
   d8a06:	4604      	mov	r4, r0
   d8a08:	f7ff fc42 	bl	d8290 <__aeabi_ui2d>
   d8a0c:	4b07      	ldr	r3, [pc, #28]	; (d8a2c <__aeabi_d2ulz+0x38>)
   d8a0e:	2200      	movs	r2, #0
   d8a10:	f7ff fcb8 	bl	d8384 <__aeabi_dmul>
   d8a14:	4602      	mov	r2, r0
   d8a16:	460b      	mov	r3, r1
   d8a18:	4630      	mov	r0, r6
   d8a1a:	4639      	mov	r1, r7
   d8a1c:	f7ff fafa 	bl	d8014 <__aeabi_dsub>
   d8a20:	f7ff ff60 	bl	d88e4 <__aeabi_d2uiz>
   d8a24:	4621      	mov	r1, r4
   d8a26:	bdd0      	pop	{r4, r6, r7, pc}
   d8a28:	3df00000 	.word	0x3df00000
   d8a2c:	41f00000 	.word	0x41f00000

000d8a30 <__udivmoddi4>:
   d8a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8a34:	9d08      	ldr	r5, [sp, #32]
   d8a36:	4604      	mov	r4, r0
   d8a38:	468c      	mov	ip, r1
   d8a3a:	2b00      	cmp	r3, #0
   d8a3c:	f040 8083 	bne.w	d8b46 <__udivmoddi4+0x116>
   d8a40:	428a      	cmp	r2, r1
   d8a42:	4617      	mov	r7, r2
   d8a44:	d947      	bls.n	d8ad6 <__udivmoddi4+0xa6>
   d8a46:	fab2 f282 	clz	r2, r2
   d8a4a:	b142      	cbz	r2, d8a5e <__udivmoddi4+0x2e>
   d8a4c:	f1c2 0020 	rsb	r0, r2, #32
   d8a50:	fa24 f000 	lsr.w	r0, r4, r0
   d8a54:	4091      	lsls	r1, r2
   d8a56:	4097      	lsls	r7, r2
   d8a58:	ea40 0c01 	orr.w	ip, r0, r1
   d8a5c:	4094      	lsls	r4, r2
   d8a5e:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d8a62:	0c23      	lsrs	r3, r4, #16
   d8a64:	fbbc f6f8 	udiv	r6, ip, r8
   d8a68:	fa1f fe87 	uxth.w	lr, r7
   d8a6c:	fb08 c116 	mls	r1, r8, r6, ip
   d8a70:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d8a74:	fb06 f10e 	mul.w	r1, r6, lr
   d8a78:	4299      	cmp	r1, r3
   d8a7a:	d909      	bls.n	d8a90 <__udivmoddi4+0x60>
   d8a7c:	18fb      	adds	r3, r7, r3
   d8a7e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   d8a82:	f080 8119 	bcs.w	d8cb8 <__udivmoddi4+0x288>
   d8a86:	4299      	cmp	r1, r3
   d8a88:	f240 8116 	bls.w	d8cb8 <__udivmoddi4+0x288>
   d8a8c:	3e02      	subs	r6, #2
   d8a8e:	443b      	add	r3, r7
   d8a90:	1a5b      	subs	r3, r3, r1
   d8a92:	b2a4      	uxth	r4, r4
   d8a94:	fbb3 f0f8 	udiv	r0, r3, r8
   d8a98:	fb08 3310 	mls	r3, r8, r0, r3
   d8a9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d8aa0:	fb00 fe0e 	mul.w	lr, r0, lr
   d8aa4:	45a6      	cmp	lr, r4
   d8aa6:	d909      	bls.n	d8abc <__udivmoddi4+0x8c>
   d8aa8:	193c      	adds	r4, r7, r4
   d8aaa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8aae:	f080 8105 	bcs.w	d8cbc <__udivmoddi4+0x28c>
   d8ab2:	45a6      	cmp	lr, r4
   d8ab4:	f240 8102 	bls.w	d8cbc <__udivmoddi4+0x28c>
   d8ab8:	3802      	subs	r0, #2
   d8aba:	443c      	add	r4, r7
   d8abc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d8ac0:	eba4 040e 	sub.w	r4, r4, lr
   d8ac4:	2600      	movs	r6, #0
   d8ac6:	b11d      	cbz	r5, d8ad0 <__udivmoddi4+0xa0>
   d8ac8:	40d4      	lsrs	r4, r2
   d8aca:	2300      	movs	r3, #0
   d8acc:	e9c5 4300 	strd	r4, r3, [r5]
   d8ad0:	4631      	mov	r1, r6
   d8ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8ad6:	b902      	cbnz	r2, d8ada <__udivmoddi4+0xaa>
   d8ad8:	deff      	udf	#255	; 0xff
   d8ada:	fab2 f282 	clz	r2, r2
   d8ade:	2a00      	cmp	r2, #0
   d8ae0:	d150      	bne.n	d8b84 <__udivmoddi4+0x154>
   d8ae2:	1bcb      	subs	r3, r1, r7
   d8ae4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d8ae8:	fa1f f887 	uxth.w	r8, r7
   d8aec:	2601      	movs	r6, #1
   d8aee:	fbb3 fcfe 	udiv	ip, r3, lr
   d8af2:	0c21      	lsrs	r1, r4, #16
   d8af4:	fb0e 331c 	mls	r3, lr, ip, r3
   d8af8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d8afc:	fb08 f30c 	mul.w	r3, r8, ip
   d8b00:	428b      	cmp	r3, r1
   d8b02:	d907      	bls.n	d8b14 <__udivmoddi4+0xe4>
   d8b04:	1879      	adds	r1, r7, r1
   d8b06:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   d8b0a:	d202      	bcs.n	d8b12 <__udivmoddi4+0xe2>
   d8b0c:	428b      	cmp	r3, r1
   d8b0e:	f200 80e9 	bhi.w	d8ce4 <__udivmoddi4+0x2b4>
   d8b12:	4684      	mov	ip, r0
   d8b14:	1ac9      	subs	r1, r1, r3
   d8b16:	b2a3      	uxth	r3, r4
   d8b18:	fbb1 f0fe 	udiv	r0, r1, lr
   d8b1c:	fb0e 1110 	mls	r1, lr, r0, r1
   d8b20:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d8b24:	fb08 f800 	mul.w	r8, r8, r0
   d8b28:	45a0      	cmp	r8, r4
   d8b2a:	d907      	bls.n	d8b3c <__udivmoddi4+0x10c>
   d8b2c:	193c      	adds	r4, r7, r4
   d8b2e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8b32:	d202      	bcs.n	d8b3a <__udivmoddi4+0x10a>
   d8b34:	45a0      	cmp	r8, r4
   d8b36:	f200 80d9 	bhi.w	d8cec <__udivmoddi4+0x2bc>
   d8b3a:	4618      	mov	r0, r3
   d8b3c:	eba4 0408 	sub.w	r4, r4, r8
   d8b40:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d8b44:	e7bf      	b.n	d8ac6 <__udivmoddi4+0x96>
   d8b46:	428b      	cmp	r3, r1
   d8b48:	d909      	bls.n	d8b5e <__udivmoddi4+0x12e>
   d8b4a:	2d00      	cmp	r5, #0
   d8b4c:	f000 80b1 	beq.w	d8cb2 <__udivmoddi4+0x282>
   d8b50:	2600      	movs	r6, #0
   d8b52:	e9c5 0100 	strd	r0, r1, [r5]
   d8b56:	4630      	mov	r0, r6
   d8b58:	4631      	mov	r1, r6
   d8b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8b5e:	fab3 f683 	clz	r6, r3
   d8b62:	2e00      	cmp	r6, #0
   d8b64:	d14a      	bne.n	d8bfc <__udivmoddi4+0x1cc>
   d8b66:	428b      	cmp	r3, r1
   d8b68:	d302      	bcc.n	d8b70 <__udivmoddi4+0x140>
   d8b6a:	4282      	cmp	r2, r0
   d8b6c:	f200 80b8 	bhi.w	d8ce0 <__udivmoddi4+0x2b0>
   d8b70:	1a84      	subs	r4, r0, r2
   d8b72:	eb61 0103 	sbc.w	r1, r1, r3
   d8b76:	2001      	movs	r0, #1
   d8b78:	468c      	mov	ip, r1
   d8b7a:	2d00      	cmp	r5, #0
   d8b7c:	d0a8      	beq.n	d8ad0 <__udivmoddi4+0xa0>
   d8b7e:	e9c5 4c00 	strd	r4, ip, [r5]
   d8b82:	e7a5      	b.n	d8ad0 <__udivmoddi4+0xa0>
   d8b84:	f1c2 0320 	rsb	r3, r2, #32
   d8b88:	fa20 f603 	lsr.w	r6, r0, r3
   d8b8c:	4097      	lsls	r7, r2
   d8b8e:	fa01 f002 	lsl.w	r0, r1, r2
   d8b92:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d8b96:	40d9      	lsrs	r1, r3
   d8b98:	4330      	orrs	r0, r6
   d8b9a:	0c03      	lsrs	r3, r0, #16
   d8b9c:	fbb1 f6fe 	udiv	r6, r1, lr
   d8ba0:	fa1f f887 	uxth.w	r8, r7
   d8ba4:	fb0e 1116 	mls	r1, lr, r6, r1
   d8ba8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d8bac:	fb06 f108 	mul.w	r1, r6, r8
   d8bb0:	4299      	cmp	r1, r3
   d8bb2:	fa04 f402 	lsl.w	r4, r4, r2
   d8bb6:	d909      	bls.n	d8bcc <__udivmoddi4+0x19c>
   d8bb8:	18fb      	adds	r3, r7, r3
   d8bba:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   d8bbe:	f080 808d 	bcs.w	d8cdc <__udivmoddi4+0x2ac>
   d8bc2:	4299      	cmp	r1, r3
   d8bc4:	f240 808a 	bls.w	d8cdc <__udivmoddi4+0x2ac>
   d8bc8:	3e02      	subs	r6, #2
   d8bca:	443b      	add	r3, r7
   d8bcc:	1a5b      	subs	r3, r3, r1
   d8bce:	b281      	uxth	r1, r0
   d8bd0:	fbb3 f0fe 	udiv	r0, r3, lr
   d8bd4:	fb0e 3310 	mls	r3, lr, r0, r3
   d8bd8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d8bdc:	fb00 f308 	mul.w	r3, r0, r8
   d8be0:	428b      	cmp	r3, r1
   d8be2:	d907      	bls.n	d8bf4 <__udivmoddi4+0x1c4>
   d8be4:	1879      	adds	r1, r7, r1
   d8be6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   d8bea:	d273      	bcs.n	d8cd4 <__udivmoddi4+0x2a4>
   d8bec:	428b      	cmp	r3, r1
   d8bee:	d971      	bls.n	d8cd4 <__udivmoddi4+0x2a4>
   d8bf0:	3802      	subs	r0, #2
   d8bf2:	4439      	add	r1, r7
   d8bf4:	1acb      	subs	r3, r1, r3
   d8bf6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d8bfa:	e778      	b.n	d8aee <__udivmoddi4+0xbe>
   d8bfc:	f1c6 0c20 	rsb	ip, r6, #32
   d8c00:	fa03 f406 	lsl.w	r4, r3, r6
   d8c04:	fa22 f30c 	lsr.w	r3, r2, ip
   d8c08:	431c      	orrs	r4, r3
   d8c0a:	fa20 f70c 	lsr.w	r7, r0, ip
   d8c0e:	fa01 f306 	lsl.w	r3, r1, r6
   d8c12:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d8c16:	fa21 f10c 	lsr.w	r1, r1, ip
   d8c1a:	431f      	orrs	r7, r3
   d8c1c:	0c3b      	lsrs	r3, r7, #16
   d8c1e:	fbb1 f9fe 	udiv	r9, r1, lr
   d8c22:	fa1f f884 	uxth.w	r8, r4
   d8c26:	fb0e 1119 	mls	r1, lr, r9, r1
   d8c2a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d8c2e:	fb09 fa08 	mul.w	sl, r9, r8
   d8c32:	458a      	cmp	sl, r1
   d8c34:	fa02 f206 	lsl.w	r2, r2, r6
   d8c38:	fa00 f306 	lsl.w	r3, r0, r6
   d8c3c:	d908      	bls.n	d8c50 <__udivmoddi4+0x220>
   d8c3e:	1861      	adds	r1, r4, r1
   d8c40:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d8c44:	d248      	bcs.n	d8cd8 <__udivmoddi4+0x2a8>
   d8c46:	458a      	cmp	sl, r1
   d8c48:	d946      	bls.n	d8cd8 <__udivmoddi4+0x2a8>
   d8c4a:	f1a9 0902 	sub.w	r9, r9, #2
   d8c4e:	4421      	add	r1, r4
   d8c50:	eba1 010a 	sub.w	r1, r1, sl
   d8c54:	b2bf      	uxth	r7, r7
   d8c56:	fbb1 f0fe 	udiv	r0, r1, lr
   d8c5a:	fb0e 1110 	mls	r1, lr, r0, r1
   d8c5e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d8c62:	fb00 f808 	mul.w	r8, r0, r8
   d8c66:	45b8      	cmp	r8, r7
   d8c68:	d907      	bls.n	d8c7a <__udivmoddi4+0x24a>
   d8c6a:	19e7      	adds	r7, r4, r7
   d8c6c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   d8c70:	d22e      	bcs.n	d8cd0 <__udivmoddi4+0x2a0>
   d8c72:	45b8      	cmp	r8, r7
   d8c74:	d92c      	bls.n	d8cd0 <__udivmoddi4+0x2a0>
   d8c76:	3802      	subs	r0, #2
   d8c78:	4427      	add	r7, r4
   d8c7a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d8c7e:	eba7 0708 	sub.w	r7, r7, r8
   d8c82:	fba0 8902 	umull	r8, r9, r0, r2
   d8c86:	454f      	cmp	r7, r9
   d8c88:	46c6      	mov	lr, r8
   d8c8a:	4649      	mov	r1, r9
   d8c8c:	d31a      	bcc.n	d8cc4 <__udivmoddi4+0x294>
   d8c8e:	d017      	beq.n	d8cc0 <__udivmoddi4+0x290>
   d8c90:	b15d      	cbz	r5, d8caa <__udivmoddi4+0x27a>
   d8c92:	ebb3 020e 	subs.w	r2, r3, lr
   d8c96:	eb67 0701 	sbc.w	r7, r7, r1
   d8c9a:	fa07 fc0c 	lsl.w	ip, r7, ip
   d8c9e:	40f2      	lsrs	r2, r6
   d8ca0:	ea4c 0202 	orr.w	r2, ip, r2
   d8ca4:	40f7      	lsrs	r7, r6
   d8ca6:	e9c5 2700 	strd	r2, r7, [r5]
   d8caa:	2600      	movs	r6, #0
   d8cac:	4631      	mov	r1, r6
   d8cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8cb2:	462e      	mov	r6, r5
   d8cb4:	4628      	mov	r0, r5
   d8cb6:	e70b      	b.n	d8ad0 <__udivmoddi4+0xa0>
   d8cb8:	4606      	mov	r6, r0
   d8cba:	e6e9      	b.n	d8a90 <__udivmoddi4+0x60>
   d8cbc:	4618      	mov	r0, r3
   d8cbe:	e6fd      	b.n	d8abc <__udivmoddi4+0x8c>
   d8cc0:	4543      	cmp	r3, r8
   d8cc2:	d2e5      	bcs.n	d8c90 <__udivmoddi4+0x260>
   d8cc4:	ebb8 0e02 	subs.w	lr, r8, r2
   d8cc8:	eb69 0104 	sbc.w	r1, r9, r4
   d8ccc:	3801      	subs	r0, #1
   d8cce:	e7df      	b.n	d8c90 <__udivmoddi4+0x260>
   d8cd0:	4608      	mov	r0, r1
   d8cd2:	e7d2      	b.n	d8c7a <__udivmoddi4+0x24a>
   d8cd4:	4660      	mov	r0, ip
   d8cd6:	e78d      	b.n	d8bf4 <__udivmoddi4+0x1c4>
   d8cd8:	4681      	mov	r9, r0
   d8cda:	e7b9      	b.n	d8c50 <__udivmoddi4+0x220>
   d8cdc:	4666      	mov	r6, ip
   d8cde:	e775      	b.n	d8bcc <__udivmoddi4+0x19c>
   d8ce0:	4630      	mov	r0, r6
   d8ce2:	e74a      	b.n	d8b7a <__udivmoddi4+0x14a>
   d8ce4:	f1ac 0c02 	sub.w	ip, ip, #2
   d8ce8:	4439      	add	r1, r7
   d8cea:	e713      	b.n	d8b14 <__udivmoddi4+0xe4>
   d8cec:	3802      	subs	r0, #2
   d8cee:	443c      	add	r4, r7
   d8cf0:	e724      	b.n	d8b3c <__udivmoddi4+0x10c>
   d8cf2:	bf00      	nop

000d8cf4 <__aeabi_idiv0>:
   d8cf4:	4770      	bx	lr
   d8cf6:	bf00      	nop

000d8cf8 <asctime_r>:
   d8cf8:	b510      	push	{r4, lr}
   d8cfa:	460c      	mov	r4, r1
   d8cfc:	6941      	ldr	r1, [r0, #20]
   d8cfe:	6903      	ldr	r3, [r0, #16]
   d8d00:	6982      	ldr	r2, [r0, #24]
   d8d02:	b086      	sub	sp, #24
   d8d04:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d8d08:	9104      	str	r1, [sp, #16]
   d8d0a:	6801      	ldr	r1, [r0, #0]
   d8d0c:	9103      	str	r1, [sp, #12]
   d8d0e:	6841      	ldr	r1, [r0, #4]
   d8d10:	9102      	str	r1, [sp, #8]
   d8d12:	6881      	ldr	r1, [r0, #8]
   d8d14:	9101      	str	r1, [sp, #4]
   d8d16:	68c1      	ldr	r1, [r0, #12]
   d8d18:	9100      	str	r1, [sp, #0]
   d8d1a:	4907      	ldr	r1, [pc, #28]	; (d8d38 <asctime_r+0x40>)
   d8d1c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d8d20:	440b      	add	r3, r1
   d8d22:	4906      	ldr	r1, [pc, #24]	; (d8d3c <asctime_r+0x44>)
   d8d24:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d8d28:	440a      	add	r2, r1
   d8d2a:	4620      	mov	r0, r4
   d8d2c:	4904      	ldr	r1, [pc, #16]	; (d8d40 <asctime_r+0x48>)
   d8d2e:	f7fd fc7f 	bl	d6630 <siprintf>
   d8d32:	4620      	mov	r0, r4
   d8d34:	b006      	add	sp, #24
   d8d36:	bd10      	pop	{r4, pc}
   d8d38:	000d96ce 	.word	0x000d96ce
   d8d3c:	000d96b9 	.word	0x000d96b9
   d8d40:	000d9699 	.word	0x000d9699

000d8d44 <atoi>:
   d8d44:	220a      	movs	r2, #10
   d8d46:	2100      	movs	r1, #0
   d8d48:	f000 b938 	b.w	d8fbc <strtol>

000d8d4c <__cxa_atexit>:
   d8d4c:	b510      	push	{r4, lr}
   d8d4e:	4c05      	ldr	r4, [pc, #20]	; (d8d64 <__cxa_atexit+0x18>)
   d8d50:	4613      	mov	r3, r2
   d8d52:	b12c      	cbz	r4, d8d60 <__cxa_atexit+0x14>
   d8d54:	460a      	mov	r2, r1
   d8d56:	4601      	mov	r1, r0
   d8d58:	2002      	movs	r0, #2
   d8d5a:	f3af 8000 	nop.w
   d8d5e:	bd10      	pop	{r4, pc}
   d8d60:	4620      	mov	r0, r4
   d8d62:	e7fc      	b.n	d8d5e <__cxa_atexit+0x12>
   d8d64:	00000000 	.word	0x00000000

000d8d68 <gmtime>:
   d8d68:	b538      	push	{r3, r4, r5, lr}
   d8d6a:	4b07      	ldr	r3, [pc, #28]	; (d8d88 <gmtime+0x20>)
   d8d6c:	681d      	ldr	r5, [r3, #0]
   d8d6e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   d8d70:	4604      	mov	r4, r0
   d8d72:	b91b      	cbnz	r3, d8d7c <gmtime+0x14>
   d8d74:	2024      	movs	r0, #36	; 0x24
   d8d76:	f7fd fc43 	bl	d6600 <malloc>
   d8d7a:	63e8      	str	r0, [r5, #60]	; 0x3c
   d8d7c:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   d8d7e:	4620      	mov	r0, r4
   d8d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8d84:	f7fd bc94 	b.w	d66b0 <gmtime_r>
   d8d88:	2003e390 	.word	0x2003e390

000d8d8c <memcpy>:
   d8d8c:	440a      	add	r2, r1
   d8d8e:	4291      	cmp	r1, r2
   d8d90:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8d94:	d100      	bne.n	d8d98 <memcpy+0xc>
   d8d96:	4770      	bx	lr
   d8d98:	b510      	push	{r4, lr}
   d8d9a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8d9e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8da2:	4291      	cmp	r1, r2
   d8da4:	d1f9      	bne.n	d8d9a <memcpy+0xe>
   d8da6:	bd10      	pop	{r4, pc}

000d8da8 <memmove>:
   d8da8:	4288      	cmp	r0, r1
   d8daa:	b510      	push	{r4, lr}
   d8dac:	eb01 0402 	add.w	r4, r1, r2
   d8db0:	d902      	bls.n	d8db8 <memmove+0x10>
   d8db2:	4284      	cmp	r4, r0
   d8db4:	4623      	mov	r3, r4
   d8db6:	d807      	bhi.n	d8dc8 <memmove+0x20>
   d8db8:	1e43      	subs	r3, r0, #1
   d8dba:	42a1      	cmp	r1, r4
   d8dbc:	d008      	beq.n	d8dd0 <memmove+0x28>
   d8dbe:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8dc2:	f803 2f01 	strb.w	r2, [r3, #1]!
   d8dc6:	e7f8      	b.n	d8dba <memmove+0x12>
   d8dc8:	4402      	add	r2, r0
   d8dca:	4601      	mov	r1, r0
   d8dcc:	428a      	cmp	r2, r1
   d8dce:	d100      	bne.n	d8dd2 <memmove+0x2a>
   d8dd0:	bd10      	pop	{r4, pc}
   d8dd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8dd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d8dda:	e7f7      	b.n	d8dcc <memmove+0x24>

000d8ddc <memset>:
   d8ddc:	4402      	add	r2, r0
   d8dde:	4603      	mov	r3, r0
   d8de0:	4293      	cmp	r3, r2
   d8de2:	d100      	bne.n	d8de6 <memset+0xa>
   d8de4:	4770      	bx	lr
   d8de6:	f803 1b01 	strb.w	r1, [r3], #1
   d8dea:	e7f9      	b.n	d8de0 <memset+0x4>

000d8dec <srand>:
   d8dec:	b538      	push	{r3, r4, r5, lr}
   d8dee:	4b0d      	ldr	r3, [pc, #52]	; (d8e24 <srand+0x38>)
   d8df0:	681d      	ldr	r5, [r3, #0]
   d8df2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8df4:	4604      	mov	r4, r0
   d8df6:	b97b      	cbnz	r3, d8e18 <srand+0x2c>
   d8df8:	2018      	movs	r0, #24
   d8dfa:	f7fd fc01 	bl	d6600 <malloc>
   d8dfe:	4a0a      	ldr	r2, [pc, #40]	; (d8e28 <srand+0x3c>)
   d8e00:	4b0a      	ldr	r3, [pc, #40]	; (d8e2c <srand+0x40>)
   d8e02:	63a8      	str	r0, [r5, #56]	; 0x38
   d8e04:	e9c0 2300 	strd	r2, r3, [r0]
   d8e08:	4b09      	ldr	r3, [pc, #36]	; (d8e30 <srand+0x44>)
   d8e0a:	6083      	str	r3, [r0, #8]
   d8e0c:	230b      	movs	r3, #11
   d8e0e:	8183      	strh	r3, [r0, #12]
   d8e10:	2201      	movs	r2, #1
   d8e12:	2300      	movs	r3, #0
   d8e14:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8e18:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8e1a:	2200      	movs	r2, #0
   d8e1c:	611c      	str	r4, [r3, #16]
   d8e1e:	615a      	str	r2, [r3, #20]
   d8e20:	bd38      	pop	{r3, r4, r5, pc}
   d8e22:	bf00      	nop
   d8e24:	2003e390 	.word	0x2003e390
   d8e28:	abcd330e 	.word	0xabcd330e
   d8e2c:	e66d1234 	.word	0xe66d1234
   d8e30:	0005deec 	.word	0x0005deec

000d8e34 <strcmp>:
   d8e34:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8e38:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8e3c:	2a01      	cmp	r2, #1
   d8e3e:	bf28      	it	cs
   d8e40:	429a      	cmpcs	r2, r3
   d8e42:	d0f7      	beq.n	d8e34 <strcmp>
   d8e44:	1ad0      	subs	r0, r2, r3
   d8e46:	4770      	bx	lr

000d8e48 <strcpy>:
   d8e48:	4603      	mov	r3, r0
   d8e4a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8e4e:	f803 2b01 	strb.w	r2, [r3], #1
   d8e52:	2a00      	cmp	r2, #0
   d8e54:	d1f9      	bne.n	d8e4a <strcpy+0x2>
   d8e56:	4770      	bx	lr

000d8e58 <strdup>:
   d8e58:	4b02      	ldr	r3, [pc, #8]	; (d8e64 <strdup+0xc>)
   d8e5a:	4601      	mov	r1, r0
   d8e5c:	6818      	ldr	r0, [r3, #0]
   d8e5e:	f000 b803 	b.w	d8e68 <_strdup_r>
   d8e62:	bf00      	nop
   d8e64:	2003e390 	.word	0x2003e390

000d8e68 <_strdup_r>:
   d8e68:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8e6a:	4604      	mov	r4, r0
   d8e6c:	4608      	mov	r0, r1
   d8e6e:	460d      	mov	r5, r1
   d8e70:	f000 f80f 	bl	d8e92 <strlen>
   d8e74:	1c42      	adds	r2, r0, #1
   d8e76:	4611      	mov	r1, r2
   d8e78:	4620      	mov	r0, r4
   d8e7a:	9201      	str	r2, [sp, #4]
   d8e7c:	f7fd fbf0 	bl	d6660 <_malloc_r>
   d8e80:	4604      	mov	r4, r0
   d8e82:	b118      	cbz	r0, d8e8c <_strdup_r+0x24>
   d8e84:	9a01      	ldr	r2, [sp, #4]
   d8e86:	4629      	mov	r1, r5
   d8e88:	f7ff ff80 	bl	d8d8c <memcpy>
   d8e8c:	4620      	mov	r0, r4
   d8e8e:	b003      	add	sp, #12
   d8e90:	bd30      	pop	{r4, r5, pc}

000d8e92 <strlen>:
   d8e92:	4603      	mov	r3, r0
   d8e94:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8e98:	2a00      	cmp	r2, #0
   d8e9a:	d1fb      	bne.n	d8e94 <strlen+0x2>
   d8e9c:	1a18      	subs	r0, r3, r0
   d8e9e:	3801      	subs	r0, #1
   d8ea0:	4770      	bx	lr

000d8ea2 <strncpy>:
   d8ea2:	b510      	push	{r4, lr}
   d8ea4:	3901      	subs	r1, #1
   d8ea6:	4603      	mov	r3, r0
   d8ea8:	b132      	cbz	r2, d8eb8 <strncpy+0x16>
   d8eaa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d8eae:	f803 4b01 	strb.w	r4, [r3], #1
   d8eb2:	3a01      	subs	r2, #1
   d8eb4:	2c00      	cmp	r4, #0
   d8eb6:	d1f7      	bne.n	d8ea8 <strncpy+0x6>
   d8eb8:	441a      	add	r2, r3
   d8eba:	2100      	movs	r1, #0
   d8ebc:	4293      	cmp	r3, r2
   d8ebe:	d100      	bne.n	d8ec2 <strncpy+0x20>
   d8ec0:	bd10      	pop	{r4, pc}
   d8ec2:	f803 1b01 	strb.w	r1, [r3], #1
   d8ec6:	e7f9      	b.n	d8ebc <strncpy+0x1a>

000d8ec8 <_strtol_l.isra.0>:
   d8ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8ecc:	4e3a      	ldr	r6, [pc, #232]	; (d8fb8 <_strtol_l.isra.0+0xf0>)
   d8ece:	4686      	mov	lr, r0
   d8ed0:	468c      	mov	ip, r1
   d8ed2:	4660      	mov	r0, ip
   d8ed4:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8ed8:	5da5      	ldrb	r5, [r4, r6]
   d8eda:	f015 0508 	ands.w	r5, r5, #8
   d8ede:	d1f8      	bne.n	d8ed2 <_strtol_l.isra.0+0xa>
   d8ee0:	2c2d      	cmp	r4, #45	; 0x2d
   d8ee2:	d133      	bne.n	d8f4c <_strtol_l.isra.0+0x84>
   d8ee4:	f89c 4000 	ldrb.w	r4, [ip]
   d8ee8:	f04f 0801 	mov.w	r8, #1
   d8eec:	f100 0c02 	add.w	ip, r0, #2
   d8ef0:	2b00      	cmp	r3, #0
   d8ef2:	d05c      	beq.n	d8fae <_strtol_l.isra.0+0xe6>
   d8ef4:	2b10      	cmp	r3, #16
   d8ef6:	d10c      	bne.n	d8f12 <_strtol_l.isra.0+0x4a>
   d8ef8:	2c30      	cmp	r4, #48	; 0x30
   d8efa:	d10a      	bne.n	d8f12 <_strtol_l.isra.0+0x4a>
   d8efc:	f89c 0000 	ldrb.w	r0, [ip]
   d8f00:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8f04:	2858      	cmp	r0, #88	; 0x58
   d8f06:	d14d      	bne.n	d8fa4 <_strtol_l.isra.0+0xdc>
   d8f08:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d8f0c:	2310      	movs	r3, #16
   d8f0e:	f10c 0c02 	add.w	ip, ip, #2
   d8f12:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d8f16:	3f01      	subs	r7, #1
   d8f18:	2600      	movs	r6, #0
   d8f1a:	fbb7 f9f3 	udiv	r9, r7, r3
   d8f1e:	4630      	mov	r0, r6
   d8f20:	fb03 7a19 	mls	sl, r3, r9, r7
   d8f24:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d8f28:	2d09      	cmp	r5, #9
   d8f2a:	d818      	bhi.n	d8f5e <_strtol_l.isra.0+0x96>
   d8f2c:	462c      	mov	r4, r5
   d8f2e:	42a3      	cmp	r3, r4
   d8f30:	dd24      	ble.n	d8f7c <_strtol_l.isra.0+0xb4>
   d8f32:	1c75      	adds	r5, r6, #1
   d8f34:	d007      	beq.n	d8f46 <_strtol_l.isra.0+0x7e>
   d8f36:	4581      	cmp	r9, r0
   d8f38:	d31d      	bcc.n	d8f76 <_strtol_l.isra.0+0xae>
   d8f3a:	d101      	bne.n	d8f40 <_strtol_l.isra.0+0x78>
   d8f3c:	45a2      	cmp	sl, r4
   d8f3e:	db1a      	blt.n	d8f76 <_strtol_l.isra.0+0xae>
   d8f40:	fb00 4003 	mla	r0, r0, r3, r4
   d8f44:	2601      	movs	r6, #1
   d8f46:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8f4a:	e7eb      	b.n	d8f24 <_strtol_l.isra.0+0x5c>
   d8f4c:	2c2b      	cmp	r4, #43	; 0x2b
   d8f4e:	bf08      	it	eq
   d8f50:	f89c 4000 	ldrbeq.w	r4, [ip]
   d8f54:	46a8      	mov	r8, r5
   d8f56:	bf08      	it	eq
   d8f58:	f100 0c02 	addeq.w	ip, r0, #2
   d8f5c:	e7c8      	b.n	d8ef0 <_strtol_l.isra.0+0x28>
   d8f5e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d8f62:	2d19      	cmp	r5, #25
   d8f64:	d801      	bhi.n	d8f6a <_strtol_l.isra.0+0xa2>
   d8f66:	3c37      	subs	r4, #55	; 0x37
   d8f68:	e7e1      	b.n	d8f2e <_strtol_l.isra.0+0x66>
   d8f6a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d8f6e:	2d19      	cmp	r5, #25
   d8f70:	d804      	bhi.n	d8f7c <_strtol_l.isra.0+0xb4>
   d8f72:	3c57      	subs	r4, #87	; 0x57
   d8f74:	e7db      	b.n	d8f2e <_strtol_l.isra.0+0x66>
   d8f76:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d8f7a:	e7e4      	b.n	d8f46 <_strtol_l.isra.0+0x7e>
   d8f7c:	1c73      	adds	r3, r6, #1
   d8f7e:	d106      	bne.n	d8f8e <_strtol_l.isra.0+0xc6>
   d8f80:	2322      	movs	r3, #34	; 0x22
   d8f82:	f8ce 3000 	str.w	r3, [lr]
   d8f86:	4638      	mov	r0, r7
   d8f88:	b942      	cbnz	r2, d8f9c <_strtol_l.isra.0+0xd4>
   d8f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8f8e:	f1b8 0f00 	cmp.w	r8, #0
   d8f92:	d000      	beq.n	d8f96 <_strtol_l.isra.0+0xce>
   d8f94:	4240      	negs	r0, r0
   d8f96:	2a00      	cmp	r2, #0
   d8f98:	d0f7      	beq.n	d8f8a <_strtol_l.isra.0+0xc2>
   d8f9a:	b10e      	cbz	r6, d8fa0 <_strtol_l.isra.0+0xd8>
   d8f9c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d8fa0:	6011      	str	r1, [r2, #0]
   d8fa2:	e7f2      	b.n	d8f8a <_strtol_l.isra.0+0xc2>
   d8fa4:	2430      	movs	r4, #48	; 0x30
   d8fa6:	2b00      	cmp	r3, #0
   d8fa8:	d1b3      	bne.n	d8f12 <_strtol_l.isra.0+0x4a>
   d8faa:	2308      	movs	r3, #8
   d8fac:	e7b1      	b.n	d8f12 <_strtol_l.isra.0+0x4a>
   d8fae:	2c30      	cmp	r4, #48	; 0x30
   d8fb0:	d0a4      	beq.n	d8efc <_strtol_l.isra.0+0x34>
   d8fb2:	230a      	movs	r3, #10
   d8fb4:	e7ad      	b.n	d8f12 <_strtol_l.isra.0+0x4a>
   d8fb6:	bf00      	nop
   d8fb8:	000d96f3 	.word	0x000d96f3

000d8fbc <strtol>:
   d8fbc:	4613      	mov	r3, r2
   d8fbe:	460a      	mov	r2, r1
   d8fc0:	4601      	mov	r1, r0
   d8fc2:	4802      	ldr	r0, [pc, #8]	; (d8fcc <strtol+0x10>)
   d8fc4:	6800      	ldr	r0, [r0, #0]
   d8fc6:	f7ff bf7f 	b.w	d8ec8 <_strtol_l.isra.0>
   d8fca:	bf00      	nop
   d8fcc:	2003e390 	.word	0x2003e390

000d8fd0 <dynalib_user>:
   d8fd0:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   d8fe0:	00000000 6e6b6e55 006e776f 20746f4e     ....Unknown.Not 
   d8ff0:	72616843 676e6967 61684300 64656772     Charging.Charged
   d9000:	73694400 72616863 676e6967 75614600     .Discharging.Fau
   d9010:	4400746c 6e6f6369 7463656e 31006465     lt.Diconnected.1
   d9020:	4e002a00 6144206f 55006174 6f646962     .*.No Data.Ubido
   d9030:	48207374 006b6f6f 70736552 65736e6f     ts Hook.Response
   d9040:	63655220 65766965 74530064 00657461      Received.State.
   d9050:	20746553 62726556 2065736f 65646f4d     Set Verbose Mode
   d9060:	43003000 7261656c 56206465 6f627265     .0.Cleared Verbo
   d9070:	4d206573 0065646f 20746553 33206f74     se Mode.Set to 3
   d9080:	50206472 79747261 6d695320 74655300     rd Party Sim.Set
   d9090:	206f7420 74726150 656c6369 6d695320      to Particle Sim
   d90a0:	65654b00 6c412070 20657669 20746573     .Keep Alive set 
   d90b0:	25206f74 65732069 654b0063 41207065     to %i sec.Keep A
   d90c0:	6576696c 616f4c00 676e6964 73795320     live.Loading Sys
   d90d0:	206d6574 61666544 73746c75 74655000     tem Defaults.Pet
   d90e0:	00646574 63746157 676f6468 73227b00     ted.Watchdog.{"s
   d90f0:	6f736e65 656e4f72 34253a22 7d66312e     ensorOne":%4.1f}
   d9100:	776f7000 6f6d7265 6f74696e 676e6972     .powermonitoring
   d9110:	6f6f685f 7246006b 25206d6f 6f742073     _hook.From %s to
   d9120:	00732520 74617453 72542065 69736e61      %s.State Transi
   d9130:	6e6f6974 6e657300 5f726f73 61746164     tion.sensor_data
   d9140:	61707300 642f6b72 63697665 65732f65     .spark/device/se
   d9150:	6f697373 6e652f6e 72450064 20726f72     ssion/end.Error 
   d9160:	74617453 202d2065 65736552 65520074     State - Reset.Re
   d9170:	7361656c 65740065 7265706d 72757461     lease.temperatur
   d9180:	75680065 6964696d 42007974 65747461     e.humidity.Batte
   d9190:	42007972 65747461 6f437972 7865746e     ry.BatteryContex
   d91a0:	654b0074 41207065 6576696c 63655320     t.Keep Alive Sec
   d91b0:	61654d00 65727573 776f4e2d 72655600     .Measure-Now.Ver
   d91c0:	65736f62 646f4d2d 72450065 20726f72     bose-Mode.Error 
   d91d0:	4853202d 20313354 74696e49 696c6169     - SHT31 Initiali
   d91e0:	6974617a 53006e6f 74726174 00007075     zation.Startup..

000d91f0 <_ZTV5Timer>:
	...
   d91f8:	000d4221 000d4275 000d410d              !B..uB...A..

000d9204 <_ZTV17PublishQueueAsync>:
	...
   d920c:	000d4119 000d412d 000d5a09 000d5b95     .A..-A...Z...[..
   d921c:	000d5b55 000d5b33 000d5cdb 000d5b7b     U[..3[...\..{[..

000d922c <_ZTV8MB85RC64>:
	...
   d9234:	000d4141 000d4155 000d5001 000d5097     AA..UA...P...P..
   d9244:	000d5119 000d8fe4 000d8fec 000d8ff0     .Q..............
   d9254:	000d8ff9 000d9001 000d900d 000d9013     ................
   d9264:	72617453 20707574 63637553 66737365     Startup Successf
   d9274:	00006c75 00000000 00000000 00000000     ul..............
	...

000d92a4 <_ZL13releaseNumber>:
   d92a4:	302e3631 00000030                       16.00...

000d92ac <_ZL17FRAMversionNumber>:
   d92ac:	00000002 74697277 74614465 61662061     ....writeData fa
   d92bc:	64656c69 72756420 20676e69 73617265     iled during eras
   d92cc:	72662065 64416d61 253d7264 00000075     e framAddr=%u...

000d92dc <_ZTV6MB85RC>:
	...
   d92e4:	000d4f21 000d4f23 000d5001 000d5097     !O..#O...P...P..
   d92f4:	000d5119 69766564 65526563 66206461     .Q..deviceRead f
   d9304:	656c6961 74732064 253d7461 65730064     ailed stat=%d.se
   d9314:	69542074 6620656d 206d6f72 20435452     t Time from RTC 
   d9324:	64007325 63697665 69725765 66206574     %s.deviceWrite f
   d9334:	656c6961 74732064 253d7461 65730064     ailed stat=%d.se
   d9344:	54522074 72662043 63206d6f 64756f6c     t RTC from cloud
   d9354:	00732520 756f6c63 69742064 6e20656d      %s.cloud time n
   d9364:	7620746f 64696c61 76656400 57656369     ot valid.deviceW
   d9374:	65746972 52504545 66204d4f 656c6961     riteEEPROM faile
   d9384:	74732064 253d7461 70610064 74722e70     d stat=%d.app.rt
   d9394:	00000063                                c...

000d9398 <_ZTV12MCP79410SRAM>:
	...
   d93a0:	000d51d9 000d51ef 000d51c9 000d51cd     .Q...Q...Q...Q..
   d93b0:	000d5219 000d5501 000d5721              .R...U..!W..

000d93bc <_ZTV12MCP79410Time>:
	...
   d93c4:	000d51dd 000d51e1                       .Q...Q..

000d93cc <_ZTV14MCP79410EEPROM>:
	...
   d93d4:	000d51db 000d51fd 000d51d1 000d51d5     .Q...Q...Q...Q..
   d93e4:	000d5219 000d553b 000d5961              .R..;U..aY..

000d93f0 <_ZTV8MCP79410>:
	...
   d93f8:	000d51df 000d520b 6c627550 51687369     .Q...R..PublishQ
   d9408:	65756575 6e797341 75710063 69657565     ueueAsync.queuei
   d9418:	6520676e 746e6576 656d614e 2073253d     ng eventName=%s 
   d9428:	61746164 2073253d 3d6c7474 66206425     data=%s ttl=%d f
   d9438:	7367616c 64253d31 616c6620 3d327367     lags1=%d flags2=
   d9448:	73206425 3d657a69 70006425 696c6275     %d size=%d.publi
   d9458:	6e696873 73252067 20732520 3d6c7474     shing %s %s ttl=
   d9468:	66206425 7367616c 0078253d 6c627570     %d flags=%x.publ
   d9478:	65687369 75732064 73656363 6c756673     ished successful
   d9488:	7000796c 696c6275 64656873 69616620     ly.published fai
   d9498:	2c64656c 6c697720 6572206c 20797274     led, will retry 
   d94a8:	25206e69 6d20756c 70610073 75702e70     in %lu ms.app.pu
   d94b8:	00007162                                bq..

000d94bc <_ZTV21PublishQueueAsyncBase>:
	...
   d94cc:	000d5a09 000d40a5 000d40a5 000d40a5     .Z...@...@...@..
   d94dc:	000d40a5 000d40a5                       .@...@..

000d94e4 <_ZTV25PublishQueueAsyncRetained>:
	...
   d94ec:	000d5af1 000d5b05 000d5a09 000d5b95     .Z...[...Z...[..
   d94fc:	000d5b55 000d5b33 000d5cdb 000d5b7b     U[..3[...\..{[..

000d950c <_ZTVN5spark13CellularClassE>:
	...
   d9514:	000d67db 000d67d1 000d67c7 000d677d     .g...g...g..}g..
   d9524:	000d67bb 000d67af 000d67a3 000d679b     .g...g...g...g..
   d9534:	000d6791 000d6787 000d7109              .g...g...q..

000d9540 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9548:	000d6815 000d681b 000d6859 000d6829     .h...h..Yh..)h..
   d9558:	000d6817                                .h..

000d955c <_ZTVN5spark13EthernetClassE>:
	...
   d9564:	000d6e1f 000d6e15 000d6e0b 000d6e01     .n...n...n...n..
   d9574:	000d6df5 000d6de9 000d6ddd 000d6dd5     .m...m...m...m..
   d9584:	000d6dcb 000d6dc1 000d7109              .m...m...q..

000d9590 <_ZTV7TwoWire>:
	...
   d9598:	000d6e3d 000d6e87 000d6e5f 000d6e3f     =n...n.._n..?n..
   d95a8:	000d6e67 000d6e6f 000d6e77 000d6e7f     gn..on..wn...n..

000d95b8 <_ZTV9IPAddress>:
	...
   d95c0:	000d6fbd 000d6fad 000d6faf 00707061     .o...o...o..app.

000d95d0 <_ZTVN5spark12NetworkClassE>:
	...
   d95d8:	000d70a1 000d70ab 000d70b5 000d70bf     .p...p...p...p..
   d95e8:	000d70c9 000d70d5 000d70e1 000d70ed     .p...p...p...p..
   d95f8:	000d70f5 000d70ff 000d7109 2b25005a     .p...p...q..Z.%+
   d9608:	3a643330 75323025 2d592500 252d6d25     03d:%02u.%Y-%m-%
   d9618:	48255464 3a4d253a 7a255325 63736100     dT%H:%M:%S%z.asc
   d9628:	656d6974 00000000                       time....

000d9630 <_ZTV11USARTSerial>:
	...
   d9638:	000d7889 000d78f5 000d78cd 000d71f1     .x...x...x...q..
   d9648:	000d789d 000d78b9 000d78ab 000d78c7     .x...x...x...x..
   d9658:	000d788b 000d788f                       .x...x..

000d9660 <_ZTV9USBSerial>:
	...
   d9668:	000d7989 000d79f1 000d79c7 000d71f1     .y...y...y...q..
   d9678:	000d79b9 000d798b 000d799b 000d79eb     .y...y...y...y..
   d9688:	000d79ab 000d7985                       .y...y..

000d9690 <_ZSt7nothrow>:
   d9690:	00000000 74727173 332e2500 2e252073     ....sqrt.%.3s %.
   d96a0:	33257333 2e252064 253a6432 3a64322e     3s%3d %.2d:%.2d:
   d96b0:	64322e25 0a642520                        %.2d %d..

000d96b9 <day_name.6145>:
   d96b9:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   d96c9:	61536972                                 riSat

000d96ce <mon_name.6146>:
   d96ce:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   d96de:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   d96ee:	63654476                                vDec

000d96f2 <_ctype_>:
   d96f2:	20202000 20202020 28282020 20282828     .         ((((( 
   d9702:	20202020 20202020 20202020 20202020                     
   d9712:	10108820 10101010 10101010 10101010      ...............
   d9722:	04040410 04040404 10040404 10101010     ................
   d9732:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d9742:	01010101 01010101 01010101 10101010     ................
   d9752:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d9762:	02020202 02020202 02020202 10101010     ................
   d9772:	00000020 00000000 00000000 00000000      ...............
	...

000d97f3 <link_const_variable_data_end>:
	...

000d97f4 <link_constructors_location>:
   d97f4:	000d4cad 	.word	0x000d4cad
   d97f8:	000d5991 	.word	0x000d5991
   d97fc:	000d5f6d 	.word	0x000d5f6d
   d9800:	000d6755 	.word	0x000d6755
   d9804:	000d67e5 	.word	0x000d67e5
   d9808:	000d6e29 	.word	0x000d6e29
   d980c:	000d7091 	.word	0x000d7091
   d9810:	000d71dd 	.word	0x000d71dd
   d9814:	000d7291 	.word	0x000d7291
   d9818:	000d7535 	.word	0x000d7535
   d981c:	000d7875 	.word	0x000d7875
