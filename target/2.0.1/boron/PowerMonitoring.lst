
/Users/abdulhannanmustajab/Desktop/IoT/Power-Monitoring/PowerMonitoring/target/2.0.1/boron/PowerMonitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008180  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  2003f400  000dc1a0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002ec  2003db80  000dc9a4  0001db80  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000988  2003de70  2003de70  0002de70  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000dcc90  000dcc90  0002cc90  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000dccb8  000dccb8  0002ccb8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001a6588  00000000  00000000  0002ccbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001af08  00000000  00000000  001d3244  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000324d1  00000000  00000000  001ee14c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002e68  00000000  00000000  0022061d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008a48  00000000  00000000  00223485  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003e8f2  00000000  00000000  0022becd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00046017  00000000  00000000  0026a7bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00114452  00000000  00000000  002b07d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008918  00000000  00000000  003c4c28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 f9ef 	bl	d9414 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fa11 	bl	d9464 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003db80 	.word	0x2003db80
   d404c:	000dc9a4 	.word	0x000dc9a4
   d4050:	2003de6c 	.word	0x2003de6c
   d4054:	2003de70 	.word	0x2003de70
   d4058:	2003e7f8 	.word	0x2003e7f8

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f004 fa6b 	bl	d853c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dc16c 	.word	0x000dc16c
   d4080:	000dc198 	.word	0x000dc198

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 b894 	b.w	d51b0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 ff7b 	bl	d4f84 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f004 ba15 	b.w	d84c0 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f003 b809 	b.w	d70ac <malloc>

000d409a <_Znaj>:
   d409a:	f003 b807 	b.w	d70ac <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f003 b80d 	b.w	d70bc <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 fed8 	bl	d6e60 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d6b91 	.word	0x000d6b91

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z11watchdogISRv>:
}


void watchdogISR()
{
  watchdogFlag = true;
   d40c8:	4b01      	ldr	r3, [pc, #4]	; (d40d0 <_Z11watchdogISRv+0x8>)
   d40ca:	2201      	movs	r2, #1
   d40cc:	701a      	strb	r2, [r3, #0]
}
   d40ce:	4770      	bx	lr
   d40d0:	2003e5d5 	.word	0x2003e5d5

000d40d4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40d4:	6803      	ldr	r3, [r0, #0]
   d40d6:	4718      	bx	r3

000d40d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40d8:	2a01      	cmp	r2, #1
   d40da:	d003      	beq.n	d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40dc:	2a02      	cmp	r2, #2
   d40de:	d003      	beq.n	d40e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40e0:	2000      	movs	r0, #0
   d40e2:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40e4:	6001      	str	r1, [r0, #0]
	      break;
   d40e6:	e7fb      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40e8:	680b      	ldr	r3, [r1, #0]
   d40ea:	6003      	str	r3, [r0, #0]
	}
   d40ec:	e7f8      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	...

000d40f0 <_Z10measureNow6String>:
  sysStatusWriteNeeded = true;
  return 1;
}

int measureNow(String command) // Function to force sending data in current hour
{
   d40f0:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40f2:	4904      	ldr	r1, [pc, #16]	; (d4104 <_Z10measureNow6String+0x14>)
   d40f4:	f003 fedd 	bl	d7eb2 <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d40f8:	b118      	cbz	r0, d4102 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d40fa:	4b03      	ldr	r3, [pc, #12]	; (d4108 <_Z10measureNow6String+0x18>)
   d40fc:	2203      	movs	r2, #3
   d40fe:	701a      	strb	r2, [r3, #0]
    return 1;
   d4100:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4102:	bd08      	pop	{r3, pc}
   d4104:	000db30b 	.word	0x000db30b
   d4108:	2003e5a1 	.word	0x2003e5a1

000d410c <_Z12enableSensor6String>:

/* 
  EnableSensor (String Sensor)
  This function takes in the sensor number as integer and enables or disable the sensor accordingly.
*/
int enableSensor(String Sensor){
   d410c:	b570      	push	{r4, r5, r6, lr}
   d410e:	b0c2      	sub	sp, #264	; 0x108
  char * pEND;
  char data[256];
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4110:	6800      	ldr	r0, [r0, #0]
   d4112:	220a      	movs	r2, #10
   d4114:	a901      	add	r1, sp, #4
   d4116:	f006 f8db 	bl	da2d0 <strtol>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d411a:	1e43      	subs	r3, r0, #1
   d411c:	2b06      	cmp	r3, #6
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d411e:	4604      	mov	r4, r0
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d4120:	d82b      	bhi.n	d417a <_Z12enableSensor6String+0x6e>
 
  if (tempSensor == 1){
   d4122:	2801      	cmp	r0, #1
   d4124:	4b16      	ldr	r3, [pc, #88]	; (d4180 <_Z12enableSensor6String+0x74>)
   d4126:	4e17      	ldr	r6, [pc, #92]	; (d4184 <_Z12enableSensor6String+0x78>)
   d4128:	d108      	bne.n	d413c <_Z12enableSensor6String+0x30>
    sysStatus.sensorOneConnected = true;
   d412a:	7718      	strb	r0, [r3, #28]
    snprintf(data, sizeof(data), "Enabled Sensor One");
   d412c:	4916      	ldr	r1, [pc, #88]	; (d4188 <_Z12enableSensor6String+0x7c>)
   d412e:	a802      	add	r0, sp, #8
   d4130:	f005 f9ce 	bl	d94d0 <strcpy>
    sysStatusWriteNeeded = true;  
   d4134:	7034      	strb	r4, [r6, #0]
    sysStatus.sensorSixConnected = true;
    snprintf(data, sizeof(data), "Enabled Sensor Six");
    sysStatusWriteNeeded = true; 
    return 1;      
  }
}
   d4136:	4620      	mov	r0, r4
   d4138:	b042      	add	sp, #264	; 0x108
   d413a:	bd70      	pop	{r4, r5, r6, pc}
  } else if (tempSensor == 2){
   d413c:	2802      	cmp	r0, #2
   d413e:	f04f 0501 	mov.w	r5, #1
   d4142:	d107      	bne.n	d4154 <_Z12enableSensor6String+0x48>
    snprintf(data, sizeof(data), "Enabled Sensor Two");
   d4144:	4911      	ldr	r1, [pc, #68]	; (d418c <_Z12enableSensor6String+0x80>)
    sysStatus.sensorTwoConnected = true;
   d4146:	775d      	strb	r5, [r3, #29]
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d4148:	a802      	add	r0, sp, #8
   d414a:	f005 f9c1 	bl	d94d0 <strcpy>
    return 1;      
   d414e:	462c      	mov	r4, r5
    sysStatusWriteNeeded = true; 
   d4150:	7035      	strb	r5, [r6, #0]
    return 1;      
   d4152:	e7f0      	b.n	d4136 <_Z12enableSensor6String+0x2a>
  else if (tempSensor == 3){
   d4154:	2803      	cmp	r0, #3
   d4156:	d102      	bne.n	d415e <_Z12enableSensor6String+0x52>
    snprintf(data, sizeof(data), "Enabled Sensor Three");
   d4158:	490d      	ldr	r1, [pc, #52]	; (d4190 <_Z12enableSensor6String+0x84>)
    sysStatus.sensorThreeConnected = true;
   d415a:	779d      	strb	r5, [r3, #30]
    snprintf(data, sizeof(data), "Enabled Sensor Three");
   d415c:	e7f4      	b.n	d4148 <_Z12enableSensor6String+0x3c>
  else if (tempSensor == 4){
   d415e:	2804      	cmp	r0, #4
   d4160:	d102      	bne.n	d4168 <_Z12enableSensor6String+0x5c>
    snprintf(data, sizeof(data), "Enabled Sensor Four");
   d4162:	490c      	ldr	r1, [pc, #48]	; (d4194 <_Z12enableSensor6String+0x88>)
    sysStatus.sensorFourConnected = true;
   d4164:	77dd      	strb	r5, [r3, #31]
    snprintf(data, sizeof(data), "Enabled Sensor Four");
   d4166:	e7ef      	b.n	d4148 <_Z12enableSensor6String+0x3c>
  else if (tempSensor == 5){
   d4168:	2805      	cmp	r0, #5
    snprintf(data, sizeof(data), "Enabled Sensor Five");
   d416a:	bf0b      	itete	eq
   d416c:	490a      	ldreq	r1, [pc, #40]	; (d4198 <_Z12enableSensor6String+0x8c>)
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d416e:	490b      	ldrne	r1, [pc, #44]	; (d419c <_Z12enableSensor6String+0x90>)
    sysStatus.sensorFiveConnected = true;
   d4170:	f883 5020 	strbeq.w	r5, [r3, #32]
    sysStatus.sensorSixConnected = true;
   d4174:	f883 5021 	strbne.w	r5, [r3, #33]	; 0x21
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d4178:	e7e6      	b.n	d4148 <_Z12enableSensor6String+0x3c>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d417a:	2400      	movs	r4, #0
   d417c:	e7db      	b.n	d4136 <_Z12enableSensor6String+0x2a>
   d417e:	bf00      	nop
   d4180:	2003e5a4 	.word	0x2003e5a4
   d4184:	2003e5d4 	.word	0x2003e5d4
   d4188:	000db30d 	.word	0x000db30d
   d418c:	000db320 	.word	0x000db320
   d4190:	000db333 	.word	0x000db333
   d4194:	000db348 	.word	0x000db348
   d4198:	000db35c 	.word	0x000db35c
   d419c:	000db370 	.word	0x000db370

000d41a0 <_Z13disableSensor6String>:

/* 
  EnableSensor (String Sensor)
  This function takes in the sensor number as integer and enables or disable the sensor accordingly.
*/
int disableSensor(String Sensor){
   d41a0:	b530      	push	{r4, r5, lr}
   d41a2:	b0c3      	sub	sp, #268	; 0x10c
  char * pEND;
  char data[256];
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d41a4:	6800      	ldr	r0, [r0, #0]
   d41a6:	220a      	movs	r2, #10
   d41a8:	a901      	add	r1, sp, #4
   d41aa:	f006 f891 	bl	da2d0 <strtol>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d41ae:	1e43      	subs	r3, r0, #1
   d41b0:	2b06      	cmp	r3, #6
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d41b2:	4604      	mov	r4, r0
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d41b4:	f04f 0300 	mov.w	r3, #0
   d41b8:	d828      	bhi.n	d420c <_Z13disableSensor6String+0x6c>
 
  if (tempSensor == 1){
   d41ba:	2801      	cmp	r0, #1
   d41bc:	4a14      	ldr	r2, [pc, #80]	; (d4210 <_Z13disableSensor6String+0x70>)
   d41be:	4d15      	ldr	r5, [pc, #84]	; (d4214 <_Z13disableSensor6String+0x74>)
   d41c0:	d108      	bne.n	d41d4 <_Z13disableSensor6String+0x34>
    sysStatus.sensorOneConnected = false;
    snprintf(data, sizeof(data), "Disabled Sensor One");
   d41c2:	4915      	ldr	r1, [pc, #84]	; (d4218 <_Z13disableSensor6String+0x78>)
    sysStatus.sensorOneConnected = false;
   d41c4:	7713      	strb	r3, [r2, #28]
    snprintf(data, sizeof(data), "Disabled Sensor One");
   d41c6:	a802      	add	r0, sp, #8
   d41c8:	f005 f982 	bl	d94d0 <strcpy>
    return 1;   
  }
  else if (tempSensor == 6){
    sysStatus.sensorSixConnected = false;
    snprintf(data, sizeof(data), "Disabled Sensor Six");
    sysStatusWriteNeeded = true; 
   d41cc:	702c      	strb	r4, [r5, #0]
    return 1;      
  }
}
   d41ce:	4620      	mov	r0, r4
   d41d0:	b043      	add	sp, #268	; 0x10c
   d41d2:	bd30      	pop	{r4, r5, pc}
  } else if (tempSensor == 2){
   d41d4:	2802      	cmp	r0, #2
   d41d6:	d106      	bne.n	d41e6 <_Z13disableSensor6String+0x46>
    snprintf(data, sizeof(data), "Disabled Sensor Two");
   d41d8:	4910      	ldr	r1, [pc, #64]	; (d421c <_Z13disableSensor6String+0x7c>)
    sysStatus.sensorTwoConnected = false;
   d41da:	7753      	strb	r3, [r2, #29]
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d41dc:	a802      	add	r0, sp, #8
   d41de:	f005 f977 	bl	d94d0 <strcpy>
    sysStatusWriteNeeded = true; 
   d41e2:	2401      	movs	r4, #1
   d41e4:	e7f2      	b.n	d41cc <_Z13disableSensor6String+0x2c>
  else if (tempSensor == 3){
   d41e6:	2803      	cmp	r0, #3
   d41e8:	d102      	bne.n	d41f0 <_Z13disableSensor6String+0x50>
    snprintf(data, sizeof(data), "Disabled Sensor Three");
   d41ea:	490d      	ldr	r1, [pc, #52]	; (d4220 <_Z13disableSensor6String+0x80>)
    sysStatus.sensorThreeConnected = false;
   d41ec:	7793      	strb	r3, [r2, #30]
    snprintf(data, sizeof(data), "Disabled Sensor Three");
   d41ee:	e7f5      	b.n	d41dc <_Z13disableSensor6String+0x3c>
  else if (tempSensor == 4){
   d41f0:	2804      	cmp	r0, #4
   d41f2:	d102      	bne.n	d41fa <_Z13disableSensor6String+0x5a>
    snprintf(data, sizeof(data), "Disabled Sensor Four");
   d41f4:	490b      	ldr	r1, [pc, #44]	; (d4224 <_Z13disableSensor6String+0x84>)
    sysStatus.sensorFourConnected = false;
   d41f6:	77d3      	strb	r3, [r2, #31]
    snprintf(data, sizeof(data), "Disabled Sensor Four");
   d41f8:	e7f0      	b.n	d41dc <_Z13disableSensor6String+0x3c>
  else if (tempSensor == 5){
   d41fa:	2805      	cmp	r0, #5
    snprintf(data, sizeof(data), "Disabled Sensor Five");
   d41fc:	bf0b      	itete	eq
   d41fe:	490a      	ldreq	r1, [pc, #40]	; (d4228 <_Z13disableSensor6String+0x88>)
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d4200:	490a      	ldrne	r1, [pc, #40]	; (d422c <_Z13disableSensor6String+0x8c>)
    sysStatus.sensorFiveConnected = false;
   d4202:	f882 3020 	strbeq.w	r3, [r2, #32]
    sysStatus.sensorSixConnected = false;
   d4206:	f882 3021 	strbne.w	r3, [r2, #33]	; 0x21
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d420a:	e7e7      	b.n	d41dc <_Z13disableSensor6String+0x3c>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d420c:	461c      	mov	r4, r3
   d420e:	e7de      	b.n	d41ce <_Z13disableSensor6String+0x2e>
   d4210:	2003e5a4 	.word	0x2003e5a4
   d4214:	2003e5d4 	.word	0x2003e5d4
   d4218:	000db383 	.word	0x000db383
   d421c:	000db397 	.word	0x000db397
   d4220:	000db3ab 	.word	0x000db3ab
   d4224:	000db3c1 	.word	0x000db3c1
   d4228:	000db3d6 	.word	0x000db3d6
   d422c:	000db3eb 	.word	0x000db3eb

000d4230 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d4230:	6943      	ldr	r3, [r0, #20]
   d4232:	b113      	cbz	r3, d423a <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4234:	6983      	ldr	r3, [r0, #24]
   d4236:	300c      	adds	r0, #12
   d4238:	4718      	bx	r3
            callback();
        }
    }
   d423a:	4770      	bx	lr

000d423c <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d423c:	b510      	push	{r4, lr}
   d423e:	4b03      	ldr	r3, [pc, #12]	; (d424c <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d4240:	6003      	str	r3, [r0, #0]
   d4242:	4604      	mov	r4, r0
   d4244:	f002 f9d6 	bl	d65f4 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d4248:	4620      	mov	r0, r4
   d424a:	bd10      	pop	{r4, pc}
   d424c:	000dba14 	.word	0x000dba14

000d4250 <_ZN17PublishQueueAsyncD0Ev>:
   d4250:	b510      	push	{r4, lr}
   d4252:	4604      	mov	r4, r0
   d4254:	f7ff fff2 	bl	d423c <_ZN17PublishQueueAsyncD1Ev>
   d4258:	4620      	mov	r0, r4
   d425a:	2138      	movs	r1, #56	; 0x38
   d425c:	f004 fa65 	bl	d872a <_ZdlPvj>
   d4260:	4620      	mov	r0, r4
   d4262:	bd10      	pop	{r4, pc}

000d4264 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4264:	b510      	push	{r4, lr}
   d4266:	4b03      	ldr	r3, [pc, #12]	; (d4274 <_ZN8MB85RC64D1Ev+0x10>)
   d4268:	6003      	str	r3, [r0, #0]
   d426a:	4604      	mov	r4, r0
   d426c:	f001 fbda 	bl	d5a24 <_ZN6MB85RCD1Ev>
   d4270:	4620      	mov	r0, r4
   d4272:	bd10      	pop	{r4, pc}
   d4274:	000dba3c 	.word	0x000dba3c

000d4278 <_ZN8MB85RC64D0Ev>:
   d4278:	b510      	push	{r4, lr}
   d427a:	4604      	mov	r4, r0
   d427c:	f7ff fff2 	bl	d4264 <_ZN8MB85RC64D1Ev>
   d4280:	4620      	mov	r0, r4
   d4282:	2110      	movs	r1, #16
   d4284:	f004 fa51 	bl	d872a <_ZdlPvj>
   d4288:	4620      	mov	r0, r4
   d428a:	bd10      	pop	{r4, pc}

000d428c <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d428c:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d428e:	2100      	movs	r1, #0
   d4290:	4604      	mov	r4, r0
   d4292:	4608      	mov	r0, r1
   d4294:	f002 fc04 	bl	d6aa0 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4298:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d429a:	4620      	mov	r0, r4
   d429c:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d429e:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d42a0:	f002 fc16 	bl	d6ad0 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d42a4:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d42a6:	b10c      	cbz	r4, d42ac <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d42a8:	2301      	movs	r3, #1
   d42aa:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d42ac:	2100      	movs	r1, #0
   d42ae:	2001      	movs	r0, #1
   d42b0:	f002 fbf6 	bl	d6aa0 <os_thread_scheduling>
            }
        }
        if (t) {
   d42b4:	b12c      	cbz	r4, d42c2 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d42b6:	6823      	ldr	r3, [r4, #0]
   d42b8:	4620      	mov	r0, r4
   d42ba:	689b      	ldr	r3, [r3, #8]
   d42bc:	4798      	blx	r3
            t->running = false;
   d42be:	2300      	movs	r3, #0
   d42c0:	7123      	strb	r3, [r4, #4]
        }
    }
   d42c2:	b002      	add	sp, #8
   d42c4:	bd10      	pop	{r4, pc}

000d42c6 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d42c6:	b510      	push	{r4, lr}
   d42c8:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d42ca:	6800      	ldr	r0, [r0, #0]
   d42cc:	b108      	cbz	r0, d42d2 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d42ce:	f002 fef5 	bl	d70bc <free>
class SystemClass {
   d42d2:	4620      	mov	r0, r4
   d42d4:	bd10      	pop	{r4, pc}
	...

000d42d8 <_Z16keepAliveMessagev>:
void keepAliveMessage() {
   d42d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d42da:	4b10      	ldr	r3, [pc, #64]	; (d431c <_Z16keepAliveMessagev+0x44>)
   d42dc:	4a10      	ldr	r2, [pc, #64]	; (d4320 <_Z16keepAliveMessagev+0x48>)
   d42de:	781b      	ldrb	r3, [r3, #0]
   d42e0:	7812      	ldrb	r2, [r2, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d42e2:	4910      	ldr	r1, [pc, #64]	; (d4324 <_Z16keepAliveMessagev+0x4c>)
   d42e4:	4313      	orrs	r3, r2
   d42e6:	f88d 3000 	strb.w	r3, [sp]
   d42ea:	2200      	movs	r2, #0
   d42ec:	233c      	movs	r3, #60	; 0x3c
   d42ee:	a802      	add	r0, sp, #8
   d42f0:	f003 f946 	bl	d7580 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d42f4:	9c03      	ldr	r4, [sp, #12]
   d42f6:	b17c      	cbz	r4, d4318 <_Z16keepAliveMessagev+0x40>
      if (--_M_use_count == 0)
   d42f8:	6863      	ldr	r3, [r4, #4]
   d42fa:	3b01      	subs	r3, #1
   d42fc:	6063      	str	r3, [r4, #4]
   d42fe:	b95b      	cbnz	r3, d4318 <_Z16keepAliveMessagev+0x40>
          _M_dispose();
   d4300:	6823      	ldr	r3, [r4, #0]
   d4302:	4620      	mov	r0, r4
   d4304:	689b      	ldr	r3, [r3, #8]
   d4306:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4308:	68a3      	ldr	r3, [r4, #8]
   d430a:	3b01      	subs	r3, #1
   d430c:	60a3      	str	r3, [r4, #8]
   d430e:	b91b      	cbnz	r3, d4318 <_Z16keepAliveMessagev+0x40>
            _M_destroy();
   d4310:	6823      	ldr	r3, [r4, #0]
   d4312:	4620      	mov	r0, r4
   d4314:	68db      	ldr	r3, [r3, #12]
   d4316:	4798      	blx	r3
}
   d4318:	b004      	add	sp, #16
   d431a:	bd10      	pop	{r4, pc}
   d431c:	2003df60 	.word	0x2003df60
   d4320:	2003df61 	.word	0x2003df61
   d4324:	000db3ff 	.word	0x000db3ff

000d4328 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d4328:	b510      	push	{r4, lr}
      if (_M_manager)
   d432a:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d432c:	4604      	mov	r4, r0
      if (_M_manager)
   d432e:	b113      	cbz	r3, d4336 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4330:	2203      	movs	r2, #3
   d4332:	4601      	mov	r1, r0
   d4334:	4798      	blx	r3
    }
   d4336:	4620      	mov	r0, r4
   d4338:	bd10      	pop	{r4, pc}
	...

000d433c <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d433c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d433e:	4b13      	ldr	r3, [pc, #76]	; (d438c <_ZN5TimerD1Ev+0x50>)
   d4340:	6003      	str	r3, [r0, #0]
   d4342:	4604      	mov	r4, r0
        if (handle) {
   d4344:	6880      	ldr	r0, [r0, #8]
   d4346:	b1c8      	cbz	r0, d437c <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d4348:	2500      	movs	r5, #0
   d434a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d434e:	e9cd 3500 	strd	r3, r5, [sp]
   d4352:	2102      	movs	r1, #2
   d4354:	462b      	mov	r3, r5
   d4356:	462a      	mov	r2, r5
   d4358:	f002 fbc2 	bl	d6ae0 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   d435c:	68a0      	ldr	r0, [r4, #8]
   d435e:	4629      	mov	r1, r5
   d4360:	f002 fbf6 	bl	d6b50 <os_timer_set_id>
            while (running) {
   d4364:	7923      	ldrb	r3, [r4, #4]
   d4366:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d436a:	b113      	cbz	r3, d4372 <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d436c:	f002 fb90 	bl	d6a90 <os_thread_yield>
            while (running) {
   d4370:	e7f8      	b.n	d4364 <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   d4372:	68a0      	ldr	r0, [r4, #8]
   d4374:	4629      	mov	r1, r5
   d4376:	f002 fba3 	bl	d6ac0 <os_timer_destroy>
            handle = nullptr;
   d437a:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d437c:	f104 000c 	add.w	r0, r4, #12
   d4380:	f7ff ffd2 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
    }
   d4384:	4620      	mov	r0, r4
   d4386:	b003      	add	sp, #12
   d4388:	bd30      	pop	{r4, r5, pc}
   d438a:	bf00      	nop
   d438c:	000dba00 	.word	0x000dba00

000d4390 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d4390:	b510      	push	{r4, lr}
   d4392:	4604      	mov	r4, r0
    }
   d4394:	f7ff ffd2 	bl	d433c <_ZN5TimerD1Ev>
   d4398:	4620      	mov	r0, r4
   d439a:	211c      	movs	r1, #28
   d439c:	f004 f9c5 	bl	d872a <_ZdlPvj>
   d43a0:	4620      	mov	r0, r4
   d43a2:	bd10      	pop	{r4, pc}

000d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>:
    static bool _function(const char *funcKey, user_function_int_str_t* func)
   d43a4:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d43a6:	4801      	ldr	r0, [pc, #4]	; (d43ac <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
   d43a8:	f002 bfe5 	b.w	d7376 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d43ac:	000d734b 	.word	0x000d734b

000d43b0 <_ZN10CloudClass9keepAliveEj>:
    		spark_process();
    }
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
   d43b0:	b507      	push	{r0, r1, r2, lr}
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d43b2:	2208      	movs	r2, #8
        particle::protocol::connection_properties_t conn_prop = {0};
   d43b4:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   d43b6:	f8ad 2000 	strh.w	r2, [sp]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d43ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d43be:	2201      	movs	r2, #1
   d43c0:	9201      	str	r2, [sp, #4]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d43c2:	4341      	muls	r1, r0
   d43c4:	466a      	mov	r2, sp
   d43c6:	4618      	mov	r0, r3
        particle::protocol::connection_properties_t conn_prop = {0};
   d43c8:	f8ad 3002 	strh.w	r3, [sp, #2]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d43cc:	f002 fe0e 	bl	d6fec <spark_set_connection_property>
    }
   d43d0:	b003      	add	sp, #12
   d43d2:	f85d fb04 	ldr.w	pc, [sp], #4

000d43d6 <_ZN5Timer12changePeriodEjj>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d43d6:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d43d8:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d43da:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d43dc:	2100      	movs	r1, #0
   d43de:	b140      	cbz	r0, d43f2 <_ZN5Timer12changePeriodEjj+0x1c>
   d43e0:	e9cd 2100 	strd	r2, r1, [sp]
   d43e4:	460a      	mov	r2, r1
   d43e6:	2103      	movs	r1, #3
   d43e8:	f002 fb7a 	bl	d6ae0 <os_timer_change>
   d43ec:	fab0 f080 	clz	r0, r0
   d43f0:	0940      	lsrs	r0, r0, #5
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d43f2:	b003      	add	sp, #12
   d43f4:	f85d fb04 	ldr.w	pc, [sp], #4

000d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d43f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d43fa:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d43fc:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4400:	f88d 3000 	strb.w	r3, [sp]
   d4404:	f88d 5004 	strb.w	r5, [sp, #4]
   d4408:	68e4      	ldr	r4, [r4, #12]
   d440a:	233c      	movs	r3, #60	; 0x3c
   d440c:	47a0      	blx	r4
	}
   d440e:	b003      	add	sp, #12
   d4410:	bd30      	pop	{r4, r5, pc}
	...

000d4414 <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4414:	b510      	push	{r4, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d4416:	780b      	ldrb	r3, [r1, #0]
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d4418:	b092      	sub	sp, #72	; 0x48
   d441a:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d441c:	b97b      	cbnz	r3, d443e <_Z14UbidotsHandlerPKcS0_+0x2a>
    snprintf(responseString, sizeof(responseString),"No Data");
   d441e:	4919      	ldr	r1, [pc, #100]	; (d4484 <_Z14UbidotsHandlerPKcS0_+0x70>)
   d4420:	a802      	add	r0, sp, #8
   d4422:	f005 f855 	bl	d94d0 <strcpy>
        val_(0) {
   d4426:	2300      	movs	r3, #0
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
   d4428:	f88d 3000 	strb.w	r3, [sp]
   d442c:	4b16      	ldr	r3, [pc, #88]	; (d4488 <_Z14UbidotsHandlerPKcS0_+0x74>)
   d442e:	4917      	ldr	r1, [pc, #92]	; (d448c <_Z14UbidotsHandlerPKcS0_+0x78>)
   d4430:	781b      	ldrb	r3, [r3, #0]
   d4432:	4817      	ldr	r0, [pc, #92]	; (d4490 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4434:	aa02      	add	r2, sp, #8
   d4436:	f7ff ffdf 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d443a:	b012      	add	sp, #72	; 0x48
   d443c:	bd10      	pop	{r4, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d443e:	4608      	mov	r0, r1
   d4440:	f004 ffc3 	bl	d93ca <atoi>
   d4444:	28c8      	cmp	r0, #200	; 0xc8
   d4446:	d10e      	bne.n	d4466 <_Z14UbidotsHandlerPKcS0_+0x52>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d4448:	4912      	ldr	r1, [pc, #72]	; (d4494 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d444a:	a802      	add	r0, sp, #8
   d444c:	f005 f840 	bl	d94d0 <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d4450:	f003 fedf 	bl	d8212 <_ZN9TimeClass3nowEv>
   d4454:	4b10      	ldr	r3, [pc, #64]	; (d4498 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d4456:	6198      	str	r0, [r3, #24]
    sysStatusWriteNeeded = true;
   d4458:	4b10      	ldr	r3, [pc, #64]	; (d449c <_Z14UbidotsHandlerPKcS0_+0x88>)
   d445a:	2201      	movs	r2, #1
   d445c:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d445e:	4b10      	ldr	r3, [pc, #64]	; (d44a0 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d4460:	2200      	movs	r2, #0
   d4462:	701a      	strb	r2, [r3, #0]
   d4464:	e7df      	b.n	d4426 <_Z14UbidotsHandlerPKcS0_+0x12>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d4466:	4620      	mov	r0, r4
   d4468:	f004 ffaf 	bl	d93ca <atoi>
   d446c:	28c9      	cmp	r0, #201	; 0xc9
   d446e:	d0eb      	beq.n	d4448 <_Z14UbidotsHandlerPKcS0_+0x34>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d4470:	4620      	mov	r0, r4
   d4472:	f004 ffaa 	bl	d93ca <atoi>
   d4476:	4a0b      	ldr	r2, [pc, #44]	; (d44a4 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d4478:	4603      	mov	r3, r0
   d447a:	2140      	movs	r1, #64	; 0x40
   d447c:	a802      	add	r0, sp, #8
   d447e:	f002 fe35 	bl	d70ec <snprintf>
   d4482:	e7d0      	b.n	d4426 <_Z14UbidotsHandlerPKcS0_+0x12>
   d4484:	000db401 	.word	0x000db401
   d4488:	2003df61 	.word	0x2003df61
   d448c:	000db438 	.word	0x000db438
   d4490:	2003e408 	.word	0x2003e408
   d4494:	000db409 	.word	0x000db409
   d4498:	2003e5a4 	.word	0x2003e5a4
   d449c:	2003e5d4 	.word	0x2003e5d4
   d44a0:	2003df83 	.word	0x2003df83
   d44a4:	000db41b 	.word	0x000db41b

000d44a8 <_Z16setThirdPartySim6String>:
{
   d44a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d44aa:	491c      	ldr	r1, [pc, #112]	; (d451c <_Z16setThirdPartySim6String+0x74>)
   d44ac:	4605      	mov	r5, r0
   d44ae:	f003 fd00 	bl	d7eb2 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d44b2:	4604      	mov	r4, r0
   d44b4:	b300      	cbz	r0, d44f8 <_Z16setThirdPartySim6String+0x50>
    sysStatus.thirdPartySim = true;
   d44b6:	4c1a      	ldr	r4, [pc, #104]	; (d4520 <_Z16setThirdPartySim6String+0x78>)
   d44b8:	2301      	movs	r3, #1
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d44ba:	6860      	ldr	r0, [r4, #4]
    sysStatus.thirdPartySim = true;
   d44bc:	7063      	strb	r3, [r4, #1]
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d44be:	f7ff ff77 	bl	d43b0 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d44c2:	6863      	ldr	r3, [r4, #4]
   d44c4:	4817      	ldr	r0, [pc, #92]	; (d4524 <_Z16setThirdPartySim6String+0x7c>)
   d44c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d44ca:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d44ce:	4359      	muls	r1, r3
   d44d0:	f7ff ff81 	bl	d43d6 <_ZN5Timer12changePeriodEjj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d44d4:	f002 fd52 	bl	d6f7c <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to 3rd Party Sim", PRIVATE);
   d44d8:	b148      	cbz	r0, d44ee <_Z16setThirdPartySim6String+0x46>
   d44da:	2300      	movs	r3, #0
   d44dc:	f88d 3000 	strb.w	r3, [sp]
   d44e0:	4b11      	ldr	r3, [pc, #68]	; (d4528 <_Z16setThirdPartySim6String+0x80>)
   d44e2:	4a12      	ldr	r2, [pc, #72]	; (d452c <_Z16setThirdPartySim6String+0x84>)
   d44e4:	781b      	ldrb	r3, [r3, #0]
   d44e6:	4912      	ldr	r1, [pc, #72]	; (d4530 <_Z16setThirdPartySim6String+0x88>)
   d44e8:	4812      	ldr	r0, [pc, #72]	; (d4534 <_Z16setThirdPartySim6String+0x8c>)
   d44ea:	f7ff ff85 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d44ee:	4b12      	ldr	r3, [pc, #72]	; (d4538 <_Z16setThirdPartySim6String+0x90>)
   d44f0:	2001      	movs	r0, #1
   d44f2:	7018      	strb	r0, [r3, #0]
}
   d44f4:	b003      	add	sp, #12
   d44f6:	bd30      	pop	{r4, r5, pc}
   d44f8:	4910      	ldr	r1, [pc, #64]	; (d453c <_Z16setThirdPartySim6String+0x94>)
   d44fa:	4628      	mov	r0, r5
   d44fc:	f003 fcd9 	bl	d7eb2 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4500:	2800      	cmp	r0, #0
   d4502:	d0f7      	beq.n	d44f4 <_Z16setThirdPartySim6String+0x4c>
    sysStatus.thirdPartySim = false;
   d4504:	4b06      	ldr	r3, [pc, #24]	; (d4520 <_Z16setThirdPartySim6String+0x78>)
   d4506:	705c      	strb	r4, [r3, #1]
   d4508:	f002 fd38 	bl	d6f7c <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
   d450c:	2800      	cmp	r0, #0
   d450e:	d0ee      	beq.n	d44ee <_Z16setThirdPartySim6String+0x46>
   d4510:	4b05      	ldr	r3, [pc, #20]	; (d4528 <_Z16setThirdPartySim6String+0x80>)
   d4512:	f88d 4000 	strb.w	r4, [sp]
   d4516:	781b      	ldrb	r3, [r3, #0]
   d4518:	4a09      	ldr	r2, [pc, #36]	; (d4540 <_Z16setThirdPartySim6String+0x98>)
   d451a:	e7e4      	b.n	d44e6 <_Z16setThirdPartySim6String+0x3e>
   d451c:	000db30b 	.word	0x000db30b
   d4520:	2003e5a4 	.word	0x2003e5a4
   d4524:	2003e3e8 	.word	0x2003e3e8
   d4528:	2003df61 	.word	0x2003df61
   d452c:	000db445 	.word	0x000db445
   d4530:	000db4d7 	.word	0x000db4d7
   d4534:	2003e408 	.word	0x2003e408
   d4538:	2003e5d4 	.word	0x2003e5d4
   d453c:	000db45a 	.word	0x000db45a
   d4540:	000db45c 	.word	0x000db45c

000d4544 <_Z12setKeepAlive6String>:
{
   d4544:	b510      	push	{r4, lr}
   d4546:	b0c4      	sub	sp, #272	; 0x110
  int tempTime = strtol(command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4548:	6800      	ldr	r0, [r0, #0]
   d454a:	220a      	movs	r2, #10
   d454c:	a903      	add	r1, sp, #12
   d454e:	f005 febf 	bl	da2d0 <strtol>
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d4552:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   d4556:	d822      	bhi.n	d459e <_Z12setKeepAlive6String+0x5a>
  sysStatus.keepAlive = tempTime;
   d4558:	4c12      	ldr	r4, [pc, #72]	; (d45a4 <_Z12setKeepAlive6String+0x60>)
   d455a:	6060      	str	r0, [r4, #4]
  Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d455c:	f7ff ff28 	bl	d43b0 <_ZN10CloudClass9keepAliveEj>
  keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d4560:	6863      	ldr	r3, [r4, #4]
   d4562:	4811      	ldr	r0, [pc, #68]	; (d45a8 <_Z12setKeepAlive6String+0x64>)
   d4564:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4568:	4359      	muls	r1, r3
   d456a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d456e:	f7ff ff32 	bl	d43d6 <_ZN5Timer12changePeriodEjj>
  snprintf(data, sizeof(data), "Keep Alive set to %i sec",sysStatus.keepAlive);
   d4572:	6863      	ldr	r3, [r4, #4]
   d4574:	4a0d      	ldr	r2, [pc, #52]	; (d45ac <_Z12setKeepAlive6String+0x68>)
   d4576:	f44f 7180 	mov.w	r1, #256	; 0x100
   d457a:	a804      	add	r0, sp, #16
   d457c:	f002 fdb6 	bl	d70ec <snprintf>
   d4580:	2300      	movs	r3, #0
  publishQueue.publish("Keep Alive",data, PRIVATE);
   d4582:	f88d 3000 	strb.w	r3, [sp]
   d4586:	4b0a      	ldr	r3, [pc, #40]	; (d45b0 <_Z12setKeepAlive6String+0x6c>)
   d4588:	490a      	ldr	r1, [pc, #40]	; (d45b4 <_Z12setKeepAlive6String+0x70>)
   d458a:	781b      	ldrb	r3, [r3, #0]
   d458c:	480a      	ldr	r0, [pc, #40]	; (d45b8 <_Z12setKeepAlive6String+0x74>)
   d458e:	aa04      	add	r2, sp, #16
   d4590:	f7ff ff32 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatusWriteNeeded = true;                                                           // Need to store to FRAM back in the main loop
   d4594:	4b09      	ldr	r3, [pc, #36]	; (d45bc <_Z12setKeepAlive6String+0x78>)
   d4596:	2001      	movs	r0, #1
   d4598:	7018      	strb	r0, [r3, #0]
}
   d459a:	b044      	add	sp, #272	; 0x110
   d459c:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d459e:	2000      	movs	r0, #0
   d45a0:	e7fb      	b.n	d459a <_Z12setKeepAlive6String+0x56>
   d45a2:	bf00      	nop
   d45a4:	2003e5a4 	.word	0x2003e5a4
   d45a8:	2003e3e8 	.word	0x2003e3e8
   d45ac:	000db470 	.word	0x000db470
   d45b0:	2003df61 	.word	0x2003df61
   d45b4:	000db489 	.word	0x000db489
   d45b8:	2003e408 	.word	0x2003e408
   d45bc:	2003e5d4 	.word	0x2003e5d4

000d45c0 <_Z20setReportingDuration6String>:
int setReportingDuration(String command){
   d45c0:	b500      	push	{lr}
   d45c2:	b089      	sub	sp, #36	; 0x24
   d45c4:	9003      	str	r0, [sp, #12]
  sysStatus.reportingBoundary = command.toFloat();
   d45c6:	f003 fc87 	bl	d7ed8 <_ZNK6String7toFloatEv>
   d45ca:	4b0e      	ldr	r3, [pc, #56]	; (d4604 <_Z20setReportingDuration6String+0x44>)
  publishQueue.publish("Reporting Time Set to %s Minutes.",String(command),PRIVATE);
   d45cc:	9903      	ldr	r1, [sp, #12]
  sysStatus.reportingBoundary = command.toFloat();
   d45ce:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  publishQueue.publish("Reporting Time Set to %s Minutes.",String(command),PRIVATE);
   d45d2:	a804      	add	r0, sp, #16
  sysStatus.reportingBoundary = command.toFloat();
   d45d4:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
  publishQueue.publish("Reporting Time Set to %s Minutes.",String(command),PRIVATE);
   d45d8:	f003 fc34 	bl	d7e44 <_ZN6StringC1ERKS_>
   d45dc:	2300      	movs	r3, #0
   d45de:	f88d 3000 	strb.w	r3, [sp]
   d45e2:	4b09      	ldr	r3, [pc, #36]	; (d4608 <_Z20setReportingDuration6String+0x48>)
   d45e4:	9a04      	ldr	r2, [sp, #16]
   d45e6:	781b      	ldrb	r3, [r3, #0]
   d45e8:	4908      	ldr	r1, [pc, #32]	; (d460c <_Z20setReportingDuration6String+0x4c>)
   d45ea:	4809      	ldr	r0, [pc, #36]	; (d4610 <_Z20setReportingDuration6String+0x50>)
   d45ec:	f7ff ff04 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d45f0:	a804      	add	r0, sp, #16
   d45f2:	f003 fbb9 	bl	d7d68 <_ZN6StringD1Ev>
  sysStatusWriteNeeded = true;
   d45f6:	4b07      	ldr	r3, [pc, #28]	; (d4614 <_Z20setReportingDuration6String+0x54>)
   d45f8:	2001      	movs	r0, #1
   d45fa:	7018      	strb	r0, [r3, #0]
}
   d45fc:	b009      	add	sp, #36	; 0x24
   d45fe:	f85d fb04 	ldr.w	pc, [sp], #4
   d4602:	bf00      	nop
   d4604:	2003e5a4 	.word	0x2003e5a4
   d4608:	2003df61 	.word	0x2003df61
   d460c:	000db494 	.word	0x000db494
   d4610:	2003e408 	.word	0x2003e408
   d4614:	2003e5d4 	.word	0x2003e5d4

000d4618 <_Z14setVerboseMode6String>:
{
   d4618:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d461a:	4916      	ldr	r1, [pc, #88]	; (d4674 <_Z14setVerboseMode6String+0x5c>)
   d461c:	4605      	mov	r5, r0
   d461e:	f003 fc48 	bl	d7eb2 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4622:	4604      	mov	r4, r0
   d4624:	b188      	cbz	r0, d464a <_Z14setVerboseMode6String+0x32>
    sysStatus.verboseMode = true;
   d4626:	4b14      	ldr	r3, [pc, #80]	; (d4678 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d4628:	4a14      	ldr	r2, [pc, #80]	; (d467c <_Z14setVerboseMode6String+0x64>)
   d462a:	4915      	ldr	r1, [pc, #84]	; (d4680 <_Z14setVerboseMode6String+0x68>)
   d462c:	4815      	ldr	r0, [pc, #84]	; (d4684 <_Z14setVerboseMode6String+0x6c>)
    sysStatus.verboseMode = true;
   d462e:	2401      	movs	r4, #1
   d4630:	725c      	strb	r4, [r3, #9]
   d4632:	2300      	movs	r3, #0
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d4634:	f88d 3000 	strb.w	r3, [sp]
   d4638:	4b13      	ldr	r3, [pc, #76]	; (d4688 <_Z14setVerboseMode6String+0x70>)
   d463a:	781b      	ldrb	r3, [r3, #0]
   d463c:	f7ff fedc 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d4640:	4b12      	ldr	r3, [pc, #72]	; (d468c <_Z14setVerboseMode6String+0x74>)
    return 1;
   d4642:	4620      	mov	r0, r4
    sysStatusWriteNeeded = true;
   d4644:	701c      	strb	r4, [r3, #0]
}
   d4646:	b003      	add	sp, #12
   d4648:	bd30      	pop	{r4, r5, pc}
   d464a:	4911      	ldr	r1, [pc, #68]	; (d4690 <_Z14setVerboseMode6String+0x78>)
   d464c:	4628      	mov	r0, r5
   d464e:	f003 fc30 	bl	d7eb2 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4652:	2800      	cmp	r0, #0
   d4654:	d0f7      	beq.n	d4646 <_Z14setVerboseMode6String+0x2e>
    sysStatus.verboseMode = false;
   d4656:	4b08      	ldr	r3, [pc, #32]	; (d4678 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4658:	4a0e      	ldr	r2, [pc, #56]	; (d4694 <_Z14setVerboseMode6String+0x7c>)
    sysStatus.verboseMode = false;
   d465a:	725c      	strb	r4, [r3, #9]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d465c:	4b0a      	ldr	r3, [pc, #40]	; (d4688 <_Z14setVerboseMode6String+0x70>)
   d465e:	f88d 4000 	strb.w	r4, [sp]
   d4662:	781b      	ldrb	r3, [r3, #0]
   d4664:	4906      	ldr	r1, [pc, #24]	; (d4680 <_Z14setVerboseMode6String+0x68>)
   d4666:	4807      	ldr	r0, [pc, #28]	; (d4684 <_Z14setVerboseMode6String+0x6c>)
   d4668:	f7ff fec6 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d466c:	4b07      	ldr	r3, [pc, #28]	; (d468c <_Z14setVerboseMode6String+0x74>)
   d466e:	2001      	movs	r0, #1
   d4670:	7018      	strb	r0, [r3, #0]
    return 1;
   d4672:	e7e8      	b.n	d4646 <_Z14setVerboseMode6String+0x2e>
   d4674:	000db30b 	.word	0x000db30b
   d4678:	2003e5a4 	.word	0x2003e5a4
   d467c:	000db4b6 	.word	0x000db4b6
   d4680:	000db4d7 	.word	0x000db4d7
   d4684:	2003e408 	.word	0x2003e408
   d4688:	2003df61 	.word	0x2003df61
   d468c:	2003e5d4 	.word	0x2003e5d4
   d4690:	000db45a 	.word	0x000db45a
   d4694:	000db4c7 	.word	0x000db4c7

000d4698 <_Z16setOperatingMode6String>:

int setOperatingMode(String Sensor){
   d4698:	b500      	push	{lr}
   d469a:	b0c5      	sub	sp, #276	; 0x114
  char * pEND;
  char data[256];
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d469c:	6800      	ldr	r0, [r0, #0]
   d469e:	220a      	movs	r2, #10
   d46a0:	a903      	add	r1, sp, #12
   d46a2:	f005 fe15 	bl	da2d0 <strtol>
  if ((tempSensor < 0) || (tempSensor >4) ) return 0;
   d46a6:	2804      	cmp	r0, #4
   d46a8:	d819      	bhi.n	d46de <_Z16setOperatingMode6String+0x46>
  else{
    sysStatus.operatingMode = tempSensor;
   d46aa:	4b0e      	ldr	r3, [pc, #56]	; (d46e4 <_Z16setOperatingMode6String+0x4c>)
    snprintf(data, sizeof(data), "Operation Mode %i",tempSensor);
   d46ac:	4a0e      	ldr	r2, [pc, #56]	; (d46e8 <_Z16setOperatingMode6String+0x50>)
    sysStatus.operatingMode = tempSensor;
   d46ae:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
    snprintf(data, sizeof(data), "Operation Mode %i",tempSensor);
   d46b2:	f44f 7180 	mov.w	r1, #256	; 0x100
   d46b6:	4603      	mov	r3, r0
   d46b8:	a804      	add	r0, sp, #16
   d46ba:	f002 fd17 	bl	d70ec <snprintf>
   d46be:	2300      	movs	r3, #0
    publishQueue.publish("Mode",data,PRIVATE);
   d46c0:	f88d 3000 	strb.w	r3, [sp]
   d46c4:	4b09      	ldr	r3, [pc, #36]	; (d46ec <_Z16setOperatingMode6String+0x54>)
   d46c6:	490a      	ldr	r1, [pc, #40]	; (d46f0 <_Z16setOperatingMode6String+0x58>)
   d46c8:	781b      	ldrb	r3, [r3, #0]
   d46ca:	480a      	ldr	r0, [pc, #40]	; (d46f4 <_Z16setOperatingMode6String+0x5c>)
   d46cc:	aa04      	add	r2, sp, #16
   d46ce:	f7ff fe93 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;  
   d46d2:	4b09      	ldr	r3, [pc, #36]	; (d46f8 <_Z16setOperatingMode6String+0x60>)
   d46d4:	2001      	movs	r0, #1
   d46d6:	7018      	strb	r0, [r3, #0]
    return 1; 
  }
}
   d46d8:	b045      	add	sp, #276	; 0x114
   d46da:	f85d fb04 	ldr.w	pc, [sp], #4
  if ((tempSensor < 0) || (tempSensor >4) ) return 0;
   d46de:	2000      	movs	r0, #0
   d46e0:	e7fa      	b.n	d46d8 <_Z16setOperatingMode6String+0x40>
   d46e2:	bf00      	nop
   d46e4:	2003e5a4 	.word	0x2003e5a4
   d46e8:	000db4dc 	.word	0x000db4dc
   d46ec:	2003df61 	.word	0x2003df61
   d46f0:	000db4d7 	.word	0x000db4d7
   d46f4:	2003e408 	.word	0x2003e408
   d46f8:	2003e5d4 	.word	0x2003e5d4

000d46fc <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                                                 // Default settings for the device - connected, not-low power and always on
   d46fc:	b507      	push	{r0, r1, r2, lr}
   d46fe:	f002 fc3d 	bl	d6f7c <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d4702:	b148      	cbz	r0, d4718 <_Z18loadSystemDefaultsv+0x1c>
   d4704:	2300      	movs	r3, #0
   d4706:	f88d 3000 	strb.w	r3, [sp]
   d470a:	4b0d      	ldr	r3, [pc, #52]	; (d4740 <_Z18loadSystemDefaultsv+0x44>)
   d470c:	4a0d      	ldr	r2, [pc, #52]	; (d4744 <_Z18loadSystemDefaultsv+0x48>)
   d470e:	781b      	ldrb	r3, [r3, #0]
   d4710:	490d      	ldr	r1, [pc, #52]	; (d4748 <_Z18loadSystemDefaultsv+0x4c>)
   d4712:	480e      	ldr	r0, [pc, #56]	; (d474c <_Z18loadSystemDefaultsv+0x50>)
   d4714:	f7ff fe70 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.keepAlive = 120;
   d4718:	4a0d      	ldr	r2, [pc, #52]	; (d4750 <_Z18loadSystemDefaultsv+0x54>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d471a:	480e      	ldr	r0, [pc, #56]	; (d4754 <_Z18loadSystemDefaultsv+0x58>)
   d471c:	2378      	movs	r3, #120	; 0x78
   d471e:	6053      	str	r3, [r2, #4]
  sysStatus.verboseMode = false;
   d4720:	2300      	movs	r3, #0
   d4722:	7253      	strb	r3, [r2, #9]
  sysStatus.lowBatteryMode = false;
   d4724:	7293      	strb	r3, [r2, #10]
  sysStatus.reportingBoundary = 10*60;
   d4726:	f44f 7316 	mov.w	r3, #600	; 0x258
  sysStatus.structuresVersion = 1;
   d472a:	2101      	movs	r1, #1
  sysStatus.reportingBoundary = 10*60;
   d472c:	6253      	str	r3, [r2, #36]	; 0x24
   d472e:	2330      	movs	r3, #48	; 0x30
  sysStatus.structuresVersion = 1;
   d4730:	8011      	strh	r1, [r2, #0]
  sysStatus.operatingMode = 1;
   d4732:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
}
   d4736:	b003      	add	sp, #12
   d4738:	f85d eb04 	ldr.w	lr, [sp], #4
   d473c:	f001 ba2d 	b.w	d5b9a <_ZN6MB85RC9writeDataEjPKhj>
   d4740:	2003df61 	.word	0x2003df61
   d4744:	000db4ee 	.word	0x000db4ee
   d4748:	000db4d7 	.word	0x000db4d7
   d474c:	2003e408 	.word	0x2003e408
   d4750:	2003e5a4 	.word	0x2003e5a4
   d4754:	2003e3d8 	.word	0x2003e3d8

000d4758 <_Z17checkSystemValuesv>:
void checkSystemValues() {                                                                  // Checks to ensure that all system values are in reasonable range 
   d4758:	b510      	push	{r4, lr}
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d475a:	4c12      	ldr	r4, [pc, #72]	; (d47a4 <_Z17checkSystemValuesv+0x4c>)
   d475c:	7a23      	ldrb	r3, [r4, #8]
   d475e:	2b01      	cmp	r3, #1
   d4760:	d904      	bls.n	d476c <_Z17checkSystemValuesv+0x14>
   d4762:	f002 fc0b 	bl	d6f7c <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d4766:	b1d8      	cbz	r0, d47a0 <_Z17checkSystemValuesv+0x48>
   d4768:	2301      	movs	r3, #1
   d476a:	7223      	strb	r3, [r4, #8]
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   d476c:	6863      	ldr	r3, [r4, #4]
   d476e:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   d4772:	bf84      	itt	hi
   d4774:	f44f 7316 	movhi.w	r3, #600	; 0x258
   d4778:	6063      	strhi	r3, [r4, #4]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = true;
   d477a:	7a63      	ldrb	r3, [r4, #9]
   d477c:	2b01      	cmp	r3, #1
   d477e:	bf84      	itt	hi
   d4780:	2301      	movhi	r3, #1
   d4782:	7263      	strbhi	r3, [r4, #9]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
   d4784:	7aa3      	ldrb	r3, [r4, #10]
   d4786:	2b01      	cmp	r3, #1
   d4788:	bf84      	itt	hi
   d478a:	2300      	movhi	r3, #0
   d478c:	72a3      	strbhi	r3, [r4, #10]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d478e:	6963      	ldr	r3, [r4, #20]
   d4790:	2bff      	cmp	r3, #255	; 0xff
   d4792:	bf84      	itt	hi
   d4794:	2300      	movhi	r3, #0
   d4796:	6163      	strhi	r3, [r4, #20]
  sysStatusWriteNeeded = true;
   d4798:	4b03      	ldr	r3, [pc, #12]	; (d47a8 <_Z17checkSystemValuesv+0x50>)
   d479a:	2201      	movs	r2, #1
   d479c:	701a      	strb	r2, [r3, #0]
}
   d479e:	bd10      	pop	{r4, pc}
    else sysStatus.connectedStatus = false;
   d47a0:	7220      	strb	r0, [r4, #8]
   d47a2:	e7e3      	b.n	d476c <_Z17checkSystemValuesv+0x14>
   d47a4:	2003e5a4 	.word	0x2003e5a4
   d47a8:	2003e5d4 	.word	0x2003e5d4

000d47ac <_Z11petWatchdogv>:
{
   d47ac:	b507      	push	{r0, r1, r2, lr}
  digitalWrite(donePin, HIGH);                                                              // Pet the watchdog
   d47ae:	2101      	movs	r1, #1
   d47b0:	2005      	movs	r0, #5
   d47b2:	f003 ff44 	bl	d863e <digitalWrite>
  digitalWrite(donePin, LOW);
   d47b6:	2100      	movs	r1, #0
   d47b8:	2005      	movs	r0, #5
   d47ba:	f003 ff40 	bl	d863e <digitalWrite>
  watchdogFlag = false;
   d47be:	4a09      	ldr	r2, [pc, #36]	; (d47e4 <_Z11petWatchdogv+0x38>)
   d47c0:	2300      	movs	r3, #0
   d47c2:	7013      	strb	r3, [r2, #0]
  if (Particle.connected && sysStatus.verboseMode) publishQueue.publish("Watchdog","Petted",PRIVATE);
   d47c4:	4a08      	ldr	r2, [pc, #32]	; (d47e8 <_Z11petWatchdogv+0x3c>)
   d47c6:	7a52      	ldrb	r2, [r2, #9]
   d47c8:	b142      	cbz	r2, d47dc <_Z11petWatchdogv+0x30>
   d47ca:	f88d 3000 	strb.w	r3, [sp]
   d47ce:	4b07      	ldr	r3, [pc, #28]	; (d47ec <_Z11petWatchdogv+0x40>)
   d47d0:	4a07      	ldr	r2, [pc, #28]	; (d47f0 <_Z11petWatchdogv+0x44>)
   d47d2:	781b      	ldrb	r3, [r3, #0]
   d47d4:	4907      	ldr	r1, [pc, #28]	; (d47f4 <_Z11petWatchdogv+0x48>)
   d47d6:	4808      	ldr	r0, [pc, #32]	; (d47f8 <_Z11petWatchdogv+0x4c>)
   d47d8:	f7ff fe0e 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d47dc:	b003      	add	sp, #12
   d47de:	f85d fb04 	ldr.w	pc, [sp], #4
   d47e2:	bf00      	nop
   d47e4:	2003e5d5 	.word	0x2003e5d5
   d47e8:	2003e5a4 	.word	0x2003e5a4
   d47ec:	2003df61 	.word	0x2003df61
   d47f0:	000db506 	.word	0x000db506
   d47f4:	000db50d 	.word	0x000db50d
   d47f8:	2003e408 	.word	0x2003e408

000d47fc <_Z9sendEventv>:
{
   d47fc:	b510      	push	{r4, lr}
  if (sysStatus.operatingMode == 1){
   d47fe:	4b52      	ldr	r3, [pc, #328]	; (d4948 <_Z9sendEventv+0x14c>)
   d4800:	4c52      	ldr	r4, [pc, #328]	; (d494c <_Z9sendEventv+0x150>)
   d4802:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   d4806:	2b01      	cmp	r3, #1
{
   d4808:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
  if (sysStatus.operatingMode == 1){
   d480c:	d143      	bne.n	d4896 <_Z9sendEventv+0x9a>
    snprintf(data, sizeof(data), "{\"sensorOne\":%4.1f, \"sensorTwo\":%4.1f,  \"sensorThree\":%4.1f,  \"sensorFour\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":1}", sensorData.sensorOneCurrent,sensorData.sensorTwoCurrent,sensorData.sensorThreeCurrent,sensorData.sensorFourCurrent,sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d480e:	6960      	ldr	r0, [r4, #20]
   d4810:	f004 fa1c 	bl	d8c4c <__aeabi_f2d>
   d4814:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d4818:	6920      	ldr	r0, [r4, #16]
   d481a:	f004 fa17 	bl	d8c4c <__aeabi_f2d>
   d481e:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d4822:	68e0      	ldr	r0, [r4, #12]
   d4824:	f004 fa12 	bl	d8c4c <__aeabi_f2d>
   d4828:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d482c:	68a0      	ldr	r0, [r4, #8]
   d482e:	f004 fa0d 	bl	d8c4c <__aeabi_f2d>
   d4832:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4836:	6860      	ldr	r0, [r4, #4]
   d4838:	f004 fa08 	bl	d8c4c <__aeabi_f2d>
   d483c:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4840:	6820      	ldr	r0, [r4, #0]
   d4842:	f004 fa03 	bl	d8c4c <__aeabi_f2d>
   d4846:	e9cd 0100 	strd	r0, r1, [sp]
   d484a:	4a41      	ldr	r2, [pc, #260]	; (d4950 <_Z9sendEventv+0x154>)
    snprintf(data, sizeof(data), "{\"SensorOneR\":%4.1f, \"SensorOneS\":%4.1f,  \"SensorOneT\":%4.1f,  \"SensorOneN\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":4}", sensorData.Four_ThreePhaseLoad_I[0] ,sensorData.Four_ThreePhaseLoad_I[1],sensorData.Four_ThreePhaseLoad_I[2],sensorData.Four_ThreePhaseLoad_I[3],sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d484c:	f44f 7100 	mov.w	r1, #512	; 0x200
   d4850:	a80c      	add	r0, sp, #48	; 0x30
   d4852:	f002 fc4b 	bl	d70ec <snprintf>
   d4856:	2300      	movs	r3, #0
  publishQueue.publish("powermonitoring_hook", data, PRIVATE);
   d4858:	f88d 3000 	strb.w	r3, [sp]
   d485c:	4b3d      	ldr	r3, [pc, #244]	; (d4954 <_Z9sendEventv+0x158>)
   d485e:	493e      	ldr	r1, [pc, #248]	; (d4958 <_Z9sendEventv+0x15c>)
   d4860:	781b      	ldrb	r3, [r3, #0]
   d4862:	483e      	ldr	r0, [pc, #248]	; (d495c <_Z9sendEventv+0x160>)
   d4864:	aa0c      	add	r2, sp, #48	; 0x30
   d4866:	f7ff fdc7 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sensorData.sensorOnePrevious = sensorData.sensorOneCurrent;
   d486a:	6823      	ldr	r3, [r4, #0]
   d486c:	61a3      	str	r3, [r4, #24]
  sensorData.sensorTwoPrevious = sensorData.sensorTwoCurrent;
   d486e:	6863      	ldr	r3, [r4, #4]
   d4870:	61e3      	str	r3, [r4, #28]
  sensorData.sensorThreePrevious = sensorData.sensorThreeCurrent;
   d4872:	68a3      	ldr	r3, [r4, #8]
   d4874:	6223      	str	r3, [r4, #32]
  sensorData.sensorFourPrevious = sensorData.sensorFourCurrent;
   d4876:	68e3      	ldr	r3, [r4, #12]
   d4878:	6263      	str	r3, [r4, #36]	; 0x24
  sensorData.sensorFivePrevious = sensorData.sensorFiveCurrent;
   d487a:	6923      	ldr	r3, [r4, #16]
   d487c:	62a3      	str	r3, [r4, #40]	; 0x28
  sensorData.sensorSixPrevious = sensorData.sensorSixCurrent;
   d487e:	6963      	ldr	r3, [r4, #20]
   d4880:	62e3      	str	r3, [r4, #44]	; 0x2c
  dataInFlight = true;                                                                      // set the data inflight flag
   d4882:	4b37      	ldr	r3, [pc, #220]	; (d4960 <_Z9sendEventv+0x164>)
   d4884:	2201      	movs	r2, #1
   d4886:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4888:	f002 f98a 	bl	d6ba0 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d488c:	4b35      	ldr	r3, [pc, #212]	; (d4964 <_Z9sendEventv+0x168>)
   d488e:	6018      	str	r0, [r3, #0]
}
   d4890:	f50d 7d0c 	add.w	sp, sp, #560	; 0x230
   d4894:	bd10      	pop	{r4, pc}
  } else if (sysStatus.operatingMode == 2){
   d4896:	2b02      	cmp	r3, #2
   d4898:	d119      	bne.n	d48ce <_Z9sendEventv+0xd2>
    snprintf(data, sizeof(data), "{\"SensorOneR\":%4.1f, \"SensorOneS\":%4.1f,  \"SensorOneT\":%4.1f,  \"sensorTwoR\":%4.1f,  \"sensorTwoS\":%4.1f,\"sensorTwoT\":%4.1f,\"Mode\":2}", sensorData.I_ThreePhaseLoad_One[0],sensorData.I_ThreePhaseLoad_One[1],sensorData.I_ThreePhaseLoad_One[2],sensorData.I_ThreePhaseLoad_Two[0],sensorData.I_ThreePhaseLoad_Two[1],sensorData.I_ThreePhaseLoad_Two[2]);
   d489a:	e9d4 231c 	ldrd	r2, r3, [r4, #112]	; 0x70
   d489e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   d48a2:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
   d48a6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d48aa:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
   d48ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d48b2:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
   d48b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d48ba:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   d48be:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d48c2:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   d48c6:	e9cd 2300 	strd	r2, r3, [sp]
   d48ca:	4a27      	ldr	r2, [pc, #156]	; (d4968 <_Z9sendEventv+0x16c>)
   d48cc:	e7be      	b.n	d484c <_Z9sendEventv+0x50>
  }else if (sysStatus.operatingMode == 3){
   d48ce:	2b03      	cmp	r3, #3
   d48d0:	d11c      	bne.n	d490c <_Z9sendEventv+0x110>
    snprintf(data, sizeof(data), "{\"SensorOneR\":%4.1f, \"SensorOneS\":%4.1f,  \"SensorOneT\":%4.1f,  \"sensorFour\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":3}", sensorData.I_ThreePhaseLoad_One[0],sensorData.I_ThreePhaseLoad_One[1],sensorData.I_ThreePhaseLoad_One[2],sensorData.sensorFourCurrent,sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d48d2:	6960      	ldr	r0, [r4, #20]
   d48d4:	f004 f9ba 	bl	d8c4c <__aeabi_f2d>
   d48d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d48dc:	6920      	ldr	r0, [r4, #16]
   d48de:	f004 f9b5 	bl	d8c4c <__aeabi_f2d>
   d48e2:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d48e6:	68e0      	ldr	r0, [r4, #12]
   d48e8:	f004 f9b0 	bl	d8c4c <__aeabi_f2d>
   d48ec:	e9d4 2310 	ldrd	r2, r3, [r4, #64]	; 0x40
   d48f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d48f4:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
   d48f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d48fc:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   d4900:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d4904:	e9cd 2300 	strd	r2, r3, [sp]
   d4908:	4a18      	ldr	r2, [pc, #96]	; (d496c <_Z9sendEventv+0x170>)
   d490a:	e79f      	b.n	d484c <_Z9sendEventv+0x50>
  }else if (sysStatus.operatingMode == 4){
   d490c:	2b04      	cmp	r3, #4
   d490e:	d1a2      	bne.n	d4856 <_Z9sendEventv+0x5a>
    snprintf(data, sizeof(data), "{\"SensorOneR\":%4.1f, \"SensorOneS\":%4.1f,  \"SensorOneT\":%4.1f,  \"SensorOneN\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":4}", sensorData.Four_ThreePhaseLoad_I[0] ,sensorData.Four_ThreePhaseLoad_I[1],sensorData.Four_ThreePhaseLoad_I[2],sensorData.Four_ThreePhaseLoad_I[3],sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d4910:	6960      	ldr	r0, [r4, #20]
   d4912:	f004 f99b 	bl	d8c4c <__aeabi_f2d>
   d4916:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d491a:	6920      	ldr	r0, [r4, #16]
   d491c:	f004 f996 	bl	d8c4c <__aeabi_f2d>
   d4920:	e9d4 232a 	ldrd	r2, r3, [r4, #168]	; 0xa8
   d4924:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d4928:	e9d4 2328 	ldrd	r2, r3, [r4, #160]	; 0xa0
   d492c:	e9cd 2304 	strd	r2, r3, [sp, #16]
   d4930:	e9d4 2326 	ldrd	r2, r3, [r4, #152]	; 0x98
   d4934:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d4938:	e9d4 2324 	ldrd	r2, r3, [r4, #144]	; 0x90
   d493c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d4940:	e9cd 2300 	strd	r2, r3, [sp]
   d4944:	4a0a      	ldr	r2, [pc, #40]	; (d4970 <_Z9sendEventv+0x174>)
   d4946:	e781      	b.n	d484c <_Z9sendEventv+0x50>
   d4948:	2003e5a4 	.word	0x2003e5a4
   d494c:	2003e460 	.word	0x2003e460
   d4950:	000db516 	.word	0x000db516
   d4954:	2003df61 	.word	0x2003df61
   d4958:	000db722 	.word	0x000db722
   d495c:	2003e408 	.word	0x2003e408
   d4960:	2003df83 	.word	0x2003df83
   d4964:	2003e5d8 	.word	0x2003e5d8
   d4968:	000db598 	.word	0x000db598
   d496c:	000db61c 	.word	0x000db61c
   d4970:	000db69f 	.word	0x000db69f

000d4974 <_Z22publishStateTransitionv>:
{
   d4974:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4976:	4d11      	ldr	r5, [pc, #68]	; (d49bc <_Z22publishStateTransitionv+0x48>)
   d4978:	4c11      	ldr	r4, [pc, #68]	; (d49c0 <_Z22publishStateTransitionv+0x4c>)
   d497a:	4912      	ldr	r1, [pc, #72]	; (d49c4 <_Z22publishStateTransitionv+0x50>)
   d497c:	782a      	ldrb	r2, [r5, #0]
   d497e:	7820      	ldrb	r0, [r4, #0]
{
   d4980:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4982:	231a      	movs	r3, #26
   d4984:	fb03 1202 	mla	r2, r3, r2, r1
   d4988:	9200      	str	r2, [sp, #0]
   d498a:	fb03 1300 	mla	r3, r3, r0, r1
   d498e:	4a0e      	ldr	r2, [pc, #56]	; (d49c8 <_Z22publishStateTransitionv+0x54>)
   d4990:	2128      	movs	r1, #40	; 0x28
   d4992:	a802      	add	r0, sp, #8
   d4994:	f002 fbaa 	bl	d70ec <snprintf>
  oldState = state;
   d4998:	782b      	ldrb	r3, [r5, #0]
   d499a:	7023      	strb	r3, [r4, #0]
   d499c:	f002 faee 	bl	d6f7c <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d49a0:	b148      	cbz	r0, d49b6 <_Z22publishStateTransitionv+0x42>
   d49a2:	2300      	movs	r3, #0
   d49a4:	f88d 3000 	strb.w	r3, [sp]
   d49a8:	4b08      	ldr	r3, [pc, #32]	; (d49cc <_Z22publishStateTransitionv+0x58>)
   d49aa:	4909      	ldr	r1, [pc, #36]	; (d49d0 <_Z22publishStateTransitionv+0x5c>)
   d49ac:	781b      	ldrb	r3, [r3, #0]
   d49ae:	4809      	ldr	r0, [pc, #36]	; (d49d4 <_Z22publishStateTransitionv+0x60>)
   d49b0:	aa02      	add	r2, sp, #8
   d49b2:	f7ff fd21 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d49b6:	b00d      	add	sp, #52	; 0x34
   d49b8:	bd30      	pop	{r4, r5, pc}
   d49ba:	bf00      	nop
   d49bc:	2003e5a1 	.word	0x2003e5a1
   d49c0:	2003e404 	.word	0x2003e404
   d49c4:	2003dbc0 	.word	0x2003dbc0
   d49c8:	000db737 	.word	0x000db737
   d49cc:	2003df61 	.word	0x2003df61
   d49d0:	000db745 	.word	0x000db745
   d49d4:	2003e408 	.word	0x2003e408

000d49d8 <_Z17getBatteryContextv>:
{
   d49d8:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d49da:	4d0d      	ldr	r5, [pc, #52]	; (d4a10 <_Z17getBatteryContextv+0x38>)
   d49dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   d49de:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d49e0:	ac01      	add	r4, sp, #4
   d49e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d49e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d49e8:	4b0a      	ldr	r3, [pc, #40]	; (d4a14 <_Z17getBatteryContextv+0x3c>)
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d49ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d49ee:	7c1b      	ldrb	r3, [r3, #16]
   d49f0:	4809      	ldr	r0, [pc, #36]	; (d4a18 <_Z17getBatteryContextv+0x40>)
   d49f2:	aa08      	add	r2, sp, #32
   d49f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d49f8:	2110      	movs	r1, #16
   d49fa:	f853 3c1c 	ldr.w	r3, [r3, #-28]
   d49fe:	4a07      	ldr	r2, [pc, #28]	; (d4a1c <_Z17getBatteryContextv+0x44>)
   d4a00:	f002 fb74 	bl	d70ec <snprintf>
  sysStatusWriteNeeded = true;
   d4a04:	4b06      	ldr	r3, [pc, #24]	; (d4a20 <_Z17getBatteryContextv+0x48>)
   d4a06:	2201      	movs	r2, #1
   d4a08:	701a      	strb	r2, [r3, #0]
}
   d4a0a:	b009      	add	sp, #36	; 0x24
   d4a0c:	bd30      	pop	{r4, r5, pc}
   d4a0e:	bf00      	nop
   d4a10:	000dba50 	.word	0x000dba50
   d4a14:	2003e5a4 	.word	0x2003e5a4
   d4a18:	2003df62 	.word	0x2003df62
   d4a1c:	000dbb2c 	.word	0x000dbb2c
   d4a20:	2003e5d4 	.word	0x2003e5d4

000d4a24 <_Z20updateConstantValuesv>:
{   
   d4a24:	b513      	push	{r0, r1, r4, lr}
    snprintf(sensorOneConstantStr,sizeof(sensorOneConstantStr),"CT One: %3.1f", sensorConstants.sensorOneConstant);
   d4a26:	4c1e      	ldr	r4, [pc, #120]	; (d4aa0 <_Z20updateConstantValuesv+0x7c>)
   d4a28:	481e      	ldr	r0, [pc, #120]	; (d4aa4 <_Z20updateConstantValuesv+0x80>)
   d4a2a:	e9d4 2300 	ldrd	r2, r3, [r4]
   d4a2e:	2110      	movs	r1, #16
   d4a30:	e9cd 2300 	strd	r2, r3, [sp]
   d4a34:	4a1c      	ldr	r2, [pc, #112]	; (d4aa8 <_Z20updateConstantValuesv+0x84>)
   d4a36:	f002 fb59 	bl	d70ec <snprintf>
    snprintf(sensorTwoConstantStr,sizeof(sensorTwoConstantStr),"CT Two %3.1f", sensorConstants.sensorTwoConstant);
   d4a3a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
   d4a3e:	2110      	movs	r1, #16
   d4a40:	e9cd 2300 	strd	r2, r3, [sp]
   d4a44:	4819      	ldr	r0, [pc, #100]	; (d4aac <_Z20updateConstantValuesv+0x88>)
   d4a46:	4a1a      	ldr	r2, [pc, #104]	; (d4ab0 <_Z20updateConstantValuesv+0x8c>)
   d4a48:	f002 fb50 	bl	d70ec <snprintf>
    snprintf(sensorThreeConstantStr,sizeof(sensorThreeConstantStr),"CT Three: %3.1f", sensorConstants.sensorThreeConstant);
   d4a4c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   d4a50:	2110      	movs	r1, #16
   d4a52:	e9cd 2300 	strd	r2, r3, [sp]
   d4a56:	4817      	ldr	r0, [pc, #92]	; (d4ab4 <_Z20updateConstantValuesv+0x90>)
   d4a58:	4a17      	ldr	r2, [pc, #92]	; (d4ab8 <_Z20updateConstantValuesv+0x94>)
   d4a5a:	f002 fb47 	bl	d70ec <snprintf>
    snprintf(sensorFourConstantStr,sizeof(sensorFourConstantStr),"Sensor Four Constant : %3.1f", sensorConstants.sensorFourConstant);
   d4a5e:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   d4a62:	2110      	movs	r1, #16
   d4a64:	e9cd 2300 	strd	r2, r3, [sp]
   d4a68:	4814      	ldr	r0, [pc, #80]	; (d4abc <_Z20updateConstantValuesv+0x98>)
   d4a6a:	4a15      	ldr	r2, [pc, #84]	; (d4ac0 <_Z20updateConstantValuesv+0x9c>)
   d4a6c:	f002 fb3e 	bl	d70ec <snprintf>
    snprintf(sensorFiveConstantStr,sizeof(sensorFiveConstantStr),"Sensor Five Constant : %3.1f", sensorConstants.sensorFiveConstant);
   d4a70:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   d4a74:	2110      	movs	r1, #16
   d4a76:	e9cd 2300 	strd	r2, r3, [sp]
   d4a7a:	4812      	ldr	r0, [pc, #72]	; (d4ac4 <_Z20updateConstantValuesv+0xa0>)
   d4a7c:	4a12      	ldr	r2, [pc, #72]	; (d4ac8 <_Z20updateConstantValuesv+0xa4>)
   d4a7e:	f002 fb35 	bl	d70ec <snprintf>
    snprintf(sensorSixConstantStr,sizeof(sensorSixConstantStr),"Sensor Six Constant : %3.1f", sensorConstants.sensorSixConstant);
   d4a82:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   d4a86:	2110      	movs	r1, #16
   d4a88:	e9cd 2300 	strd	r2, r3, [sp]
   d4a8c:	480f      	ldr	r0, [pc, #60]	; (d4acc <_Z20updateConstantValuesv+0xa8>)
   d4a8e:	4a10      	ldr	r2, [pc, #64]	; (d4ad0 <_Z20updateConstantValuesv+0xac>)
   d4a90:	f002 fb2c 	bl	d70ec <snprintf>
    constantsStatusWriteNeeded = true;                                                         // This function is called when there is a change so, we need to update the FRAM
   d4a94:	4b0f      	ldr	r3, [pc, #60]	; (d4ad4 <_Z20updateConstantValuesv+0xb0>)
   d4a96:	2201      	movs	r2, #1
   d4a98:	701a      	strb	r2, [r3, #0]
} 
   d4a9a:	b002      	add	sp, #8
   d4a9c:	bd10      	pop	{r4, pc}
   d4a9e:	bf00      	nop
   d4aa0:	2003db90 	.word	0x2003db90
   d4aa4:	2003e561 	.word	0x2003e561
   d4aa8:	000db756 	.word	0x000db756
   d4aac:	2003e591 	.word	0x2003e591
   d4ab0:	000db764 	.word	0x000db764
   d4ab4:	2003e581 	.word	0x2003e581
   d4ab8:	000db771 	.word	0x000db771
   d4abc:	2003e551 	.word	0x2003e551
   d4ac0:	000db781 	.word	0x000db781
   d4ac4:	2003e541 	.word	0x2003e541
   d4ac8:	000db79e 	.word	0x000db79e
   d4acc:	2003e571 	.word	0x2003e571
   d4ad0:	000db7bb 	.word	0x000db7bb
   d4ad4:	2003df82 	.word	0x2003df82

000d4ad8 <_Z14setConstantOne6String>:
int setConstantOne(String command){
   d4ad8:	b510      	push	{r4, lr}
   d4ada:	b086      	sub	sp, #24
   d4adc:	4604      	mov	r4, r0
  sensorConstants.sensorOneConstant = command.toFloat();
   d4ade:	f003 f9fb 	bl	d7ed8 <_ZNK6String7toFloatEv>
   d4ae2:	ee10 0a10 	vmov	r0, s0
   d4ae6:	f004 f8b1 	bl	d8c4c <__aeabi_f2d>
   d4aea:	4b0c      	ldr	r3, [pc, #48]	; (d4b1c <_Z14setConstantOne6String+0x44>)
   d4aec:	e9c3 0100 	strd	r0, r1, [r3]
  publishQueue.publish("Constant One Value set to ",String(command),PRIVATE);
   d4af0:	4621      	mov	r1, r4
   d4af2:	a802      	add	r0, sp, #8
   d4af4:	f003 f9a6 	bl	d7e44 <_ZN6StringC1ERKS_>
   d4af8:	2300      	movs	r3, #0
   d4afa:	f88d 3000 	strb.w	r3, [sp]
   d4afe:	4b08      	ldr	r3, [pc, #32]	; (d4b20 <_Z14setConstantOne6String+0x48>)
   d4b00:	9a02      	ldr	r2, [sp, #8]
   d4b02:	781b      	ldrb	r3, [r3, #0]
   d4b04:	4907      	ldr	r1, [pc, #28]	; (d4b24 <_Z14setConstantOne6String+0x4c>)
   d4b06:	4808      	ldr	r0, [pc, #32]	; (d4b28 <_Z14setConstantOne6String+0x50>)
   d4b08:	f7ff fc76 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4b0c:	a802      	add	r0, sp, #8
   d4b0e:	f003 f92b 	bl	d7d68 <_ZN6StringD1Ev>
  updateConstantValues();
   d4b12:	f7ff ff87 	bl	d4a24 <_Z20updateConstantValuesv>
}
   d4b16:	2001      	movs	r0, #1
   d4b18:	b006      	add	sp, #24
   d4b1a:	bd10      	pop	{r4, pc}
   d4b1c:	2003db90 	.word	0x2003db90
   d4b20:	2003df61 	.word	0x2003df61
   d4b24:	000db7d7 	.word	0x000db7d7
   d4b28:	2003e408 	.word	0x2003e408

000d4b2c <_Z14setConstantTwo6String>:
int setConstantTwo(String command){
   d4b2c:	b510      	push	{r4, lr}
   d4b2e:	b086      	sub	sp, #24
   d4b30:	4604      	mov	r4, r0
  sensorConstants.sensorTwoConstant = command.toFloat();
   d4b32:	f003 f9d1 	bl	d7ed8 <_ZNK6String7toFloatEv>
   d4b36:	ee10 0a10 	vmov	r0, s0
   d4b3a:	f004 f887 	bl	d8c4c <__aeabi_f2d>
   d4b3e:	4b0c      	ldr	r3, [pc, #48]	; (d4b70 <_Z14setConstantTwo6String+0x44>)
   d4b40:	e9c3 0102 	strd	r0, r1, [r3, #8]
  publishQueue.publish("Constant Two Value set to ",String(command),PRIVATE);
   d4b44:	4621      	mov	r1, r4
   d4b46:	a802      	add	r0, sp, #8
   d4b48:	f003 f97c 	bl	d7e44 <_ZN6StringC1ERKS_>
   d4b4c:	2300      	movs	r3, #0
   d4b4e:	f88d 3000 	strb.w	r3, [sp]
   d4b52:	4b08      	ldr	r3, [pc, #32]	; (d4b74 <_Z14setConstantTwo6String+0x48>)
   d4b54:	9a02      	ldr	r2, [sp, #8]
   d4b56:	781b      	ldrb	r3, [r3, #0]
   d4b58:	4907      	ldr	r1, [pc, #28]	; (d4b78 <_Z14setConstantTwo6String+0x4c>)
   d4b5a:	4808      	ldr	r0, [pc, #32]	; (d4b7c <_Z14setConstantTwo6String+0x50>)
   d4b5c:	f7ff fc4c 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4b60:	a802      	add	r0, sp, #8
   d4b62:	f003 f901 	bl	d7d68 <_ZN6StringD1Ev>
  updateConstantValues();
   d4b66:	f7ff ff5d 	bl	d4a24 <_Z20updateConstantValuesv>
}
   d4b6a:	2001      	movs	r0, #1
   d4b6c:	b006      	add	sp, #24
   d4b6e:	bd10      	pop	{r4, pc}
   d4b70:	2003db90 	.word	0x2003db90
   d4b74:	2003df61 	.word	0x2003df61
   d4b78:	000db7f2 	.word	0x000db7f2
   d4b7c:	2003e408 	.word	0x2003e408

000d4b80 <_Z16setConstantThree6String>:
int setConstantThree(String command){
   d4b80:	b510      	push	{r4, lr}
   d4b82:	b086      	sub	sp, #24
   d4b84:	4604      	mov	r4, r0
  sensorConstants.sensorThreeConstant = command.toFloat();
   d4b86:	f003 f9a7 	bl	d7ed8 <_ZNK6String7toFloatEv>
   d4b8a:	ee10 0a10 	vmov	r0, s0
   d4b8e:	f004 f85d 	bl	d8c4c <__aeabi_f2d>
   d4b92:	4b0c      	ldr	r3, [pc, #48]	; (d4bc4 <_Z16setConstantThree6String+0x44>)
   d4b94:	e9c3 0104 	strd	r0, r1, [r3, #16]
  publishQueue.publish("Constant Three Value set to ",String(command),PRIVATE);
   d4b98:	4621      	mov	r1, r4
   d4b9a:	a802      	add	r0, sp, #8
   d4b9c:	f003 f952 	bl	d7e44 <_ZN6StringC1ERKS_>
   d4ba0:	2300      	movs	r3, #0
   d4ba2:	f88d 3000 	strb.w	r3, [sp]
   d4ba6:	4b08      	ldr	r3, [pc, #32]	; (d4bc8 <_Z16setConstantThree6String+0x48>)
   d4ba8:	9a02      	ldr	r2, [sp, #8]
   d4baa:	781b      	ldrb	r3, [r3, #0]
   d4bac:	4907      	ldr	r1, [pc, #28]	; (d4bcc <_Z16setConstantThree6String+0x4c>)
   d4bae:	4808      	ldr	r0, [pc, #32]	; (d4bd0 <_Z16setConstantThree6String+0x50>)
   d4bb0:	f7ff fc22 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4bb4:	a802      	add	r0, sp, #8
   d4bb6:	f003 f8d7 	bl	d7d68 <_ZN6StringD1Ev>
  updateConstantValues();
   d4bba:	f7ff ff33 	bl	d4a24 <_Z20updateConstantValuesv>
}
   d4bbe:	2001      	movs	r0, #1
   d4bc0:	b006      	add	sp, #24
   d4bc2:	bd10      	pop	{r4, pc}
   d4bc4:	2003db90 	.word	0x2003db90
   d4bc8:	2003df61 	.word	0x2003df61
   d4bcc:	000db80d 	.word	0x000db80d
   d4bd0:	2003e408 	.word	0x2003e408

000d4bd4 <_Z15setConstantFour6String>:
int setConstantFour(String command){
   d4bd4:	b510      	push	{r4, lr}
   d4bd6:	b086      	sub	sp, #24
   d4bd8:	4604      	mov	r4, r0
  sensorConstants.sensorFourConstant = command.toFloat();
   d4bda:	f003 f97d 	bl	d7ed8 <_ZNK6String7toFloatEv>
   d4bde:	ee10 0a10 	vmov	r0, s0
   d4be2:	f004 f833 	bl	d8c4c <__aeabi_f2d>
   d4be6:	4b0c      	ldr	r3, [pc, #48]	; (d4c18 <_Z15setConstantFour6String+0x44>)
   d4be8:	e9c3 0106 	strd	r0, r1, [r3, #24]
  publishQueue.publish("Constant Four Value set to ",String(command),PRIVATE);
   d4bec:	4621      	mov	r1, r4
   d4bee:	a802      	add	r0, sp, #8
   d4bf0:	f003 f928 	bl	d7e44 <_ZN6StringC1ERKS_>
   d4bf4:	2300      	movs	r3, #0
   d4bf6:	f88d 3000 	strb.w	r3, [sp]
   d4bfa:	4b08      	ldr	r3, [pc, #32]	; (d4c1c <_Z15setConstantFour6String+0x48>)
   d4bfc:	9a02      	ldr	r2, [sp, #8]
   d4bfe:	781b      	ldrb	r3, [r3, #0]
   d4c00:	4907      	ldr	r1, [pc, #28]	; (d4c20 <_Z15setConstantFour6String+0x4c>)
   d4c02:	4808      	ldr	r0, [pc, #32]	; (d4c24 <_Z15setConstantFour6String+0x50>)
   d4c04:	f7ff fbf8 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4c08:	a802      	add	r0, sp, #8
   d4c0a:	f003 f8ad 	bl	d7d68 <_ZN6StringD1Ev>
  updateConstantValues();
   d4c0e:	f7ff ff09 	bl	d4a24 <_Z20updateConstantValuesv>
}
   d4c12:	2001      	movs	r0, #1
   d4c14:	b006      	add	sp, #24
   d4c16:	bd10      	pop	{r4, pc}
   d4c18:	2003db90 	.word	0x2003db90
   d4c1c:	2003df61 	.word	0x2003df61
   d4c20:	000db82a 	.word	0x000db82a
   d4c24:	2003e408 	.word	0x2003e408

000d4c28 <_Z15setConstantFive6String>:
int setConstantFive(String command){
   d4c28:	b510      	push	{r4, lr}
   d4c2a:	b086      	sub	sp, #24
   d4c2c:	4604      	mov	r4, r0
  sensorConstants.sensorFiveConstant = command.toFloat();
   d4c2e:	f003 f953 	bl	d7ed8 <_ZNK6String7toFloatEv>
   d4c32:	ee10 0a10 	vmov	r0, s0
   d4c36:	f004 f809 	bl	d8c4c <__aeabi_f2d>
   d4c3a:	4b0c      	ldr	r3, [pc, #48]	; (d4c6c <_Z15setConstantFive6String+0x44>)
   d4c3c:	e9c3 0108 	strd	r0, r1, [r3, #32]
  publishQueue.publish("Constant Five Value set to ",String(command),PRIVATE);
   d4c40:	4621      	mov	r1, r4
   d4c42:	a802      	add	r0, sp, #8
   d4c44:	f003 f8fe 	bl	d7e44 <_ZN6StringC1ERKS_>
   d4c48:	2300      	movs	r3, #0
   d4c4a:	f88d 3000 	strb.w	r3, [sp]
   d4c4e:	4b08      	ldr	r3, [pc, #32]	; (d4c70 <_Z15setConstantFive6String+0x48>)
   d4c50:	9a02      	ldr	r2, [sp, #8]
   d4c52:	781b      	ldrb	r3, [r3, #0]
   d4c54:	4907      	ldr	r1, [pc, #28]	; (d4c74 <_Z15setConstantFive6String+0x4c>)
   d4c56:	4808      	ldr	r0, [pc, #32]	; (d4c78 <_Z15setConstantFive6String+0x50>)
   d4c58:	f7ff fbce 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4c5c:	a802      	add	r0, sp, #8
   d4c5e:	f003 f883 	bl	d7d68 <_ZN6StringD1Ev>
  updateConstantValues();
   d4c62:	f7ff fedf 	bl	d4a24 <_Z20updateConstantValuesv>
}
   d4c66:	2001      	movs	r0, #1
   d4c68:	b006      	add	sp, #24
   d4c6a:	bd10      	pop	{r4, pc}
   d4c6c:	2003db90 	.word	0x2003db90
   d4c70:	2003df61 	.word	0x2003df61
   d4c74:	000db846 	.word	0x000db846
   d4c78:	2003e408 	.word	0x2003e408

000d4c7c <_Z14setConstantSix6String>:
int setConstantSix(String command){
   d4c7c:	b510      	push	{r4, lr}
   d4c7e:	b086      	sub	sp, #24
   d4c80:	4604      	mov	r4, r0
  sensorConstants.sensorSixConstant = command.toFloat();
   d4c82:	f003 f929 	bl	d7ed8 <_ZNK6String7toFloatEv>
   d4c86:	ee10 0a10 	vmov	r0, s0
   d4c8a:	f003 ffdf 	bl	d8c4c <__aeabi_f2d>
   d4c8e:	4b0c      	ldr	r3, [pc, #48]	; (d4cc0 <_Z14setConstantSix6String+0x44>)
   d4c90:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
  publishQueue.publish("Constant Six Value set to ",String(command),PRIVATE);
   d4c94:	4621      	mov	r1, r4
   d4c96:	a802      	add	r0, sp, #8
   d4c98:	f003 f8d4 	bl	d7e44 <_ZN6StringC1ERKS_>
   d4c9c:	2300      	movs	r3, #0
   d4c9e:	f88d 3000 	strb.w	r3, [sp]
   d4ca2:	4b08      	ldr	r3, [pc, #32]	; (d4cc4 <_Z14setConstantSix6String+0x48>)
   d4ca4:	9a02      	ldr	r2, [sp, #8]
   d4ca6:	781b      	ldrb	r3, [r3, #0]
   d4ca8:	4907      	ldr	r1, [pc, #28]	; (d4cc8 <_Z14setConstantSix6String+0x4c>)
   d4caa:	4808      	ldr	r0, [pc, #32]	; (d4ccc <_Z14setConstantSix6String+0x50>)
   d4cac:	f7ff fba4 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4cb0:	a802      	add	r0, sp, #8
   d4cb2:	f003 f859 	bl	d7d68 <_ZN6StringD1Ev>
  updateConstantValues();
   d4cb6:	f7ff feb5 	bl	d4a24 <_Z20updateConstantValuesv>
}
   d4cba:	2001      	movs	r0, #1
   d4cbc:	b006      	add	sp, #24
   d4cbe:	bd10      	pop	{r4, pc}
   d4cc0:	2003db90 	.word	0x2003db90
   d4cc4:	2003df61 	.word	0x2003df61
   d4cc8:	000db862 	.word	0x000db862
   d4ccc:	2003e408 	.word	0x2003e408

000d4cd0 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPdS2_>:
//---------------------------------------------------------------------------------------------Three Phase

// Wires=3 for 3-Wires: R,S,T
// Wires=4 for 4 wires: R,S,T and N

void Three_Phase_Monitor(uint8_t Wires,Load_Monitor::CT_Property_Struct Load_Name[],double *Current_rms_per_Phase,double *Power_rms_per_Phase){
   d4cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4cd4:	b083      	sub	sp, #12
   uint8_t p=0;
   p=Wires;
   double i_rms_per_Phase[p]={0};
   d4cd6:	466c      	mov	r4, sp
   d4cd8:	eba4 04c0 	sub.w	r4, r4, r0, lsl #3
void Three_Phase_Monitor(uint8_t Wires,Load_Monitor::CT_Property_Struct Load_Name[],double *Current_rms_per_Phase,double *Power_rms_per_Phase){
   d4cdc:	af02      	add	r7, sp, #8
   double i_rms_per_Phase[p]={0};
   d4cde:	46a5      	mov	sp, r4
   d4ce0:	ad02      	add	r5, sp, #8
   d4ce2:	f04f 0a00 	mov.w	sl, #0
   d4ce6:	f04f 0b00 	mov.w	fp, #0
   d4cea:	46ac      	mov	ip, r5
   d4cec:	e8ec ab02 	strd	sl, fp, [ip], #8
   d4cf0:	ea4f 09c0 	mov.w	r9, r0, lsl #3
   d4cf4:	3802      	subs	r0, #2
   d4cf6:	2800      	cmp	r0, #0
   d4cf8:	da24      	bge.n	d4d44 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPdS2_+0x74>
   
  for (uint8_t i=0;i<p;i++){

   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d4cfa:	f8df b05c 	ldr.w	fp, [pc, #92]	; d4d58 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPdS2_+0x88>
  
  Current_rms_per_Phase[i]=i_rms_per_Phase[i];
  Power_rms_per_Phase[i]=((i_rms_per_Phase[i]*Vrms)/1000); //in kW
   d4cfe:	f8df a05c 	ldr.w	sl, [pc, #92]	; d4d5c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPdS2_+0x8c>
   d4d02:	460c      	mov	r4, r1
   d4d04:	4690      	mov	r8, r2
   d4d06:	461e      	mov	r6, r3
   d4d08:	44a9      	add	r9, r5
  for (uint8_t i=0;i<p;i++){
   d4d0a:	454d      	cmp	r5, r9
   d4d0c:	d01e      	beq.n	d4d4c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPdS2_+0x7c>
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d4d0e:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   d4d12:	e88d 0003 	stmia.w	sp, {r0, r1}
   d4d16:	4658      	mov	r0, fp
   d4d18:	e894 000c 	ldmia.w	r4, {r2, r3}
   d4d1c:	f000 fd98 	bl	d5850 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE>
  Current_rms_per_Phase[i]=i_rms_per_Phase[i];
   d4d20:	eca8 0b02 	vstmia	r8!, {d0}
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d4d24:	eca5 0b02 	vstmia	r5!, {d0}
  Power_rms_per_Phase[i]=((i_rms_per_Phase[i]*Vrms)/1000); //in kW
   d4d28:	e9da 2300 	ldrd	r2, r3, [sl]
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d4d2c:	ec51 0b10 	vmov	r0, r1, d0
  Power_rms_per_Phase[i]=((i_rms_per_Phase[i]*Vrms)/1000); //in kW
   d4d30:	f003 ffe4 	bl	d8cfc <__aeabi_dmul>
   d4d34:	4b07      	ldr	r3, [pc, #28]	; (d4d54 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPdS2_+0x84>)
   d4d36:	2200      	movs	r2, #0
   d4d38:	f004 f90a 	bl	d8f50 <__aeabi_ddiv>
   d4d3c:	3410      	adds	r4, #16
   d4d3e:	e8e6 0102 	strd	r0, r1, [r6], #8
  for (uint8_t i=0;i<p;i++){
   d4d42:	e7e2      	b.n	d4d0a <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPdS2_+0x3a>
   double i_rms_per_Phase[p]={0};
   d4d44:	e8ec ab02 	strd	sl, fp, [ip], #8
   d4d48:	3801      	subs	r0, #1
   d4d4a:	e7d4      	b.n	d4cf6 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPdS2_+0x26>
    
  }
  
}
   d4d4c:	3704      	adds	r7, #4
   d4d4e:	46bd      	mov	sp, r7
   d4d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4d54:	408f4000 	.word	0x408f4000
   d4d58:	2003de78 	.word	0x2003de78
   d4d5c:	2003db88 	.word	0x2003db88

000d4d60 <_Z16takeMeasurementsv>:


// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() 
{
   d4d60:	b538      	push	{r3, r4, r5, lr}
    sensorData.validData = false;
   d4d62:	4c7c      	ldr	r4, [pc, #496]	; (d4f54 <_Z16takeMeasurementsv+0x1f4>)
    
    getBatteryContext();     
    
    // If operatingMode is '1'. All single phase
    if ((sysStatus.operatingMode) == 1){
   d4d64:	4d7c      	ldr	r5, [pc, #496]	; (d4f58 <_Z16takeMeasurementsv+0x1f8>)
    sensorData.validData = false;
   d4d66:	2300      	movs	r3, #0
   d4d68:	f884 30d8 	strb.w	r3, [r4, #216]	; 0xd8
    getBatteryContext();     
   d4d6c:	f7ff fe34 	bl	d49d8 <_Z17getBatteryContextv>
    if ((sysStatus.operatingMode) == 1){
   d4d70:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
   d4d74:	2801      	cmp	r0, #1
   d4d76:	d14a      	bne.n	d4e0e <_Z16takeMeasurementsv+0xae>
      if (sysStatus.sensorOneConnected) sensorData.sensorOneCurrent =   emon1.calcIrms(1480);
   d4d78:	7f2b      	ldrb	r3, [r5, #28]
   d4d7a:	b14b      	cbz	r3, d4d90 <_Z16takeMeasurementsv+0x30>
   d4d7c:	4877      	ldr	r0, [pc, #476]	; (d4f5c <_Z16takeMeasurementsv+0x1fc>)
   d4d7e:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4d82:	f000 fde5 	bl	d5950 <_ZN13EnergyMonitor8calcIrmsEj>
   d4d86:	ec51 0b10 	vmov	r0, r1, d0
   d4d8a:	f004 fa87 	bl	d929c <__aeabi_d2f>
   d4d8e:	6020      	str	r0, [r4, #0]
      if (sysStatus.sensorTwoConnected) sensorData.sensorTwoCurrent =   emon2.calcIrms(1480);
   d4d90:	7f6b      	ldrb	r3, [r5, #29]
   d4d92:	b14b      	cbz	r3, d4da8 <_Z16takeMeasurementsv+0x48>
   d4d94:	4872      	ldr	r0, [pc, #456]	; (d4f60 <_Z16takeMeasurementsv+0x200>)
   d4d96:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4d9a:	f000 fdd9 	bl	d5950 <_ZN13EnergyMonitor8calcIrmsEj>
   d4d9e:	ec51 0b10 	vmov	r0, r1, d0
   d4da2:	f004 fa7b 	bl	d929c <__aeabi_d2f>
   d4da6:	6060      	str	r0, [r4, #4]
      if (sysStatus.sensorThreeConnected) sensorData.sensorThreeCurrent=  emon3.calcIrms(1480);
   d4da8:	7fab      	ldrb	r3, [r5, #30]
   d4daa:	b14b      	cbz	r3, d4dc0 <_Z16takeMeasurementsv+0x60>
   d4dac:	486d      	ldr	r0, [pc, #436]	; (d4f64 <_Z16takeMeasurementsv+0x204>)
   d4dae:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4db2:	f000 fdcd 	bl	d5950 <_ZN13EnergyMonitor8calcIrmsEj>
   d4db6:	ec51 0b10 	vmov	r0, r1, d0
   d4dba:	f004 fa6f 	bl	d929c <__aeabi_d2f>
   d4dbe:	60a0      	str	r0, [r4, #8]
    else if (sysStatus.operatingMode == 3){
      // Load for three phase with 3 Wires.
      Three_Phase_Monitor(3,ThreePhaseLoadOne,sensorData.I_ThreePhaseLoad_One,sensorData.P_ThreePhaseLoad_One);
      
      // CT4 to CT6 are available for single phase operation.
      if (sysStatus.sensorFourConnected) sensorData.sensorFourCurrent =  emon4.calcIrms(1480);
   d4dc0:	7feb      	ldrb	r3, [r5, #31]
   d4dc2:	b14b      	cbz	r3, d4dd8 <_Z16takeMeasurementsv+0x78>
   d4dc4:	4868      	ldr	r0, [pc, #416]	; (d4f68 <_Z16takeMeasurementsv+0x208>)
   d4dc6:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4dca:	f000 fdc1 	bl	d5950 <_ZN13EnergyMonitor8calcIrmsEj>
   d4dce:	ec51 0b10 	vmov	r0, r1, d0
   d4dd2:	f004 fa63 	bl	d929c <__aeabi_d2f>
   d4dd6:	60e0      	str	r0, [r4, #12]
    else if (sysStatus.operatingMode == 4){
      // Load for three phase with 3 Wires.
      Three_Phase_Monitor(4,ThreePhaseLoadFourWires,sensorData.Four_ThreePhaseLoad_I,sensorData.Four_ThreePhaseLoad_P);
      
      // CT5 & CT6 are available for single phase operation.
      if (sysStatus.sensorFiveConnected) sensorData.sensorFiveCurrent =  emon5.calcIrms(1480);               
   d4dd8:	f895 3020 	ldrb.w	r3, [r5, #32]
   d4ddc:	b14b      	cbz	r3, d4df2 <_Z16takeMeasurementsv+0x92>
   d4dde:	4863      	ldr	r0, [pc, #396]	; (d4f6c <_Z16takeMeasurementsv+0x20c>)
   d4de0:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4de4:	f000 fdb4 	bl	d5950 <_ZN13EnergyMonitor8calcIrmsEj>
   d4de8:	ec51 0b10 	vmov	r0, r1, d0
   d4dec:	f004 fa56 	bl	d929c <__aeabi_d2f>
   d4df0:	6120      	str	r0, [r4, #16]
      if (sysStatus.sensorSixConnected) sensorData.sensorSixCurrent =   emon6.calcIrms(1480);  
   d4df2:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d4df6:	b1eb      	cbz	r3, d4e34 <_Z16takeMeasurementsv+0xd4>
   d4df8:	485d      	ldr	r0, [pc, #372]	; (d4f70 <_Z16takeMeasurementsv+0x210>)
   d4dfa:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4dfe:	f000 fda7 	bl	d5950 <_ZN13EnergyMonitor8calcIrmsEj>
   d4e02:	ec51 0b10 	vmov	r0, r1, d0
   d4e06:	f004 fa49 	bl	d929c <__aeabi_d2f>
   d4e0a:	6160      	str	r0, [r4, #20]
   d4e0c:	e012      	b.n	d4e34 <_Z16takeMeasurementsv+0xd4>
    else if ((sysStatus.operatingMode) == 2){
   d4e0e:	2802      	cmp	r0, #2
   d4e10:	f040 8089 	bne.w	d4f26 <_Z16takeMeasurementsv+0x1c6>
      Three_Phase_Monitor(3,ThreePhaseLoadOne,sensorData.I_ThreePhaseLoad_One,sensorData.P_ThreePhaseLoad_One);
   d4e14:	4957      	ldr	r1, [pc, #348]	; (d4f74 <_Z16takeMeasurementsv+0x214>)
   d4e16:	f104 0348 	add.w	r3, r4, #72	; 0x48
   d4e1a:	f104 0230 	add.w	r2, r4, #48	; 0x30
   d4e1e:	2003      	movs	r0, #3
   d4e20:	f7ff ff56 	bl	d4cd0 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPdS2_>
      Three_Phase_Monitor(3,ThreePhaseLoadTwo,sensorData.I_ThreePhaseLoad_Two,sensorData.P_ThreePhaseLoad_Two);
   d4e24:	4954      	ldr	r1, [pc, #336]	; (d4f78 <_Z16takeMeasurementsv+0x218>)
   d4e26:	f104 0378 	add.w	r3, r4, #120	; 0x78
   d4e2a:	f104 0260 	add.w	r2, r4, #96	; 0x60
   d4e2e:	2003      	movs	r0, #3
   d4e30:	f7ff ff4e 	bl	d4cd0 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPdS2_>
    }

    if (((abs(sensorData.sensorOneCurrent)-(sensorData.sensorOnePrevious)) >= 0.5) || ((abs(sensorData.sensorTwoCurrent)-(sensorData.sensorTwoPrevious)) >= 0.5) || ((abs(sensorData.sensorThreeCurrent)-(sensorData.sensorThreePrevious)) >= 0.5) || ((abs(sensorData.sensorFourCurrent)-(sensorData.sensorFourPrevious)) >= 0.5) || ((abs(sensorData.sensorFiveCurrent)-(sensorData.sensorFivePrevious)) >= 0.5) || ((abs(sensorData.sensorSixCurrent)-(sensorData.sensorSixPrevious)) >= 0.5)) {
   d4e34:	edd4 7a00 	vldr	s15, [r4]
   d4e38:	ed94 7a06 	vldr	s14, [r4, #24]
   d4e3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e44:	bfd8      	it	le
   d4e46:	eef1 7a67 	vnegle.f32	s15, s15
   d4e4a:	ee37 7ac7 	vsub.f32	s14, s15, s14
   d4e4e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   d4e52:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e5a:	da59      	bge.n	d4f10 <_Z16takeMeasurementsv+0x1b0>
   d4e5c:	ed94 7a01 	vldr	s14, [r4, #4]
   d4e60:	edd4 6a07 	vldr	s13, [r4, #28]
   d4e64:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4e68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e6c:	bfd8      	it	le
   d4e6e:	eeb1 7a47 	vnegle.f32	s14, s14
   d4e72:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4e76:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e7e:	da47      	bge.n	d4f10 <_Z16takeMeasurementsv+0x1b0>
   d4e80:	ed94 7a02 	vldr	s14, [r4, #8]
   d4e84:	edd4 6a08 	vldr	s13, [r4, #32]
   d4e88:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e90:	bfd8      	it	le
   d4e92:	eeb1 7a47 	vnegle.f32	s14, s14
   d4e96:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4e9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ea2:	da35      	bge.n	d4f10 <_Z16takeMeasurementsv+0x1b0>
   d4ea4:	ed94 7a03 	vldr	s14, [r4, #12]
   d4ea8:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
   d4eac:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4eb4:	bfd8      	it	le
   d4eb6:	eeb1 7a47 	vnegle.f32	s14, s14
   d4eba:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4ebe:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ec6:	da23      	bge.n	d4f10 <_Z16takeMeasurementsv+0x1b0>
   d4ec8:	ed94 7a04 	vldr	s14, [r4, #16]
   d4ecc:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
   d4ed0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4ed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ed8:	bfd8      	it	le
   d4eda:	eeb1 7a47 	vnegle.f32	s14, s14
   d4ede:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4ee2:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4eea:	da11      	bge.n	d4f10 <_Z16takeMeasurementsv+0x1b0>
   d4eec:	ed94 7a05 	vldr	s14, [r4, #20]
   d4ef0:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
   d4ef4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4efc:	bfd8      	it	le
   d4efe:	eeb1 7a47 	vnegle.f32	s14, s14
   d4f02:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4f06:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4f0e:	db1f      	blt.n	d4f50 <_Z16takeMeasurementsv+0x1f0>
      // Indicate that this is a valid data array and store it
      sensorData.validData = true;
   d4f10:	2501      	movs	r5, #1
   d4f12:	f884 50d8 	strb.w	r5, [r4, #216]	; 0xd8
      sensorData.timeStamp = Time.now();
   d4f16:	f003 f97c 	bl	d8212 <_ZN9TimeClass3nowEv>
      sensorDataWriteNeeded = true;
   d4f1a:	4b18      	ldr	r3, [pc, #96]	; (d4f7c <_Z16takeMeasurementsv+0x21c>)
      sensorData.timeStamp = Time.now();
   d4f1c:	f8c4 00d0 	str.w	r0, [r4, #208]	; 0xd0
      sensorDataWriteNeeded = true;
   d4f20:	701d      	strb	r5, [r3, #0]
      return 1;
   d4f22:	4628      	mov	r0, r5
      } else return 0;
  }
   d4f24:	bd38      	pop	{r3, r4, r5, pc}
    else if (sysStatus.operatingMode == 3){
   d4f26:	2803      	cmp	r0, #3
   d4f28:	d107      	bne.n	d4f3a <_Z16takeMeasurementsv+0x1da>
      Three_Phase_Monitor(3,ThreePhaseLoadOne,sensorData.I_ThreePhaseLoad_One,sensorData.P_ThreePhaseLoad_One);
   d4f2a:	4912      	ldr	r1, [pc, #72]	; (d4f74 <_Z16takeMeasurementsv+0x214>)
   d4f2c:	f104 0348 	add.w	r3, r4, #72	; 0x48
   d4f30:	f104 0230 	add.w	r2, r4, #48	; 0x30
   d4f34:	f7ff fecc 	bl	d4cd0 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPdS2_>
   d4f38:	e742      	b.n	d4dc0 <_Z16takeMeasurementsv+0x60>
    else if (sysStatus.operatingMode == 4){
   d4f3a:	2804      	cmp	r0, #4
   d4f3c:	f47f af7a 	bne.w	d4e34 <_Z16takeMeasurementsv+0xd4>
      Three_Phase_Monitor(4,ThreePhaseLoadFourWires,sensorData.Four_ThreePhaseLoad_I,sensorData.Four_ThreePhaseLoad_P);
   d4f40:	490f      	ldr	r1, [pc, #60]	; (d4f80 <_Z16takeMeasurementsv+0x220>)
   d4f42:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
   d4f46:	f104 0290 	add.w	r2, r4, #144	; 0x90
   d4f4a:	f7ff fec1 	bl	d4cd0 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPdS2_>
   d4f4e:	e743      	b.n	d4dd8 <_Z16takeMeasurementsv+0x78>
      } else return 0;
   d4f50:	2000      	movs	r0, #0
   d4f52:	e7e7      	b.n	d4f24 <_Z16takeMeasurementsv+0x1c4>
   d4f54:	2003e460 	.word	0x2003e460
   d4f58:	2003e5a4 	.word	0x2003e5a4
   d4f5c:	2003df88 	.word	0x2003df88
   d4f60:	2003e040 	.word	0x2003e040
   d4f64:	2003e0f8 	.word	0x2003e0f8
   d4f68:	2003e1b0 	.word	0x2003e1b0
   d4f6c:	2003e268 	.word	0x2003e268
   d4f70:	2003e320 	.word	0x2003e320
   d4f74:	2003df00 	.word	0x2003df00
   d4f78:	2003df30 	.word	0x2003df30
   d4f7c:	2003e540 	.word	0x2003e540
   d4f80:	2003dec0 	.word	0x2003dec0

000d4f84 <loop>:
void loop() {
   d4f84:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch(state) {
   d4f86:	4c74      	ldr	r4, [pc, #464]	; (d5158 <loop+0x1d4>)
   d4f88:	7823      	ldrb	r3, [r4, #0]
   d4f8a:	3b01      	subs	r3, #1
   d4f8c:	2b05      	cmp	r3, #5
   d4f8e:	d817      	bhi.n	d4fc0 <loop+0x3c>
   d4f90:	e8df f003 	tbb	[pc, r3]
   d4f94:	675b03bd 	.word	0x675b03bd
   d4f98:	8a41      	.short	0x8a41
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4f9a:	4b70      	ldr	r3, [pc, #448]	; (d515c <loop+0x1d8>)
   d4f9c:	7a5b      	ldrb	r3, [r3, #9]
   d4f9e:	b12b      	cbz	r3, d4fac <loop+0x28>
   d4fa0:	4b6f      	ldr	r3, [pc, #444]	; (d5160 <loop+0x1dc>)
   d4fa2:	781b      	ldrb	r3, [r3, #0]
   d4fa4:	2b02      	cmp	r3, #2
   d4fa6:	d001      	beq.n	d4fac <loop+0x28>
   d4fa8:	f7ff fce4 	bl	d4974 <_Z22publishStateTransitionv>
    if (!(Time.now() % wakeBoundary)) state = REPORTING_DETERMINATION;                                                     
   d4fac:	f003 f931 	bl	d8212 <_ZN9TimeClass3nowEv>
   d4fb0:	230a      	movs	r3, #10
   d4fb2:	fb90 f2f3 	sdiv	r2, r0, r3
   d4fb6:	fb02 0313 	mls	r3, r2, r3, r0
   d4fba:	b90b      	cbnz	r3, d4fc0 <loop+0x3c>
   d4fbc:	2305      	movs	r3, #5
    else state = IDLE_STATE;
   d4fbe:	7023      	strb	r3, [r4, #0]
  rtc.loop();                                                                               // keeps the clock up to date
   d4fc0:	4868      	ldr	r0, [pc, #416]	; (d5164 <loop+0x1e0>)
   d4fc2:	f001 f9c7 	bl	d6354 <_ZN8MCP794104loopEv>
  if (watchdogFlag) petWatchdog();                                                          // Watchdog flag is raised - time to pet the watchdog
   d4fc6:	4b68      	ldr	r3, [pc, #416]	; (d5168 <loop+0x1e4>)
   d4fc8:	781b      	ldrb	r3, [r3, #0]
   d4fca:	b10b      	cbz	r3, d4fd0 <loop+0x4c>
   d4fcc:	f7ff fbee 	bl	d47ac <_Z11petWatchdogv>
  if (sysStatusWriteNeeded) {
   d4fd0:	4c66      	ldr	r4, [pc, #408]	; (d516c <loop+0x1e8>)
   d4fd2:	7823      	ldrb	r3, [r4, #0]
   d4fd4:	b13b      	cbz	r3, d4fe6 <loop+0x62>
   d4fd6:	2330      	movs	r3, #48	; 0x30
   d4fd8:	4a60      	ldr	r2, [pc, #384]	; (d515c <loop+0x1d8>)
   d4fda:	4865      	ldr	r0, [pc, #404]	; (d5170 <loop+0x1ec>)
   d4fdc:	2101      	movs	r1, #1
   d4fde:	f000 fddc 	bl	d5b9a <_ZN6MB85RC9writeDataEjPKhj>
    sysStatusWriteNeeded = false;
   d4fe2:	2300      	movs	r3, #0
   d4fe4:	7023      	strb	r3, [r4, #0]
  if (sensorDataWriteNeeded) {
   d4fe6:	4c63      	ldr	r4, [pc, #396]	; (d5174 <loop+0x1f0>)
   d4fe8:	7823      	ldrb	r3, [r4, #0]
   d4fea:	b13b      	cbz	r3, d4ffc <loop+0x78>
   d4fec:	23e0      	movs	r3, #224	; 0xe0
   d4fee:	4a62      	ldr	r2, [pc, #392]	; (d5178 <loop+0x1f4>)
   d4ff0:	485f      	ldr	r0, [pc, #380]	; (d5170 <loop+0x1ec>)
   d4ff2:	21a0      	movs	r1, #160	; 0xa0
   d4ff4:	f000 fdd1 	bl	d5b9a <_ZN6MB85RC9writeDataEjPKhj>
    sensorDataWriteNeeded = false;
   d4ff8:	2300      	movs	r3, #0
   d4ffa:	7023      	strb	r3, [r4, #0]
  if (constantsStatusWriteNeeded) {
   d4ffc:	4c5f      	ldr	r4, [pc, #380]	; (d517c <loop+0x1f8>)
   d4ffe:	7823      	ldrb	r3, [r4, #0]
   d5000:	b13b      	cbz	r3, d5012 <loop+0x8e>
   d5002:	2330      	movs	r3, #48	; 0x30
   d5004:	4a5e      	ldr	r2, [pc, #376]	; (d5180 <loop+0x1fc>)
   d5006:	485a      	ldr	r0, [pc, #360]	; (d5170 <loop+0x1ec>)
   d5008:	21f0      	movs	r1, #240	; 0xf0
   d500a:	f000 fdc6 	bl	d5b9a <_ZN6MB85RC9writeDataEjPKhj>
    constantsStatusWriteNeeded = false;
   d500e:	2300      	movs	r3, #0
   d5010:	7023      	strb	r3, [r4, #0]
}
   d5012:	b003      	add	sp, #12
   d5014:	bd30      	pop	{r4, r5, pc}
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d5016:	4d51      	ldr	r5, [pc, #324]	; (d515c <loop+0x1d8>)
   d5018:	7a6a      	ldrb	r2, [r5, #9]
   d501a:	b12a      	cbz	r2, d5028 <loop+0xa4>
   d501c:	4b50      	ldr	r3, [pc, #320]	; (d5160 <loop+0x1dc>)
   d501e:	781b      	ldrb	r3, [r3, #0]
   d5020:	2b05      	cmp	r3, #5
   d5022:	d001      	beq.n	d5028 <loop+0xa4>
   d5024:	f7ff fca6 	bl	d4974 <_Z22publishStateTransitionv>
    if (takeMeasurements()) state = REPORTING_STATE;
   d5028:	f7ff fe9a 	bl	d4d60 <_Z16takeMeasurementsv>
   d502c:	b108      	cbz	r0, d5032 <loop+0xae>
    state = REPORTING_STATE;
   d502e:	2304      	movs	r3, #4
   d5030:	e7c5      	b.n	d4fbe <loop+0x3a>
    else if (!(Time.now() % sysStatus.reportingBoundary)) state = MEASURING_STATE;
   d5032:	f003 f8ee 	bl	d8212 <_ZN9TimeClass3nowEv>
   d5036:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5038:	fb90 f2f3 	sdiv	r2, r0, r3
   d503c:	fb02 0313 	mls	r3, r2, r3, r0
   d5040:	b90b      	cbnz	r3, d5046 <loop+0xc2>
   d5042:	2303      	movs	r3, #3
   d5044:	e7bb      	b.n	d4fbe <loop+0x3a>
    else state = IDLE_STATE;
   d5046:	2302      	movs	r3, #2
   d5048:	e7b9      	b.n	d4fbe <loop+0x3a>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d504a:	4b44      	ldr	r3, [pc, #272]	; (d515c <loop+0x1d8>)
   d504c:	7a5b      	ldrb	r3, [r3, #9]
   d504e:	b12b      	cbz	r3, d505c <loop+0xd8>
   d5050:	4b43      	ldr	r3, [pc, #268]	; (d5160 <loop+0x1dc>)
   d5052:	781b      	ldrb	r3, [r3, #0]
   d5054:	2b03      	cmp	r3, #3
   d5056:	d001      	beq.n	d505c <loop+0xd8>
   d5058:	f7ff fc8c 	bl	d4974 <_Z22publishStateTransitionv>
    takeMeasurements();
   d505c:	f7ff fe80 	bl	d4d60 <_Z16takeMeasurementsv>
   d5060:	e7e5      	b.n	d502e <loop+0xaa>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();               // Reporting - hourly or on command
   d5062:	4b3e      	ldr	r3, [pc, #248]	; (d515c <loop+0x1d8>)
   d5064:	7a5b      	ldrb	r3, [r3, #9]
   d5066:	b12b      	cbz	r3, d5074 <loop+0xf0>
   d5068:	4b3d      	ldr	r3, [pc, #244]	; (d5160 <loop+0x1dc>)
   d506a:	781b      	ldrb	r3, [r3, #0]
   d506c:	2b04      	cmp	r3, #4
   d506e:	d001      	beq.n	d5074 <loop+0xf0>
   d5070:	f7ff fc80 	bl	d4974 <_Z22publishStateTransitionv>
   d5074:	f001 ff82 	bl	d6f7c <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d5078:	b168      	cbz	r0, d5096 <loop+0x112>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d507a:	f003 f8db 	bl	d8234 <_ZN9TimeClass4hourEv>
   d507e:	280c      	cmp	r0, #12
   d5080:	d105      	bne.n	d508e <loop+0x10a>
   d5082:	f001 ff7b 	bl	d6f7c <spark_cloud_flag_connected>
        if (!connected()) {
   d5086:	b110      	cbz	r0, d508e <loop+0x10a>
        return spark_sync_time(NULL);
   d5088:	2000      	movs	r0, #0
   d508a:	f001 ff97 	bl	d6fbc <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
   d508e:	f7ff fbb5 	bl	d47fc <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d5092:	2306      	movs	r3, #6
   d5094:	e793      	b.n	d4fbe <loop+0x3a>
        spark_cloud_flag_connect();
   d5096:	f001 ff69 	bl	d6f6c <spark_cloud_flag_connect>
      state = IDLE_STATE;
   d509a:	2302      	movs	r3, #2
   d509c:	7023      	strb	r3, [r4, #0]
   d509e:	f001 fd7f 	bl	d6ba0 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d50a2:	4b38      	ldr	r3, [pc, #224]	; (d5184 <loop+0x200>)
   d50a4:	6018      	str	r0, [r3, #0]
   d50a6:	e78b      	b.n	d4fc0 <loop+0x3c>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d50a8:	4b2c      	ldr	r3, [pc, #176]	; (d515c <loop+0x1d8>)
   d50aa:	7a5b      	ldrb	r3, [r3, #9]
   d50ac:	b12b      	cbz	r3, d50ba <loop+0x136>
   d50ae:	4b2c      	ldr	r3, [pc, #176]	; (d5160 <loop+0x1dc>)
   d50b0:	781b      	ldrb	r3, [r3, #0]
   d50b2:	2b06      	cmp	r3, #6
   d50b4:	d001      	beq.n	d50ba <loop+0x136>
   d50b6:	f7ff fc5d 	bl	d4974 <_Z22publishStateTransitionv>
    if (!dataInFlight && !(Time.now() % wakeBoundary))                                       // Response received back to IDLE state - make sure we don't allow repetivie reporting events
   d50ba:	4b33      	ldr	r3, [pc, #204]	; (d5188 <loop+0x204>)
   d50bc:	781b      	ldrb	r3, [r3, #0]
   d50be:	b943      	cbnz	r3, d50d2 <loop+0x14e>
   d50c0:	f003 f8a7 	bl	d8212 <_ZN9TimeClass3nowEv>
   d50c4:	230a      	movs	r3, #10
   d50c6:	fb90 f2f3 	sdiv	r2, r0, r3
   d50ca:	fb02 0313 	mls	r3, r2, r3, r0
   d50ce:	2b00      	cmp	r3, #0
   d50d0:	d0b9      	beq.n	d5046 <loop+0xc2>
   d50d2:	f001 fd65 	bl	d6ba0 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {                                   // If it takes too long - will need to reset
   d50d6:	4b2d      	ldr	r3, [pc, #180]	; (d518c <loop+0x208>)
   d50d8:	681b      	ldr	r3, [r3, #0]
   d50da:	1ac0      	subs	r0, r0, r3
   d50dc:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d50e0:	4298      	cmp	r0, r3
   d50e2:	f67f af6d 	bls.w	d4fc0 <loop+0x3c>
   d50e6:	f001 fd5b 	bl	d6ba0 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d50ea:	4d26      	ldr	r5, [pc, #152]	; (d5184 <loop+0x200>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d50ec:	4a28      	ldr	r2, [pc, #160]	; (d5190 <loop+0x20c>)
      resetTimeStamp = millis();
   d50ee:	6028      	str	r0, [r5, #0]
   d50f0:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d50f2:	f88d 3000 	strb.w	r3, [sp]
   d50f6:	4b27      	ldr	r3, [pc, #156]	; (d5194 <loop+0x210>)
   d50f8:	4927      	ldr	r1, [pc, #156]	; (d5198 <loop+0x214>)
   d50fa:	781b      	ldrb	r3, [r3, #0]
   d50fc:	4827      	ldr	r0, [pc, #156]	; (d519c <loop+0x218>)
   d50fe:	f7ff f97b 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      state = ERROR_STATE;                                                                  // Response timed out
   d5102:	2301      	movs	r3, #1
   d5104:	7023      	strb	r3, [r4, #0]
   d5106:	f001 fd4b 	bl	d6ba0 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d510a:	6028      	str	r0, [r5, #0]
   d510c:	e758      	b.n	d4fc0 <loop+0x3c>
    if (state != oldState) publishStateTransition();
   d510e:	4b14      	ldr	r3, [pc, #80]	; (d5160 <loop+0x1dc>)
   d5110:	781b      	ldrb	r3, [r3, #0]
   d5112:	2b01      	cmp	r3, #1
   d5114:	d001      	beq.n	d511a <loop+0x196>
   d5116:	f7ff fc2d 	bl	d4974 <_Z22publishStateTransitionv>
   d511a:	f001 fd41 	bl	d6ba0 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d511e:	4b19      	ldr	r3, [pc, #100]	; (d5184 <loop+0x200>)
   d5120:	681b      	ldr	r3, [r3, #0]
   d5122:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d5126:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d512a:	4283      	cmp	r3, r0
   d512c:	f4bf af48 	bcs.w	d4fc0 <loop+0x3c>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5130:	f001 ff24 	bl	d6f7c <spark_cloud_flag_connected>
      if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE); // Brodcast Reset Action
   d5134:	b148      	cbz	r0, d514a <loop+0x1c6>
   d5136:	2300      	movs	r3, #0
   d5138:	f88d 3000 	strb.w	r3, [sp]
   d513c:	4b15      	ldr	r3, [pc, #84]	; (d5194 <loop+0x210>)
   d513e:	4a18      	ldr	r2, [pc, #96]	; (d51a0 <loop+0x21c>)
   d5140:	781b      	ldrb	r3, [r3, #0]
   d5142:	4918      	ldr	r1, [pc, #96]	; (d51a4 <loop+0x220>)
   d5144:	4815      	ldr	r0, [pc, #84]	; (d519c <loop+0x218>)
   d5146:	f7ff f957 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      delay(2000);
   d514a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d514e:	f002 f815 	bl	d717c <delay>
      System.reset();
   d5152:	f002 fee3 	bl	d7f1c <_ZN11SystemClass5resetEv>
   d5156:	e733      	b.n	d4fc0 <loop+0x3c>
   d5158:	2003e5a1 	.word	0x2003e5a1
   d515c:	2003e5a4 	.word	0x2003e5a4
   d5160:	2003e404 	.word	0x2003e404
   d5164:	2003e444 	.word	0x2003e444
   d5168:	2003e5d5 	.word	0x2003e5d5
   d516c:	2003e5d4 	.word	0x2003e5d4
   d5170:	2003e3d8 	.word	0x2003e3d8
   d5174:	2003e540 	.word	0x2003e540
   d5178:	2003e460 	.word	0x2003e460
   d517c:	2003df82 	.word	0x2003df82
   d5180:	2003db90 	.word	0x2003db90
   d5184:	2003e440 	.word	0x2003e440
   d5188:	2003df83 	.word	0x2003df83
   d518c:	2003e5d8 	.word	0x2003e5d8
   d5190:	000dbec0 	.word	0x000dbec0
   d5194:	2003df61 	.word	0x2003df61
   d5198:	000db87d 	.word	0x000db87d
   d519c:	2003e408 	.word	0x2003e408
   d51a0:	000db896 	.word	0x000db896
   d51a4:	000db8aa 	.word	0x000db8aa

000d51a8 <_ZN10CloudClass8variableIA13_cJRdEEEbRKT_DpOT0_>:
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d51a8:	2300      	movs	r3, #0
   d51aa:	2209      	movs	r2, #9
   d51ac:	f001 bec6 	b.w	d6f3c <spark_variable>

000d51b0 <setup>:
void setup() {
   d51b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d51b4:	2100      	movs	r1, #0
void setup() {
   d51b6:	b09a      	sub	sp, #104	; 0x68
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d51b8:	2008      	movs	r0, #8
   d51ba:	f003 fa2f 	bl	d861c <pinMode>
  pinMode(donePin,OUTPUT);                                                                  // Allows us to pet the watchdog
   d51be:	2101      	movs	r1, #1
   d51c0:	2005      	movs	r0, #5
   d51c2:	f003 fa2b 	bl	d861c <pinMode>
  petWatchdog();                                                                            // Pet the watchdog - This will reset the watchdog time period AND 
   d51c6:	f7ff faf1 	bl	d47ac <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                                          // The watchdog timer will signal us and we have to respond
   d51ca:	2300      	movs	r3, #0
   d51cc:	9300      	str	r3, [sp, #0]
   d51ce:	2201      	movs	r2, #1
   d51d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d51d4:	49b1      	ldr	r1, [pc, #708]	; (d549c <setup+0x2ec>)
   d51d6:	2008      	movs	r0, #8
   d51d8:	f002 fc12 	bl	d7a00 <_Z15attachInterrupttPFvvE13InterruptModeah>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d51dc:	4bb0      	ldr	r3, [pc, #704]	; (d54a0 <setup+0x2f0>)
   d51de:	aa0a      	add	r2, sp, #40	; 0x28
   d51e0:	f103 0510 	add.w	r5, r3, #16
   d51e4:	4617      	mov	r7, r2
   d51e6:	6818      	ldr	r0, [r3, #0]
   d51e8:	6859      	ldr	r1, [r3, #4]
   d51ea:	4614      	mov	r4, r2
   d51ec:	c403      	stmia	r4!, {r0, r1}
   d51ee:	3308      	adds	r3, #8
   d51f0:	42ab      	cmp	r3, r5
   d51f2:	4622      	mov	r2, r4
   d51f4:	d1f7      	bne.n	d51e6 <setup+0x36>
   d51f6:	8819      	ldrh	r1, [r3, #0]
   d51f8:	789b      	ldrb	r3, [r3, #2]
   d51fa:	70a3      	strb	r3, [r4, #2]
   d51fc:	222d      	movs	r2, #45	; 0x2d
   d51fe:	8021      	strh	r1, [r4, #0]
  state = INITIALIZATION_STATE;
   d5200:	4da8      	ldr	r5, [pc, #672]	; (d54a4 <setup+0x2f4>)
   d5202:	4ca9      	ldr	r4, [pc, #676]	; (d54a8 <setup+0x2f8>)
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d5204:	2100      	movs	r1, #0
   d5206:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
  state = INITIALIZATION_STATE;
   d520a:	2600      	movs	r6, #0
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d520c:	f004 f92a 	bl	d9464 <memset>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, long seconds = 0, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleepPinImpl(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, std::chrono::seconds s, SleepOptionFlags flag = SLEEP_NETWORK_OFF) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, s.count(), flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag); }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) { return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count()); }

    static String deviceID(void) { return spark_deviceID(); }
   d5210:	a802      	add	r0, sp, #8
  state = INITIALIZATION_STATE;
   d5212:	702e      	strb	r6, [r5, #0]
   d5214:	f001 feba 	bl	d6f8c <spark_deviceID>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d5218:	a902      	add	r1, sp, #8
   d521a:	a806      	add	r0, sp, #24
   d521c:	f002 fe12 	bl	d7e44 <_ZN6StringC1ERKS_>
  Particle.subscribe(System.deviceID() + "/hook-response/powermonitoring_hook/", UbidotsHandler, MY_DEVICES);
   d5220:	49a2      	ldr	r1, [pc, #648]	; (d54ac <setup+0x2fc>)
   d5222:	a806      	add	r0, sp, #24
   d5224:	f002 fe30 	bl	d7e88 <_ZplRK15StringSumHelperPKc>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d5228:	e9cd 6600 	strd	r6, r6, [sp]
   d522c:	49a0      	ldr	r1, [pc, #640]	; (d54b0 <setup+0x300>)
   d522e:	6800      	ldr	r0, [r0, #0]
   d5230:	4633      	mov	r3, r6
   d5232:	4632      	mov	r2, r6
   d5234:	f001 feba 	bl	d6fac <spark_subscribe>
class StringSumHelper : public String
   d5238:	a806      	add	r0, sp, #24
   d523a:	f002 fd95 	bl	d7d68 <_ZN6StringD1Ev>
   d523e:	a802      	add	r0, sp, #8
   d5240:	f002 fd92 	bl	d7d68 <_ZN6StringD1Ev>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5244:	499b      	ldr	r1, [pc, #620]	; (d54b4 <setup+0x304>)
   d5246:	489c      	ldr	r0, [pc, #624]	; (d54b8 <setup+0x308>)
   d5248:	4633      	mov	r3, r6
   d524a:	2204      	movs	r2, #4
   d524c:	f001 fe76 	bl	d6f3c <spark_variable>
   d5250:	499a      	ldr	r1, [pc, #616]	; (d54bc <setup+0x30c>)
   d5252:	489b      	ldr	r0, [pc, #620]	; (d54c0 <setup+0x310>)
   d5254:	4633      	mov	r3, r6
   d5256:	2204      	movs	r2, #4
   d5258:	f001 fe70 	bl	d6f3c <spark_variable>
   d525c:	4999      	ldr	r1, [pc, #612]	; (d54c4 <setup+0x314>)
   d525e:	489a      	ldr	r0, [pc, #616]	; (d54c8 <setup+0x318>)
   d5260:	4633      	mov	r3, r6
   d5262:	2204      	movs	r2, #4
   d5264:	f001 fe6a 	bl	d6f3c <spark_variable>
   d5268:	4633      	mov	r3, r6
   d526a:	2202      	movs	r2, #2
   d526c:	1d21      	adds	r1, r4, #4
   d526e:	4897      	ldr	r0, [pc, #604]	; (d54cc <setup+0x31c>)
   d5270:	f001 fe64 	bl	d6f3c <spark_variable>
   d5274:	2201      	movs	r2, #1
   d5276:	18a1      	adds	r1, r4, r2
   d5278:	4633      	mov	r3, r6
   d527a:	4895      	ldr	r0, [pc, #596]	; (d54d0 <setup+0x320>)
   d527c:	f001 fe5e 	bl	d6f3c <spark_variable>
  Particle.variable("Constant One", sensorConstants.sensorOneConstant);
   d5280:	4994      	ldr	r1, [pc, #592]	; (d54d4 <setup+0x324>)
   d5282:	4895      	ldr	r0, [pc, #596]	; (d54d8 <setup+0x328>)
   d5284:	f7ff ff90 	bl	d51a8 <_ZN10CloudClass8variableIA13_cJRdEEEbRKT_DpOT0_>
  Particle.variable("Constant Two", sensorConstants.sensorTwoConstant);
   d5288:	4994      	ldr	r1, [pc, #592]	; (d54dc <setup+0x32c>)
   d528a:	4895      	ldr	r0, [pc, #596]	; (d54e0 <setup+0x330>)
   d528c:	f7ff ff8c 	bl	d51a8 <_ZN10CloudClass8variableIA13_cJRdEEEbRKT_DpOT0_>
   d5290:	4994      	ldr	r1, [pc, #592]	; (d54e4 <setup+0x334>)
   d5292:	4895      	ldr	r0, [pc, #596]	; (d54e8 <setup+0x338>)
   d5294:	4633      	mov	r3, r6
   d5296:	2209      	movs	r2, #9
   d5298:	f001 fe50 	bl	d6f3c <spark_variable>
   d529c:	4993      	ldr	r1, [pc, #588]	; (d54ec <setup+0x33c>)
   d529e:	4894      	ldr	r0, [pc, #592]	; (d54f0 <setup+0x340>)
   d52a0:	4633      	mov	r3, r6
   d52a2:	2209      	movs	r2, #9
   d52a4:	f001 fe4a 	bl	d6f3c <spark_variable>
   d52a8:	4633      	mov	r3, r6
   d52aa:	2209      	movs	r2, #9
   d52ac:	4991      	ldr	r1, [pc, #580]	; (d54f4 <setup+0x344>)
   d52ae:	4892      	ldr	r0, [pc, #584]	; (d54f8 <setup+0x348>)
   d52b0:	f001 fe44 	bl	d6f3c <spark_variable>
  Particle.variable("Constant Six", sensorConstants.sensorSixConstant);
   d52b4:	4991      	ldr	r1, [pc, #580]	; (d54fc <setup+0x34c>)
   d52b6:	4892      	ldr	r0, [pc, #584]	; (d5500 <setup+0x350>)
   d52b8:	f7ff ff76 	bl	d51a8 <_ZN10CloudClass8variableIA13_cJRdEEEbRKT_DpOT0_>
   d52bc:	4633      	mov	r3, r6
   d52be:	2202      	movs	r2, #2
   d52c0:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d52c4:	488f      	ldr	r0, [pc, #572]	; (d5504 <setup+0x354>)
   d52c6:	f001 fe39 	bl	d6f3c <spark_variable>
        return _variable(name, std::forward<ArgsT>(args)...);
   d52ca:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d52ce:	9306      	str	r3, [sp, #24]
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d52d0:	2202      	movs	r2, #2
   d52d2:	4633      	mov	r3, r6
   d52d4:	a906      	add	r1, sp, #24
   d52d6:	488c      	ldr	r0, [pc, #560]	; (d5508 <setup+0x358>)
   d52d8:	f001 fe30 	bl	d6f3c <spark_variable>
        return _function(name, args...);
   d52dc:	498b      	ldr	r1, [pc, #556]	; (d550c <setup+0x35c>)
   d52de:	488c      	ldr	r0, [pc, #560]	; (d5510 <setup+0x360>)
   d52e0:	f7ff f860 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52e4:	498b      	ldr	r1, [pc, #556]	; (d5514 <setup+0x364>)
   d52e6:	488c      	ldr	r0, [pc, #560]	; (d5518 <setup+0x368>)
   d52e8:	f7ff f85c 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52ec:	498b      	ldr	r1, [pc, #556]	; (d551c <setup+0x36c>)
   d52ee:	488c      	ldr	r0, [pc, #560]	; (d5520 <setup+0x370>)
   d52f0:	f7ff f858 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52f4:	498b      	ldr	r1, [pc, #556]	; (d5524 <setup+0x374>)
   d52f6:	4876      	ldr	r0, [pc, #472]	; (d54d0 <setup+0x320>)
   d52f8:	f7ff f854 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d52fc:	498a      	ldr	r1, [pc, #552]	; (d5528 <setup+0x378>)
   d52fe:	488b      	ldr	r0, [pc, #556]	; (d552c <setup+0x37c>)
   d5300:	f7ff f850 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5304:	498a      	ldr	r1, [pc, #552]	; (d5530 <setup+0x380>)
   d5306:	488b      	ldr	r0, [pc, #556]	; (d5534 <setup+0x384>)
   d5308:	f7ff f84c 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d530c:	498a      	ldr	r1, [pc, #552]	; (d5538 <setup+0x388>)
   d530e:	488b      	ldr	r0, [pc, #556]	; (d553c <setup+0x38c>)
   d5310:	f7ff f848 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5314:	498a      	ldr	r1, [pc, #552]	; (d5540 <setup+0x390>)
   d5316:	488b      	ldr	r0, [pc, #556]	; (d5544 <setup+0x394>)
   d5318:	f7ff f844 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d531c:	498a      	ldr	r1, [pc, #552]	; (d5548 <setup+0x398>)
   d531e:	488b      	ldr	r0, [pc, #556]	; (d554c <setup+0x39c>)
   d5320:	f7ff f840 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5324:	498a      	ldr	r1, [pc, #552]	; (d5550 <setup+0x3a0>)
   d5326:	488b      	ldr	r0, [pc, #556]	; (d5554 <setup+0x3a4>)
   d5328:	f7ff f83c 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d532c:	498a      	ldr	r1, [pc, #552]	; (d5558 <setup+0x3a8>)
   d532e:	488b      	ldr	r0, [pc, #556]	; (d555c <setup+0x3ac>)
   d5330:	f7ff f838 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5334:	498a      	ldr	r1, [pc, #552]	; (d5560 <setup+0x3b0>)
   d5336:	488b      	ldr	r0, [pc, #556]	; (d5564 <setup+0x3b4>)
   d5338:	f7ff f834 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d533c:	498a      	ldr	r1, [pc, #552]	; (d5568 <setup+0x3b8>)
   d533e:	488b      	ldr	r0, [pc, #556]	; (d556c <setup+0x3bc>)
   d5340:	f7ff f830 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5344:	498a      	ldr	r1, [pc, #552]	; (d5570 <setup+0x3c0>)
   d5346:	488b      	ldr	r0, [pc, #556]	; (d5574 <setup+0x3c4>)
   d5348:	f7ff f82c 	bl	d43a4 <_ZN10CloudClass9_functionEPKcPFi6StringE>
  rtc.setup();                                                        // Start the real time clock
   d534c:	488a      	ldr	r0, [pc, #552]	; (d5578 <setup+0x3c8>)
   d534e:	f000 fefb 	bl	d6148 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d5352:	4631      	mov	r1, r6
   d5354:	4888      	ldr	r0, [pc, #544]	; (d5578 <setup+0x3c8>)
   d5356:	f001 f834 	bl	d63c2 <_ZN8MCP7941010clearAlarmEi>
  fram.begin();                                                                             // Initialize the FRAM module
   d535a:	4888      	ldr	r0, [pc, #544]	; (d557c <setup+0x3cc>)
   d535c:	f000 fb90 	bl	d5a80 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5360:	2301      	movs	r3, #1
   d5362:	4886      	ldr	r0, [pc, #536]	; (d557c <setup+0x3cc>)
   d5364:	aa06      	add	r2, sp, #24
   d5366:	4631      	mov	r1, r6
   d5368:	f000 fbcc 	bl	d5b04 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                                                   // Check to see if the memory map in the sketch matches the data on the chip
   d536c:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5370:	2b0c      	cmp	r3, #12
   d5372:	d060      	beq.n	d5436 <setup+0x286>
    fram.erase();                                                                           // Reset the FRAM to correct the issue
   d5374:	4881      	ldr	r0, [pc, #516]	; (d557c <setup+0x3cc>)
   d5376:	f000 fb8d 	bl	d5a94 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d537a:	4a81      	ldr	r2, [pc, #516]	; (d5580 <setup+0x3d0>)
   d537c:	487f      	ldr	r0, [pc, #508]	; (d557c <setup+0x3cc>)
   d537e:	2304      	movs	r3, #4
   d5380:	4631      	mov	r1, r6
   d5382:	f000 fc0a 	bl	d5b9a <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5386:	2301      	movs	r3, #1
   d5388:	487c      	ldr	r0, [pc, #496]	; (d557c <setup+0x3cc>)
   d538a:	aa06      	add	r2, sp, #24
   d538c:	4631      	mov	r1, r6
   d538e:	f000 fbb9 	bl	d5b04 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;                              // Device will not work without FRAM
   d5392:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5396:	2b0c      	cmp	r3, #12
   d5398:	d04a      	beq.n	d5430 <setup+0x280>
   d539a:	2301      	movs	r3, #1
   d539c:	702b      	strb	r3, [r5, #0]
  emon1.current(CT1_PIN,sensorConstants.sensorOneConstant);
   d539e:	4e4d      	ldr	r6, [pc, #308]	; (d54d4 <setup+0x324>)
  checkSystemValues();                                                                      // Make sure System values are all in valid range
   d53a0:	f7ff f9da 	bl	d4758 <_Z17checkSystemValuesv>
  emon1.current(CT1_PIN,sensorConstants.sensorOneConstant);
   d53a4:	4b77      	ldr	r3, [pc, #476]	; (d5584 <setup+0x3d4>)
   d53a6:	4878      	ldr	r0, [pc, #480]	; (d5588 <setup+0x3d8>)
   d53a8:	7819      	ldrb	r1, [r3, #0]
   d53aa:	ed96 0b00 	vldr	d0, [r6]
   d53ae:	f000 fac3 	bl	d5938 <_ZN13EnergyMonitor7currentEjd>
  emon2.current(CT2_PIN,sensorConstants.sensorTwoConstant);
   d53b2:	4b76      	ldr	r3, [pc, #472]	; (d558c <setup+0x3dc>)
   d53b4:	4876      	ldr	r0, [pc, #472]	; (d5590 <setup+0x3e0>)
   d53b6:	7819      	ldrb	r1, [r3, #0]
   d53b8:	ed96 0b02 	vldr	d0, [r6, #8]
   d53bc:	f000 fabc 	bl	d5938 <_ZN13EnergyMonitor7currentEjd>
  emon3.current(CT3_PIN,sensorConstants.sensorThreeConstant);
   d53c0:	4b74      	ldr	r3, [pc, #464]	; (d5594 <setup+0x3e4>)
   d53c2:	4875      	ldr	r0, [pc, #468]	; (d5598 <setup+0x3e8>)
   d53c4:	7819      	ldrb	r1, [r3, #0]
   d53c6:	ed96 0b04 	vldr	d0, [r6, #16]
   d53ca:	f000 fab5 	bl	d5938 <_ZN13EnergyMonitor7currentEjd>
  emon4.current(CT4_PIN,sensorConstants.sensorFourConstant);
   d53ce:	4b73      	ldr	r3, [pc, #460]	; (d559c <setup+0x3ec>)
   d53d0:	4873      	ldr	r0, [pc, #460]	; (d55a0 <setup+0x3f0>)
   d53d2:	7819      	ldrb	r1, [r3, #0]
   d53d4:	ed96 0b06 	vldr	d0, [r6, #24]
   d53d8:	f000 faae 	bl	d5938 <_ZN13EnergyMonitor7currentEjd>
  emon5.current(CT5_PIN,sensorConstants.sensorFiveConstant);
   d53dc:	4b71      	ldr	r3, [pc, #452]	; (d55a4 <setup+0x3f4>)
   d53de:	4872      	ldr	r0, [pc, #456]	; (d55a8 <setup+0x3f8>)
   d53e0:	7819      	ldrb	r1, [r3, #0]
   d53e2:	ed96 0b08 	vldr	d0, [r6, #32]
   d53e6:	f000 faa7 	bl	d5938 <_ZN13EnergyMonitor7currentEjd>
  emon6.current(CT6_PIN,sensorConstants.sensorSixConstant);
   d53ea:	4b70      	ldr	r3, [pc, #448]	; (d55ac <setup+0x3fc>)
   d53ec:	4870      	ldr	r0, [pc, #448]	; (d55b0 <setup+0x400>)
   d53ee:	7819      	ldrb	r1, [r3, #0]
   d53f0:	ed96 0b0a 	vldr	d0, [r6, #40]	; 0x28
   d53f4:	f000 faa0 	bl	d5938 <_ZN13EnergyMonitor7currentEjd>
  if (sysStatus.thirdPartySim) {
   d53f8:	7863      	ldrb	r3, [r4, #1]
   d53fa:	b38b      	cbz	r3, d5460 <setup+0x2b0>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d53fc:	2000      	movs	r0, #0
   d53fe:	f001 fbdf 	bl	d6bc0 <hal_timer_millis>
   d5402:	f04f 0a00 	mov.w	sl, #0
   d5406:	4606      	mov	r6, r0
   d5408:	2000      	movs	r0, #0
   d540a:	f001 fbd9 	bl	d6bc0 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d540e:	ebb0 0806 	subs.w	r8, r0, r6
   d5412:	eb61 090a 	sbc.w	r9, r1, sl
        while (_while() && !_condition()) {
   d5416:	2300      	movs	r3, #0
   d5418:	f247 522f 	movw	r2, #29999	; 0x752f
   d541c:	454b      	cmp	r3, r9
   d541e:	bf08      	it	eq
   d5420:	4542      	cmpeq	r2, r8
   d5422:	d30f      	bcc.n	d5444 <setup+0x294>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5424:	f001 fdaa 	bl	d6f7c <spark_cloud_flag_connected>
   d5428:	b960      	cbnz	r0, d5444 <setup+0x294>
            spark_process();
   d542a:	f001 fd97 	bl	d6f5c <spark_process>
        while (_while() && !_condition()) {
   d542e:	e7eb      	b.n	d5408 <setup+0x258>
      loadSystemDefaults();                                                                 // Out of the box, we need the device to be awake and connected
   d5430:	f7ff f964 	bl	d46fc <_Z18loadSystemDefaultsv>
   d5434:	e7b3      	b.n	d539e <setup+0x1ee>
   d5436:	2330      	movs	r3, #48	; 0x30
   d5438:	4622      	mov	r2, r4
   d543a:	2101      	movs	r1, #1
   d543c:	484f      	ldr	r0, [pc, #316]	; (d557c <setup+0x3cc>)
   d543e:	f000 fb61 	bl	d5b04 <_ZN6MB85RC8readDataEjPhj>
        return t;
   d5442:	e7ac      	b.n	d539e <setup+0x1ee>
   d5444:	f001 fd9a 	bl	d6f7c <spark_cloud_flag_connected>
    Particle.keepAlive(sysStatus.keepAlive);                                              // Set the keep alive value
   d5448:	6860      	ldr	r0, [r4, #4]
   d544a:	f7fe ffb1 	bl	d43b0 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d544e:	6863      	ldr	r3, [r4, #4]
   d5450:	4858      	ldr	r0, [pc, #352]	; (d55b4 <setup+0x404>)
   d5452:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d5456:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d545a:	4359      	muls	r1, r3
   d545c:	f7fe ffbb 	bl	d43d6 <_ZN5Timer12changePeriodEjj>
  takeMeasurements();                                                                       // For the benefit of monitoring the device
   d5460:	f7ff fc7e 	bl	d4d60 <_Z16takeMeasurementsv>
  if(sysStatus.verboseMode) publishQueue.publish("Startup",StartupMessage,PRIVATE);                       // Let Particle know how the startup process went
   d5464:	7a63      	ldrb	r3, [r4, #9]
   d5466:	b14b      	cbz	r3, d547c <setup+0x2cc>
   d5468:	2300      	movs	r3, #0
   d546a:	f88d 3000 	strb.w	r3, [sp]
   d546e:	4b52      	ldr	r3, [pc, #328]	; (d55b8 <setup+0x408>)
   d5470:	4952      	ldr	r1, [pc, #328]	; (d55bc <setup+0x40c>)
   d5472:	781b      	ldrb	r3, [r3, #0]
   d5474:	4852      	ldr	r0, [pc, #328]	; (d55c0 <setup+0x410>)
   d5476:	463a      	mov	r2, r7
   d5478:	f7fe ffbe 	bl	d43f8 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d547c:	f001 fd7e 	bl	d6f7c <spark_cloud_flag_connected>
   d5480:	b910      	cbnz	r0, d5488 <setup+0x2d8>
            spark_process();
   d5482:	f001 fd6b 	bl	d6f5c <spark_process>
        while (_while() && !_condition()) {
   d5486:	e7f9      	b.n	d547c <setup+0x2cc>
   d5488:	f001 fd78 	bl	d6f7c <spark_cloud_flag_connected>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;                                    // We made it throughgo let's go to idle
   d548c:	782b      	ldrb	r3, [r5, #0]
   d548e:	b90b      	cbnz	r3, d5494 <setup+0x2e4>
   d5490:	2302      	movs	r3, #2
   d5492:	702b      	strb	r3, [r5, #0]
}
   d5494:	b01a      	add	sp, #104	; 0x68
   d5496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d549a:	bf00      	nop
   d549c:	000d40c9 	.word	0x000d40c9
   d54a0:	000dba6c 	.word	0x000dba6c
   d54a4:	2003e5a1 	.word	0x2003e5a1
   d54a8:	2003e5a4 	.word	0x2003e5a4
   d54ac:	000db8b0 	.word	0x000db8b0
   d54b0:	000d4415 	.word	0x000d4415
   d54b4:	000dbaac 	.word	0x000dbaac
   d54b8:	000db8d5 	.word	0x000db8d5
   d54bc:	2003df72 	.word	0x2003df72
   d54c0:	000db8dd 	.word	0x000db8dd
   d54c4:	2003df62 	.word	0x2003df62
   d54c8:	000db8e5 	.word	0x000db8e5
   d54cc:	000db8f4 	.word	0x000db8f4
   d54d0:	000db44c 	.word	0x000db44c
   d54d4:	2003db90 	.word	0x2003db90
   d54d8:	000db942 	.word	0x000db942
   d54dc:	2003db98 	.word	0x2003db98
   d54e0:	000db953 	.word	0x000db953
   d54e4:	2003dba0 	.word	0x2003dba0
   d54e8:	000db964 	.word	0x000db964
   d54ec:	2003dba8 	.word	0x2003dba8
   d54f0:	000db977 	.word	0x000db977
   d54f4:	2003dbb0 	.word	0x2003dbb0
   d54f8:	000db989 	.word	0x000db989
   d54fc:	2003dbb8 	.word	0x2003dbb8
   d5500:	000db99b 	.word	0x000db99b
   d5504:	000db903 	.word	0x000db903
   d5508:	000db916 	.word	0x000db916
   d550c:	000d40f1 	.word	0x000d40f1
   d5510:	000db925 	.word	0x000db925
   d5514:	000d4619 	.word	0x000d4619
   d5518:	000db931 	.word	0x000db931
   d551c:	000d4545 	.word	0x000d4545
   d5520:	000db489 	.word	0x000db489
   d5524:	000d44a9 	.word	0x000d44a9
   d5528:	000d4ad9 	.word	0x000d4ad9
   d552c:	000db93e 	.word	0x000db93e
   d5530:	000d4b2d 	.word	0x000d4b2d
   d5534:	000db94f 	.word	0x000db94f
   d5538:	000d4b81 	.word	0x000d4b81
   d553c:	000db960 	.word	0x000db960
   d5540:	000d4bd5 	.word	0x000d4bd5
   d5544:	000db973 	.word	0x000db973
   d5548:	000d4c29 	.word	0x000d4c29
   d554c:	000db985 	.word	0x000db985
   d5550:	000d4c7d 	.word	0x000d4c7d
   d5554:	000db997 	.word	0x000db997
   d5558:	000d410d 	.word	0x000d410d
   d555c:	000db9a8 	.word	0x000db9a8
   d5560:	000d41a1 	.word	0x000d41a1
   d5564:	000db9b6 	.word	0x000db9b6
   d5568:	000d4699 	.word	0x000d4699
   d556c:	000db9c5 	.word	0x000db9c5
   d5570:	000d45c1 	.word	0x000d45c1
   d5574:	000db9d4 	.word	0x000db9d4
   d5578:	2003e444 	.word	0x2003e444
   d557c:	2003e3d8 	.word	0x2003e3d8
   d5580:	000dbab4 	.word	0x000dbab4
   d5584:	2003db80 	.word	0x2003db80
   d5588:	2003df88 	.word	0x2003df88
   d558c:	2003db81 	.word	0x2003db81
   d5590:	2003e040 	.word	0x2003e040
   d5594:	2003db82 	.word	0x2003db82
   d5598:	2003e0f8 	.word	0x2003e0f8
   d559c:	2003db83 	.word	0x2003db83
   d55a0:	2003e1b0 	.word	0x2003e1b0
   d55a4:	2003db84 	.word	0x2003db84
   d55a8:	2003e268 	.word	0x2003e268
   d55ac:	2003db85 	.word	0x2003db85
   d55b0:	2003e320 	.word	0x2003e320
   d55b4:	2003e3e8 	.word	0x2003e3e8
   d55b8:	2003df61 	.word	0x2003df61
   d55bc:	000db9f0 	.word	0x000db9f0
   d55c0:	2003e408 	.word	0x2003e408

000d55c4 <_GLOBAL__sub_I_SystemMode>:

  void getBatteryCharge()
{
  // voltage = analogRead(BATT) * 0.0011224;
  // snprintf(batteryString, sizeof(batteryString), "%3.1f V", voltage);
}
   d55c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        val_(val) {
   d55c8:	4b7e      	ldr	r3, [pc, #504]	; (d57c4 <_GLOBAL__sub_I_SystemMode+0x200>)
              error_(SYSTEM_ERROR_NONE) {
   d55ca:	4c7f      	ldr	r4, [pc, #508]	; (d57c8 <_GLOBAL__sub_I_SystemMode+0x204>)
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d55cc:	4f7f      	ldr	r7, [pc, #508]	; (d57cc <_GLOBAL__sub_I_SystemMode+0x208>)
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d55ce:	f8df a274 	ldr.w	sl, [pc, #628]	; d5844 <_GLOBAL__sub_I_SystemMode+0x280>
   d55d2:	2601      	movs	r6, #1
   d55d4:	701e      	strb	r6, [r3, #0]
   d55d6:	4b7e      	ldr	r3, [pc, #504]	; (d57d0 <_GLOBAL__sub_I_SystemMode+0x20c>)
   d55d8:	2202      	movs	r2, #2
   d55da:	2500      	movs	r5, #0
   d55dc:	701a      	strb	r2, [r3, #0]
    SleepResult() {}
   d55de:	4b7d      	ldr	r3, [pc, #500]	; (d57d4 <_GLOBAL__sub_I_SystemMode+0x210>)
   d55e0:	60a3      	str	r3, [r4, #8]
}
   d55e2:	b089      	sub	sp, #36	; 0x24
              error_(SYSTEM_ERROR_NONE) {
   d55e4:	6025      	str	r5, [r4, #0]
   d55e6:	80a5      	strh	r5, [r4, #4]
    SleepResult() {}
   d55e8:	71a5      	strb	r5, [r4, #6]
        set_system_mode(mode);
   d55ea:	4630      	mov	r0, r6
   d55ec:	f001 fc50 	bl	d6e90 <set_system_mode>
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d55f0:	463a      	mov	r2, r7
   d55f2:	4979      	ldr	r1, [pc, #484]	; (d57d8 <_GLOBAL__sub_I_SystemMode+0x214>)
   d55f4:	4620      	mov	r0, r4
   d55f6:	f003 f893 	bl	d8720 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   d55fa:	4629      	mov	r1, r5
   d55fc:	4630      	mov	r0, r6
   d55fe:	f001 fc57 	bl	d6eb0 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d5602:	4631      	mov	r1, r6
   d5604:	2004      	movs	r0, #4
   d5606:	f001 faab 	bl	d6b60 <HAL_Feature_Set>
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   d560a:	f003 f861 	bl	d86d0 <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d560e:	4c73      	ldr	r4, [pc, #460]	; (d57dc <_GLOBAL__sub_I_SystemMode+0x218>)
   d5610:	4601      	mov	r1, r0
   d5612:	462b      	mov	r3, r5
   d5614:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5618:	4620      	mov	r0, r4
   d561a:	f000 fa27 	bl	d5a6c <_ZN6MB85RCC1ER7TwoWireji>
   d561e:	4b70      	ldr	r3, [pc, #448]	; (d57e0 <_GLOBAL__sub_I_SystemMode+0x21c>)
   d5620:	6023      	str	r3, [r4, #0]
   d5622:	463a      	mov	r2, r7
   d5624:	496f      	ldr	r1, [pc, #444]	; (d57e4 <_GLOBAL__sub_I_SystemMode+0x220>)
   d5626:	4620      	mov	r0, r4
   d5628:	f003 f87a 	bl	d8720 <__aeabi_atexit>
MCP79410 rtc;                                                                               // Rickkas MCP79410 libarary
   d562c:	f003 f850 	bl	d86d0 <_Z19__fetch_global_Wirev>
   d5630:	4c6d      	ldr	r4, [pc, #436]	; (d57e8 <_GLOBAL__sub_I_SystemMode+0x224>)
   d5632:	4601      	mov	r1, r0
   d5634:	4620      	mov	r0, r4
   d5636:	f000 fc8f 	bl	d5f58 <_ZN8MCP79410C1ER7TwoWire>
   d563a:	4620      	mov	r0, r4
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d563c:	4c6b      	ldr	r4, [pc, #428]	; (d57ec <_GLOBAL__sub_I_SystemMode+0x228>)
   d563e:	496c      	ldr	r1, [pc, #432]	; (d57f0 <_GLOBAL__sub_I_SystemMode+0x22c>)
   d5640:	463a      	mov	r2, r7
   d5642:	f003 f86d 	bl	d8720 <__aeabi_atexit>
   d5646:	496b      	ldr	r1, [pc, #428]	; (d57f4 <_GLOBAL__sub_I_SystemMode+0x230>)
   d5648:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d564c:	4620      	mov	r0, r4
   d564e:	f001 f8f9 	bl	d6844 <_ZN25PublishQueueAsyncRetainedC1EPht>
   d5652:	4b69      	ldr	r3, [pc, #420]	; (d57f8 <_GLOBAL__sub_I_SystemMode+0x234>)
   d5654:	6023      	str	r3, [r4, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d5656:	463a      	mov	r2, r7
   d5658:	4968      	ldr	r1, [pc, #416]	; (d57fc <_GLOBAL__sub_I_SystemMode+0x238>)
   d565a:	4620      	mov	r0, r4
   d565c:	f003 f860 	bl	d8720 <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d5660:	4b67      	ldr	r3, [pc, #412]	; (d5800 <_GLOBAL__sub_I_SystemMode+0x23c>)
   d5662:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5664:	f10d 0810 	add.w	r8, sp, #16
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d5668:	4c66      	ldr	r4, [pc, #408]	; (d5804 <_GLOBAL__sub_I_SystemMode+0x240>)
   d566a:	4b67      	ldr	r3, [pc, #412]	; (d5808 <_GLOBAL__sub_I_SystemMode+0x244>)
   d566c:	6023      	str	r3, [r4, #0]
   d566e:	e898 0003 	ldmia.w	r8, {r0, r1}
   d5672:	aa02      	add	r2, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d5674:	f104 030c 	add.w	r3, r4, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5678:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d567c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5680:	e888 0003 	stmia.w	r8, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5684:	e892 0003 	ldmia.w	r2, {r0, r1}
   d5688:	e883 0003 	stmia.w	r3, {r0, r1}
   d568c:	4b5f      	ldr	r3, [pc, #380]	; (d580c <_GLOBAL__sub_I_SystemMode+0x248>)
   d568e:	6163      	str	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5690:	69a3      	ldr	r3, [r4, #24]
   d5692:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d5694:	4b5e      	ldr	r3, [pc, #376]	; (d5810 <_GLOBAL__sub_I_SystemMode+0x24c>)
   d5696:	7125      	strb	r5, [r4, #4]
   d5698:	60a5      	str	r5, [r4, #8]
   d569a:	61a3      	str	r3, [r4, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d569c:	4a5d      	ldr	r2, [pc, #372]	; (d5814 <_GLOBAL__sub_I_SystemMode+0x250>)
      __a = _GLIBCXX_MOVE(__b);
   d569e:	9506      	str	r5, [sp, #24]
   d56a0:	4623      	mov	r3, r4
   d56a2:	e9cd 5500 	strd	r5, r5, [sp]
   d56a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d56aa:	f104 0008 	add.w	r0, r4, #8
   d56ae:	f001 f9ff 	bl	d6ab0 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d56b2:	4640      	mov	r0, r8
   d56b4:	f7fe fe38 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
Timer keepAliveTimer(1000, keepAliveMessage);
   d56b8:	463a      	mov	r2, r7
   d56ba:	4957      	ldr	r1, [pc, #348]	; (d5818 <_GLOBAL__sub_I_SystemMode+0x254>)
   d56bc:	4620      	mov	r0, r4
   d56be:	f003 f82f 	bl	d8720 <__aeabi_atexit>
struct systemStatus_structure {                     
   d56c2:	4b56      	ldr	r3, [pc, #344]	; (d581c <_GLOBAL__sub_I_SystemMode+0x258>)
struct sensor_data_struct {                                                               // Here we define the structure for collecting and storing data from the sensors
   d56c4:	4c56      	ldr	r4, [pc, #344]	; (d5820 <_GLOBAL__sub_I_SystemMode+0x25c>)
struct systemStatus_structure {                     
   d56c6:	61de      	str	r6, [r3, #28]
   d56c8:	f44f 7216 	mov.w	r2, #600	; 0x258
   d56cc:	841d      	strh	r5, [r3, #32]
   d56ce:	625a      	str	r2, [r3, #36]	; 0x24
   d56d0:	f883 6028 	strb.w	r6, [r3, #40]	; 0x28
struct sensor_data_struct {                                                               // Here we define the structure for collecting and storing data from the sensors
   d56d4:	2300      	movs	r3, #0
   d56d6:	6023      	str	r3, [r4, #0]
   d56d8:	6063      	str	r3, [r4, #4]
   d56da:	60a3      	str	r3, [r4, #8]
   d56dc:	60e3      	str	r3, [r4, #12]
   d56de:	6123      	str	r3, [r4, #16]
   d56e0:	6163      	str	r3, [r4, #20]
   d56e2:	61a3      	str	r3, [r4, #24]
   d56e4:	61e3      	str	r3, [r4, #28]
   d56e6:	6223      	str	r3, [r4, #32]
   d56e8:	6263      	str	r3, [r4, #36]	; 0x24
   d56ea:	62a3      	str	r3, [r4, #40]	; 0x28
   d56ec:	62e3      	str	r3, [r4, #44]	; 0x2c
   d56ee:	4629      	mov	r1, r5
   d56f0:	2218      	movs	r2, #24
   d56f2:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d56f6:	f003 feb5 	bl	d9464 <memset>
   d56fa:	4629      	mov	r1, r5
   d56fc:	2218      	movs	r2, #24
   d56fe:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d5702:	f003 feaf 	bl	d9464 <memset>
   d5706:	4629      	mov	r1, r5
   d5708:	2218      	movs	r2, #24
   d570a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d570e:	f003 fea9 	bl	d9464 <memset>
   d5712:	4629      	mov	r1, r5
   d5714:	2218      	movs	r2, #24
   d5716:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d571a:	f003 fea3 	bl	d9464 <memset>
   d571e:	4629      	mov	r1, r5
   d5720:	2220      	movs	r2, #32
   d5722:	f104 0090 	add.w	r0, r4, #144	; 0x90
   d5726:	f003 fe9d 	bl	d9464 <memset>
   d572a:	4629      	mov	r1, r5
   d572c:	2220      	movs	r2, #32
   d572e:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
   d5732:	f003 fe97 	bl	d9464 <memset>
        {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d5736:	4a3b      	ldr	r2, [pc, #236]	; (d5824 <_GLOBAL__sub_I_SystemMode+0x260>)
        {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d5738:	493b      	ldr	r1, [pc, #236]	; (d5828 <_GLOBAL__sub_I_SystemMode+0x264>)
        {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d573a:	4b3c      	ldr	r3, [pc, #240]	; (d582c <_GLOBAL__sub_I_SystemMode+0x268>)
        {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d573c:	f891 c000 	ldrb.w	ip, [r1]
        {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d5740:	493b      	ldr	r1, [pc, #236]	; (d5830 <_GLOBAL__sub_I_SystemMode+0x26c>)
        {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d5742:	f893 e000 	ldrb.w	lr, [r3]
  };
   d5746:	4b3b      	ldr	r3, [pc, #236]	; (d5834 <_GLOBAL__sub_I_SystemMode+0x270>)
        {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d5748:	780d      	ldrb	r5, [r1, #0]
  };
   d574a:	f8c3 e000 	str.w	lr, [r3]
        {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d574e:	ed92 7b00 	vldr	d7, [r2]
        {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d5752:	e9d2 8902 	ldrd	r8, r9, [r2, #8]
        {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d5756:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
  };
   d575a:	ed83 7b02 	vstr	d7, [r3, #8]
   d575e:	e9c3 8906 	strd	r8, r9, [r3, #24]
   d5762:	e9c3 670a 	strd	r6, r7, [r3, #40]	; 0x28
   d5766:	f8c3 c010 	str.w	ip, [r3, #16]
   d576a:	621d      	str	r5, [r3, #32]
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d576c:	4b32      	ldr	r3, [pc, #200]	; (d5838 <_GLOBAL__sub_I_SystemMode+0x274>)
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d576e:	f89a a000 	ldrb.w	sl, [sl]
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d5772:	781c      	ldrb	r4, [r3, #0]
  };
   d5774:	4b31      	ldr	r3, [pc, #196]	; (d583c <_GLOBAL__sub_I_SystemMode+0x278>)
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d5776:	f8c3 a010 	str.w	sl, [r3, #16]
  };
   d577a:	e9d2 ab08 	ldrd	sl, fp, [r2, #32]
   d577e:	e9c3 ab06 	strd	sl, fp, [r3, #24]
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d5782:	f8df a0c4 	ldr.w	sl, [pc, #196]	; d5848 <_GLOBAL__sub_I_SystemMode+0x284>
  };
   d5786:	601c      	str	r4, [r3, #0]
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d5788:	f89a a000 	ldrb.w	sl, [sl]
   d578c:	f8c3 a020 	str.w	sl, [r3, #32]
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d5790:	e9d2 0106 	ldrd	r0, r1, [r2, #24]
  };
   d5794:	e9d2 ab0a 	ldrd	sl, fp, [r2, #40]	; 0x28
   d5798:	e9c3 0102 	strd	r0, r1, [r3, #8]
   d579c:	e9c3 ab0a 	strd	sl, fp, [r3, #40]	; 0x28
   };
   d57a0:	4b27      	ldr	r3, [pc, #156]	; (d5840 <_GLOBAL__sub_I_SystemMode+0x27c>)
   d57a2:	ed83 7b02 	vstr	d7, [r3, #8]
   d57a6:	e9c3 8906 	strd	r8, r9, [r3, #24]
   d57aa:	e9c3 670a 	strd	r6, r7, [r3, #40]	; 0x28
   d57ae:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
   d57b2:	f8c3 e000 	str.w	lr, [r3]
   d57b6:	f8c3 c010 	str.w	ip, [r3, #16]
   d57ba:	621d      	str	r5, [r3, #32]
   d57bc:	631c      	str	r4, [r3, #48]	; 0x30
}
   d57be:	b009      	add	sp, #36	; 0x24
   d57c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d57c4:	2003df61 	.word	0x2003df61
   d57c8:	2003deb0 	.word	0x2003deb0
   d57cc:	2003de70 	.word	0x2003de70
   d57d0:	2003df60 	.word	0x2003df60
   d57d4:	ffff0000 	.word	0xffff0000
   d57d8:	000d42c7 	.word	0x000d42c7
   d57dc:	2003e3d8 	.word	0x2003e3d8
   d57e0:	000dba3c 	.word	0x000dba3c
   d57e4:	000d4265 	.word	0x000d4265
   d57e8:	2003e444 	.word	0x2003e444
   d57ec:	2003e408 	.word	0x2003e408
   d57f0:	000d5ce3 	.word	0x000d5ce3
   d57f4:	2003f400 	.word	0x2003f400
   d57f8:	000dba14 	.word	0x000dba14
   d57fc:	000d423d 	.word	0x000d423d
   d5800:	000d42d9 	.word	0x000d42d9
   d5804:	2003e3e8 	.word	0x2003e3e8
   d5808:	000dba00 	.word	0x000dba00
   d580c:	000d40d9 	.word	0x000d40d9
   d5810:	000d40d5 	.word	0x000d40d5
   d5814:	000d428d 	.word	0x000d428d
   d5818:	000d433d 	.word	0x000d433d
   d581c:	2003e5a4 	.word	0x2003e5a4
   d5820:	2003e460 	.word	0x2003e460
   d5824:	2003db90 	.word	0x2003db90
   d5828:	2003db81 	.word	0x2003db81
   d582c:	2003db80 	.word	0x2003db80
   d5830:	2003db82 	.word	0x2003db82
   d5834:	2003df00 	.word	0x2003df00
   d5838:	2003db83 	.word	0x2003db83
   d583c:	2003df30 	.word	0x2003df30
   d5840:	2003dec0 	.word	0x2003dec0
   d5844:	2003db84 	.word	0x2003db84
   d5848:	2003db85 	.word	0x2003db85
   d584c:	00000000 	.word	0x00000000

000d5850 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE>:
#include "WProgram.h"
#endif


//--------------------------------------------------------------------------------------
double Load_Monitor::calcIrms(CT_Property_Struct data){
   d5850:	b082      	sub	sp, #8
   d5852:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5856:	a90a      	add	r1, sp, #40	; 0x28
   d5858:	e881 000c 	stmia.w	r1, {r2, r3}
    
    double Irms=0;
    
    offsetI = ADC_COUNTS>>1;
   d585c:	4b34      	ldr	r3, [pc, #208]	; (d5930 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xe0>)
  {
    sampleI = analogRead(data.CT_PIN);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset,
    //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d585e:	f8df b0d4 	ldr.w	fp, [pc, #212]	; d5934 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xe4>
    offsetI = ADC_COUNTS>>1;
   d5862:	2200      	movs	r2, #0
   d5864:	e9c0 2304 	strd	r2, r3, [r0, #16]
double Load_Monitor::calcIrms(CT_Property_Struct data){
   d5868:	4604      	mov	r4, r0
    offsetI = ADC_COUNTS>>1;
   d586a:	f240 657e 	movw	r5, #1662	; 0x67e
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d586e:	f04f 0a00 	mov.w	sl, #0
    sampleI = analogRead(data.CT_PIN);
   d5872:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
   d5876:	f002 fefb 	bl	d8670 <analogRead>
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d587a:	e9d4 8904 	ldrd	r8, r9, [r4, #16]
    sampleI = analogRead(data.CT_PIN);
   d587e:	6020      	str	r0, [r4, #0]
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d5880:	f003 f9d2 	bl	d8c28 <__aeabi_i2d>
   d5884:	4642      	mov	r2, r8
   d5886:	464b      	mov	r3, r9
   d5888:	4606      	mov	r6, r0
   d588a:	460f      	mov	r7, r1
   d588c:	f003 f87e 	bl	d898c <__aeabi_dsub>
   d5890:	4652      	mov	r2, sl
   d5892:	465b      	mov	r3, fp
   d5894:	f003 fa32 	bl	d8cfc <__aeabi_dmul>
   d5898:	4642      	mov	r2, r8
   d589a:	464b      	mov	r3, r9
   d589c:	f003 f878 	bl	d8990 <__adddf3>
   d58a0:	4602      	mov	r2, r0
   d58a2:	460b      	mov	r3, r1
   d58a4:	e9c4 2304 	strd	r2, r3, [r4, #16]
    filteredI = sampleI - offsetI;
   d58a8:	4630      	mov	r0, r6
   d58aa:	4639      	mov	r1, r7
   d58ac:	f003 f86e 	bl	d898c <__aeabi_dsub>
   d58b0:	4602      	mov	r2, r0
   d58b2:	460b      	mov	r3, r1
   d58b4:	e9c4 2302 	strd	r2, r3, [r4, #8]

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d58b8:	f003 fa20 	bl	d8cfc <__aeabi_dmul>
   d58bc:	4602      	mov	r2, r0
   d58be:	460b      	mov	r3, r1
   d58c0:	e9c4 2306 	strd	r2, r3, [r4, #24]
    // 2) sum
    sumI += sqI;
   d58c4:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   d58c8:	f003 f862 	bl	d8990 <__adddf3>
  for (unsigned int n = 0; n < 1662 /*Number_of_Samples*/; n++)
   d58cc:	3d01      	subs	r5, #1
    sumI += sqI;
   d58ce:	4606      	mov	r6, r0
   d58d0:	460f      	mov	r7, r1
   d58d2:	e9c4 6708 	strd	r6, r7, [r4, #32]
  for (unsigned int n = 0; n < 1662 /*Number_of_Samples*/; n++)
   d58d6:	d1cc      	bne.n	d5872 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0x22>
  }

  double I_RATIO = data.ICAL*((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d58d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d58dc:	a310      	add	r3, pc, #64	; (adr r3, d5920 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xd0>)
   d58de:	e9d3 2300 	ldrd	r2, r3, [r3]
   d58e2:	f003 fa0b 	bl	d8cfc <__aeabi_dmul>
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d58e6:	a310      	add	r3, pc, #64	; (adr r3, d5928 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xd8>)
   d58e8:	e9d3 2300 	ldrd	r2, r3, [r3]
  double I_RATIO = data.ICAL*((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d58ec:	4680      	mov	r8, r0
   d58ee:	4689      	mov	r9, r1
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d58f0:	4630      	mov	r0, r6
   d58f2:	4639      	mov	r1, r7
   d58f4:	f003 fb2c 	bl	d8f50 <__aeabi_ddiv>
   d58f8:	ec41 0b10 	vmov	d0, r0, r1
   d58fc:	f002 ff1e 	bl	d873c <sqrt>

  //Reset accumulators
  sumI = 0;
   d5900:	2200      	movs	r2, #0
   d5902:	2300      	movs	r3, #0
   d5904:	e9c4 2308 	strd	r2, r3, [r4, #32]
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d5908:	ec51 0b10 	vmov	r0, r1, d0
   d590c:	4642      	mov	r2, r8
   d590e:	464b      	mov	r3, r9
   d5910:	f003 f9f4 	bl	d8cfc <__aeabi_dmul>
  //--------------------------------------------------------------------------------------

  return Irms;
}
   d5914:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5918:	ec41 0b10 	vmov	d0, r0, r1
   d591c:	b002      	add	sp, #8
   d591e:	4770      	bx	lr
   d5920:	66666666 	.word	0x66666666
   d5924:	3f4a6666 	.word	0x3f4a6666
   d5928:	00000000 	.word	0x00000000
   d592c:	4099f800 	.word	0x4099f800
   d5930:	40a00000 	.word	0x40a00000
   d5934:	3f500000 	.word	0x3f500000

000d5938 <_ZN13EnergyMonitor7currentEjd>:

void EnergyMonitor::current(unsigned int _inPinI, double _ICAL)
{
   inPinI = _inPinI;
   ICAL = _ICAL;
   offsetI = ADC_COUNTS>>1;
   d5938:	4b03      	ldr	r3, [pc, #12]	; (d5948 <_ZN13EnergyMonitor7currentEjd+0x10>)
   inPinI = _inPinI;
   d593a:	62c1      	str	r1, [r0, #44]	; 0x2c
   offsetI = ADC_COUNTS>>1;
   d593c:	2200      	movs	r2, #0
   ICAL = _ICAL;
   d593e:	ed80 0b0e 	vstr	d0, [r0, #56]	; 0x38
   offsetI = ADC_COUNTS>>1;
   d5942:	e9c0 231c 	strd	r2, r3, [r0, #112]	; 0x70
}
   d5946:	4770      	bx	lr
   d5948:	40a00000 	.word	0x40a00000
   d594c:	00000000 	.word	0x00000000

000d5950 <_ZN13EnergyMonitor8calcIrmsEj>:
//--------------------------------------------------------------------------------------       
}

//--------------------------------------------------------------------------------------
double EnergyMonitor::calcIrms(unsigned int Number_of_Samples)
{
   d5950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    sampleI = analogRead(inPinI);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset, 
  //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d5954:	f8df b0c8 	ldr.w	fp, [pc, #200]	; d5a20 <_ZN13EnergyMonitor8calcIrmsEj+0xd0>
{
   d5958:	9101      	str	r1, [sp, #4]
   d595a:	4604      	mov	r4, r0
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d595c:	2500      	movs	r5, #0
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d595e:	f04f 0a00 	mov.w	sl, #0
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d5962:	9b01      	ldr	r3, [sp, #4]
   d5964:	429d      	cmp	r5, r3
   d5966:	d02f      	beq.n	d59c8 <_ZN13EnergyMonitor8calcIrmsEj+0x78>
    sampleI = analogRead(inPinI);
   d5968:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
   d596a:	f002 fe81 	bl	d8670 <analogRead>
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d596e:	e9d4 891c 	ldrd	r8, r9, [r4, #112]	; 0x70
    sampleI = analogRead(inPinI);
   d5972:	64e0      	str	r0, [r4, #76]	; 0x4c
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d5974:	f003 f958 	bl	d8c28 <__aeabi_i2d>
   d5978:	4642      	mov	r2, r8
   d597a:	464b      	mov	r3, r9
   d597c:	4606      	mov	r6, r0
   d597e:	460f      	mov	r7, r1
   d5980:	f003 f804 	bl	d898c <__aeabi_dsub>
   d5984:	4652      	mov	r2, sl
   d5986:	465b      	mov	r3, fp
   d5988:	f003 f9b8 	bl	d8cfc <__aeabi_dmul>
   d598c:	4642      	mov	r2, r8
   d598e:	464b      	mov	r3, r9
   d5990:	f002 fffe 	bl	d8990 <__adddf3>
   d5994:	4602      	mov	r2, r0
   d5996:	460b      	mov	r3, r1
   d5998:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
  filteredI = sampleI - offsetI;
   d599c:	4630      	mov	r0, r6
   d599e:	4639      	mov	r1, r7
   d59a0:	f002 fff4 	bl	d898c <__aeabi_dsub>
   d59a4:	4602      	mov	r2, r0
   d59a6:	460b      	mov	r3, r1
   d59a8:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d59ac:	f003 f9a6 	bl	d8cfc <__aeabi_dmul>
   d59b0:	4602      	mov	r2, r0
   d59b2:	460b      	mov	r3, r1
   d59b4:	e9c4 2324 	strd	r2, r3, [r4, #144]	; 0x90
    // 2) sum 
    sumI += sqI;
   d59b8:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
   d59bc:	f002 ffe8 	bl	d8990 <__adddf3>
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d59c0:	3501      	adds	r5, #1
    sumI += sqI;
   d59c2:	e9c4 0126 	strd	r0, r1, [r4, #152]	; 0x98
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d59c6:	e7cc      	b.n	d5962 <_ZN13EnergyMonitor8calcIrmsEj+0x12>
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d59c8:	a313      	add	r3, pc, #76	; (adr r3, d5a18 <_ZN13EnergyMonitor8calcIrmsEj+0xc8>)
   d59ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d59ce:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
   d59d2:	f003 f993 	bl	d8cfc <__aeabi_dmul>
   d59d6:	4606      	mov	r6, r0
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d59d8:	4628      	mov	r0, r5
  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d59da:	460f      	mov	r7, r1
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d59dc:	f003 f914 	bl	d8c08 <__aeabi_ui2d>
   d59e0:	4602      	mov	r2, r0
   d59e2:	460b      	mov	r3, r1
   d59e4:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
   d59e8:	f003 fab2 	bl	d8f50 <__aeabi_ddiv>
   d59ec:	ec41 0b10 	vmov	d0, r0, r1
   d59f0:	f002 fea4 	bl	d873c <sqrt>
   d59f4:	4632      	mov	r2, r6
   d59f6:	463b      	mov	r3, r7
   d59f8:	ec51 0b10 	vmov	r0, r1, d0
   d59fc:	f003 f97e 	bl	d8cfc <__aeabi_dmul>
   d5a00:	ec41 0b10 	vmov	d0, r0, r1

  //Reset accumulators
  sumI = 0;
   d5a04:	2200      	movs	r2, #0
   d5a06:	2300      	movs	r3, #0
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d5a08:	e9c4 0108 	strd	r0, r1, [r4, #32]
  sumI = 0;
   d5a0c:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
//--------------------------------------------------------------------------------------             
 
  return Irms;
}
   d5a10:	b003      	add	sp, #12
   d5a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5a16:	bf00      	nop
   d5a18:	66666666 	.word	0x66666666
   d5a1c:	3f4a6666 	.word	0x3f4a6666
   d5a20:	3f500000 	.word	0x3f500000

000d5a24 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d5a24:	4770      	bx	lr

000d5a26 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d5a26:	b510      	push	{r4, lr}
}
   d5a28:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d5a2a:	4604      	mov	r4, r0
}
   d5a2c:	f002 fe7d 	bl	d872a <_ZdlPvj>
   d5a30:	4620      	mov	r0, r4
   d5a32:	bd10      	pop	{r4, pc}

000d5a34 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d5a34:	6803      	ldr	r3, [r0, #0]
   d5a36:	b2c9      	uxtb	r1, r1
   d5a38:	689b      	ldr	r3, [r3, #8]
   d5a3a:	4718      	bx	r3

000d5a3c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5a3c:	b40e      	push	{r1, r2, r3}
   d5a3e:	b510      	push	{r4, lr}
   d5a40:	b08d      	sub	sp, #52	; 0x34
   d5a42:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d5a44:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d5a46:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d5a4a:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d5a4c:	2300      	movs	r3, #0
   d5a4e:	2020      	movs	r0, #32
   d5a50:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5a54:	e9cd 4200 	strd	r4, r2, [sp]
   d5a58:	201e      	movs	r0, #30
   d5a5a:	aa04      	add	r2, sp, #16
   d5a5c:	f001 fa08 	bl	d6e70 <log_message_v>
}
   d5a60:	b00d      	add	sp, #52	; 0x34
   d5a62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5a66:	b003      	add	sp, #12
   d5a68:	4770      	bx	lr
	...

000d5a6c <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d5a6c:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d5a6e:	4d03      	ldr	r5, [pc, #12]	; (d5a7c <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d5a70:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d5a74:	e9c0 5100 	strd	r5, r1, [r0]
}
   d5a78:	bd30      	pop	{r4, r5, pc}
   d5a7a:	bf00      	nop
   d5a7c:	000dbaec 	.word	0x000dbaec

000d5a80 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d5a80:	6840      	ldr	r0, [r0, #4]
   d5a82:	f001 bf6f 	b.w	d7964 <_ZN7TwoWire5beginEv>

000d5a86 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5a86:	b510      	push	{r4, lr}
   d5a88:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d5a8a:	6800      	ldr	r0, [r0, #0]
   d5a8c:	f001 ffad 	bl	d79ea <_ZN7TwoWire6unlockEv>
   d5a90:	4620      	mov	r0, r4
   d5a92:	bd10      	pop	{r4, pc}

000d5a94 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d5a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5a98:	b08a      	sub	sp, #40	; 0x28
   d5a9a:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d5a9c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5a9e:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5aa0:	f001 ff9a 	bl	d79d8 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5aa4:	221e      	movs	r2, #30
   d5aa6:	2100      	movs	r1, #0
   d5aa8:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d5aaa:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d5aac:	f003 fcda 	bl	d9464 <memset>
		size_t framAddr = 0;
   d5ab0:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d5ab2:	b1ef      	cbz	r7, d5af0 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d5ab4:	6823      	ldr	r3, [r4, #0]
   d5ab6:	2f1e      	cmp	r7, #30
   d5ab8:	46b8      	mov	r8, r7
   d5aba:	bf28      	it	cs
   d5abc:	f04f 081e 	movcs.w	r8, #30
   d5ac0:	68dd      	ldr	r5, [r3, #12]
   d5ac2:	aa02      	add	r2, sp, #8
   d5ac4:	4643      	mov	r3, r8
   d5ac6:	4631      	mov	r1, r6
   d5ac8:	4620      	mov	r0, r4
   d5aca:	47a8      	blx	r5
			if (!result) {
   d5acc:	4605      	mov	r5, r0
   d5ace:	b958      	cbnz	r0, d5ae8 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d5ad0:	480a      	ldr	r0, [pc, #40]	; (d5afc <_ZN6MB85RC5eraseEv+0x68>)
   d5ad2:	490b      	ldr	r1, [pc, #44]	; (d5b00 <_ZN6MB85RC5eraseEv+0x6c>)
   d5ad4:	4632      	mov	r2, r6
   d5ad6:	f7ff ffb1 	bl	d5a3c <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d5ada:	a801      	add	r0, sp, #4
   d5adc:	f7ff ffd3 	bl	d5a86 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d5ae0:	4628      	mov	r0, r5
   d5ae2:	b00a      	add	sp, #40	; 0x28
   d5ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d5ae8:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d5aec:	4446      	add	r6, r8
		while(totalLen > 0) {
   d5aee:	e7e0      	b.n	d5ab2 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d5af0:	a801      	add	r0, sp, #4
   d5af2:	f7ff ffc8 	bl	d5a86 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d5af6:	2501      	movs	r5, #1
   d5af8:	e7f2      	b.n	d5ae0 <_ZN6MB85RC5eraseEv+0x4c>
   d5afa:	bf00      	nop
   d5afc:	2003e620 	.word	0x2003e620
   d5b00:	000dbab8 	.word	0x000dbab8

000d5b04 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5b04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5b08:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5b0a:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5b0c:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5b0e:	460d      	mov	r5, r1
   d5b10:	4616      	mov	r6, r2
   d5b12:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d5b14:	f001 ff60 	bl	d79d8 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d5b18:	b1a7      	cbz	r7, d5b44 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5b1a:	68e1      	ldr	r1, [r4, #12]
   d5b1c:	6860      	ldr	r0, [r4, #4]
   d5b1e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5b22:	f001 ff52 	bl	d79ca <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5b26:	0a29      	lsrs	r1, r5, #8
   d5b28:	6860      	ldr	r0, [r4, #4]
   d5b2a:	f7ff ff83 	bl	d5a34 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5b2e:	4629      	mov	r1, r5
   d5b30:	6860      	ldr	r0, [r4, #4]
   d5b32:	f7ff ff7f 	bl	d5a34 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d5b36:	6860      	ldr	r0, [r4, #4]
   d5b38:	2100      	movs	r1, #0
   d5b3a:	f001 ff49 	bl	d79d0 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5b3e:	b148      	cbz	r0, d5b54 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d5b40:	2400      	movs	r4, #0
   d5b42:	e000      	b.n	d5b46 <_ZN6MB85RC8readDataEjPhj+0x42>
   d5b44:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5b46:	a801      	add	r0, sp, #4
   d5b48:	f7ff ff9d 	bl	d5a86 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d5b4c:	4620      	mov	r0, r4
   d5b4e:	b003      	add	sp, #12
   d5b50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d5b54:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d5b56:	7b21      	ldrb	r1, [r4, #12]
   d5b58:	6860      	ldr	r0, [r4, #4]
   d5b5a:	46b8      	mov	r8, r7
   d5b5c:	bf28      	it	cs
   d5b5e:	f04f 0820 	movcs.w	r8, #32
   d5b62:	2301      	movs	r3, #1
   d5b64:	4642      	mov	r2, r8
   d5b66:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5b6a:	f001 ff18 	bl	d799e <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d5b6e:	f002 fdaf 	bl	d86d0 <_Z19__fetch_global_Wirev>
   d5b72:	6803      	ldr	r3, [r0, #0]
   d5b74:	691b      	ldr	r3, [r3, #16]
   d5b76:	4798      	blx	r3
   d5b78:	4540      	cmp	r0, r8
   d5b7a:	dbe1      	blt.n	d5b40 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d5b7c:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d5b80:	f002 fda6 	bl	d86d0 <_Z19__fetch_global_Wirev>
   d5b84:	6803      	ldr	r3, [r0, #0]
   d5b86:	695b      	ldr	r3, [r3, #20]
   d5b88:	4798      	blx	r3
   d5b8a:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d5b8e:	454e      	cmp	r6, r9
   d5b90:	d1f6      	bne.n	d5b80 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d5b92:	4445      	add	r5, r8
   d5b94:	eba7 0708 	sub.w	r7, r7, r8
   d5b98:	e7be      	b.n	d5b18 <_ZN6MB85RC8readDataEjPhj+0x14>

000d5b9a <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5b9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5b9e:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5ba0:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5ba2:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5ba4:	460e      	mov	r6, r1
   d5ba6:	4690      	mov	r8, r2
   d5ba8:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d5baa:	f001 ff15 	bl	d79d8 <_ZN7TwoWire4lockEv>
   d5bae:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d5bb2:	f1b9 0f00 	cmp.w	r9, #0
   d5bb6:	d02a      	beq.n	d5c0e <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d5bb8:	b34d      	cbz	r5, d5c0e <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5bba:	68e1      	ldr	r1, [r4, #12]
   d5bbc:	6860      	ldr	r0, [r4, #4]
   d5bbe:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5bc2:	f001 ff02 	bl	d79ca <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5bc6:	0a31      	lsrs	r1, r6, #8
   d5bc8:	6860      	ldr	r0, [r4, #4]
   d5bca:	f7ff ff33 	bl	d5a34 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5bce:	6860      	ldr	r0, [r4, #4]
   d5bd0:	4631      	mov	r1, r6
   d5bd2:	f7ff ff2f 	bl	d5a34 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5bd6:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d5bda:	4647      	mov	r7, r8
   d5bdc:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d5be0:	6860      	ldr	r0, [r4, #4]
   d5be2:	f817 1b01 	ldrb.w	r1, [r7], #1
   d5be6:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d5be8:	3d01      	subs	r5, #1
				wire.write(*data);
   d5bea:	689b      	ldr	r3, [r3, #8]
   d5bec:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5bee:	4555      	cmp	r5, sl
   d5bf0:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d5bf4:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5bf6:	d001      	beq.n	d5bfc <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d5bf8:	2d00      	cmp	r5, #0
   d5bfa:	d1f1      	bne.n	d5be0 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d5bfc:	6860      	ldr	r0, [r4, #4]
   d5bfe:	2101      	movs	r1, #1
   d5c00:	f001 fee6 	bl	d79d0 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5c04:	2800      	cmp	r0, #0
   d5c06:	d0d7      	beq.n	d5bb8 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d5c08:	f04f 0900 	mov.w	r9, #0
   d5c0c:	e7d1      	b.n	d5bb2 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d5c0e:	a801      	add	r0, sp, #4
   d5c10:	f7ff ff39 	bl	d5a86 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d5c14:	4648      	mov	r0, r9
   d5c16:	b003      	add	sp, #12
   d5c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5c1c <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5c1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5c20:	b08b      	sub	sp, #44	; 0x2c
   d5c22:	460e      	mov	r6, r1
   d5c24:	4615      	mov	r5, r2
   d5c26:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5c28:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5c2a:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5c2c:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d5c2e:	f001 fed3 	bl	d79d8 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d5c32:	42ae      	cmp	r6, r5
   d5c34:	d229      	bcs.n	d5c8a <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d5c36:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d5c38:	4425      	add	r5, r4
			while(numBytes > 0) {
   d5c3a:	b18c      	cbz	r4, d5c60 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d5c3c:	2c1e      	cmp	r4, #30
   d5c3e:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5c40:	f8d8 3000 	ldr.w	r3, [r8]
   d5c44:	bf28      	it	cs
   d5c46:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d5c48:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d5c4a:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5c4e:	aa02      	add	r2, sp, #8
   d5c50:	463b      	mov	r3, r7
   d5c52:	4631      	mov	r1, r6
   d5c54:	4640      	mov	r0, r8
				framAddrTo -= count;
   d5c56:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d5c58:	47c8      	blx	r9
				if (!result) {
   d5c5a:	b948      	cbnz	r0, d5c70 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5c5c:	2400      	movs	r4, #0
   d5c5e:	e000      	b.n	d5c62 <_ZN6MB85RC8moveDataEjjj+0x46>
   d5c60:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5c62:	a801      	add	r0, sp, #4
   d5c64:	f7ff ff0f 	bl	d5a86 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d5c68:	4620      	mov	r0, r4
   d5c6a:	b00b      	add	sp, #44	; 0x2c
   d5c6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d5c70:	f8d8 3000 	ldr.w	r3, [r8]
   d5c74:	aa02      	add	r2, sp, #8
   d5c76:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5c7a:	4629      	mov	r1, r5
   d5c7c:	463b      	mov	r3, r7
   d5c7e:	4640      	mov	r0, r8
   d5c80:	47c8      	blx	r9
				if (!result) {
   d5c82:	2800      	cmp	r0, #0
   d5c84:	d0ea      	beq.n	d5c5c <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d5c86:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d5c88:	e7d7      	b.n	d5c3a <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d5c8a:	d9e9      	bls.n	d5c60 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d5c8c:	2c00      	cmp	r4, #0
   d5c8e:	d0e7      	beq.n	d5c60 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d5c90:	f8d8 3000 	ldr.w	r3, [r8]
   d5c94:	2c1e      	cmp	r4, #30
   d5c96:	4627      	mov	r7, r4
   d5c98:	bf28      	it	cs
   d5c9a:	271e      	movcs	r7, #30
   d5c9c:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5ca0:	aa02      	add	r2, sp, #8
   d5ca2:	463b      	mov	r3, r7
   d5ca4:	4631      	mov	r1, r6
   d5ca6:	4640      	mov	r0, r8
   d5ca8:	47c8      	blx	r9
				if (!result) {
   d5caa:	2800      	cmp	r0, #0
   d5cac:	d0d6      	beq.n	d5c5c <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d5cae:	f8d8 3000 	ldr.w	r3, [r8]
   d5cb2:	aa02      	add	r2, sp, #8
   d5cb4:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5cb8:	4629      	mov	r1, r5
   d5cba:	463b      	mov	r3, r7
   d5cbc:	4640      	mov	r0, r8
   d5cbe:	47c8      	blx	r9
				if (!result) {
   d5cc0:	2800      	cmp	r0, #0
   d5cc2:	d0cb      	beq.n	d5c5c <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d5cc4:	443e      	add	r6, r7
				framAddrTo += count;
   d5cc6:	443d      	add	r5, r7
				numBytes -= count;
   d5cc8:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d5cca:	e7df      	b.n	d5c8c <_ZN6MB85RC8moveDataEjjj+0x70>

000d5ccc <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d5ccc:	2040      	movs	r0, #64	; 0x40
   d5cce:	4770      	bx	lr

000d5cd0 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d5cd0:	2000      	movs	r0, #0
   d5cd2:	4770      	bx	lr

000d5cd4 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d5cd4:	2080      	movs	r0, #128	; 0x80
   d5cd6:	4770      	bx	lr

000d5cd8 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d5cd8:	20ff      	movs	r0, #255	; 0xff
   d5cda:	4770      	bx	lr

000d5cdc <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d5cdc:	4770      	bx	lr

000d5cde <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d5cde:	4770      	bx	lr

000d5ce0 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d5ce0:	4770      	bx	lr

000d5ce2 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d5ce2:	4770      	bx	lr

000d5ce4 <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d5ce4:	b510      	push	{r4, lr}
}
   d5ce6:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d5ce8:	4604      	mov	r4, r0
}
   d5cea:	f002 fd1e 	bl	d872a <_ZdlPvj>
   d5cee:	4620      	mov	r0, r4
   d5cf0:	bd10      	pop	{r4, pc}

000d5cf2 <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d5cf2:	b510      	push	{r4, lr}
}
   d5cf4:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d5cf6:	4604      	mov	r4, r0
}
   d5cf8:	f002 fd17 	bl	d872a <_ZdlPvj>
   d5cfc:	4620      	mov	r0, r4
   d5cfe:	bd10      	pop	{r4, pc}

000d5d00 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d5d00:	b510      	push	{r4, lr}
}
   d5d02:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d5d04:	4604      	mov	r4, r0
}
   d5d06:	f002 fd10 	bl	d872a <_ZdlPvj>
   d5d0a:	4620      	mov	r0, r4
   d5d0c:	bd10      	pop	{r4, pc}

000d5d0e <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d5d0e:	b510      	push	{r4, lr}
}
   d5d10:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d5d12:	4604      	mov	r4, r0
}
   d5d14:	f002 fd09 	bl	d872a <_ZdlPvj>
   d5d18:	4620      	mov	r0, r4
   d5d1a:	bd10      	pop	{r4, pc}

000d5d1c <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d5d1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d5d20:	6803      	ldr	r3, [r0, #0]
   d5d22:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d5d24:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d5d26:	4798      	blx	r3
   d5d28:	2210      	movs	r2, #16
   d5d2a:	4601      	mov	r1, r0
   d5d2c:	4668      	mov	r0, sp
   d5d2e:	f003 fb99 	bl	d9464 <memset>
	size_t len = length();
   d5d32:	6823      	ldr	r3, [r4, #0]
   d5d34:	4620      	mov	r0, r4
   d5d36:	689b      	ldr	r3, [r3, #8]
   d5d38:	4798      	blx	r3
	size_t offset = 0;
   d5d3a:	2500      	movs	r5, #0
	size_t len = length();
   d5d3c:	4607      	mov	r7, r0
	bool bResult = false;
   d5d3e:	4628      	mov	r0, r5
	while(offset < len) {
   d5d40:	42bd      	cmp	r5, r7
   d5d42:	d20e      	bcs.n	d5d62 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d5d44:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d5d46:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d5d48:	2e10      	cmp	r6, #16
   d5d4a:	bf28      	it	cs
   d5d4c:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d5d4e:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d5d52:	466a      	mov	r2, sp
   d5d54:	4633      	mov	r3, r6
   d5d56:	4629      	mov	r1, r5
   d5d58:	4620      	mov	r0, r4
   d5d5a:	47c0      	blx	r8
		if (!bResult) {
   d5d5c:	b108      	cbz	r0, d5d62 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d5d5e:	4435      	add	r5, r6
	while(offset < len) {
   d5d60:	e7ee      	b.n	d5d40 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d5d62:	b004      	add	sp, #16
   d5d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5d68 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d5d68:	f44f 7380 	mov.w	r3, #256	; 0x100
   d5d6c:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d5d6e:	f240 1301 	movw	r3, #257	; 0x101
   d5d72:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d5d74:	2300      	movs	r3, #0
   d5d76:	8203      	strh	r3, [r0, #16]
}
   d5d78:	4770      	bx	lr
	...

000d5d7c <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d5d7c:	b508      	push	{r3, lr}
   d5d7e:	4b06      	ldr	r3, [pc, #24]	; (d5d98 <_ZN12MCP79410TimeC1Ev+0x1c>)
   d5d80:	6003      	str	r3, [r0, #0]
   d5d82:	4b06      	ldr	r3, [pc, #24]	; (d5d9c <_ZN12MCP79410TimeC1Ev+0x20>)
   d5d84:	6043      	str	r3, [r0, #4]
   d5d86:	f240 7304 	movw	r3, #1796	; 0x704
   d5d8a:	8103      	strh	r3, [r0, #8]
   d5d8c:	2300      	movs	r3, #0
   d5d8e:	7443      	strb	r3, [r0, #17]
	clear();
   d5d90:	f7ff ffea 	bl	d5d68 <_ZN12MCP79410Time5clearEv>
}
   d5d94:	bd08      	pop	{r3, pc}
   d5d96:	bf00      	nop
   d5d98:	000dbbcc 	.word	0x000dbbcc
   d5d9c:	03020100 	.word	0x03020100

000d5da0 <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5da0:	0903      	lsrs	r3, r0, #4
}
   d5da2:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5da4:	f000 000f 	and.w	r0, r0, #15
}
   d5da8:	fb02 0003 	mla	r0, r2, r3, r0
   d5dac:	4770      	bx	lr

000d5dae <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d5dae:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d5db0:	7a80      	ldrb	r0, [r0, #10]
   d5db2:	f7ff fff5 	bl	d5da0 <_ZN12MCP79410Time8bcdToIntEh>
}
   d5db6:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d5dba:	bd08      	pop	{r3, pc}

000d5dbc <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d5dbc:	7ac0      	ldrb	r0, [r0, #11]
   d5dbe:	f000 001f 	and.w	r0, r0, #31
   d5dc2:	f7ff bfed 	b.w	d5da0 <_ZN12MCP79410Time8bcdToIntEh>

000d5dc6 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d5dc6:	7b00      	ldrb	r0, [r0, #12]
   d5dc8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d5dcc:	f7ff bfe8 	b.w	d5da0 <_ZN12MCP79410Time8bcdToIntEh>

000d5dd0 <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d5dd0:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d5dd2:	7b81      	ldrb	r1, [r0, #14]
   d5dd4:	064a      	lsls	r2, r1, #25
   d5dd6:	d50d      	bpl.n	d5df4 <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d5dd8:	f001 001f 	and.w	r0, r1, #31
   d5ddc:	f7ff ffe0 	bl	d5da0 <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d5de0:	068b      	lsls	r3, r1, #26
   d5de2:	d503      	bpl.n	d5dec <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d5de4:	280c      	cmp	r0, #12
   d5de6:	d000      	beq.n	d5dea <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d5de8:	300c      	adds	r0, #12
}
   d5dea:	bd08      	pop	{r3, pc}
				return 0;
   d5dec:	280c      	cmp	r0, #12
   d5dee:	bf08      	it	eq
   d5df0:	2000      	moveq	r0, #0
   d5df2:	e7fa      	b.n	d5dea <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d5df4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d5df8:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d5dfc:	f7ff bfd0 	b.w	d5da0 <_ZN12MCP79410Time8bcdToIntEh>

000d5e00 <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d5e00:	7bc0      	ldrb	r0, [r0, #15]
   d5e02:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5e06:	f7ff bfcb 	b.w	d5da0 <_ZN12MCP79410Time8bcdToIntEh>

000d5e0a <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d5e0a:	7c00      	ldrb	r0, [r0, #16]
   d5e0c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5e10:	f7ff bfc6 	b.w	d5da0 <_ZN12MCP79410Time8bcdToIntEh>

000d5e14 <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d5e14:	b510      	push	{r4, lr}
   d5e16:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d5e18:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d5e1a:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d5e1c:	2100      	movs	r1, #0
   d5e1e:	a801      	add	r0, sp, #4
   d5e20:	f003 fb20 	bl	d9464 <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d5e24:	4620      	mov	r0, r4
   d5e26:	f7ff ffc2 	bl	d5dae <_ZNK12MCP79410Time7getYearEv>
   d5e2a:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d5e2e:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d5e30:	4620      	mov	r0, r4
   d5e32:	f7ff ffc3 	bl	d5dbc <_ZNK12MCP79410Time8getMonthEv>
   d5e36:	3801      	subs	r0, #1
   d5e38:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d5e3a:	4620      	mov	r0, r4
   d5e3c:	f7ff ffc3 	bl	d5dc6 <_ZNK12MCP79410Time13getDayOfMonthEv>
   d5e40:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d5e42:	4620      	mov	r0, r4
   d5e44:	f7ff ffc4 	bl	d5dd0 <_ZNK12MCP79410Time7getHourEv>
   d5e48:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d5e4a:	4620      	mov	r0, r4
   d5e4c:	f7ff ffd8 	bl	d5e00 <_ZNK12MCP79410Time9getMinuteEv>
   d5e50:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d5e52:	4620      	mov	r0, r4
   d5e54:	f7ff ffd9 	bl	d5e0a <_ZNK12MCP79410Time9getSecondEv>
   d5e58:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d5e5a:	a801      	add	r0, sp, #4
   d5e5c:	f001 f986 	bl	d716c <mktime>
}
   d5e60:	b00a      	add	sp, #40	; 0x28
   d5e62:	bd10      	pop	{r4, pc}

000d5e64 <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d5e64:	210a      	movs	r1, #10
   d5e66:	fb90 f2f1 	sdiv	r2, r0, r1
   d5e6a:	fb92 f3f1 	sdiv	r3, r2, r1
   d5e6e:	fb01 2313 	mls	r3, r1, r3, r2
   d5e72:	011b      	lsls	r3, r3, #4
   d5e74:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d5e76:	fb01 0012 	mls	r0, r1, r2, r0
   d5e7a:	4318      	orrs	r0, r3
}
   d5e7c:	b2c0      	uxtb	r0, r0
   d5e7e:	4770      	bx	lr

000d5e80 <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d5e80:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d5e82:	b510      	push	{r4, lr}
   d5e84:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d5e86:	fb91 f0f3 	sdiv	r0, r1, r3
   d5e8a:	fb00 1013 	mls	r0, r0, r3, r1
   d5e8e:	f7ff ffe9 	bl	d5e64 <_ZN12MCP79410Time8intToBcdEi>
   d5e92:	72a0      	strb	r0, [r4, #10]
}
   d5e94:	bd10      	pop	{r4, pc}

000d5e96 <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d5e96:	b510      	push	{r4, lr}
   d5e98:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d5e9a:	4608      	mov	r0, r1
   d5e9c:	f7ff ffe2 	bl	d5e64 <_ZN12MCP79410Time8intToBcdEi>
   d5ea0:	72e0      	strb	r0, [r4, #11]
}
   d5ea2:	bd10      	pop	{r4, pc}

000d5ea4 <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d5ea4:	b510      	push	{r4, lr}
   d5ea6:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d5ea8:	4608      	mov	r0, r1
   d5eaa:	f7ff ffdb 	bl	d5e64 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d5eae:	7b23      	ldrb	r3, [r4, #12]
   d5eb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d5eb4:	4318      	orrs	r0, r3
   d5eb6:	7320      	strb	r0, [r4, #12]
}
   d5eb8:	bd10      	pop	{r4, pc}

000d5eba <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d5eba:	b510      	push	{r4, lr}
   d5ebc:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d5ebe:	1c48      	adds	r0, r1, #1
   d5ec0:	f7ff ffd0 	bl	d5e64 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d5ec4:	7b63      	ldrb	r3, [r4, #13]
   d5ec6:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d5eca:	4318      	orrs	r0, r3
   d5ecc:	7360      	strb	r0, [r4, #13]
}
   d5ece:	bd10      	pop	{r4, pc}

000d5ed0 <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d5ed0:	b510      	push	{r4, lr}
   d5ed2:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d5ed4:	4608      	mov	r0, r1
   d5ed6:	f7ff ffc5 	bl	d5e64 <_ZN12MCP79410Time8intToBcdEi>
   d5eda:	73a0      	strb	r0, [r4, #14]
}
   d5edc:	bd10      	pop	{r4, pc}

000d5ede <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d5ede:	b510      	push	{r4, lr}
   d5ee0:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d5ee2:	4608      	mov	r0, r1
   d5ee4:	f7ff ffbe 	bl	d5e64 <_ZN12MCP79410Time8intToBcdEi>
   d5ee8:	73e0      	strb	r0, [r4, #15]
}
   d5eea:	bd10      	pop	{r4, pc}

000d5eec <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d5eec:	b510      	push	{r4, lr}
   d5eee:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d5ef0:	4608      	mov	r0, r1
   d5ef2:	f7ff ffb7 	bl	d5e64 <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d5ef6:	7c23      	ldrb	r3, [r4, #16]
   d5ef8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d5efc:	4318      	orrs	r0, r3
   d5efe:	7420      	strb	r0, [r4, #16]
}
   d5f00:	bd10      	pop	{r4, pc}

000d5f02 <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d5f02:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5f04:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d5f06:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d5f08:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d5f0c:	f003 fa70 	bl	d93f0 <gmtime>
   d5f10:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d5f12:	6941      	ldr	r1, [r0, #20]
   d5f14:	4620      	mov	r0, r4
   d5f16:	f7ff ffb3 	bl	d5e80 <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d5f1a:	6929      	ldr	r1, [r5, #16]
   d5f1c:	4620      	mov	r0, r4
   d5f1e:	3101      	adds	r1, #1
   d5f20:	f7ff ffb9 	bl	d5e96 <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d5f24:	68e9      	ldr	r1, [r5, #12]
   d5f26:	4620      	mov	r0, r4
   d5f28:	f7ff ffbc 	bl	d5ea4 <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d5f2c:	69a9      	ldr	r1, [r5, #24]
   d5f2e:	4620      	mov	r0, r4
   d5f30:	f7ff ffc3 	bl	d5eba <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d5f34:	68a9      	ldr	r1, [r5, #8]
   d5f36:	4620      	mov	r0, r4
   d5f38:	f7ff ffca 	bl	d5ed0 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d5f3c:	6869      	ldr	r1, [r5, #4]
   d5f3e:	4620      	mov	r0, r4
   d5f40:	f7ff ffcd 	bl	d5ede <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d5f44:	6829      	ldr	r1, [r5, #0]
   d5f46:	293b      	cmp	r1, #59	; 0x3b
   d5f48:	bfa8      	it	ge
   d5f4a:	213b      	movge	r1, #59	; 0x3b
   d5f4c:	4620      	mov	r0, r4
   d5f4e:	f7ff ffcd 	bl	d5eec <_ZN12MCP79410Time9setSecondEi>
}
   d5f52:	b003      	add	sp, #12
   d5f54:	bd30      	pop	{r4, r5, pc}
	...

000d5f58 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5f58:	4a05      	ldr	r2, [pc, #20]	; (d5f70 <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d5f5a:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5f5c:	e9c0 2100 	strd	r2, r1, [r0]
   d5f60:	4a04      	ldr	r2, [pc, #16]	; (d5f74 <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d5f62:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5f64:	4a04      	ldr	r2, [pc, #16]	; (d5f78 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d5f66:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5f68:	4a04      	ldr	r2, [pc, #16]	; (d5f7c <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d5f6a:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5f6c:	6142      	str	r2, [r0, #20]
}
   d5f6e:	4770      	bx	lr
   d5f70:	000dbc00 	.word	0x000dbc00
   d5f74:	03010000 	.word	0x03010000
   d5f78:	000dbba8 	.word	0x000dbba8
   d5f7c:	000dbbdc 	.word	0x000dbbdc

000d5f80 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d5f80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5f84:	4604      	mov	r4, r0
   d5f86:	460f      	mov	r7, r1
   d5f88:	4690      	mov	r8, r2
   d5f8a:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d5f8c:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d5f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5f90:	429e      	cmp	r6, r3
   d5f92:	d231      	bcs.n	d5ff8 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d5f94:	6860      	ldr	r0, [r4, #4]
   d5f96:	4639      	mov	r1, r7
   d5f98:	f001 fd13 	bl	d79c2 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d5f9c:	eb08 0106 	add.w	r1, r8, r6
   d5fa0:	6860      	ldr	r0, [r4, #4]
   d5fa2:	f7ff fd47 	bl	d5a34 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d5fa6:	6860      	ldr	r0, [r4, #4]
   d5fa8:	2100      	movs	r1, #0
   d5faa:	f001 fd11 	bl	d79d0 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d5fae:	4605      	mov	r5, r0
   d5fb0:	b9d0      	cbnz	r0, d5fe8 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d5fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d5fb4:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d5fb6:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d5fb8:	2a20      	cmp	r2, #32
   d5fba:	f04f 0301 	mov.w	r3, #1
   d5fbe:	bf28      	it	cs
   d5fc0:	2220      	movcs	r2, #32
   d5fc2:	4639      	mov	r1, r7
   d5fc4:	f001 fceb 	bl	d799e <_ZN7TwoWire11requestFromEhjh>
   d5fc8:	eb09 0b06 	add.w	fp, r9, r6
   d5fcc:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d5fce:	eb0b 0a00 	add.w	sl, fp, r0
   d5fd2:	45da      	cmp	sl, fp
   d5fd4:	d006      	beq.n	d5fe4 <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d5fd6:	6860      	ldr	r0, [r4, #4]
   d5fd8:	6803      	ldr	r3, [r0, #0]
   d5fda:	695b      	ldr	r3, [r3, #20]
   d5fdc:	4798      	blx	r3
   d5fde:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d5fe2:	e7f6      	b.n	d5fd2 <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d5fe4:	442e      	add	r6, r5
	while(offset < bufLen) {
   d5fe6:	e7d2      	b.n	d5f8e <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d5fe8:	4602      	mov	r2, r0
   d5fea:	4904      	ldr	r1, [pc, #16]	; (d5ffc <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d5fec:	4804      	ldr	r0, [pc, #16]	; (d6000 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d5fee:	f7ff fd25 	bl	d5a3c <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d5ff2:	4628      	mov	r0, r5
   d5ff4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5ff8:	2500      	movs	r5, #0
	return stat;
   d5ffa:	e7fa      	b.n	d5ff2 <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d5ffc:	000dbb00 	.word	0x000dbb00
   d6000:	2003e5dc 	.word	0x2003e5dc

000d6004 <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6004:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6008:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d600c:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d600e:	6803      	ldr	r3, [r0, #0]
   d6010:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6012:	4605      	mov	r5, r0
   d6014:	460c      	mov	r4, r1
   d6016:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6018:	4798      	blx	r3
   d601a:	4580      	cmp	r8, r0
   d601c:	d80d      	bhi.n	d603a <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d601e:	3420      	adds	r4, #32
   d6020:	6868      	ldr	r0, [r5, #4]
   d6022:	9600      	str	r6, [sp, #0]
   d6024:	463b      	mov	r3, r7
   d6026:	b2e2      	uxtb	r2, r4
   d6028:	216f      	movs	r1, #111	; 0x6f
   d602a:	f7ff ffa9 	bl	d5f80 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d602e:	fab0 f080 	clz	r0, r0
   d6032:	0940      	lsrs	r0, r0, #5
}
   d6034:	b002      	add	sp, #8
   d6036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d603a:	2000      	movs	r0, #0
   d603c:	e7fa      	b.n	d6034 <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d603e <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d603e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6042:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6046:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6048:	6803      	ldr	r3, [r0, #0]
   d604a:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d604c:	4604      	mov	r4, r0
   d604e:	460d      	mov	r5, r1
   d6050:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6052:	4798      	blx	r3
   d6054:	4580      	cmp	r8, r0
   d6056:	d80c      	bhi.n	d6072 <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d6058:	6860      	ldr	r0, [r4, #4]
   d605a:	9600      	str	r6, [sp, #0]
   d605c:	463b      	mov	r3, r7
   d605e:	b2ea      	uxtb	r2, r5
   d6060:	2157      	movs	r1, #87	; 0x57
   d6062:	f7ff ff8d 	bl	d5f80 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d6066:	fab0 f080 	clz	r0, r0
   d606a:	0940      	lsrs	r0, r0, #5
}
   d606c:	b002      	add	sp, #8
   d606e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6072:	2000      	movs	r0, #0
   d6074:	e7fa      	b.n	d606c <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d6076 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6076:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d6078:	1e1e      	subs	r6, r3, #0
   d607a:	bf0c      	ite	eq
   d607c:	2307      	moveq	r3, #7
   d607e:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6080:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d6082:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d6084:	ab02      	add	r3, sp, #8
   d6086:	460a      	mov	r2, r1
   d6088:	216f      	movs	r1, #111	; 0x6f
   d608a:	f7ff ff79 	bl	d5f80 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d608e:	4605      	mov	r5, r0
   d6090:	b9a8      	cbnz	r0, d60be <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d6092:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d6096:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d6098:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d609c:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d609e:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d60a2:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d60a4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d60a8:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d60aa:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d60ae:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d60b0:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d60b4:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d60b6:	b92e      	cbnz	r6, d60c4 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d60b8:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d60bc:	72a3      	strb	r3, [r4, #10]
}
   d60be:	4628      	mov	r0, r5
   d60c0:	b004      	add	sp, #16
   d60c2:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d60c4:	f002 f8c2 	bl	d824c <_ZN9TimeClass4yearEv>
   d60c8:	f7ff fecc 	bl	d5e64 <_ZN12MCP79410Time8intToBcdEi>
   d60cc:	72a0      	strb	r0, [r4, #10]
	return stat;
   d60ce:	e7f6      	b.n	d60be <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d60d0 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d60d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d60d2:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d60d4:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d60d6:	9300      	str	r3, [sp, #0]
   d60d8:	216f      	movs	r1, #111	; 0x6f
   d60da:	ab03      	add	r3, sp, #12
   d60dc:	f7ff ff50 	bl	d5f80 <_ZNK8MCP7941010deviceReadEhhPhj>
   d60e0:	b920      	cbnz	r0, d60ec <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d60e2:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d60e6:	b005      	add	sp, #20
   d60e8:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d60ec:	2000      	movs	r0, #0
   d60ee:	e7fa      	b.n	d60e6 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d60f0 <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d60f0:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d60f2:	2103      	movs	r1, #3
   d60f4:	f7ff ffec 	bl	d60d0 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d60f8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d60fc:	bd08      	pop	{r3, pc}

000d60fe <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d60fe:	b538      	push	{r3, r4, r5, lr}
   d6100:	2300      	movs	r3, #0
   d6102:	460c      	mov	r4, r1
   d6104:	460a      	mov	r2, r1
   d6106:	4619      	mov	r1, r3
   d6108:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d610a:	f7ff ffb4 	bl	d6076 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d610e:	b930      	cbnz	r0, d611e <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d6110:	7aa3      	ldrb	r3, [r4, #10]
   d6112:	b123      	cbz	r3, d611e <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d6114:	4628      	mov	r0, r5
}
   d6116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d611a:	f7ff bfe9 	b.w	d60f0 <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d611e:	2000      	movs	r0, #0
   d6120:	bd38      	pop	{r3, r4, r5, pc}

000d6122 <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d6122:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6124:	4602      	mov	r2, r0
	MCP79410Time time;
   d6126:	a801      	add	r0, sp, #4
   d6128:	f7ff fe28 	bl	d5d7c <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d612c:	a901      	add	r1, sp, #4
   d612e:	4610      	mov	r0, r2
   d6130:	f7ff ffe5 	bl	d60fe <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d6134:	b128      	cbz	r0, d6142 <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d6136:	a801      	add	r0, sp, #4
   d6138:	f7ff fe6c 	bl	d5e14 <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d613c:	b007      	add	sp, #28
   d613e:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d6142:	2000      	movs	r0, #0
   d6144:	4601      	mov	r1, r0
MCP79410Time::~MCP79410Time() {
   d6146:	e7f9      	b.n	d613c <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d6148 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d6148:	b5d0      	push	{r4, r6, r7, lr}
   d614a:	4604      	mov	r4, r0
   d614c:	b086      	sub	sp, #24
	wire.begin();
   d614e:	6840      	ldr	r0, [r0, #4]
   d6150:	f001 fc08 	bl	d7964 <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d6154:	f002 f840 	bl	d81d8 <_ZN9TimeClass7isValidEv>
   d6158:	b9e8      	cbnz	r0, d6196 <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d615a:	7ae3      	ldrb	r3, [r4, #11]
   d615c:	079b      	lsls	r3, r3, #30
   d615e:	d51a      	bpl.n	d6196 <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d6160:	4620      	mov	r0, r4
   d6162:	f7ff ffde 	bl	d6122 <_ZNK8MCP7941010getRTCTimeEv>
   d6166:	4606      	mov	r6, r0
   d6168:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d616a:	ea56 0307 	orrs.w	r3, r6, r7
   d616e:	d012      	beq.n	d6196 <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d6170:	f001 ff39 	bl	d7fe6 <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d6174:	4b0a      	ldr	r3, [pc, #40]	; (d61a0 <_ZN8MCP794105setupEv+0x58>)
   d6176:	490b      	ldr	r1, [pc, #44]	; (d61a4 <_ZN8MCP794105setupEv+0x5c>)
   d6178:	681b      	ldr	r3, [r3, #0]
   d617a:	9300      	str	r3, [sp, #0]
   d617c:	4632      	mov	r2, r6
   d617e:	463b      	mov	r3, r7
   d6180:	a802      	add	r0, sp, #8
   d6182:	f001 ffe7 	bl	d8154 <_ZN9TimeClass6formatExPKc>
   d6186:	4808      	ldr	r0, [pc, #32]	; (d61a8 <_ZN8MCP794105setupEv+0x60>)
   d6188:	9a02      	ldr	r2, [sp, #8]
   d618a:	4908      	ldr	r1, [pc, #32]	; (d61ac <_ZN8MCP794105setupEv+0x64>)
   d618c:	f7ff fc56 	bl	d5a3c <_ZNK5spark6Logger4infoEPKcz>
   d6190:	a802      	add	r0, sp, #8
   d6192:	f001 fde9 	bl	d7d68 <_ZN6StringD1Ev>
	setupDone = true;
   d6196:	2301      	movs	r3, #1
   d6198:	7223      	strb	r3, [r4, #8]
}
   d619a:	b006      	add	sp, #24
   d619c:	bdd0      	pop	{r4, r6, r7, pc}
   d619e:	bf00      	nop
   d61a0:	2003dc90 	.word	0x2003dc90
   d61a4:	2003e64c 	.word	0x2003e64c
   d61a8:	2003e5dc 	.word	0x2003e5dc
   d61ac:	000dbb1a 	.word	0x000dbb1a

000d61b0 <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d61b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d61b4:	4606      	mov	r6, r0
   d61b6:	4688      	mov	r8, r1
   d61b8:	4691      	mov	r9, r2
   d61ba:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d61bc:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d61be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d61c0:	429d      	cmp	r5, r3
   d61c2:	d229      	bcs.n	d6218 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d61c4:	6870      	ldr	r0, [r6, #4]
   d61c6:	4641      	mov	r1, r8
   d61c8:	f001 fbfb 	bl	d79c2 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d61cc:	6870      	ldr	r0, [r6, #4]
   d61ce:	eb09 0105 	add.w	r1, r9, r5
   d61d2:	f7ff fc2f 	bl	d5a34 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d61d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d61d8:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d61da:	2f1f      	cmp	r7, #31
   d61dc:	bf28      	it	cs
   d61de:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d61e0:	eb0a 0405 	add.w	r4, sl, r5
   d61e4:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d61e8:	6870      	ldr	r0, [r6, #4]
   d61ea:	f814 1b01 	ldrb.w	r1, [r4], #1
   d61ee:	6802      	ldr	r2, [r0, #0]
   d61f0:	6892      	ldr	r2, [r2, #8]
   d61f2:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d61f4:	45a3      	cmp	fp, r4
   d61f6:	d1f7      	bne.n	d61e8 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d61f8:	6870      	ldr	r0, [r6, #4]
   d61fa:	2101      	movs	r1, #1
   d61fc:	f001 fbe8 	bl	d79d0 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d6200:	4604      	mov	r4, r0
   d6202:	b138      	cbz	r0, d6214 <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d6204:	4602      	mov	r2, r0
   d6206:	4905      	ldr	r1, [pc, #20]	; (d621c <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d6208:	4805      	ldr	r0, [pc, #20]	; (d6220 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d620a:	f7ff fc17 	bl	d5a3c <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d620e:	4620      	mov	r0, r4
   d6210:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d6214:	443d      	add	r5, r7
	while(offset < bufLen) {
   d6216:	e7d2      	b.n	d61be <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d6218:	2400      	movs	r4, #0
	return stat;
   d621a:	e7f8      	b.n	d620e <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d621c:	000dbb2f 	.word	0x000dbb2f
   d6220:	2003e5dc 	.word	0x2003e5dc

000d6224 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6224:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6228:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d622c:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d622e:	6803      	ldr	r3, [r0, #0]
   d6230:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6232:	4605      	mov	r5, r0
   d6234:	460c      	mov	r4, r1
   d6236:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6238:	4798      	blx	r3
   d623a:	4580      	cmp	r8, r0
   d623c:	d80d      	bhi.n	d625a <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d623e:	3420      	adds	r4, #32
   d6240:	6868      	ldr	r0, [r5, #4]
   d6242:	9600      	str	r6, [sp, #0]
   d6244:	463b      	mov	r3, r7
   d6246:	b2e2      	uxtb	r2, r4
   d6248:	216f      	movs	r1, #111	; 0x6f
   d624a:	f7ff ffb1 	bl	d61b0 <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d624e:	fab0 f080 	clz	r0, r0
   d6252:	0940      	lsrs	r0, r0, #5
}
   d6254:	b002      	add	sp, #8
   d6256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d625a:	2000      	movs	r0, #0
   d625c:	e7fa      	b.n	d6254 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d625e <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d625e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d6260:	7c13      	ldrb	r3, [r2, #16]
   d6262:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d6266:	7bd3      	ldrb	r3, [r2, #15]
   d6268:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d626c:	7b93      	ldrb	r3, [r2, #14]
   d626e:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d6272:	7b53      	ldrb	r3, [r2, #13]
   d6274:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d6278:	7b13      	ldrb	r3, [r2, #12]
   d627a:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d627e:	7ad3      	ldrb	r3, [r2, #11]
   d6280:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d6284:	7a93      	ldrb	r3, [r2, #10]
   d6286:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d628a:	2307      	movs	r3, #7
   d628c:	9300      	str	r3, [sp, #0]
   d628e:	460a      	mov	r2, r1
   d6290:	ab02      	add	r3, sp, #8
   d6292:	216f      	movs	r1, #111	; 0x6f
   d6294:	f7ff ff8c 	bl	d61b0 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d6298:	b005      	add	sp, #20
   d629a:	f85d fb04 	ldr.w	pc, [sp], #4

000d629e <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d629e:	b510      	push	{r4, lr}
   d62a0:	b088      	sub	sp, #32
   d62a2:	4604      	mov	r4, r0
	MCP79410Time time;
   d62a4:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d62a6:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d62a8:	f7ff fd68 	bl	d5d7c <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d62ac:	9b01      	ldr	r3, [sp, #4]
   d62ae:	a803      	add	r0, sp, #12
   d62b0:	f7ff fe27 	bl	d5f02 <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d62b4:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d62b8:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d62ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d62be:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d62c2:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d62c6:	b16a      	cbz	r2, d62e4 <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d62c8:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d62cc:	aa03      	add	r2, sp, #12
   d62ce:	2100      	movs	r1, #0
   d62d0:	4620      	mov	r0, r4
   d62d2:	f88d 3019 	strb.w	r3, [sp, #25]
   d62d6:	f7ff ffc2 	bl	d625e <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d62da:	fab0 f080 	clz	r0, r0
   d62de:	0940      	lsrs	r0, r0, #5
   d62e0:	b008      	add	sp, #32
   d62e2:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d62e4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d62e8:	e7f0      	b.n	d62cc <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d62ec <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d62ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d62ee:	b087      	sub	sp, #28
   d62f0:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d62f2:	f001 ff71 	bl	d81d8 <_ZN9TimeClass7isValidEv>
   d62f6:	4604      	mov	r4, r0
   d62f8:	b1e8      	cbz	r0, d6336 <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d62fa:	f001 ff8a 	bl	d8212 <_ZN9TimeClass3nowEv>
   d62fe:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d6300:	4602      	mov	r2, r0
		time_t now = Time.now();
   d6302:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d6304:	463b      	mov	r3, r7
   d6306:	4628      	mov	r0, r5
   d6308:	f7ff ffc9 	bl	d629e <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d630c:	4b0c      	ldr	r3, [pc, #48]	; (d6340 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d630e:	490d      	ldr	r1, [pc, #52]	; (d6344 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d6310:	681b      	ldr	r3, [r3, #0]
   d6312:	9300      	str	r3, [sp, #0]
   d6314:	4632      	mov	r2, r6
   d6316:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d6318:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d631a:	a802      	add	r0, sp, #8
   d631c:	f001 ff1a 	bl	d8154 <_ZN9TimeClass6formatExPKc>
   d6320:	4809      	ldr	r0, [pc, #36]	; (d6348 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d6322:	9a02      	ldr	r2, [sp, #8]
   d6324:	4909      	ldr	r1, [pc, #36]	; (d634c <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d6326:	f7ff fb89 	bl	d5a3c <_ZNK5spark6Logger4infoEPKcz>
   d632a:	a802      	add	r0, sp, #8
   d632c:	f001 fd1c 	bl	d7d68 <_ZN6StringD1Ev>
}
   d6330:	4620      	mov	r0, r4
   d6332:	b007      	add	sp, #28
   d6334:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d6336:	4906      	ldr	r1, [pc, #24]	; (d6350 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d6338:	4803      	ldr	r0, [pc, #12]	; (d6348 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d633a:	f7ff fb7f 	bl	d5a3c <_ZNK5spark6Logger4infoEPKcz>
   d633e:	e7f7      	b.n	d6330 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d6340:	2003dc90 	.word	0x2003dc90
   d6344:	2003e64c 	.word	0x2003e64c
   d6348:	2003e5dc 	.word	0x2003e5dc
   d634c:	000dbb4a 	.word	0x000dbb4a
   d6350:	000dbb60 	.word	0x000dbb60

000d6354 <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d6354:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d6356:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d6358:	4604      	mov	r4, r0
	if (!timeSet) {
   d635a:	b99d      	cbnz	r5, d6384 <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d635c:	f001 ff3c 	bl	d81d8 <_ZN9TimeClass7isValidEv>
   d6360:	b180      	cbz	r0, d6384 <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d6362:	2200      	movs	r2, #0
   d6364:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d6366:	4669      	mov	r1, sp
   d6368:	4628      	mov	r0, r5
        tm = 0;
   d636a:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d636e:	f000 fe35 	bl	d6fdc <spark_sync_time_last>
			if (lastSync != 0) {
   d6372:	b138      	cbz	r0, d6384 <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d6374:	7ae3      	ldrb	r3, [r4, #11]
   d6376:	07db      	lsls	r3, r3, #31
   d6378:	d502      	bpl.n	d6380 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d637a:	4620      	mov	r0, r4
   d637c:	f7ff ffb6 	bl	d62ec <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d6380:	2301      	movs	r3, #1
   d6382:	7263      	strb	r3, [r4, #9]
}
   d6384:	b003      	add	sp, #12
   d6386:	bd30      	pop	{r4, r5, pc}

000d6388 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d6388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d638a:	2301      	movs	r3, #1
	buf[0] = value;
   d638c:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d6390:	9300      	str	r3, [sp, #0]
   d6392:	460a      	mov	r2, r1
   d6394:	ab03      	add	r3, sp, #12
   d6396:	216f      	movs	r1, #111	; 0x6f
   d6398:	f7ff ff0a 	bl	d61b0 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d639c:	b005      	add	sp, #20
   d639e:	f85d fb04 	ldr.w	pc, [sp], #4

000d63a2 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d63a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d63a4:	4604      	mov	r4, r0
   d63a6:	460d      	mov	r5, r1
   d63a8:	4617      	mov	r7, r2
   d63aa:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d63ac:	f7ff fe90 	bl	d60d0 <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   d63b0:	ea00 0207 	and.w	r2, r0, r7
	return deviceWriteRegisterByte(addr, value);
   d63b4:	4332      	orrs	r2, r6
   d63b6:	4629      	mov	r1, r5
   d63b8:	4620      	mov	r0, r4
}
   d63ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   d63be:	f7ff bfe3 	b.w	d6388 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d63c2 <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   d63c2:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   d63c4:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d63c6:	d80c      	bhi.n	d63e2 <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d63c8:	2900      	cmp	r1, #0
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d63ca:	f04f 0300 	mov.w	r3, #0
   d63ce:	bf14      	ite	ne
   d63d0:	22df      	movne	r2, #223	; 0xdf
   d63d2:	22ef      	moveq	r2, #239	; 0xef
   d63d4:	2107      	movs	r1, #7
   d63d6:	f7ff ffe4 	bl	d63a2 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d63da:	fab0 f080 	clz	r0, r0
   d63de:	0940      	lsrs	r0, r0, #5
}
   d63e0:	bd08      	pop	{r3, pc}
		return false;
   d63e2:	2000      	movs	r0, #0
   d63e4:	e7fc      	b.n	d63e0 <_ZN8MCP7941010clearAlarmEi+0x1e>

000d63e6 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d63e6:	b538      	push	{r3, r4, r5, lr}
   d63e8:	4604      	mov	r4, r0
   d63ea:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d63ec:	6860      	ldr	r0, [r4, #4]
   d63ee:	2157      	movs	r1, #87	; 0x57
   d63f0:	f001 fae7 	bl	d79c2 <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d63f4:	6860      	ldr	r0, [r4, #4]
   d63f6:	2101      	movs	r1, #1
   d63f8:	f001 faea 	bl	d79d0 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d63fc:	b108      	cbz	r0, d6402 <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d63fe:	3d01      	subs	r5, #1
   d6400:	d1f4      	bne.n	d63ec <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d6402:	bd38      	pop	{r3, r4, r5, pc}

000d6404 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d6404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6408:	4604      	mov	r4, r0
   d640a:	460f      	mov	r7, r1
   d640c:	4616      	mov	r6, r2
   d640e:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d6412:	45b0      	cmp	r8, r6
   d6414:	d020      	beq.n	d6458 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d6416:	6860      	ldr	r0, [r4, #4]
   d6418:	2157      	movs	r1, #87	; 0x57
   d641a:	f001 fad2 	bl	d79c2 <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d641e:	4639      	mov	r1, r7
   d6420:	6860      	ldr	r0, [r4, #4]
   d6422:	f7ff fb07 	bl	d5a34 <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d6426:	6860      	ldr	r0, [r4, #4]
   d6428:	f816 1b01 	ldrb.w	r1, [r6], #1
   d642c:	6803      	ldr	r3, [r0, #0]
   d642e:	689b      	ldr	r3, [r3, #8]
   d6430:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d6432:	6860      	ldr	r0, [r4, #4]
   d6434:	2101      	movs	r1, #1
   d6436:	f001 facb 	bl	d79d0 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d643a:	3701      	adds	r7, #1
   d643c:	4605      	mov	r5, r0
   d643e:	b138      	cbz	r0, d6450 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d6440:	4602      	mov	r2, r0
   d6442:	4906      	ldr	r1, [pc, #24]	; (d645c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d6444:	4806      	ldr	r0, [pc, #24]	; (d6460 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d6446:	f7ff faf9 	bl	d5a3c <_ZNK5spark6Logger4infoEPKcz>
}
   d644a:	4628      	mov	r0, r5
   d644c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d6450:	4620      	mov	r0, r4
   d6452:	f7ff ffc8 	bl	d63e6 <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d6456:	e7dc      	b.n	d6412 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d6458:	2500      	movs	r5, #0
	return stat;
   d645a:	e7f6      	b.n	d644a <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d645c:	000dbb75 	.word	0x000dbb75
   d6460:	2003e5dc 	.word	0x2003e5dc

000d6464 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6464:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d6466:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6468:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d646a:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d646c:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d646e:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6470:	4604      	mov	r4, r0
   d6472:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d6474:	4798      	blx	r3
   d6476:	4287      	cmp	r7, r0
   d6478:	d80a      	bhi.n	d6490 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d647a:	9a01      	ldr	r2, [sp, #4]
   d647c:	6860      	ldr	r0, [r4, #4]
   d647e:	4633      	mov	r3, r6
   d6480:	b2e9      	uxtb	r1, r5
   d6482:	f7ff ffbf 	bl	d6404 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d6486:	fab0 f080 	clz	r0, r0
   d648a:	0940      	lsrs	r0, r0, #5
}
   d648c:	b003      	add	sp, #12
   d648e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d6490:	2000      	movs	r0, #0
   d6492:	e7fb      	b.n	d648c <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d6494 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   d6494:	4b01      	ldr	r3, [pc, #4]	; (d649c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d6496:	4a02      	ldr	r2, [pc, #8]	; (d64a0 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d6498:	601a      	str	r2, [r3, #0]
}
   d649a:	4770      	bx	lr
   d649c:	2003e5dc 	.word	0x2003e5dc
   d64a0:	000dbb96 	.word	0x000dbb96

000d64a4 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d64a4:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d64a6:	4603      	mov	r3, r0
	switch (__op)
   d64a8:	d102      	bne.n	d64b0 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d64aa:	6001      	str	r1, [r0, #0]
      }
   d64ac:	2000      	movs	r0, #0
   d64ae:	4770      	bx	lr
	  switch (__op)
   d64b0:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d64b2:	bf04      	itt	eq
   d64b4:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d64b8:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d64bc:	e7f6      	b.n	d64ac <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d64be <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d64be:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d64c0:	2301      	movs	r3, #1
   d64c2:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d64c4:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d64c6:	4604      	mov	r4, r0
        if (th->func) {
   d64c8:	b143      	cbz	r3, d64dc <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d64ca:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d64cc:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d64ce:	2301      	movs	r3, #1
   d64d0:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d64d2:	2000      	movs	r0, #0
    }
   d64d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d64d8:	f000 bb32 	b.w	d6b40 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d64dc:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d64de:	2800      	cmp	r0, #0
   d64e0:	d0f5      	beq.n	d64ce <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d64e2:	6883      	ldr	r3, [r0, #8]
   d64e4:	b90b      	cbnz	r3, d64ea <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d64e6:	f002 f926 	bl	d8736 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d64ea:	68c3      	ldr	r3, [r0, #12]
   d64ec:	e7ee      	b.n	d64cc <_ZN6Thread3runEPv+0xe>

000d64ee <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d64ee:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d64f0:	6842      	ldr	r2, [r0, #4]
   d64f2:	4603      	mov	r3, r0
   d64f4:	1054      	asrs	r4, r2, #1
   d64f6:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d64fa:	07d2      	lsls	r2, r2, #31
   d64fc:	bf48      	it	mi
   d64fe:	590a      	ldrmi	r2, [r1, r4]
   d6500:	681b      	ldr	r3, [r3, #0]
      }
   d6502:	f85d 4b04 	ldr.w	r4, [sp], #4
   d6506:	bf48      	it	mi
   d6508:	58d3      	ldrmi	r3, [r2, r3]
   d650a:	4718      	bx	r3

000d650c <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d650c:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d650e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d6510:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d6514:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d6516:	3008      	adds	r0, #8
   d6518:	f000 faea 	bl	d6af0 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d651c:	2004      	movs	r0, #4
   d651e:	f7fd fdba 	bl	d4096 <_Znwj>
   d6522:	4605      	mov	r5, r0
   d6524:	b398      	cbz	r0, d658e <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d6526:	491b      	ldr	r1, [pc, #108]	; (d6594 <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d6528:	2014      	movs	r0, #20
   d652a:	f002 f900 	bl	d872e <_ZnwjRKSt9nothrow_t>
   d652e:	b130      	cbz	r0, d653e <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6530:	2300      	movs	r3, #0
            exited(false) {
   d6532:	e9c0 3300 	strd	r3, r3, [r0]
   d6536:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d653a:	7403      	strb	r3, [r0, #16]
   d653c:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d653e:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d6540:	b1a0      	cbz	r0, d656c <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d6542:	4b15      	ldr	r3, [pc, #84]	; (d6598 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6544:	4915      	ldr	r1, [pc, #84]	; (d659c <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d6546:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d654a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d654e:	e9cd 0300 	strd	r0, r3, [sp]
   d6552:	2202      	movs	r2, #2
   d6554:	4b12      	ldr	r3, [pc, #72]	; (d65a0 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d6556:	3004      	adds	r0, #4
   d6558:	f000 fa92 	bl	d6a80 <os_thread_create>
   d655c:	b930      	cbnz	r0, d656c <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d655e:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d6560:	7c1b      	ldrb	r3, [r3, #16]
   d6562:	b9a3      	cbnz	r3, d658e <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d6564:	2001      	movs	r0, #1
   d6566:	f000 fb0b 	bl	d6b80 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d656a:	e7f8      	b.n	d655e <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d656c:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d656e:	2300      	movs	r3, #0
   d6570:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d6572:	b164      	cbz	r4, d658e <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d6574:	6827      	ldr	r7, [r4, #0]
   d6576:	b137      	cbz	r7, d6586 <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d6578:	4638      	mov	r0, r7
   d657a:	f7fd fed5 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d657e:	2110      	movs	r1, #16
   d6580:	4638      	mov	r0, r7
   d6582:	f002 f8d2 	bl	d872a <_ZdlPvj>
   d6586:	2114      	movs	r1, #20
   d6588:	4620      	mov	r0, r4
   d658a:	f002 f8ce 	bl	d872a <_ZdlPvj>
   d658e:	6075      	str	r5, [r6, #4]
}
   d6590:	b003      	add	sp, #12
   d6592:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6594:	000dbe98 	.word	0x000dbe98
   d6598:	000d67ab 	.word	0x000d67ab
   d659c:	000dbc08 	.word	0x000dbc08
   d65a0:	000d64bf 	.word	0x000d64bf

000d65a4 <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d65a4:	f247 5130 	movw	r1, #30000	; 0x7530
   d65a8:	4a08      	ldr	r2, [pc, #32]	; (d65cc <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d65aa:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d65ac:	4908      	ldr	r1, [pc, #32]	; (d65d0 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d65ae:	6002      	str	r2, [r0, #0]
   d65b0:	2200      	movs	r2, #0
   d65b2:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d65b6:	4907      	ldr	r1, [pc, #28]	; (d65d4 <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d65b8:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d65ba:	4907      	ldr	r1, [pc, #28]	; (d65d8 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d65bc:	6042      	str	r2, [r0, #4]
   d65be:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d65c2:	6181      	str	r1, [r0, #24]
   d65c4:	8502      	strh	r2, [r0, #40]	; 0x28
   d65c6:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d65ca:	4770      	bx	lr
   d65cc:	000dbccc 	.word	0x000dbccc
   d65d0:	000d6915 	.word	0x000d6915
   d65d4:	000d64ef 	.word	0x000d64ef
   d65d8:	000d64a5 	.word	0x000d64a5

000d65dc <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d65dc:	b510      	push	{r4, lr}
   d65de:	4b04      	ldr	r3, [pc, #16]	; (d65f0 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d65e0:	4604      	mov	r4, r0
   d65e2:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d65e6:	f7fd fe9f 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
}
   d65ea:	4620      	mov	r0, r4
   d65ec:	bd10      	pop	{r4, pc}
   d65ee:	bf00      	nop
   d65f0:	000dbccc 	.word	0x000dbccc

000d65f4 <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d65f4:	b510      	push	{r4, lr}
   d65f6:	4b03      	ldr	r3, [pc, #12]	; (d6604 <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d65f8:	6003      	str	r3, [r0, #0]
   d65fa:	4604      	mov	r4, r0
   d65fc:	f7ff ffee 	bl	d65dc <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d6600:	4620      	mov	r0, r4
   d6602:	bd10      	pop	{r4, pc}
   d6604:	000dbcf4 	.word	0x000dbcf4

000d6608 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d6608:	b510      	push	{r4, lr}
   d660a:	4604      	mov	r4, r0
}
   d660c:	f7ff fff2 	bl	d65f4 <_ZN25PublishQueueAsyncRetainedD1Ev>
   d6610:	4620      	mov	r0, r4
   d6612:	2138      	movs	r1, #56	; 0x38
   d6614:	f002 f889 	bl	d872a <_ZdlPvj>
   d6618:	4620      	mov	r0, r4
   d661a:	bd10      	pop	{r4, pc}

000d661c <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d661c:	6880      	ldr	r0, [r0, #8]
   d661e:	f000 ba6f 	b.w	d6b00 <os_mutex_lock>

000d6622 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d6622:	6880      	ldr	r0, [r0, #8]
   d6624:	f000 ba74 	b.w	d6b10 <os_mutex_unlock>

000d6628 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d6628:	b510      	push	{r4, lr}
   d662a:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d662c:	6800      	ldr	r0, [r0, #0]
   d662e:	f7ff fff8 	bl	d6622 <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d6632:	4620      	mov	r0, r4
   d6634:	bd10      	pop	{r4, pc}

000d6636 <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d6636:	b513      	push	{r0, r1, r4, lr}
   d6638:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d663a:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d663c:	f7ff ffee 	bl	d661c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6640:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d6642:	88dc      	ldrh	r4, [r3, #6]
   d6644:	b2a4      	uxth	r4, r4
   d6646:	b10c      	cbz	r4, d664c <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d6648:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d664c:	a801      	add	r0, sp, #4
   d664e:	f7ff ffeb 	bl	d6628 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d6652:	4620      	mov	r0, r4
   d6654:	b002      	add	sp, #8
   d6656:	bd10      	pop	{r4, pc}

000d6658 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d6658:	b513      	push	{r0, r1, r4, lr}
   d665a:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d665c:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d665e:	f7ff ffdd 	bl	d661c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d6662:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d6666:	b943      	cbnz	r3, d667a <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6668:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d666a:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d666c:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d666e:	a801      	add	r0, sp, #4
   d6670:	f7ff ffda 	bl	d6628 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d6674:	4620      	mov	r0, r4
   d6676:	b002      	add	sp, #8
   d6678:	bd10      	pop	{r4, pc}
	bool result = false;
   d667a:	2400      	movs	r4, #0
   d667c:	e7f7      	b.n	d666e <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d667e <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d667e:	b513      	push	{r0, r1, r4, lr}
   d6680:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6682:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6684:	f7ff ffca 	bl	d661c <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d6688:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d668a:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d668c:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d668e:	f7ff ffcb 	bl	d6628 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d6692:	4620      	mov	r0, r4
   d6694:	b002      	add	sp, #8
   d6696:	bd10      	pop	{r4, pc}

000d6698 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d6698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d669c:	4699      	mov	r9, r3
   d669e:	b086      	sub	sp, #24
	if (!haveSetup) {
   d66a0:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d66a4:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d66a8:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d66ac:	4604      	mov	r4, r0
   d66ae:	460f      	mov	r7, r1
   d66b0:	4616      	mov	r6, r2
	if (!haveSetup) {
   d66b2:	b913      	cbnz	r3, d66ba <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d66b4:	6803      	ldr	r3, [r0, #0]
   d66b6:	689b      	ldr	r3, [r3, #8]
   d66b8:	4798      	blx	r3
		data = "";
   d66ba:	4b31      	ldr	r3, [pc, #196]	; (d6780 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d66bc:	4638      	mov	r0, r7
		data = "";
   d66be:	2e00      	cmp	r6, #0
   d66c0:	bf08      	it	eq
   d66c2:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d66c4:	f002 ff29 	bl	d951a <strlen>
   d66c8:	4605      	mov	r5, r0
   d66ca:	4630      	mov	r0, r6
   d66cc:	f002 ff25 	bl	d951a <strlen>
   d66d0:	4428      	add	r0, r5
   d66d2:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d66d6:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d66d8:	bf1c      	itt	ne
   d66da:	f025 0503 	bicne.w	r5, r5, #3
   d66de:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d66e0:	4633      	mov	r3, r6
   d66e2:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d66e6:	e9cd 9a00 	strd	r9, sl, [sp]
   d66ea:	4926      	ldr	r1, [pc, #152]	; (d6784 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d66ec:	4826      	ldr	r0, [pc, #152]	; (d6788 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d66ee:	463a      	mov	r2, r7
   d66f0:	f7ff f9a4 	bl	d5a3c <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d66f4:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d66f6:	3b08      	subs	r3, #8
   d66f8:	42ab      	cmp	r3, r5
   d66fa:	d212      	bcs.n	d6722 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d66fc:	2400      	movs	r4, #0
}
   d66fe:	4620      	mov	r0, r4
   d6700:	b006      	add	sp, #24
   d6702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d6706:	88cb      	ldrh	r3, [r1, #6]
   d6708:	2b01      	cmp	r3, #1
   d670a:	d036      	beq.n	d677a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d670c:	a805      	add	r0, sp, #20
   d670e:	f7ff ff8b 	bl	d6628 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d6712:	6823      	ldr	r3, [r4, #0]
   d6714:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d6718:	699b      	ldr	r3, [r3, #24]
   d671a:	4620      	mov	r0, r4
   d671c:	4798      	blx	r3
   d671e:	2800      	cmp	r0, #0
   d6720:	d0ec      	beq.n	d66fc <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d6722:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6724:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d6726:	f7ff ff79 	bl	d661c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d672a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d672c:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d672e:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6730:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d6732:	1ad2      	subs	r2, r2, r3
   d6734:	42aa      	cmp	r2, r5
   d6736:	d3e6      	bcc.n	d6706 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d6738:	ea48 080a 	orr.w	r8, r8, sl
   d673c:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d6740:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d6744:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d6746:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d674a:	4639      	mov	r1, r7
   d674c:	4640      	mov	r0, r8
   d674e:	f002 febf 	bl	d94d0 <strcpy>
				cp += strlen(cp) + 1;
   d6752:	4640      	mov	r0, r8
   d6754:	f002 fee1 	bl	d951a <strlen>
   d6758:	3001      	adds	r0, #1
				strcpy(cp, data);
   d675a:	4631      	mov	r1, r6
   d675c:	4440      	add	r0, r8
   d675e:	f002 feb7 	bl	d94d0 <strcpy>
				nextFree += size;
   d6762:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6764:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d6766:	441d      	add	r5, r3
   d6768:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d676a:	88d3      	ldrh	r3, [r2, #6]
   d676c:	3301      	adds	r3, #1
   d676e:	80d3      	strh	r3, [r2, #6]
				return true;
   d6770:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d6772:	a805      	add	r0, sp, #20
   d6774:	f7ff ff58 	bl	d6628 <_ZN11StMutexLockD1Ev>
   d6778:	e7c1      	b.n	d66fe <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d677a:	2400      	movs	r4, #0
   d677c:	e7f9      	b.n	d6772 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d677e:	bf00      	nop
   d6780:	000dbec0 	.word	0x000dbec0
   d6784:	000dbc1a 	.word	0x000dbc1a
   d6788:	2003e5e0 	.word	0x2003e5e0

000d678c <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d678c:	b508      	push	{r3, lr}
   d678e:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6790:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d6794:	69a3      	ldr	r3, [r4, #24]
   d6796:	b90b      	cbnz	r3, d679c <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d6798:	f001 ffcd 	bl	d8736 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d679c:	69e3      	ldr	r3, [r4, #28]
   d679e:	4621      	mov	r1, r4
   d67a0:	4628      	mov	r0, r5
   d67a2:	4798      	blx	r3
		os_thread_yield();
   d67a4:	f000 f974 	bl	d6a90 <os_thread_yield>
	while(true) {
   d67a8:	e7f4      	b.n	d6794 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d67aa <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d67aa:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d67ac:	f7ff ffee 	bl	d678c <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d67b0 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d67b0:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d67b2:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d67b6:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d67b8:	4628      	mov	r0, r5
   d67ba:	f002 feae 	bl	d951a <strlen>
   d67be:	3001      	adds	r0, #1
   d67c0:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d67c2:	4628      	mov	r0, r5
   d67c4:	f002 fea9 	bl	d951a <strlen>
	size_t offset = start - retainedBuffer;
   d67c8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d67ca:	3001      	adds	r0, #1
   d67cc:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d67ce:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d67d0:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d67d4:	bf1c      	itt	ne
   d67d6:	f1c3 0304 	rsbne	r3, r3, #4
   d67da:	18c0      	addne	r0, r0, r3
}
   d67dc:	bd68      	pop	{r3, r5, r6, pc}

000d67de <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d67de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d67e0:	4604      	mov	r4, r0
   d67e2:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d67e4:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d67e6:	f7ff ff19 	bl	d661c <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d67ea:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d67ec:	88fb      	ldrh	r3, [r7, #6]
   d67ee:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d67f2:	b1e6      	cbz	r6, d682e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d67f4:	2b01      	cmp	r3, #1
   d67f6:	d922      	bls.n	d683e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d67f8:	4629      	mov	r1, r5
   d67fa:	4620      	mov	r0, r4
   d67fc:	f7ff ffd8 	bl	d67b0 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d6800:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d6802:	4629      	mov	r1, r5
   d6804:	4620      	mov	r0, r4
   d6806:	f7ff ffd3 	bl	d67b0 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d680a:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d680c:	443a      	add	r2, r7
	if (after > 0) {
   d680e:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d6810:	4601      	mov	r1, r0
	size_t len = next - start;
   d6812:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d6816:	d002      	beq.n	d681e <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d6818:	4628      	mov	r0, r5
   d681a:	f002 fe09 	bl	d9430 <memmove>
	nextFree -= len;
   d681e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d6820:	1b9b      	subs	r3, r3, r6
   d6822:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d6824:	88fb      	ldrh	r3, [r7, #6]
   d6826:	3b01      	subs	r3, #1
   d6828:	80fb      	strh	r3, [r7, #6]
	return true;
   d682a:	2601      	movs	r6, #1
   d682c:	e001      	b.n	d6832 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d682e:	2b00      	cmp	r3, #0
   d6830:	d1e7      	bne.n	d6802 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d6832:	a801      	add	r0, sp, #4
   d6834:	f7ff fef8 	bl	d6628 <_ZN11StMutexLockD1Ev>
}
   d6838:	4630      	mov	r0, r6
   d683a:	b003      	add	sp, #12
   d683c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d683e:	2600      	movs	r6, #0
   d6840:	e7f7      	b.n	d6832 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d6844 <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d6844:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6848:	460d      	mov	r5, r1
   d684a:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d684c:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d684e:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6850:	f7ff fea8 	bl	d65a4 <_ZN21PublishQueueAsyncBaseC1Ev>
   d6854:	4b15      	ldr	r3, [pc, #84]	; (d68ac <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6856:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d685a:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d685c:	4b14      	ldr	r3, [pc, #80]	; (d68b0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d685e:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6860:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6862:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6864:	4698      	mov	r8, r3
   d6866:	d117      	bne.n	d6898 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d6868:	88ab      	ldrh	r3, [r5, #4]
   d686a:	b29b      	uxth	r3, r3
   d686c:	42b3      	cmp	r3, r6
   d686e:	d113      	bne.n	d6898 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6870:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d6874:	6367      	str	r7, [r4, #52]	; 0x34
   d6876:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d687a:	88eb      	ldrh	r3, [r5, #6]
   d687c:	fa1f f289 	uxth.w	r2, r9
   d6880:	b29b      	uxth	r3, r3
   d6882:	429a      	cmp	r2, r3
   d6884:	d20e      	bcs.n	d68a4 <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d6886:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d6888:	4620      	mov	r0, r4
   d688a:	f7ff ff91 	bl	d67b0 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d688e:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d6890:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d6892:	f109 0901 	add.w	r9, r9, #1
   d6896:	d9f0      	bls.n	d687a <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d6898:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d689a:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d689e:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d68a0:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d68a2:	80eb      	strh	r3, [r5, #6]
}
   d68a4:	4620      	mov	r0, r4
   d68a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d68aa:	bf00      	nop
   d68ac:	000dbcf4 	.word	0x000dbcf4
   d68b0:	d19cab61 	.word	0xd19cab61

000d68b4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d68b4:	b510      	push	{r4, lr}
   d68b6:	e9d1 2300 	ldrd	r2, r3, [r1]
   d68ba:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d68bc:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d68be:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d68c0:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d68c2:	b90a      	cbnz	r2, d68c8 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d68c4:	07d9      	lsls	r1, r3, #31
   d68c6:	d505      	bpl.n	d68d4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d68c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d68cc:	4b0f      	ldr	r3, [pc, #60]	; (d690c <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d68ce:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d68d0:	4b0f      	ldr	r3, [pc, #60]	; (d6910 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d68d2:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68d4:	ab02      	add	r3, sp, #8
   d68d6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d68da:	466a      	mov	r2, sp
   d68dc:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d68e0:	e894 0003 	ldmia.w	r4, {r0, r1}
   d68e4:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d68e8:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68ec:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d68ee:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d68f2:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d68f4:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d68f6:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d68f8:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d68fa:	4618      	mov	r0, r3
   d68fc:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d68fe:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6900:	9105      	str	r1, [sp, #20]
   d6902:	f7fd fd11 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
	}
   d6906:	4620      	mov	r0, r4
   d6908:	b006      	add	sp, #24
   d690a:	bd10      	pop	{r4, pc}
   d690c:	000d64ef 	.word	0x000d64ef
   d6910:	000d64a5 	.word	0x000d64a5

000d6914 <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d6914:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d6916:	4b05      	ldr	r3, [pc, #20]	; (d692c <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d6918:	9300      	str	r3, [sp, #0]
   d691a:	4669      	mov	r1, sp
   d691c:	2300      	movs	r3, #0
   d691e:	3010      	adds	r0, #16
   d6920:	9301      	str	r3, [sp, #4]
   d6922:	f7ff ffc7 	bl	d68b4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6926:	b003      	add	sp, #12
   d6928:	f85d fb04 	ldr.w	pc, [sp], #4
   d692c:	000d695d 	.word	0x000d695d

000d6930 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d6930:	b513      	push	{r0, r1, r4, lr}
   d6932:	4604      	mov	r4, r0
   d6934:	f000 f934 	bl	d6ba0 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d6938:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d693a:	1ac0      	subs	r0, r0, r3
   d693c:	68e3      	ldr	r3, [r4, #12]
   d693e:	4298      	cmp	r0, r3
   d6940:	d308      	bcc.n	d6954 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d6942:	4b05      	ldr	r3, [pc, #20]	; (d6958 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d6944:	9300      	str	r3, [sp, #0]
   d6946:	4669      	mov	r1, sp
   d6948:	2300      	movs	r3, #0
   d694a:	f104 0010 	add.w	r0, r4, #16
   d694e:	9301      	str	r3, [sp, #4]
   d6950:	f7ff ffb0 	bl	d68b4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6954:	b002      	add	sp, #8
   d6956:	bd10      	pop	{r4, pc}
   d6958:	000d695d 	.word	0x000d695d

000d695c <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d695c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d6960:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d6964:	b086      	sub	sp, #24
   d6966:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d6968:	2b00      	cmp	r3, #0
   d696a:	d164      	bne.n	d6a36 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d696c:	f000 fb06 	bl	d6f7c <spark_cloud_flag_connected>
   d6970:	2800      	cmp	r0, #0
   d6972:	d060      	beq.n	d6a36 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d6974:	f000 f914 	bl	d6ba0 <HAL_Timer_Get_Milli_Seconds>
   d6978:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d697a:	1ac0      	subs	r0, r0, r3
   d697c:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d6980:	4298      	cmp	r0, r3
   d6982:	d958      	bls.n	d6a36 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d6984:	6823      	ldr	r3, [r4, #0]
   d6986:	4620      	mov	r0, r4
   d6988:	695b      	ldr	r3, [r3, #20]
   d698a:	4798      	blx	r3
		if (data) {
   d698c:	4605      	mov	r5, r0
   d698e:	2800      	cmp	r0, #0
   d6990:	d051      	beq.n	d6a36 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d6992:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d6996:	2301      	movs	r3, #1
   d6998:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d699c:	4638      	mov	r0, r7
   d699e:	f002 fdbc 	bl	d951a <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d69a2:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d69a6:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d69aa:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d69ac:	682b      	ldr	r3, [r5, #0]
   d69ae:	492b      	ldr	r1, [pc, #172]	; (d6a5c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d69b0:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d69b2:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d69b4:	4633      	mov	r3, r6
   d69b6:	482a      	ldr	r0, [pc, #168]	; (d6a60 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d69b8:	463a      	mov	r2, r7
   d69ba:	f7ff f83f 	bl	d5a3c <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d69be:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d69c0:	f88d 8000 	strb.w	r8, [sp]
   d69c4:	4632      	mov	r2, r6
   d69c6:	4639      	mov	r1, r7
   d69c8:	a802      	add	r0, sp, #8
   d69ca:	f000 fdd9 	bl	d7580 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d69ce:	9d02      	ldr	r5, [sp, #8]
   d69d0:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d69d2:	b91b      	cbnz	r3, d69dc <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d69d4:	2001      	movs	r0, #1
   d69d6:	f000 fbd1 	bl	d717c <delay>
			while(!request.isDone()) {
   d69da:	e7f8      	b.n	d69ce <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d69dc:	2000      	movs	r0, #0
   d69de:	f000 fa6f 	bl	d6ec0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d69e2:	b120      	cbz	r0, d69ee <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d69e4:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d69e6:	b913      	cbnz	r3, d69ee <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d69e8:	f000 fab8 	bl	d6f5c <spark_process>
    }
   d69ec:	e7fa      	b.n	d69e4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d69ee:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d69f0:	2b01      	cmp	r3, #1
   d69f2:	d123      	bne.n	d6a3c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d69f4:	491b      	ldr	r1, [pc, #108]	; (d6a64 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d69f6:	481a      	ldr	r0, [pc, #104]	; (d6a60 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d69f8:	f7ff f820 	bl	d5a3c <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d69fc:	6823      	ldr	r3, [r4, #0]
   d69fe:	2100      	movs	r1, #0
   d6a00:	699b      	ldr	r3, [r3, #24]
   d6a02:	4620      	mov	r0, r4
   d6a04:	4798      	blx	r3
			isSending = false;
   d6a06:	2300      	movs	r3, #0
   d6a08:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d6a0c:	f000 f8c8 	bl	d6ba0 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d6a10:	6260      	str	r0, [r4, #36]	; 0x24
	if (_M_pi != nullptr)
   d6a12:	9c03      	ldr	r4, [sp, #12]
   d6a14:	b17c      	cbz	r4, d6a36 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d6a16:	6863      	ldr	r3, [r4, #4]
   d6a18:	3b01      	subs	r3, #1
   d6a1a:	6063      	str	r3, [r4, #4]
   d6a1c:	b95b      	cbnz	r3, d6a36 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d6a1e:	6823      	ldr	r3, [r4, #0]
   d6a20:	4620      	mov	r0, r4
   d6a22:	689b      	ldr	r3, [r3, #8]
   d6a24:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6a26:	68a3      	ldr	r3, [r4, #8]
   d6a28:	3b01      	subs	r3, #1
   d6a2a:	60a3      	str	r3, [r4, #8]
   d6a2c:	b91b      	cbnz	r3, d6a36 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d6a2e:	6823      	ldr	r3, [r4, #0]
   d6a30:	4620      	mov	r0, r4
   d6a32:	68db      	ldr	r3, [r3, #12]
   d6a34:	4798      	blx	r3
}
   d6a36:	b006      	add	sp, #24
   d6a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d6a3c:	68e2      	ldr	r2, [r4, #12]
   d6a3e:	490a      	ldr	r1, [pc, #40]	; (d6a68 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d6a40:	4807      	ldr	r0, [pc, #28]	; (d6a60 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6a42:	f7fe fffb 	bl	d5a3c <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d6a46:	4b09      	ldr	r3, [pc, #36]	; (d6a6c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d6a48:	9304      	str	r3, [sp, #16]
   d6a4a:	a904      	add	r1, sp, #16
   d6a4c:	2300      	movs	r3, #0
   d6a4e:	f104 0010 	add.w	r0, r4, #16
   d6a52:	9305      	str	r3, [sp, #20]
   d6a54:	f7ff ff2e 	bl	d68b4 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d6a58:	e7d5      	b.n	d6a06 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d6a5a:	bf00      	nop
   d6a5c:	000dbc5b 	.word	0x000dbc5b
   d6a60:	2003e5e0 	.word	0x2003e5e0
   d6a64:	000dbc7c 	.word	0x000dbc7c
   d6a68:	000dbc93 	.word	0x000dbc93
   d6a6c:	000d6931 	.word	0x000d6931

000d6a70 <_GLOBAL__sub_I_pubqLogger>:
   d6a70:	4b01      	ldr	r3, [pc, #4]	; (d6a78 <_GLOBAL__sub_I_pubqLogger+0x8>)
   d6a72:	4a02      	ldr	r2, [pc, #8]	; (d6a7c <_GLOBAL__sub_I_pubqLogger+0xc>)
   d6a74:	601a      	str	r2, [r3, #0]
}
   d6a76:	4770      	bx	lr
   d6a78:	2003e5e0 	.word	0x2003e5e0
   d6a7c:	000dbcba 	.word	0x000dbcba

000d6a80 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d6a80:	b508      	push	{r3, lr}
   d6a82:	4b02      	ldr	r3, [pc, #8]	; (d6a8c <os_thread_create+0xc>)
   d6a84:	681b      	ldr	r3, [r3, #0]
   d6a86:	685b      	ldr	r3, [r3, #4]
   d6a88:	9301      	str	r3, [sp, #4]
   d6a8a:	bd08      	pop	{r3, pc}
   d6a8c:	00030248 	.word	0x00030248

000d6a90 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d6a90:	b508      	push	{r3, lr}
   d6a92:	4b02      	ldr	r3, [pc, #8]	; (d6a9c <os_thread_yield+0xc>)
   d6a94:	681b      	ldr	r3, [r3, #0]
   d6a96:	68db      	ldr	r3, [r3, #12]
   d6a98:	9301      	str	r3, [sp, #4]
   d6a9a:	bd08      	pop	{r3, pc}
   d6a9c:	00030248 	.word	0x00030248

000d6aa0 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d6aa0:	b508      	push	{r3, lr}
   d6aa2:	4b02      	ldr	r3, [pc, #8]	; (d6aac <os_thread_scheduling+0xc>)
   d6aa4:	681b      	ldr	r3, [r3, #0]
   d6aa6:	69db      	ldr	r3, [r3, #28]
   d6aa8:	9301      	str	r3, [sp, #4]
   d6aaa:	bd08      	pop	{r3, pc}
   d6aac:	00030248 	.word	0x00030248

000d6ab0 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d6ab0:	b508      	push	{r3, lr}
   d6ab2:	4b02      	ldr	r3, [pc, #8]	; (d6abc <os_timer_create+0xc>)
   d6ab4:	681b      	ldr	r3, [r3, #0]
   d6ab6:	6a1b      	ldr	r3, [r3, #32]
   d6ab8:	9301      	str	r3, [sp, #4]
   d6aba:	bd08      	pop	{r3, pc}
   d6abc:	00030248 	.word	0x00030248

000d6ac0 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d6ac0:	b508      	push	{r3, lr}
   d6ac2:	4b02      	ldr	r3, [pc, #8]	; (d6acc <os_timer_destroy+0xc>)
   d6ac4:	681b      	ldr	r3, [r3, #0]
   d6ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6ac8:	9301      	str	r3, [sp, #4]
   d6aca:	bd08      	pop	{r3, pc}
   d6acc:	00030248 	.word	0x00030248

000d6ad0 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d6ad0:	b508      	push	{r3, lr}
   d6ad2:	4b02      	ldr	r3, [pc, #8]	; (d6adc <os_timer_get_id+0xc>)
   d6ad4:	681b      	ldr	r3, [r3, #0]
   d6ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6ad8:	9301      	str	r3, [sp, #4]
   d6ada:	bd08      	pop	{r3, pc}
   d6adc:	00030248 	.word	0x00030248

000d6ae0 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d6ae0:	b508      	push	{r3, lr}
   d6ae2:	4b02      	ldr	r3, [pc, #8]	; (d6aec <os_timer_change+0xc>)
   d6ae4:	681b      	ldr	r3, [r3, #0]
   d6ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6ae8:	9301      	str	r3, [sp, #4]
   d6aea:	bd08      	pop	{r3, pc}
   d6aec:	00030248 	.word	0x00030248

000d6af0 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d6af0:	b508      	push	{r3, lr}
   d6af2:	4b02      	ldr	r3, [pc, #8]	; (d6afc <os_mutex_create+0xc>)
   d6af4:	681b      	ldr	r3, [r3, #0]
   d6af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6af8:	9301      	str	r3, [sp, #4]
   d6afa:	bd08      	pop	{r3, pc}
   d6afc:	00030248 	.word	0x00030248

000d6b00 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d6b00:	b508      	push	{r3, lr}
   d6b02:	4b02      	ldr	r3, [pc, #8]	; (d6b0c <os_mutex_lock+0xc>)
   d6b04:	681b      	ldr	r3, [r3, #0]
   d6b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6b08:	9301      	str	r3, [sp, #4]
   d6b0a:	bd08      	pop	{r3, pc}
   d6b0c:	00030248 	.word	0x00030248

000d6b10 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d6b10:	b508      	push	{r3, lr}
   d6b12:	4b02      	ldr	r3, [pc, #8]	; (d6b1c <os_mutex_unlock+0xc>)
   d6b14:	681b      	ldr	r3, [r3, #0]
   d6b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6b18:	9301      	str	r3, [sp, #4]
   d6b1a:	bd08      	pop	{r3, pc}
   d6b1c:	00030248 	.word	0x00030248

000d6b20 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6b20:	b508      	push	{r3, lr}
   d6b22:	4b02      	ldr	r3, [pc, #8]	; (d6b2c <os_mutex_recursive_create+0xc>)
   d6b24:	681b      	ldr	r3, [r3, #0]
   d6b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6b28:	9301      	str	r3, [sp, #4]
   d6b2a:	bd08      	pop	{r3, pc}
   d6b2c:	00030248 	.word	0x00030248

000d6b30 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6b30:	b508      	push	{r3, lr}
   d6b32:	4b02      	ldr	r3, [pc, #8]	; (d6b3c <os_mutex_recursive_destroy+0xc>)
   d6b34:	681b      	ldr	r3, [r3, #0]
   d6b36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6b38:	9301      	str	r3, [sp, #4]
   d6b3a:	bd08      	pop	{r3, pc}
   d6b3c:	00030248 	.word	0x00030248

000d6b40 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d6b40:	b508      	push	{r3, lr}
   d6b42:	4b02      	ldr	r3, [pc, #8]	; (d6b4c <os_thread_exit+0xc>)
   d6b44:	681b      	ldr	r3, [r3, #0]
   d6b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d6b48:	9301      	str	r3, [sp, #4]
   d6b4a:	bd08      	pop	{r3, pc}
   d6b4c:	00030248 	.word	0x00030248

000d6b50 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d6b50:	b508      	push	{r3, lr}
   d6b52:	4b02      	ldr	r3, [pc, #8]	; (d6b5c <os_timer_set_id+0xc>)
   d6b54:	681b      	ldr	r3, [r3, #0]
   d6b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d6b58:	9301      	str	r3, [sp, #4]
   d6b5a:	bd08      	pop	{r3, pc}
   d6b5c:	00030248 	.word	0x00030248

000d6b60 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d6b60:	b508      	push	{r3, lr}
   d6b62:	4b02      	ldr	r3, [pc, #8]	; (d6b6c <HAL_Feature_Set+0xc>)
   d6b64:	681b      	ldr	r3, [r3, #0]
   d6b66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6b68:	9301      	str	r3, [sp, #4]
   d6b6a:	bd08      	pop	{r3, pc}
   d6b6c:	00030234 	.word	0x00030234

000d6b70 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6b70:	b508      	push	{r3, lr}
   d6b72:	4b02      	ldr	r3, [pc, #8]	; (d6b7c <HAL_RNG_GetRandomNumber+0xc>)
   d6b74:	681b      	ldr	r3, [r3, #0]
   d6b76:	685b      	ldr	r3, [r3, #4]
   d6b78:	9301      	str	r3, [sp, #4]
   d6b7a:	bd08      	pop	{r3, pc}
   d6b7c:	00030218 	.word	0x00030218

000d6b80 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d6b80:	b508      	push	{r3, lr}
   d6b82:	4b02      	ldr	r3, [pc, #8]	; (d6b8c <HAL_Delay_Milliseconds+0xc>)
   d6b84:	681b      	ldr	r3, [r3, #0]
   d6b86:	689b      	ldr	r3, [r3, #8]
   d6b88:	9301      	str	r3, [sp, #4]
   d6b8a:	bd08      	pop	{r3, pc}
   d6b8c:	00030218 	.word	0x00030218

000d6b90 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6b90:	b508      	push	{r3, lr}
   d6b92:	4b02      	ldr	r3, [pc, #8]	; (d6b9c <HAL_Delay_Microseconds+0xc>)
   d6b94:	681b      	ldr	r3, [r3, #0]
   d6b96:	68db      	ldr	r3, [r3, #12]
   d6b98:	9301      	str	r3, [sp, #4]
   d6b9a:	bd08      	pop	{r3, pc}
   d6b9c:	00030218 	.word	0x00030218

000d6ba0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6ba0:	b508      	push	{r3, lr}
   d6ba2:	4b02      	ldr	r3, [pc, #8]	; (d6bac <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6ba4:	681b      	ldr	r3, [r3, #0]
   d6ba6:	695b      	ldr	r3, [r3, #20]
   d6ba8:	9301      	str	r3, [sp, #4]
   d6baa:	bd08      	pop	{r3, pc}
   d6bac:	00030218 	.word	0x00030218

000d6bb0 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d6bb0:	b508      	push	{r3, lr}
   d6bb2:	4b02      	ldr	r3, [pc, #8]	; (d6bbc <hal_rtc_time_is_valid+0xc>)
   d6bb4:	681b      	ldr	r3, [r3, #0]
   d6bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6bb8:	9301      	str	r3, [sp, #4]
   d6bba:	bd08      	pop	{r3, pc}
   d6bbc:	00030218 	.word	0x00030218

000d6bc0 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d6bc0:	b508      	push	{r3, lr}
   d6bc2:	4b02      	ldr	r3, [pc, #8]	; (d6bcc <hal_timer_millis+0xc>)
   d6bc4:	681b      	ldr	r3, [r3, #0]
   d6bc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6bc8:	9301      	str	r3, [sp, #4]
   d6bca:	bd08      	pop	{r3, pc}
   d6bcc:	00030218 	.word	0x00030218

000d6bd0 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d6bd0:	b508      	push	{r3, lr}
   d6bd2:	4b02      	ldr	r3, [pc, #8]	; (d6bdc <hal_rtc_get_time+0xc>)
   d6bd4:	681b      	ldr	r3, [r3, #0]
   d6bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6bd8:	9301      	str	r3, [sp, #4]
   d6bda:	bd08      	pop	{r3, pc}
   d6bdc:	00030218 	.word	0x00030218

000d6be0 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d6be0:	b508      	push	{r3, lr}
   d6be2:	4b02      	ldr	r3, [pc, #8]	; (d6bec <hal_rtc_set_time+0xc>)
   d6be4:	681b      	ldr	r3, [r3, #0]
   d6be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d6be8:	9301      	str	r3, [sp, #4]
   d6bea:	bd08      	pop	{r3, pc}
   d6bec:	00030218 	.word	0x00030218

000d6bf0 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6bf0:	b508      	push	{r3, lr}
   d6bf2:	4b02      	ldr	r3, [pc, #8]	; (d6bfc <HAL_Validate_Pin_Function+0xc>)
   d6bf4:	681b      	ldr	r3, [r3, #0]
   d6bf6:	685b      	ldr	r3, [r3, #4]
   d6bf8:	9301      	str	r3, [sp, #4]
   d6bfa:	bd08      	pop	{r3, pc}
   d6bfc:	0003022c 	.word	0x0003022c

000d6c00 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6c00:	b508      	push	{r3, lr}
   d6c02:	4b02      	ldr	r3, [pc, #8]	; (d6c0c <HAL_Pin_Mode+0xc>)
   d6c04:	681b      	ldr	r3, [r3, #0]
   d6c06:	689b      	ldr	r3, [r3, #8]
   d6c08:	9301      	str	r3, [sp, #4]
   d6c0a:	bd08      	pop	{r3, pc}
   d6c0c:	0003022c 	.word	0x0003022c

000d6c10 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6c10:	b508      	push	{r3, lr}
   d6c12:	4b02      	ldr	r3, [pc, #8]	; (d6c1c <HAL_Get_Pin_Mode+0xc>)
   d6c14:	681b      	ldr	r3, [r3, #0]
   d6c16:	68db      	ldr	r3, [r3, #12]
   d6c18:	9301      	str	r3, [sp, #4]
   d6c1a:	bd08      	pop	{r3, pc}
   d6c1c:	0003022c 	.word	0x0003022c

000d6c20 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6c20:	b508      	push	{r3, lr}
   d6c22:	4b02      	ldr	r3, [pc, #8]	; (d6c2c <HAL_GPIO_Write+0xc>)
   d6c24:	681b      	ldr	r3, [r3, #0]
   d6c26:	691b      	ldr	r3, [r3, #16]
   d6c28:	9301      	str	r3, [sp, #4]
   d6c2a:	bd08      	pop	{r3, pc}
   d6c2c:	0003022c 	.word	0x0003022c

000d6c30 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d6c30:	b508      	push	{r3, lr}
   d6c32:	4b02      	ldr	r3, [pc, #8]	; (d6c3c <HAL_Interrupts_Attach+0xc>)
   d6c34:	681b      	ldr	r3, [r3, #0]
   d6c36:	699b      	ldr	r3, [r3, #24]
   d6c38:	9301      	str	r3, [sp, #4]
   d6c3a:	bd08      	pop	{r3, pc}
   d6c3c:	0003022c 	.word	0x0003022c

000d6c40 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d6c40:	b508      	push	{r3, lr}
   d6c42:	4b02      	ldr	r3, [pc, #8]	; (d6c4c <HAL_Interrupts_Detach+0xc>)
   d6c44:	681b      	ldr	r3, [r3, #0]
   d6c46:	69db      	ldr	r3, [r3, #28]
   d6c48:	9301      	str	r3, [sp, #4]
   d6c4a:	bd08      	pop	{r3, pc}
   d6c4c:	0003022c 	.word	0x0003022c

000d6c50 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d6c50:	b508      	push	{r3, lr}
   d6c52:	4b02      	ldr	r3, [pc, #8]	; (d6c5c <hal_adc_read+0xc>)
   d6c54:	681b      	ldr	r3, [r3, #0]
   d6c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6c58:	9301      	str	r3, [sp, #4]
   d6c5a:	bd08      	pop	{r3, pc}
   d6c5c:	0003022c 	.word	0x0003022c

000d6c60 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d6c60:	b508      	push	{r3, lr}
   d6c62:	4b02      	ldr	r3, [pc, #8]	; (d6c6c <hal_i2c_begin+0xc>)
   d6c64:	681b      	ldr	r3, [r3, #0]
   d6c66:	68db      	ldr	r3, [r3, #12]
   d6c68:	9301      	str	r3, [sp, #4]
   d6c6a:	bd08      	pop	{r3, pc}
   d6c6c:	00030228 	.word	0x00030228

000d6c70 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d6c70:	b508      	push	{r3, lr}
   d6c72:	4b02      	ldr	r3, [pc, #8]	; (d6c7c <hal_i2c_begin_transmission+0xc>)
   d6c74:	681b      	ldr	r3, [r3, #0]
   d6c76:	699b      	ldr	r3, [r3, #24]
   d6c78:	9301      	str	r3, [sp, #4]
   d6c7a:	bd08      	pop	{r3, pc}
   d6c7c:	00030228 	.word	0x00030228

000d6c80 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6c80:	b508      	push	{r3, lr}
   d6c82:	4b02      	ldr	r3, [pc, #8]	; (d6c8c <hal_i2c_end_transmission+0xc>)
   d6c84:	681b      	ldr	r3, [r3, #0]
   d6c86:	69db      	ldr	r3, [r3, #28]
   d6c88:	9301      	str	r3, [sp, #4]
   d6c8a:	bd08      	pop	{r3, pc}
   d6c8c:	00030228 	.word	0x00030228

000d6c90 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6c90:	b508      	push	{r3, lr}
   d6c92:	4b02      	ldr	r3, [pc, #8]	; (d6c9c <hal_i2c_write+0xc>)
   d6c94:	681b      	ldr	r3, [r3, #0]
   d6c96:	6a1b      	ldr	r3, [r3, #32]
   d6c98:	9301      	str	r3, [sp, #4]
   d6c9a:	bd08      	pop	{r3, pc}
   d6c9c:	00030228 	.word	0x00030228

000d6ca0 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6ca0:	b508      	push	{r3, lr}
   d6ca2:	4b02      	ldr	r3, [pc, #8]	; (d6cac <hal_i2c_available+0xc>)
   d6ca4:	681b      	ldr	r3, [r3, #0]
   d6ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6ca8:	9301      	str	r3, [sp, #4]
   d6caa:	bd08      	pop	{r3, pc}
   d6cac:	00030228 	.word	0x00030228

000d6cb0 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6cb0:	b508      	push	{r3, lr}
   d6cb2:	4b02      	ldr	r3, [pc, #8]	; (d6cbc <hal_i2c_read+0xc>)
   d6cb4:	681b      	ldr	r3, [r3, #0]
   d6cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6cb8:	9301      	str	r3, [sp, #4]
   d6cba:	bd08      	pop	{r3, pc}
   d6cbc:	00030228 	.word	0x00030228

000d6cc0 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d6cc0:	b508      	push	{r3, lr}
   d6cc2:	4b02      	ldr	r3, [pc, #8]	; (d6ccc <hal_i2c_peek+0xc>)
   d6cc4:	681b      	ldr	r3, [r3, #0]
   d6cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6cc8:	9301      	str	r3, [sp, #4]
   d6cca:	bd08      	pop	{r3, pc}
   d6ccc:	00030228 	.word	0x00030228

000d6cd0 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d6cd0:	b508      	push	{r3, lr}
   d6cd2:	4b02      	ldr	r3, [pc, #8]	; (d6cdc <hal_i2c_flush+0xc>)
   d6cd4:	681b      	ldr	r3, [r3, #0]
   d6cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6cd8:	9301      	str	r3, [sp, #4]
   d6cda:	bd08      	pop	{r3, pc}
   d6cdc:	00030228 	.word	0x00030228

000d6ce0 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d6ce0:	b508      	push	{r3, lr}
   d6ce2:	4b02      	ldr	r3, [pc, #8]	; (d6cec <hal_i2c_is_enabled+0xc>)
   d6ce4:	681b      	ldr	r3, [r3, #0]
   d6ce6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6ce8:	9301      	str	r3, [sp, #4]
   d6cea:	bd08      	pop	{r3, pc}
   d6cec:	00030228 	.word	0x00030228

000d6cf0 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d6cf0:	b508      	push	{r3, lr}
   d6cf2:	4b02      	ldr	r3, [pc, #8]	; (d6cfc <hal_i2c_init+0xc>)
   d6cf4:	681b      	ldr	r3, [r3, #0]
   d6cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6cf8:	9301      	str	r3, [sp, #4]
   d6cfa:	bd08      	pop	{r3, pc}
   d6cfc:	00030228 	.word	0x00030228

000d6d00 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d6d00:	b508      	push	{r3, lr}
   d6d02:	4b02      	ldr	r3, [pc, #8]	; (d6d0c <hal_i2c_lock+0xc>)
   d6d04:	681b      	ldr	r3, [r3, #0]
   d6d06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6d08:	9301      	str	r3, [sp, #4]
   d6d0a:	bd08      	pop	{r3, pc}
   d6d0c:	00030228 	.word	0x00030228

000d6d10 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d6d10:	b508      	push	{r3, lr}
   d6d12:	4b02      	ldr	r3, [pc, #8]	; (d6d1c <hal_i2c_unlock+0xc>)
   d6d14:	681b      	ldr	r3, [r3, #0]
   d6d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6d18:	9301      	str	r3, [sp, #4]
   d6d1a:	bd08      	pop	{r3, pc}
   d6d1c:	00030228 	.word	0x00030228

000d6d20 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d6d20:	b508      	push	{r3, lr}
   d6d22:	4b02      	ldr	r3, [pc, #8]	; (d6d2c <hal_i2c_request_ex+0xc>)
   d6d24:	681b      	ldr	r3, [r3, #0]
   d6d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6d28:	9301      	str	r3, [sp, #4]
   d6d2a:	bd08      	pop	{r3, pc}
   d6d2c:	00030228 	.word	0x00030228

000d6d30 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6d30:	b508      	push	{r3, lr}
   d6d32:	4b02      	ldr	r3, [pc, #8]	; (d6d3c <inet_inet_ntop+0xc>)
   d6d34:	681b      	ldr	r3, [r3, #0]
   d6d36:	695b      	ldr	r3, [r3, #20]
   d6d38:	9301      	str	r3, [sp, #4]
   d6d3a:	bd08      	pop	{r3, pc}
   d6d3c:	00030264 	.word	0x00030264

000d6d40 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6d40:	b508      	push	{r3, lr}
   d6d42:	4b02      	ldr	r3, [pc, #8]	; (d6d4c <netdb_freeaddrinfo+0xc>)
   d6d44:	681b      	ldr	r3, [r3, #0]
   d6d46:	689b      	ldr	r3, [r3, #8]
   d6d48:	9301      	str	r3, [sp, #4]
   d6d4a:	bd08      	pop	{r3, pc}
   d6d4c:	00030268 	.word	0x00030268

000d6d50 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6d50:	b508      	push	{r3, lr}
   d6d52:	4b02      	ldr	r3, [pc, #8]	; (d6d5c <netdb_getaddrinfo+0xc>)
   d6d54:	681b      	ldr	r3, [r3, #0]
   d6d56:	68db      	ldr	r3, [r3, #12]
   d6d58:	9301      	str	r3, [sp, #4]
   d6d5a:	bd08      	pop	{r3, pc}
   d6d5c:	00030268 	.word	0x00030268

000d6d60 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6d60:	b508      	push	{r3, lr}
   d6d62:	4b02      	ldr	r3, [pc, #8]	; (d6d6c <hal_spi_init+0xc>)
   d6d64:	681b      	ldr	r3, [r3, #0]
   d6d66:	69db      	ldr	r3, [r3, #28]
   d6d68:	9301      	str	r3, [sp, #4]
   d6d6a:	bd08      	pop	{r3, pc}
   d6d6c:	00030230 	.word	0x00030230

000d6d70 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6d70:	b508      	push	{r3, lr}
   d6d72:	4b02      	ldr	r3, [pc, #8]	; (d6d7c <hal_spi_is_enabled+0xc>)
   d6d74:	681b      	ldr	r3, [r3, #0]
   d6d76:	6a1b      	ldr	r3, [r3, #32]
   d6d78:	9301      	str	r3, [sp, #4]
   d6d7a:	bd08      	pop	{r3, pc}
   d6d7c:	00030230 	.word	0x00030230

000d6d80 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6d80:	b508      	push	{r3, lr}
   d6d82:	4b02      	ldr	r3, [pc, #8]	; (d6d8c <hal_usart_init+0xc>)
   d6d84:	681b      	ldr	r3, [r3, #0]
   d6d86:	681b      	ldr	r3, [r3, #0]
   d6d88:	9301      	str	r3, [sp, #4]
   d6d8a:	bd08      	pop	{r3, pc}
   d6d8c:	0003023c 	.word	0x0003023c

000d6d90 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6d90:	b508      	push	{r3, lr}
   d6d92:	4b02      	ldr	r3, [pc, #8]	; (d6d9c <hal_usart_write+0xc>)
   d6d94:	681b      	ldr	r3, [r3, #0]
   d6d96:	68db      	ldr	r3, [r3, #12]
   d6d98:	9301      	str	r3, [sp, #4]
   d6d9a:	bd08      	pop	{r3, pc}
   d6d9c:	0003023c 	.word	0x0003023c

000d6da0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6da0:	b508      	push	{r3, lr}
   d6da2:	4b02      	ldr	r3, [pc, #8]	; (d6dac <hal_usart_available+0xc>)
   d6da4:	681b      	ldr	r3, [r3, #0]
   d6da6:	691b      	ldr	r3, [r3, #16]
   d6da8:	9301      	str	r3, [sp, #4]
   d6daa:	bd08      	pop	{r3, pc}
   d6dac:	0003023c 	.word	0x0003023c

000d6db0 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6db0:	b508      	push	{r3, lr}
   d6db2:	4b02      	ldr	r3, [pc, #8]	; (d6dbc <hal_usart_read+0xc>)
   d6db4:	681b      	ldr	r3, [r3, #0]
   d6db6:	695b      	ldr	r3, [r3, #20]
   d6db8:	9301      	str	r3, [sp, #4]
   d6dba:	bd08      	pop	{r3, pc}
   d6dbc:	0003023c 	.word	0x0003023c

000d6dc0 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d6dc0:	b508      	push	{r3, lr}
   d6dc2:	4b02      	ldr	r3, [pc, #8]	; (d6dcc <hal_usart_peek+0xc>)
   d6dc4:	681b      	ldr	r3, [r3, #0]
   d6dc6:	699b      	ldr	r3, [r3, #24]
   d6dc8:	9301      	str	r3, [sp, #4]
   d6dca:	bd08      	pop	{r3, pc}
   d6dcc:	0003023c 	.word	0x0003023c

000d6dd0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d6dd0:	b508      	push	{r3, lr}
   d6dd2:	4b02      	ldr	r3, [pc, #8]	; (d6ddc <hal_usart_flush+0xc>)
   d6dd4:	681b      	ldr	r3, [r3, #0]
   d6dd6:	69db      	ldr	r3, [r3, #28]
   d6dd8:	9301      	str	r3, [sp, #4]
   d6dda:	bd08      	pop	{r3, pc}
   d6ddc:	0003023c 	.word	0x0003023c

000d6de0 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d6de0:	b508      	push	{r3, lr}
   d6de2:	4b02      	ldr	r3, [pc, #8]	; (d6dec <hal_usart_is_enabled+0xc>)
   d6de4:	681b      	ldr	r3, [r3, #0]
   d6de6:	6a1b      	ldr	r3, [r3, #32]
   d6de8:	9301      	str	r3, [sp, #4]
   d6dea:	bd08      	pop	{r3, pc}
   d6dec:	0003023c 	.word	0x0003023c

000d6df0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d6df0:	b508      	push	{r3, lr}
   d6df2:	4b02      	ldr	r3, [pc, #8]	; (d6dfc <hal_usart_available_data_for_write+0xc>)
   d6df4:	681b      	ldr	r3, [r3, #0]
   d6df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6df8:	9301      	str	r3, [sp, #4]
   d6dfa:	bd08      	pop	{r3, pc}
   d6dfc:	0003023c 	.word	0x0003023c

000d6e00 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6e00:	b508      	push	{r3, lr}
   d6e02:	4b02      	ldr	r3, [pc, #8]	; (d6e0c <HAL_USB_USART_Init+0xc>)
   d6e04:	681b      	ldr	r3, [r3, #0]
   d6e06:	681b      	ldr	r3, [r3, #0]
   d6e08:	9301      	str	r3, [sp, #4]
   d6e0a:	bd08      	pop	{r3, pc}
   d6e0c:	0003024c 	.word	0x0003024c

000d6e10 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6e10:	b508      	push	{r3, lr}
   d6e12:	4b02      	ldr	r3, [pc, #8]	; (d6e1c <HAL_USB_USART_Available_Data+0xc>)
   d6e14:	681b      	ldr	r3, [r3, #0]
   d6e16:	691b      	ldr	r3, [r3, #16]
   d6e18:	9301      	str	r3, [sp, #4]
   d6e1a:	bd08      	pop	{r3, pc}
   d6e1c:	0003024c 	.word	0x0003024c

000d6e20 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6e20:	b508      	push	{r3, lr}
   d6e22:	4b02      	ldr	r3, [pc, #8]	; (d6e2c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6e24:	681b      	ldr	r3, [r3, #0]
   d6e26:	695b      	ldr	r3, [r3, #20]
   d6e28:	9301      	str	r3, [sp, #4]
   d6e2a:	bd08      	pop	{r3, pc}
   d6e2c:	0003024c 	.word	0x0003024c

000d6e30 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6e30:	b508      	push	{r3, lr}
   d6e32:	4b02      	ldr	r3, [pc, #8]	; (d6e3c <HAL_USB_USART_Receive_Data+0xc>)
   d6e34:	681b      	ldr	r3, [r3, #0]
   d6e36:	699b      	ldr	r3, [r3, #24]
   d6e38:	9301      	str	r3, [sp, #4]
   d6e3a:	bd08      	pop	{r3, pc}
   d6e3c:	0003024c 	.word	0x0003024c

000d6e40 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6e40:	b508      	push	{r3, lr}
   d6e42:	4b02      	ldr	r3, [pc, #8]	; (d6e4c <HAL_USB_USART_Send_Data+0xc>)
   d6e44:	681b      	ldr	r3, [r3, #0]
   d6e46:	69db      	ldr	r3, [r3, #28]
   d6e48:	9301      	str	r3, [sp, #4]
   d6e4a:	bd08      	pop	{r3, pc}
   d6e4c:	0003024c 	.word	0x0003024c

000d6e50 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6e50:	b508      	push	{r3, lr}
   d6e52:	4b02      	ldr	r3, [pc, #8]	; (d6e5c <HAL_USB_USART_Flush_Data+0xc>)
   d6e54:	681b      	ldr	r3, [r3, #0]
   d6e56:	6a1b      	ldr	r3, [r3, #32]
   d6e58:	9301      	str	r3, [sp, #4]
   d6e5a:	bd08      	pop	{r3, pc}
   d6e5c:	0003024c 	.word	0x0003024c

000d6e60 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6e60:	b508      	push	{r3, lr}
   d6e62:	4b02      	ldr	r3, [pc, #8]	; (d6e6c <panic_+0xc>)
   d6e64:	681b      	ldr	r3, [r3, #0]
   d6e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6e68:	9301      	str	r3, [sp, #4]
   d6e6a:	bd08      	pop	{r3, pc}
   d6e6c:	00030260 	.word	0x00030260

000d6e70 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d6e70:	b508      	push	{r3, lr}
   d6e72:	4b02      	ldr	r3, [pc, #8]	; (d6e7c <log_message_v+0xc>)
   d6e74:	681b      	ldr	r3, [r3, #0]
   d6e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6e78:	9301      	str	r3, [sp, #4]
   d6e7a:	bd08      	pop	{r3, pc}
   d6e7c:	00030260 	.word	0x00030260

000d6e80 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6e80:	b508      	push	{r3, lr}
   d6e82:	4b02      	ldr	r3, [pc, #8]	; (d6e8c <system_mode+0xc>)
   d6e84:	681b      	ldr	r3, [r3, #0]
   d6e86:	681b      	ldr	r3, [r3, #0]
   d6e88:	9301      	str	r3, [sp, #4]
   d6e8a:	bd08      	pop	{r3, pc}
   d6e8c:	00030220 	.word	0x00030220

000d6e90 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6e90:	b508      	push	{r3, lr}
   d6e92:	4b02      	ldr	r3, [pc, #8]	; (d6e9c <set_system_mode+0xc>)
   d6e94:	681b      	ldr	r3, [r3, #0]
   d6e96:	685b      	ldr	r3, [r3, #4]
   d6e98:	9301      	str	r3, [sp, #4]
   d6e9a:	bd08      	pop	{r3, pc}
   d6e9c:	00030220 	.word	0x00030220

000d6ea0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6ea0:	b508      	push	{r3, lr}
   d6ea2:	4b02      	ldr	r3, [pc, #8]	; (d6eac <system_delay_ms+0xc>)
   d6ea4:	681b      	ldr	r3, [r3, #0]
   d6ea6:	695b      	ldr	r3, [r3, #20]
   d6ea8:	9301      	str	r3, [sp, #4]
   d6eaa:	bd08      	pop	{r3, pc}
   d6eac:	00030220 	.word	0x00030220

000d6eb0 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6eb0:	b508      	push	{r3, lr}
   d6eb2:	4b02      	ldr	r3, [pc, #8]	; (d6ebc <system_thread_set_state+0xc>)
   d6eb4:	681b      	ldr	r3, [r3, #0]
   d6eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6eb8:	9301      	str	r3, [sp, #4]
   d6eba:	bd08      	pop	{r3, pc}
   d6ebc:	00030220 	.word	0x00030220

000d6ec0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6ec0:	b508      	push	{r3, lr}
   d6ec2:	4b02      	ldr	r3, [pc, #8]	; (d6ecc <application_thread_current+0xc>)
   d6ec4:	681b      	ldr	r3, [r3, #0]
   d6ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6ec8:	9301      	str	r3, [sp, #4]
   d6eca:	bd08      	pop	{r3, pc}
   d6ecc:	00030220 	.word	0x00030220

000d6ed0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6ed0:	b508      	push	{r3, lr}
   d6ed2:	4b02      	ldr	r3, [pc, #8]	; (d6edc <application_thread_invoke+0xc>)
   d6ed4:	681b      	ldr	r3, [r3, #0]
   d6ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6ed8:	9301      	str	r3, [sp, #4]
   d6eda:	bd08      	pop	{r3, pc}
   d6edc:	00030220 	.word	0x00030220

000d6ee0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6ee0:	b508      	push	{r3, lr}
   d6ee2:	4b02      	ldr	r3, [pc, #8]	; (d6eec <system_thread_get_state+0xc>)
   d6ee4:	681b      	ldr	r3, [r3, #0]
   d6ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6ee8:	9301      	str	r3, [sp, #4]
   d6eea:	bd08      	pop	{r3, pc}
   d6eec:	00030220 	.word	0x00030220

000d6ef0 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d6ef0:	b508      	push	{r3, lr}
   d6ef2:	4b02      	ldr	r3, [pc, #8]	; (d6efc <system_notify_time_changed+0xc>)
   d6ef4:	681b      	ldr	r3, [r3, #0]
   d6ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6ef8:	9301      	str	r3, [sp, #4]
   d6efa:	bd08      	pop	{r3, pc}
   d6efc:	00030220 	.word	0x00030220

000d6f00 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6f00:	b508      	push	{r3, lr}
   d6f02:	4b03      	ldr	r3, [pc, #12]	; (d6f10 <system_ctrl_set_app_request_handler+0x10>)
   d6f04:	681b      	ldr	r3, [r3, #0]
   d6f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6f0a:	9301      	str	r3, [sp, #4]
   d6f0c:	bd08      	pop	{r3, pc}
   d6f0e:	0000      	.short	0x0000
   d6f10:	00030220 	.word	0x00030220

000d6f14 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6f14:	b508      	push	{r3, lr}
   d6f16:	4b03      	ldr	r3, [pc, #12]	; (d6f24 <system_ctrl_set_result+0x10>)
   d6f18:	681b      	ldr	r3, [r3, #0]
   d6f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6f1e:	9301      	str	r3, [sp, #4]
   d6f20:	bd08      	pop	{r3, pc}
   d6f22:	0000      	.short	0x0000
   d6f24:	00030220 	.word	0x00030220

000d6f28 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d6f28:	b508      	push	{r3, lr}
   d6f2a:	4b03      	ldr	r3, [pc, #12]	; (d6f38 <system_reset+0x10>)
   d6f2c:	681b      	ldr	r3, [r3, #0]
   d6f2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d6f32:	9301      	str	r3, [sp, #4]
   d6f34:	bd08      	pop	{r3, pc}
   d6f36:	0000      	.short	0x0000
   d6f38:	00030220 	.word	0x00030220

000d6f3c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d6f3c:	b508      	push	{r3, lr}
   d6f3e:	4b02      	ldr	r3, [pc, #8]	; (d6f48 <spark_variable+0xc>)
   d6f40:	681b      	ldr	r3, [r3, #0]
   d6f42:	681b      	ldr	r3, [r3, #0]
   d6f44:	9301      	str	r3, [sp, #4]
   d6f46:	bd08      	pop	{r3, pc}
   d6f48:	00030244 	.word	0x00030244

000d6f4c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d6f4c:	b508      	push	{r3, lr}
   d6f4e:	4b02      	ldr	r3, [pc, #8]	; (d6f58 <spark_function+0xc>)
   d6f50:	681b      	ldr	r3, [r3, #0]
   d6f52:	685b      	ldr	r3, [r3, #4]
   d6f54:	9301      	str	r3, [sp, #4]
   d6f56:	bd08      	pop	{r3, pc}
   d6f58:	00030244 	.word	0x00030244

000d6f5c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6f5c:	b508      	push	{r3, lr}
   d6f5e:	4b02      	ldr	r3, [pc, #8]	; (d6f68 <spark_process+0xc>)
   d6f60:	681b      	ldr	r3, [r3, #0]
   d6f62:	689b      	ldr	r3, [r3, #8]
   d6f64:	9301      	str	r3, [sp, #4]
   d6f66:	bd08      	pop	{r3, pc}
   d6f68:	00030244 	.word	0x00030244

000d6f6c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d6f6c:	b508      	push	{r3, lr}
   d6f6e:	4b02      	ldr	r3, [pc, #8]	; (d6f78 <spark_cloud_flag_connect+0xc>)
   d6f70:	681b      	ldr	r3, [r3, #0]
   d6f72:	68db      	ldr	r3, [r3, #12]
   d6f74:	9301      	str	r3, [sp, #4]
   d6f76:	bd08      	pop	{r3, pc}
   d6f78:	00030244 	.word	0x00030244

000d6f7c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6f7c:	b508      	push	{r3, lr}
   d6f7e:	4b02      	ldr	r3, [pc, #8]	; (d6f88 <spark_cloud_flag_connected+0xc>)
   d6f80:	681b      	ldr	r3, [r3, #0]
   d6f82:	695b      	ldr	r3, [r3, #20]
   d6f84:	9301      	str	r3, [sp, #4]
   d6f86:	bd08      	pop	{r3, pc}
   d6f88:	00030244 	.word	0x00030244

000d6f8c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d6f8c:	b508      	push	{r3, lr}
   d6f8e:	4b02      	ldr	r3, [pc, #8]	; (d6f98 <spark_deviceID+0xc>)
   d6f90:	681b      	ldr	r3, [r3, #0]
   d6f92:	69db      	ldr	r3, [r3, #28]
   d6f94:	9301      	str	r3, [sp, #4]
   d6f96:	bd08      	pop	{r3, pc}
   d6f98:	00030244 	.word	0x00030244

000d6f9c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6f9c:	b508      	push	{r3, lr}
   d6f9e:	4b02      	ldr	r3, [pc, #8]	; (d6fa8 <spark_send_event+0xc>)
   d6fa0:	681b      	ldr	r3, [r3, #0]
   d6fa2:	6a1b      	ldr	r3, [r3, #32]
   d6fa4:	9301      	str	r3, [sp, #4]
   d6fa6:	bd08      	pop	{r3, pc}
   d6fa8:	00030244 	.word	0x00030244

000d6fac <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d6fac:	b508      	push	{r3, lr}
   d6fae:	4b02      	ldr	r3, [pc, #8]	; (d6fb8 <spark_subscribe+0xc>)
   d6fb0:	681b      	ldr	r3, [r3, #0]
   d6fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6fb4:	9301      	str	r3, [sp, #4]
   d6fb6:	bd08      	pop	{r3, pc}
   d6fb8:	00030244 	.word	0x00030244

000d6fbc <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d6fbc:	b508      	push	{r3, lr}
   d6fbe:	4b02      	ldr	r3, [pc, #8]	; (d6fc8 <spark_sync_time+0xc>)
   d6fc0:	681b      	ldr	r3, [r3, #0]
   d6fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6fc4:	9301      	str	r3, [sp, #4]
   d6fc6:	bd08      	pop	{r3, pc}
   d6fc8:	00030244 	.word	0x00030244

000d6fcc <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6fcc:	b508      	push	{r3, lr}
   d6fce:	4b02      	ldr	r3, [pc, #8]	; (d6fd8 <spark_sync_time_pending+0xc>)
   d6fd0:	681b      	ldr	r3, [r3, #0]
   d6fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6fd4:	9301      	str	r3, [sp, #4]
   d6fd6:	bd08      	pop	{r3, pc}
   d6fd8:	00030244 	.word	0x00030244

000d6fdc <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d6fdc:	b508      	push	{r3, lr}
   d6fde:	4b02      	ldr	r3, [pc, #8]	; (d6fe8 <spark_sync_time_last+0xc>)
   d6fe0:	681b      	ldr	r3, [r3, #0]
   d6fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6fe4:	9301      	str	r3, [sp, #4]
   d6fe6:	bd08      	pop	{r3, pc}
   d6fe8:	00030244 	.word	0x00030244

000d6fec <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d6fec:	b508      	push	{r3, lr}
   d6fee:	4b02      	ldr	r3, [pc, #8]	; (d6ff8 <spark_set_connection_property+0xc>)
   d6ff0:	681b      	ldr	r3, [r3, #0]
   d6ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6ff4:	9301      	str	r3, [sp, #4]
   d6ff6:	bd08      	pop	{r3, pc}
   d6ff8:	00030244 	.word	0x00030244

000d6ffc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6ffc:	b508      	push	{r3, lr}
   d6ffe:	4b02      	ldr	r3, [pc, #8]	; (d7008 <spark_set_random_seed_from_cloud_handler+0xc>)
   d7000:	681b      	ldr	r3, [r3, #0]
   d7002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7004:	9301      	str	r3, [sp, #4]
   d7006:	bd08      	pop	{r3, pc}
   d7008:	00030244 	.word	0x00030244

000d700c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d700c:	b508      	push	{r3, lr}
   d700e:	4b02      	ldr	r3, [pc, #8]	; (d7018 <network_connect+0xc>)
   d7010:	681b      	ldr	r3, [r3, #0]
   d7012:	685b      	ldr	r3, [r3, #4]
   d7014:	9301      	str	r3, [sp, #4]
   d7016:	bd08      	pop	{r3, pc}
   d7018:	00030240 	.word	0x00030240

000d701c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d701c:	b508      	push	{r3, lr}
   d701e:	4b02      	ldr	r3, [pc, #8]	; (d7028 <network_connecting+0xc>)
   d7020:	681b      	ldr	r3, [r3, #0]
   d7022:	689b      	ldr	r3, [r3, #8]
   d7024:	9301      	str	r3, [sp, #4]
   d7026:	bd08      	pop	{r3, pc}
   d7028:	00030240 	.word	0x00030240

000d702c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d702c:	b508      	push	{r3, lr}
   d702e:	4b02      	ldr	r3, [pc, #8]	; (d7038 <network_disconnect+0xc>)
   d7030:	681b      	ldr	r3, [r3, #0]
   d7032:	68db      	ldr	r3, [r3, #12]
   d7034:	9301      	str	r3, [sp, #4]
   d7036:	bd08      	pop	{r3, pc}
   d7038:	00030240 	.word	0x00030240

000d703c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d703c:	b508      	push	{r3, lr}
   d703e:	4b02      	ldr	r3, [pc, #8]	; (d7048 <network_ready+0xc>)
   d7040:	681b      	ldr	r3, [r3, #0]
   d7042:	691b      	ldr	r3, [r3, #16]
   d7044:	9301      	str	r3, [sp, #4]
   d7046:	bd08      	pop	{r3, pc}
   d7048:	00030240 	.word	0x00030240

000d704c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d704c:	b508      	push	{r3, lr}
   d704e:	4b02      	ldr	r3, [pc, #8]	; (d7058 <network_on+0xc>)
   d7050:	681b      	ldr	r3, [r3, #0]
   d7052:	695b      	ldr	r3, [r3, #20]
   d7054:	9301      	str	r3, [sp, #4]
   d7056:	bd08      	pop	{r3, pc}
   d7058:	00030240 	.word	0x00030240

000d705c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d705c:	b508      	push	{r3, lr}
   d705e:	4b02      	ldr	r3, [pc, #8]	; (d7068 <network_off+0xc>)
   d7060:	681b      	ldr	r3, [r3, #0]
   d7062:	699b      	ldr	r3, [r3, #24]
   d7064:	9301      	str	r3, [sp, #4]
   d7066:	bd08      	pop	{r3, pc}
   d7068:	00030240 	.word	0x00030240

000d706c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d706c:	b508      	push	{r3, lr}
   d706e:	4b02      	ldr	r3, [pc, #8]	; (d7078 <network_listen+0xc>)
   d7070:	681b      	ldr	r3, [r3, #0]
   d7072:	69db      	ldr	r3, [r3, #28]
   d7074:	9301      	str	r3, [sp, #4]
   d7076:	bd08      	pop	{r3, pc}
   d7078:	00030240 	.word	0x00030240

000d707c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d707c:	b508      	push	{r3, lr}
   d707e:	4b02      	ldr	r3, [pc, #8]	; (d7088 <network_listening+0xc>)
   d7080:	681b      	ldr	r3, [r3, #0]
   d7082:	6a1b      	ldr	r3, [r3, #32]
   d7084:	9301      	str	r3, [sp, #4]
   d7086:	bd08      	pop	{r3, pc}
   d7088:	00030240 	.word	0x00030240

000d708c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d708c:	b508      	push	{r3, lr}
   d708e:	4b02      	ldr	r3, [pc, #8]	; (d7098 <network_set_listen_timeout+0xc>)
   d7090:	681b      	ldr	r3, [r3, #0]
   d7092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7094:	9301      	str	r3, [sp, #4]
   d7096:	bd08      	pop	{r3, pc}
   d7098:	00030240 	.word	0x00030240

000d709c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d709c:	b508      	push	{r3, lr}
   d709e:	4b02      	ldr	r3, [pc, #8]	; (d70a8 <network_get_listen_timeout+0xc>)
   d70a0:	681b      	ldr	r3, [r3, #0]
   d70a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d70a4:	9301      	str	r3, [sp, #4]
   d70a6:	bd08      	pop	{r3, pc}
   d70a8:	00030240 	.word	0x00030240

000d70ac <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d70ac:	b508      	push	{r3, lr}
   d70ae:	4b02      	ldr	r3, [pc, #8]	; (d70b8 <malloc+0xc>)
   d70b0:	681b      	ldr	r3, [r3, #0]
   d70b2:	681b      	ldr	r3, [r3, #0]
   d70b4:	9301      	str	r3, [sp, #4]
   d70b6:	bd08      	pop	{r3, pc}
   d70b8:	0003021c 	.word	0x0003021c

000d70bc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d70bc:	b508      	push	{r3, lr}
   d70be:	4b02      	ldr	r3, [pc, #8]	; (d70c8 <free+0xc>)
   d70c0:	681b      	ldr	r3, [r3, #0]
   d70c2:	685b      	ldr	r3, [r3, #4]
   d70c4:	9301      	str	r3, [sp, #4]
   d70c6:	bd08      	pop	{r3, pc}
   d70c8:	0003021c 	.word	0x0003021c

000d70cc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d70cc:	b508      	push	{r3, lr}
   d70ce:	4b02      	ldr	r3, [pc, #8]	; (d70d8 <realloc+0xc>)
   d70d0:	681b      	ldr	r3, [r3, #0]
   d70d2:	689b      	ldr	r3, [r3, #8]
   d70d4:	9301      	str	r3, [sp, #4]
   d70d6:	bd08      	pop	{r3, pc}
   d70d8:	0003021c 	.word	0x0003021c

000d70dc <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d70dc:	b508      	push	{r3, lr}
   d70de:	4b02      	ldr	r3, [pc, #8]	; (d70e8 <siprintf+0xc>)
   d70e0:	681b      	ldr	r3, [r3, #0]
   d70e2:	691b      	ldr	r3, [r3, #16]
   d70e4:	9301      	str	r3, [sp, #4]
   d70e6:	bd08      	pop	{r3, pc}
   d70e8:	0003021c 	.word	0x0003021c

000d70ec <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d70ec:	b508      	push	{r3, lr}
   d70ee:	4b02      	ldr	r3, [pc, #8]	; (d70f8 <snprintf+0xc>)
   d70f0:	681b      	ldr	r3, [r3, #0]
   d70f2:	69db      	ldr	r3, [r3, #28]
   d70f4:	9301      	str	r3, [sp, #4]
   d70f6:	bd08      	pop	{r3, pc}
   d70f8:	0003021c 	.word	0x0003021c

000d70fc <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d70fc:	b508      	push	{r3, lr}
   d70fe:	4b02      	ldr	r3, [pc, #8]	; (d7108 <abort+0xc>)
   d7100:	681b      	ldr	r3, [r3, #0]
   d7102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7104:	9301      	str	r3, [sp, #4]
   d7106:	bd08      	pop	{r3, pc}
   d7108:	0003021c 	.word	0x0003021c

000d710c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d710c:	b508      	push	{r3, lr}
   d710e:	4b02      	ldr	r3, [pc, #8]	; (d7118 <_malloc_r+0xc>)
   d7110:	681b      	ldr	r3, [r3, #0]
   d7112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7114:	9301      	str	r3, [sp, #4]
   d7116:	bd08      	pop	{r3, pc}
   d7118:	0003021c 	.word	0x0003021c

000d711c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d711c:	b508      	push	{r3, lr}
   d711e:	4b02      	ldr	r3, [pc, #8]	; (d7128 <__errno+0xc>)
   d7120:	681b      	ldr	r3, [r3, #0]
   d7122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7124:	9301      	str	r3, [sp, #4]
   d7126:	bd08      	pop	{r3, pc}
   d7128:	0003021c 	.word	0x0003021c

000d712c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d712c:	b508      	push	{r3, lr}
   d712e:	4b02      	ldr	r3, [pc, #8]	; (d7138 <newlib_impure_ptr_callback+0xc>)
   d7130:	681b      	ldr	r3, [r3, #0]
   d7132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7134:	9301      	str	r3, [sp, #4]
   d7136:	bd08      	pop	{r3, pc}
   d7138:	0003021c 	.word	0x0003021c

000d713c <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d713c:	b508      	push	{r3, lr}
   d713e:	4b02      	ldr	r3, [pc, #8]	; (d7148 <strftime+0xc>)
   d7140:	681b      	ldr	r3, [r3, #0]
   d7142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7144:	9301      	str	r3, [sp, #4]
   d7146:	bd08      	pop	{r3, pc}
   d7148:	0003021c 	.word	0x0003021c

000d714c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d714c:	b508      	push	{r3, lr}
   d714e:	4b02      	ldr	r3, [pc, #8]	; (d7158 <localtime_r+0xc>)
   d7150:	681b      	ldr	r3, [r3, #0]
   d7152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7154:	9301      	str	r3, [sp, #4]
   d7156:	bd08      	pop	{r3, pc}
   d7158:	0003021c 	.word	0x0003021c

000d715c <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d715c:	b508      	push	{r3, lr}
   d715e:	4b02      	ldr	r3, [pc, #8]	; (d7168 <gmtime_r+0xc>)
   d7160:	681b      	ldr	r3, [r3, #0]
   d7162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7164:	9301      	str	r3, [sp, #4]
   d7166:	bd08      	pop	{r3, pc}
   d7168:	0003021c 	.word	0x0003021c

000d716c <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d716c:	b508      	push	{r3, lr}
   d716e:	4b02      	ldr	r3, [pc, #8]	; (d7178 <mktime+0xc>)
   d7170:	681b      	ldr	r3, [r3, #0]
   d7172:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7174:	9301      	str	r3, [sp, #4]
   d7176:	bd08      	pop	{r3, pc}
   d7178:	0003021c 	.word	0x0003021c

000d717c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d717c:	2100      	movs	r1, #0
   d717e:	f7ff be8f 	b.w	d6ea0 <system_delay_ms>

000d7182 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7182:	b510      	push	{r4, lr}
      if (_M_empty())
   d7184:	6883      	ldr	r3, [r0, #8]
   d7186:	4604      	mov	r4, r0
   d7188:	b90b      	cbnz	r3, d718e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d718a:	f001 fad4 	bl	d8736 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d718e:	68c3      	ldr	r3, [r0, #12]
   d7190:	4798      	blx	r3
      if (_M_manager)
   d7192:	68a3      	ldr	r3, [r4, #8]
   d7194:	b11b      	cbz	r3, d719e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7196:	2203      	movs	r2, #3
   d7198:	4621      	mov	r1, r4
   d719a:	4620      	mov	r0, r4
   d719c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d719e:	4620      	mov	r0, r4
   d71a0:	2110      	movs	r1, #16
}
   d71a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d71a6:	f001 bac0 	b.w	d872a <_ZdlPvj>

000d71aa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d71aa:	b510      	push	{r4, lr}
          _M_dispose();
   d71ac:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d71ae:	4604      	mov	r4, r0
          _M_dispose();
   d71b0:	689b      	ldr	r3, [r3, #8]
   d71b2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d71b4:	68a3      	ldr	r3, [r4, #8]
   d71b6:	3b01      	subs	r3, #1
   d71b8:	60a3      	str	r3, [r4, #8]
   d71ba:	b92b      	cbnz	r3, d71c8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d71bc:	6823      	ldr	r3, [r4, #0]
   d71be:	4620      	mov	r0, r4
   d71c0:	68db      	ldr	r3, [r3, #12]
    }
   d71c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d71c6:	4718      	bx	r3
    }
   d71c8:	bd10      	pop	{r4, pc}

000d71ca <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d71ca:	b510      	push	{r4, lr}
   d71cc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d71ce:	6800      	ldr	r0, [r0, #0]
   d71d0:	b108      	cbz	r0, d71d6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d71d2:	f7ff fcad 	bl	d6b30 <os_mutex_recursive_destroy>
    }
   d71d6:	4620      	mov	r0, r4
   d71d8:	bd10      	pop	{r4, pc}

000d71da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d71da:	680b      	ldr	r3, [r1, #0]
   d71dc:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d71de:	b113      	cbz	r3, d71e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d71e0:	685a      	ldr	r2, [r3, #4]
   d71e2:	3201      	adds	r2, #1
   d71e4:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d71e6:	4770      	bx	lr

000d71e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d71e8:	b510      	push	{r4, lr}
   d71ea:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d71ec:	6800      	ldr	r0, [r0, #0]
   d71ee:	b128      	cbz	r0, d71fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d71f0:	6843      	ldr	r3, [r0, #4]
   d71f2:	3b01      	subs	r3, #1
   d71f4:	6043      	str	r3, [r0, #4]
   d71f6:	b90b      	cbnz	r3, d71fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d71f8:	f7ff ffd7 	bl	d71aa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d71fc:	4620      	mov	r0, r4
   d71fe:	bd10      	pop	{r4, pc}

000d7200 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d7200:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d7202:	4c06      	ldr	r4, [pc, #24]	; (d721c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7204:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d7206:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7208:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d720a:	f7ff fc89 	bl	d6b20 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d720e:	4620      	mov	r0, r4
   d7210:	4a03      	ldr	r2, [pc, #12]	; (d7220 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d7212:	4904      	ldr	r1, [pc, #16]	; (d7224 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d7214:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7218:	f001 ba82 	b.w	d8720 <__aeabi_atexit>
   d721c:	2003e5e4 	.word	0x2003e5e4
   d7220:	2003de70 	.word	0x2003de70
   d7224:	000d71cb 	.word	0x000d71cb

000d7228 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d7228:	2200      	movs	r2, #0
   d722a:	6840      	ldr	r0, [r0, #4]
   d722c:	4611      	mov	r1, r2
   d722e:	f7ff bf05 	b.w	d703c <network_ready>

000d7232 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d7232:	2200      	movs	r2, #0
   d7234:	6840      	ldr	r0, [r0, #4]
   d7236:	4611      	mov	r1, r2
   d7238:	f7ff bf20 	b.w	d707c <network_listening>

000d723c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d723c:	2200      	movs	r2, #0
   d723e:	6840      	ldr	r0, [r0, #4]
   d7240:	4611      	mov	r1, r2
   d7242:	f7ff bf2b 	b.w	d709c <network_get_listen_timeout>

000d7246 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7246:	6840      	ldr	r0, [r0, #4]
   d7248:	2200      	movs	r2, #0
   d724a:	f7ff bf1f 	b.w	d708c <network_set_listen_timeout>

000d724e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d724e:	6840      	ldr	r0, [r0, #4]
   d7250:	2200      	movs	r2, #0
   d7252:	f081 0101 	eor.w	r1, r1, #1
   d7256:	f7ff bf09 	b.w	d706c <network_listen>

000d725a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d725a:	2300      	movs	r3, #0
   d725c:	6840      	ldr	r0, [r0, #4]
   d725e:	461a      	mov	r2, r3
   d7260:	4619      	mov	r1, r3
   d7262:	f7ff befb 	b.w	d705c <network_off>

000d7266 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7266:	2300      	movs	r3, #0
   d7268:	6840      	ldr	r0, [r0, #4]
   d726a:	461a      	mov	r2, r3
   d726c:	4619      	mov	r1, r3
   d726e:	f7ff beed 	b.w	d704c <network_on>

000d7272 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7272:	2200      	movs	r2, #0
   d7274:	6840      	ldr	r0, [r0, #4]
   d7276:	4611      	mov	r1, r2
   d7278:	f7ff bed0 	b.w	d701c <network_connecting>

000d727c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d727c:	6840      	ldr	r0, [r0, #4]
   d727e:	2200      	movs	r2, #0
   d7280:	2102      	movs	r1, #2
   d7282:	f7ff bed3 	b.w	d702c <network_disconnect>

000d7286 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7286:	2300      	movs	r3, #0
   d7288:	6840      	ldr	r0, [r0, #4]
   d728a:	461a      	mov	r2, r3
   d728c:	f7ff bebe 	b.w	d700c <network_connect>

000d7290 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d7290:	4b08      	ldr	r3, [pc, #32]	; (d72b4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d7292:	b510      	push	{r4, lr}
   d7294:	2428      	movs	r4, #40	; 0x28
   d7296:	4622      	mov	r2, r4
   d7298:	4618      	mov	r0, r3
   d729a:	2100      	movs	r1, #0
   d729c:	f002 f8e2 	bl	d9464 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d72a0:	4b05      	ldr	r3, [pc, #20]	; (d72b8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d72a2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d72a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d72a8:	6042      	str	r2, [r0, #4]
   d72aa:	2204      	movs	r2, #4
   d72ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d72ae:	4a03      	ldr	r2, [pc, #12]	; (d72bc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d72b0:	601a      	str	r2, [r3, #0]
   d72b2:	bd10      	pop	{r4, pc}
   d72b4:	2003e5f0 	.word	0x2003e5f0
   d72b8:	2003e5e8 	.word	0x2003e5e8
   d72bc:	000dbd1c 	.word	0x000dbd1c

000d72c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d72c0:	4770      	bx	lr

000d72c2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d72c2:	2000      	movs	r0, #0
   d72c4:	4770      	bx	lr

000d72c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d72c6:	b510      	push	{r4, lr}
   d72c8:	2110      	movs	r1, #16
   d72ca:	4604      	mov	r4, r0
   d72cc:	f001 fa2d 	bl	d872a <_ZdlPvj>
   d72d0:	4620      	mov	r0, r4
   d72d2:	bd10      	pop	{r4, pc}

000d72d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d72d4:	b508      	push	{r3, lr}
      { delete this; }
   d72d6:	f7ff fff6 	bl	d72c6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d72da:	bd08      	pop	{r3, pc}

000d72dc <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d72dc:	b530      	push	{r4, r5, lr}
        type_(type) {
   d72de:	2200      	movs	r2, #0
   d72e0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d72e4:	6002      	str	r2, [r0, #0]
   d72e6:	8084      	strh	r4, [r0, #4]
   d72e8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d72ea:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d72ec:	680c      	ldr	r4, [r1, #0]
   d72ee:	8085      	strh	r5, [r0, #4]
   d72f0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d72f2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d72f4:	bd30      	pop	{r4, r5, pc}

000d72f6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d72f6:	b510      	push	{r4, lr}
   d72f8:	4604      	mov	r4, r0
    free((void*)msg_);
   d72fa:	6800      	ldr	r0, [r0, #0]
   d72fc:	f7ff fede 	bl	d70bc <free>
}
   d7300:	4620      	mov	r0, r4
   d7302:	bd10      	pop	{r4, pc}

000d7304 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d7304:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d7306:	68c4      	ldr	r4, [r0, #12]
   d7308:	b1f4      	cbz	r4, d7348 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d730a:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d730c:	2b02      	cmp	r3, #2
   d730e:	d103      	bne.n	d7318 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d7310:	f104 000c 	add.w	r0, r4, #12
   d7314:	f7ff ffef 	bl	d72f6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d7318:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d731a:	b135      	cbz	r5, d732a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d731c:	4628      	mov	r0, r5
   d731e:	f7fd f803 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
   d7322:	2110      	movs	r1, #16
   d7324:	4628      	mov	r0, r5
   d7326:	f001 fa00 	bl	d872a <_ZdlPvj>
   d732a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d732c:	b135      	cbz	r5, d733c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d732e:	4628      	mov	r0, r5
   d7330:	f7fc fffa 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
   d7334:	2110      	movs	r1, #16
   d7336:	4628      	mov	r0, r5
   d7338:	f001 f9f7 	bl	d872a <_ZdlPvj>
   d733c:	4620      	mov	r0, r4
   d733e:	2114      	movs	r1, #20
   d7340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7344:	f001 b9f1 	b.w	d872a <_ZdlPvj>
   d7348:	bd38      	pop	{r3, r4, r5, pc}

000d734a <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d734a:	b510      	push	{r4, lr}
   d734c:	b088      	sub	sp, #32
   d734e:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d7350:	4668      	mov	r0, sp
   d7352:	f000 fd54 	bl	d7dfe <_ZN6StringC1EPKc>
    return (*fn)(p);
   d7356:	4669      	mov	r1, sp
   d7358:	a804      	add	r0, sp, #16
   d735a:	f000 fd73 	bl	d7e44 <_ZN6StringC1ERKS_>
   d735e:	a804      	add	r0, sp, #16
   d7360:	47a0      	blx	r4
   d7362:	4604      	mov	r4, r0
   d7364:	a804      	add	r0, sp, #16
   d7366:	f000 fcff 	bl	d7d68 <_ZN6StringD1Ev>
    String p(param);
   d736a:	4668      	mov	r0, sp
   d736c:	f000 fcfc 	bl	d7d68 <_ZN6StringD1Ev>
}
   d7370:	4620      	mov	r0, r4
   d7372:	b008      	add	sp, #32
   d7374:	bd10      	pop	{r4, pc}

000d7376 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d7376:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d7378:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d737a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d737e:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d7380:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d7382:	461a      	mov	r2, r3
   d7384:	4669      	mov	r1, sp
   d7386:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d7388:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d738c:	f8ad 4000 	strh.w	r4, [sp]
   d7390:	f7ff fddc 	bl	d6f4c <spark_function>
}
   d7394:	b004      	add	sp, #16
   d7396:	bd10      	pop	{r4, pc}

000d7398 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7398:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d739a:	460e      	mov	r6, r1
   d739c:	4604      	mov	r4, r0
   d739e:	f856 3b04 	ldr.w	r3, [r6], #4
   d73a2:	9300      	str	r3, [sp, #0]
   d73a4:	460d      	mov	r5, r1
   d73a6:	a801      	add	r0, sp, #4
   d73a8:	4631      	mov	r1, r6
   d73aa:	f7ff ff16 	bl	d71da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d73ae:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d73b0:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d73b2:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d73b4:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d73b6:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d73b8:	2300      	movs	r3, #0
   d73ba:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d73bc:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d73be:	f7ff ff13 	bl	d71e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d73c2:	4630      	mov	r0, r6
   d73c4:	f7ff ff10 	bl	d71e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d73c8:	4628      	mov	r0, r5
   d73ca:	2108      	movs	r1, #8
   d73cc:	f001 f9ad 	bl	d872a <_ZdlPvj>
        return p;
    }
   d73d0:	4620      	mov	r0, r4
   d73d2:	b002      	add	sp, #8
   d73d4:	bd70      	pop	{r4, r5, r6, pc}

000d73d6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d73d6:	b513      	push	{r0, r1, r4, lr}
   d73d8:	460b      	mov	r3, r1
   d73da:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d73dc:	e9d0 0100 	ldrd	r0, r1, [r0]
   d73e0:	466c      	mov	r4, sp
   d73e2:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d73e6:	e893 0003 	ldmia.w	r3, {r0, r1}
   d73ea:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d73ee:	e894 0003 	ldmia.w	r4, {r0, r1}
   d73f2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d73f6:	b002      	add	sp, #8
   d73f8:	bd10      	pop	{r4, pc}

000d73fa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d73fa:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d73fc:	b510      	push	{r4, lr}
      if (_M_empty())
   d73fe:	b90a      	cbnz	r2, d7404 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7400:	f001 f999 	bl	d8736 <_ZSt25__throw_bad_function_callv>
    }
   d7404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7408:	68c3      	ldr	r3, [r0, #12]
   d740a:	4718      	bx	r3

000d740c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d740c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d740e:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d7410:	f100 0110 	add.w	r1, r0, #16
   d7414:	f7ff fff1 	bl	d73fa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d7418:	bd08      	pop	{r3, pc}

000d741a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d741a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d741c:	b510      	push	{r4, lr}
      if (_M_empty())
   d741e:	b90a      	cbnz	r2, d7424 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7420:	f001 f989 	bl	d8736 <_ZSt25__throw_bad_function_callv>
    }
   d7424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7428:	68c3      	ldr	r3, [r0, #12]
   d742a:	4718      	bx	r3

000d742c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d742c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d742e:	6800      	ldr	r0, [r0, #0]
   d7430:	f100 0110 	add.w	r1, r0, #16
   d7434:	f7ff fff1 	bl	d741a <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d7438:	bd08      	pop	{r3, pc}
	...

000d743c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d743c:	b538      	push	{r3, r4, r5, lr}
   d743e:	2300      	movs	r3, #0
   d7440:	4604      	mov	r4, r0
   d7442:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7444:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d7446:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7448:	f7fc fe25 	bl	d4096 <_Znwj>
   d744c:	b128      	cbz	r0, d745a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d744e:	2301      	movs	r3, #1
   d7450:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d7454:	4b02      	ldr	r3, [pc, #8]	; (d7460 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d7456:	6003      	str	r3, [r0, #0]
   d7458:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d745a:	6020      	str	r0, [r4, #0]
	}
   d745c:	4620      	mov	r0, r4
   d745e:	bd38      	pop	{r3, r4, r5, pc}
   d7460:	000dbd50 	.word	0x000dbd50

000d7464 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d7464:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7466:	2300      	movs	r3, #0
   d7468:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d746a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d746c:	4604      	mov	r4, r0
   d746e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d7470:	b12b      	cbz	r3, d747e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7472:	2202      	movs	r2, #2
   d7474:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7476:	68eb      	ldr	r3, [r5, #12]
   d7478:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d747a:	68ab      	ldr	r3, [r5, #8]
   d747c:	60a3      	str	r3, [r4, #8]
    }
   d747e:	4620      	mov	r0, r4
   d7480:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7484 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d7484:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7486:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7488:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d748a:	4668      	mov	r0, sp
   d748c:	f7ff ff26 	bl	d72dc <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d7490:	f04f 0302 	mov.w	r3, #2
   d7494:	e8d4 2f4f 	ldrexb	r2, [r4]
   d7498:	2a00      	cmp	r2, #0
   d749a:	d103      	bne.n	d74a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d749c:	e8c4 3f41 	strexb	r1, r3, [r4]
   d74a0:	2900      	cmp	r1, #0
   d74a2:	d1f7      	bne.n	d7494 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d74a4:	d125      	bne.n	d74f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d74a6:	f104 050c 	add.w	r5, r4, #12
   d74aa:	4669      	mov	r1, sp
   d74ac:	4628      	mov	r0, r5
   d74ae:	f7ff ff15 	bl	d72dc <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d74b2:	f3bf 8f5b 	dmb	ish
   d74b6:	2301      	movs	r3, #1
   d74b8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d74ba:	2000      	movs	r0, #0
   d74bc:	f104 0308 	add.w	r3, r4, #8
   d74c0:	f3bf 8f5b 	dmb	ish
   d74c4:	e853 6f00 	ldrex	r6, [r3]
   d74c8:	e843 0200 	strex	r2, r0, [r3]
   d74cc:	2a00      	cmp	r2, #0
   d74ce:	d1f9      	bne.n	d74c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d74d0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d74d4:	b16e      	cbz	r6, d74f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d74d6:	f7ff fcf3 	bl	d6ec0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d74da:	b178      	cbz	r0, d74fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d74dc:	4629      	mov	r1, r5
   d74de:	4630      	mov	r0, r6
   d74e0:	f7ff ff8b 	bl	d73fa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d74e4:	4630      	mov	r0, r6
   d74e6:	f7fc ff1f 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d74ea:	2110      	movs	r1, #16
   d74ec:	4630      	mov	r0, r6
   d74ee:	f001 f91c 	bl	d872a <_ZdlPvj>
        p_->setError(std::move(error));
   d74f2:	4668      	mov	r0, sp
   d74f4:	f7ff feff 	bl	d72f6 <_ZN8particle5ErrorD1Ev>
    }
   d74f8:	b009      	add	sp, #36	; 0x24
   d74fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d74fc:	4631      	mov	r1, r6
   d74fe:	a802      	add	r0, sp, #8
   d7500:	f7ff ffb0 	bl	d7464 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d7504:	68e0      	ldr	r0, [r4, #12]
   d7506:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d750a:	b108      	cbz	r0, d7510 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d750c:	f001 ffe8 	bl	d94e0 <strdup>
        type_(type) {
   d7510:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7512:	2010      	movs	r0, #16
   d7514:	f8ad 501c 	strh.w	r5, [sp, #28]
   d7518:	f7fc fdbd 	bl	d4096 <_Znwj>
   d751c:	4605      	mov	r5, r0
   d751e:	b1e8      	cbz	r0, d755c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d7520:	2700      	movs	r7, #0
   d7522:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7524:	2018      	movs	r0, #24
   d7526:	f7fc fdb6 	bl	d4096 <_Znwj>
   d752a:	4604      	mov	r4, r0
   d752c:	b188      	cbz	r0, d7552 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d752e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d7530:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d7532:	a802      	add	r0, sp, #8
   d7534:	f7ff ff4f 	bl	d73d6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7538:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d753a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d753c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d753e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7540:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7542:	a906      	add	r1, sp, #24
   d7544:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7546:	60e3      	str	r3, [r4, #12]
   d7548:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d754c:	9205      	str	r2, [sp, #20]
   d754e:	f7ff fec5 	bl	d72dc <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d7552:	4b08      	ldr	r3, [pc, #32]	; (d7574 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d7554:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7556:	4b08      	ldr	r3, [pc, #32]	; (d7578 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7558:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d755a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d755c:	a806      	add	r0, sp, #24
   d755e:	f7ff feca 	bl	d72f6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d7562:	a802      	add	r0, sp, #8
   d7564:	f7fc fee0 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7568:	2200      	movs	r2, #0
   d756a:	4629      	mov	r1, r5
   d756c:	4803      	ldr	r0, [pc, #12]	; (d757c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d756e:	f7ff fcaf 	bl	d6ed0 <application_thread_invoke>
   d7572:	e7b7      	b.n	d74e4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d7574:	000d740d 	.word	0x000d740d
   d7578:	000d76a5 	.word	0x000d76a5
   d757c:	000d7183 	.word	0x000d7183

000d7580 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7584:	b08a      	sub	sp, #40	; 0x28
   d7586:	4605      	mov	r5, r0
   d7588:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d758c:	460c      	mov	r4, r1
   d758e:	4617      	mov	r7, r2
   d7590:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7592:	f7ff fcf3 	bl	d6f7c <spark_cloud_flag_connected>
   d7596:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d7598:	4682      	mov	sl, r0
   d759a:	bb38      	cbnz	r0, d75ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d759c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d75a0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d75a2:	a905      	add	r1, sp, #20
   d75a4:	4630      	mov	r0, r6
   d75a6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d75aa:	f7ff fe97 	bl	d72dc <_ZN8particle5ErrorC1EOS0_>
   d75ae:	2014      	movs	r0, #20
   d75b0:	f7fc fd71 	bl	d4096 <_Znwj>
   d75b4:	4604      	mov	r4, r0
   d75b6:	b148      	cbz	r0, d75cc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d75b8:	2302      	movs	r3, #2
   d75ba:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d75bc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d75be:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d75c2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d75c4:	4631      	mov	r1, r6
   d75c6:	300c      	adds	r0, #12
   d75c8:	f7ff fe88 	bl	d72dc <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d75cc:	4628      	mov	r0, r5
	: __shared_count(__p)
   d75ce:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d75d0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d75d4:	f7ff ff32 	bl	d743c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d75d8:	4630      	mov	r0, r6
   d75da:	f7ff fe8c 	bl	d72f6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d75de:	a805      	add	r0, sp, #20
   d75e0:	f7ff fe89 	bl	d72f6 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d75e4:	4628      	mov	r0, r5
   d75e6:	b00a      	add	sp, #40	; 0x28
   d75e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d75ec:	230c      	movs	r3, #12
   d75ee:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d75f2:	2014      	movs	r0, #20
   d75f4:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d75f8:	9307      	str	r3, [sp, #28]
   d75fa:	f7fc fd4c 	bl	d4096 <_Znwj>
   d75fe:	4601      	mov	r1, r0
   d7600:	b128      	cbz	r0, d760e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7602:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d7606:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d760a:	f880 a001 	strb.w	sl, [r0, #1]
   d760e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7610:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d7612:	f7ff ff13 	bl	d743c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d7616:	4b22      	ldr	r3, [pc, #136]	; (d76a0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d7618:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d761a:	2008      	movs	r0, #8
   d761c:	f7fc fd3b 	bl	d4096 <_Znwj>
   d7620:	4682      	mov	sl, r0
   d7622:	b128      	cbz	r0, d7630 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7624:	9b03      	ldr	r3, [sp, #12]
   d7626:	f840 3b04 	str.w	r3, [r0], #4
   d762a:	a904      	add	r1, sp, #16
   d762c:	f7ff fdd5 	bl	d71da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7630:	9600      	str	r6, [sp, #0]
   d7632:	fa5f f389 	uxtb.w	r3, r9
   d7636:	4642      	mov	r2, r8
   d7638:	4639      	mov	r1, r7
   d763a:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d763c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7640:	f7ff fcac 	bl	d6f9c <spark_send_event>
   d7644:	b9b8      	cbnz	r0, d7676 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d7646:	9b03      	ldr	r3, [sp, #12]
   d7648:	785b      	ldrb	r3, [r3, #1]
   d764a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d764e:	b993      	cbnz	r3, d7676 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d7650:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d7654:	a905      	add	r1, sp, #20
   d7656:	a803      	add	r0, sp, #12
   d7658:	9205      	str	r2, [sp, #20]
   d765a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d765e:	f7ff ff11 	bl	d7484 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7662:	a805      	add	r0, sp, #20
   d7664:	f7ff fe47 	bl	d72f6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d7668:	a805      	add	r0, sp, #20
   d766a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d766c:	f7ff fe94 	bl	d7398 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d7670:	a806      	add	r0, sp, #24
   d7672:	f7ff fdb9 	bl	d71e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7676:	9b03      	ldr	r3, [sp, #12]
   d7678:	9305      	str	r3, [sp, #20]
   d767a:	a904      	add	r1, sp, #16
   d767c:	a806      	add	r0, sp, #24
   d767e:	f7ff fdac 	bl	d71da <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7682:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7684:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7686:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d7688:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d768a:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d768c:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d768e:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d7690:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d7692:	f7ff fda9 	bl	d71e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7696:	a804      	add	r0, sp, #16
   d7698:	f7ff fda6 	bl	d71e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d769c:	e7a2      	b.n	d75e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d769e:	bf00      	nop
   d76a0:	000d7769 	.word	0x000d7769

000d76a4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d76a4:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d76a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d76a8:	4605      	mov	r5, r0
	  switch (__op)
   d76aa:	d007      	beq.n	d76bc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d76ac:	2a03      	cmp	r2, #3
   d76ae:	d018      	beq.n	d76e2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d76b0:	2a01      	cmp	r2, #1
   d76b2:	d101      	bne.n	d76b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d76b4:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d76b6:	6003      	str	r3, [r0, #0]
	}
   d76b8:	2000      	movs	r0, #0
   d76ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d76bc:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d76be:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d76c0:	f7fc fce9 	bl	d4096 <_Znwj>
   d76c4:	4604      	mov	r4, r0
   d76c6:	b150      	cbz	r0, d76de <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d76c8:	4631      	mov	r1, r6
   d76ca:	f7ff fecb 	bl	d7464 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d76ce:	6930      	ldr	r0, [r6, #16]
   d76d0:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d76d4:	b108      	cbz	r0, d76da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d76d6:	f001 ff03 	bl	d94e0 <strdup>
        type_(type) {
   d76da:	6120      	str	r0, [r4, #16]
   d76dc:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d76de:	602c      	str	r4, [r5, #0]
	}
   d76e0:	e7ea      	b.n	d76b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d76e2:	6804      	ldr	r4, [r0, #0]
   d76e4:	2c00      	cmp	r4, #0
   d76e6:	d0e7      	beq.n	d76b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d76e8:	f104 0010 	add.w	r0, r4, #16
   d76ec:	f7ff fe03 	bl	d72f6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d76f0:	4620      	mov	r0, r4
   d76f2:	f7fc fe19 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d76f6:	2118      	movs	r1, #24
   d76f8:	4620      	mov	r0, r4
   d76fa:	f001 f816 	bl	d872a <_ZdlPvj>
   d76fe:	e7db      	b.n	d76b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d7700 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d7700:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7702:	2300      	movs	r3, #0
   d7704:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d7706:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d7708:	4604      	mov	r4, r0
   d770a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d770c:	b12b      	cbz	r3, d771a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d770e:	2202      	movs	r2, #2
   d7710:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7712:	68eb      	ldr	r3, [r5, #12]
   d7714:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d7716:	68ab      	ldr	r3, [r5, #8]
   d7718:	60a3      	str	r3, [r4, #8]
    }
   d771a:	4620      	mov	r0, r4
   d771c:	bd38      	pop	{r3, r4, r5, pc}

000d771e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d771e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7720:	b570      	push	{r4, r5, r6, lr}
   d7722:	4604      	mov	r4, r0
	  switch (__op)
   d7724:	d007      	beq.n	d7736 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d7726:	2a03      	cmp	r2, #3
   d7728:	d012      	beq.n	d7750 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d772a:	2a01      	cmp	r2, #1
   d772c:	d101      	bne.n	d7732 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d772e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7730:	6003      	str	r3, [r0, #0]
	}
   d7732:	2000      	movs	r0, #0
   d7734:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d7736:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d7738:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d773a:	f7fc fcac 	bl	d4096 <_Znwj>
   d773e:	4605      	mov	r5, r0
   d7740:	b120      	cbz	r0, d774c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d7742:	4631      	mov	r1, r6
   d7744:	f7ff ffdc 	bl	d7700 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7748:	7c33      	ldrb	r3, [r6, #16]
   d774a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d774c:	6025      	str	r5, [r4, #0]
	}
   d774e:	e7f0      	b.n	d7732 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d7750:	6804      	ldr	r4, [r0, #0]
   d7752:	2c00      	cmp	r4, #0
   d7754:	d0ed      	beq.n	d7732 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d7756:	4620      	mov	r0, r4
   d7758:	f7fc fde6 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d775c:	2114      	movs	r1, #20
   d775e:	4620      	mov	r0, r4
   d7760:	f000 ffe3 	bl	d872a <_ZdlPvj>
   d7764:	e7e5      	b.n	d7732 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d7768 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d7768:	b5f0      	push	{r4, r5, r6, r7, lr}
   d776a:	b089      	sub	sp, #36	; 0x24
   d776c:	4604      	mov	r4, r0
   d776e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7770:	a801      	add	r0, sp, #4
   d7772:	4611      	mov	r1, r2
   d7774:	f7ff fe10 	bl	d7398 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d7778:	b1a4      	cbz	r4, d77a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d777a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d777c:	b11d      	cbz	r5, d7786 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d777e:	4628      	mov	r0, r5
   d7780:	f001 feae 	bl	d94e0 <strdup>
   d7784:	4605      	mov	r5, r0
   d7786:	a801      	add	r0, sp, #4
   d7788:	a903      	add	r1, sp, #12
        type_(type) {
   d778a:	9503      	str	r5, [sp, #12]
   d778c:	f8ad 4010 	strh.w	r4, [sp, #16]
   d7790:	f7ff fe78 	bl	d7484 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7794:	a803      	add	r0, sp, #12
   d7796:	f7ff fdae 	bl	d72f6 <_ZN8particle5ErrorD1Ev>
   d779a:	a802      	add	r0, sp, #8
   d779c:	f7ff fd24 	bl	d71e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d77a0:	b009      	add	sp, #36	; 0x24
   d77a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d77a4:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d77a6:	2301      	movs	r3, #1
   d77a8:	e8d5 2f4f 	ldrexb	r2, [r5]
   d77ac:	2a00      	cmp	r2, #0
   d77ae:	d103      	bne.n	d77b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d77b0:	e8c5 3f41 	strexb	r1, r3, [r5]
   d77b4:	2900      	cmp	r1, #0
   d77b6:	d1f7      	bne.n	d77a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d77b8:	d1ef      	bne.n	d779a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d77ba:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d77bc:	f3bf 8f5b 	dmb	ish
   d77c0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d77c2:	1d2b      	adds	r3, r5, #4
   d77c4:	f3bf 8f5b 	dmb	ish
   d77c8:	e853 6f00 	ldrex	r6, [r3]
   d77cc:	e843 4200 	strex	r2, r4, [r3]
   d77d0:	2a00      	cmp	r2, #0
   d77d2:	d1f9      	bne.n	d77c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d77d4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d77d8:	2e00      	cmp	r6, #0
   d77da:	d0de      	beq.n	d779a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d77dc:	4620      	mov	r0, r4
   d77de:	f7ff fb6f 	bl	d6ec0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d77e2:	4607      	mov	r7, r0
   d77e4:	b160      	cbz	r0, d7800 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d77e6:	f105 010c 	add.w	r1, r5, #12
   d77ea:	4630      	mov	r0, r6
   d77ec:	f7ff fe15 	bl	d741a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d77f0:	4630      	mov	r0, r6
   d77f2:	f7fc fd99 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d77f6:	2110      	movs	r1, #16
   d77f8:	4630      	mov	r0, r6
   d77fa:	f000 ff96 	bl	d872a <_ZdlPvj>
   d77fe:	e7cc      	b.n	d779a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7800:	4631      	mov	r1, r6
   d7802:	a803      	add	r0, sp, #12
   d7804:	f7ff ff7c 	bl	d7700 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7808:	7b2b      	ldrb	r3, [r5, #12]
   d780a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d780e:	2010      	movs	r0, #16
   d7810:	f7fc fc41 	bl	d4096 <_Znwj>
   d7814:	4605      	mov	r5, r0
   d7816:	b1d0      	cbz	r0, d784e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d7818:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d781a:	2014      	movs	r0, #20
   d781c:	f7fc fc3b 	bl	d4096 <_Znwj>
   d7820:	4604      	mov	r4, r0
   d7822:	b178      	cbz	r0, d7844 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d7824:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d7826:	4601      	mov	r1, r0
   d7828:	a803      	add	r0, sp, #12
   d782a:	f7ff fdd4 	bl	d73d6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d782e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7830:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7832:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7834:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d7836:	9205      	str	r2, [sp, #20]
   d7838:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d783a:	60e3      	str	r3, [r4, #12]
   d783c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d7840:	9206      	str	r2, [sp, #24]
   d7842:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d7844:	4b06      	ldr	r3, [pc, #24]	; (d7860 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d7846:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7848:	4b06      	ldr	r3, [pc, #24]	; (d7864 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d784a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d784c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d784e:	a803      	add	r0, sp, #12
   d7850:	f7fc fd6a 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7854:	2200      	movs	r2, #0
   d7856:	4629      	mov	r1, r5
   d7858:	4803      	ldr	r0, [pc, #12]	; (d7868 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d785a:	f7ff fb39 	bl	d6ed0 <application_thread_invoke>
   d785e:	e7c7      	b.n	d77f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d7860:	000d742d 	.word	0x000d742d
   d7864:	000d771f 	.word	0x000d771f
   d7868:	000d7183 	.word	0x000d7183

000d786c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d786c:	2200      	movs	r2, #0
   d786e:	6840      	ldr	r0, [r0, #4]
   d7870:	4611      	mov	r1, r2
   d7872:	f7ff bc03 	b.w	d707c <network_listening>

000d7876 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7876:	2200      	movs	r2, #0
   d7878:	6840      	ldr	r0, [r0, #4]
   d787a:	4611      	mov	r1, r2
   d787c:	f7ff bc0e 	b.w	d709c <network_get_listen_timeout>

000d7880 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7880:	6840      	ldr	r0, [r0, #4]
   d7882:	2200      	movs	r2, #0
   d7884:	f7ff bc02 	b.w	d708c <network_set_listen_timeout>

000d7888 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7888:	6840      	ldr	r0, [r0, #4]
   d788a:	2200      	movs	r2, #0
   d788c:	f081 0101 	eor.w	r1, r1, #1
   d7890:	f7ff bbec 	b.w	d706c <network_listen>

000d7894 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7894:	2300      	movs	r3, #0
   d7896:	6840      	ldr	r0, [r0, #4]
   d7898:	461a      	mov	r2, r3
   d789a:	4619      	mov	r1, r3
   d789c:	f7ff bbde 	b.w	d705c <network_off>

000d78a0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d78a0:	2300      	movs	r3, #0
   d78a2:	6840      	ldr	r0, [r0, #4]
   d78a4:	461a      	mov	r2, r3
   d78a6:	4619      	mov	r1, r3
   d78a8:	f7ff bbd0 	b.w	d704c <network_on>

000d78ac <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d78ac:	2200      	movs	r2, #0
   d78ae:	6840      	ldr	r0, [r0, #4]
   d78b0:	4611      	mov	r1, r2
   d78b2:	f7ff bbc3 	b.w	d703c <network_ready>

000d78b6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d78b6:	2200      	movs	r2, #0
   d78b8:	6840      	ldr	r0, [r0, #4]
   d78ba:	4611      	mov	r1, r2
   d78bc:	f7ff bbae 	b.w	d701c <network_connecting>

000d78c0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d78c0:	6840      	ldr	r0, [r0, #4]
   d78c2:	2200      	movs	r2, #0
   d78c4:	2102      	movs	r1, #2
   d78c6:	f7ff bbb1 	b.w	d702c <network_disconnect>

000d78ca <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d78ca:	2300      	movs	r3, #0
   d78cc:	6840      	ldr	r0, [r0, #4]
   d78ce:	461a      	mov	r2, r3
   d78d0:	f7ff bb9c 	b.w	d700c <network_connect>

000d78d4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d78d4:	4b02      	ldr	r3, [pc, #8]	; (d78e0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d78d6:	2203      	movs	r2, #3
   d78d8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d78da:	4a02      	ldr	r2, [pc, #8]	; (d78e4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d78dc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d78de:	4770      	bx	lr
   d78e0:	2003e618 	.word	0x2003e618
   d78e4:	000dbd6c 	.word	0x000dbd6c

000d78e8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d78e8:	4770      	bx	lr

000d78ea <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d78ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d78ec:	4606      	mov	r6, r0
   d78ee:	4615      	mov	r5, r2
   d78f0:	460c      	mov	r4, r1
   d78f2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d78f4:	42bc      	cmp	r4, r7
   d78f6:	d006      	beq.n	d7906 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d78f8:	6833      	ldr	r3, [r6, #0]
   d78fa:	f814 1b01 	ldrb.w	r1, [r4], #1
   d78fe:	689b      	ldr	r3, [r3, #8]
   d7900:	4630      	mov	r0, r6
   d7902:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d7904:	e7f6      	b.n	d78f4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d7906:	4628      	mov	r0, r5
   d7908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d790a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d790a:	7c00      	ldrb	r0, [r0, #16]
   d790c:	2200      	movs	r2, #0
   d790e:	f7ff b9bf 	b.w	d6c90 <hal_i2c_write>

000d7912 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d7912:	7c00      	ldrb	r0, [r0, #16]
   d7914:	2100      	movs	r1, #0
   d7916:	f7ff b9c3 	b.w	d6ca0 <hal_i2c_available>

000d791a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d791a:	7c00      	ldrb	r0, [r0, #16]
   d791c:	2100      	movs	r1, #0
   d791e:	f7ff b9c7 	b.w	d6cb0 <hal_i2c_read>

000d7922 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d7922:	7c00      	ldrb	r0, [r0, #16]
   d7924:	2100      	movs	r1, #0
   d7926:	f7ff b9cb 	b.w	d6cc0 <hal_i2c_peek>

000d792a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d792a:	7c00      	ldrb	r0, [r0, #16]
   d792c:	2100      	movs	r1, #0
   d792e:	f7ff b9cf 	b.w	d6cd0 <hal_i2c_flush>

000d7932 <_ZN7TwoWireD0Ev>:
   d7932:	b510      	push	{r4, lr}
   d7934:	2114      	movs	r1, #20
   d7936:	4604      	mov	r4, r0
   d7938:	f000 fef7 	bl	d872a <_ZdlPvj>
   d793c:	4620      	mov	r0, r4
   d793e:	bd10      	pop	{r4, pc}

000d7940 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7940:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7946:	4604      	mov	r4, r0
   d7948:	4608      	mov	r0, r1
   d794a:	2100      	movs	r1, #0
   d794c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7950:	4b03      	ldr	r3, [pc, #12]	; (d7960 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d7952:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7954:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d7956:	4611      	mov	r1, r2
   d7958:	f7ff f9ca 	bl	d6cf0 <hal_i2c_init>
}
   d795c:	4620      	mov	r0, r4
   d795e:	bd10      	pop	{r4, pc}
   d7960:	000dbda0 	.word	0x000dbda0

000d7964 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7964:	2300      	movs	r3, #0
   d7966:	7c00      	ldrb	r0, [r0, #16]
   d7968:	461a      	mov	r2, r3
   d796a:	4619      	mov	r1, r3
   d796c:	f7ff b978 	b.w	d6c60 <hal_i2c_begin>

000d7970 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7970:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d7972:	2200      	movs	r2, #0
   d7974:	2314      	movs	r3, #20
   d7976:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d797a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d797e:	780b      	ldrb	r3, [r1, #0]
   d7980:	f88d 3008 	strb.w	r3, [sp, #8]
   d7984:	684b      	ldr	r3, [r1, #4]
   d7986:	9303      	str	r3, [sp, #12]
   d7988:	68cb      	ldr	r3, [r1, #12]
   d798a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d798c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d798e:	7a0b      	ldrb	r3, [r1, #8]
   d7990:	9305      	str	r3, [sp, #20]
   d7992:	a901      	add	r1, sp, #4
   d7994:	f7ff f9c4 	bl	d6d20 <hal_i2c_request_ex>
}
   d7998:	b007      	add	sp, #28
   d799a:	f85d fb04 	ldr.w	pc, [sp], #4

000d799e <_ZN7TwoWire11requestFromEhjh>:
{
   d799e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d79a0:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d79a2:	f88d 1000 	strb.w	r1, [sp]
   d79a6:	f04f 0164 	mov.w	r1, #100	; 0x64
   d79aa:	9103      	str	r1, [sp, #12]
   d79ac:	bf18      	it	ne
   d79ae:	2301      	movne	r3, #1
   d79b0:	4669      	mov	r1, sp
    size_ = size;
   d79b2:	9201      	str	r2, [sp, #4]
   d79b4:	f88d 3008 	strb.w	r3, [sp, #8]
   d79b8:	f7ff ffda 	bl	d7970 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d79bc:	b005      	add	sp, #20
   d79be:	f85d fb04 	ldr.w	pc, [sp], #4

000d79c2 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d79c2:	7c00      	ldrb	r0, [r0, #16]
   d79c4:	2200      	movs	r2, #0
   d79c6:	f7ff b953 	b.w	d6c70 <hal_i2c_begin_transmission>

000d79ca <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d79ca:	b2c9      	uxtb	r1, r1
   d79cc:	f7ff bff9 	b.w	d79c2 <_ZN7TwoWire17beginTransmissionEh>

000d79d0 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d79d0:	7c00      	ldrb	r0, [r0, #16]
   d79d2:	2200      	movs	r2, #0
   d79d4:	f7ff b954 	b.w	d6c80 <hal_i2c_end_transmission>

000d79d8 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d79d8:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d79da:	2100      	movs	r1, #0
   d79dc:	7c00      	ldrb	r0, [r0, #16]
   d79de:	f7ff f98f 	bl	d6d00 <hal_i2c_lock>
}
   d79e2:	fab0 f080 	clz	r0, r0
   d79e6:	0940      	lsrs	r0, r0, #5
   d79e8:	bd08      	pop	{r3, pc}

000d79ea <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d79ea:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d79ec:	2100      	movs	r1, #0
   d79ee:	7c00      	ldrb	r0, [r0, #16]
   d79f0:	f7ff f98e 	bl	d6d10 <hal_i2c_unlock>
}
   d79f4:	fab0 f080 	clz	r0, r0
   d79f8:	0940      	lsrs	r0, r0, #5
   d79fa:	bd08      	pop	{r3, pc}

000d79fc <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d79fc:	4700      	bx	r0
	...

000d7a00 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d7a00:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d7a04:	2400      	movs	r4, #0
{
   d7a06:	461d      	mov	r5, r3
   d7a08:	460f      	mov	r7, r1
   d7a0a:	4690      	mov	r8, r2
   d7a0c:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d7a0e:	f7ff f917 	bl	d6c40 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d7a12:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7a14:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d7a18:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7a1c:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d7a20:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d7a24:	bfa2      	ittt	ge
   d7a26:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d7a2a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d7a2e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7a30:	4907      	ldr	r1, [pc, #28]	; (d7a50 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d7a32:	9400      	str	r4, [sp, #0]
   d7a34:	4643      	mov	r3, r8
   d7a36:	463a      	mov	r2, r7
   d7a38:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d7a3a:	bfa8      	it	ge
   d7a3c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7a40:	f7ff f8f6 	bl	d6c30 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d7a44:	fab0 f080 	clz	r0, r0
   d7a48:	0940      	lsrs	r0, r0, #5
   d7a4a:	b004      	add	sp, #16
   d7a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7a50:	000d79fd 	.word	0x000d79fd

000d7a54 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7a54:	4770      	bx	lr

000d7a56 <_ZN9IPAddressD0Ev>:
   d7a56:	b510      	push	{r4, lr}
   d7a58:	2118      	movs	r1, #24
   d7a5a:	4604      	mov	r4, r0
   d7a5c:	f000 fe65 	bl	d872a <_ZdlPvj>
   d7a60:	4620      	mov	r0, r4
   d7a62:	bd10      	pop	{r4, pc}

000d7a64 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7a64:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7a66:	7d03      	ldrb	r3, [r0, #20]
   d7a68:	2b06      	cmp	r3, #6
{
   d7a6a:	b08d      	sub	sp, #52	; 0x34
   d7a6c:	460e      	mov	r6, r1
   d7a6e:	f100 0704 	add.w	r7, r0, #4
   d7a72:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d7a76:	d012      	beq.n	d7a9e <_ZNK9IPAddress7printToER5Print+0x3a>
   d7a78:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7a7c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7a80:	220a      	movs	r2, #10
   d7a82:	4630      	mov	r0, r6
   d7a84:	f000 f933 	bl	d7cee <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7a88:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7a8a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d7a8c:	d019      	beq.n	d7ac2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d7a8e:	2c00      	cmp	r4, #0
   d7a90:	d0f4      	beq.n	d7a7c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d7a92:	212e      	movs	r1, #46	; 0x2e
   d7a94:	4630      	mov	r0, r6
   d7a96:	f000 f927 	bl	d7ce8 <_ZN5Print5printEc>
   d7a9a:	4404      	add	r4, r0
   d7a9c:	e7ee      	b.n	d7a7c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7a9e:	232f      	movs	r3, #47	; 0x2f
   d7aa0:	466a      	mov	r2, sp
   d7aa2:	4639      	mov	r1, r7
   d7aa4:	200a      	movs	r0, #10
		buf[0] = 0;
   d7aa6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7aaa:	f7ff f941 	bl	d6d30 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d7aae:	4668      	mov	r0, sp
   d7ab0:	f001 fd33 	bl	d951a <strlen>
   d7ab4:	6833      	ldr	r3, [r6, #0]
   d7ab6:	4602      	mov	r2, r0
   d7ab8:	68db      	ldr	r3, [r3, #12]
   d7aba:	4669      	mov	r1, sp
   d7abc:	4630      	mov	r0, r6
   d7abe:	4798      	blx	r3
   d7ac0:	4604      	mov	r4, r0
    }
    return n;
}
   d7ac2:	4620      	mov	r0, r4
   d7ac4:	b00d      	add	sp, #52	; 0x34
   d7ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7ac8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d7ac8:	b510      	push	{r4, lr}
   d7aca:	4b05      	ldr	r3, [pc, #20]	; (d7ae0 <_ZN9IPAddressC1Ev+0x18>)
   d7acc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7ace:	2211      	movs	r2, #17
   d7ad0:	f840 3b04 	str.w	r3, [r0], #4
   d7ad4:	2100      	movs	r1, #0
   d7ad6:	f001 fcc5 	bl	d9464 <memset>
}
   d7ada:	4620      	mov	r0, r4
   d7adc:	bd10      	pop	{r4, pc}
   d7ade:	bf00      	nop
   d7ae0:	000dbdc8 	.word	0x000dbdc8

000d7ae4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7ae4:	4603      	mov	r3, r0
   d7ae6:	4a07      	ldr	r2, [pc, #28]	; (d7b04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7ae8:	b510      	push	{r4, lr}
   d7aea:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7aee:	f101 0210 	add.w	r2, r1, #16
   d7af2:	f851 4b04 	ldr.w	r4, [r1], #4
   d7af6:	f843 4b04 	str.w	r4, [r3], #4
   d7afa:	4291      	cmp	r1, r2
   d7afc:	d1f9      	bne.n	d7af2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7afe:	780a      	ldrb	r2, [r1, #0]
   d7b00:	701a      	strb	r2, [r3, #0]
}
   d7b02:	bd10      	pop	{r4, pc}
   d7b04:	000dbdc8 	.word	0x000dbdc8

000d7b08 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7b08:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7b0a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7b0e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7b12:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7b16:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7b1a:	2304      	movs	r3, #4
   d7b1c:	6041      	str	r1, [r0, #4]
   d7b1e:	7503      	strb	r3, [r0, #20]
}
   d7b20:	bd10      	pop	{r4, pc}

000d7b22 <_ZN9IPAddressaSEPKh>:
{
   d7b22:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7b24:	78cb      	ldrb	r3, [r1, #3]
   d7b26:	9300      	str	r3, [sp, #0]
   d7b28:	788b      	ldrb	r3, [r1, #2]
   d7b2a:	784a      	ldrb	r2, [r1, #1]
   d7b2c:	7809      	ldrb	r1, [r1, #0]
   d7b2e:	f7ff ffeb 	bl	d7b08 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7b32:	b002      	add	sp, #8
   d7b34:	bd10      	pop	{r4, pc}
	...

000d7b38 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7b38:	4b01      	ldr	r3, [pc, #4]	; (d7b40 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7b3a:	4a02      	ldr	r2, [pc, #8]	; (d7b44 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7b3c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7b3e:	4770      	bx	lr
   d7b40:	2003e620 	.word	0x2003e620
   d7b44:	000dbdd4 	.word	0x000dbdd4

000d7b48 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7b48:	2300      	movs	r3, #0
   d7b4a:	6840      	ldr	r0, [r0, #4]
   d7b4c:	461a      	mov	r2, r3
   d7b4e:	f7ff ba5d 	b.w	d700c <network_connect>

000d7b52 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7b52:	6840      	ldr	r0, [r0, #4]
   d7b54:	2200      	movs	r2, #0
   d7b56:	2102      	movs	r1, #2
   d7b58:	f7ff ba68 	b.w	d702c <network_disconnect>

000d7b5c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7b5c:	2200      	movs	r2, #0
   d7b5e:	6840      	ldr	r0, [r0, #4]
   d7b60:	4611      	mov	r1, r2
   d7b62:	f7ff ba5b 	b.w	d701c <network_connecting>

000d7b66 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7b66:	2200      	movs	r2, #0
   d7b68:	6840      	ldr	r0, [r0, #4]
   d7b6a:	4611      	mov	r1, r2
   d7b6c:	f7ff ba66 	b.w	d703c <network_ready>

000d7b70 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7b70:	2300      	movs	r3, #0
   d7b72:	6840      	ldr	r0, [r0, #4]
   d7b74:	461a      	mov	r2, r3
   d7b76:	4619      	mov	r1, r3
   d7b78:	f7ff ba68 	b.w	d704c <network_on>

000d7b7c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7b7c:	2300      	movs	r3, #0
   d7b7e:	6840      	ldr	r0, [r0, #4]
   d7b80:	461a      	mov	r2, r3
   d7b82:	4619      	mov	r1, r3
   d7b84:	f7ff ba6a 	b.w	d705c <network_off>

000d7b88 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7b88:	6840      	ldr	r0, [r0, #4]
   d7b8a:	2200      	movs	r2, #0
   d7b8c:	f081 0101 	eor.w	r1, r1, #1
   d7b90:	f7ff ba6c 	b.w	d706c <network_listen>

000d7b94 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7b94:	6840      	ldr	r0, [r0, #4]
   d7b96:	2200      	movs	r2, #0
   d7b98:	f7ff ba78 	b.w	d708c <network_set_listen_timeout>

000d7b9c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7b9c:	2200      	movs	r2, #0
   d7b9e:	6840      	ldr	r0, [r0, #4]
   d7ba0:	4611      	mov	r1, r2
   d7ba2:	f7ff ba7b 	b.w	d709c <network_get_listen_timeout>

000d7ba6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7ba6:	2200      	movs	r2, #0
   d7ba8:	6840      	ldr	r0, [r0, #4]
   d7baa:	4611      	mov	r1, r2
   d7bac:	f7ff ba66 	b.w	d707c <network_listening>

000d7bb0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7bb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7bb4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7bb6:	b095      	sub	sp, #84	; 0x54
   d7bb8:	4616      	mov	r6, r2
   d7bba:	460d      	mov	r5, r1
   d7bbc:	4607      	mov	r7, r0
    IPAddress addr;
   d7bbe:	f7ff ff83 	bl	d7ac8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7bc2:	4621      	mov	r1, r4
   d7bc4:	2218      	movs	r2, #24
   d7bc6:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7bc8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7bca:	f001 fc4b 	bl	d9464 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7bce:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7bd0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7bd4:	4621      	mov	r1, r4
   d7bd6:	466b      	mov	r3, sp
   d7bd8:	aa0c      	add	r2, sp, #48	; 0x30
   d7bda:	4630      	mov	r0, r6
   d7bdc:	f7ff f8b8 	bl	d6d50 <netdb_getaddrinfo>
    if (!r) {
   d7be0:	4604      	mov	r4, r0
   d7be2:	2800      	cmp	r0, #0
   d7be4:	d146      	bne.n	d7c74 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7be6:	4602      	mov	r2, r0
   d7be8:	2101      	movs	r1, #1
   d7bea:	6868      	ldr	r0, [r5, #4]
   d7bec:	f7ff fa26 	bl	d703c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7bf0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7bf2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7bf4:	4622      	mov	r2, r4
   d7bf6:	6868      	ldr	r0, [r5, #4]
   d7bf8:	f7ff fa20 	bl	d703c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7bfc:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7bfe:	4681      	mov	r9, r0
        bool ok = false;
   d7c00:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7c02:	2e00      	cmp	r6, #0
   d7c04:	d036      	beq.n	d7c74 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d7c06:	2900      	cmp	r1, #0
   d7c08:	d134      	bne.n	d7c74 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7c0a:	6873      	ldr	r3, [r6, #4]
   d7c0c:	2b02      	cmp	r3, #2
   d7c0e:	d003      	beq.n	d7c18 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7c10:	2b0a      	cmp	r3, #10
   d7c12:	d00b      	beq.n	d7c2c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7c14:	69f6      	ldr	r6, [r6, #28]
   d7c16:	e7f4      	b.n	d7c02 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7c18:	f1b8 0f00 	cmp.w	r8, #0
   d7c1c:	d004      	beq.n	d7c28 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7c1e:	6971      	ldr	r1, [r6, #20]
   d7c20:	4638      	mov	r0, r7
   d7c22:	3104      	adds	r1, #4
   d7c24:	f7ff ff7d 	bl	d7b22 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d7c28:	4641      	mov	r1, r8
   d7c2a:	e7f3      	b.n	d7c14 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7c2c:	f1b9 0f00 	cmp.w	r9, #0
   d7c30:	d101      	bne.n	d7c36 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7c32:	4649      	mov	r1, r9
   d7c34:	e7ee      	b.n	d7c14 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7c36:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7c38:	2210      	movs	r2, #16
   d7c3a:	a801      	add	r0, sp, #4
   d7c3c:	f001 fc12 	bl	d9464 <memset>
                    a.v = 6;
   d7c40:	2306      	movs	r3, #6
   d7c42:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7c46:	ad01      	add	r5, sp, #4
   d7c48:	f104 0308 	add.w	r3, r4, #8
   d7c4c:	3418      	adds	r4, #24
   d7c4e:	6818      	ldr	r0, [r3, #0]
   d7c50:	6859      	ldr	r1, [r3, #4]
   d7c52:	462a      	mov	r2, r5
   d7c54:	c203      	stmia	r2!, {r0, r1}
   d7c56:	3308      	adds	r3, #8
   d7c58:	42a3      	cmp	r3, r4
   d7c5a:	4615      	mov	r5, r2
   d7c5c:	d1f7      	bne.n	d7c4e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d7c5e:	a901      	add	r1, sp, #4
   d7c60:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7c62:	ad07      	add	r5, sp, #28
   d7c64:	f7ff ff3e 	bl	d7ae4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7c68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7c6a:	1d3c      	adds	r4, r7, #4
   d7c6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7c6e:	682b      	ldr	r3, [r5, #0]
   d7c70:	7023      	strb	r3, [r4, #0]
   d7c72:	e7de      	b.n	d7c32 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7c74:	9800      	ldr	r0, [sp, #0]
   d7c76:	f7ff f863 	bl	d6d40 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7c7a:	4638      	mov	r0, r7
   d7c7c:	b015      	add	sp, #84	; 0x54
   d7c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7c84 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7c84:	4b02      	ldr	r3, [pc, #8]	; (d7c90 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7c86:	4a03      	ldr	r2, [pc, #12]	; (d7c94 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7c88:	601a      	str	r2, [r3, #0]
   d7c8a:	2200      	movs	r2, #0
   d7c8c:	605a      	str	r2, [r3, #4]

} // spark
   d7c8e:	4770      	bx	lr
   d7c90:	2003e624 	.word	0x2003e624
   d7c94:	000dbde0 	.word	0x000dbde0

000d7c98 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7c9a:	4606      	mov	r6, r0
   d7c9c:	460d      	mov	r5, r1
  size_t n = 0;
   d7c9e:	188f      	adds	r7, r1, r2
   d7ca0:	2400      	movs	r4, #0
  while (size--) {
   d7ca2:	42bd      	cmp	r5, r7
   d7ca4:	d00c      	beq.n	d7cc0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7ca6:	6833      	ldr	r3, [r6, #0]
   d7ca8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7cac:	689b      	ldr	r3, [r3, #8]
   d7cae:	4630      	mov	r0, r6
   d7cb0:	4798      	blx	r3
     if (chunk>=0)
   d7cb2:	1e03      	subs	r3, r0, #0
   d7cb4:	db01      	blt.n	d7cba <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7cb6:	441c      	add	r4, r3
  while (size--) {
   d7cb8:	e7f3      	b.n	d7ca2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7cba:	2c00      	cmp	r4, #0
   d7cbc:	bf08      	it	eq
   d7cbe:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7cc0:	4620      	mov	r0, r4
   d7cc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7cc4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d7cc4:	b513      	push	{r0, r1, r4, lr}
   d7cc6:	4604      	mov	r4, r0
    }
   d7cc8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d7cca:	b159      	cbz	r1, d7ce4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7ccc:	9101      	str	r1, [sp, #4]
   d7cce:	f001 fc24 	bl	d951a <strlen>
   d7cd2:	6823      	ldr	r3, [r4, #0]
   d7cd4:	9901      	ldr	r1, [sp, #4]
   d7cd6:	68db      	ldr	r3, [r3, #12]
   d7cd8:	4602      	mov	r2, r0
   d7cda:	4620      	mov	r0, r4
    }
   d7cdc:	b002      	add	sp, #8
   d7cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7ce2:	4718      	bx	r3
    }
   d7ce4:	b002      	add	sp, #8
   d7ce6:	bd10      	pop	{r4, pc}

000d7ce8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7ce8:	6803      	ldr	r3, [r0, #0]
   d7cea:	689b      	ldr	r3, [r3, #8]
   d7cec:	4718      	bx	r3

000d7cee <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7cee:	b530      	push	{r4, r5, lr}
   d7cf0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7cf2:	2300      	movs	r3, #0
   d7cf4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7cf8:	2a01      	cmp	r2, #1
   d7cfa:	bf98      	it	ls
   d7cfc:	220a      	movls	r2, #10
   d7cfe:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7d00:	460d      	mov	r5, r1
   d7d02:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d7d06:	fb01 5312 	mls	r3, r1, r2, r5
   d7d0a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7d0e:	2b09      	cmp	r3, #9
   d7d10:	bf94      	ite	ls
   d7d12:	3330      	addls	r3, #48	; 0x30
   d7d14:	3337      	addhi	r3, #55	; 0x37
   d7d16:	b2db      	uxtb	r3, r3
  } while(n);
   d7d18:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7d1a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7d1e:	d9ef      	bls.n	d7d00 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7d20:	4621      	mov	r1, r4
   d7d22:	f7ff ffcf 	bl	d7cc4 <_ZN5Print5writeEPKc>
}
   d7d26:	b00b      	add	sp, #44	; 0x2c
   d7d28:	bd30      	pop	{r4, r5, pc}

000d7d2a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7d2a:	b510      	push	{r4, lr}
   d7d2c:	4604      	mov	r4, r0
   d7d2e:	f7fc fafb 	bl	d4328 <_ZNSt14_Function_baseD1Ev>
   d7d32:	4620      	mov	r0, r4
   d7d34:	bd10      	pop	{r4, pc}
	...

000d7d38 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7d38:	4803      	ldr	r0, [pc, #12]	; (d7d48 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7d3a:	4a04      	ldr	r2, [pc, #16]	; (d7d4c <_GLOBAL__sub_I_RGB+0x14>)
   d7d3c:	4904      	ldr	r1, [pc, #16]	; (d7d50 <_GLOBAL__sub_I_RGB+0x18>)
   d7d3e:	2300      	movs	r3, #0
   d7d40:	6083      	str	r3, [r0, #8]
   d7d42:	f000 bced 	b.w	d8720 <__aeabi_atexit>
   d7d46:	bf00      	nop
   d7d48:	2003e62c 	.word	0x2003e62c
   d7d4c:	2003de70 	.word	0x2003de70
   d7d50:	000d7d2b 	.word	0x000d7d2b

000d7d54 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d7d54:	b510      	push	{r4, lr}
   d7d56:	4604      	mov	r4, r0
   d7d58:	4608      	mov	r0, r1
{
    _spi = spi;
   d7d5a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d7d5c:	f7ff f800 	bl	d6d60 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7d60:	2300      	movs	r3, #0
   d7d62:	6063      	str	r3, [r4, #4]
}
   d7d64:	4620      	mov	r0, r4
   d7d66:	bd10      	pop	{r4, pc}

000d7d68 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7d68:	b510      	push	{r4, lr}
   d7d6a:	4604      	mov	r4, r0
{
	free(buffer);
   d7d6c:	6800      	ldr	r0, [r0, #0]
   d7d6e:	f7ff f9a5 	bl	d70bc <free>
}
   d7d72:	4620      	mov	r0, r4
   d7d74:	bd10      	pop	{r4, pc}

000d7d76 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7d76:	b510      	push	{r4, lr}
   d7d78:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7d7a:	6800      	ldr	r0, [r0, #0]
   d7d7c:	b108      	cbz	r0, d7d82 <_ZN6String10invalidateEv+0xc>
   d7d7e:	f7ff f99d 	bl	d70bc <free>
	buffer = NULL;
   d7d82:	2300      	movs	r3, #0
	capacity = len = 0;
   d7d84:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d7d88:	6023      	str	r3, [r4, #0]
}
   d7d8a:	bd10      	pop	{r4, pc}

000d7d8c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7d8c:	b538      	push	{r3, r4, r5, lr}
   d7d8e:	4604      	mov	r4, r0
   d7d90:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7d92:	6800      	ldr	r0, [r0, #0]
   d7d94:	3101      	adds	r1, #1
   d7d96:	f7ff f999 	bl	d70cc <realloc>
	if (newbuffer) {
   d7d9a:	b110      	cbz	r0, d7da2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7d9c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d7da0:	2001      	movs	r0, #1
	}
	return 0;
}
   d7da2:	bd38      	pop	{r3, r4, r5, pc}

000d7da4 <_ZN6String7reserveEj>:
{
   d7da4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7da6:	6803      	ldr	r3, [r0, #0]
{
   d7da8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7daa:	b123      	cbz	r3, d7db6 <_ZN6String7reserveEj+0x12>
   d7dac:	6843      	ldr	r3, [r0, #4]
   d7dae:	428b      	cmp	r3, r1
   d7db0:	d301      	bcc.n	d7db6 <_ZN6String7reserveEj+0x12>
   d7db2:	2001      	movs	r0, #1
}
   d7db4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d7db6:	4620      	mov	r0, r4
   d7db8:	f7ff ffe8 	bl	d7d8c <_ZN6String12changeBufferEj>
   d7dbc:	2800      	cmp	r0, #0
   d7dbe:	d0f9      	beq.n	d7db4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d7dc0:	68a3      	ldr	r3, [r4, #8]
   d7dc2:	2b00      	cmp	r3, #0
   d7dc4:	d1f5      	bne.n	d7db2 <_ZN6String7reserveEj+0xe>
   d7dc6:	6822      	ldr	r2, [r4, #0]
   d7dc8:	7013      	strb	r3, [r2, #0]
   d7dca:	e7f2      	b.n	d7db2 <_ZN6String7reserveEj+0xe>

000d7dcc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7dcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7dce:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d7dd0:	4611      	mov	r1, r2
   d7dd2:	9201      	str	r2, [sp, #4]
{
   d7dd4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d7dd6:	f7ff ffe5 	bl	d7da4 <_ZN6String7reserveEj>
   d7dda:	9a01      	ldr	r2, [sp, #4]
   d7ddc:	b928      	cbnz	r0, d7dea <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d7dde:	4620      	mov	r0, r4
   d7de0:	f7ff ffc9 	bl	d7d76 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d7de4:	4620      	mov	r0, r4
   d7de6:	b003      	add	sp, #12
   d7de8:	bd30      	pop	{r4, r5, pc}
	len = length;
   d7dea:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d7dec:	4629      	mov	r1, r5
   d7dee:	6820      	ldr	r0, [r4, #0]
   d7df0:	f001 fb10 	bl	d9414 <memcpy>
	buffer[len] = 0;
   d7df4:	6822      	ldr	r2, [r4, #0]
   d7df6:	68a3      	ldr	r3, [r4, #8]
   d7df8:	2100      	movs	r1, #0
   d7dfa:	54d1      	strb	r1, [r2, r3]
	return *this;
   d7dfc:	e7f2      	b.n	d7de4 <_ZN6String4copyEPKcj+0x18>

000d7dfe <_ZN6StringC1EPKc>:
	buffer = NULL;
   d7dfe:	2300      	movs	r3, #0
String::String(const char *cstr)
   d7e00:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d7e02:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d7e06:	4604      	mov	r4, r0
	len = 0;
   d7e08:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7e0a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d7e0c:	b141      	cbz	r1, d7e20 <_ZN6StringC1EPKc+0x22>
   d7e0e:	4608      	mov	r0, r1
   d7e10:	9101      	str	r1, [sp, #4]
   d7e12:	f001 fb82 	bl	d951a <strlen>
   d7e16:	9901      	ldr	r1, [sp, #4]
   d7e18:	4602      	mov	r2, r0
   d7e1a:	4620      	mov	r0, r4
   d7e1c:	f7ff ffd6 	bl	d7dcc <_ZN6String4copyEPKcj>
}
   d7e20:	4620      	mov	r0, r4
   d7e22:	b002      	add	sp, #8
   d7e24:	bd10      	pop	{r4, pc}

000d7e26 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d7e26:	4288      	cmp	r0, r1
{
   d7e28:	b510      	push	{r4, lr}
   d7e2a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7e2c:	d005      	beq.n	d7e3a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7e2e:	680b      	ldr	r3, [r1, #0]
   d7e30:	b12b      	cbz	r3, d7e3e <_ZN6StringaSERKS_+0x18>
   d7e32:	688a      	ldr	r2, [r1, #8]
   d7e34:	4619      	mov	r1, r3
   d7e36:	f7ff ffc9 	bl	d7dcc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d7e3a:	4620      	mov	r0, r4
   d7e3c:	bd10      	pop	{r4, pc}
	else invalidate();
   d7e3e:	f7ff ff9a 	bl	d7d76 <_ZN6String10invalidateEv>
   d7e42:	e7fa      	b.n	d7e3a <_ZN6StringaSERKS_+0x14>

000d7e44 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d7e44:	b510      	push	{r4, lr}
	buffer = NULL;
   d7e46:	2300      	movs	r3, #0
String::String(const String &value)
   d7e48:	4604      	mov	r4, r0
	capacity = 0;
   d7e4a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d7e4e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7e50:	7303      	strb	r3, [r0, #12]
	*this = value;
   d7e52:	f7ff ffe8 	bl	d7e26 <_ZN6StringaSERKS_>
}
   d7e56:	4620      	mov	r0, r4
   d7e58:	bd10      	pop	{r4, pc}

000d7e5a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d7e5a:	b570      	push	{r4, r5, r6, lr}
   d7e5c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d7e5e:	460e      	mov	r6, r1
   d7e60:	b909      	cbnz	r1, d7e66 <_ZN6String6concatEPKcj+0xc>
   d7e62:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d7e64:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d7e66:	b16a      	cbz	r2, d7e84 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d7e68:	6884      	ldr	r4, [r0, #8]
   d7e6a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d7e6c:	4621      	mov	r1, r4
   d7e6e:	f7ff ff99 	bl	d7da4 <_ZN6String7reserveEj>
   d7e72:	2800      	cmp	r0, #0
   d7e74:	d0f5      	beq.n	d7e62 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d7e76:	6828      	ldr	r0, [r5, #0]
   d7e78:	68ab      	ldr	r3, [r5, #8]
   d7e7a:	4631      	mov	r1, r6
   d7e7c:	4418      	add	r0, r3
   d7e7e:	f001 fb27 	bl	d94d0 <strcpy>
	len = newlen;
   d7e82:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d7e84:	2001      	movs	r0, #1
   d7e86:	e7ed      	b.n	d7e64 <_ZN6String6concatEPKcj+0xa>

000d7e88 <_ZplRK15StringSumHelperPKc>:
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d7e88:	b513      	push	{r0, r1, r4, lr}
   d7e8a:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d7e8c:	b929      	cbnz	r1, d7e9a <_ZplRK15StringSumHelperPKc+0x12>
   d7e8e:	4620      	mov	r0, r4
   d7e90:	f7ff ff71 	bl	d7d76 <_ZN6String10invalidateEv>
	return a;
}
   d7e94:	4620      	mov	r0, r4
   d7e96:	b002      	add	sp, #8
   d7e98:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d7e9a:	4608      	mov	r0, r1
   d7e9c:	9101      	str	r1, [sp, #4]
   d7e9e:	f001 fb3c 	bl	d951a <strlen>
   d7ea2:	9901      	ldr	r1, [sp, #4]
   d7ea4:	4602      	mov	r2, r0
   d7ea6:	4620      	mov	r0, r4
   d7ea8:	f7ff ffd7 	bl	d7e5a <_ZN6String6concatEPKcj>
   d7eac:	2800      	cmp	r0, #0
   d7eae:	d0ee      	beq.n	d7e8e <_ZplRK15StringSumHelperPKc+0x6>
   d7eb0:	e7f0      	b.n	d7e94 <_ZplRK15StringSumHelperPKc+0xc>

000d7eb2 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d7eb2:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7eb4:	6882      	ldr	r2, [r0, #8]
   d7eb6:	b93a      	cbnz	r2, d7ec8 <_ZNK6String6equalsEPKc+0x16>
   d7eb8:	b121      	cbz	r1, d7ec4 <_ZNK6String6equalsEPKc+0x12>
   d7eba:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d7ebc:	fab0 f080 	clz	r0, r0
   d7ec0:	0940      	lsrs	r0, r0, #5
   d7ec2:	e000      	b.n	d7ec6 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7ec4:	2001      	movs	r0, #1
}
   d7ec6:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d7ec8:	6800      	ldr	r0, [r0, #0]
   d7eca:	b909      	cbnz	r1, d7ed0 <_ZNK6String6equalsEPKc+0x1e>
   d7ecc:	7800      	ldrb	r0, [r0, #0]
   d7ece:	e7f5      	b.n	d7ebc <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d7ed0:	f001 faf4 	bl	d94bc <strcmp>
   d7ed4:	e7f2      	b.n	d7ebc <_ZNK6String6equalsEPKc+0xa>
	...

000d7ed8 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d7ed8:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d7eda:	6800      	ldr	r0, [r0, #0]
   d7edc:	b140      	cbz	r0, d7ef0 <_ZNK6String7toFloatEv+0x18>
   d7ede:	f001 fa71 	bl	d93c4 <atof>
   d7ee2:	ec51 0b10 	vmov	r0, r1, d0
   d7ee6:	f001 f9d9 	bl	d929c <__aeabi_d2f>
   d7eea:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d7eee:	bd08      	pop	{r3, pc}
	return 0;
   d7ef0:	ed9f 0a01 	vldr	s0, [pc, #4]	; d7ef8 <_ZNK6String7toFloatEv+0x20>
   d7ef4:	e7fb      	b.n	d7eee <_ZNK6String7toFloatEv+0x16>
   d7ef6:	bf00      	nop
   d7ef8:	00000000 	.word	0x00000000

000d7efc <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d7efc:	b507      	push	{r0, r1, r2, lr}
   d7efe:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d7f00:	2100      	movs	r1, #0
{
   d7f02:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d7f04:	9100      	str	r1, [sp, #0]
   d7f06:	2001      	movs	r0, #1
   d7f08:	218c      	movs	r1, #140	; 0x8c
   d7f0a:	f7ff f80d 	bl	d6f28 <system_reset>
}
   d7f0e:	b003      	add	sp, #12
   d7f10:	f85d fb04 	ldr.w	pc, [sp], #4

000d7f14 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d7f14:	4601      	mov	r1, r0
    reset(0, flags);
   d7f16:	2000      	movs	r0, #0
   d7f18:	f7ff bff0 	b.w	d7efc <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d7f1c <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d7f1c:	2000      	movs	r0, #0
   d7f1e:	f7ff bff9 	b.w	d7f14 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d7f24 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7f24:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d7f26:	4b09      	ldr	r3, [pc, #36]	; (d7f4c <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7f28:	4c09      	ldr	r4, [pc, #36]	; (d7f50 <_GLOBAL__sub_I_System+0x2c>)
   d7f2a:	2202      	movs	r2, #2
   d7f2c:	2000      	movs	r0, #0
   d7f2e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d7f30:	4b08      	ldr	r3, [pc, #32]	; (d7f54 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d7f32:	6020      	str	r0, [r4, #0]
   d7f34:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d7f36:	71a0      	strb	r0, [r4, #6]
   d7f38:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7f3a:	f7fe ffa9 	bl	d6e90 <set_system_mode>
SystemClass System;
   d7f3e:	4620      	mov	r0, r4
   d7f40:	4a05      	ldr	r2, [pc, #20]	; (d7f58 <_GLOBAL__sub_I_System+0x34>)
   d7f42:	4906      	ldr	r1, [pc, #24]	; (d7f5c <_GLOBAL__sub_I_System+0x38>)
   d7f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d7f48:	f000 bbea 	b.w	d8720 <__aeabi_atexit>
   d7f4c:	2003e648 	.word	0x2003e648
   d7f50:	2003e63c 	.word	0x2003e63c
   d7f54:	ffff0000 	.word	0xffff0000
   d7f58:	2003de70 	.word	0x2003de70
   d7f5c:	000d42c7 	.word	0x000d42c7

000d7f60 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d7f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d7f64:	4a15      	ldr	r2, [pc, #84]	; (d7fbc <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d7f66:	f8df 8060 	ldr.w	r8, [pc, #96]	; d7fc8 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d7f6a:	e9d2 3200 	ldrd	r3, r2, [r2]
   d7f6e:	18c0      	adds	r0, r0, r3
   d7f70:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d7f74:	4a12      	ldr	r2, [pc, #72]	; (d7fc0 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d7f76:	e9d2 3200 	ldrd	r3, r2, [r2]
   d7f7a:	18c6      	adds	r6, r0, r3
   d7f7c:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d7f80:	e9d8 2300 	ldrd	r2, r3, [r8]
   d7f84:	42bb      	cmp	r3, r7
   d7f86:	bf08      	it	eq
   d7f88:	42b2      	cmpeq	r2, r6
{
   d7f8a:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d7f8c:	d013      	beq.n	d7fb6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d7f8e:	a903      	add	r1, sp, #12
   d7f90:	4668      	mov	r0, sp
   d7f92:	e9cd 6700 	strd	r6, r7, [sp]
   d7f96:	f7ff f8d9 	bl	d714c <localtime_r>
	calendar_time.tm_year += 1900;
   d7f9a:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7f9c:	4d09      	ldr	r5, [pc, #36]	; (d7fc4 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d7f9e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7fa2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d7fa4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d7fae:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7fb2:	6823      	ldr	r3, [r4, #0]
   d7fb4:	602b      	str	r3, [r5, #0]
    }
}
   d7fb6:	b00c      	add	sp, #48	; 0x30
   d7fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7fbc:	2003e680 	.word	0x2003e680
   d7fc0:	2003e678 	.word	0x2003e678
   d7fc4:	2003e654 	.word	0x2003e654
   d7fc8:	2003e688 	.word	0x2003e688

000d7fcc <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d7fcc:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7fce:	2000      	movs	r0, #0
   d7fd0:	f7fe fffc 	bl	d6fcc <spark_sync_time_pending>
   d7fd4:	b128      	cbz	r0, d7fe2 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7fd6:	f7fe ffd1 	bl	d6f7c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7fda:	f080 0001 	eor.w	r0, r0, #1
   d7fde:	b2c0      	uxtb	r0, r0
    }
   d7fe0:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7fe2:	2001      	movs	r0, #1
   d7fe4:	e7fc      	b.n	d7fe0 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d7fe6 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d7fe6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d7fe8:	4602      	mov	r2, r0
   d7fea:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d7fec:	4668      	mov	r0, sp
    struct timeval tv = {
   d7fee:	2100      	movs	r1, #0
    };
   d7ff0:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d7ff4:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d7ff8:	f7fe fdf2 	bl	d6be0 <hal_rtc_set_time>
   d7ffc:	4602      	mov	r2, r0
   d7ffe:	b910      	cbnz	r0, d8006 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d8000:	4601      	mov	r1, r0
   d8002:	f7fe ff75 	bl	d6ef0 <system_notify_time_changed>
    }
}
   d8006:	b005      	add	sp, #20
   d8008:	f85d fb04 	ldr.w	pc, [sp], #4

000d800c <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d800c:	b530      	push	{r4, r5, lr}
   d800e:	4604      	mov	r4, r0
    t += time_zone_cache;
   d8010:	4818      	ldr	r0, [pc, #96]	; (d8074 <_ZN9TimeClass7timeStrEx+0x68>)
   d8012:	e9d0 1000 	ldrd	r1, r0, [r0]
   d8016:	1852      	adds	r2, r2, r1
   d8018:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d801c:	4816      	ldr	r0, [pc, #88]	; (d8078 <_ZN9TimeClass7timeStrEx+0x6c>)
   d801e:	e9d0 1000 	ldrd	r1, r0, [r0]
   d8022:	1852      	adds	r2, r2, r1
{
   d8024:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d8026:	eb40 0303 	adc.w	r3, r0, r3
   d802a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d802e:	2224      	movs	r2, #36	; 0x24
   d8030:	eb0d 0002 	add.w	r0, sp, r2
   d8034:	2100      	movs	r1, #0
   d8036:	f001 fa15 	bl	d9464 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d803a:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d803c:	a909      	add	r1, sp, #36	; 0x24
   d803e:	4668      	mov	r0, sp
   d8040:	f7ff f884 	bl	d714c <localtime_r>
    char ascstr[26] = {};
   d8044:	2216      	movs	r2, #22
   d8046:	4629      	mov	r1, r5
   d8048:	a803      	add	r0, sp, #12
   d804a:	9502      	str	r5, [sp, #8]
   d804c:	f001 fa0a 	bl	d9464 <memset>
    asctime_r(&calendar_time, ascstr);
   d8050:	a902      	add	r1, sp, #8
   d8052:	a809      	add	r0, sp, #36	; 0x24
   d8054:	f001 f990 	bl	d9378 <asctime_r>
    int len = strlen(ascstr);
   d8058:	a802      	add	r0, sp, #8
   d805a:	f001 fa5e 	bl	d951a <strlen>
    ascstr[len-1] = 0; // remove final newline
   d805e:	ab12      	add	r3, sp, #72	; 0x48
   d8060:	4418      	add	r0, r3
    return String(ascstr);
   d8062:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d8064:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d8068:	4620      	mov	r0, r4
   d806a:	f7ff fec8 	bl	d7dfe <_ZN6StringC1EPKc>
}
   d806e:	4620      	mov	r0, r4
   d8070:	b013      	add	sp, #76	; 0x4c
   d8072:	bd30      	pop	{r4, r5, pc}
   d8074:	2003e680 	.word	0x2003e680
   d8078:	2003e678 	.word	0x2003e678

000d807c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d807c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8080:	b0a5      	sub	sp, #148	; 0x94
   d8082:	4607      	mov	r7, r0
   d8084:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d8086:	a814      	add	r0, sp, #80	; 0x50
{
   d8088:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d808a:	223f      	movs	r2, #63	; 0x3f
{
   d808c:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d808e:	f001 fa5e 	bl	d954e <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d8092:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d8094:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d8096:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d809a:	f001 fa3e 	bl	d951a <strlen>
   d809e:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d80a0:	bb5d      	cbnz	r5, d80fa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d80a2:	492a      	ldr	r1, [pc, #168]	; (d814c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d80a4:	a803      	add	r0, sp, #12
   d80a6:	f001 fa13 	bl	d94d0 <strcpy>
   d80aa:	ae14      	add	r6, sp, #80	; 0x50
{
   d80ac:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d80ae:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d80b2:	45ab      	cmp	fp, r5
   d80b4:	d936      	bls.n	d8124 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d80b6:	46b1      	mov	r9, r6
   d80b8:	f105 0a01 	add.w	sl, r5, #1
   d80bc:	f819 3b01 	ldrb.w	r3, [r9], #1
   d80c0:	2b25      	cmp	r3, #37	; 0x25
   d80c2:	d117      	bne.n	d80f4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d80c4:	7873      	ldrb	r3, [r6, #1]
   d80c6:	2b7a      	cmp	r3, #122	; 0x7a
   d80c8:	d114      	bne.n	d80f4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d80ca:	a803      	add	r0, sp, #12
   d80cc:	f001 fa25 	bl	d951a <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d80d0:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d80d2:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d80d4:	1828      	adds	r0, r5, r0
   d80d6:	4418      	add	r0, r3
   d80d8:	ebab 0205 	sub.w	r2, fp, r5
   d80dc:	1cb1      	adds	r1, r6, #2
   d80de:	f001 f999 	bl	d9414 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d80e2:	4622      	mov	r2, r4
   d80e4:	a903      	add	r1, sp, #12
   d80e6:	4630      	mov	r0, r6
   d80e8:	f001 f994 	bl	d9414 <memcpy>
            len = strlen(format_str);
   d80ec:	a814      	add	r0, sp, #80	; 0x50
   d80ee:	f001 fa14 	bl	d951a <strlen>
   d80f2:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d80f4:	464e      	mov	r6, r9
   d80f6:	4655      	mov	r5, sl
   d80f8:	e7d9      	b.n	d80ae <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d80fa:	213c      	movs	r1, #60	; 0x3c
   d80fc:	fb95 f3f1 	sdiv	r3, r5, r1
   d8100:	2b00      	cmp	r3, #0
   d8102:	bfb8      	it	lt
   d8104:	425b      	neglt	r3, r3
   d8106:	fbb3 f2f1 	udiv	r2, r3, r1
   d810a:	fb01 3312 	mls	r3, r1, r2, r3
   d810e:	9300      	str	r3, [sp, #0]
   d8110:	4a0f      	ldr	r2, [pc, #60]	; (d8150 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d8112:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d8116:	2110      	movs	r1, #16
   d8118:	a803      	add	r0, sp, #12
   d811a:	fb95 f3f3 	sdiv	r3, r5, r3
   d811e:	f7fe ffe5 	bl	d70ec <snprintf>
   d8122:	e7c2      	b.n	d80aa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d8124:	2100      	movs	r1, #0
   d8126:	222e      	movs	r2, #46	; 0x2e
   d8128:	a808      	add	r0, sp, #32
   d812a:	9107      	str	r1, [sp, #28]
   d812c:	f001 f99a 	bl	d9464 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d8130:	4643      	mov	r3, r8
   d8132:	aa14      	add	r2, sp, #80	; 0x50
   d8134:	2132      	movs	r1, #50	; 0x32
   d8136:	a807      	add	r0, sp, #28
   d8138:	f7ff f800 	bl	d713c <strftime>
    return String(buf);
   d813c:	a907      	add	r1, sp, #28
   d813e:	4638      	mov	r0, r7
   d8140:	f7ff fe5d 	bl	d7dfe <_ZN6StringC1EPKc>
}
   d8144:	4638      	mov	r0, r7
   d8146:	b025      	add	sp, #148	; 0x94
   d8148:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d814c:	000dbe0c 	.word	0x000dbe0c
   d8150:	000dbe0e 	.word	0x000dbe0e

000d8154 <_ZN9TimeClass6formatExPKc>:
{
   d8154:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8156:	b08d      	sub	sp, #52	; 0x34
   d8158:	e9cd 2300 	strd	r2, r3, [sp]
   d815c:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d815e:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d8160:	b915      	cbnz	r5, d8168 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d8162:	4b19      	ldr	r3, [pc, #100]	; (d81c8 <_ZN9TimeClass6formatExPKc+0x74>)
   d8164:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d8166:	b12d      	cbz	r5, d8174 <_ZN9TimeClass6formatExPKc+0x20>
   d8168:	4b18      	ldr	r3, [pc, #96]	; (d81cc <_ZN9TimeClass6formatExPKc+0x78>)
   d816a:	4628      	mov	r0, r5
   d816c:	6819      	ldr	r1, [r3, #0]
   d816e:	f001 f9a5 	bl	d94bc <strcmp>
   d8172:	b938      	cbnz	r0, d8184 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d8174:	e9dd 2300 	ldrd	r2, r3, [sp]
   d8178:	4620      	mov	r0, r4
   d817a:	f7ff ff47 	bl	d800c <_ZN9TimeClass7timeStrEx>
}
   d817e:	4620      	mov	r0, r4
   d8180:	b00d      	add	sp, #52	; 0x34
   d8182:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d8184:	4e12      	ldr	r6, [pc, #72]	; (d81d0 <_ZN9TimeClass6formatExPKc+0x7c>)
   d8186:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d8188:	4f12      	ldr	r7, [pc, #72]	; (d81d4 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d818a:	e9d6 3200 	ldrd	r3, r2, [r6]
   d818e:	185b      	adds	r3, r3, r1
   d8190:	9901      	ldr	r1, [sp, #4]
   d8192:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d8196:	e9d7 0100 	ldrd	r0, r1, [r7]
   d819a:	181b      	adds	r3, r3, r0
   d819c:	eb41 0202 	adc.w	r2, r1, r2
   d81a0:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d81a4:	2100      	movs	r1, #0
   d81a6:	2224      	movs	r2, #36	; 0x24
   d81a8:	a803      	add	r0, sp, #12
   d81aa:	f001 f95b 	bl	d9464 <memset>
    localtime_r(&t, &calendar_time);
   d81ae:	a903      	add	r1, sp, #12
   d81b0:	4668      	mov	r0, sp
   d81b2:	f7fe ffcb 	bl	d714c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d81b6:	6832      	ldr	r2, [r6, #0]
   d81b8:	683b      	ldr	r3, [r7, #0]
   d81ba:	a903      	add	r1, sp, #12
   d81bc:	4413      	add	r3, r2
   d81be:	4620      	mov	r0, r4
   d81c0:	462a      	mov	r2, r5
   d81c2:	f7ff ff5b 	bl	d807c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d81c6:	e7da      	b.n	d817e <_ZN9TimeClass6formatExPKc+0x2a>
   d81c8:	2003e650 	.word	0x2003e650
   d81cc:	2003dc90 	.word	0x2003dc90
   d81d0:	2003e680 	.word	0x2003e680
   d81d4:	2003e678 	.word	0x2003e678

000d81d8 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d81d8:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d81da:	2000      	movs	r0, #0
   d81dc:	f7fe fce8 	bl	d6bb0 <hal_rtc_time_is_valid>
    if (rtcstate)
   d81e0:	4604      	mov	r4, r0
   d81e2:	b9a0      	cbnz	r0, d820e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d81e4:	f7fe fe4c 	bl	d6e80 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d81e8:	2801      	cmp	r0, #1
   d81ea:	d110      	bne.n	d820e <_ZN9TimeClass7isValidEv+0x36>
   d81ec:	4620      	mov	r0, r4
   d81ee:	f7fe fe77 	bl	d6ee0 <system_thread_get_state>
   d81f2:	b960      	cbnz	r0, d820e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d81f4:	f7ff feea 	bl	d7fcc <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d81f8:	b910      	cbnz	r0, d8200 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d81fa:	f7fe feaf 	bl	d6f5c <spark_process>
        while (_while() && !_condition()) {
   d81fe:	e7f9      	b.n	d81f4 <_ZN9TimeClass7isValidEv+0x1c>
   d8200:	f7ff fee4 	bl	d7fcc <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d8204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d8208:	2000      	movs	r0, #0
   d820a:	f7fe bcd1 	b.w	d6bb0 <hal_rtc_time_is_valid>
}
   d820e:	4620      	mov	r0, r4
   d8210:	bd10      	pop	{r4, pc}

000d8212 <_ZN9TimeClass3nowEv>:
{
   d8212:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d8214:	f7ff ffe0 	bl	d81d8 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d8218:	2210      	movs	r2, #16
   d821a:	2100      	movs	r1, #0
   d821c:	4668      	mov	r0, sp
   d821e:	f001 f921 	bl	d9464 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d8222:	2100      	movs	r1, #0
   d8224:	4668      	mov	r0, sp
   d8226:	f7fe fcd3 	bl	d6bd0 <hal_rtc_get_time>
}
   d822a:	9800      	ldr	r0, [sp, #0]
   d822c:	b005      	add	sp, #20
   d822e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8234 <_ZN9TimeClass4hourEv>:
{
   d8234:	b508      	push	{r3, lr}
	return hour(now());
   d8236:	f7ff ffec 	bl	d8212 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d823a:	17c1      	asrs	r1, r0, #31
   d823c:	f7ff fe90 	bl	d7f60 <_ZL22Refresh_UnixTime_Cachex>
}
   d8240:	4b01      	ldr	r3, [pc, #4]	; (d8248 <_ZN9TimeClass4hourEv+0x14>)
   d8242:	6898      	ldr	r0, [r3, #8]
   d8244:	bd08      	pop	{r3, pc}
   d8246:	bf00      	nop
   d8248:	2003e654 	.word	0x2003e654

000d824c <_ZN9TimeClass4yearEv>:
{
   d824c:	b508      	push	{r3, lr}
	return year(now());
   d824e:	f7ff ffe0 	bl	d8212 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d8252:	17c1      	asrs	r1, r0, #31
   d8254:	f7ff fe84 	bl	d7f60 <_ZL22Refresh_UnixTime_Cachex>
}
   d8258:	4b01      	ldr	r3, [pc, #4]	; (d8260 <_ZN9TimeClass4yearEv+0x14>)
   d825a:	6958      	ldr	r0, [r3, #20]
   d825c:	bd08      	pop	{r3, pc}
   d825e:	bf00      	nop
   d8260:	2003e654 	.word	0x2003e654

000d8264 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8264:	4b02      	ldr	r3, [pc, #8]	; (d8270 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8266:	681a      	ldr	r2, [r3, #0]
   d8268:	4b02      	ldr	r3, [pc, #8]	; (d8274 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d826a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d826c:	4770      	bx	lr
   d826e:	bf00      	nop
   d8270:	2003dc90 	.word	0x2003dc90
   d8274:	2003e650 	.word	0x2003e650

000d8278 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d8278:	4770      	bx	lr

000d827a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d827a:	7441      	strb	r1, [r0, #17]
}
   d827c:	4770      	bx	lr

000d827e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d827e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d8280:	7c00      	ldrb	r0, [r0, #16]
   d8282:	f7fe fdb5 	bl	d6df0 <hal_usart_available_data_for_write>
}
   d8286:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d828a:	bd08      	pop	{r3, pc}

000d828c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d828c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d828e:	7c00      	ldrb	r0, [r0, #16]
   d8290:	f7fe fd86 	bl	d6da0 <hal_usart_available>
}
   d8294:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8298:	bd08      	pop	{r3, pc}

000d829a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d829a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d829c:	7c00      	ldrb	r0, [r0, #16]
   d829e:	f7fe fd8f 	bl	d6dc0 <hal_usart_peek>
}
   d82a2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d82a6:	bd08      	pop	{r3, pc}

000d82a8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d82a8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d82aa:	7c00      	ldrb	r0, [r0, #16]
   d82ac:	f7fe fd80 	bl	d6db0 <hal_usart_read>
}
   d82b0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d82b4:	bd08      	pop	{r3, pc}

000d82b6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d82b6:	7c00      	ldrb	r0, [r0, #16]
   d82b8:	f7fe bd8a 	b.w	d6dd0 <hal_usart_flush>

000d82bc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d82bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d82be:	7c45      	ldrb	r5, [r0, #17]
{
   d82c0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d82c2:	b12d      	cbz	r5, d82d0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d82c4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d82c6:	b003      	add	sp, #12
   d82c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d82cc:	f7fe bd60 	b.w	d6d90 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d82d0:	7c00      	ldrb	r0, [r0, #16]
   d82d2:	9101      	str	r1, [sp, #4]
   d82d4:	f7fe fd8c 	bl	d6df0 <hal_usart_available_data_for_write>
   d82d8:	2800      	cmp	r0, #0
   d82da:	9901      	ldr	r1, [sp, #4]
   d82dc:	dcf2      	bgt.n	d82c4 <_ZN11USARTSerial5writeEh+0x8>
}
   d82de:	4628      	mov	r0, r5
   d82e0:	b003      	add	sp, #12
   d82e2:	bd30      	pop	{r4, r5, pc}

000d82e4 <_ZN11USARTSerialD0Ev>:
   d82e4:	b510      	push	{r4, lr}
   d82e6:	2114      	movs	r1, #20
   d82e8:	4604      	mov	r4, r0
   d82ea:	f000 fa1e 	bl	d872a <_ZdlPvj>
   d82ee:	4620      	mov	r0, r4
   d82f0:	bd10      	pop	{r4, pc}
	...

000d82f4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d82f4:	b510      	push	{r4, lr}
   d82f6:	f04f 0c00 	mov.w	ip, #0
   d82fa:	4604      	mov	r4, r0
   d82fc:	4608      	mov	r0, r1
   d82fe:	4611      	mov	r1, r2
   d8300:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8304:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d8308:	4a04      	ldr	r2, [pc, #16]	; (d831c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d830a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d830c:	2201      	movs	r2, #1
  _serial = serial;
   d830e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8310:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d8312:	461a      	mov	r2, r3
   d8314:	f7fe fd34 	bl	d6d80 <hal_usart_init>
}
   d8318:	4620      	mov	r0, r4
   d831a:	bd10      	pop	{r4, pc}
   d831c:	000dbe40 	.word	0x000dbe40

000d8320 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8320:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8322:	4c0e      	ldr	r4, [pc, #56]	; (d835c <_Z22__fetch_global_Serial1v+0x3c>)
   d8324:	7821      	ldrb	r1, [r4, #0]
   d8326:	f3bf 8f5b 	dmb	ish
   d832a:	f011 0101 	ands.w	r1, r1, #1
   d832e:	d112      	bne.n	d8356 <_Z22__fetch_global_Serial1v+0x36>
   d8330:	4620      	mov	r0, r4
   d8332:	9101      	str	r1, [sp, #4]
   d8334:	f7fb fec0 	bl	d40b8 <__cxa_guard_acquire>
   d8338:	9901      	ldr	r1, [sp, #4]
   d833a:	b160      	cbz	r0, d8356 <_Z22__fetch_global_Serial1v+0x36>
   d833c:	4a08      	ldr	r2, [pc, #32]	; (d8360 <_Z22__fetch_global_Serial1v+0x40>)
   d833e:	4b09      	ldr	r3, [pc, #36]	; (d8364 <_Z22__fetch_global_Serial1v+0x44>)
   d8340:	4809      	ldr	r0, [pc, #36]	; (d8368 <_Z22__fetch_global_Serial1v+0x48>)
   d8342:	f7ff ffd7 	bl	d82f4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d8346:	4620      	mov	r0, r4
   d8348:	f7fb febb 	bl	d40c2 <__cxa_guard_release>
   d834c:	4a07      	ldr	r2, [pc, #28]	; (d836c <_Z22__fetch_global_Serial1v+0x4c>)
   d834e:	4908      	ldr	r1, [pc, #32]	; (d8370 <_Z22__fetch_global_Serial1v+0x50>)
   d8350:	4805      	ldr	r0, [pc, #20]	; (d8368 <_Z22__fetch_global_Serial1v+0x48>)
   d8352:	f000 f9e5 	bl	d8720 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d8356:	4804      	ldr	r0, [pc, #16]	; (d8368 <_Z22__fetch_global_Serial1v+0x48>)
   d8358:	b002      	add	sp, #8
   d835a:	bd10      	pop	{r4, pc}
   d835c:	2003e690 	.word	0x2003e690
   d8360:	2003e694 	.word	0x2003e694
   d8364:	2003e718 	.word	0x2003e718
   d8368:	2003e79c 	.word	0x2003e79c
   d836c:	2003de70 	.word	0x2003de70
   d8370:	000d8279 	.word	0x000d8279

000d8374 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8374:	7441      	strb	r1, [r0, #17]
}
   d8376:	4770      	bx	lr

000d8378 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8378:	4770      	bx	lr

000d837a <_ZN9USBSerial4readEv>:
{
   d837a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d837c:	2100      	movs	r1, #0
   d837e:	7c00      	ldrb	r0, [r0, #16]
   d8380:	f7fe fd56 	bl	d6e30 <HAL_USB_USART_Receive_Data>
}
   d8384:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8388:	bd08      	pop	{r3, pc}

000d838a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d838a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d838c:	2101      	movs	r1, #1
   d838e:	7c00      	ldrb	r0, [r0, #16]
   d8390:	f7fe fd4e 	bl	d6e30 <HAL_USB_USART_Receive_Data>
}
   d8394:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8398:	bd08      	pop	{r3, pc}

000d839a <_ZN9USBSerial17availableForWriteEv>:
{
   d839a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d839c:	7c00      	ldrb	r0, [r0, #16]
   d839e:	f7fe fd3f 	bl	d6e20 <HAL_USB_USART_Available_Data_For_Write>
}
   d83a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d83a6:	bd08      	pop	{r3, pc}

000d83a8 <_ZN9USBSerial9availableEv>:
{
   d83a8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d83aa:	7c00      	ldrb	r0, [r0, #16]
   d83ac:	f7fe fd30 	bl	d6e10 <HAL_USB_USART_Available_Data>
}
   d83b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d83b4:	bd08      	pop	{r3, pc}

000d83b6 <_ZN9USBSerial5writeEh>:
{
   d83b6:	b513      	push	{r0, r1, r4, lr}
   d83b8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d83ba:	7c00      	ldrb	r0, [r0, #16]
{
   d83bc:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d83be:	f7fe fd2f 	bl	d6e20 <HAL_USB_USART_Available_Data_For_Write>
   d83c2:	2800      	cmp	r0, #0
   d83c4:	9901      	ldr	r1, [sp, #4]
   d83c6:	dc01      	bgt.n	d83cc <_ZN9USBSerial5writeEh+0x16>
   d83c8:	7c60      	ldrb	r0, [r4, #17]
   d83ca:	b120      	cbz	r0, d83d6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d83cc:	7c20      	ldrb	r0, [r4, #16]
   d83ce:	f7fe fd37 	bl	d6e40 <HAL_USB_USART_Send_Data>
   d83d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d83d6:	b002      	add	sp, #8
   d83d8:	bd10      	pop	{r4, pc}

000d83da <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d83da:	7c00      	ldrb	r0, [r0, #16]
   d83dc:	f7fe bd38 	b.w	d6e50 <HAL_USB_USART_Flush_Data>

000d83e0 <_ZN9USBSerialD0Ev>:
   d83e0:	b510      	push	{r4, lr}
   d83e2:	2114      	movs	r1, #20
   d83e4:	4604      	mov	r4, r0
   d83e6:	f000 f9a0 	bl	d872a <_ZdlPvj>
   d83ea:	4620      	mov	r0, r4
   d83ec:	bd10      	pop	{r4, pc}
	...

000d83f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d83f0:	b510      	push	{r4, lr}
   d83f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d83f6:	4604      	mov	r4, r0
   d83f8:	4608      	mov	r0, r1
   d83fa:	2100      	movs	r1, #0
   d83fc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8400:	4b04      	ldr	r3, [pc, #16]	; (d8414 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8402:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d8404:	2301      	movs	r3, #1
  _serial = serial;
   d8406:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8408:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d840a:	4611      	mov	r1, r2
   d840c:	f7fe fcf8 	bl	d6e00 <HAL_USB_USART_Init>
}
   d8410:	4620      	mov	r0, r4
   d8412:	bd10      	pop	{r4, pc}
   d8414:	000dbe70 	.word	0x000dbe70

000d8418 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8418:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d841a:	2214      	movs	r2, #20
{
   d841c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d841e:	2100      	movs	r1, #0
   d8420:	f001 f820 	bl	d9464 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8424:	4620      	mov	r0, r4
   d8426:	bd10      	pop	{r4, pc}

000d8428 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8428:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d842a:	4c10      	ldr	r4, [pc, #64]	; (d846c <_Z16_fetch_usbserialv+0x44>)
{
   d842c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d842e:	a803      	add	r0, sp, #12
   d8430:	f7ff fff2 	bl	d8418 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8434:	7821      	ldrb	r1, [r4, #0]
   d8436:	f3bf 8f5b 	dmb	ish
   d843a:	f011 0101 	ands.w	r1, r1, #1
   d843e:	d111      	bne.n	d8464 <_Z16_fetch_usbserialv+0x3c>
   d8440:	4620      	mov	r0, r4
   d8442:	9101      	str	r1, [sp, #4]
   d8444:	f7fb fe38 	bl	d40b8 <__cxa_guard_acquire>
   d8448:	9901      	ldr	r1, [sp, #4]
   d844a:	b158      	cbz	r0, d8464 <_Z16_fetch_usbserialv+0x3c>
   d844c:	aa03      	add	r2, sp, #12
   d844e:	4808      	ldr	r0, [pc, #32]	; (d8470 <_Z16_fetch_usbserialv+0x48>)
   d8450:	f7ff ffce 	bl	d83f0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8454:	4620      	mov	r0, r4
   d8456:	f7fb fe34 	bl	d40c2 <__cxa_guard_release>
   d845a:	4a06      	ldr	r2, [pc, #24]	; (d8474 <_Z16_fetch_usbserialv+0x4c>)
   d845c:	4906      	ldr	r1, [pc, #24]	; (d8478 <_Z16_fetch_usbserialv+0x50>)
   d845e:	4804      	ldr	r0, [pc, #16]	; (d8470 <_Z16_fetch_usbserialv+0x48>)
   d8460:	f000 f95e 	bl	d8720 <__aeabi_atexit>
	return _usbserial;
}
   d8464:	4802      	ldr	r0, [pc, #8]	; (d8470 <_Z16_fetch_usbserialv+0x48>)
   d8466:	b008      	add	sp, #32
   d8468:	bd10      	pop	{r4, pc}
   d846a:	bf00      	nop
   d846c:	2003e7b0 	.word	0x2003e7b0
   d8470:	2003e7b4 	.word	0x2003e7b4
   d8474:	2003de70 	.word	0x2003de70
   d8478:	000d8379 	.word	0x000d8379

000d847c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d847c:	4b01      	ldr	r3, [pc, #4]	; (d8484 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d847e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d8480:	4770      	bx	lr
   d8482:	bf00      	nop
   d8484:	2003dc98 	.word	0x2003dc98

000d8488 <serialEventRun>:
{
   d8488:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d848a:	4b0b      	ldr	r3, [pc, #44]	; (d84b8 <serialEventRun+0x30>)
   d848c:	b143      	cbz	r3, d84a0 <serialEventRun+0x18>
   d848e:	f7ff ffcb 	bl	d8428 <_Z16_fetch_usbserialv>
   d8492:	6803      	ldr	r3, [r0, #0]
   d8494:	691b      	ldr	r3, [r3, #16]
   d8496:	4798      	blx	r3
   d8498:	2800      	cmp	r0, #0
   d849a:	dd01      	ble.n	d84a0 <serialEventRun+0x18>
        serialEvent();
   d849c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d84a0:	4b06      	ldr	r3, [pc, #24]	; (d84bc <serialEventRun+0x34>)
   d84a2:	b143      	cbz	r3, d84b6 <serialEventRun+0x2e>
   d84a4:	f7ff ff3c 	bl	d8320 <_Z22__fetch_global_Serial1v>
   d84a8:	6803      	ldr	r3, [r0, #0]
   d84aa:	691b      	ldr	r3, [r3, #16]
   d84ac:	4798      	blx	r3
   d84ae:	2800      	cmp	r0, #0
   d84b0:	dd01      	ble.n	d84b6 <serialEventRun+0x2e>
        serialEvent1();
   d84b2:	f3af 8000 	nop.w
}
   d84b6:	bd08      	pop	{r3, pc}
	...

000d84c0 <_post_loop>:
{
   d84c0:	b508      	push	{r3, lr}
	serialEventRun();
   d84c2:	f7ff ffe1 	bl	d8488 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d84c6:	f7fe fb6b 	bl	d6ba0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d84ca:	4b01      	ldr	r3, [pc, #4]	; (d84d0 <_post_loop+0x10>)
   d84cc:	6018      	str	r0, [r3, #0]
}
   d84ce:	bd08      	pop	{r3, pc}
   d84d0:	2003e7dc 	.word	0x2003e7dc

000d84d4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d84d4:	4802      	ldr	r0, [pc, #8]	; (d84e0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d84d6:	4a03      	ldr	r2, [pc, #12]	; (d84e4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d84d8:	4903      	ldr	r1, [pc, #12]	; (d84e8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d84da:	1a12      	subs	r2, r2, r0
   d84dc:	f000 bf9a 	b.w	d9414 <memcpy>
   d84e0:	2003f400 	.word	0x2003f400
   d84e4:	2003fc04 	.word	0x2003fc04
   d84e8:	000dc1a0 	.word	0x000dc1a0

000d84ec <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d84ec:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d84ee:	2300      	movs	r3, #0
   d84f0:	9300      	str	r3, [sp, #0]
   d84f2:	461a      	mov	r2, r3
   d84f4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d84f8:	f7fe fd0c 	bl	d6f14 <system_ctrl_set_result>
}
   d84fc:	b003      	add	sp, #12
   d84fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8504 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d8504:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8506:	8843      	ldrh	r3, [r0, #2]
   d8508:	2b0a      	cmp	r3, #10
   d850a:	d008      	beq.n	d851e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d850c:	2b50      	cmp	r3, #80	; 0x50
   d850e:	d10b      	bne.n	d8528 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d8510:	4b09      	ldr	r3, [pc, #36]	; (d8538 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8512:	681b      	ldr	r3, [r3, #0]
   d8514:	b14b      	cbz	r3, d852a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d8516:	b003      	add	sp, #12
   d8518:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d851c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d851e:	f7ff ffe5 	bl	d84ec <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d8522:	b003      	add	sp, #12
   d8524:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8528:	2300      	movs	r3, #0
   d852a:	9300      	str	r3, [sp, #0]
   d852c:	461a      	mov	r2, r3
   d852e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8532:	f7fe fcef 	bl	d6f14 <system_ctrl_set_result>
}
   d8536:	e7f4      	b.n	d8522 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d8538:	2003e7cc 	.word	0x2003e7cc

000d853c <module_user_init_hook>:
{
   d853c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d853e:	4c12      	ldr	r4, [pc, #72]	; (d8588 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d8540:	4812      	ldr	r0, [pc, #72]	; (d858c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d8542:	4d13      	ldr	r5, [pc, #76]	; (d8590 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d8544:	2100      	movs	r1, #0
   d8546:	f7fe fdf1 	bl	d712c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d854a:	6823      	ldr	r3, [r4, #0]
   d854c:	42ab      	cmp	r3, r5
   d854e:	4b11      	ldr	r3, [pc, #68]	; (d8594 <module_user_init_hook+0x58>)
   d8550:	bf0c      	ite	eq
   d8552:	2201      	moveq	r2, #1
   d8554:	2200      	movne	r2, #0
   d8556:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8558:	d002      	beq.n	d8560 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d855a:	f7ff ffbb 	bl	d84d4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d855e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8560:	f7fe fb06 	bl	d6b70 <HAL_RNG_GetRandomNumber>
   d8564:	4604      	mov	r4, r0
    srand(seed);
   d8566:	f000 ff85 	bl	d9474 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d856a:	4b0b      	ldr	r3, [pc, #44]	; (d8598 <module_user_init_hook+0x5c>)
   d856c:	b113      	cbz	r3, d8574 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d856e:	4620      	mov	r0, r4
   d8570:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8574:	2100      	movs	r1, #0
   d8576:	4808      	ldr	r0, [pc, #32]	; (d8598 <module_user_init_hook+0x5c>)
   d8578:	f7fe fd40 	bl	d6ffc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d857c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8580:	4806      	ldr	r0, [pc, #24]	; (d859c <module_user_init_hook+0x60>)
   d8582:	2100      	movs	r1, #0
   d8584:	f7fe bcbc 	b.w	d6f00 <system_ctrl_set_app_request_handler>
   d8588:	2003fc00 	.word	0x2003fc00
   d858c:	000d847d 	.word	0x000d847d
   d8590:	9a271c1e 	.word	0x9a271c1e
   d8594:	2003e7c8 	.word	0x2003e7c8
   d8598:	00000000 	.word	0x00000000
   d859c:	000d8505 	.word	0x000d8505

000d85a0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d85a0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d85a2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d85a4:	d902      	bls.n	d85ac <pinAvailable+0xc>
    return false;
   d85a6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d85a8:	b002      	add	sp, #8
   d85aa:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d85ac:	f1a0 030b 	sub.w	r3, r0, #11
   d85b0:	2b02      	cmp	r3, #2
   d85b2:	d81a      	bhi.n	d85ea <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d85b4:	4c17      	ldr	r4, [pc, #92]	; (d8614 <pinAvailable+0x74>)
   d85b6:	7821      	ldrb	r1, [r4, #0]
   d85b8:	f3bf 8f5b 	dmb	ish
   d85bc:	f011 0101 	ands.w	r1, r1, #1
   d85c0:	d10b      	bne.n	d85da <pinAvailable+0x3a>
   d85c2:	4620      	mov	r0, r4
   d85c4:	9101      	str	r1, [sp, #4]
   d85c6:	f7fb fd77 	bl	d40b8 <__cxa_guard_acquire>
   d85ca:	9901      	ldr	r1, [sp, #4]
   d85cc:	b128      	cbz	r0, d85da <pinAvailable+0x3a>
   d85ce:	4812      	ldr	r0, [pc, #72]	; (d8618 <pinAvailable+0x78>)
   d85d0:	f7ff fbc0 	bl	d7d54 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d85d4:	4620      	mov	r0, r4
   d85d6:	f7fb fd74 	bl	d40c2 <__cxa_guard_release>
   d85da:	4b0f      	ldr	r3, [pc, #60]	; (d8618 <pinAvailable+0x78>)
   d85dc:	7818      	ldrb	r0, [r3, #0]
   d85de:	f7fe fbc7 	bl	d6d70 <hal_spi_is_enabled>
   d85e2:	2800      	cmp	r0, #0
   d85e4:	d1df      	bne.n	d85a6 <pinAvailable+0x6>
  return true; // 'pin' is available
   d85e6:	2001      	movs	r0, #1
   d85e8:	e7de      	b.n	d85a8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d85ea:	2801      	cmp	r0, #1
   d85ec:	d809      	bhi.n	d8602 <pinAvailable+0x62>
   d85ee:	f000 f86f 	bl	d86d0 <_Z19__fetch_global_Wirev>
   d85f2:	2100      	movs	r1, #0
   d85f4:	7c00      	ldrb	r0, [r0, #16]
   d85f6:	f7fe fb73 	bl	d6ce0 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d85fa:	f080 0001 	eor.w	r0, r0, #1
   d85fe:	b2c0      	uxtb	r0, r0
   d8600:	e7d2      	b.n	d85a8 <pinAvailable+0x8>
   d8602:	3809      	subs	r0, #9
   d8604:	2801      	cmp	r0, #1
   d8606:	d8ee      	bhi.n	d85e6 <pinAvailable+0x46>
   d8608:	f7ff fe8a 	bl	d8320 <_Z22__fetch_global_Serial1v>
   d860c:	7c00      	ldrb	r0, [r0, #16]
   d860e:	f7fe fbe7 	bl	d6de0 <hal_usart_is_enabled>
   d8612:	e7f2      	b.n	d85fa <pinAvailable+0x5a>
   d8614:	2003e7d0 	.word	0x2003e7d0
   d8618:	2003e7d4 	.word	0x2003e7d4

000d861c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d861c:	2823      	cmp	r0, #35	; 0x23
{
   d861e:	b538      	push	{r3, r4, r5, lr}
   d8620:	4604      	mov	r4, r0
   d8622:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8624:	d80a      	bhi.n	d863c <pinMode+0x20>
   d8626:	29ff      	cmp	r1, #255	; 0xff
   d8628:	d008      	beq.n	d863c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d862a:	f7ff ffb9 	bl	d85a0 <pinAvailable>
   d862e:	b128      	cbz	r0, d863c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d8630:	4629      	mov	r1, r5
   d8632:	4620      	mov	r0, r4
}
   d8634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d8638:	f7fe bae2 	b.w	d6c00 <HAL_Pin_Mode>
}
   d863c:	bd38      	pop	{r3, r4, r5, pc}

000d863e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d863e:	b538      	push	{r3, r4, r5, lr}
   d8640:	4604      	mov	r4, r0
   d8642:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8644:	f7fe fae4 	bl	d6c10 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8648:	28ff      	cmp	r0, #255	; 0xff
   d864a:	d010      	beq.n	d866e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d864c:	2806      	cmp	r0, #6
   d864e:	d804      	bhi.n	d865a <digitalWrite+0x1c>
   d8650:	234d      	movs	r3, #77	; 0x4d
   d8652:	fa23 f000 	lsr.w	r0, r3, r0
   d8656:	07c3      	lsls	r3, r0, #31
   d8658:	d409      	bmi.n	d866e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d865a:	4620      	mov	r0, r4
   d865c:	f7ff ffa0 	bl	d85a0 <pinAvailable>
   d8660:	b128      	cbz	r0, d866e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d8662:	4629      	mov	r1, r5
   d8664:	4620      	mov	r0, r4
}
   d8666:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d866a:	f7fe bad9 	b.w	d6c20 <HAL_GPIO_Write>
}
   d866e:	bd38      	pop	{r3, r4, r5, pc}

000d8670 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d8670:	280d      	cmp	r0, #13
{
   d8672:	b510      	push	{r4, lr}
   d8674:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8676:	bf9c      	itt	ls
   d8678:	340e      	addls	r4, #14
   d867a:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d867c:	4620      	mov	r0, r4
   d867e:	f7ff ff8f 	bl	d85a0 <pinAvailable>
   d8682:	b150      	cbz	r0, d869a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8684:	2103      	movs	r1, #3
   d8686:	4620      	mov	r0, r4
   d8688:	f7fe fab2 	bl	d6bf0 <HAL_Validate_Pin_Function>
   d868c:	2803      	cmp	r0, #3
   d868e:	d104      	bne.n	d869a <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d8690:	4620      	mov	r0, r4
}
   d8692:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d8696:	f7fe badb 	b.w	d6c50 <hal_adc_read>
}
   d869a:	2000      	movs	r0, #0
   d869c:	bd10      	pop	{r4, pc}
	...

000d86a0 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d86a0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d86a2:	2300      	movs	r3, #0
   d86a4:	2520      	movs	r5, #32
   d86a6:	8043      	strh	r3, [r0, #2]
   d86a8:	2314      	movs	r3, #20
{
   d86aa:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d86ac:	8003      	strh	r3, [r0, #0]
   d86ae:	6085      	str	r5, [r0, #8]
   d86b0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d86b2:	4906      	ldr	r1, [pc, #24]	; (d86cc <_Z17acquireWireBufferv+0x2c>)
   d86b4:	4628      	mov	r0, r5
   d86b6:	f000 f83c 	bl	d8732 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d86ba:	4904      	ldr	r1, [pc, #16]	; (d86cc <_Z17acquireWireBufferv+0x2c>)
	};
   d86bc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d86be:	4628      	mov	r0, r5
   d86c0:	f000 f837 	bl	d8732 <_ZnajRKSt9nothrow_t>
	};
   d86c4:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d86c6:	4620      	mov	r0, r4
   d86c8:	bd38      	pop	{r3, r4, r5, pc}
   d86ca:	bf00      	nop
   d86cc:	000dbe98 	.word	0x000dbe98

000d86d0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d86d0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d86d2:	4d0f      	ldr	r5, [pc, #60]	; (d8710 <_Z19__fetch_global_Wirev+0x40>)
   d86d4:	7829      	ldrb	r1, [r5, #0]
   d86d6:	f3bf 8f5b 	dmb	ish
   d86da:	f011 0401 	ands.w	r4, r1, #1
{
   d86de:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d86e0:	d113      	bne.n	d870a <_Z19__fetch_global_Wirev+0x3a>
   d86e2:	4628      	mov	r0, r5
   d86e4:	f7fb fce8 	bl	d40b8 <__cxa_guard_acquire>
   d86e8:	b178      	cbz	r0, d870a <_Z19__fetch_global_Wirev+0x3a>
   d86ea:	a801      	add	r0, sp, #4
   d86ec:	f7ff ffd8 	bl	d86a0 <_Z17acquireWireBufferv>
   d86f0:	aa01      	add	r2, sp, #4
   d86f2:	4621      	mov	r1, r4
   d86f4:	4807      	ldr	r0, [pc, #28]	; (d8714 <_Z19__fetch_global_Wirev+0x44>)
   d86f6:	f7ff f923 	bl	d7940 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d86fa:	4628      	mov	r0, r5
   d86fc:	f7fb fce1 	bl	d40c2 <__cxa_guard_release>
   d8700:	4a05      	ldr	r2, [pc, #20]	; (d8718 <_Z19__fetch_global_Wirev+0x48>)
   d8702:	4906      	ldr	r1, [pc, #24]	; (d871c <_Z19__fetch_global_Wirev+0x4c>)
   d8704:	4803      	ldr	r0, [pc, #12]	; (d8714 <_Z19__fetch_global_Wirev+0x44>)
   d8706:	f000 f80b 	bl	d8720 <__aeabi_atexit>
	return wire;
}
   d870a:	4802      	ldr	r0, [pc, #8]	; (d8714 <_Z19__fetch_global_Wirev+0x44>)
   d870c:	b007      	add	sp, #28
   d870e:	bd30      	pop	{r4, r5, pc}
   d8710:	2003e7e0 	.word	0x2003e7e0
   d8714:	2003e7e4 	.word	0x2003e7e4
   d8718:	2003de70 	.word	0x2003de70
   d871c:	000d78e9 	.word	0x000d78e9

000d8720 <__aeabi_atexit>:
   d8720:	460b      	mov	r3, r1
   d8722:	4601      	mov	r1, r0
   d8724:	4618      	mov	r0, r3
   d8726:	f000 be55 	b.w	d93d4 <__cxa_atexit>

000d872a <_ZdlPvj>:
   d872a:	f7fb bcb8 	b.w	d409e <_ZdlPv>

000d872e <_ZnwjRKSt9nothrow_t>:
   d872e:	f7fb bcb2 	b.w	d4096 <_Znwj>

000d8732 <_ZnajRKSt9nothrow_t>:
   d8732:	f7fb bcb2 	b.w	d409a <_Znaj>

000d8736 <_ZSt25__throw_bad_function_callv>:
   d8736:	b508      	push	{r3, lr}
   d8738:	f7fe fce0 	bl	d70fc <abort>

000d873c <sqrt>:
   d873c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8740:	ed2d 8b02 	vpush	{d8}
   d8744:	b08b      	sub	sp, #44	; 0x2c
   d8746:	ec55 4b10 	vmov	r4, r5, d0
   d874a:	f000 f855 	bl	d87f8 <__ieee754_sqrt>
   d874e:	4b28      	ldr	r3, [pc, #160]	; (d87f0 <sqrt+0xb4>)
   d8750:	eeb0 8a40 	vmov.f32	s16, s0
   d8754:	eef0 8a60 	vmov.f32	s17, s1
   d8758:	f993 7000 	ldrsb.w	r7, [r3]
   d875c:	1c7b      	adds	r3, r7, #1
   d875e:	d012      	beq.n	d8786 <sqrt+0x4a>
   d8760:	4622      	mov	r2, r4
   d8762:	462b      	mov	r3, r5
   d8764:	4620      	mov	r0, r4
   d8766:	4629      	mov	r1, r5
   d8768:	f000 fd62 	bl	d9230 <__aeabi_dcmpun>
   d876c:	4606      	mov	r6, r0
   d876e:	b950      	cbnz	r0, d8786 <sqrt+0x4a>
   d8770:	f04f 0800 	mov.w	r8, #0
   d8774:	f04f 0900 	mov.w	r9, #0
   d8778:	4620      	mov	r0, r4
   d877a:	4629      	mov	r1, r5
   d877c:	4642      	mov	r2, r8
   d877e:	464b      	mov	r3, r9
   d8780:	f000 fd2e 	bl	d91e0 <__aeabi_dcmplt>
   d8784:	b940      	cbnz	r0, d8798 <sqrt+0x5c>
   d8786:	eeb0 0a48 	vmov.f32	s0, s16
   d878a:	eef0 0a68 	vmov.f32	s1, s17
   d878e:	b00b      	add	sp, #44	; 0x2c
   d8790:	ecbd 8b02 	vpop	{d8}
   d8794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8798:	4b16      	ldr	r3, [pc, #88]	; (d87f4 <sqrt+0xb8>)
   d879a:	9608      	str	r6, [sp, #32]
   d879c:	2201      	movs	r2, #1
   d879e:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d87a2:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d87a6:	9200      	str	r2, [sp, #0]
   d87a8:	9301      	str	r3, [sp, #4]
   d87aa:	b197      	cbz	r7, d87d2 <sqrt+0x96>
   d87ac:	4642      	mov	r2, r8
   d87ae:	464b      	mov	r3, r9
   d87b0:	4640      	mov	r0, r8
   d87b2:	4649      	mov	r1, r9
   d87b4:	f000 fbcc 	bl	d8f50 <__aeabi_ddiv>
   d87b8:	2f02      	cmp	r7, #2
   d87ba:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d87be:	d10a      	bne.n	d87d6 <sqrt+0x9a>
   d87c0:	f7fe fcac 	bl	d711c <__errno>
   d87c4:	2321      	movs	r3, #33	; 0x21
   d87c6:	6003      	str	r3, [r0, #0]
   d87c8:	9b08      	ldr	r3, [sp, #32]
   d87ca:	b963      	cbnz	r3, d87e6 <sqrt+0xaa>
   d87cc:	ed9d 8b06 	vldr	d8, [sp, #24]
   d87d0:	e7d9      	b.n	d8786 <sqrt+0x4a>
   d87d2:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d87d6:	4668      	mov	r0, sp
   d87d8:	f000 f8d2 	bl	d8980 <matherr>
   d87dc:	2800      	cmp	r0, #0
   d87de:	d0ef      	beq.n	d87c0 <sqrt+0x84>
   d87e0:	9b08      	ldr	r3, [sp, #32]
   d87e2:	2b00      	cmp	r3, #0
   d87e4:	d0f2      	beq.n	d87cc <sqrt+0x90>
   d87e6:	f7fe fc99 	bl	d711c <__errno>
   d87ea:	9b08      	ldr	r3, [sp, #32]
   d87ec:	6003      	str	r3, [r0, #0]
   d87ee:	e7ed      	b.n	d87cc <sqrt+0x90>
   d87f0:	2003dc94 	.word	0x2003dc94
   d87f4:	000dbe9c 	.word	0x000dbe9c

000d87f8 <__ieee754_sqrt>:
   d87f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d87fc:	4a5f      	ldr	r2, [pc, #380]	; (d897c <__ieee754_sqrt+0x184>)
   d87fe:	ec57 6b10 	vmov	r6, r7, d0
   d8802:	43ba      	bics	r2, r7
   d8804:	f000 8098 	beq.w	d8938 <__ieee754_sqrt+0x140>
   d8808:	2f00      	cmp	r7, #0
   d880a:	ee10 4a10 	vmov	r4, s0
   d880e:	463b      	mov	r3, r7
   d8810:	dd4e      	ble.n	d88b0 <__ieee754_sqrt+0xb8>
   d8812:	1539      	asrs	r1, r7, #20
   d8814:	d05b      	beq.n	d88ce <__ieee754_sqrt+0xd6>
   d8816:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d881a:	07ca      	lsls	r2, r1, #31
   d881c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8820:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d8824:	d403      	bmi.n	d882e <__ieee754_sqrt+0x36>
   d8826:	005b      	lsls	r3, r3, #1
   d8828:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d882c:	0064      	lsls	r4, r4, #1
   d882e:	0fe2      	lsrs	r2, r4, #31
   d8830:	f04f 0c00 	mov.w	ip, #0
   d8834:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d8838:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d883c:	0064      	lsls	r4, r4, #1
   d883e:	4666      	mov	r6, ip
   d8840:	2516      	movs	r5, #22
   d8842:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d8846:	18b1      	adds	r1, r6, r2
   d8848:	4299      	cmp	r1, r3
   d884a:	dc02      	bgt.n	d8852 <__ieee754_sqrt+0x5a>
   d884c:	1a5b      	subs	r3, r3, r1
   d884e:	188e      	adds	r6, r1, r2
   d8850:	4494      	add	ip, r2
   d8852:	005b      	lsls	r3, r3, #1
   d8854:	3d01      	subs	r5, #1
   d8856:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d885a:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d885e:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8862:	d1f0      	bne.n	d8846 <__ieee754_sqrt+0x4e>
   d8864:	462f      	mov	r7, r5
   d8866:	2020      	movs	r0, #32
   d8868:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d886c:	e009      	b.n	d8882 <__ieee754_sqrt+0x8a>
   d886e:	d03e      	beq.n	d88ee <__ieee754_sqrt+0xf6>
   d8870:	0fe1      	lsrs	r1, r4, #31
   d8872:	3801      	subs	r0, #1
   d8874:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d8878:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d887c:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8880:	d03e      	beq.n	d8900 <__ieee754_sqrt+0x108>
   d8882:	42b3      	cmp	r3, r6
   d8884:	eb02 0105 	add.w	r1, r2, r5
   d8888:	ddf1      	ble.n	d886e <__ieee754_sqrt+0x76>
   d888a:	2900      	cmp	r1, #0
   d888c:	eb01 0502 	add.w	r5, r1, r2
   d8890:	db09      	blt.n	d88a6 <__ieee754_sqrt+0xae>
   d8892:	46b0      	mov	r8, r6
   d8894:	1b9b      	subs	r3, r3, r6
   d8896:	42a1      	cmp	r1, r4
   d8898:	bf88      	it	hi
   d889a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   d889e:	1a64      	subs	r4, r4, r1
   d88a0:	4417      	add	r7, r2
   d88a2:	4646      	mov	r6, r8
   d88a4:	e7e4      	b.n	d8870 <__ieee754_sqrt+0x78>
   d88a6:	2d00      	cmp	r5, #0
   d88a8:	dbf3      	blt.n	d8892 <__ieee754_sqrt+0x9a>
   d88aa:	f106 0801 	add.w	r8, r6, #1
   d88ae:	e7f1      	b.n	d8894 <__ieee754_sqrt+0x9c>
   d88b0:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d88b4:	4332      	orrs	r2, r6
   d88b6:	d036      	beq.n	d8926 <__ieee754_sqrt+0x12e>
   d88b8:	2f00      	cmp	r7, #0
   d88ba:	d14d      	bne.n	d8958 <__ieee754_sqrt+0x160>
   d88bc:	4639      	mov	r1, r7
   d88be:	0ae2      	lsrs	r2, r4, #11
   d88c0:	3915      	subs	r1, #21
   d88c2:	0564      	lsls	r4, r4, #21
   d88c4:	4613      	mov	r3, r2
   d88c6:	2a00      	cmp	r2, #0
   d88c8:	d0f9      	beq.n	d88be <__ieee754_sqrt+0xc6>
   d88ca:	02d7      	lsls	r7, r2, #11
   d88cc:	d451      	bmi.n	d8972 <__ieee754_sqrt+0x17a>
   d88ce:	2000      	movs	r0, #0
   d88d0:	005b      	lsls	r3, r3, #1
   d88d2:	02de      	lsls	r6, r3, #11
   d88d4:	4605      	mov	r5, r0
   d88d6:	f100 0001 	add.w	r0, r0, #1
   d88da:	d5f9      	bpl.n	d88d0 <__ieee754_sqrt+0xd8>
   d88dc:	461a      	mov	r2, r3
   d88de:	4623      	mov	r3, r4
   d88e0:	4084      	lsls	r4, r0
   d88e2:	f1c0 0020 	rsb	r0, r0, #32
   d88e6:	40c3      	lsrs	r3, r0
   d88e8:	4313      	orrs	r3, r2
   d88ea:	1b49      	subs	r1, r1, r5
   d88ec:	e793      	b.n	d8816 <__ieee754_sqrt+0x1e>
   d88ee:	42a1      	cmp	r1, r4
   d88f0:	d8be      	bhi.n	d8870 <__ieee754_sqrt+0x78>
   d88f2:	2900      	cmp	r1, #0
   d88f4:	eb01 0502 	add.w	r5, r1, r2
   d88f8:	dbd5      	blt.n	d88a6 <__ieee754_sqrt+0xae>
   d88fa:	4698      	mov	r8, r3
   d88fc:	2300      	movs	r3, #0
   d88fe:	e7ce      	b.n	d889e <__ieee754_sqrt+0xa6>
   d8900:	4323      	orrs	r3, r4
   d8902:	d112      	bne.n	d892a <__ieee754_sqrt+0x132>
   d8904:	0878      	lsrs	r0, r7, #1
   d8906:	ea4f 016c 	mov.w	r1, ip, asr #1
   d890a:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d890e:	f01c 0f01 	tst.w	ip, #1
   d8912:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d8916:	bf18      	it	ne
   d8918:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d891c:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d8920:	4602      	mov	r2, r0
   d8922:	ec43 2b10 	vmov	d0, r2, r3
   d8926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d892a:	1c7b      	adds	r3, r7, #1
   d892c:	bf16      	itet	ne
   d892e:	1c78      	addne	r0, r7, #1
   d8930:	f10c 0c01 	addeq.w	ip, ip, #1
   d8934:	0840      	lsrne	r0, r0, #1
   d8936:	e7e6      	b.n	d8906 <__ieee754_sqrt+0x10e>
   d8938:	ee10 2a10 	vmov	r2, s0
   d893c:	ee10 0a10 	vmov	r0, s0
   d8940:	463b      	mov	r3, r7
   d8942:	4639      	mov	r1, r7
   d8944:	f000 f9da 	bl	d8cfc <__aeabi_dmul>
   d8948:	4632      	mov	r2, r6
   d894a:	463b      	mov	r3, r7
   d894c:	f000 f820 	bl	d8990 <__adddf3>
   d8950:	ec41 0b10 	vmov	d0, r0, r1
   d8954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8958:	ee10 2a10 	vmov	r2, s0
   d895c:	4630      	mov	r0, r6
   d895e:	4639      	mov	r1, r7
   d8960:	f000 f814 	bl	d898c <__aeabi_dsub>
   d8964:	4602      	mov	r2, r0
   d8966:	460b      	mov	r3, r1
   d8968:	f000 faf2 	bl	d8f50 <__aeabi_ddiv>
   d896c:	ec41 0b10 	vmov	d0, r0, r1
   d8970:	e7d9      	b.n	d8926 <__ieee754_sqrt+0x12e>
   d8972:	4623      	mov	r3, r4
   d8974:	2020      	movs	r0, #32
   d8976:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d897a:	e7b4      	b.n	d88e6 <__ieee754_sqrt+0xee>
   d897c:	7ff00000 	.word	0x7ff00000

000d8980 <matherr>:
   d8980:	2000      	movs	r0, #0
   d8982:	4770      	bx	lr

000d8984 <__aeabi_drsub>:
   d8984:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8988:	e002      	b.n	d8990 <__adddf3>
   d898a:	bf00      	nop

000d898c <__aeabi_dsub>:
   d898c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8990 <__adddf3>:
   d8990:	b530      	push	{r4, r5, lr}
   d8992:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8996:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d899a:	ea94 0f05 	teq	r4, r5
   d899e:	bf08      	it	eq
   d89a0:	ea90 0f02 	teqeq	r0, r2
   d89a4:	bf1f      	itttt	ne
   d89a6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d89aa:	ea55 0c02 	orrsne.w	ip, r5, r2
   d89ae:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d89b2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d89b6:	f000 80e2 	beq.w	d8b7e <__adddf3+0x1ee>
   d89ba:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d89be:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d89c2:	bfb8      	it	lt
   d89c4:	426d      	neglt	r5, r5
   d89c6:	dd0c      	ble.n	d89e2 <__adddf3+0x52>
   d89c8:	442c      	add	r4, r5
   d89ca:	ea80 0202 	eor.w	r2, r0, r2
   d89ce:	ea81 0303 	eor.w	r3, r1, r3
   d89d2:	ea82 0000 	eor.w	r0, r2, r0
   d89d6:	ea83 0101 	eor.w	r1, r3, r1
   d89da:	ea80 0202 	eor.w	r2, r0, r2
   d89de:	ea81 0303 	eor.w	r3, r1, r3
   d89e2:	2d36      	cmp	r5, #54	; 0x36
   d89e4:	bf88      	it	hi
   d89e6:	bd30      	pophi	{r4, r5, pc}
   d89e8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d89ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d89f0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d89f4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d89f8:	d002      	beq.n	d8a00 <__adddf3+0x70>
   d89fa:	4240      	negs	r0, r0
   d89fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8a00:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8a04:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8a08:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8a0c:	d002      	beq.n	d8a14 <__adddf3+0x84>
   d8a0e:	4252      	negs	r2, r2
   d8a10:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8a14:	ea94 0f05 	teq	r4, r5
   d8a18:	f000 80a7 	beq.w	d8b6a <__adddf3+0x1da>
   d8a1c:	f1a4 0401 	sub.w	r4, r4, #1
   d8a20:	f1d5 0e20 	rsbs	lr, r5, #32
   d8a24:	db0d      	blt.n	d8a42 <__adddf3+0xb2>
   d8a26:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8a2a:	fa22 f205 	lsr.w	r2, r2, r5
   d8a2e:	1880      	adds	r0, r0, r2
   d8a30:	f141 0100 	adc.w	r1, r1, #0
   d8a34:	fa03 f20e 	lsl.w	r2, r3, lr
   d8a38:	1880      	adds	r0, r0, r2
   d8a3a:	fa43 f305 	asr.w	r3, r3, r5
   d8a3e:	4159      	adcs	r1, r3
   d8a40:	e00e      	b.n	d8a60 <__adddf3+0xd0>
   d8a42:	f1a5 0520 	sub.w	r5, r5, #32
   d8a46:	f10e 0e20 	add.w	lr, lr, #32
   d8a4a:	2a01      	cmp	r2, #1
   d8a4c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8a50:	bf28      	it	cs
   d8a52:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8a56:	fa43 f305 	asr.w	r3, r3, r5
   d8a5a:	18c0      	adds	r0, r0, r3
   d8a5c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8a60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8a64:	d507      	bpl.n	d8a76 <__adddf3+0xe6>
   d8a66:	f04f 0e00 	mov.w	lr, #0
   d8a6a:	f1dc 0c00 	rsbs	ip, ip, #0
   d8a6e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8a72:	eb6e 0101 	sbc.w	r1, lr, r1
   d8a76:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8a7a:	d31b      	bcc.n	d8ab4 <__adddf3+0x124>
   d8a7c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8a80:	d30c      	bcc.n	d8a9c <__adddf3+0x10c>
   d8a82:	0849      	lsrs	r1, r1, #1
   d8a84:	ea5f 0030 	movs.w	r0, r0, rrx
   d8a88:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8a8c:	f104 0401 	add.w	r4, r4, #1
   d8a90:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8a94:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8a98:	f080 809a 	bcs.w	d8bd0 <__adddf3+0x240>
   d8a9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8aa0:	bf08      	it	eq
   d8aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8aa6:	f150 0000 	adcs.w	r0, r0, #0
   d8aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8aae:	ea41 0105 	orr.w	r1, r1, r5
   d8ab2:	bd30      	pop	{r4, r5, pc}
   d8ab4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8ab8:	4140      	adcs	r0, r0
   d8aba:	eb41 0101 	adc.w	r1, r1, r1
   d8abe:	3c01      	subs	r4, #1
   d8ac0:	bf28      	it	cs
   d8ac2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d8ac6:	d2e9      	bcs.n	d8a9c <__adddf3+0x10c>
   d8ac8:	f091 0f00 	teq	r1, #0
   d8acc:	bf04      	itt	eq
   d8ace:	4601      	moveq	r1, r0
   d8ad0:	2000      	moveq	r0, #0
   d8ad2:	fab1 f381 	clz	r3, r1
   d8ad6:	bf08      	it	eq
   d8ad8:	3320      	addeq	r3, #32
   d8ada:	f1a3 030b 	sub.w	r3, r3, #11
   d8ade:	f1b3 0220 	subs.w	r2, r3, #32
   d8ae2:	da0c      	bge.n	d8afe <__adddf3+0x16e>
   d8ae4:	320c      	adds	r2, #12
   d8ae6:	dd08      	ble.n	d8afa <__adddf3+0x16a>
   d8ae8:	f102 0c14 	add.w	ip, r2, #20
   d8aec:	f1c2 020c 	rsb	r2, r2, #12
   d8af0:	fa01 f00c 	lsl.w	r0, r1, ip
   d8af4:	fa21 f102 	lsr.w	r1, r1, r2
   d8af8:	e00c      	b.n	d8b14 <__adddf3+0x184>
   d8afa:	f102 0214 	add.w	r2, r2, #20
   d8afe:	bfd8      	it	le
   d8b00:	f1c2 0c20 	rsble	ip, r2, #32
   d8b04:	fa01 f102 	lsl.w	r1, r1, r2
   d8b08:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8b0c:	bfdc      	itt	le
   d8b0e:	ea41 010c 	orrle.w	r1, r1, ip
   d8b12:	4090      	lslle	r0, r2
   d8b14:	1ae4      	subs	r4, r4, r3
   d8b16:	bfa2      	ittt	ge
   d8b18:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8b1c:	4329      	orrge	r1, r5
   d8b1e:	bd30      	popge	{r4, r5, pc}
   d8b20:	ea6f 0404 	mvn.w	r4, r4
   d8b24:	3c1f      	subs	r4, #31
   d8b26:	da1c      	bge.n	d8b62 <__adddf3+0x1d2>
   d8b28:	340c      	adds	r4, #12
   d8b2a:	dc0e      	bgt.n	d8b4a <__adddf3+0x1ba>
   d8b2c:	f104 0414 	add.w	r4, r4, #20
   d8b30:	f1c4 0220 	rsb	r2, r4, #32
   d8b34:	fa20 f004 	lsr.w	r0, r0, r4
   d8b38:	fa01 f302 	lsl.w	r3, r1, r2
   d8b3c:	ea40 0003 	orr.w	r0, r0, r3
   d8b40:	fa21 f304 	lsr.w	r3, r1, r4
   d8b44:	ea45 0103 	orr.w	r1, r5, r3
   d8b48:	bd30      	pop	{r4, r5, pc}
   d8b4a:	f1c4 040c 	rsb	r4, r4, #12
   d8b4e:	f1c4 0220 	rsb	r2, r4, #32
   d8b52:	fa20 f002 	lsr.w	r0, r0, r2
   d8b56:	fa01 f304 	lsl.w	r3, r1, r4
   d8b5a:	ea40 0003 	orr.w	r0, r0, r3
   d8b5e:	4629      	mov	r1, r5
   d8b60:	bd30      	pop	{r4, r5, pc}
   d8b62:	fa21 f004 	lsr.w	r0, r1, r4
   d8b66:	4629      	mov	r1, r5
   d8b68:	bd30      	pop	{r4, r5, pc}
   d8b6a:	f094 0f00 	teq	r4, #0
   d8b6e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8b72:	bf06      	itte	eq
   d8b74:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8b78:	3401      	addeq	r4, #1
   d8b7a:	3d01      	subne	r5, #1
   d8b7c:	e74e      	b.n	d8a1c <__adddf3+0x8c>
   d8b7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8b82:	bf18      	it	ne
   d8b84:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8b88:	d029      	beq.n	d8bde <__adddf3+0x24e>
   d8b8a:	ea94 0f05 	teq	r4, r5
   d8b8e:	bf08      	it	eq
   d8b90:	ea90 0f02 	teqeq	r0, r2
   d8b94:	d005      	beq.n	d8ba2 <__adddf3+0x212>
   d8b96:	ea54 0c00 	orrs.w	ip, r4, r0
   d8b9a:	bf04      	itt	eq
   d8b9c:	4619      	moveq	r1, r3
   d8b9e:	4610      	moveq	r0, r2
   d8ba0:	bd30      	pop	{r4, r5, pc}
   d8ba2:	ea91 0f03 	teq	r1, r3
   d8ba6:	bf1e      	ittt	ne
   d8ba8:	2100      	movne	r1, #0
   d8baa:	2000      	movne	r0, #0
   d8bac:	bd30      	popne	{r4, r5, pc}
   d8bae:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8bb2:	d105      	bne.n	d8bc0 <__adddf3+0x230>
   d8bb4:	0040      	lsls	r0, r0, #1
   d8bb6:	4149      	adcs	r1, r1
   d8bb8:	bf28      	it	cs
   d8bba:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8bbe:	bd30      	pop	{r4, r5, pc}
   d8bc0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8bc4:	bf3c      	itt	cc
   d8bc6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8bca:	bd30      	popcc	{r4, r5, pc}
   d8bcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8bd0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8bd4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8bd8:	f04f 0000 	mov.w	r0, #0
   d8bdc:	bd30      	pop	{r4, r5, pc}
   d8bde:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8be2:	bf1a      	itte	ne
   d8be4:	4619      	movne	r1, r3
   d8be6:	4610      	movne	r0, r2
   d8be8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8bec:	bf1c      	itt	ne
   d8bee:	460b      	movne	r3, r1
   d8bf0:	4602      	movne	r2, r0
   d8bf2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8bf6:	bf06      	itte	eq
   d8bf8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8bfc:	ea91 0f03 	teqeq	r1, r3
   d8c00:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8c04:	bd30      	pop	{r4, r5, pc}
   d8c06:	bf00      	nop

000d8c08 <__aeabi_ui2d>:
   d8c08:	f090 0f00 	teq	r0, #0
   d8c0c:	bf04      	itt	eq
   d8c0e:	2100      	moveq	r1, #0
   d8c10:	4770      	bxeq	lr
   d8c12:	b530      	push	{r4, r5, lr}
   d8c14:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8c18:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8c1c:	f04f 0500 	mov.w	r5, #0
   d8c20:	f04f 0100 	mov.w	r1, #0
   d8c24:	e750      	b.n	d8ac8 <__adddf3+0x138>
   d8c26:	bf00      	nop

000d8c28 <__aeabi_i2d>:
   d8c28:	f090 0f00 	teq	r0, #0
   d8c2c:	bf04      	itt	eq
   d8c2e:	2100      	moveq	r1, #0
   d8c30:	4770      	bxeq	lr
   d8c32:	b530      	push	{r4, r5, lr}
   d8c34:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8c38:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8c3c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8c40:	bf48      	it	mi
   d8c42:	4240      	negmi	r0, r0
   d8c44:	f04f 0100 	mov.w	r1, #0
   d8c48:	e73e      	b.n	d8ac8 <__adddf3+0x138>
   d8c4a:	bf00      	nop

000d8c4c <__aeabi_f2d>:
   d8c4c:	0042      	lsls	r2, r0, #1
   d8c4e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8c52:	ea4f 0131 	mov.w	r1, r1, rrx
   d8c56:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8c5a:	bf1f      	itttt	ne
   d8c5c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8c60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8c64:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8c68:	4770      	bxne	lr
   d8c6a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d8c6e:	bf08      	it	eq
   d8c70:	4770      	bxeq	lr
   d8c72:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8c76:	bf04      	itt	eq
   d8c78:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8c7c:	4770      	bxeq	lr
   d8c7e:	b530      	push	{r4, r5, lr}
   d8c80:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8c84:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8c88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8c8c:	e71c      	b.n	d8ac8 <__adddf3+0x138>
   d8c8e:	bf00      	nop

000d8c90 <__aeabi_ul2d>:
   d8c90:	ea50 0201 	orrs.w	r2, r0, r1
   d8c94:	bf08      	it	eq
   d8c96:	4770      	bxeq	lr
   d8c98:	b530      	push	{r4, r5, lr}
   d8c9a:	f04f 0500 	mov.w	r5, #0
   d8c9e:	e00a      	b.n	d8cb6 <__aeabi_l2d+0x16>

000d8ca0 <__aeabi_l2d>:
   d8ca0:	ea50 0201 	orrs.w	r2, r0, r1
   d8ca4:	bf08      	it	eq
   d8ca6:	4770      	bxeq	lr
   d8ca8:	b530      	push	{r4, r5, lr}
   d8caa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8cae:	d502      	bpl.n	d8cb6 <__aeabi_l2d+0x16>
   d8cb0:	4240      	negs	r0, r0
   d8cb2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8cb6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8cba:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8cbe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8cc2:	f43f aed8 	beq.w	d8a76 <__adddf3+0xe6>
   d8cc6:	f04f 0203 	mov.w	r2, #3
   d8cca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8cce:	bf18      	it	ne
   d8cd0:	3203      	addne	r2, #3
   d8cd2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8cd6:	bf18      	it	ne
   d8cd8:	3203      	addne	r2, #3
   d8cda:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8cde:	f1c2 0320 	rsb	r3, r2, #32
   d8ce2:	fa00 fc03 	lsl.w	ip, r0, r3
   d8ce6:	fa20 f002 	lsr.w	r0, r0, r2
   d8cea:	fa01 fe03 	lsl.w	lr, r1, r3
   d8cee:	ea40 000e 	orr.w	r0, r0, lr
   d8cf2:	fa21 f102 	lsr.w	r1, r1, r2
   d8cf6:	4414      	add	r4, r2
   d8cf8:	e6bd      	b.n	d8a76 <__adddf3+0xe6>
   d8cfa:	bf00      	nop

000d8cfc <__aeabi_dmul>:
   d8cfc:	b570      	push	{r4, r5, r6, lr}
   d8cfe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8d02:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8d06:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8d0a:	bf1d      	ittte	ne
   d8d0c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8d10:	ea94 0f0c 	teqne	r4, ip
   d8d14:	ea95 0f0c 	teqne	r5, ip
   d8d18:	f000 f8de 	bleq	d8ed8 <__aeabi_dmul+0x1dc>
   d8d1c:	442c      	add	r4, r5
   d8d1e:	ea81 0603 	eor.w	r6, r1, r3
   d8d22:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8d26:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8d2a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8d2e:	bf18      	it	ne
   d8d30:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8d34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8d38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8d3c:	d038      	beq.n	d8db0 <__aeabi_dmul+0xb4>
   d8d3e:	fba0 ce02 	umull	ip, lr, r0, r2
   d8d42:	f04f 0500 	mov.w	r5, #0
   d8d46:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8d4a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8d4e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8d52:	f04f 0600 	mov.w	r6, #0
   d8d56:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8d5a:	f09c 0f00 	teq	ip, #0
   d8d5e:	bf18      	it	ne
   d8d60:	f04e 0e01 	orrne.w	lr, lr, #1
   d8d64:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8d68:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8d6c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8d70:	d204      	bcs.n	d8d7c <__aeabi_dmul+0x80>
   d8d72:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8d76:	416d      	adcs	r5, r5
   d8d78:	eb46 0606 	adc.w	r6, r6, r6
   d8d7c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8d80:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8d84:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8d88:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8d8c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8d90:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8d94:	bf88      	it	hi
   d8d96:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8d9a:	d81e      	bhi.n	d8dda <__aeabi_dmul+0xde>
   d8d9c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8da0:	bf08      	it	eq
   d8da2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8da6:	f150 0000 	adcs.w	r0, r0, #0
   d8daa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8dae:	bd70      	pop	{r4, r5, r6, pc}
   d8db0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8db4:	ea46 0101 	orr.w	r1, r6, r1
   d8db8:	ea40 0002 	orr.w	r0, r0, r2
   d8dbc:	ea81 0103 	eor.w	r1, r1, r3
   d8dc0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8dc4:	bfc2      	ittt	gt
   d8dc6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8dca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8dce:	bd70      	popgt	{r4, r5, r6, pc}
   d8dd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8dd4:	f04f 0e00 	mov.w	lr, #0
   d8dd8:	3c01      	subs	r4, #1
   d8dda:	f300 80ab 	bgt.w	d8f34 <__aeabi_dmul+0x238>
   d8dde:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8de2:	bfde      	ittt	le
   d8de4:	2000      	movle	r0, #0
   d8de6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8dea:	bd70      	pople	{r4, r5, r6, pc}
   d8dec:	f1c4 0400 	rsb	r4, r4, #0
   d8df0:	3c20      	subs	r4, #32
   d8df2:	da35      	bge.n	d8e60 <__aeabi_dmul+0x164>
   d8df4:	340c      	adds	r4, #12
   d8df6:	dc1b      	bgt.n	d8e30 <__aeabi_dmul+0x134>
   d8df8:	f104 0414 	add.w	r4, r4, #20
   d8dfc:	f1c4 0520 	rsb	r5, r4, #32
   d8e00:	fa00 f305 	lsl.w	r3, r0, r5
   d8e04:	fa20 f004 	lsr.w	r0, r0, r4
   d8e08:	fa01 f205 	lsl.w	r2, r1, r5
   d8e0c:	ea40 0002 	orr.w	r0, r0, r2
   d8e10:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8e14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8e18:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8e1c:	fa21 f604 	lsr.w	r6, r1, r4
   d8e20:	eb42 0106 	adc.w	r1, r2, r6
   d8e24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8e28:	bf08      	it	eq
   d8e2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8e2e:	bd70      	pop	{r4, r5, r6, pc}
   d8e30:	f1c4 040c 	rsb	r4, r4, #12
   d8e34:	f1c4 0520 	rsb	r5, r4, #32
   d8e38:	fa00 f304 	lsl.w	r3, r0, r4
   d8e3c:	fa20 f005 	lsr.w	r0, r0, r5
   d8e40:	fa01 f204 	lsl.w	r2, r1, r4
   d8e44:	ea40 0002 	orr.w	r0, r0, r2
   d8e48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8e4c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8e50:	f141 0100 	adc.w	r1, r1, #0
   d8e54:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8e58:	bf08      	it	eq
   d8e5a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8e5e:	bd70      	pop	{r4, r5, r6, pc}
   d8e60:	f1c4 0520 	rsb	r5, r4, #32
   d8e64:	fa00 f205 	lsl.w	r2, r0, r5
   d8e68:	ea4e 0e02 	orr.w	lr, lr, r2
   d8e6c:	fa20 f304 	lsr.w	r3, r0, r4
   d8e70:	fa01 f205 	lsl.w	r2, r1, r5
   d8e74:	ea43 0302 	orr.w	r3, r3, r2
   d8e78:	fa21 f004 	lsr.w	r0, r1, r4
   d8e7c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8e80:	fa21 f204 	lsr.w	r2, r1, r4
   d8e84:	ea20 0002 	bic.w	r0, r0, r2
   d8e88:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8e8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8e90:	bf08      	it	eq
   d8e92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8e96:	bd70      	pop	{r4, r5, r6, pc}
   d8e98:	f094 0f00 	teq	r4, #0
   d8e9c:	d10f      	bne.n	d8ebe <__aeabi_dmul+0x1c2>
   d8e9e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8ea2:	0040      	lsls	r0, r0, #1
   d8ea4:	eb41 0101 	adc.w	r1, r1, r1
   d8ea8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8eac:	bf08      	it	eq
   d8eae:	3c01      	subeq	r4, #1
   d8eb0:	d0f7      	beq.n	d8ea2 <__aeabi_dmul+0x1a6>
   d8eb2:	ea41 0106 	orr.w	r1, r1, r6
   d8eb6:	f095 0f00 	teq	r5, #0
   d8eba:	bf18      	it	ne
   d8ebc:	4770      	bxne	lr
   d8ebe:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8ec2:	0052      	lsls	r2, r2, #1
   d8ec4:	eb43 0303 	adc.w	r3, r3, r3
   d8ec8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8ecc:	bf08      	it	eq
   d8ece:	3d01      	subeq	r5, #1
   d8ed0:	d0f7      	beq.n	d8ec2 <__aeabi_dmul+0x1c6>
   d8ed2:	ea43 0306 	orr.w	r3, r3, r6
   d8ed6:	4770      	bx	lr
   d8ed8:	ea94 0f0c 	teq	r4, ip
   d8edc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8ee0:	bf18      	it	ne
   d8ee2:	ea95 0f0c 	teqne	r5, ip
   d8ee6:	d00c      	beq.n	d8f02 <__aeabi_dmul+0x206>
   d8ee8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8eec:	bf18      	it	ne
   d8eee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8ef2:	d1d1      	bne.n	d8e98 <__aeabi_dmul+0x19c>
   d8ef4:	ea81 0103 	eor.w	r1, r1, r3
   d8ef8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8efc:	f04f 0000 	mov.w	r0, #0
   d8f00:	bd70      	pop	{r4, r5, r6, pc}
   d8f02:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8f06:	bf06      	itte	eq
   d8f08:	4610      	moveq	r0, r2
   d8f0a:	4619      	moveq	r1, r3
   d8f0c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8f10:	d019      	beq.n	d8f46 <__aeabi_dmul+0x24a>
   d8f12:	ea94 0f0c 	teq	r4, ip
   d8f16:	d102      	bne.n	d8f1e <__aeabi_dmul+0x222>
   d8f18:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8f1c:	d113      	bne.n	d8f46 <__aeabi_dmul+0x24a>
   d8f1e:	ea95 0f0c 	teq	r5, ip
   d8f22:	d105      	bne.n	d8f30 <__aeabi_dmul+0x234>
   d8f24:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8f28:	bf1c      	itt	ne
   d8f2a:	4610      	movne	r0, r2
   d8f2c:	4619      	movne	r1, r3
   d8f2e:	d10a      	bne.n	d8f46 <__aeabi_dmul+0x24a>
   d8f30:	ea81 0103 	eor.w	r1, r1, r3
   d8f34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8f38:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8f3c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8f40:	f04f 0000 	mov.w	r0, #0
   d8f44:	bd70      	pop	{r4, r5, r6, pc}
   d8f46:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8f4a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8f4e:	bd70      	pop	{r4, r5, r6, pc}

000d8f50 <__aeabi_ddiv>:
   d8f50:	b570      	push	{r4, r5, r6, lr}
   d8f52:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8f56:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8f5a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8f5e:	bf1d      	ittte	ne
   d8f60:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8f64:	ea94 0f0c 	teqne	r4, ip
   d8f68:	ea95 0f0c 	teqne	r5, ip
   d8f6c:	f000 f8a7 	bleq	d90be <__aeabi_ddiv+0x16e>
   d8f70:	eba4 0405 	sub.w	r4, r4, r5
   d8f74:	ea81 0e03 	eor.w	lr, r1, r3
   d8f78:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8f7c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8f80:	f000 8088 	beq.w	d9094 <__aeabi_ddiv+0x144>
   d8f84:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8f88:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8f8c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8f90:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8f94:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8f98:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8f9c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8fa0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8fa4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8fa8:	429d      	cmp	r5, r3
   d8faa:	bf08      	it	eq
   d8fac:	4296      	cmpeq	r6, r2
   d8fae:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8fb2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8fb6:	d202      	bcs.n	d8fbe <__aeabi_ddiv+0x6e>
   d8fb8:	085b      	lsrs	r3, r3, #1
   d8fba:	ea4f 0232 	mov.w	r2, r2, rrx
   d8fbe:	1ab6      	subs	r6, r6, r2
   d8fc0:	eb65 0503 	sbc.w	r5, r5, r3
   d8fc4:	085b      	lsrs	r3, r3, #1
   d8fc6:	ea4f 0232 	mov.w	r2, r2, rrx
   d8fca:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8fce:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8fd2:	ebb6 0e02 	subs.w	lr, r6, r2
   d8fd6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8fda:	bf22      	ittt	cs
   d8fdc:	1ab6      	subcs	r6, r6, r2
   d8fde:	4675      	movcs	r5, lr
   d8fe0:	ea40 000c 	orrcs.w	r0, r0, ip
   d8fe4:	085b      	lsrs	r3, r3, #1
   d8fe6:	ea4f 0232 	mov.w	r2, r2, rrx
   d8fea:	ebb6 0e02 	subs.w	lr, r6, r2
   d8fee:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8ff2:	bf22      	ittt	cs
   d8ff4:	1ab6      	subcs	r6, r6, r2
   d8ff6:	4675      	movcs	r5, lr
   d8ff8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8ffc:	085b      	lsrs	r3, r3, #1
   d8ffe:	ea4f 0232 	mov.w	r2, r2, rrx
   d9002:	ebb6 0e02 	subs.w	lr, r6, r2
   d9006:	eb75 0e03 	sbcs.w	lr, r5, r3
   d900a:	bf22      	ittt	cs
   d900c:	1ab6      	subcs	r6, r6, r2
   d900e:	4675      	movcs	r5, lr
   d9010:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9014:	085b      	lsrs	r3, r3, #1
   d9016:	ea4f 0232 	mov.w	r2, r2, rrx
   d901a:	ebb6 0e02 	subs.w	lr, r6, r2
   d901e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9022:	bf22      	ittt	cs
   d9024:	1ab6      	subcs	r6, r6, r2
   d9026:	4675      	movcs	r5, lr
   d9028:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d902c:	ea55 0e06 	orrs.w	lr, r5, r6
   d9030:	d018      	beq.n	d9064 <__aeabi_ddiv+0x114>
   d9032:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9036:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d903a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d903e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9042:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9046:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d904a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d904e:	d1c0      	bne.n	d8fd2 <__aeabi_ddiv+0x82>
   d9050:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9054:	d10b      	bne.n	d906e <__aeabi_ddiv+0x11e>
   d9056:	ea41 0100 	orr.w	r1, r1, r0
   d905a:	f04f 0000 	mov.w	r0, #0
   d905e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9062:	e7b6      	b.n	d8fd2 <__aeabi_ddiv+0x82>
   d9064:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9068:	bf04      	itt	eq
   d906a:	4301      	orreq	r1, r0
   d906c:	2000      	moveq	r0, #0
   d906e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9072:	bf88      	it	hi
   d9074:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9078:	f63f aeaf 	bhi.w	d8dda <__aeabi_dmul+0xde>
   d907c:	ebb5 0c03 	subs.w	ip, r5, r3
   d9080:	bf04      	itt	eq
   d9082:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9086:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d908a:	f150 0000 	adcs.w	r0, r0, #0
   d908e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9092:	bd70      	pop	{r4, r5, r6, pc}
   d9094:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9098:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d909c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d90a0:	bfc2      	ittt	gt
   d90a2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d90a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d90aa:	bd70      	popgt	{r4, r5, r6, pc}
   d90ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d90b0:	f04f 0e00 	mov.w	lr, #0
   d90b4:	3c01      	subs	r4, #1
   d90b6:	e690      	b.n	d8dda <__aeabi_dmul+0xde>
   d90b8:	ea45 0e06 	orr.w	lr, r5, r6
   d90bc:	e68d      	b.n	d8dda <__aeabi_dmul+0xde>
   d90be:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d90c2:	ea94 0f0c 	teq	r4, ip
   d90c6:	bf08      	it	eq
   d90c8:	ea95 0f0c 	teqeq	r5, ip
   d90cc:	f43f af3b 	beq.w	d8f46 <__aeabi_dmul+0x24a>
   d90d0:	ea94 0f0c 	teq	r4, ip
   d90d4:	d10a      	bne.n	d90ec <__aeabi_ddiv+0x19c>
   d90d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d90da:	f47f af34 	bne.w	d8f46 <__aeabi_dmul+0x24a>
   d90de:	ea95 0f0c 	teq	r5, ip
   d90e2:	f47f af25 	bne.w	d8f30 <__aeabi_dmul+0x234>
   d90e6:	4610      	mov	r0, r2
   d90e8:	4619      	mov	r1, r3
   d90ea:	e72c      	b.n	d8f46 <__aeabi_dmul+0x24a>
   d90ec:	ea95 0f0c 	teq	r5, ip
   d90f0:	d106      	bne.n	d9100 <__aeabi_ddiv+0x1b0>
   d90f2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d90f6:	f43f aefd 	beq.w	d8ef4 <__aeabi_dmul+0x1f8>
   d90fa:	4610      	mov	r0, r2
   d90fc:	4619      	mov	r1, r3
   d90fe:	e722      	b.n	d8f46 <__aeabi_dmul+0x24a>
   d9100:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9104:	bf18      	it	ne
   d9106:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d910a:	f47f aec5 	bne.w	d8e98 <__aeabi_dmul+0x19c>
   d910e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9112:	f47f af0d 	bne.w	d8f30 <__aeabi_dmul+0x234>
   d9116:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d911a:	f47f aeeb 	bne.w	d8ef4 <__aeabi_dmul+0x1f8>
   d911e:	e712      	b.n	d8f46 <__aeabi_dmul+0x24a>

000d9120 <__gedf2>:
   d9120:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d9124:	e006      	b.n	d9134 <__cmpdf2+0x4>
   d9126:	bf00      	nop

000d9128 <__ledf2>:
   d9128:	f04f 0c01 	mov.w	ip, #1
   d912c:	e002      	b.n	d9134 <__cmpdf2+0x4>
   d912e:	bf00      	nop

000d9130 <__cmpdf2>:
   d9130:	f04f 0c01 	mov.w	ip, #1
   d9134:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9138:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d913c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9140:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9144:	bf18      	it	ne
   d9146:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d914a:	d01b      	beq.n	d9184 <__cmpdf2+0x54>
   d914c:	b001      	add	sp, #4
   d914e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9152:	bf0c      	ite	eq
   d9154:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9158:	ea91 0f03 	teqne	r1, r3
   d915c:	bf02      	ittt	eq
   d915e:	ea90 0f02 	teqeq	r0, r2
   d9162:	2000      	moveq	r0, #0
   d9164:	4770      	bxeq	lr
   d9166:	f110 0f00 	cmn.w	r0, #0
   d916a:	ea91 0f03 	teq	r1, r3
   d916e:	bf58      	it	pl
   d9170:	4299      	cmppl	r1, r3
   d9172:	bf08      	it	eq
   d9174:	4290      	cmpeq	r0, r2
   d9176:	bf2c      	ite	cs
   d9178:	17d8      	asrcs	r0, r3, #31
   d917a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d917e:	f040 0001 	orr.w	r0, r0, #1
   d9182:	4770      	bx	lr
   d9184:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9188:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d918c:	d102      	bne.n	d9194 <__cmpdf2+0x64>
   d918e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9192:	d107      	bne.n	d91a4 <__cmpdf2+0x74>
   d9194:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9198:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d919c:	d1d6      	bne.n	d914c <__cmpdf2+0x1c>
   d919e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d91a2:	d0d3      	beq.n	d914c <__cmpdf2+0x1c>
   d91a4:	f85d 0b04 	ldr.w	r0, [sp], #4
   d91a8:	4770      	bx	lr
   d91aa:	bf00      	nop

000d91ac <__aeabi_cdrcmple>:
   d91ac:	4684      	mov	ip, r0
   d91ae:	4610      	mov	r0, r2
   d91b0:	4662      	mov	r2, ip
   d91b2:	468c      	mov	ip, r1
   d91b4:	4619      	mov	r1, r3
   d91b6:	4663      	mov	r3, ip
   d91b8:	e000      	b.n	d91bc <__aeabi_cdcmpeq>
   d91ba:	bf00      	nop

000d91bc <__aeabi_cdcmpeq>:
   d91bc:	b501      	push	{r0, lr}
   d91be:	f7ff ffb7 	bl	d9130 <__cmpdf2>
   d91c2:	2800      	cmp	r0, #0
   d91c4:	bf48      	it	mi
   d91c6:	f110 0f00 	cmnmi.w	r0, #0
   d91ca:	bd01      	pop	{r0, pc}

000d91cc <__aeabi_dcmpeq>:
   d91cc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d91d0:	f7ff fff4 	bl	d91bc <__aeabi_cdcmpeq>
   d91d4:	bf0c      	ite	eq
   d91d6:	2001      	moveq	r0, #1
   d91d8:	2000      	movne	r0, #0
   d91da:	f85d fb08 	ldr.w	pc, [sp], #8
   d91de:	bf00      	nop

000d91e0 <__aeabi_dcmplt>:
   d91e0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d91e4:	f7ff ffea 	bl	d91bc <__aeabi_cdcmpeq>
   d91e8:	bf34      	ite	cc
   d91ea:	2001      	movcc	r0, #1
   d91ec:	2000      	movcs	r0, #0
   d91ee:	f85d fb08 	ldr.w	pc, [sp], #8
   d91f2:	bf00      	nop

000d91f4 <__aeabi_dcmple>:
   d91f4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d91f8:	f7ff ffe0 	bl	d91bc <__aeabi_cdcmpeq>
   d91fc:	bf94      	ite	ls
   d91fe:	2001      	movls	r0, #1
   d9200:	2000      	movhi	r0, #0
   d9202:	f85d fb08 	ldr.w	pc, [sp], #8
   d9206:	bf00      	nop

000d9208 <__aeabi_dcmpge>:
   d9208:	f84d ed08 	str.w	lr, [sp, #-8]!
   d920c:	f7ff ffce 	bl	d91ac <__aeabi_cdrcmple>
   d9210:	bf94      	ite	ls
   d9212:	2001      	movls	r0, #1
   d9214:	2000      	movhi	r0, #0
   d9216:	f85d fb08 	ldr.w	pc, [sp], #8
   d921a:	bf00      	nop

000d921c <__aeabi_dcmpgt>:
   d921c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9220:	f7ff ffc4 	bl	d91ac <__aeabi_cdrcmple>
   d9224:	bf34      	ite	cc
   d9226:	2001      	movcc	r0, #1
   d9228:	2000      	movcs	r0, #0
   d922a:	f85d fb08 	ldr.w	pc, [sp], #8
   d922e:	bf00      	nop

000d9230 <__aeabi_dcmpun>:
   d9230:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9234:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9238:	d102      	bne.n	d9240 <__aeabi_dcmpun+0x10>
   d923a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d923e:	d10a      	bne.n	d9256 <__aeabi_dcmpun+0x26>
   d9240:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9244:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9248:	d102      	bne.n	d9250 <__aeabi_dcmpun+0x20>
   d924a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d924e:	d102      	bne.n	d9256 <__aeabi_dcmpun+0x26>
   d9250:	f04f 0000 	mov.w	r0, #0
   d9254:	4770      	bx	lr
   d9256:	f04f 0001 	mov.w	r0, #1
   d925a:	4770      	bx	lr

000d925c <__aeabi_d2uiz>:
   d925c:	004a      	lsls	r2, r1, #1
   d925e:	d211      	bcs.n	d9284 <__aeabi_d2uiz+0x28>
   d9260:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9264:	d211      	bcs.n	d928a <__aeabi_d2uiz+0x2e>
   d9266:	d50d      	bpl.n	d9284 <__aeabi_d2uiz+0x28>
   d9268:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d926c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9270:	d40e      	bmi.n	d9290 <__aeabi_d2uiz+0x34>
   d9272:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9276:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d927a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d927e:	fa23 f002 	lsr.w	r0, r3, r2
   d9282:	4770      	bx	lr
   d9284:	f04f 0000 	mov.w	r0, #0
   d9288:	4770      	bx	lr
   d928a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d928e:	d102      	bne.n	d9296 <__aeabi_d2uiz+0x3a>
   d9290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9294:	4770      	bx	lr
   d9296:	f04f 0000 	mov.w	r0, #0
   d929a:	4770      	bx	lr

000d929c <__aeabi_d2f>:
   d929c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d92a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d92a4:	bf24      	itt	cs
   d92a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d92aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d92ae:	d90d      	bls.n	d92cc <__aeabi_d2f+0x30>
   d92b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d92b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d92b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d92bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d92c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d92c4:	bf08      	it	eq
   d92c6:	f020 0001 	biceq.w	r0, r0, #1
   d92ca:	4770      	bx	lr
   d92cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d92d0:	d121      	bne.n	d9316 <__aeabi_d2f+0x7a>
   d92d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d92d6:	bfbc      	itt	lt
   d92d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d92dc:	4770      	bxlt	lr
   d92de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d92e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d92e6:	f1c2 0218 	rsb	r2, r2, #24
   d92ea:	f1c2 0c20 	rsb	ip, r2, #32
   d92ee:	fa10 f30c 	lsls.w	r3, r0, ip
   d92f2:	fa20 f002 	lsr.w	r0, r0, r2
   d92f6:	bf18      	it	ne
   d92f8:	f040 0001 	orrne.w	r0, r0, #1
   d92fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9300:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9304:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9308:	ea40 000c 	orr.w	r0, r0, ip
   d930c:	fa23 f302 	lsr.w	r3, r3, r2
   d9310:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9314:	e7cc      	b.n	d92b0 <__aeabi_d2f+0x14>
   d9316:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d931a:	d107      	bne.n	d932c <__aeabi_d2f+0x90>
   d931c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9320:	bf1e      	ittt	ne
   d9322:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9326:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d932a:	4770      	bxne	lr
   d932c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9330:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9334:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9338:	4770      	bx	lr
   d933a:	bf00      	nop

000d933c <__aeabi_d2ulz>:
   d933c:	b5d0      	push	{r4, r6, r7, lr}
   d933e:	4b0c      	ldr	r3, [pc, #48]	; (d9370 <__aeabi_d2ulz+0x34>)
   d9340:	2200      	movs	r2, #0
   d9342:	4606      	mov	r6, r0
   d9344:	460f      	mov	r7, r1
   d9346:	f7ff fcd9 	bl	d8cfc <__aeabi_dmul>
   d934a:	f7ff ff87 	bl	d925c <__aeabi_d2uiz>
   d934e:	4604      	mov	r4, r0
   d9350:	f7ff fc5a 	bl	d8c08 <__aeabi_ui2d>
   d9354:	4b07      	ldr	r3, [pc, #28]	; (d9374 <__aeabi_d2ulz+0x38>)
   d9356:	2200      	movs	r2, #0
   d9358:	f7ff fcd0 	bl	d8cfc <__aeabi_dmul>
   d935c:	4602      	mov	r2, r0
   d935e:	460b      	mov	r3, r1
   d9360:	4630      	mov	r0, r6
   d9362:	4639      	mov	r1, r7
   d9364:	f7ff fb12 	bl	d898c <__aeabi_dsub>
   d9368:	f7ff ff78 	bl	d925c <__aeabi_d2uiz>
   d936c:	4621      	mov	r1, r4
   d936e:	bdd0      	pop	{r4, r6, r7, pc}
   d9370:	3df00000 	.word	0x3df00000
   d9374:	41f00000 	.word	0x41f00000

000d9378 <asctime_r>:
   d9378:	b510      	push	{r4, lr}
   d937a:	460c      	mov	r4, r1
   d937c:	6941      	ldr	r1, [r0, #20]
   d937e:	6903      	ldr	r3, [r0, #16]
   d9380:	6982      	ldr	r2, [r0, #24]
   d9382:	b086      	sub	sp, #24
   d9384:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d9388:	9104      	str	r1, [sp, #16]
   d938a:	6801      	ldr	r1, [r0, #0]
   d938c:	9103      	str	r1, [sp, #12]
   d938e:	6841      	ldr	r1, [r0, #4]
   d9390:	9102      	str	r1, [sp, #8]
   d9392:	6881      	ldr	r1, [r0, #8]
   d9394:	9101      	str	r1, [sp, #4]
   d9396:	68c1      	ldr	r1, [r0, #12]
   d9398:	9100      	str	r1, [sp, #0]
   d939a:	4907      	ldr	r1, [pc, #28]	; (d93b8 <asctime_r+0x40>)
   d939c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d93a0:	440b      	add	r3, r1
   d93a2:	4906      	ldr	r1, [pc, #24]	; (d93bc <asctime_r+0x44>)
   d93a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d93a8:	440a      	add	r2, r1
   d93aa:	4620      	mov	r0, r4
   d93ac:	4904      	ldr	r1, [pc, #16]	; (d93c0 <asctime_r+0x48>)
   d93ae:	f7fd fe95 	bl	d70dc <siprintf>
   d93b2:	4620      	mov	r0, r4
   d93b4:	b006      	add	sp, #24
   d93b6:	bd10      	pop	{r4, pc}
   d93b8:	000dbed6 	.word	0x000dbed6
   d93bc:	000dbec1 	.word	0x000dbec1
   d93c0:	000dbea1 	.word	0x000dbea1

000d93c4 <atof>:
   d93c4:	2100      	movs	r1, #0
   d93c6:	f000 befd 	b.w	da1c4 <strtod>

000d93ca <atoi>:
   d93ca:	220a      	movs	r2, #10
   d93cc:	2100      	movs	r1, #0
   d93ce:	f000 bf7f 	b.w	da2d0 <strtol>
	...

000d93d4 <__cxa_atexit>:
   d93d4:	b510      	push	{r4, lr}
   d93d6:	4c05      	ldr	r4, [pc, #20]	; (d93ec <__cxa_atexit+0x18>)
   d93d8:	4613      	mov	r3, r2
   d93da:	b12c      	cbz	r4, d93e8 <__cxa_atexit+0x14>
   d93dc:	460a      	mov	r2, r1
   d93de:	4601      	mov	r1, r0
   d93e0:	2002      	movs	r0, #2
   d93e2:	f3af 8000 	nop.w
   d93e6:	bd10      	pop	{r4, pc}
   d93e8:	4620      	mov	r0, r4
   d93ea:	e7fc      	b.n	d93e6 <__cxa_atexit+0x12>
   d93ec:	00000000 	.word	0x00000000

000d93f0 <gmtime>:
   d93f0:	b538      	push	{r3, r4, r5, lr}
   d93f2:	4b07      	ldr	r3, [pc, #28]	; (d9410 <gmtime+0x20>)
   d93f4:	681d      	ldr	r5, [r3, #0]
   d93f6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   d93f8:	4604      	mov	r4, r0
   d93fa:	b91b      	cbnz	r3, d9404 <gmtime+0x14>
   d93fc:	2024      	movs	r0, #36	; 0x24
   d93fe:	f7fd fe55 	bl	d70ac <malloc>
   d9402:	63e8      	str	r0, [r5, #60]	; 0x3c
   d9404:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   d9406:	4620      	mov	r0, r4
   d9408:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d940c:	f7fd bea6 	b.w	d715c <gmtime_r>
   d9410:	2003dc98 	.word	0x2003dc98

000d9414 <memcpy>:
   d9414:	440a      	add	r2, r1
   d9416:	4291      	cmp	r1, r2
   d9418:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d941c:	d100      	bne.n	d9420 <memcpy+0xc>
   d941e:	4770      	bx	lr
   d9420:	b510      	push	{r4, lr}
   d9422:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9426:	f803 4f01 	strb.w	r4, [r3, #1]!
   d942a:	4291      	cmp	r1, r2
   d942c:	d1f9      	bne.n	d9422 <memcpy+0xe>
   d942e:	bd10      	pop	{r4, pc}

000d9430 <memmove>:
   d9430:	4288      	cmp	r0, r1
   d9432:	b510      	push	{r4, lr}
   d9434:	eb01 0402 	add.w	r4, r1, r2
   d9438:	d902      	bls.n	d9440 <memmove+0x10>
   d943a:	4284      	cmp	r4, r0
   d943c:	4623      	mov	r3, r4
   d943e:	d807      	bhi.n	d9450 <memmove+0x20>
   d9440:	1e43      	subs	r3, r0, #1
   d9442:	42a1      	cmp	r1, r4
   d9444:	d008      	beq.n	d9458 <memmove+0x28>
   d9446:	f811 2b01 	ldrb.w	r2, [r1], #1
   d944a:	f803 2f01 	strb.w	r2, [r3, #1]!
   d944e:	e7f8      	b.n	d9442 <memmove+0x12>
   d9450:	4402      	add	r2, r0
   d9452:	4601      	mov	r1, r0
   d9454:	428a      	cmp	r2, r1
   d9456:	d100      	bne.n	d945a <memmove+0x2a>
   d9458:	bd10      	pop	{r4, pc}
   d945a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d945e:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d9462:	e7f7      	b.n	d9454 <memmove+0x24>

000d9464 <memset>:
   d9464:	4402      	add	r2, r0
   d9466:	4603      	mov	r3, r0
   d9468:	4293      	cmp	r3, r2
   d946a:	d100      	bne.n	d946e <memset+0xa>
   d946c:	4770      	bx	lr
   d946e:	f803 1b01 	strb.w	r1, [r3], #1
   d9472:	e7f9      	b.n	d9468 <memset+0x4>

000d9474 <srand>:
   d9474:	b538      	push	{r3, r4, r5, lr}
   d9476:	4b0d      	ldr	r3, [pc, #52]	; (d94ac <srand+0x38>)
   d9478:	681d      	ldr	r5, [r3, #0]
   d947a:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d947c:	4604      	mov	r4, r0
   d947e:	b97b      	cbnz	r3, d94a0 <srand+0x2c>
   d9480:	2018      	movs	r0, #24
   d9482:	f7fd fe13 	bl	d70ac <malloc>
   d9486:	4a0a      	ldr	r2, [pc, #40]	; (d94b0 <srand+0x3c>)
   d9488:	4b0a      	ldr	r3, [pc, #40]	; (d94b4 <srand+0x40>)
   d948a:	63a8      	str	r0, [r5, #56]	; 0x38
   d948c:	e9c0 2300 	strd	r2, r3, [r0]
   d9490:	4b09      	ldr	r3, [pc, #36]	; (d94b8 <srand+0x44>)
   d9492:	6083      	str	r3, [r0, #8]
   d9494:	230b      	movs	r3, #11
   d9496:	8183      	strh	r3, [r0, #12]
   d9498:	2201      	movs	r2, #1
   d949a:	2300      	movs	r3, #0
   d949c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d94a0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d94a2:	2200      	movs	r2, #0
   d94a4:	611c      	str	r4, [r3, #16]
   d94a6:	615a      	str	r2, [r3, #20]
   d94a8:	bd38      	pop	{r3, r4, r5, pc}
   d94aa:	bf00      	nop
   d94ac:	2003dc98 	.word	0x2003dc98
   d94b0:	abcd330e 	.word	0xabcd330e
   d94b4:	e66d1234 	.word	0xe66d1234
   d94b8:	0005deec 	.word	0x0005deec

000d94bc <strcmp>:
   d94bc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d94c0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d94c4:	2a01      	cmp	r2, #1
   d94c6:	bf28      	it	cs
   d94c8:	429a      	cmpcs	r2, r3
   d94ca:	d0f7      	beq.n	d94bc <strcmp>
   d94cc:	1ad0      	subs	r0, r2, r3
   d94ce:	4770      	bx	lr

000d94d0 <strcpy>:
   d94d0:	4603      	mov	r3, r0
   d94d2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d94d6:	f803 2b01 	strb.w	r2, [r3], #1
   d94da:	2a00      	cmp	r2, #0
   d94dc:	d1f9      	bne.n	d94d2 <strcpy+0x2>
   d94de:	4770      	bx	lr

000d94e0 <strdup>:
   d94e0:	4b02      	ldr	r3, [pc, #8]	; (d94ec <strdup+0xc>)
   d94e2:	4601      	mov	r1, r0
   d94e4:	6818      	ldr	r0, [r3, #0]
   d94e6:	f000 b803 	b.w	d94f0 <_strdup_r>
   d94ea:	bf00      	nop
   d94ec:	2003dc98 	.word	0x2003dc98

000d94f0 <_strdup_r>:
   d94f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d94f2:	4604      	mov	r4, r0
   d94f4:	4608      	mov	r0, r1
   d94f6:	460d      	mov	r5, r1
   d94f8:	f000 f80f 	bl	d951a <strlen>
   d94fc:	1c42      	adds	r2, r0, #1
   d94fe:	4611      	mov	r1, r2
   d9500:	4620      	mov	r0, r4
   d9502:	9201      	str	r2, [sp, #4]
   d9504:	f7fd fe02 	bl	d710c <_malloc_r>
   d9508:	4604      	mov	r4, r0
   d950a:	b118      	cbz	r0, d9514 <_strdup_r+0x24>
   d950c:	9a01      	ldr	r2, [sp, #4]
   d950e:	4629      	mov	r1, r5
   d9510:	f7ff ff80 	bl	d9414 <memcpy>
   d9514:	4620      	mov	r0, r4
   d9516:	b003      	add	sp, #12
   d9518:	bd30      	pop	{r4, r5, pc}

000d951a <strlen>:
   d951a:	4603      	mov	r3, r0
   d951c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d9520:	2a00      	cmp	r2, #0
   d9522:	d1fb      	bne.n	d951c <strlen+0x2>
   d9524:	1a18      	subs	r0, r3, r0
   d9526:	3801      	subs	r0, #1
   d9528:	4770      	bx	lr

000d952a <strncmp>:
   d952a:	b510      	push	{r4, lr}
   d952c:	b16a      	cbz	r2, d954a <strncmp+0x20>
   d952e:	3901      	subs	r1, #1
   d9530:	1884      	adds	r4, r0, r2
   d9532:	f810 3b01 	ldrb.w	r3, [r0], #1
   d9536:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d953a:	4293      	cmp	r3, r2
   d953c:	d103      	bne.n	d9546 <strncmp+0x1c>
   d953e:	42a0      	cmp	r0, r4
   d9540:	d001      	beq.n	d9546 <strncmp+0x1c>
   d9542:	2b00      	cmp	r3, #0
   d9544:	d1f5      	bne.n	d9532 <strncmp+0x8>
   d9546:	1a98      	subs	r0, r3, r2
   d9548:	bd10      	pop	{r4, pc}
   d954a:	4610      	mov	r0, r2
   d954c:	e7fc      	b.n	d9548 <strncmp+0x1e>

000d954e <strncpy>:
   d954e:	b510      	push	{r4, lr}
   d9550:	3901      	subs	r1, #1
   d9552:	4603      	mov	r3, r0
   d9554:	b132      	cbz	r2, d9564 <strncpy+0x16>
   d9556:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d955a:	f803 4b01 	strb.w	r4, [r3], #1
   d955e:	3a01      	subs	r2, #1
   d9560:	2c00      	cmp	r4, #0
   d9562:	d1f7      	bne.n	d9554 <strncpy+0x6>
   d9564:	441a      	add	r2, r3
   d9566:	2100      	movs	r1, #0
   d9568:	4293      	cmp	r3, r2
   d956a:	d100      	bne.n	d956e <strncpy+0x20>
   d956c:	bd10      	pop	{r4, pc}
   d956e:	f803 1b01 	strb.w	r1, [r3], #1
   d9572:	e7f9      	b.n	d9568 <strncpy+0x1a>

000d9574 <sulp>:
   d9574:	b570      	push	{r4, r5, r6, lr}
   d9576:	4604      	mov	r4, r0
   d9578:	460d      	mov	r5, r1
   d957a:	ec45 4b10 	vmov	d0, r4, r5
   d957e:	4616      	mov	r6, r2
   d9580:	f001 fd1c 	bl	dafbc <__ulp>
   d9584:	ec51 0b10 	vmov	r0, r1, d0
   d9588:	b17e      	cbz	r6, d95aa <sulp+0x36>
   d958a:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d958e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9592:	2b00      	cmp	r3, #0
   d9594:	dd09      	ble.n	d95aa <sulp+0x36>
   d9596:	051b      	lsls	r3, r3, #20
   d9598:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d959c:	2400      	movs	r4, #0
   d959e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d95a2:	4622      	mov	r2, r4
   d95a4:	462b      	mov	r3, r5
   d95a6:	f7ff fba9 	bl	d8cfc <__aeabi_dmul>
   d95aa:	bd70      	pop	{r4, r5, r6, pc}
   d95ac:	0000      	movs	r0, r0
	...

000d95b0 <_strtod_l>:
   d95b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d95b4:	b0a3      	sub	sp, #140	; 0x8c
   d95b6:	461f      	mov	r7, r3
   d95b8:	2300      	movs	r3, #0
   d95ba:	931e      	str	r3, [sp, #120]	; 0x78
   d95bc:	4ba4      	ldr	r3, [pc, #656]	; (d9850 <_strtod_l+0x2a0>)
   d95be:	9219      	str	r2, [sp, #100]	; 0x64
   d95c0:	681b      	ldr	r3, [r3, #0]
   d95c2:	9307      	str	r3, [sp, #28]
   d95c4:	4604      	mov	r4, r0
   d95c6:	4618      	mov	r0, r3
   d95c8:	4688      	mov	r8, r1
   d95ca:	f7ff ffa6 	bl	d951a <strlen>
   d95ce:	f04f 0a00 	mov.w	sl, #0
   d95d2:	4605      	mov	r5, r0
   d95d4:	f04f 0b00 	mov.w	fp, #0
   d95d8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d95dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d95de:	781a      	ldrb	r2, [r3, #0]
   d95e0:	2a2b      	cmp	r2, #43	; 0x2b
   d95e2:	d04c      	beq.n	d967e <_strtod_l+0xce>
   d95e4:	d839      	bhi.n	d965a <_strtod_l+0xaa>
   d95e6:	2a0d      	cmp	r2, #13
   d95e8:	d832      	bhi.n	d9650 <_strtod_l+0xa0>
   d95ea:	2a08      	cmp	r2, #8
   d95ec:	d832      	bhi.n	d9654 <_strtod_l+0xa4>
   d95ee:	2a00      	cmp	r2, #0
   d95f0:	d03c      	beq.n	d966c <_strtod_l+0xbc>
   d95f2:	2300      	movs	r3, #0
   d95f4:	930e      	str	r3, [sp, #56]	; 0x38
   d95f6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d95f8:	7833      	ldrb	r3, [r6, #0]
   d95fa:	2b30      	cmp	r3, #48	; 0x30
   d95fc:	f040 80b4 	bne.w	d9768 <_strtod_l+0x1b8>
   d9600:	7873      	ldrb	r3, [r6, #1]
   d9602:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d9606:	2b58      	cmp	r3, #88	; 0x58
   d9608:	d16c      	bne.n	d96e4 <_strtod_l+0x134>
   d960a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d960c:	9301      	str	r3, [sp, #4]
   d960e:	ab1e      	add	r3, sp, #120	; 0x78
   d9610:	9702      	str	r7, [sp, #8]
   d9612:	9300      	str	r3, [sp, #0]
   d9614:	4a8f      	ldr	r2, [pc, #572]	; (d9854 <_strtod_l+0x2a4>)
   d9616:	ab1f      	add	r3, sp, #124	; 0x7c
   d9618:	a91d      	add	r1, sp, #116	; 0x74
   d961a:	4620      	mov	r0, r4
   d961c:	f000 feca 	bl	da3b4 <__gethex>
   d9620:	f010 0707 	ands.w	r7, r0, #7
   d9624:	4605      	mov	r5, r0
   d9626:	d005      	beq.n	d9634 <_strtod_l+0x84>
   d9628:	2f06      	cmp	r7, #6
   d962a:	d12a      	bne.n	d9682 <_strtod_l+0xd2>
   d962c:	3601      	adds	r6, #1
   d962e:	2300      	movs	r3, #0
   d9630:	961d      	str	r6, [sp, #116]	; 0x74
   d9632:	930e      	str	r3, [sp, #56]	; 0x38
   d9634:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d9636:	2b00      	cmp	r3, #0
   d9638:	f040 8596 	bne.w	da168 <_strtod_l+0xbb8>
   d963c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d963e:	b1db      	cbz	r3, d9678 <_strtod_l+0xc8>
   d9640:	4652      	mov	r2, sl
   d9642:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d9646:	ec43 2b10 	vmov	d0, r2, r3
   d964a:	b023      	add	sp, #140	; 0x8c
   d964c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9650:	2a20      	cmp	r2, #32
   d9652:	d1ce      	bne.n	d95f2 <_strtod_l+0x42>
   d9654:	3301      	adds	r3, #1
   d9656:	931d      	str	r3, [sp, #116]	; 0x74
   d9658:	e7c0      	b.n	d95dc <_strtod_l+0x2c>
   d965a:	2a2d      	cmp	r2, #45	; 0x2d
   d965c:	d1c9      	bne.n	d95f2 <_strtod_l+0x42>
   d965e:	2201      	movs	r2, #1
   d9660:	920e      	str	r2, [sp, #56]	; 0x38
   d9662:	1c5a      	adds	r2, r3, #1
   d9664:	921d      	str	r2, [sp, #116]	; 0x74
   d9666:	785b      	ldrb	r3, [r3, #1]
   d9668:	2b00      	cmp	r3, #0
   d966a:	d1c4      	bne.n	d95f6 <_strtod_l+0x46>
   d966c:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d966e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d9672:	2b00      	cmp	r3, #0
   d9674:	f040 8576 	bne.w	da164 <_strtod_l+0xbb4>
   d9678:	4652      	mov	r2, sl
   d967a:	465b      	mov	r3, fp
   d967c:	e7e3      	b.n	d9646 <_strtod_l+0x96>
   d967e:	2200      	movs	r2, #0
   d9680:	e7ee      	b.n	d9660 <_strtod_l+0xb0>
   d9682:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d9684:	b13a      	cbz	r2, d9696 <_strtod_l+0xe6>
   d9686:	2135      	movs	r1, #53	; 0x35
   d9688:	a820      	add	r0, sp, #128	; 0x80
   d968a:	f001 fd96 	bl	db1ba <__copybits>
   d968e:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9690:	4620      	mov	r0, r4
   d9692:	f001 f9cb 	bl	daa2c <_Bfree>
   d9696:	3f01      	subs	r7, #1
   d9698:	2f05      	cmp	r7, #5
   d969a:	d807      	bhi.n	d96ac <_strtod_l+0xfc>
   d969c:	e8df f007 	tbb	[pc, r7]
   d96a0:	1d180b0e 	.word	0x1d180b0e
   d96a4:	030e      	.short	0x030e
   d96a6:	f04f 0b00 	mov.w	fp, #0
   d96aa:	46da      	mov	sl, fp
   d96ac:	0728      	lsls	r0, r5, #28
   d96ae:	d5c1      	bpl.n	d9634 <_strtod_l+0x84>
   d96b0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d96b4:	e7be      	b.n	d9634 <_strtod_l+0x84>
   d96b6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d96ba:	e7f7      	b.n	d96ac <_strtod_l+0xfc>
   d96bc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d96c0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d96c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d96c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d96ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d96ce:	e7ed      	b.n	d96ac <_strtod_l+0xfc>
   d96d0:	f8df b184 	ldr.w	fp, [pc, #388]	; d9858 <_strtod_l+0x2a8>
   d96d4:	f04f 0a00 	mov.w	sl, #0
   d96d8:	e7e8      	b.n	d96ac <_strtod_l+0xfc>
   d96da:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d96de:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d96e2:	e7e3      	b.n	d96ac <_strtod_l+0xfc>
   d96e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d96e6:	1c5a      	adds	r2, r3, #1
   d96e8:	921d      	str	r2, [sp, #116]	; 0x74
   d96ea:	785b      	ldrb	r3, [r3, #1]
   d96ec:	2b30      	cmp	r3, #48	; 0x30
   d96ee:	d0f9      	beq.n	d96e4 <_strtod_l+0x134>
   d96f0:	2b00      	cmp	r3, #0
   d96f2:	d09f      	beq.n	d9634 <_strtod_l+0x84>
   d96f4:	2301      	movs	r3, #1
   d96f6:	f04f 0900 	mov.w	r9, #0
   d96fa:	9304      	str	r3, [sp, #16]
   d96fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d96fe:	930a      	str	r3, [sp, #40]	; 0x28
   d9700:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d9704:	464f      	mov	r7, r9
   d9706:	220a      	movs	r2, #10
   d9708:	981d      	ldr	r0, [sp, #116]	; 0x74
   d970a:	7806      	ldrb	r6, [r0, #0]
   d970c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d9710:	b2d9      	uxtb	r1, r3
   d9712:	2909      	cmp	r1, #9
   d9714:	d92a      	bls.n	d976c <_strtod_l+0x1bc>
   d9716:	9907      	ldr	r1, [sp, #28]
   d9718:	462a      	mov	r2, r5
   d971a:	f7ff ff06 	bl	d952a <strncmp>
   d971e:	b398      	cbz	r0, d9788 <_strtod_l+0x1d8>
   d9720:	2000      	movs	r0, #0
   d9722:	4633      	mov	r3, r6
   d9724:	463d      	mov	r5, r7
   d9726:	9007      	str	r0, [sp, #28]
   d9728:	4602      	mov	r2, r0
   d972a:	2b65      	cmp	r3, #101	; 0x65
   d972c:	d001      	beq.n	d9732 <_strtod_l+0x182>
   d972e:	2b45      	cmp	r3, #69	; 0x45
   d9730:	d118      	bne.n	d9764 <_strtod_l+0x1b4>
   d9732:	b91d      	cbnz	r5, d973c <_strtod_l+0x18c>
   d9734:	9b04      	ldr	r3, [sp, #16]
   d9736:	4303      	orrs	r3, r0
   d9738:	d098      	beq.n	d966c <_strtod_l+0xbc>
   d973a:	2500      	movs	r5, #0
   d973c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d9740:	f108 0301 	add.w	r3, r8, #1
   d9744:	931d      	str	r3, [sp, #116]	; 0x74
   d9746:	f898 3001 	ldrb.w	r3, [r8, #1]
   d974a:	2b2b      	cmp	r3, #43	; 0x2b
   d974c:	d075      	beq.n	d983a <_strtod_l+0x28a>
   d974e:	2b2d      	cmp	r3, #45	; 0x2d
   d9750:	d07b      	beq.n	d984a <_strtod_l+0x29a>
   d9752:	f04f 0c00 	mov.w	ip, #0
   d9756:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d975a:	2909      	cmp	r1, #9
   d975c:	f240 8082 	bls.w	d9864 <_strtod_l+0x2b4>
   d9760:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d9764:	2600      	movs	r6, #0
   d9766:	e09d      	b.n	d98a4 <_strtod_l+0x2f4>
   d9768:	2300      	movs	r3, #0
   d976a:	e7c4      	b.n	d96f6 <_strtod_l+0x146>
   d976c:	2f08      	cmp	r7, #8
   d976e:	bfd8      	it	le
   d9770:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d9772:	f100 0001 	add.w	r0, r0, #1
   d9776:	bfda      	itte	le
   d9778:	fb02 3301 	mlale	r3, r2, r1, r3
   d977c:	9309      	strle	r3, [sp, #36]	; 0x24
   d977e:	fb02 3909 	mlagt	r9, r2, r9, r3
   d9782:	3701      	adds	r7, #1
   d9784:	901d      	str	r0, [sp, #116]	; 0x74
   d9786:	e7bf      	b.n	d9708 <_strtod_l+0x158>
   d9788:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d978a:	195a      	adds	r2, r3, r5
   d978c:	921d      	str	r2, [sp, #116]	; 0x74
   d978e:	5d5b      	ldrb	r3, [r3, r5]
   d9790:	2f00      	cmp	r7, #0
   d9792:	d037      	beq.n	d9804 <_strtod_l+0x254>
   d9794:	9007      	str	r0, [sp, #28]
   d9796:	463d      	mov	r5, r7
   d9798:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d979c:	2a09      	cmp	r2, #9
   d979e:	d912      	bls.n	d97c6 <_strtod_l+0x216>
   d97a0:	2201      	movs	r2, #1
   d97a2:	e7c2      	b.n	d972a <_strtod_l+0x17a>
   d97a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d97a6:	1c5a      	adds	r2, r3, #1
   d97a8:	921d      	str	r2, [sp, #116]	; 0x74
   d97aa:	785b      	ldrb	r3, [r3, #1]
   d97ac:	3001      	adds	r0, #1
   d97ae:	2b30      	cmp	r3, #48	; 0x30
   d97b0:	d0f8      	beq.n	d97a4 <_strtod_l+0x1f4>
   d97b2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d97b6:	2a08      	cmp	r2, #8
   d97b8:	f200 84db 	bhi.w	da172 <_strtod_l+0xbc2>
   d97bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d97be:	9007      	str	r0, [sp, #28]
   d97c0:	2000      	movs	r0, #0
   d97c2:	920a      	str	r2, [sp, #40]	; 0x28
   d97c4:	4605      	mov	r5, r0
   d97c6:	3b30      	subs	r3, #48	; 0x30
   d97c8:	f100 0201 	add.w	r2, r0, #1
   d97cc:	d014      	beq.n	d97f8 <_strtod_l+0x248>
   d97ce:	9907      	ldr	r1, [sp, #28]
   d97d0:	4411      	add	r1, r2
   d97d2:	9107      	str	r1, [sp, #28]
   d97d4:	462a      	mov	r2, r5
   d97d6:	eb00 0e05 	add.w	lr, r0, r5
   d97da:	210a      	movs	r1, #10
   d97dc:	4572      	cmp	r2, lr
   d97de:	d113      	bne.n	d9808 <_strtod_l+0x258>
   d97e0:	182a      	adds	r2, r5, r0
   d97e2:	2a08      	cmp	r2, #8
   d97e4:	f105 0501 	add.w	r5, r5, #1
   d97e8:	4405      	add	r5, r0
   d97ea:	dc1c      	bgt.n	d9826 <_strtod_l+0x276>
   d97ec:	9909      	ldr	r1, [sp, #36]	; 0x24
   d97ee:	220a      	movs	r2, #10
   d97f0:	fb02 3301 	mla	r3, r2, r1, r3
   d97f4:	9309      	str	r3, [sp, #36]	; 0x24
   d97f6:	2200      	movs	r2, #0
   d97f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d97fa:	1c59      	adds	r1, r3, #1
   d97fc:	911d      	str	r1, [sp, #116]	; 0x74
   d97fe:	785b      	ldrb	r3, [r3, #1]
   d9800:	4610      	mov	r0, r2
   d9802:	e7c9      	b.n	d9798 <_strtod_l+0x1e8>
   d9804:	4638      	mov	r0, r7
   d9806:	e7d2      	b.n	d97ae <_strtod_l+0x1fe>
   d9808:	2a08      	cmp	r2, #8
   d980a:	dc04      	bgt.n	d9816 <_strtod_l+0x266>
   d980c:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d980e:	434e      	muls	r6, r1
   d9810:	9609      	str	r6, [sp, #36]	; 0x24
   d9812:	3201      	adds	r2, #1
   d9814:	e7e2      	b.n	d97dc <_strtod_l+0x22c>
   d9816:	f102 0c01 	add.w	ip, r2, #1
   d981a:	f1bc 0f10 	cmp.w	ip, #16
   d981e:	bfd8      	it	le
   d9820:	fb01 f909 	mulle.w	r9, r1, r9
   d9824:	e7f5      	b.n	d9812 <_strtod_l+0x262>
   d9826:	2d10      	cmp	r5, #16
   d9828:	bfdc      	itt	le
   d982a:	220a      	movle	r2, #10
   d982c:	fb02 3909 	mlale	r9, r2, r9, r3
   d9830:	e7e1      	b.n	d97f6 <_strtod_l+0x246>
   d9832:	2300      	movs	r3, #0
   d9834:	9307      	str	r3, [sp, #28]
   d9836:	2201      	movs	r2, #1
   d9838:	e77c      	b.n	d9734 <_strtod_l+0x184>
   d983a:	f04f 0c00 	mov.w	ip, #0
   d983e:	f108 0302 	add.w	r3, r8, #2
   d9842:	931d      	str	r3, [sp, #116]	; 0x74
   d9844:	f898 3002 	ldrb.w	r3, [r8, #2]
   d9848:	e785      	b.n	d9756 <_strtod_l+0x1a6>
   d984a:	f04f 0c01 	mov.w	ip, #1
   d984e:	e7f6      	b.n	d983e <_strtod_l+0x28e>
   d9850:	000dc05c 	.word	0x000dc05c
   d9854:	000dbf08 	.word	0x000dbf08
   d9858:	7ff00000 	.word	0x7ff00000
   d985c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d985e:	1c59      	adds	r1, r3, #1
   d9860:	911d      	str	r1, [sp, #116]	; 0x74
   d9862:	785b      	ldrb	r3, [r3, #1]
   d9864:	2b30      	cmp	r3, #48	; 0x30
   d9866:	d0f9      	beq.n	d985c <_strtod_l+0x2ac>
   d9868:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d986c:	2908      	cmp	r1, #8
   d986e:	f63f af79 	bhi.w	d9764 <_strtod_l+0x1b4>
   d9872:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d9876:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9878:	9308      	str	r3, [sp, #32]
   d987a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d987c:	1c59      	adds	r1, r3, #1
   d987e:	911d      	str	r1, [sp, #116]	; 0x74
   d9880:	785b      	ldrb	r3, [r3, #1]
   d9882:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d9886:	2e09      	cmp	r6, #9
   d9888:	d937      	bls.n	d98fa <_strtod_l+0x34a>
   d988a:	9e08      	ldr	r6, [sp, #32]
   d988c:	1b89      	subs	r1, r1, r6
   d988e:	2908      	cmp	r1, #8
   d9890:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d9894:	dc02      	bgt.n	d989c <_strtod_l+0x2ec>
   d9896:	4576      	cmp	r6, lr
   d9898:	bfa8      	it	ge
   d989a:	4676      	movge	r6, lr
   d989c:	f1bc 0f00 	cmp.w	ip, #0
   d98a0:	d000      	beq.n	d98a4 <_strtod_l+0x2f4>
   d98a2:	4276      	negs	r6, r6
   d98a4:	2d00      	cmp	r5, #0
   d98a6:	d14f      	bne.n	d9948 <_strtod_l+0x398>
   d98a8:	9904      	ldr	r1, [sp, #16]
   d98aa:	4301      	orrs	r1, r0
   d98ac:	f47f aec2 	bne.w	d9634 <_strtod_l+0x84>
   d98b0:	2a00      	cmp	r2, #0
   d98b2:	f47f aedb 	bne.w	d966c <_strtod_l+0xbc>
   d98b6:	2b69      	cmp	r3, #105	; 0x69
   d98b8:	d027      	beq.n	d990a <_strtod_l+0x35a>
   d98ba:	dc24      	bgt.n	d9906 <_strtod_l+0x356>
   d98bc:	2b49      	cmp	r3, #73	; 0x49
   d98be:	d024      	beq.n	d990a <_strtod_l+0x35a>
   d98c0:	2b4e      	cmp	r3, #78	; 0x4e
   d98c2:	f47f aed3 	bne.w	d966c <_strtod_l+0xbc>
   d98c6:	499e      	ldr	r1, [pc, #632]	; (d9b40 <_strtod_l+0x590>)
   d98c8:	a81d      	add	r0, sp, #116	; 0x74
   d98ca:	f000 ffb9 	bl	da840 <__match>
   d98ce:	2800      	cmp	r0, #0
   d98d0:	f43f aecc 	beq.w	d966c <_strtod_l+0xbc>
   d98d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d98d6:	781b      	ldrb	r3, [r3, #0]
   d98d8:	2b28      	cmp	r3, #40	; 0x28
   d98da:	d12d      	bne.n	d9938 <_strtod_l+0x388>
   d98dc:	4999      	ldr	r1, [pc, #612]	; (d9b44 <_strtod_l+0x594>)
   d98de:	aa20      	add	r2, sp, #128	; 0x80
   d98e0:	a81d      	add	r0, sp, #116	; 0x74
   d98e2:	f000 ffc1 	bl	da868 <__hexnan>
   d98e6:	2805      	cmp	r0, #5
   d98e8:	d126      	bne.n	d9938 <_strtod_l+0x388>
   d98ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d98ec:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d98f0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d98f4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d98f8:	e69c      	b.n	d9634 <_strtod_l+0x84>
   d98fa:	210a      	movs	r1, #10
   d98fc:	fb01 3e0e 	mla	lr, r1, lr, r3
   d9900:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d9904:	e7b9      	b.n	d987a <_strtod_l+0x2ca>
   d9906:	2b6e      	cmp	r3, #110	; 0x6e
   d9908:	e7db      	b.n	d98c2 <_strtod_l+0x312>
   d990a:	498f      	ldr	r1, [pc, #572]	; (d9b48 <_strtod_l+0x598>)
   d990c:	a81d      	add	r0, sp, #116	; 0x74
   d990e:	f000 ff97 	bl	da840 <__match>
   d9912:	2800      	cmp	r0, #0
   d9914:	f43f aeaa 	beq.w	d966c <_strtod_l+0xbc>
   d9918:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d991a:	498c      	ldr	r1, [pc, #560]	; (d9b4c <_strtod_l+0x59c>)
   d991c:	3b01      	subs	r3, #1
   d991e:	a81d      	add	r0, sp, #116	; 0x74
   d9920:	931d      	str	r3, [sp, #116]	; 0x74
   d9922:	f000 ff8d 	bl	da840 <__match>
   d9926:	b910      	cbnz	r0, d992e <_strtod_l+0x37e>
   d9928:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d992a:	3301      	adds	r3, #1
   d992c:	931d      	str	r3, [sp, #116]	; 0x74
   d992e:	f8df b22c 	ldr.w	fp, [pc, #556]	; d9b5c <_strtod_l+0x5ac>
   d9932:	f04f 0a00 	mov.w	sl, #0
   d9936:	e67d      	b.n	d9634 <_strtod_l+0x84>
   d9938:	4885      	ldr	r0, [pc, #532]	; (d9b50 <_strtod_l+0x5a0>)
   d993a:	f001 fc91 	bl	db260 <nan>
   d993e:	ed8d 0b04 	vstr	d0, [sp, #16]
   d9942:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d9946:	e675      	b.n	d9634 <_strtod_l+0x84>
   d9948:	9b07      	ldr	r3, [sp, #28]
   d994a:	9809      	ldr	r0, [sp, #36]	; 0x24
   d994c:	1af3      	subs	r3, r6, r3
   d994e:	2f00      	cmp	r7, #0
   d9950:	bf08      	it	eq
   d9952:	462f      	moveq	r7, r5
   d9954:	2d10      	cmp	r5, #16
   d9956:	9308      	str	r3, [sp, #32]
   d9958:	46a8      	mov	r8, r5
   d995a:	bfa8      	it	ge
   d995c:	f04f 0810 	movge.w	r8, #16
   d9960:	f7ff f952 	bl	d8c08 <__aeabi_ui2d>
   d9964:	2d09      	cmp	r5, #9
   d9966:	4682      	mov	sl, r0
   d9968:	468b      	mov	fp, r1
   d996a:	dd13      	ble.n	d9994 <_strtod_l+0x3e4>
   d996c:	4b79      	ldr	r3, [pc, #484]	; (d9b54 <_strtod_l+0x5a4>)
   d996e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d9972:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d9976:	f7ff f9c1 	bl	d8cfc <__aeabi_dmul>
   d997a:	4682      	mov	sl, r0
   d997c:	4648      	mov	r0, r9
   d997e:	468b      	mov	fp, r1
   d9980:	f7ff f942 	bl	d8c08 <__aeabi_ui2d>
   d9984:	4602      	mov	r2, r0
   d9986:	460b      	mov	r3, r1
   d9988:	4650      	mov	r0, sl
   d998a:	4659      	mov	r1, fp
   d998c:	f7ff f800 	bl	d8990 <__adddf3>
   d9990:	4682      	mov	sl, r0
   d9992:	468b      	mov	fp, r1
   d9994:	2d0f      	cmp	r5, #15
   d9996:	dc38      	bgt.n	d9a0a <_strtod_l+0x45a>
   d9998:	9b08      	ldr	r3, [sp, #32]
   d999a:	2b00      	cmp	r3, #0
   d999c:	f43f ae4a 	beq.w	d9634 <_strtod_l+0x84>
   d99a0:	dd24      	ble.n	d99ec <_strtod_l+0x43c>
   d99a2:	2b16      	cmp	r3, #22
   d99a4:	dc0b      	bgt.n	d99be <_strtod_l+0x40e>
   d99a6:	4d6b      	ldr	r5, [pc, #428]	; (d9b54 <_strtod_l+0x5a4>)
   d99a8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d99ac:	e9d5 0100 	ldrd	r0, r1, [r5]
   d99b0:	4652      	mov	r2, sl
   d99b2:	465b      	mov	r3, fp
   d99b4:	f7ff f9a2 	bl	d8cfc <__aeabi_dmul>
   d99b8:	4682      	mov	sl, r0
   d99ba:	468b      	mov	fp, r1
   d99bc:	e63a      	b.n	d9634 <_strtod_l+0x84>
   d99be:	9a08      	ldr	r2, [sp, #32]
   d99c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d99c4:	4293      	cmp	r3, r2
   d99c6:	db20      	blt.n	d9a0a <_strtod_l+0x45a>
   d99c8:	4c62      	ldr	r4, [pc, #392]	; (d9b54 <_strtod_l+0x5a4>)
   d99ca:	f1c5 050f 	rsb	r5, r5, #15
   d99ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d99d2:	4652      	mov	r2, sl
   d99d4:	465b      	mov	r3, fp
   d99d6:	e9d1 0100 	ldrd	r0, r1, [r1]
   d99da:	f7ff f98f 	bl	d8cfc <__aeabi_dmul>
   d99de:	9b08      	ldr	r3, [sp, #32]
   d99e0:	1b5d      	subs	r5, r3, r5
   d99e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d99e6:	e9d4 2300 	ldrd	r2, r3, [r4]
   d99ea:	e7e3      	b.n	d99b4 <_strtod_l+0x404>
   d99ec:	9b08      	ldr	r3, [sp, #32]
   d99ee:	3316      	adds	r3, #22
   d99f0:	db0b      	blt.n	d9a0a <_strtod_l+0x45a>
   d99f2:	9b07      	ldr	r3, [sp, #28]
   d99f4:	4a57      	ldr	r2, [pc, #348]	; (d9b54 <_strtod_l+0x5a4>)
   d99f6:	1b9e      	subs	r6, r3, r6
   d99f8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d99fc:	e9d6 2300 	ldrd	r2, r3, [r6]
   d9a00:	4650      	mov	r0, sl
   d9a02:	4659      	mov	r1, fp
   d9a04:	f7ff faa4 	bl	d8f50 <__aeabi_ddiv>
   d9a08:	e7d6      	b.n	d99b8 <_strtod_l+0x408>
   d9a0a:	9b08      	ldr	r3, [sp, #32]
   d9a0c:	eba5 0808 	sub.w	r8, r5, r8
   d9a10:	4498      	add	r8, r3
   d9a12:	f1b8 0f00 	cmp.w	r8, #0
   d9a16:	dd71      	ble.n	d9afc <_strtod_l+0x54c>
   d9a18:	f018 030f 	ands.w	r3, r8, #15
   d9a1c:	d00a      	beq.n	d9a34 <_strtod_l+0x484>
   d9a1e:	494d      	ldr	r1, [pc, #308]	; (d9b54 <_strtod_l+0x5a4>)
   d9a20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d9a24:	4652      	mov	r2, sl
   d9a26:	465b      	mov	r3, fp
   d9a28:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9a2c:	f7ff f966 	bl	d8cfc <__aeabi_dmul>
   d9a30:	4682      	mov	sl, r0
   d9a32:	468b      	mov	fp, r1
   d9a34:	f038 080f 	bics.w	r8, r8, #15
   d9a38:	d04d      	beq.n	d9ad6 <_strtod_l+0x526>
   d9a3a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d9a3e:	dd22      	ble.n	d9a86 <_strtod_l+0x4d6>
   d9a40:	2500      	movs	r5, #0
   d9a42:	462e      	mov	r6, r5
   d9a44:	9509      	str	r5, [sp, #36]	; 0x24
   d9a46:	9507      	str	r5, [sp, #28]
   d9a48:	2322      	movs	r3, #34	; 0x22
   d9a4a:	f8df b110 	ldr.w	fp, [pc, #272]	; d9b5c <_strtod_l+0x5ac>
   d9a4e:	6023      	str	r3, [r4, #0]
   d9a50:	f04f 0a00 	mov.w	sl, #0
   d9a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9a56:	2b00      	cmp	r3, #0
   d9a58:	f43f adec 	beq.w	d9634 <_strtod_l+0x84>
   d9a5c:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9a5e:	4620      	mov	r0, r4
   d9a60:	f000 ffe4 	bl	daa2c <_Bfree>
   d9a64:	9907      	ldr	r1, [sp, #28]
   d9a66:	4620      	mov	r0, r4
   d9a68:	f000 ffe0 	bl	daa2c <_Bfree>
   d9a6c:	4631      	mov	r1, r6
   d9a6e:	4620      	mov	r0, r4
   d9a70:	f000 ffdc 	bl	daa2c <_Bfree>
   d9a74:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9a76:	4620      	mov	r0, r4
   d9a78:	f000 ffd8 	bl	daa2c <_Bfree>
   d9a7c:	4629      	mov	r1, r5
   d9a7e:	4620      	mov	r0, r4
   d9a80:	f000 ffd4 	bl	daa2c <_Bfree>
   d9a84:	e5d6      	b.n	d9634 <_strtod_l+0x84>
   d9a86:	2300      	movs	r3, #0
   d9a88:	ea4f 1828 	mov.w	r8, r8, asr #4
   d9a8c:	4650      	mov	r0, sl
   d9a8e:	4659      	mov	r1, fp
   d9a90:	4699      	mov	r9, r3
   d9a92:	f1b8 0f01 	cmp.w	r8, #1
   d9a96:	dc21      	bgt.n	d9adc <_strtod_l+0x52c>
   d9a98:	b10b      	cbz	r3, d9a9e <_strtod_l+0x4ee>
   d9a9a:	4682      	mov	sl, r0
   d9a9c:	468b      	mov	fp, r1
   d9a9e:	4b2e      	ldr	r3, [pc, #184]	; (d9b58 <_strtod_l+0x5a8>)
   d9aa0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d9aa4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d9aa8:	4652      	mov	r2, sl
   d9aaa:	465b      	mov	r3, fp
   d9aac:	e9d9 0100 	ldrd	r0, r1, [r9]
   d9ab0:	f7ff f924 	bl	d8cfc <__aeabi_dmul>
   d9ab4:	4b29      	ldr	r3, [pc, #164]	; (d9b5c <_strtod_l+0x5ac>)
   d9ab6:	460a      	mov	r2, r1
   d9ab8:	400b      	ands	r3, r1
   d9aba:	4929      	ldr	r1, [pc, #164]	; (d9b60 <_strtod_l+0x5b0>)
   d9abc:	428b      	cmp	r3, r1
   d9abe:	4682      	mov	sl, r0
   d9ac0:	d8be      	bhi.n	d9a40 <_strtod_l+0x490>
   d9ac2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d9ac6:	428b      	cmp	r3, r1
   d9ac8:	bf86      	itte	hi
   d9aca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d9b64 <_strtod_l+0x5b4>
   d9ace:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d9ad2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d9ad6:	2300      	movs	r3, #0
   d9ad8:	9304      	str	r3, [sp, #16]
   d9ada:	e081      	b.n	d9be0 <_strtod_l+0x630>
   d9adc:	f018 0f01 	tst.w	r8, #1
   d9ae0:	d007      	beq.n	d9af2 <_strtod_l+0x542>
   d9ae2:	4b1d      	ldr	r3, [pc, #116]	; (d9b58 <_strtod_l+0x5a8>)
   d9ae4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d9ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9aec:	f7ff f906 	bl	d8cfc <__aeabi_dmul>
   d9af0:	2301      	movs	r3, #1
   d9af2:	f109 0901 	add.w	r9, r9, #1
   d9af6:	ea4f 0868 	mov.w	r8, r8, asr #1
   d9afa:	e7ca      	b.n	d9a92 <_strtod_l+0x4e2>
   d9afc:	d0eb      	beq.n	d9ad6 <_strtod_l+0x526>
   d9afe:	f1c8 0800 	rsb	r8, r8, #0
   d9b02:	f018 020f 	ands.w	r2, r8, #15
   d9b06:	d00a      	beq.n	d9b1e <_strtod_l+0x56e>
   d9b08:	4b12      	ldr	r3, [pc, #72]	; (d9b54 <_strtod_l+0x5a4>)
   d9b0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d9b0e:	4650      	mov	r0, sl
   d9b10:	4659      	mov	r1, fp
   d9b12:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9b16:	f7ff fa1b 	bl	d8f50 <__aeabi_ddiv>
   d9b1a:	4682      	mov	sl, r0
   d9b1c:	468b      	mov	fp, r1
   d9b1e:	ea5f 1828 	movs.w	r8, r8, asr #4
   d9b22:	d0d8      	beq.n	d9ad6 <_strtod_l+0x526>
   d9b24:	f1b8 0f1f 	cmp.w	r8, #31
   d9b28:	dd1e      	ble.n	d9b68 <_strtod_l+0x5b8>
   d9b2a:	2500      	movs	r5, #0
   d9b2c:	462e      	mov	r6, r5
   d9b2e:	9509      	str	r5, [sp, #36]	; 0x24
   d9b30:	9507      	str	r5, [sp, #28]
   d9b32:	2322      	movs	r3, #34	; 0x22
   d9b34:	f04f 0a00 	mov.w	sl, #0
   d9b38:	f04f 0b00 	mov.w	fp, #0
   d9b3c:	6023      	str	r3, [r4, #0]
   d9b3e:	e789      	b.n	d9a54 <_strtod_l+0x4a4>
   d9b40:	000dbf03 	.word	0x000dbf03
   d9b44:	000dbf1c 	.word	0x000dbf1c
   d9b48:	000dbefa 	.word	0x000dbefa
   d9b4c:	000dbefd 	.word	0x000dbefd
   d9b50:	000dbec0 	.word	0x000dbec0
   d9b54:	000dc098 	.word	0x000dc098
   d9b58:	000dc070 	.word	0x000dc070
   d9b5c:	7ff00000 	.word	0x7ff00000
   d9b60:	7ca00000 	.word	0x7ca00000
   d9b64:	7fefffff 	.word	0x7fefffff
   d9b68:	f018 0310 	ands.w	r3, r8, #16
   d9b6c:	bf18      	it	ne
   d9b6e:	236a      	movne	r3, #106	; 0x6a
   d9b70:	f8df 93b4 	ldr.w	r9, [pc, #948]	; d9f28 <_strtod_l+0x978>
   d9b74:	9304      	str	r3, [sp, #16]
   d9b76:	4650      	mov	r0, sl
   d9b78:	4659      	mov	r1, fp
   d9b7a:	2300      	movs	r3, #0
   d9b7c:	f018 0f01 	tst.w	r8, #1
   d9b80:	d004      	beq.n	d9b8c <_strtod_l+0x5dc>
   d9b82:	e9d9 2300 	ldrd	r2, r3, [r9]
   d9b86:	f7ff f8b9 	bl	d8cfc <__aeabi_dmul>
   d9b8a:	2301      	movs	r3, #1
   d9b8c:	ea5f 0868 	movs.w	r8, r8, asr #1
   d9b90:	f109 0908 	add.w	r9, r9, #8
   d9b94:	d1f2      	bne.n	d9b7c <_strtod_l+0x5cc>
   d9b96:	b10b      	cbz	r3, d9b9c <_strtod_l+0x5ec>
   d9b98:	4682      	mov	sl, r0
   d9b9a:	468b      	mov	fp, r1
   d9b9c:	9b04      	ldr	r3, [sp, #16]
   d9b9e:	b1bb      	cbz	r3, d9bd0 <_strtod_l+0x620>
   d9ba0:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d9ba4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9ba8:	2b00      	cmp	r3, #0
   d9baa:	4659      	mov	r1, fp
   d9bac:	dd10      	ble.n	d9bd0 <_strtod_l+0x620>
   d9bae:	2b1f      	cmp	r3, #31
   d9bb0:	f340 8128 	ble.w	d9e04 <_strtod_l+0x854>
   d9bb4:	2b34      	cmp	r3, #52	; 0x34
   d9bb6:	bfde      	ittt	le
   d9bb8:	3b20      	suble	r3, #32
   d9bba:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d9bbe:	fa02 f303 	lslle.w	r3, r2, r3
   d9bc2:	f04f 0a00 	mov.w	sl, #0
   d9bc6:	bfcc      	ite	gt
   d9bc8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d9bcc:	ea03 0b01 	andle.w	fp, r3, r1
   d9bd0:	2200      	movs	r2, #0
   d9bd2:	2300      	movs	r3, #0
   d9bd4:	4650      	mov	r0, sl
   d9bd6:	4659      	mov	r1, fp
   d9bd8:	f7ff faf8 	bl	d91cc <__aeabi_dcmpeq>
   d9bdc:	2800      	cmp	r0, #0
   d9bde:	d1a4      	bne.n	d9b2a <_strtod_l+0x57a>
   d9be0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9be2:	9300      	str	r3, [sp, #0]
   d9be4:	990a      	ldr	r1, [sp, #40]	; 0x28
   d9be6:	462b      	mov	r3, r5
   d9be8:	463a      	mov	r2, r7
   d9bea:	4620      	mov	r0, r4
   d9bec:	f000 ff73 	bl	daad6 <__s2b>
   d9bf0:	9009      	str	r0, [sp, #36]	; 0x24
   d9bf2:	2800      	cmp	r0, #0
   d9bf4:	f43f af24 	beq.w	d9a40 <_strtod_l+0x490>
   d9bf8:	9b07      	ldr	r3, [sp, #28]
   d9bfa:	1b9e      	subs	r6, r3, r6
   d9bfc:	9b08      	ldr	r3, [sp, #32]
   d9bfe:	2b00      	cmp	r3, #0
   d9c00:	bfb4      	ite	lt
   d9c02:	4633      	movlt	r3, r6
   d9c04:	2300      	movge	r3, #0
   d9c06:	9310      	str	r3, [sp, #64]	; 0x40
   d9c08:	9b08      	ldr	r3, [sp, #32]
   d9c0a:	2500      	movs	r5, #0
   d9c0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d9c10:	9318      	str	r3, [sp, #96]	; 0x60
   d9c12:	462e      	mov	r6, r5
   d9c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9c16:	4620      	mov	r0, r4
   d9c18:	6859      	ldr	r1, [r3, #4]
   d9c1a:	f000 fed3 	bl	da9c4 <_Balloc>
   d9c1e:	9007      	str	r0, [sp, #28]
   d9c20:	2800      	cmp	r0, #0
   d9c22:	f43f af11 	beq.w	d9a48 <_strtod_l+0x498>
   d9c26:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9c28:	691a      	ldr	r2, [r3, #16]
   d9c2a:	3202      	adds	r2, #2
   d9c2c:	f103 010c 	add.w	r1, r3, #12
   d9c30:	0092      	lsls	r2, r2, #2
   d9c32:	300c      	adds	r0, #12
   d9c34:	f7ff fbee 	bl	d9414 <memcpy>
   d9c38:	ec4b ab10 	vmov	d0, sl, fp
   d9c3c:	aa20      	add	r2, sp, #128	; 0x80
   d9c3e:	a91f      	add	r1, sp, #124	; 0x7c
   d9c40:	4620      	mov	r0, r4
   d9c42:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   d9c46:	f001 fa35 	bl	db0b4 <__d2b>
   d9c4a:	901e      	str	r0, [sp, #120]	; 0x78
   d9c4c:	2800      	cmp	r0, #0
   d9c4e:	f43f aefb 	beq.w	d9a48 <_strtod_l+0x498>
   d9c52:	2101      	movs	r1, #1
   d9c54:	4620      	mov	r0, r4
   d9c56:	f000 ffcc 	bl	dabf2 <__i2b>
   d9c5a:	4606      	mov	r6, r0
   d9c5c:	2800      	cmp	r0, #0
   d9c5e:	f43f aef3 	beq.w	d9a48 <_strtod_l+0x498>
   d9c62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d9c64:	9904      	ldr	r1, [sp, #16]
   d9c66:	2b00      	cmp	r3, #0
   d9c68:	bfab      	itete	ge
   d9c6a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   d9c6c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   d9c6e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   d9c70:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   d9c74:	bfac      	ite	ge
   d9c76:	eb03 0902 	addge.w	r9, r3, r2
   d9c7a:	1ad7      	sublt	r7, r2, r3
   d9c7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
   d9c7e:	eba3 0801 	sub.w	r8, r3, r1
   d9c82:	4490      	add	r8, r2
   d9c84:	4ba3      	ldr	r3, [pc, #652]	; (d9f14 <_strtod_l+0x964>)
   d9c86:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d9c8a:	4598      	cmp	r8, r3
   d9c8c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   d9c90:	f280 80cc 	bge.w	d9e2c <_strtod_l+0x87c>
   d9c94:	eba3 0308 	sub.w	r3, r3, r8
   d9c98:	2b1f      	cmp	r3, #31
   d9c9a:	eba2 0203 	sub.w	r2, r2, r3
   d9c9e:	f04f 0101 	mov.w	r1, #1
   d9ca2:	f300 80b6 	bgt.w	d9e12 <_strtod_l+0x862>
   d9ca6:	fa01 f303 	lsl.w	r3, r1, r3
   d9caa:	9311      	str	r3, [sp, #68]	; 0x44
   d9cac:	2300      	movs	r3, #0
   d9cae:	930c      	str	r3, [sp, #48]	; 0x30
   d9cb0:	eb09 0802 	add.w	r8, r9, r2
   d9cb4:	9b04      	ldr	r3, [sp, #16]
   d9cb6:	45c1      	cmp	r9, r8
   d9cb8:	4417      	add	r7, r2
   d9cba:	441f      	add	r7, r3
   d9cbc:	464b      	mov	r3, r9
   d9cbe:	bfa8      	it	ge
   d9cc0:	4643      	movge	r3, r8
   d9cc2:	42bb      	cmp	r3, r7
   d9cc4:	bfa8      	it	ge
   d9cc6:	463b      	movge	r3, r7
   d9cc8:	2b00      	cmp	r3, #0
   d9cca:	bfc2      	ittt	gt
   d9ccc:	eba8 0803 	subgt.w	r8, r8, r3
   d9cd0:	1aff      	subgt	r7, r7, r3
   d9cd2:	eba9 0903 	subgt.w	r9, r9, r3
   d9cd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d9cd8:	2b00      	cmp	r3, #0
   d9cda:	dd17      	ble.n	d9d0c <_strtod_l+0x75c>
   d9cdc:	4631      	mov	r1, r6
   d9cde:	461a      	mov	r2, r3
   d9ce0:	4620      	mov	r0, r4
   d9ce2:	f001 f82b 	bl	dad3c <__pow5mult>
   d9ce6:	4606      	mov	r6, r0
   d9ce8:	2800      	cmp	r0, #0
   d9cea:	f43f aead 	beq.w	d9a48 <_strtod_l+0x498>
   d9cee:	4601      	mov	r1, r0
   d9cf0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d9cf2:	4620      	mov	r0, r4
   d9cf4:	f000 ff86 	bl	dac04 <__multiply>
   d9cf8:	900f      	str	r0, [sp, #60]	; 0x3c
   d9cfa:	2800      	cmp	r0, #0
   d9cfc:	f43f aea4 	beq.w	d9a48 <_strtod_l+0x498>
   d9d00:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9d02:	4620      	mov	r0, r4
   d9d04:	f000 fe92 	bl	daa2c <_Bfree>
   d9d08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9d0a:	931e      	str	r3, [sp, #120]	; 0x78
   d9d0c:	f1b8 0f00 	cmp.w	r8, #0
   d9d10:	f300 8091 	bgt.w	d9e36 <_strtod_l+0x886>
   d9d14:	9b08      	ldr	r3, [sp, #32]
   d9d16:	2b00      	cmp	r3, #0
   d9d18:	dd08      	ble.n	d9d2c <_strtod_l+0x77c>
   d9d1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d9d1c:	9907      	ldr	r1, [sp, #28]
   d9d1e:	4620      	mov	r0, r4
   d9d20:	f001 f80c 	bl	dad3c <__pow5mult>
   d9d24:	9007      	str	r0, [sp, #28]
   d9d26:	2800      	cmp	r0, #0
   d9d28:	f43f ae8e 	beq.w	d9a48 <_strtod_l+0x498>
   d9d2c:	2f00      	cmp	r7, #0
   d9d2e:	dd08      	ble.n	d9d42 <_strtod_l+0x792>
   d9d30:	9907      	ldr	r1, [sp, #28]
   d9d32:	463a      	mov	r2, r7
   d9d34:	4620      	mov	r0, r4
   d9d36:	f001 f84f 	bl	dadd8 <__lshift>
   d9d3a:	9007      	str	r0, [sp, #28]
   d9d3c:	2800      	cmp	r0, #0
   d9d3e:	f43f ae83 	beq.w	d9a48 <_strtod_l+0x498>
   d9d42:	f1b9 0f00 	cmp.w	r9, #0
   d9d46:	dd08      	ble.n	d9d5a <_strtod_l+0x7aa>
   d9d48:	4631      	mov	r1, r6
   d9d4a:	464a      	mov	r2, r9
   d9d4c:	4620      	mov	r0, r4
   d9d4e:	f001 f843 	bl	dadd8 <__lshift>
   d9d52:	4606      	mov	r6, r0
   d9d54:	2800      	cmp	r0, #0
   d9d56:	f43f ae77 	beq.w	d9a48 <_strtod_l+0x498>
   d9d5a:	9a07      	ldr	r2, [sp, #28]
   d9d5c:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9d5e:	4620      	mov	r0, r4
   d9d60:	f001 f8b5 	bl	daece <__mdiff>
   d9d64:	4605      	mov	r5, r0
   d9d66:	2800      	cmp	r0, #0
   d9d68:	f43f ae6e 	beq.w	d9a48 <_strtod_l+0x498>
   d9d6c:	68c3      	ldr	r3, [r0, #12]
   d9d6e:	930f      	str	r3, [sp, #60]	; 0x3c
   d9d70:	2300      	movs	r3, #0
   d9d72:	60c3      	str	r3, [r0, #12]
   d9d74:	4631      	mov	r1, r6
   d9d76:	f001 f88e 	bl	dae96 <__mcmp>
   d9d7a:	2800      	cmp	r0, #0
   d9d7c:	da65      	bge.n	d9e4a <_strtod_l+0x89a>
   d9d7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9d80:	ea53 030a 	orrs.w	r3, r3, sl
   d9d84:	f040 8087 	bne.w	d9e96 <_strtod_l+0x8e6>
   d9d88:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9d8c:	2b00      	cmp	r3, #0
   d9d8e:	f040 8082 	bne.w	d9e96 <_strtod_l+0x8e6>
   d9d92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9d96:	0d1b      	lsrs	r3, r3, #20
   d9d98:	051b      	lsls	r3, r3, #20
   d9d9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d9d9e:	d97a      	bls.n	d9e96 <_strtod_l+0x8e6>
   d9da0:	696b      	ldr	r3, [r5, #20]
   d9da2:	b913      	cbnz	r3, d9daa <_strtod_l+0x7fa>
   d9da4:	692b      	ldr	r3, [r5, #16]
   d9da6:	2b01      	cmp	r3, #1
   d9da8:	dd75      	ble.n	d9e96 <_strtod_l+0x8e6>
   d9daa:	4629      	mov	r1, r5
   d9dac:	2201      	movs	r2, #1
   d9dae:	4620      	mov	r0, r4
   d9db0:	f001 f812 	bl	dadd8 <__lshift>
   d9db4:	4631      	mov	r1, r6
   d9db6:	4605      	mov	r5, r0
   d9db8:	f001 f86d 	bl	dae96 <__mcmp>
   d9dbc:	2800      	cmp	r0, #0
   d9dbe:	dd6a      	ble.n	d9e96 <_strtod_l+0x8e6>
   d9dc0:	9904      	ldr	r1, [sp, #16]
   d9dc2:	4a55      	ldr	r2, [pc, #340]	; (d9f18 <_strtod_l+0x968>)
   d9dc4:	465b      	mov	r3, fp
   d9dc6:	2900      	cmp	r1, #0
   d9dc8:	f000 8085 	beq.w	d9ed6 <_strtod_l+0x926>
   d9dcc:	ea02 010b 	and.w	r1, r2, fp
   d9dd0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   d9dd4:	dc7f      	bgt.n	d9ed6 <_strtod_l+0x926>
   d9dd6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   d9dda:	f77f aeaa 	ble.w	d9b32 <_strtod_l+0x582>
   d9dde:	4a4f      	ldr	r2, [pc, #316]	; (d9f1c <_strtod_l+0x96c>)
   d9de0:	2300      	movs	r3, #0
   d9de2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   d9de6:	4650      	mov	r0, sl
   d9de8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   d9dec:	4659      	mov	r1, fp
   d9dee:	f7fe ff85 	bl	d8cfc <__aeabi_dmul>
   d9df2:	460b      	mov	r3, r1
   d9df4:	4303      	orrs	r3, r0
   d9df6:	bf08      	it	eq
   d9df8:	2322      	moveq	r3, #34	; 0x22
   d9dfa:	4682      	mov	sl, r0
   d9dfc:	468b      	mov	fp, r1
   d9dfe:	bf08      	it	eq
   d9e00:	6023      	streq	r3, [r4, #0]
   d9e02:	e62b      	b.n	d9a5c <_strtod_l+0x4ac>
   d9e04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9e08:	fa02 f303 	lsl.w	r3, r2, r3
   d9e0c:	ea03 0a0a 	and.w	sl, r3, sl
   d9e10:	e6de      	b.n	d9bd0 <_strtod_l+0x620>
   d9e12:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   d9e16:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   d9e1a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   d9e1e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   d9e22:	fa01 f308 	lsl.w	r3, r1, r8
   d9e26:	930c      	str	r3, [sp, #48]	; 0x30
   d9e28:	9111      	str	r1, [sp, #68]	; 0x44
   d9e2a:	e741      	b.n	d9cb0 <_strtod_l+0x700>
   d9e2c:	2300      	movs	r3, #0
   d9e2e:	930c      	str	r3, [sp, #48]	; 0x30
   d9e30:	2301      	movs	r3, #1
   d9e32:	9311      	str	r3, [sp, #68]	; 0x44
   d9e34:	e73c      	b.n	d9cb0 <_strtod_l+0x700>
   d9e36:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9e38:	4642      	mov	r2, r8
   d9e3a:	4620      	mov	r0, r4
   d9e3c:	f000 ffcc 	bl	dadd8 <__lshift>
   d9e40:	901e      	str	r0, [sp, #120]	; 0x78
   d9e42:	2800      	cmp	r0, #0
   d9e44:	f47f af66 	bne.w	d9d14 <_strtod_l+0x764>
   d9e48:	e5fe      	b.n	d9a48 <_strtod_l+0x498>
   d9e4a:	465f      	mov	r7, fp
   d9e4c:	d16e      	bne.n	d9f2c <_strtod_l+0x97c>
   d9e4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d9e50:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9e54:	b342      	cbz	r2, d9ea8 <_strtod_l+0x8f8>
   d9e56:	4a32      	ldr	r2, [pc, #200]	; (d9f20 <_strtod_l+0x970>)
   d9e58:	4293      	cmp	r3, r2
   d9e5a:	d128      	bne.n	d9eae <_strtod_l+0x8fe>
   d9e5c:	9b04      	ldr	r3, [sp, #16]
   d9e5e:	4650      	mov	r0, sl
   d9e60:	b1eb      	cbz	r3, d9e9e <_strtod_l+0x8ee>
   d9e62:	4a2d      	ldr	r2, [pc, #180]	; (d9f18 <_strtod_l+0x968>)
   d9e64:	403a      	ands	r2, r7
   d9e66:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   d9e6a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d9e6e:	d819      	bhi.n	d9ea4 <_strtod_l+0x8f4>
   d9e70:	0d12      	lsrs	r2, r2, #20
   d9e72:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   d9e76:	fa01 f303 	lsl.w	r3, r1, r3
   d9e7a:	4298      	cmp	r0, r3
   d9e7c:	d117      	bne.n	d9eae <_strtod_l+0x8fe>
   d9e7e:	4b29      	ldr	r3, [pc, #164]	; (d9f24 <_strtod_l+0x974>)
   d9e80:	429f      	cmp	r7, r3
   d9e82:	d102      	bne.n	d9e8a <_strtod_l+0x8da>
   d9e84:	3001      	adds	r0, #1
   d9e86:	f43f addf 	beq.w	d9a48 <_strtod_l+0x498>
   d9e8a:	4b23      	ldr	r3, [pc, #140]	; (d9f18 <_strtod_l+0x968>)
   d9e8c:	403b      	ands	r3, r7
   d9e8e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d9e92:	f04f 0a00 	mov.w	sl, #0
   d9e96:	9b04      	ldr	r3, [sp, #16]
   d9e98:	2b00      	cmp	r3, #0
   d9e9a:	d1a0      	bne.n	d9dde <_strtod_l+0x82e>
   d9e9c:	e5de      	b.n	d9a5c <_strtod_l+0x4ac>
   d9e9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d9ea2:	e7ea      	b.n	d9e7a <_strtod_l+0x8ca>
   d9ea4:	460b      	mov	r3, r1
   d9ea6:	e7e8      	b.n	d9e7a <_strtod_l+0x8ca>
   d9ea8:	ea53 030a 	orrs.w	r3, r3, sl
   d9eac:	d088      	beq.n	d9dc0 <_strtod_l+0x810>
   d9eae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d9eb0:	b1db      	cbz	r3, d9eea <_strtod_l+0x93a>
   d9eb2:	423b      	tst	r3, r7
   d9eb4:	d0ef      	beq.n	d9e96 <_strtod_l+0x8e6>
   d9eb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9eb8:	9a04      	ldr	r2, [sp, #16]
   d9eba:	4650      	mov	r0, sl
   d9ebc:	4659      	mov	r1, fp
   d9ebe:	b1c3      	cbz	r3, d9ef2 <_strtod_l+0x942>
   d9ec0:	f7ff fb58 	bl	d9574 <sulp>
   d9ec4:	4602      	mov	r2, r0
   d9ec6:	460b      	mov	r3, r1
   d9ec8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d9ecc:	f7fe fd60 	bl	d8990 <__adddf3>
   d9ed0:	4682      	mov	sl, r0
   d9ed2:	468b      	mov	fp, r1
   d9ed4:	e7df      	b.n	d9e96 <_strtod_l+0x8e6>
   d9ed6:	4013      	ands	r3, r2
   d9ed8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d9edc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d9ee0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d9ee4:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9ee8:	e7d5      	b.n	d9e96 <_strtod_l+0x8e6>
   d9eea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d9eec:	ea13 0f0a 	tst.w	r3, sl
   d9ef0:	e7e0      	b.n	d9eb4 <_strtod_l+0x904>
   d9ef2:	f7ff fb3f 	bl	d9574 <sulp>
   d9ef6:	4602      	mov	r2, r0
   d9ef8:	460b      	mov	r3, r1
   d9efa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d9efe:	f7fe fd45 	bl	d898c <__aeabi_dsub>
   d9f02:	2200      	movs	r2, #0
   d9f04:	2300      	movs	r3, #0
   d9f06:	4682      	mov	sl, r0
   d9f08:	468b      	mov	fp, r1
   d9f0a:	f7ff f95f 	bl	d91cc <__aeabi_dcmpeq>
   d9f0e:	2800      	cmp	r0, #0
   d9f10:	d0c1      	beq.n	d9e96 <_strtod_l+0x8e6>
   d9f12:	e60e      	b.n	d9b32 <_strtod_l+0x582>
   d9f14:	fffffc02 	.word	0xfffffc02
   d9f18:	7ff00000 	.word	0x7ff00000
   d9f1c:	39500000 	.word	0x39500000
   d9f20:	000fffff 	.word	0x000fffff
   d9f24:	7fefffff 	.word	0x7fefffff
   d9f28:	000dbf30 	.word	0x000dbf30
   d9f2c:	4631      	mov	r1, r6
   d9f2e:	4628      	mov	r0, r5
   d9f30:	f001 f910 	bl	db154 <__ratio>
   d9f34:	ec59 8b10 	vmov	r8, r9, d0
   d9f38:	ee10 0a10 	vmov	r0, s0
   d9f3c:	2200      	movs	r2, #0
   d9f3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d9f42:	4649      	mov	r1, r9
   d9f44:	f7ff f956 	bl	d91f4 <__aeabi_dcmple>
   d9f48:	2800      	cmp	r0, #0
   d9f4a:	d07c      	beq.n	da046 <_strtod_l+0xa96>
   d9f4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9f4e:	2b00      	cmp	r3, #0
   d9f50:	d04c      	beq.n	d9fec <_strtod_l+0xa3c>
   d9f52:	4b95      	ldr	r3, [pc, #596]	; (da1a8 <_strtod_l+0xbf8>)
   d9f54:	2200      	movs	r2, #0
   d9f56:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d9f5a:	f8df 924c 	ldr.w	r9, [pc, #588]	; da1a8 <_strtod_l+0xbf8>
   d9f5e:	f04f 0800 	mov.w	r8, #0
   d9f62:	4b92      	ldr	r3, [pc, #584]	; (da1ac <_strtod_l+0xbfc>)
   d9f64:	403b      	ands	r3, r7
   d9f66:	9311      	str	r3, [sp, #68]	; 0x44
   d9f68:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d9f6a:	4b91      	ldr	r3, [pc, #580]	; (da1b0 <_strtod_l+0xc00>)
   d9f6c:	429a      	cmp	r2, r3
   d9f6e:	f040 80b2 	bne.w	da0d6 <_strtod_l+0xb26>
   d9f72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d9f76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9f7a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   d9f7e:	ec4b ab10 	vmov	d0, sl, fp
   d9f82:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   d9f86:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d9f8a:	f001 f817 	bl	dafbc <__ulp>
   d9f8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d9f92:	ec53 2b10 	vmov	r2, r3, d0
   d9f96:	f7fe feb1 	bl	d8cfc <__aeabi_dmul>
   d9f9a:	4652      	mov	r2, sl
   d9f9c:	465b      	mov	r3, fp
   d9f9e:	f7fe fcf7 	bl	d8990 <__adddf3>
   d9fa2:	460b      	mov	r3, r1
   d9fa4:	4981      	ldr	r1, [pc, #516]	; (da1ac <_strtod_l+0xbfc>)
   d9fa6:	4a83      	ldr	r2, [pc, #524]	; (da1b4 <_strtod_l+0xc04>)
   d9fa8:	4019      	ands	r1, r3
   d9faa:	4291      	cmp	r1, r2
   d9fac:	4682      	mov	sl, r0
   d9fae:	d95e      	bls.n	da06e <_strtod_l+0xabe>
   d9fb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d9fb2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   d9fb6:	4293      	cmp	r3, r2
   d9fb8:	d103      	bne.n	d9fc2 <_strtod_l+0xa12>
   d9fba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9fbc:	3301      	adds	r3, #1
   d9fbe:	f43f ad43 	beq.w	d9a48 <_strtod_l+0x498>
   d9fc2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; da1c0 <_strtod_l+0xc10>
   d9fc6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d9fca:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9fcc:	4620      	mov	r0, r4
   d9fce:	f000 fd2d 	bl	daa2c <_Bfree>
   d9fd2:	9907      	ldr	r1, [sp, #28]
   d9fd4:	4620      	mov	r0, r4
   d9fd6:	f000 fd29 	bl	daa2c <_Bfree>
   d9fda:	4631      	mov	r1, r6
   d9fdc:	4620      	mov	r0, r4
   d9fde:	f000 fd25 	bl	daa2c <_Bfree>
   d9fe2:	4629      	mov	r1, r5
   d9fe4:	4620      	mov	r0, r4
   d9fe6:	f000 fd21 	bl	daa2c <_Bfree>
   d9fea:	e613      	b.n	d9c14 <_strtod_l+0x664>
   d9fec:	f1ba 0f00 	cmp.w	sl, #0
   d9ff0:	d11b      	bne.n	da02a <_strtod_l+0xa7a>
   d9ff2:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9ff6:	b9f3      	cbnz	r3, da036 <_strtod_l+0xa86>
   d9ff8:	4b6b      	ldr	r3, [pc, #428]	; (da1a8 <_strtod_l+0xbf8>)
   d9ffa:	2200      	movs	r2, #0
   d9ffc:	4640      	mov	r0, r8
   d9ffe:	4649      	mov	r1, r9
   da000:	f7ff f8ee 	bl	d91e0 <__aeabi_dcmplt>
   da004:	b9d0      	cbnz	r0, da03c <_strtod_l+0xa8c>
   da006:	4640      	mov	r0, r8
   da008:	4649      	mov	r1, r9
   da00a:	4b6b      	ldr	r3, [pc, #428]	; (da1b8 <_strtod_l+0xc08>)
   da00c:	2200      	movs	r2, #0
   da00e:	f7fe fe75 	bl	d8cfc <__aeabi_dmul>
   da012:	4680      	mov	r8, r0
   da014:	4689      	mov	r9, r1
   da016:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   da01a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   da01e:	931b      	str	r3, [sp, #108]	; 0x6c
   da020:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   da024:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   da028:	e79b      	b.n	d9f62 <_strtod_l+0x9b2>
   da02a:	f1ba 0f01 	cmp.w	sl, #1
   da02e:	d102      	bne.n	da036 <_strtod_l+0xa86>
   da030:	2f00      	cmp	r7, #0
   da032:	f43f ad7e 	beq.w	d9b32 <_strtod_l+0x582>
   da036:	4b61      	ldr	r3, [pc, #388]	; (da1bc <_strtod_l+0xc0c>)
   da038:	2200      	movs	r2, #0
   da03a:	e78c      	b.n	d9f56 <_strtod_l+0x9a6>
   da03c:	f8df 9178 	ldr.w	r9, [pc, #376]	; da1b8 <_strtod_l+0xc08>
   da040:	f04f 0800 	mov.w	r8, #0
   da044:	e7e7      	b.n	da016 <_strtod_l+0xa66>
   da046:	4b5c      	ldr	r3, [pc, #368]	; (da1b8 <_strtod_l+0xc08>)
   da048:	4640      	mov	r0, r8
   da04a:	4649      	mov	r1, r9
   da04c:	2200      	movs	r2, #0
   da04e:	f7fe fe55 	bl	d8cfc <__aeabi_dmul>
   da052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da054:	4680      	mov	r8, r0
   da056:	4689      	mov	r9, r1
   da058:	b933      	cbnz	r3, da068 <_strtod_l+0xab8>
   da05a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da05e:	9012      	str	r0, [sp, #72]	; 0x48
   da060:	9313      	str	r3, [sp, #76]	; 0x4c
   da062:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   da066:	e7dd      	b.n	da024 <_strtod_l+0xa74>
   da068:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   da06c:	e7f9      	b.n	da062 <_strtod_l+0xab2>
   da06e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   da072:	9b04      	ldr	r3, [sp, #16]
   da074:	2b00      	cmp	r3, #0
   da076:	d1a8      	bne.n	d9fca <_strtod_l+0xa1a>
   da078:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da07c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   da07e:	0d1b      	lsrs	r3, r3, #20
   da080:	051b      	lsls	r3, r3, #20
   da082:	429a      	cmp	r2, r3
   da084:	d1a1      	bne.n	d9fca <_strtod_l+0xa1a>
   da086:	4640      	mov	r0, r8
   da088:	4649      	mov	r1, r9
   da08a:	f001 f8ff 	bl	db28c <__aeabi_d2lz>
   da08e:	f7fe fe07 	bl	d8ca0 <__aeabi_l2d>
   da092:	4602      	mov	r2, r0
   da094:	460b      	mov	r3, r1
   da096:	4640      	mov	r0, r8
   da098:	4649      	mov	r1, r9
   da09a:	f7fe fc77 	bl	d898c <__aeabi_dsub>
   da09e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   da0a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da0a4:	ea43 030a 	orr.w	r3, r3, sl
   da0a8:	4313      	orrs	r3, r2
   da0aa:	4680      	mov	r8, r0
   da0ac:	4689      	mov	r9, r1
   da0ae:	d053      	beq.n	da158 <_strtod_l+0xba8>
   da0b0:	a335      	add	r3, pc, #212	; (adr r3, da188 <_strtod_l+0xbd8>)
   da0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   da0b6:	f7ff f893 	bl	d91e0 <__aeabi_dcmplt>
   da0ba:	2800      	cmp	r0, #0
   da0bc:	f47f acce 	bne.w	d9a5c <_strtod_l+0x4ac>
   da0c0:	a333      	add	r3, pc, #204	; (adr r3, da190 <_strtod_l+0xbe0>)
   da0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   da0c6:	4640      	mov	r0, r8
   da0c8:	4649      	mov	r1, r9
   da0ca:	f7ff f8a7 	bl	d921c <__aeabi_dcmpgt>
   da0ce:	2800      	cmp	r0, #0
   da0d0:	f43f af7b 	beq.w	d9fca <_strtod_l+0xa1a>
   da0d4:	e4c2      	b.n	d9a5c <_strtod_l+0x4ac>
   da0d6:	9b04      	ldr	r3, [sp, #16]
   da0d8:	b333      	cbz	r3, da128 <_strtod_l+0xb78>
   da0da:	9b11      	ldr	r3, [sp, #68]	; 0x44
   da0dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   da0e0:	d822      	bhi.n	da128 <_strtod_l+0xb78>
   da0e2:	a32d      	add	r3, pc, #180	; (adr r3, da198 <_strtod_l+0xbe8>)
   da0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
   da0e8:	4640      	mov	r0, r8
   da0ea:	4649      	mov	r1, r9
   da0ec:	f7ff f882 	bl	d91f4 <__aeabi_dcmple>
   da0f0:	b1a0      	cbz	r0, da11c <_strtod_l+0xb6c>
   da0f2:	4649      	mov	r1, r9
   da0f4:	4640      	mov	r0, r8
   da0f6:	f7ff f8b1 	bl	d925c <__aeabi_d2uiz>
   da0fa:	2801      	cmp	r0, #1
   da0fc:	bf38      	it	cc
   da0fe:	2001      	movcc	r0, #1
   da100:	f7fe fd82 	bl	d8c08 <__aeabi_ui2d>
   da104:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da106:	4680      	mov	r8, r0
   da108:	4689      	mov	r9, r1
   da10a:	bb13      	cbnz	r3, da152 <_strtod_l+0xba2>
   da10c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da110:	9014      	str	r0, [sp, #80]	; 0x50
   da112:	9315      	str	r3, [sp, #84]	; 0x54
   da114:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   da118:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   da11c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   da11e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   da120:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   da124:	1a9b      	subs	r3, r3, r2
   da126:	930d      	str	r3, [sp, #52]	; 0x34
   da128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   da12c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   da130:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   da134:	f000 ff42 	bl	dafbc <__ulp>
   da138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   da13c:	ec53 2b10 	vmov	r2, r3, d0
   da140:	f7fe fddc 	bl	d8cfc <__aeabi_dmul>
   da144:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   da148:	f7fe fc22 	bl	d8990 <__adddf3>
   da14c:	4682      	mov	sl, r0
   da14e:	468b      	mov	fp, r1
   da150:	e78f      	b.n	da072 <_strtod_l+0xac2>
   da152:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   da156:	e7dd      	b.n	da114 <_strtod_l+0xb64>
   da158:	a311      	add	r3, pc, #68	; (adr r3, da1a0 <_strtod_l+0xbf0>)
   da15a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da15e:	f7ff f83f 	bl	d91e0 <__aeabi_dcmplt>
   da162:	e7b4      	b.n	da0ce <_strtod_l+0xb1e>
   da164:	2300      	movs	r3, #0
   da166:	930e      	str	r3, [sp, #56]	; 0x38
   da168:	9a19      	ldr	r2, [sp, #100]	; 0x64
   da16a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da16c:	6013      	str	r3, [r2, #0]
   da16e:	f7ff ba65 	b.w	d963c <_strtod_l+0x8c>
   da172:	2b65      	cmp	r3, #101	; 0x65
   da174:	f43f ab5d 	beq.w	d9832 <_strtod_l+0x282>
   da178:	2b45      	cmp	r3, #69	; 0x45
   da17a:	f43f ab5a 	beq.w	d9832 <_strtod_l+0x282>
   da17e:	2201      	movs	r2, #1
   da180:	f7ff bb92 	b.w	d98a8 <_strtod_l+0x2f8>
   da184:	f3af 8000 	nop.w
   da188:	94a03595 	.word	0x94a03595
   da18c:	3fdfffff 	.word	0x3fdfffff
   da190:	35afe535 	.word	0x35afe535
   da194:	3fe00000 	.word	0x3fe00000
   da198:	ffc00000 	.word	0xffc00000
   da19c:	41dfffff 	.word	0x41dfffff
   da1a0:	94a03595 	.word	0x94a03595
   da1a4:	3fcfffff 	.word	0x3fcfffff
   da1a8:	3ff00000 	.word	0x3ff00000
   da1ac:	7ff00000 	.word	0x7ff00000
   da1b0:	7fe00000 	.word	0x7fe00000
   da1b4:	7c9fffff 	.word	0x7c9fffff
   da1b8:	3fe00000 	.word	0x3fe00000
   da1bc:	bff00000 	.word	0xbff00000
   da1c0:	7fefffff 	.word	0x7fefffff

000da1c4 <strtod>:
   da1c4:	460a      	mov	r2, r1
   da1c6:	4601      	mov	r1, r0
   da1c8:	4802      	ldr	r0, [pc, #8]	; (da1d4 <strtod+0x10>)
   da1ca:	4b03      	ldr	r3, [pc, #12]	; (da1d8 <strtod+0x14>)
   da1cc:	6800      	ldr	r0, [r0, #0]
   da1ce:	f7ff b9ef 	b.w	d95b0 <_strtod_l>
   da1d2:	bf00      	nop
   da1d4:	2003dc98 	.word	0x2003dc98
   da1d8:	2003dd00 	.word	0x2003dd00

000da1dc <_strtol_l.isra.0>:
   da1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da1e0:	4e3a      	ldr	r6, [pc, #232]	; (da2cc <_strtol_l.isra.0+0xf0>)
   da1e2:	4686      	mov	lr, r0
   da1e4:	468c      	mov	ip, r1
   da1e6:	4660      	mov	r0, ip
   da1e8:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da1ec:	5da5      	ldrb	r5, [r4, r6]
   da1ee:	f015 0508 	ands.w	r5, r5, #8
   da1f2:	d1f8      	bne.n	da1e6 <_strtol_l.isra.0+0xa>
   da1f4:	2c2d      	cmp	r4, #45	; 0x2d
   da1f6:	d133      	bne.n	da260 <_strtol_l.isra.0+0x84>
   da1f8:	f89c 4000 	ldrb.w	r4, [ip]
   da1fc:	f04f 0801 	mov.w	r8, #1
   da200:	f100 0c02 	add.w	ip, r0, #2
   da204:	2b00      	cmp	r3, #0
   da206:	d05c      	beq.n	da2c2 <_strtol_l.isra.0+0xe6>
   da208:	2b10      	cmp	r3, #16
   da20a:	d10c      	bne.n	da226 <_strtol_l.isra.0+0x4a>
   da20c:	2c30      	cmp	r4, #48	; 0x30
   da20e:	d10a      	bne.n	da226 <_strtol_l.isra.0+0x4a>
   da210:	f89c 0000 	ldrb.w	r0, [ip]
   da214:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da218:	2858      	cmp	r0, #88	; 0x58
   da21a:	d14d      	bne.n	da2b8 <_strtol_l.isra.0+0xdc>
   da21c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   da220:	2310      	movs	r3, #16
   da222:	f10c 0c02 	add.w	ip, ip, #2
   da226:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   da22a:	3f01      	subs	r7, #1
   da22c:	2600      	movs	r6, #0
   da22e:	fbb7 f9f3 	udiv	r9, r7, r3
   da232:	4630      	mov	r0, r6
   da234:	fb03 7a19 	mls	sl, r3, r9, r7
   da238:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   da23c:	2d09      	cmp	r5, #9
   da23e:	d818      	bhi.n	da272 <_strtol_l.isra.0+0x96>
   da240:	462c      	mov	r4, r5
   da242:	42a3      	cmp	r3, r4
   da244:	dd24      	ble.n	da290 <_strtol_l.isra.0+0xb4>
   da246:	1c75      	adds	r5, r6, #1
   da248:	d007      	beq.n	da25a <_strtol_l.isra.0+0x7e>
   da24a:	4581      	cmp	r9, r0
   da24c:	d31d      	bcc.n	da28a <_strtol_l.isra.0+0xae>
   da24e:	d101      	bne.n	da254 <_strtol_l.isra.0+0x78>
   da250:	45a2      	cmp	sl, r4
   da252:	db1a      	blt.n	da28a <_strtol_l.isra.0+0xae>
   da254:	fb00 4003 	mla	r0, r0, r3, r4
   da258:	2601      	movs	r6, #1
   da25a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da25e:	e7eb      	b.n	da238 <_strtol_l.isra.0+0x5c>
   da260:	2c2b      	cmp	r4, #43	; 0x2b
   da262:	bf08      	it	eq
   da264:	f89c 4000 	ldrbeq.w	r4, [ip]
   da268:	46a8      	mov	r8, r5
   da26a:	bf08      	it	eq
   da26c:	f100 0c02 	addeq.w	ip, r0, #2
   da270:	e7c8      	b.n	da204 <_strtol_l.isra.0+0x28>
   da272:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   da276:	2d19      	cmp	r5, #25
   da278:	d801      	bhi.n	da27e <_strtol_l.isra.0+0xa2>
   da27a:	3c37      	subs	r4, #55	; 0x37
   da27c:	e7e1      	b.n	da242 <_strtol_l.isra.0+0x66>
   da27e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   da282:	2d19      	cmp	r5, #25
   da284:	d804      	bhi.n	da290 <_strtol_l.isra.0+0xb4>
   da286:	3c57      	subs	r4, #87	; 0x57
   da288:	e7db      	b.n	da242 <_strtol_l.isra.0+0x66>
   da28a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   da28e:	e7e4      	b.n	da25a <_strtol_l.isra.0+0x7e>
   da290:	1c73      	adds	r3, r6, #1
   da292:	d106      	bne.n	da2a2 <_strtol_l.isra.0+0xc6>
   da294:	2322      	movs	r3, #34	; 0x22
   da296:	f8ce 3000 	str.w	r3, [lr]
   da29a:	4638      	mov	r0, r7
   da29c:	b942      	cbnz	r2, da2b0 <_strtol_l.isra.0+0xd4>
   da29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da2a2:	f1b8 0f00 	cmp.w	r8, #0
   da2a6:	d000      	beq.n	da2aa <_strtol_l.isra.0+0xce>
   da2a8:	4240      	negs	r0, r0
   da2aa:	2a00      	cmp	r2, #0
   da2ac:	d0f7      	beq.n	da29e <_strtol_l.isra.0+0xc2>
   da2ae:	b10e      	cbz	r6, da2b4 <_strtol_l.isra.0+0xd8>
   da2b0:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   da2b4:	6011      	str	r1, [r2, #0]
   da2b6:	e7f2      	b.n	da29e <_strtol_l.isra.0+0xc2>
   da2b8:	2430      	movs	r4, #48	; 0x30
   da2ba:	2b00      	cmp	r3, #0
   da2bc:	d1b3      	bne.n	da226 <_strtol_l.isra.0+0x4a>
   da2be:	2308      	movs	r3, #8
   da2c0:	e7b1      	b.n	da226 <_strtol_l.isra.0+0x4a>
   da2c2:	2c30      	cmp	r4, #48	; 0x30
   da2c4:	d0a4      	beq.n	da210 <_strtol_l.isra.0+0x34>
   da2c6:	230a      	movs	r3, #10
   da2c8:	e7ad      	b.n	da226 <_strtol_l.isra.0+0x4a>
   da2ca:	bf00      	nop
   da2cc:	000dbf59 	.word	0x000dbf59

000da2d0 <strtol>:
   da2d0:	4613      	mov	r3, r2
   da2d2:	460a      	mov	r2, r1
   da2d4:	4601      	mov	r1, r0
   da2d6:	4802      	ldr	r0, [pc, #8]	; (da2e0 <strtol+0x10>)
   da2d8:	6800      	ldr	r0, [r0, #0]
   da2da:	f7ff bf7f 	b.w	da1dc <_strtol_l.isra.0>
   da2de:	bf00      	nop
   da2e0:	2003dc98 	.word	0x2003dc98

000da2e4 <rshift>:
   da2e4:	6903      	ldr	r3, [r0, #16]
   da2e6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   da2ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da2ee:	ea4f 1261 	mov.w	r2, r1, asr #5
   da2f2:	f100 0414 	add.w	r4, r0, #20
   da2f6:	dd45      	ble.n	da384 <rshift+0xa0>
   da2f8:	f011 011f 	ands.w	r1, r1, #31
   da2fc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   da300:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   da304:	d10c      	bne.n	da320 <rshift+0x3c>
   da306:	f100 0710 	add.w	r7, r0, #16
   da30a:	4629      	mov	r1, r5
   da30c:	42b1      	cmp	r1, r6
   da30e:	d334      	bcc.n	da37a <rshift+0x96>
   da310:	1a9b      	subs	r3, r3, r2
   da312:	009b      	lsls	r3, r3, #2
   da314:	1eea      	subs	r2, r5, #3
   da316:	4296      	cmp	r6, r2
   da318:	bf38      	it	cc
   da31a:	2300      	movcc	r3, #0
   da31c:	4423      	add	r3, r4
   da31e:	e015      	b.n	da34c <rshift+0x68>
   da320:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   da324:	f1c1 0820 	rsb	r8, r1, #32
   da328:	40cf      	lsrs	r7, r1
   da32a:	f105 0e04 	add.w	lr, r5, #4
   da32e:	46a1      	mov	r9, r4
   da330:	4576      	cmp	r6, lr
   da332:	46f4      	mov	ip, lr
   da334:	d815      	bhi.n	da362 <rshift+0x7e>
   da336:	1a9b      	subs	r3, r3, r2
   da338:	009a      	lsls	r2, r3, #2
   da33a:	3a04      	subs	r2, #4
   da33c:	3501      	adds	r5, #1
   da33e:	42ae      	cmp	r6, r5
   da340:	bf38      	it	cc
   da342:	2200      	movcc	r2, #0
   da344:	18a3      	adds	r3, r4, r2
   da346:	50a7      	str	r7, [r4, r2]
   da348:	b107      	cbz	r7, da34c <rshift+0x68>
   da34a:	3304      	adds	r3, #4
   da34c:	1b1a      	subs	r2, r3, r4
   da34e:	42a3      	cmp	r3, r4
   da350:	ea4f 02a2 	mov.w	r2, r2, asr #2
   da354:	bf08      	it	eq
   da356:	2300      	moveq	r3, #0
   da358:	6102      	str	r2, [r0, #16]
   da35a:	bf08      	it	eq
   da35c:	6143      	streq	r3, [r0, #20]
   da35e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da362:	f8dc c000 	ldr.w	ip, [ip]
   da366:	fa0c fc08 	lsl.w	ip, ip, r8
   da36a:	ea4c 0707 	orr.w	r7, ip, r7
   da36e:	f849 7b04 	str.w	r7, [r9], #4
   da372:	f85e 7b04 	ldr.w	r7, [lr], #4
   da376:	40cf      	lsrs	r7, r1
   da378:	e7da      	b.n	da330 <rshift+0x4c>
   da37a:	f851 cb04 	ldr.w	ip, [r1], #4
   da37e:	f847 cf04 	str.w	ip, [r7, #4]!
   da382:	e7c3      	b.n	da30c <rshift+0x28>
   da384:	4623      	mov	r3, r4
   da386:	e7e1      	b.n	da34c <rshift+0x68>

000da388 <__hexdig_fun>:
   da388:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   da38c:	2b09      	cmp	r3, #9
   da38e:	d802      	bhi.n	da396 <__hexdig_fun+0xe>
   da390:	3820      	subs	r0, #32
   da392:	b2c0      	uxtb	r0, r0
   da394:	4770      	bx	lr
   da396:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   da39a:	2b05      	cmp	r3, #5
   da39c:	d801      	bhi.n	da3a2 <__hexdig_fun+0x1a>
   da39e:	3847      	subs	r0, #71	; 0x47
   da3a0:	e7f7      	b.n	da392 <__hexdig_fun+0xa>
   da3a2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   da3a6:	2b05      	cmp	r3, #5
   da3a8:	d801      	bhi.n	da3ae <__hexdig_fun+0x26>
   da3aa:	3827      	subs	r0, #39	; 0x27
   da3ac:	e7f1      	b.n	da392 <__hexdig_fun+0xa>
   da3ae:	2000      	movs	r0, #0
   da3b0:	4770      	bx	lr
	...

000da3b4 <__gethex>:
   da3b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da3b8:	ed2d 8b02 	vpush	{d8}
   da3bc:	b089      	sub	sp, #36	; 0x24
   da3be:	ee08 0a10 	vmov	s16, r0
   da3c2:	9304      	str	r3, [sp, #16]
   da3c4:	4bbc      	ldr	r3, [pc, #752]	; (da6b8 <__gethex+0x304>)
   da3c6:	681b      	ldr	r3, [r3, #0]
   da3c8:	9301      	str	r3, [sp, #4]
   da3ca:	4618      	mov	r0, r3
   da3cc:	468b      	mov	fp, r1
   da3ce:	4690      	mov	r8, r2
   da3d0:	f7ff f8a3 	bl	d951a <strlen>
   da3d4:	9b01      	ldr	r3, [sp, #4]
   da3d6:	f8db 2000 	ldr.w	r2, [fp]
   da3da:	4403      	add	r3, r0
   da3dc:	4682      	mov	sl, r0
   da3de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   da3e2:	9305      	str	r3, [sp, #20]
   da3e4:	1c93      	adds	r3, r2, #2
   da3e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   da3ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   da3ee:	32fe      	adds	r2, #254	; 0xfe
   da3f0:	18d1      	adds	r1, r2, r3
   da3f2:	461f      	mov	r7, r3
   da3f4:	f813 0b01 	ldrb.w	r0, [r3], #1
   da3f8:	9100      	str	r1, [sp, #0]
   da3fa:	2830      	cmp	r0, #48	; 0x30
   da3fc:	d0f8      	beq.n	da3f0 <__gethex+0x3c>
   da3fe:	f7ff ffc3 	bl	da388 <__hexdig_fun>
   da402:	4604      	mov	r4, r0
   da404:	2800      	cmp	r0, #0
   da406:	d13a      	bne.n	da47e <__gethex+0xca>
   da408:	9901      	ldr	r1, [sp, #4]
   da40a:	4652      	mov	r2, sl
   da40c:	4638      	mov	r0, r7
   da40e:	f7ff f88c 	bl	d952a <strncmp>
   da412:	4605      	mov	r5, r0
   da414:	2800      	cmp	r0, #0
   da416:	d168      	bne.n	da4ea <__gethex+0x136>
   da418:	f817 000a 	ldrb.w	r0, [r7, sl]
   da41c:	eb07 060a 	add.w	r6, r7, sl
   da420:	f7ff ffb2 	bl	da388 <__hexdig_fun>
   da424:	2800      	cmp	r0, #0
   da426:	d062      	beq.n	da4ee <__gethex+0x13a>
   da428:	4633      	mov	r3, r6
   da42a:	7818      	ldrb	r0, [r3, #0]
   da42c:	2830      	cmp	r0, #48	; 0x30
   da42e:	461f      	mov	r7, r3
   da430:	f103 0301 	add.w	r3, r3, #1
   da434:	d0f9      	beq.n	da42a <__gethex+0x76>
   da436:	f7ff ffa7 	bl	da388 <__hexdig_fun>
   da43a:	2301      	movs	r3, #1
   da43c:	fab0 f480 	clz	r4, r0
   da440:	0964      	lsrs	r4, r4, #5
   da442:	4635      	mov	r5, r6
   da444:	9300      	str	r3, [sp, #0]
   da446:	463a      	mov	r2, r7
   da448:	4616      	mov	r6, r2
   da44a:	3201      	adds	r2, #1
   da44c:	7830      	ldrb	r0, [r6, #0]
   da44e:	f7ff ff9b 	bl	da388 <__hexdig_fun>
   da452:	2800      	cmp	r0, #0
   da454:	d1f8      	bne.n	da448 <__gethex+0x94>
   da456:	9901      	ldr	r1, [sp, #4]
   da458:	4652      	mov	r2, sl
   da45a:	4630      	mov	r0, r6
   da45c:	f7ff f865 	bl	d952a <strncmp>
   da460:	b980      	cbnz	r0, da484 <__gethex+0xd0>
   da462:	b94d      	cbnz	r5, da478 <__gethex+0xc4>
   da464:	eb06 050a 	add.w	r5, r6, sl
   da468:	462a      	mov	r2, r5
   da46a:	4616      	mov	r6, r2
   da46c:	3201      	adds	r2, #1
   da46e:	7830      	ldrb	r0, [r6, #0]
   da470:	f7ff ff8a 	bl	da388 <__hexdig_fun>
   da474:	2800      	cmp	r0, #0
   da476:	d1f8      	bne.n	da46a <__gethex+0xb6>
   da478:	1bad      	subs	r5, r5, r6
   da47a:	00ad      	lsls	r5, r5, #2
   da47c:	e004      	b.n	da488 <__gethex+0xd4>
   da47e:	2400      	movs	r4, #0
   da480:	4625      	mov	r5, r4
   da482:	e7e0      	b.n	da446 <__gethex+0x92>
   da484:	2d00      	cmp	r5, #0
   da486:	d1f7      	bne.n	da478 <__gethex+0xc4>
   da488:	7833      	ldrb	r3, [r6, #0]
   da48a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   da48e:	2b50      	cmp	r3, #80	; 0x50
   da490:	d13b      	bne.n	da50a <__gethex+0x156>
   da492:	7873      	ldrb	r3, [r6, #1]
   da494:	2b2b      	cmp	r3, #43	; 0x2b
   da496:	d02c      	beq.n	da4f2 <__gethex+0x13e>
   da498:	2b2d      	cmp	r3, #45	; 0x2d
   da49a:	d02e      	beq.n	da4fa <__gethex+0x146>
   da49c:	1c71      	adds	r1, r6, #1
   da49e:	f04f 0900 	mov.w	r9, #0
   da4a2:	7808      	ldrb	r0, [r1, #0]
   da4a4:	f7ff ff70 	bl	da388 <__hexdig_fun>
   da4a8:	1e43      	subs	r3, r0, #1
   da4aa:	b2db      	uxtb	r3, r3
   da4ac:	2b18      	cmp	r3, #24
   da4ae:	d82c      	bhi.n	da50a <__gethex+0x156>
   da4b0:	f1a0 0210 	sub.w	r2, r0, #16
   da4b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   da4b8:	f7ff ff66 	bl	da388 <__hexdig_fun>
   da4bc:	1e43      	subs	r3, r0, #1
   da4be:	b2db      	uxtb	r3, r3
   da4c0:	2b18      	cmp	r3, #24
   da4c2:	d91d      	bls.n	da500 <__gethex+0x14c>
   da4c4:	f1b9 0f00 	cmp.w	r9, #0
   da4c8:	d000      	beq.n	da4cc <__gethex+0x118>
   da4ca:	4252      	negs	r2, r2
   da4cc:	4415      	add	r5, r2
   da4ce:	f8cb 1000 	str.w	r1, [fp]
   da4d2:	b1e4      	cbz	r4, da50e <__gethex+0x15a>
   da4d4:	9b00      	ldr	r3, [sp, #0]
   da4d6:	2b00      	cmp	r3, #0
   da4d8:	bf14      	ite	ne
   da4da:	2700      	movne	r7, #0
   da4dc:	2706      	moveq	r7, #6
   da4de:	4638      	mov	r0, r7
   da4e0:	b009      	add	sp, #36	; 0x24
   da4e2:	ecbd 8b02 	vpop	{d8}
   da4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da4ea:	463e      	mov	r6, r7
   da4ec:	4625      	mov	r5, r4
   da4ee:	2401      	movs	r4, #1
   da4f0:	e7ca      	b.n	da488 <__gethex+0xd4>
   da4f2:	f04f 0900 	mov.w	r9, #0
   da4f6:	1cb1      	adds	r1, r6, #2
   da4f8:	e7d3      	b.n	da4a2 <__gethex+0xee>
   da4fa:	f04f 0901 	mov.w	r9, #1
   da4fe:	e7fa      	b.n	da4f6 <__gethex+0x142>
   da500:	230a      	movs	r3, #10
   da502:	fb03 0202 	mla	r2, r3, r2, r0
   da506:	3a10      	subs	r2, #16
   da508:	e7d4      	b.n	da4b4 <__gethex+0x100>
   da50a:	4631      	mov	r1, r6
   da50c:	e7df      	b.n	da4ce <__gethex+0x11a>
   da50e:	1bf3      	subs	r3, r6, r7
   da510:	3b01      	subs	r3, #1
   da512:	4621      	mov	r1, r4
   da514:	2b07      	cmp	r3, #7
   da516:	dc52      	bgt.n	da5be <__gethex+0x20a>
   da518:	ee18 0a10 	vmov	r0, s16
   da51c:	f000 fa52 	bl	da9c4 <_Balloc>
   da520:	f04f 0b00 	mov.w	fp, #0
   da524:	f100 0914 	add.w	r9, r0, #20
   da528:	f1ca 0301 	rsb	r3, sl, #1
   da52c:	4604      	mov	r4, r0
   da52e:	f8cd 9008 	str.w	r9, [sp, #8]
   da532:	f8cd b000 	str.w	fp, [sp]
   da536:	9306      	str	r3, [sp, #24]
   da538:	42b7      	cmp	r7, r6
   da53a:	d343      	bcc.n	da5c4 <__gethex+0x210>
   da53c:	9802      	ldr	r0, [sp, #8]
   da53e:	9b00      	ldr	r3, [sp, #0]
   da540:	f840 3b04 	str.w	r3, [r0], #4
   da544:	eba0 0009 	sub.w	r0, r0, r9
   da548:	1080      	asrs	r0, r0, #2
   da54a:	0146      	lsls	r6, r0, #5
   da54c:	6120      	str	r0, [r4, #16]
   da54e:	4618      	mov	r0, r3
   da550:	f000 faff 	bl	dab52 <__hi0bits>
   da554:	1a30      	subs	r0, r6, r0
   da556:	f8d8 6000 	ldr.w	r6, [r8]
   da55a:	42b0      	cmp	r0, r6
   da55c:	dd66      	ble.n	da62c <__gethex+0x278>
   da55e:	1b87      	subs	r7, r0, r6
   da560:	4639      	mov	r1, r7
   da562:	4620      	mov	r0, r4
   da564:	f000 fe4c 	bl	db200 <__any_on>
   da568:	4682      	mov	sl, r0
   da56a:	b1a8      	cbz	r0, da598 <__gethex+0x1e4>
   da56c:	1e7b      	subs	r3, r7, #1
   da56e:	1159      	asrs	r1, r3, #5
   da570:	f003 021f 	and.w	r2, r3, #31
   da574:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   da578:	f04f 0a01 	mov.w	sl, #1
   da57c:	fa0a f202 	lsl.w	r2, sl, r2
   da580:	420a      	tst	r2, r1
   da582:	d009      	beq.n	da598 <__gethex+0x1e4>
   da584:	4553      	cmp	r3, sl
   da586:	dd05      	ble.n	da594 <__gethex+0x1e0>
   da588:	1eb9      	subs	r1, r7, #2
   da58a:	4620      	mov	r0, r4
   da58c:	f000 fe38 	bl	db200 <__any_on>
   da590:	2800      	cmp	r0, #0
   da592:	d148      	bne.n	da626 <__gethex+0x272>
   da594:	f04f 0a02 	mov.w	sl, #2
   da598:	4639      	mov	r1, r7
   da59a:	4620      	mov	r0, r4
   da59c:	f7ff fea2 	bl	da2e4 <rshift>
   da5a0:	443d      	add	r5, r7
   da5a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da5a6:	42ab      	cmp	r3, r5
   da5a8:	da4f      	bge.n	da64a <__gethex+0x296>
   da5aa:	ee18 0a10 	vmov	r0, s16
   da5ae:	4621      	mov	r1, r4
   da5b0:	f000 fa3c 	bl	daa2c <_Bfree>
   da5b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da5b6:	2300      	movs	r3, #0
   da5b8:	6013      	str	r3, [r2, #0]
   da5ba:	27a3      	movs	r7, #163	; 0xa3
   da5bc:	e78f      	b.n	da4de <__gethex+0x12a>
   da5be:	3101      	adds	r1, #1
   da5c0:	105b      	asrs	r3, r3, #1
   da5c2:	e7a7      	b.n	da514 <__gethex+0x160>
   da5c4:	1e73      	subs	r3, r6, #1
   da5c6:	9a05      	ldr	r2, [sp, #20]
   da5c8:	9303      	str	r3, [sp, #12]
   da5ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   da5ce:	4293      	cmp	r3, r2
   da5d0:	d019      	beq.n	da606 <__gethex+0x252>
   da5d2:	f1bb 0f20 	cmp.w	fp, #32
   da5d6:	d107      	bne.n	da5e8 <__gethex+0x234>
   da5d8:	9b02      	ldr	r3, [sp, #8]
   da5da:	9a00      	ldr	r2, [sp, #0]
   da5dc:	f843 2b04 	str.w	r2, [r3], #4
   da5e0:	9302      	str	r3, [sp, #8]
   da5e2:	2300      	movs	r3, #0
   da5e4:	9300      	str	r3, [sp, #0]
   da5e6:	469b      	mov	fp, r3
   da5e8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   da5ec:	f7ff fecc 	bl	da388 <__hexdig_fun>
   da5f0:	9b00      	ldr	r3, [sp, #0]
   da5f2:	f000 000f 	and.w	r0, r0, #15
   da5f6:	fa00 f00b 	lsl.w	r0, r0, fp
   da5fa:	4303      	orrs	r3, r0
   da5fc:	9300      	str	r3, [sp, #0]
   da5fe:	f10b 0b04 	add.w	fp, fp, #4
   da602:	9b03      	ldr	r3, [sp, #12]
   da604:	e00d      	b.n	da622 <__gethex+0x26e>
   da606:	9b03      	ldr	r3, [sp, #12]
   da608:	9a06      	ldr	r2, [sp, #24]
   da60a:	4413      	add	r3, r2
   da60c:	42bb      	cmp	r3, r7
   da60e:	d3e0      	bcc.n	da5d2 <__gethex+0x21e>
   da610:	4618      	mov	r0, r3
   da612:	9901      	ldr	r1, [sp, #4]
   da614:	9307      	str	r3, [sp, #28]
   da616:	4652      	mov	r2, sl
   da618:	f7fe ff87 	bl	d952a <strncmp>
   da61c:	9b07      	ldr	r3, [sp, #28]
   da61e:	2800      	cmp	r0, #0
   da620:	d1d7      	bne.n	da5d2 <__gethex+0x21e>
   da622:	461e      	mov	r6, r3
   da624:	e788      	b.n	da538 <__gethex+0x184>
   da626:	f04f 0a03 	mov.w	sl, #3
   da62a:	e7b5      	b.n	da598 <__gethex+0x1e4>
   da62c:	da0a      	bge.n	da644 <__gethex+0x290>
   da62e:	1a37      	subs	r7, r6, r0
   da630:	4621      	mov	r1, r4
   da632:	ee18 0a10 	vmov	r0, s16
   da636:	463a      	mov	r2, r7
   da638:	f000 fbce 	bl	dadd8 <__lshift>
   da63c:	1bed      	subs	r5, r5, r7
   da63e:	4604      	mov	r4, r0
   da640:	f100 0914 	add.w	r9, r0, #20
   da644:	f04f 0a00 	mov.w	sl, #0
   da648:	e7ab      	b.n	da5a2 <__gethex+0x1ee>
   da64a:	f8d8 0004 	ldr.w	r0, [r8, #4]
   da64e:	42a8      	cmp	r0, r5
   da650:	dd6d      	ble.n	da72e <__gethex+0x37a>
   da652:	1b45      	subs	r5, r0, r5
   da654:	42ae      	cmp	r6, r5
   da656:	dc31      	bgt.n	da6bc <__gethex+0x308>
   da658:	f8d8 300c 	ldr.w	r3, [r8, #12]
   da65c:	2b02      	cmp	r3, #2
   da65e:	d023      	beq.n	da6a8 <__gethex+0x2f4>
   da660:	2b03      	cmp	r3, #3
   da662:	d025      	beq.n	da6b0 <__gethex+0x2fc>
   da664:	2b01      	cmp	r3, #1
   da666:	d115      	bne.n	da694 <__gethex+0x2e0>
   da668:	42ae      	cmp	r6, r5
   da66a:	d113      	bne.n	da694 <__gethex+0x2e0>
   da66c:	2e01      	cmp	r6, #1
   da66e:	d10b      	bne.n	da688 <__gethex+0x2d4>
   da670:	9a04      	ldr	r2, [sp, #16]
   da672:	f8d8 3004 	ldr.w	r3, [r8, #4]
   da676:	6013      	str	r3, [r2, #0]
   da678:	2301      	movs	r3, #1
   da67a:	6123      	str	r3, [r4, #16]
   da67c:	f8c9 3000 	str.w	r3, [r9]
   da680:	9b14      	ldr	r3, [sp, #80]	; 0x50
   da682:	2762      	movs	r7, #98	; 0x62
   da684:	601c      	str	r4, [r3, #0]
   da686:	e72a      	b.n	da4de <__gethex+0x12a>
   da688:	1e71      	subs	r1, r6, #1
   da68a:	4620      	mov	r0, r4
   da68c:	f000 fdb8 	bl	db200 <__any_on>
   da690:	2800      	cmp	r0, #0
   da692:	d1ed      	bne.n	da670 <__gethex+0x2bc>
   da694:	ee18 0a10 	vmov	r0, s16
   da698:	4621      	mov	r1, r4
   da69a:	f000 f9c7 	bl	daa2c <_Bfree>
   da69e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da6a0:	2300      	movs	r3, #0
   da6a2:	6013      	str	r3, [r2, #0]
   da6a4:	2750      	movs	r7, #80	; 0x50
   da6a6:	e71a      	b.n	da4de <__gethex+0x12a>
   da6a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da6aa:	2b00      	cmp	r3, #0
   da6ac:	d1f2      	bne.n	da694 <__gethex+0x2e0>
   da6ae:	e7df      	b.n	da670 <__gethex+0x2bc>
   da6b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da6b2:	2b00      	cmp	r3, #0
   da6b4:	d1dc      	bne.n	da670 <__gethex+0x2bc>
   da6b6:	e7ed      	b.n	da694 <__gethex+0x2e0>
   da6b8:	000dc05c 	.word	0x000dc05c
   da6bc:	1e6f      	subs	r7, r5, #1
   da6be:	f1ba 0f00 	cmp.w	sl, #0
   da6c2:	d131      	bne.n	da728 <__gethex+0x374>
   da6c4:	b127      	cbz	r7, da6d0 <__gethex+0x31c>
   da6c6:	4639      	mov	r1, r7
   da6c8:	4620      	mov	r0, r4
   da6ca:	f000 fd99 	bl	db200 <__any_on>
   da6ce:	4682      	mov	sl, r0
   da6d0:	117b      	asrs	r3, r7, #5
   da6d2:	2101      	movs	r1, #1
   da6d4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   da6d8:	f007 071f 	and.w	r7, r7, #31
   da6dc:	fa01 f707 	lsl.w	r7, r1, r7
   da6e0:	421f      	tst	r7, r3
   da6e2:	4629      	mov	r1, r5
   da6e4:	4620      	mov	r0, r4
   da6e6:	bf18      	it	ne
   da6e8:	f04a 0a02 	orrne.w	sl, sl, #2
   da6ec:	1b76      	subs	r6, r6, r5
   da6ee:	f7ff fdf9 	bl	da2e4 <rshift>
   da6f2:	f8d8 5004 	ldr.w	r5, [r8, #4]
   da6f6:	2702      	movs	r7, #2
   da6f8:	f1ba 0f00 	cmp.w	sl, #0
   da6fc:	d048      	beq.n	da790 <__gethex+0x3dc>
   da6fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
   da702:	2b02      	cmp	r3, #2
   da704:	d015      	beq.n	da732 <__gethex+0x37e>
   da706:	2b03      	cmp	r3, #3
   da708:	d017      	beq.n	da73a <__gethex+0x386>
   da70a:	2b01      	cmp	r3, #1
   da70c:	d109      	bne.n	da722 <__gethex+0x36e>
   da70e:	f01a 0f02 	tst.w	sl, #2
   da712:	d006      	beq.n	da722 <__gethex+0x36e>
   da714:	f8d9 0000 	ldr.w	r0, [r9]
   da718:	ea4a 0a00 	orr.w	sl, sl, r0
   da71c:	f01a 0f01 	tst.w	sl, #1
   da720:	d10e      	bne.n	da740 <__gethex+0x38c>
   da722:	f047 0710 	orr.w	r7, r7, #16
   da726:	e033      	b.n	da790 <__gethex+0x3dc>
   da728:	f04f 0a01 	mov.w	sl, #1
   da72c:	e7d0      	b.n	da6d0 <__gethex+0x31c>
   da72e:	2701      	movs	r7, #1
   da730:	e7e2      	b.n	da6f8 <__gethex+0x344>
   da732:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da734:	f1c3 0301 	rsb	r3, r3, #1
   da738:	9315      	str	r3, [sp, #84]	; 0x54
   da73a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da73c:	2b00      	cmp	r3, #0
   da73e:	d0f0      	beq.n	da722 <__gethex+0x36e>
   da740:	f8d4 9010 	ldr.w	r9, [r4, #16]
   da744:	f104 0314 	add.w	r3, r4, #20
   da748:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   da74c:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   da750:	f04f 0c00 	mov.w	ip, #0
   da754:	4618      	mov	r0, r3
   da756:	f853 2b04 	ldr.w	r2, [r3], #4
   da75a:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   da75e:	d01c      	beq.n	da79a <__gethex+0x3e6>
   da760:	3201      	adds	r2, #1
   da762:	6002      	str	r2, [r0, #0]
   da764:	2f02      	cmp	r7, #2
   da766:	f104 0314 	add.w	r3, r4, #20
   da76a:	d13a      	bne.n	da7e2 <__gethex+0x42e>
   da76c:	f8d8 2000 	ldr.w	r2, [r8]
   da770:	3a01      	subs	r2, #1
   da772:	42b2      	cmp	r2, r6
   da774:	d10a      	bne.n	da78c <__gethex+0x3d8>
   da776:	1171      	asrs	r1, r6, #5
   da778:	2201      	movs	r2, #1
   da77a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   da77e:	f006 061f 	and.w	r6, r6, #31
   da782:	fa02 f606 	lsl.w	r6, r2, r6
   da786:	421e      	tst	r6, r3
   da788:	bf18      	it	ne
   da78a:	4617      	movne	r7, r2
   da78c:	f047 0720 	orr.w	r7, r7, #32
   da790:	9b14      	ldr	r3, [sp, #80]	; 0x50
   da792:	601c      	str	r4, [r3, #0]
   da794:	9b04      	ldr	r3, [sp, #16]
   da796:	601d      	str	r5, [r3, #0]
   da798:	e6a1      	b.n	da4de <__gethex+0x12a>
   da79a:	4299      	cmp	r1, r3
   da79c:	f843 cc04 	str.w	ip, [r3, #-4]
   da7a0:	d8d8      	bhi.n	da754 <__gethex+0x3a0>
   da7a2:	68a3      	ldr	r3, [r4, #8]
   da7a4:	4599      	cmp	r9, r3
   da7a6:	db14      	blt.n	da7d2 <__gethex+0x41e>
   da7a8:	6861      	ldr	r1, [r4, #4]
   da7aa:	ee18 0a10 	vmov	r0, s16
   da7ae:	3101      	adds	r1, #1
   da7b0:	f000 f908 	bl	da9c4 <_Balloc>
   da7b4:	6922      	ldr	r2, [r4, #16]
   da7b6:	3202      	adds	r2, #2
   da7b8:	f104 010c 	add.w	r1, r4, #12
   da7bc:	4682      	mov	sl, r0
   da7be:	0092      	lsls	r2, r2, #2
   da7c0:	300c      	adds	r0, #12
   da7c2:	f7fe fe27 	bl	d9414 <memcpy>
   da7c6:	4621      	mov	r1, r4
   da7c8:	ee18 0a10 	vmov	r0, s16
   da7cc:	f000 f92e 	bl	daa2c <_Bfree>
   da7d0:	4654      	mov	r4, sl
   da7d2:	6923      	ldr	r3, [r4, #16]
   da7d4:	1c5a      	adds	r2, r3, #1
   da7d6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   da7da:	6122      	str	r2, [r4, #16]
   da7dc:	2201      	movs	r2, #1
   da7de:	615a      	str	r2, [r3, #20]
   da7e0:	e7c0      	b.n	da764 <__gethex+0x3b0>
   da7e2:	6922      	ldr	r2, [r4, #16]
   da7e4:	454a      	cmp	r2, r9
   da7e6:	dd0b      	ble.n	da800 <__gethex+0x44c>
   da7e8:	2101      	movs	r1, #1
   da7ea:	4620      	mov	r0, r4
   da7ec:	f7ff fd7a 	bl	da2e4 <rshift>
   da7f0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da7f4:	3501      	adds	r5, #1
   da7f6:	42ab      	cmp	r3, r5
   da7f8:	f6ff aed7 	blt.w	da5aa <__gethex+0x1f6>
   da7fc:	2701      	movs	r7, #1
   da7fe:	e7c5      	b.n	da78c <__gethex+0x3d8>
   da800:	f016 061f 	ands.w	r6, r6, #31
   da804:	d0fa      	beq.n	da7fc <__gethex+0x448>
   da806:	449b      	add	fp, r3
   da808:	f1c6 0620 	rsb	r6, r6, #32
   da80c:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   da810:	f000 f99f 	bl	dab52 <__hi0bits>
   da814:	42b0      	cmp	r0, r6
   da816:	dbe7      	blt.n	da7e8 <__gethex+0x434>
   da818:	e7f0      	b.n	da7fc <__gethex+0x448>
   da81a:	bf00      	nop

000da81c <L_shift>:
   da81c:	f1c2 0208 	rsb	r2, r2, #8
   da820:	0092      	lsls	r2, r2, #2
   da822:	b570      	push	{r4, r5, r6, lr}
   da824:	f1c2 0620 	rsb	r6, r2, #32
   da828:	6843      	ldr	r3, [r0, #4]
   da82a:	6804      	ldr	r4, [r0, #0]
   da82c:	fa03 f506 	lsl.w	r5, r3, r6
   da830:	432c      	orrs	r4, r5
   da832:	40d3      	lsrs	r3, r2
   da834:	6004      	str	r4, [r0, #0]
   da836:	f840 3f04 	str.w	r3, [r0, #4]!
   da83a:	4288      	cmp	r0, r1
   da83c:	d3f4      	bcc.n	da828 <L_shift+0xc>
   da83e:	bd70      	pop	{r4, r5, r6, pc}

000da840 <__match>:
   da840:	b530      	push	{r4, r5, lr}
   da842:	6803      	ldr	r3, [r0, #0]
   da844:	3301      	adds	r3, #1
   da846:	f811 4b01 	ldrb.w	r4, [r1], #1
   da84a:	b914      	cbnz	r4, da852 <__match+0x12>
   da84c:	6003      	str	r3, [r0, #0]
   da84e:	2001      	movs	r0, #1
   da850:	bd30      	pop	{r4, r5, pc}
   da852:	f813 2b01 	ldrb.w	r2, [r3], #1
   da856:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   da85a:	2d19      	cmp	r5, #25
   da85c:	bf98      	it	ls
   da85e:	3220      	addls	r2, #32
   da860:	42a2      	cmp	r2, r4
   da862:	d0f0      	beq.n	da846 <__match+0x6>
   da864:	2000      	movs	r0, #0
   da866:	e7f3      	b.n	da850 <__match+0x10>

000da868 <__hexnan>:
   da868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da86c:	680b      	ldr	r3, [r1, #0]
   da86e:	6801      	ldr	r1, [r0, #0]
   da870:	115e      	asrs	r6, r3, #5
   da872:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   da876:	f013 031f 	ands.w	r3, r3, #31
   da87a:	b087      	sub	sp, #28
   da87c:	bf18      	it	ne
   da87e:	3604      	addne	r6, #4
   da880:	2500      	movs	r5, #0
   da882:	1f37      	subs	r7, r6, #4
   da884:	4682      	mov	sl, r0
   da886:	4690      	mov	r8, r2
   da888:	9301      	str	r3, [sp, #4]
   da88a:	f846 5c04 	str.w	r5, [r6, #-4]
   da88e:	46b9      	mov	r9, r7
   da890:	463c      	mov	r4, r7
   da892:	9502      	str	r5, [sp, #8]
   da894:	46ab      	mov	fp, r5
   da896:	784a      	ldrb	r2, [r1, #1]
   da898:	1c4b      	adds	r3, r1, #1
   da89a:	9303      	str	r3, [sp, #12]
   da89c:	b342      	cbz	r2, da8f0 <__hexnan+0x88>
   da89e:	4610      	mov	r0, r2
   da8a0:	9105      	str	r1, [sp, #20]
   da8a2:	9204      	str	r2, [sp, #16]
   da8a4:	f7ff fd70 	bl	da388 <__hexdig_fun>
   da8a8:	2800      	cmp	r0, #0
   da8aa:	d14f      	bne.n	da94c <__hexnan+0xe4>
   da8ac:	9a04      	ldr	r2, [sp, #16]
   da8ae:	9905      	ldr	r1, [sp, #20]
   da8b0:	2a20      	cmp	r2, #32
   da8b2:	d818      	bhi.n	da8e6 <__hexnan+0x7e>
   da8b4:	9b02      	ldr	r3, [sp, #8]
   da8b6:	459b      	cmp	fp, r3
   da8b8:	dd13      	ble.n	da8e2 <__hexnan+0x7a>
   da8ba:	454c      	cmp	r4, r9
   da8bc:	d206      	bcs.n	da8cc <__hexnan+0x64>
   da8be:	2d07      	cmp	r5, #7
   da8c0:	dc04      	bgt.n	da8cc <__hexnan+0x64>
   da8c2:	462a      	mov	r2, r5
   da8c4:	4649      	mov	r1, r9
   da8c6:	4620      	mov	r0, r4
   da8c8:	f7ff ffa8 	bl	da81c <L_shift>
   da8cc:	4544      	cmp	r4, r8
   da8ce:	d950      	bls.n	da972 <__hexnan+0x10a>
   da8d0:	2300      	movs	r3, #0
   da8d2:	f1a4 0904 	sub.w	r9, r4, #4
   da8d6:	f844 3c04 	str.w	r3, [r4, #-4]
   da8da:	f8cd b008 	str.w	fp, [sp, #8]
   da8de:	464c      	mov	r4, r9
   da8e0:	461d      	mov	r5, r3
   da8e2:	9903      	ldr	r1, [sp, #12]
   da8e4:	e7d7      	b.n	da896 <__hexnan+0x2e>
   da8e6:	2a29      	cmp	r2, #41	; 0x29
   da8e8:	d156      	bne.n	da998 <__hexnan+0x130>
   da8ea:	3102      	adds	r1, #2
   da8ec:	f8ca 1000 	str.w	r1, [sl]
   da8f0:	f1bb 0f00 	cmp.w	fp, #0
   da8f4:	d050      	beq.n	da998 <__hexnan+0x130>
   da8f6:	454c      	cmp	r4, r9
   da8f8:	d206      	bcs.n	da908 <__hexnan+0xa0>
   da8fa:	2d07      	cmp	r5, #7
   da8fc:	dc04      	bgt.n	da908 <__hexnan+0xa0>
   da8fe:	462a      	mov	r2, r5
   da900:	4649      	mov	r1, r9
   da902:	4620      	mov	r0, r4
   da904:	f7ff ff8a 	bl	da81c <L_shift>
   da908:	4544      	cmp	r4, r8
   da90a:	d934      	bls.n	da976 <__hexnan+0x10e>
   da90c:	f1a8 0204 	sub.w	r2, r8, #4
   da910:	4623      	mov	r3, r4
   da912:	f853 1b04 	ldr.w	r1, [r3], #4
   da916:	f842 1f04 	str.w	r1, [r2, #4]!
   da91a:	429f      	cmp	r7, r3
   da91c:	d2f9      	bcs.n	da912 <__hexnan+0xaa>
   da91e:	1b3b      	subs	r3, r7, r4
   da920:	f023 0303 	bic.w	r3, r3, #3
   da924:	3304      	adds	r3, #4
   da926:	3401      	adds	r4, #1
   da928:	3e03      	subs	r6, #3
   da92a:	42b4      	cmp	r4, r6
   da92c:	bf88      	it	hi
   da92e:	2304      	movhi	r3, #4
   da930:	4443      	add	r3, r8
   da932:	2200      	movs	r2, #0
   da934:	f843 2b04 	str.w	r2, [r3], #4
   da938:	429f      	cmp	r7, r3
   da93a:	d2fb      	bcs.n	da934 <__hexnan+0xcc>
   da93c:	683b      	ldr	r3, [r7, #0]
   da93e:	b91b      	cbnz	r3, da948 <__hexnan+0xe0>
   da940:	4547      	cmp	r7, r8
   da942:	d127      	bne.n	da994 <__hexnan+0x12c>
   da944:	2301      	movs	r3, #1
   da946:	603b      	str	r3, [r7, #0]
   da948:	2005      	movs	r0, #5
   da94a:	e026      	b.n	da99a <__hexnan+0x132>
   da94c:	3501      	adds	r5, #1
   da94e:	2d08      	cmp	r5, #8
   da950:	f10b 0b01 	add.w	fp, fp, #1
   da954:	dd06      	ble.n	da964 <__hexnan+0xfc>
   da956:	4544      	cmp	r4, r8
   da958:	d9c3      	bls.n	da8e2 <__hexnan+0x7a>
   da95a:	2300      	movs	r3, #0
   da95c:	f844 3c04 	str.w	r3, [r4, #-4]
   da960:	2501      	movs	r5, #1
   da962:	3c04      	subs	r4, #4
   da964:	6822      	ldr	r2, [r4, #0]
   da966:	f000 000f 	and.w	r0, r0, #15
   da96a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   da96e:	6022      	str	r2, [r4, #0]
   da970:	e7b7      	b.n	da8e2 <__hexnan+0x7a>
   da972:	2508      	movs	r5, #8
   da974:	e7b5      	b.n	da8e2 <__hexnan+0x7a>
   da976:	9b01      	ldr	r3, [sp, #4]
   da978:	2b00      	cmp	r3, #0
   da97a:	d0df      	beq.n	da93c <__hexnan+0xd4>
   da97c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da980:	f1c3 0320 	rsb	r3, r3, #32
   da984:	fa22 f303 	lsr.w	r3, r2, r3
   da988:	f856 2c04 	ldr.w	r2, [r6, #-4]
   da98c:	401a      	ands	r2, r3
   da98e:	f846 2c04 	str.w	r2, [r6, #-4]
   da992:	e7d3      	b.n	da93c <__hexnan+0xd4>
   da994:	3f04      	subs	r7, #4
   da996:	e7d1      	b.n	da93c <__hexnan+0xd4>
   da998:	2004      	movs	r0, #4
   da99a:	b007      	add	sp, #28
   da99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000da9a0 <__ascii_mbtowc>:
   da9a0:	b082      	sub	sp, #8
   da9a2:	b901      	cbnz	r1, da9a6 <__ascii_mbtowc+0x6>
   da9a4:	a901      	add	r1, sp, #4
   da9a6:	b142      	cbz	r2, da9ba <__ascii_mbtowc+0x1a>
   da9a8:	b14b      	cbz	r3, da9be <__ascii_mbtowc+0x1e>
   da9aa:	7813      	ldrb	r3, [r2, #0]
   da9ac:	600b      	str	r3, [r1, #0]
   da9ae:	7812      	ldrb	r2, [r2, #0]
   da9b0:	1e10      	subs	r0, r2, #0
   da9b2:	bf18      	it	ne
   da9b4:	2001      	movne	r0, #1
   da9b6:	b002      	add	sp, #8
   da9b8:	4770      	bx	lr
   da9ba:	4610      	mov	r0, r2
   da9bc:	e7fb      	b.n	da9b6 <__ascii_mbtowc+0x16>
   da9be:	f06f 0001 	mvn.w	r0, #1
   da9c2:	e7f8      	b.n	da9b6 <__ascii_mbtowc+0x16>

000da9c4 <_Balloc>:
   da9c4:	b570      	push	{r4, r5, r6, lr}
   da9c6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   da9c8:	4604      	mov	r4, r0
   da9ca:	460d      	mov	r5, r1
   da9cc:	b93e      	cbnz	r6, da9de <_Balloc+0x1a>
   da9ce:	2010      	movs	r0, #16
   da9d0:	f7fc fb6c 	bl	d70ac <malloc>
   da9d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   da9d8:	6260      	str	r0, [r4, #36]	; 0x24
   da9da:	6006      	str	r6, [r0, #0]
   da9dc:	60c6      	str	r6, [r0, #12]
   da9de:	6a66      	ldr	r6, [r4, #36]	; 0x24
   da9e0:	68f3      	ldr	r3, [r6, #12]
   da9e2:	b183      	cbz	r3, daa06 <_Balloc+0x42>
   da9e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   da9e6:	68db      	ldr	r3, [r3, #12]
   da9e8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   da9ec:	b9b8      	cbnz	r0, daa1e <_Balloc+0x5a>
   da9ee:	2101      	movs	r1, #1
   da9f0:	fa01 f605 	lsl.w	r6, r1, r5
   da9f4:	1d72      	adds	r2, r6, #5
   da9f6:	0092      	lsls	r2, r2, #2
   da9f8:	4620      	mov	r0, r4
   da9fa:	f000 fc22 	bl	db242 <_calloc_r>
   da9fe:	b160      	cbz	r0, daa1a <_Balloc+0x56>
   daa00:	e9c0 5601 	strd	r5, r6, [r0, #4]
   daa04:	e00e      	b.n	daa24 <_Balloc+0x60>
   daa06:	2221      	movs	r2, #33	; 0x21
   daa08:	2104      	movs	r1, #4
   daa0a:	4620      	mov	r0, r4
   daa0c:	f000 fc19 	bl	db242 <_calloc_r>
   daa10:	6a63      	ldr	r3, [r4, #36]	; 0x24
   daa12:	60f0      	str	r0, [r6, #12]
   daa14:	68db      	ldr	r3, [r3, #12]
   daa16:	2b00      	cmp	r3, #0
   daa18:	d1e4      	bne.n	da9e4 <_Balloc+0x20>
   daa1a:	2000      	movs	r0, #0
   daa1c:	bd70      	pop	{r4, r5, r6, pc}
   daa1e:	6802      	ldr	r2, [r0, #0]
   daa20:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   daa24:	2300      	movs	r3, #0
   daa26:	e9c0 3303 	strd	r3, r3, [r0, #12]
   daa2a:	e7f7      	b.n	daa1c <_Balloc+0x58>

000daa2c <_Bfree>:
   daa2c:	b570      	push	{r4, r5, r6, lr}
   daa2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   daa30:	4605      	mov	r5, r0
   daa32:	460c      	mov	r4, r1
   daa34:	b93e      	cbnz	r6, daa46 <_Bfree+0x1a>
   daa36:	2010      	movs	r0, #16
   daa38:	f7fc fb38 	bl	d70ac <malloc>
   daa3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   daa40:	6268      	str	r0, [r5, #36]	; 0x24
   daa42:	6006      	str	r6, [r0, #0]
   daa44:	60c6      	str	r6, [r0, #12]
   daa46:	b13c      	cbz	r4, daa58 <_Bfree+0x2c>
   daa48:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   daa4a:	6862      	ldr	r2, [r4, #4]
   daa4c:	68db      	ldr	r3, [r3, #12]
   daa4e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   daa52:	6021      	str	r1, [r4, #0]
   daa54:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   daa58:	bd70      	pop	{r4, r5, r6, pc}

000daa5a <__multadd>:
   daa5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   daa5e:	690e      	ldr	r6, [r1, #16]
   daa60:	4607      	mov	r7, r0
   daa62:	4698      	mov	r8, r3
   daa64:	460c      	mov	r4, r1
   daa66:	f101 0014 	add.w	r0, r1, #20
   daa6a:	2300      	movs	r3, #0
   daa6c:	6805      	ldr	r5, [r0, #0]
   daa6e:	b2a9      	uxth	r1, r5
   daa70:	fb02 8101 	mla	r1, r2, r1, r8
   daa74:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   daa78:	0c2d      	lsrs	r5, r5, #16
   daa7a:	fb02 c505 	mla	r5, r2, r5, ip
   daa7e:	b289      	uxth	r1, r1
   daa80:	3301      	adds	r3, #1
   daa82:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   daa86:	429e      	cmp	r6, r3
   daa88:	f840 1b04 	str.w	r1, [r0], #4
   daa8c:	ea4f 4815 	mov.w	r8, r5, lsr #16
   daa90:	dcec      	bgt.n	daa6c <__multadd+0x12>
   daa92:	f1b8 0f00 	cmp.w	r8, #0
   daa96:	d01b      	beq.n	daad0 <__multadd+0x76>
   daa98:	68a3      	ldr	r3, [r4, #8]
   daa9a:	42b3      	cmp	r3, r6
   daa9c:	dc12      	bgt.n	daac4 <__multadd+0x6a>
   daa9e:	6861      	ldr	r1, [r4, #4]
   daaa0:	4638      	mov	r0, r7
   daaa2:	3101      	adds	r1, #1
   daaa4:	f7ff ff8e 	bl	da9c4 <_Balloc>
   daaa8:	6922      	ldr	r2, [r4, #16]
   daaaa:	3202      	adds	r2, #2
   daaac:	f104 010c 	add.w	r1, r4, #12
   daab0:	4605      	mov	r5, r0
   daab2:	0092      	lsls	r2, r2, #2
   daab4:	300c      	adds	r0, #12
   daab6:	f7fe fcad 	bl	d9414 <memcpy>
   daaba:	4621      	mov	r1, r4
   daabc:	4638      	mov	r0, r7
   daabe:	f7ff ffb5 	bl	daa2c <_Bfree>
   daac2:	462c      	mov	r4, r5
   daac4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   daac8:	3601      	adds	r6, #1
   daaca:	f8c3 8014 	str.w	r8, [r3, #20]
   daace:	6126      	str	r6, [r4, #16]
   daad0:	4620      	mov	r0, r4
   daad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000daad6 <__s2b>:
   daad6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   daada:	460c      	mov	r4, r1
   daadc:	4615      	mov	r5, r2
   daade:	461f      	mov	r7, r3
   daae0:	2209      	movs	r2, #9
   daae2:	3308      	adds	r3, #8
   daae4:	4606      	mov	r6, r0
   daae6:	fb93 f3f2 	sdiv	r3, r3, r2
   daaea:	2100      	movs	r1, #0
   daaec:	2201      	movs	r2, #1
   daaee:	429a      	cmp	r2, r3
   daaf0:	db20      	blt.n	dab34 <__s2b+0x5e>
   daaf2:	4630      	mov	r0, r6
   daaf4:	f7ff ff66 	bl	da9c4 <_Balloc>
   daaf8:	9b08      	ldr	r3, [sp, #32]
   daafa:	6143      	str	r3, [r0, #20]
   daafc:	2d09      	cmp	r5, #9
   daafe:	f04f 0301 	mov.w	r3, #1
   dab02:	6103      	str	r3, [r0, #16]
   dab04:	dd19      	ble.n	dab3a <__s2b+0x64>
   dab06:	f104 0909 	add.w	r9, r4, #9
   dab0a:	46c8      	mov	r8, r9
   dab0c:	442c      	add	r4, r5
   dab0e:	f818 3b01 	ldrb.w	r3, [r8], #1
   dab12:	4601      	mov	r1, r0
   dab14:	3b30      	subs	r3, #48	; 0x30
   dab16:	220a      	movs	r2, #10
   dab18:	4630      	mov	r0, r6
   dab1a:	f7ff ff9e 	bl	daa5a <__multadd>
   dab1e:	45a0      	cmp	r8, r4
   dab20:	d1f5      	bne.n	dab0e <__s2b+0x38>
   dab22:	f1a5 0408 	sub.w	r4, r5, #8
   dab26:	444c      	add	r4, r9
   dab28:	1b2d      	subs	r5, r5, r4
   dab2a:	1963      	adds	r3, r4, r5
   dab2c:	42bb      	cmp	r3, r7
   dab2e:	db07      	blt.n	dab40 <__s2b+0x6a>
   dab30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dab34:	0052      	lsls	r2, r2, #1
   dab36:	3101      	adds	r1, #1
   dab38:	e7d9      	b.n	daaee <__s2b+0x18>
   dab3a:	340a      	adds	r4, #10
   dab3c:	2509      	movs	r5, #9
   dab3e:	e7f3      	b.n	dab28 <__s2b+0x52>
   dab40:	f814 3b01 	ldrb.w	r3, [r4], #1
   dab44:	4601      	mov	r1, r0
   dab46:	3b30      	subs	r3, #48	; 0x30
   dab48:	220a      	movs	r2, #10
   dab4a:	4630      	mov	r0, r6
   dab4c:	f7ff ff85 	bl	daa5a <__multadd>
   dab50:	e7eb      	b.n	dab2a <__s2b+0x54>

000dab52 <__hi0bits>:
   dab52:	0c03      	lsrs	r3, r0, #16
   dab54:	041b      	lsls	r3, r3, #16
   dab56:	b9d3      	cbnz	r3, dab8e <__hi0bits+0x3c>
   dab58:	0400      	lsls	r0, r0, #16
   dab5a:	2310      	movs	r3, #16
   dab5c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dab60:	bf04      	itt	eq
   dab62:	0200      	lsleq	r0, r0, #8
   dab64:	3308      	addeq	r3, #8
   dab66:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dab6a:	bf04      	itt	eq
   dab6c:	0100      	lsleq	r0, r0, #4
   dab6e:	3304      	addeq	r3, #4
   dab70:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dab74:	bf04      	itt	eq
   dab76:	0080      	lsleq	r0, r0, #2
   dab78:	3302      	addeq	r3, #2
   dab7a:	2800      	cmp	r0, #0
   dab7c:	db05      	blt.n	dab8a <__hi0bits+0x38>
   dab7e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   dab82:	f103 0301 	add.w	r3, r3, #1
   dab86:	bf08      	it	eq
   dab88:	2320      	moveq	r3, #32
   dab8a:	4618      	mov	r0, r3
   dab8c:	4770      	bx	lr
   dab8e:	2300      	movs	r3, #0
   dab90:	e7e4      	b.n	dab5c <__hi0bits+0xa>

000dab92 <__lo0bits>:
   dab92:	6803      	ldr	r3, [r0, #0]
   dab94:	f013 0207 	ands.w	r2, r3, #7
   dab98:	4601      	mov	r1, r0
   dab9a:	d00b      	beq.n	dabb4 <__lo0bits+0x22>
   dab9c:	07da      	lsls	r2, r3, #31
   dab9e:	d424      	bmi.n	dabea <__lo0bits+0x58>
   daba0:	0798      	lsls	r0, r3, #30
   daba2:	bf49      	itett	mi
   daba4:	085b      	lsrmi	r3, r3, #1
   daba6:	089b      	lsrpl	r3, r3, #2
   daba8:	2001      	movmi	r0, #1
   dabaa:	600b      	strmi	r3, [r1, #0]
   dabac:	bf5c      	itt	pl
   dabae:	600b      	strpl	r3, [r1, #0]
   dabb0:	2002      	movpl	r0, #2
   dabb2:	4770      	bx	lr
   dabb4:	b298      	uxth	r0, r3
   dabb6:	b9b0      	cbnz	r0, dabe6 <__lo0bits+0x54>
   dabb8:	0c1b      	lsrs	r3, r3, #16
   dabba:	2010      	movs	r0, #16
   dabbc:	f013 0fff 	tst.w	r3, #255	; 0xff
   dabc0:	bf04      	itt	eq
   dabc2:	0a1b      	lsreq	r3, r3, #8
   dabc4:	3008      	addeq	r0, #8
   dabc6:	071a      	lsls	r2, r3, #28
   dabc8:	bf04      	itt	eq
   dabca:	091b      	lsreq	r3, r3, #4
   dabcc:	3004      	addeq	r0, #4
   dabce:	079a      	lsls	r2, r3, #30
   dabd0:	bf04      	itt	eq
   dabd2:	089b      	lsreq	r3, r3, #2
   dabd4:	3002      	addeq	r0, #2
   dabd6:	07da      	lsls	r2, r3, #31
   dabd8:	d403      	bmi.n	dabe2 <__lo0bits+0x50>
   dabda:	085b      	lsrs	r3, r3, #1
   dabdc:	f100 0001 	add.w	r0, r0, #1
   dabe0:	d005      	beq.n	dabee <__lo0bits+0x5c>
   dabe2:	600b      	str	r3, [r1, #0]
   dabe4:	4770      	bx	lr
   dabe6:	4610      	mov	r0, r2
   dabe8:	e7e8      	b.n	dabbc <__lo0bits+0x2a>
   dabea:	2000      	movs	r0, #0
   dabec:	4770      	bx	lr
   dabee:	2020      	movs	r0, #32
   dabf0:	4770      	bx	lr

000dabf2 <__i2b>:
   dabf2:	b510      	push	{r4, lr}
   dabf4:	460c      	mov	r4, r1
   dabf6:	2101      	movs	r1, #1
   dabf8:	f7ff fee4 	bl	da9c4 <_Balloc>
   dabfc:	2201      	movs	r2, #1
   dabfe:	6144      	str	r4, [r0, #20]
   dac00:	6102      	str	r2, [r0, #16]
   dac02:	bd10      	pop	{r4, pc}

000dac04 <__multiply>:
   dac04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dac08:	4615      	mov	r5, r2
   dac0a:	690a      	ldr	r2, [r1, #16]
   dac0c:	692b      	ldr	r3, [r5, #16]
   dac0e:	429a      	cmp	r2, r3
   dac10:	bfb8      	it	lt
   dac12:	460b      	movlt	r3, r1
   dac14:	460c      	mov	r4, r1
   dac16:	bfbc      	itt	lt
   dac18:	462c      	movlt	r4, r5
   dac1a:	461d      	movlt	r5, r3
   dac1c:	6927      	ldr	r7, [r4, #16]
   dac1e:	f8d5 9010 	ldr.w	r9, [r5, #16]
   dac22:	68a3      	ldr	r3, [r4, #8]
   dac24:	6861      	ldr	r1, [r4, #4]
   dac26:	eb07 0609 	add.w	r6, r7, r9
   dac2a:	42b3      	cmp	r3, r6
   dac2c:	bfb8      	it	lt
   dac2e:	3101      	addlt	r1, #1
   dac30:	b085      	sub	sp, #20
   dac32:	f7ff fec7 	bl	da9c4 <_Balloc>
   dac36:	f100 0114 	add.w	r1, r0, #20
   dac3a:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   dac3e:	460b      	mov	r3, r1
   dac40:	2200      	movs	r2, #0
   dac42:	4543      	cmp	r3, r8
   dac44:	d31d      	bcc.n	dac82 <__multiply+0x7e>
   dac46:	f104 0314 	add.w	r3, r4, #20
   dac4a:	f105 0214 	add.w	r2, r5, #20
   dac4e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   dac52:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dac56:	9302      	str	r3, [sp, #8]
   dac58:	1b3b      	subs	r3, r7, r4
   dac5a:	3b15      	subs	r3, #21
   dac5c:	f023 0303 	bic.w	r3, r3, #3
   dac60:	3304      	adds	r3, #4
   dac62:	f104 0515 	add.w	r5, r4, #21
   dac66:	42af      	cmp	r7, r5
   dac68:	bf38      	it	cc
   dac6a:	2304      	movcc	r3, #4
   dac6c:	9301      	str	r3, [sp, #4]
   dac6e:	9b02      	ldr	r3, [sp, #8]
   dac70:	9203      	str	r2, [sp, #12]
   dac72:	4293      	cmp	r3, r2
   dac74:	d808      	bhi.n	dac88 <__multiply+0x84>
   dac76:	2e00      	cmp	r6, #0
   dac78:	dc5a      	bgt.n	dad30 <__multiply+0x12c>
   dac7a:	6106      	str	r6, [r0, #16]
   dac7c:	b005      	add	sp, #20
   dac7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dac82:	f843 2b04 	str.w	r2, [r3], #4
   dac86:	e7dc      	b.n	dac42 <__multiply+0x3e>
   dac88:	f8b2 a000 	ldrh.w	sl, [r2]
   dac8c:	f1ba 0f00 	cmp.w	sl, #0
   dac90:	d024      	beq.n	dacdc <__multiply+0xd8>
   dac92:	f104 0e14 	add.w	lr, r4, #20
   dac96:	4689      	mov	r9, r1
   dac98:	f04f 0c00 	mov.w	ip, #0
   dac9c:	f85e 5b04 	ldr.w	r5, [lr], #4
   daca0:	f8d9 b000 	ldr.w	fp, [r9]
   daca4:	b2ab      	uxth	r3, r5
   daca6:	fa1f fb8b 	uxth.w	fp, fp
   dacaa:	fb0a b303 	mla	r3, sl, r3, fp
   dacae:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   dacb2:	f8d9 5000 	ldr.w	r5, [r9]
   dacb6:	4463      	add	r3, ip
   dacb8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dacbc:	fb0a c50b 	mla	r5, sl, fp, ip
   dacc0:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   dacc4:	b29b      	uxth	r3, r3
   dacc6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   dacca:	4577      	cmp	r7, lr
   daccc:	f849 3b04 	str.w	r3, [r9], #4
   dacd0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dacd4:	d8e2      	bhi.n	dac9c <__multiply+0x98>
   dacd6:	9b01      	ldr	r3, [sp, #4]
   dacd8:	f841 c003 	str.w	ip, [r1, r3]
   dacdc:	9b03      	ldr	r3, [sp, #12]
   dacde:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   dace2:	3204      	adds	r2, #4
   dace4:	f1b9 0f00 	cmp.w	r9, #0
   dace8:	d020      	beq.n	dad2c <__multiply+0x128>
   dacea:	680b      	ldr	r3, [r1, #0]
   dacec:	f104 0c14 	add.w	ip, r4, #20
   dacf0:	468e      	mov	lr, r1
   dacf2:	f04f 0a00 	mov.w	sl, #0
   dacf6:	f8bc 5000 	ldrh.w	r5, [ip]
   dacfa:	f8be b002 	ldrh.w	fp, [lr, #2]
   dacfe:	fb09 b505 	mla	r5, r9, r5, fp
   dad02:	44aa      	add	sl, r5
   dad04:	b29b      	uxth	r3, r3
   dad06:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   dad0a:	f84e 3b04 	str.w	r3, [lr], #4
   dad0e:	f85c 3b04 	ldr.w	r3, [ip], #4
   dad12:	f8be 5000 	ldrh.w	r5, [lr]
   dad16:	0c1b      	lsrs	r3, r3, #16
   dad18:	fb09 5303 	mla	r3, r9, r3, r5
   dad1c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   dad20:	4567      	cmp	r7, ip
   dad22:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   dad26:	d8e6      	bhi.n	dacf6 <__multiply+0xf2>
   dad28:	9d01      	ldr	r5, [sp, #4]
   dad2a:	514b      	str	r3, [r1, r5]
   dad2c:	3104      	adds	r1, #4
   dad2e:	e79e      	b.n	dac6e <__multiply+0x6a>
   dad30:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   dad34:	2b00      	cmp	r3, #0
   dad36:	d1a0      	bne.n	dac7a <__multiply+0x76>
   dad38:	3e01      	subs	r6, #1
   dad3a:	e79c      	b.n	dac76 <__multiply+0x72>

000dad3c <__pow5mult>:
   dad3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dad40:	4615      	mov	r5, r2
   dad42:	f012 0203 	ands.w	r2, r2, #3
   dad46:	4606      	mov	r6, r0
   dad48:	460f      	mov	r7, r1
   dad4a:	d007      	beq.n	dad5c <__pow5mult+0x20>
   dad4c:	4c21      	ldr	r4, [pc, #132]	; (dadd4 <__pow5mult+0x98>)
   dad4e:	3a01      	subs	r2, #1
   dad50:	2300      	movs	r3, #0
   dad52:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   dad56:	f7ff fe80 	bl	daa5a <__multadd>
   dad5a:	4607      	mov	r7, r0
   dad5c:	10ad      	asrs	r5, r5, #2
   dad5e:	d035      	beq.n	dadcc <__pow5mult+0x90>
   dad60:	6a74      	ldr	r4, [r6, #36]	; 0x24
   dad62:	b93c      	cbnz	r4, dad74 <__pow5mult+0x38>
   dad64:	2010      	movs	r0, #16
   dad66:	f7fc f9a1 	bl	d70ac <malloc>
   dad6a:	e9c0 4401 	strd	r4, r4, [r0, #4]
   dad6e:	6270      	str	r0, [r6, #36]	; 0x24
   dad70:	6004      	str	r4, [r0, #0]
   dad72:	60c4      	str	r4, [r0, #12]
   dad74:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   dad78:	f8d8 4008 	ldr.w	r4, [r8, #8]
   dad7c:	b94c      	cbnz	r4, dad92 <__pow5mult+0x56>
   dad7e:	f240 2171 	movw	r1, #625	; 0x271
   dad82:	4630      	mov	r0, r6
   dad84:	f7ff ff35 	bl	dabf2 <__i2b>
   dad88:	2300      	movs	r3, #0
   dad8a:	f8c8 0008 	str.w	r0, [r8, #8]
   dad8e:	4604      	mov	r4, r0
   dad90:	6003      	str	r3, [r0, #0]
   dad92:	f04f 0900 	mov.w	r9, #0
   dad96:	07eb      	lsls	r3, r5, #31
   dad98:	d50a      	bpl.n	dadb0 <__pow5mult+0x74>
   dad9a:	4639      	mov	r1, r7
   dad9c:	4622      	mov	r2, r4
   dad9e:	4630      	mov	r0, r6
   dada0:	f7ff ff30 	bl	dac04 <__multiply>
   dada4:	4639      	mov	r1, r7
   dada6:	4680      	mov	r8, r0
   dada8:	4630      	mov	r0, r6
   dadaa:	f7ff fe3f 	bl	daa2c <_Bfree>
   dadae:	4647      	mov	r7, r8
   dadb0:	106d      	asrs	r5, r5, #1
   dadb2:	d00b      	beq.n	dadcc <__pow5mult+0x90>
   dadb4:	6820      	ldr	r0, [r4, #0]
   dadb6:	b938      	cbnz	r0, dadc8 <__pow5mult+0x8c>
   dadb8:	4622      	mov	r2, r4
   dadba:	4621      	mov	r1, r4
   dadbc:	4630      	mov	r0, r6
   dadbe:	f7ff ff21 	bl	dac04 <__multiply>
   dadc2:	6020      	str	r0, [r4, #0]
   dadc4:	f8c0 9000 	str.w	r9, [r0]
   dadc8:	4604      	mov	r4, r0
   dadca:	e7e4      	b.n	dad96 <__pow5mult+0x5a>
   dadcc:	4638      	mov	r0, r7
   dadce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   dadd2:	bf00      	nop
   dadd4:	000dc160 	.word	0x000dc160

000dadd8 <__lshift>:
   dadd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   daddc:	460c      	mov	r4, r1
   dadde:	6849      	ldr	r1, [r1, #4]
   dade0:	6923      	ldr	r3, [r4, #16]
   dade2:	eb03 1862 	add.w	r8, r3, r2, asr #5
   dade6:	68a3      	ldr	r3, [r4, #8]
   dade8:	4607      	mov	r7, r0
   dadea:	4691      	mov	r9, r2
   dadec:	ea4f 1a62 	mov.w	sl, r2, asr #5
   dadf0:	f108 0601 	add.w	r6, r8, #1
   dadf4:	42b3      	cmp	r3, r6
   dadf6:	db3f      	blt.n	dae78 <__lshift+0xa0>
   dadf8:	4638      	mov	r0, r7
   dadfa:	f7ff fde3 	bl	da9c4 <_Balloc>
   dadfe:	2300      	movs	r3, #0
   dae00:	4605      	mov	r5, r0
   dae02:	f100 0114 	add.w	r1, r0, #20
   dae06:	f100 0210 	add.w	r2, r0, #16
   dae0a:	4618      	mov	r0, r3
   dae0c:	4553      	cmp	r3, sl
   dae0e:	db36      	blt.n	dae7e <__lshift+0xa6>
   dae10:	6920      	ldr	r0, [r4, #16]
   dae12:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   dae16:	f104 0314 	add.w	r3, r4, #20
   dae1a:	f019 091f 	ands.w	r9, r9, #31
   dae1e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   dae22:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   dae26:	d02e      	beq.n	dae86 <__lshift+0xae>
   dae28:	f1c9 0e20 	rsb	lr, r9, #32
   dae2c:	468a      	mov	sl, r1
   dae2e:	2200      	movs	r2, #0
   dae30:	6818      	ldr	r0, [r3, #0]
   dae32:	fa00 f009 	lsl.w	r0, r0, r9
   dae36:	4302      	orrs	r2, r0
   dae38:	f84a 2b04 	str.w	r2, [sl], #4
   dae3c:	f853 2b04 	ldr.w	r2, [r3], #4
   dae40:	459c      	cmp	ip, r3
   dae42:	fa22 f20e 	lsr.w	r2, r2, lr
   dae46:	d8f3      	bhi.n	dae30 <__lshift+0x58>
   dae48:	ebac 0304 	sub.w	r3, ip, r4
   dae4c:	3b15      	subs	r3, #21
   dae4e:	f023 0303 	bic.w	r3, r3, #3
   dae52:	3304      	adds	r3, #4
   dae54:	f104 0015 	add.w	r0, r4, #21
   dae58:	4560      	cmp	r0, ip
   dae5a:	bf88      	it	hi
   dae5c:	2304      	movhi	r3, #4
   dae5e:	50ca      	str	r2, [r1, r3]
   dae60:	b10a      	cbz	r2, dae66 <__lshift+0x8e>
   dae62:	f108 0602 	add.w	r6, r8, #2
   dae66:	3e01      	subs	r6, #1
   dae68:	4638      	mov	r0, r7
   dae6a:	612e      	str	r6, [r5, #16]
   dae6c:	4621      	mov	r1, r4
   dae6e:	f7ff fddd 	bl	daa2c <_Bfree>
   dae72:	4628      	mov	r0, r5
   dae74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   dae78:	3101      	adds	r1, #1
   dae7a:	005b      	lsls	r3, r3, #1
   dae7c:	e7ba      	b.n	dadf4 <__lshift+0x1c>
   dae7e:	f842 0f04 	str.w	r0, [r2, #4]!
   dae82:	3301      	adds	r3, #1
   dae84:	e7c2      	b.n	dae0c <__lshift+0x34>
   dae86:	3904      	subs	r1, #4
   dae88:	f853 2b04 	ldr.w	r2, [r3], #4
   dae8c:	f841 2f04 	str.w	r2, [r1, #4]!
   dae90:	459c      	cmp	ip, r3
   dae92:	d8f9      	bhi.n	dae88 <__lshift+0xb0>
   dae94:	e7e7      	b.n	dae66 <__lshift+0x8e>

000dae96 <__mcmp>:
   dae96:	b530      	push	{r4, r5, lr}
   dae98:	6902      	ldr	r2, [r0, #16]
   dae9a:	690c      	ldr	r4, [r1, #16]
   dae9c:	1b12      	subs	r2, r2, r4
   dae9e:	d10e      	bne.n	daebe <__mcmp+0x28>
   daea0:	f100 0314 	add.w	r3, r0, #20
   daea4:	3114      	adds	r1, #20
   daea6:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   daeaa:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   daeae:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   daeb2:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   daeb6:	42a5      	cmp	r5, r4
   daeb8:	d003      	beq.n	daec2 <__mcmp+0x2c>
   daeba:	d305      	bcc.n	daec8 <__mcmp+0x32>
   daebc:	2201      	movs	r2, #1
   daebe:	4610      	mov	r0, r2
   daec0:	bd30      	pop	{r4, r5, pc}
   daec2:	4283      	cmp	r3, r0
   daec4:	d3f3      	bcc.n	daeae <__mcmp+0x18>
   daec6:	e7fa      	b.n	daebe <__mcmp+0x28>
   daec8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   daecc:	e7f7      	b.n	daebe <__mcmp+0x28>

000daece <__mdiff>:
   daece:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   daed2:	460c      	mov	r4, r1
   daed4:	4606      	mov	r6, r0
   daed6:	4611      	mov	r1, r2
   daed8:	4620      	mov	r0, r4
   daeda:	4617      	mov	r7, r2
   daedc:	f7ff ffdb 	bl	dae96 <__mcmp>
   daee0:	1e05      	subs	r5, r0, #0
   daee2:	d108      	bne.n	daef6 <__mdiff+0x28>
   daee4:	4629      	mov	r1, r5
   daee6:	4630      	mov	r0, r6
   daee8:	f7ff fd6c 	bl	da9c4 <_Balloc>
   daeec:	2301      	movs	r3, #1
   daeee:	e9c0 3504 	strd	r3, r5, [r0, #16]
   daef2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   daef6:	bfa4      	itt	ge
   daef8:	463b      	movge	r3, r7
   daefa:	4627      	movge	r7, r4
   daefc:	4630      	mov	r0, r6
   daefe:	6879      	ldr	r1, [r7, #4]
   daf00:	bfa6      	itte	ge
   daf02:	461c      	movge	r4, r3
   daf04:	2500      	movge	r5, #0
   daf06:	2501      	movlt	r5, #1
   daf08:	f7ff fd5c 	bl	da9c4 <_Balloc>
   daf0c:	693e      	ldr	r6, [r7, #16]
   daf0e:	60c5      	str	r5, [r0, #12]
   daf10:	6925      	ldr	r5, [r4, #16]
   daf12:	f107 0114 	add.w	r1, r7, #20
   daf16:	f104 0914 	add.w	r9, r4, #20
   daf1a:	f100 0e14 	add.w	lr, r0, #20
   daf1e:	f107 0210 	add.w	r2, r7, #16
   daf22:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   daf26:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   daf2a:	46f2      	mov	sl, lr
   daf2c:	2700      	movs	r7, #0
   daf2e:	f859 3b04 	ldr.w	r3, [r9], #4
   daf32:	f852 bf04 	ldr.w	fp, [r2, #4]!
   daf36:	fa1f f883 	uxth.w	r8, r3
   daf3a:	fa17 f78b 	uxtah	r7, r7, fp
   daf3e:	0c1b      	lsrs	r3, r3, #16
   daf40:	eba7 0808 	sub.w	r8, r7, r8
   daf44:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   daf48:	eb03 4328 	add.w	r3, r3, r8, asr #16
   daf4c:	fa1f f888 	uxth.w	r8, r8
   daf50:	141f      	asrs	r7, r3, #16
   daf52:	454d      	cmp	r5, r9
   daf54:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   daf58:	f84a 3b04 	str.w	r3, [sl], #4
   daf5c:	d8e7      	bhi.n	daf2e <__mdiff+0x60>
   daf5e:	1b2b      	subs	r3, r5, r4
   daf60:	3b15      	subs	r3, #21
   daf62:	f023 0303 	bic.w	r3, r3, #3
   daf66:	3304      	adds	r3, #4
   daf68:	3415      	adds	r4, #21
   daf6a:	42a5      	cmp	r5, r4
   daf6c:	bf38      	it	cc
   daf6e:	2304      	movcc	r3, #4
   daf70:	4419      	add	r1, r3
   daf72:	4473      	add	r3, lr
   daf74:	469e      	mov	lr, r3
   daf76:	460d      	mov	r5, r1
   daf78:	4565      	cmp	r5, ip
   daf7a:	d30e      	bcc.n	daf9a <__mdiff+0xcc>
   daf7c:	f10c 0203 	add.w	r2, ip, #3
   daf80:	1a52      	subs	r2, r2, r1
   daf82:	f022 0203 	bic.w	r2, r2, #3
   daf86:	3903      	subs	r1, #3
   daf88:	458c      	cmp	ip, r1
   daf8a:	bf38      	it	cc
   daf8c:	2200      	movcc	r2, #0
   daf8e:	441a      	add	r2, r3
   daf90:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   daf94:	b17b      	cbz	r3, dafb6 <__mdiff+0xe8>
   daf96:	6106      	str	r6, [r0, #16]
   daf98:	e7ab      	b.n	daef2 <__mdiff+0x24>
   daf9a:	f855 8b04 	ldr.w	r8, [r5], #4
   daf9e:	fa17 f488 	uxtah	r4, r7, r8
   dafa2:	1422      	asrs	r2, r4, #16
   dafa4:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   dafa8:	b2a4      	uxth	r4, r4
   dafaa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   dafae:	f84e 4b04 	str.w	r4, [lr], #4
   dafb2:	1417      	asrs	r7, r2, #16
   dafb4:	e7e0      	b.n	daf78 <__mdiff+0xaa>
   dafb6:	3e01      	subs	r6, #1
   dafb8:	e7ea      	b.n	daf90 <__mdiff+0xc2>
	...

000dafbc <__ulp>:
   dafbc:	b082      	sub	sp, #8
   dafbe:	ed8d 0b00 	vstr	d0, [sp]
   dafc2:	9b01      	ldr	r3, [sp, #4]
   dafc4:	4912      	ldr	r1, [pc, #72]	; (db010 <__ulp+0x54>)
   dafc6:	4019      	ands	r1, r3
   dafc8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   dafcc:	2900      	cmp	r1, #0
   dafce:	dd05      	ble.n	dafdc <__ulp+0x20>
   dafd0:	2200      	movs	r2, #0
   dafd2:	460b      	mov	r3, r1
   dafd4:	ec43 2b10 	vmov	d0, r2, r3
   dafd8:	b002      	add	sp, #8
   dafda:	4770      	bx	lr
   dafdc:	4249      	negs	r1, r1
   dafde:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   dafe2:	ea4f 5021 	mov.w	r0, r1, asr #20
   dafe6:	f04f 0200 	mov.w	r2, #0
   dafea:	f04f 0300 	mov.w	r3, #0
   dafee:	da04      	bge.n	daffa <__ulp+0x3e>
   daff0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   daff4:	fa41 f300 	asr.w	r3, r1, r0
   daff8:	e7ec      	b.n	dafd4 <__ulp+0x18>
   daffa:	f1a0 0114 	sub.w	r1, r0, #20
   daffe:	291e      	cmp	r1, #30
   db000:	bfda      	itte	le
   db002:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   db006:	fa20 f101 	lsrle.w	r1, r0, r1
   db00a:	2101      	movgt	r1, #1
   db00c:	460a      	mov	r2, r1
   db00e:	e7e1      	b.n	dafd4 <__ulp+0x18>
   db010:	7ff00000 	.word	0x7ff00000

000db014 <__b2d>:
   db014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db016:	6905      	ldr	r5, [r0, #16]
   db018:	f100 0714 	add.w	r7, r0, #20
   db01c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   db020:	1f2e      	subs	r6, r5, #4
   db022:	f855 4c04 	ldr.w	r4, [r5, #-4]
   db026:	4620      	mov	r0, r4
   db028:	f7ff fd93 	bl	dab52 <__hi0bits>
   db02c:	f1c0 0320 	rsb	r3, r0, #32
   db030:	280a      	cmp	r0, #10
   db032:	f8df c07c 	ldr.w	ip, [pc, #124]	; db0b0 <__b2d+0x9c>
   db036:	600b      	str	r3, [r1, #0]
   db038:	dc14      	bgt.n	db064 <__b2d+0x50>
   db03a:	f1c0 0e0b 	rsb	lr, r0, #11
   db03e:	fa24 f10e 	lsr.w	r1, r4, lr
   db042:	42b7      	cmp	r7, r6
   db044:	ea41 030c 	orr.w	r3, r1, ip
   db048:	bf34      	ite	cc
   db04a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db04e:	2100      	movcs	r1, #0
   db050:	3015      	adds	r0, #21
   db052:	fa04 f000 	lsl.w	r0, r4, r0
   db056:	fa21 f10e 	lsr.w	r1, r1, lr
   db05a:	ea40 0201 	orr.w	r2, r0, r1
   db05e:	ec43 2b10 	vmov	d0, r2, r3
   db062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   db064:	42b7      	cmp	r7, r6
   db066:	bf3a      	itte	cc
   db068:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db06c:	f1a5 0608 	subcc.w	r6, r5, #8
   db070:	2100      	movcs	r1, #0
   db072:	380b      	subs	r0, #11
   db074:	d017      	beq.n	db0a6 <__b2d+0x92>
   db076:	f1c0 0c20 	rsb	ip, r0, #32
   db07a:	fa04 f500 	lsl.w	r5, r4, r0
   db07e:	42be      	cmp	r6, r7
   db080:	fa21 f40c 	lsr.w	r4, r1, ip
   db084:	ea45 0504 	orr.w	r5, r5, r4
   db088:	bf8c      	ite	hi
   db08a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   db08e:	2400      	movls	r4, #0
   db090:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   db094:	fa01 f000 	lsl.w	r0, r1, r0
   db098:	fa24 f40c 	lsr.w	r4, r4, ip
   db09c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   db0a0:	ea40 0204 	orr.w	r2, r0, r4
   db0a4:	e7db      	b.n	db05e <__b2d+0x4a>
   db0a6:	ea44 030c 	orr.w	r3, r4, ip
   db0aa:	460a      	mov	r2, r1
   db0ac:	e7d7      	b.n	db05e <__b2d+0x4a>
   db0ae:	bf00      	nop
   db0b0:	3ff00000 	.word	0x3ff00000

000db0b4 <__d2b>:
   db0b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db0b8:	4689      	mov	r9, r1
   db0ba:	2101      	movs	r1, #1
   db0bc:	ec57 6b10 	vmov	r6, r7, d0
   db0c0:	4690      	mov	r8, r2
   db0c2:	f7ff fc7f 	bl	da9c4 <_Balloc>
   db0c6:	f3c7 550a 	ubfx	r5, r7, #20, #11
   db0ca:	4604      	mov	r4, r0
   db0cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
   db0d0:	bb35      	cbnz	r5, db120 <__d2b+0x6c>
   db0d2:	2e00      	cmp	r6, #0
   db0d4:	9301      	str	r3, [sp, #4]
   db0d6:	d028      	beq.n	db12a <__d2b+0x76>
   db0d8:	4668      	mov	r0, sp
   db0da:	9600      	str	r6, [sp, #0]
   db0dc:	f7ff fd59 	bl	dab92 <__lo0bits>
   db0e0:	9900      	ldr	r1, [sp, #0]
   db0e2:	b300      	cbz	r0, db126 <__d2b+0x72>
   db0e4:	9a01      	ldr	r2, [sp, #4]
   db0e6:	f1c0 0320 	rsb	r3, r0, #32
   db0ea:	fa02 f303 	lsl.w	r3, r2, r3
   db0ee:	430b      	orrs	r3, r1
   db0f0:	40c2      	lsrs	r2, r0
   db0f2:	6163      	str	r3, [r4, #20]
   db0f4:	9201      	str	r2, [sp, #4]
   db0f6:	9b01      	ldr	r3, [sp, #4]
   db0f8:	61a3      	str	r3, [r4, #24]
   db0fa:	2b00      	cmp	r3, #0
   db0fc:	bf14      	ite	ne
   db0fe:	2202      	movne	r2, #2
   db100:	2201      	moveq	r2, #1
   db102:	6122      	str	r2, [r4, #16]
   db104:	b1d5      	cbz	r5, db13c <__d2b+0x88>
   db106:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   db10a:	4405      	add	r5, r0
   db10c:	f8c9 5000 	str.w	r5, [r9]
   db110:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   db114:	f8c8 0000 	str.w	r0, [r8]
   db118:	4620      	mov	r0, r4
   db11a:	b003      	add	sp, #12
   db11c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db120:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db124:	e7d5      	b.n	db0d2 <__d2b+0x1e>
   db126:	6161      	str	r1, [r4, #20]
   db128:	e7e5      	b.n	db0f6 <__d2b+0x42>
   db12a:	a801      	add	r0, sp, #4
   db12c:	f7ff fd31 	bl	dab92 <__lo0bits>
   db130:	9b01      	ldr	r3, [sp, #4]
   db132:	6163      	str	r3, [r4, #20]
   db134:	2201      	movs	r2, #1
   db136:	6122      	str	r2, [r4, #16]
   db138:	3020      	adds	r0, #32
   db13a:	e7e3      	b.n	db104 <__d2b+0x50>
   db13c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   db140:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   db144:	f8c9 0000 	str.w	r0, [r9]
   db148:	6918      	ldr	r0, [r3, #16]
   db14a:	f7ff fd02 	bl	dab52 <__hi0bits>
   db14e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   db152:	e7df      	b.n	db114 <__d2b+0x60>

000db154 <__ratio>:
   db154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db158:	4688      	mov	r8, r1
   db15a:	4669      	mov	r1, sp
   db15c:	4681      	mov	r9, r0
   db15e:	f7ff ff59 	bl	db014 <__b2d>
   db162:	a901      	add	r1, sp, #4
   db164:	4640      	mov	r0, r8
   db166:	ec55 4b10 	vmov	r4, r5, d0
   db16a:	f7ff ff53 	bl	db014 <__b2d>
   db16e:	f8d9 3010 	ldr.w	r3, [r9, #16]
   db172:	f8d8 2010 	ldr.w	r2, [r8, #16]
   db176:	eba3 0c02 	sub.w	ip, r3, r2
   db17a:	e9dd 3200 	ldrd	r3, r2, [sp]
   db17e:	1a9b      	subs	r3, r3, r2
   db180:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   db184:	ec51 0b10 	vmov	r0, r1, d0
   db188:	2b00      	cmp	r3, #0
   db18a:	bfd6      	itet	le
   db18c:	460a      	movle	r2, r1
   db18e:	462a      	movgt	r2, r5
   db190:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   db194:	468b      	mov	fp, r1
   db196:	462f      	mov	r7, r5
   db198:	bfd4      	ite	le
   db19a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   db19e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   db1a2:	4620      	mov	r0, r4
   db1a4:	ee10 2a10 	vmov	r2, s0
   db1a8:	465b      	mov	r3, fp
   db1aa:	4639      	mov	r1, r7
   db1ac:	f7fd fed0 	bl	d8f50 <__aeabi_ddiv>
   db1b0:	ec41 0b10 	vmov	d0, r0, r1
   db1b4:	b003      	add	sp, #12
   db1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000db1ba <__copybits>:
   db1ba:	3901      	subs	r1, #1
   db1bc:	b570      	push	{r4, r5, r6, lr}
   db1be:	1149      	asrs	r1, r1, #5
   db1c0:	6914      	ldr	r4, [r2, #16]
   db1c2:	3101      	adds	r1, #1
   db1c4:	f102 0314 	add.w	r3, r2, #20
   db1c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   db1cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   db1d0:	1f05      	subs	r5, r0, #4
   db1d2:	42a3      	cmp	r3, r4
   db1d4:	d30c      	bcc.n	db1f0 <__copybits+0x36>
   db1d6:	1aa3      	subs	r3, r4, r2
   db1d8:	3b11      	subs	r3, #17
   db1da:	f023 0303 	bic.w	r3, r3, #3
   db1de:	3211      	adds	r2, #17
   db1e0:	42a2      	cmp	r2, r4
   db1e2:	bf88      	it	hi
   db1e4:	2300      	movhi	r3, #0
   db1e6:	4418      	add	r0, r3
   db1e8:	2300      	movs	r3, #0
   db1ea:	4288      	cmp	r0, r1
   db1ec:	d305      	bcc.n	db1fa <__copybits+0x40>
   db1ee:	bd70      	pop	{r4, r5, r6, pc}
   db1f0:	f853 6b04 	ldr.w	r6, [r3], #4
   db1f4:	f845 6f04 	str.w	r6, [r5, #4]!
   db1f8:	e7eb      	b.n	db1d2 <__copybits+0x18>
   db1fa:	f840 3b04 	str.w	r3, [r0], #4
   db1fe:	e7f4      	b.n	db1ea <__copybits+0x30>

000db200 <__any_on>:
   db200:	f100 0214 	add.w	r2, r0, #20
   db204:	6900      	ldr	r0, [r0, #16]
   db206:	114b      	asrs	r3, r1, #5
   db208:	4298      	cmp	r0, r3
   db20a:	b510      	push	{r4, lr}
   db20c:	db11      	blt.n	db232 <__any_on+0x32>
   db20e:	dd0a      	ble.n	db226 <__any_on+0x26>
   db210:	f011 011f 	ands.w	r1, r1, #31
   db214:	d007      	beq.n	db226 <__any_on+0x26>
   db216:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   db21a:	fa24 f001 	lsr.w	r0, r4, r1
   db21e:	fa00 f101 	lsl.w	r1, r0, r1
   db222:	428c      	cmp	r4, r1
   db224:	d10b      	bne.n	db23e <__any_on+0x3e>
   db226:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   db22a:	4293      	cmp	r3, r2
   db22c:	d803      	bhi.n	db236 <__any_on+0x36>
   db22e:	2000      	movs	r0, #0
   db230:	bd10      	pop	{r4, pc}
   db232:	4603      	mov	r3, r0
   db234:	e7f7      	b.n	db226 <__any_on+0x26>
   db236:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   db23a:	2900      	cmp	r1, #0
   db23c:	d0f5      	beq.n	db22a <__any_on+0x2a>
   db23e:	2001      	movs	r0, #1
   db240:	e7f6      	b.n	db230 <__any_on+0x30>

000db242 <_calloc_r>:
   db242:	b513      	push	{r0, r1, r4, lr}
   db244:	434a      	muls	r2, r1
   db246:	4611      	mov	r1, r2
   db248:	9201      	str	r2, [sp, #4]
   db24a:	f7fb ff5f 	bl	d710c <_malloc_r>
   db24e:	4604      	mov	r4, r0
   db250:	b118      	cbz	r0, db25a <_calloc_r+0x18>
   db252:	9a01      	ldr	r2, [sp, #4]
   db254:	2100      	movs	r1, #0
   db256:	f7fe f905 	bl	d9464 <memset>
   db25a:	4620      	mov	r0, r4
   db25c:	b002      	add	sp, #8
   db25e:	bd10      	pop	{r4, pc}

000db260 <nan>:
   db260:	ed9f 0b01 	vldr	d0, [pc, #4]	; db268 <nan+0x8>
   db264:	4770      	bx	lr
   db266:	bf00      	nop
   db268:	00000000 	.word	0x00000000
   db26c:	7ff80000 	.word	0x7ff80000

000db270 <__ascii_wctomb>:
   db270:	b149      	cbz	r1, db286 <__ascii_wctomb+0x16>
   db272:	2aff      	cmp	r2, #255	; 0xff
   db274:	bf85      	ittet	hi
   db276:	238a      	movhi	r3, #138	; 0x8a
   db278:	6003      	strhi	r3, [r0, #0]
   db27a:	700a      	strbls	r2, [r1, #0]
   db27c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   db280:	bf98      	it	ls
   db282:	2001      	movls	r0, #1
   db284:	4770      	bx	lr
   db286:	4608      	mov	r0, r1
   db288:	4770      	bx	lr
	...

000db28c <__aeabi_d2lz>:
   db28c:	b538      	push	{r3, r4, r5, lr}
   db28e:	2200      	movs	r2, #0
   db290:	2300      	movs	r3, #0
   db292:	4604      	mov	r4, r0
   db294:	460d      	mov	r5, r1
   db296:	f7fd ffa3 	bl	d91e0 <__aeabi_dcmplt>
   db29a:	b928      	cbnz	r0, db2a8 <__aeabi_d2lz+0x1c>
   db29c:	4620      	mov	r0, r4
   db29e:	4629      	mov	r1, r5
   db2a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db2a4:	f7fe b84a 	b.w	d933c <__aeabi_d2ulz>
   db2a8:	4620      	mov	r0, r4
   db2aa:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   db2ae:	f7fe f845 	bl	d933c <__aeabi_d2ulz>
   db2b2:	4240      	negs	r0, r0
   db2b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db2b8:	bd38      	pop	{r3, r4, r5, pc}
   db2ba:	bf00      	nop

000db2bc <dynalib_user>:
   db2bc:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   db2cc:	0000 0000 6e55 6e6b 776f 006e 6f4e 2074     ....Unknown.Not 
   db2dc:	6843 7261 6967 676e 4300 6168 6772 6465     Charging.Charged
   db2ec:	4400 7369 6863 7261 6967 676e 4600 7561     .Discharging.Fau
   db2fc:	746c 4400 6369 6e6f 656e 7463 6465 3100     lt.Diconnected.1
   db30c:	4500 616e 6c62 6465 5320 6e65 6f73 2072     .Enabled Sensor 
   db31c:	6e4f 0065 6e45 6261 656c 2064 6553 736e     One.Enabled Sens
   db32c:	726f 5420 6f77 4500 616e 6c62 6465 5320     or Two.Enabled S
   db33c:	6e65 6f73 2072 6854 6572 0065 6e45 6261     ensor Three.Enab
   db34c:	656c 2064 6553 736e 726f 4620 756f 0072     led Sensor Four.
   db35c:	6e45 6261 656c 2064 6553 736e 726f 4620     Enabled Sensor F
   db36c:	7669 0065 6e45 6261 656c 2064 6553 736e     ive.Enabled Sens
   db37c:	726f 5320 7869 4400 7369 6261 656c 2064     or Six.Disabled 
   db38c:	6553 736e 726f 4f20 656e 4400 7369 6261     Sensor One.Disab
   db39c:	656c 2064 6553 736e 726f 5420 6f77 4400     led Sensor Two.D
   db3ac:	7369 6261 656c 2064 6553 736e 726f 5420     isabled Sensor T
   db3bc:	7268 6565 4400 7369 6261 656c 2064 6553     hree.Disabled Se
   db3cc:	736e 726f 4620 756f 0072 6944 6173 6c62     nsor Four.Disabl
   db3dc:	6465 5320 6e65 6f73 2072 6946 6576 4400     ed Sensor Five.D
   db3ec:	7369 6261 656c 2064 6553 736e 726f 5320     isabled Sensor S
   db3fc:	7869 2a00 4e00 206f 6144 6174 5200 7365     ix.*.No Data.Res
   db40c:	6f70 736e 2065 6552 6563 7669 6465 5500     ponse Received.U
   db41c:	6b6e 6f6e 6e77 7220 7365 6f70 736e 2065     nknown response 
   db42c:	6572 6563 6976 6465 2520 0069 6255 6469     recevied %i.Ubid
   db43c:	746f 2073 6f48 6b6f 5300 7465 7420 206f     ots Hook.Set to 
   db44c:	7233 2064 6150 7472 2079 6953 006d 0030     3rd Party Sim.0.
   db45c:	6553 2074 6f74 5020 7261 6974 6c63 2065     Set to Particle 
   db46c:	6953 006d 654b 7065 4120 696c 6576 7320     Sim.Keep Alive s
   db47c:	7465 7420 206f 6925 7320 6365 4b00 6565     et to %i sec.Kee
   db48c:	2070 6c41 7669 0065 6552 6f70 7472 6e69     p Alive.Reportin
   db49c:	2067 6954 656d 5320 7465 7420 206f 7325     g Time Set to %s
   db4ac:	4d20 6e69 7475 7365 002e 6553 2074 6556      Minutes..Set Ve
   db4bc:	6272 736f 2065 6f4d 6564 4300 656c 7261     rbose Mode.Clear
   db4cc:	6465 5620 7265 6f62 6573 4d20 646f 0065     ed Verbose Mode.
   db4dc:	704f 7265 7461 6f69 206e 6f4d 6564 2520     Operation Mode %
   db4ec:	0069 6f4c 6461 6e69 2067 7953 7473 6d65     i.Loading System
   db4fc:	4420 6665 7561 746c 0073 6550 7474 6465      Defaults.Petted
   db50c:	5700 7461 6863 6f64 0067 227b 6573 736e     .Watchdog.{"sens
   db51c:	726f 6e4f 2265 253a 2e34 6631 202c 7322     orOne":%4.1f, "s
   db52c:	6e65 6f73 5472 6f77 3a22 3425 312e 2c66     ensorTwo":%4.1f,
   db53c:	2020 7322 6e65 6f73 5472 7268 6565 3a22       "sensorThree":
   db54c:	3425 312e 2c66 2020 7322 6e65 6f73 4672     %4.1f,  "sensorF
   db55c:	756f 2272 253a 2e34 6631 202c 2220 6573     our":%4.1f,  "se
   db56c:	736e 726f 6946 6576 3a22 3425 312e 2c66     nsorFive":%4.1f,
   db57c:	7322 6e65 6f73 5372 7869 3a22 3425 312e     "sensorSix":%4.1
   db58c:	2c66 4d22 646f 2265 313a 007d 227b 6553     f,"Mode":1}.{"Se
   db59c:	736e 726f 6e4f 5265 3a22 3425 312e 2c66     nsorOneR":%4.1f,
   db5ac:	2220 6553 736e 726f 6e4f 5365 3a22 3425      "SensorOneS":%4
   db5bc:	312e 2c66 2020 5322 6e65 6f73 4f72 656e     .1f,  "SensorOne
   db5cc:	2254 253a 2e34 6631 202c 2220 6573 736e     T":%4.1f,  "sens
   db5dc:	726f 7754 526f 3a22 3425 312e 2c66 2020     orTwoR":%4.1f,  
   db5ec:	7322 6e65 6f73 5472 6f77 2253 253a 2e34     "sensorTwoS":%4.
   db5fc:	6631 222c 6573 736e 726f 7754 546f 3a22     1f,"sensorTwoT":
   db60c:	3425 312e 2c66 4d22 646f 2265 323a 007d     %4.1f,"Mode":2}.
   db61c:	227b 6553 736e 726f 6e4f 5265 3a22 3425     {"SensorOneR":%4
   db62c:	312e 2c66 2220 6553 736e 726f 6e4f 5365     .1f, "SensorOneS
   db63c:	3a22 3425 312e 2c66 2020 5322 6e65 6f73     ":%4.1f,  "Senso
   db64c:	4f72 656e 2254 253a 2e34 6631 202c 2220     rOneT":%4.1f,  "
   db65c:	6573 736e 726f 6f46 7275 3a22 3425 312e     sensorFour":%4.1
   db66c:	2c66 2020 7322 6e65 6f73 4672 7669 2265     f,  "sensorFive"
   db67c:	253a 2e34 6631 222c 6573 736e 726f 6953     :%4.1f,"sensorSi
   db68c:	2278 253a 2e34 6631 222c 6f4d 6564 3a22     x":%4.1f,"Mode":
   db69c:	7d33 7b00 5322 6e65 6f73 4f72 656e 2252     3}.{"SensorOneR"
   db6ac:	253a 2e34 6631 202c 5322 6e65 6f73 4f72     :%4.1f, "SensorO
   db6bc:	656e 2253 253a 2e34 6631 202c 2220 6553     neS":%4.1f,  "Se
   db6cc:	736e 726f 6e4f 5465 3a22 3425 312e 2c66     nsorOneT":%4.1f,
   db6dc:	2020 5322 6e65 6f73 4f72 656e 224e 253a       "SensorOneN":%
   db6ec:	2e34 6631 202c 2220 6573 736e 726f 6946     4.1f,  "sensorFi
   db6fc:	6576 3a22 3425 312e 2c66 7322 6e65 6f73     ve":%4.1f,"senso
   db70c:	5372 7869 3a22 3425 312e 2c66 4d22 646f     rSix":%4.1f,"Mod
   db71c:	2265 343a 007d 6f70 6577 6d72 6e6f 7469     e":4}.powermonit
   db72c:	726f 6e69 5f67 6f68 6b6f 4600 6f72 206d     oring_hook.From 
   db73c:	7325 7420 206f 7325 5300 6174 6574 5420     %s to %s.State T
   db74c:	6172 736e 7469 6f69 006e 5443 4f20 656e     ransition.CT One
   db75c:	203a 3325 312e 0066 5443 5420 6f77 2520     : %3.1f.CT Two %
   db76c:	2e33 6631 4300 2054 6854 6572 3a65 2520     3.1f.CT Three: %
   db77c:	2e33 6631 5300 6e65 6f73 2072 6f46 7275     3.1f.Sensor Four
   db78c:	4320 6e6f 7473 6e61 2074 203a 3325 312e      Constant : %3.1
   db79c:	0066 6553 736e 726f 4620 7669 2065 6f43     f.Sensor Five Co
   db7ac:	736e 6174 746e 3a20 2520 2e33 6631 5300     nstant : %3.1f.S
   db7bc:	6e65 6f73 2072 6953 2078 6f43 736e 6174     ensor Six Consta
   db7cc:	746e 3a20 2520 2e33 6631 4300 6e6f 7473     nt : %3.1f.Const
   db7dc:	6e61 2074 6e4f 2065 6156 756c 2065 6573     ant One Value se
   db7ec:	2074 6f74 0020 6f43 736e 6174 746e 5420     t to .Constant T
   db7fc:	6f77 5620 6c61 6575 7320 7465 7420 206f     wo Value set to 
   db80c:	4300 6e6f 7473 6e61 2074 6854 6572 2065     .Constant Three 
   db81c:	6156 756c 2065 6573 2074 6f74 0020 6f43     Value set to .Co
   db82c:	736e 6174 746e 4620 756f 2072 6156 756c     nstant Four Valu
   db83c:	2065 6573 2074 6f74 0020 6f43 736e 6174     e set to .Consta
   db84c:	746e 4620 7669 2065 6156 756c 2065 6573     nt Five Value se
   db85c:	2074 6f74 0020 6f43 736e 6174 746e 5320     t to .Constant S
   db86c:	7869 5620 6c61 6575 7320 7465 7420 206f     ix Value set to 
   db87c:	7300 6170 6b72 642f 7665 6369 2f65 6573     .spark/device/se
   db88c:	7373 6f69 2f6e 6e65 0064 7245 6f72 2072     ssion/end.Error 
   db89c:	7453 7461 2065 202d 6552 6573 0074 7453     State - Reset.St
   db8ac:	7461 0065 682f 6f6f 2d6b 6572 7073 6e6f     ate./hook-respon
   db8bc:	6573 702f 776f 7265 6f6d 696e 6f74 6972     se/powermonitori
   db8cc:	676e 685f 6f6f 2f6b 5200 6c65 6165 6573     ng_hook/.Release
   db8dc:	4200 7461 6574 7972 4200 7461 6574 7972     .Battery.Battery
   db8ec:	6f43 746e 7865 0074 654b 7065 4120 696c     Context.Keep Ali
   db8fc:	6576 5320 6365 5200 7065 726f 6974 676e     ve Sec.Reporting
   db90c:	4420 7275 7461 6f69 006e 704f 7265 7461      Duration.Operat
   db91c:	6f69 206e 6f4d 6564 4d00 6165 7573 6572     ion Mode.Measure
   db92c:	4e2d 776f 5600 7265 6f62 6573 4d2d 646f     -Now.Verbose-Mod
   db93c:	0065 6553 2074 6f43 736e 6174 746e 4f20     e.Set Constant O
   db94c:	656e 5300 7465 4320 6e6f 7473 6e61 2074     ne.Set Constant 
   db95c:	7754 006f 6553 2074 6f43 736e 6174 746e     Two.Set Constant
   db96c:	5420 7268 6565 5300 7465 4320 6e6f 7473      Three.Set Const
   db97c:	6e61 2074 6f46 7275 5300 7465 4320 6e6f     ant Four.Set Con
   db98c:	7473 6e61 2074 6946 6576 5300 7465 4320     stant Five.Set C
   db99c:	6e6f 7473 6e61 2074 6953 0078 6e45 6261     onstant Six.Enab
   db9ac:	656c 5320 6e65 6f73 0072 6944 6173 6c62     le Sensor.Disabl
   db9bc:	2065 6553 736e 726f 4f00 6570 6172 6974     e Sensor.Operati
   db9cc:	676e 4d20 646f 0065 6552 6f70 7472 6e69     ng Mode.Reportin
   db9dc:	2067 7544 6172 6974 6e6f 4d28 4e49 5455     g Duration(MINUT
   db9ec:	5345 0029 7453 7261 7574 0070               ES).Startup.

000db9f8 <_ZTV5Timer>:
	...
   dba00:	433d 000d 4391 000d 4231 000d               =C...C..1B..

000dba0c <_ZTV17PublishQueueAsync>:
	...
   dba14:	423d 000d 4251 000d 650d 000d 6699 000d     =B..QB...e...f..
   dba24:	6659 000d 6637 000d 67df 000d 667f 000d     Yf..7f...g...f..

000dba34 <_ZTV8MB85RC64>:
	...
   dba3c:	4265 000d 4279 000d 5b05 000d 5b9b 000d     eB..yB...[...[..
   dba4c:	5c1d 000d b2d0 000d b2d8 000d b2dc 000d     .\..............
   dba5c:	b2e5 000d b2ed 000d b2f9 000d b2ff 000d     ................
   dba6c:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   dba7c:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000dbaac <_ZL13releaseNumber>:
   dbaac:	2e31 3031 0000 0000                         1.10....

000dbab4 <_ZL17FRAMversionNumber>:
   dbab4:	000c 0000 7277 7469 4465 7461 2061 6166     ....writeData fa
   dbac4:	6c69 6465 6420 7275 6e69 2067 7265 7361     iled during eras
   dbad4:	2065 7266 6d61 6441 7264 253d 0075 0000     e framAddr=%u...

000dbae4 <_ZTV6MB85RC>:
	...
   dbaec:	5a25 000d 5a27 000d 5b05 000d 5b9b 000d     %Z..'Z...[...[..
   dbafc:	5c1d 000d 6564 6976 6563 6552 6461 6620     .\..deviceRead f
   dbb0c:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   dbb1c:	2074 6954 656d 6620 6f72 206d 5452 2043     t Time from RTC 
   dbb2c:	7325 6400 7665 6369 5765 6972 6574 6620     %s.deviceWrite f
   dbb3c:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   dbb4c:	2074 5452 2043 7266 6d6f 6320 6f6c 6475     t RTC from cloud
   dbb5c:	2520 0073 6c63 756f 2064 6974 656d 6e20      %s.cloud time n
   dbb6c:	746f 7620 6c61 6469 6400 7665 6369 5765     ot valid.deviceW
   dbb7c:	6972 6574 4545 5250 4d4f 6620 6961 656c     riteEEPROM faile
   dbb8c:	2064 7473 7461 253d 0064 7061 2e70 7472     d stat=%d.app.rt
   dbb9c:	0063 0000                                   c...

000dbba0 <_ZTV12MCP79410SRAM>:
	...
   dbba8:	5cdd 000d 5cf3 000d 5ccd 000d 5cd1 000d     .\...\...\...\..
   dbbb8:	5d1d 000d 6005 000d 6225 000d               .]...`..%b..

000dbbc4 <_ZTV12MCP79410Time>:
	...
   dbbcc:	5ce1 000d 5ce5 000d                         .\...\..

000dbbd4 <_ZTV14MCP79410EEPROM>:
	...
   dbbdc:	5cdf 000d 5d01 000d 5cd5 000d 5cd9 000d     .\...]...\...\..
   dbbec:	5d1d 000d 603f 000d 6465 000d               .]..?`..ed..

000dbbf8 <_ZTV8MCP79410>:
	...
   dbc00:	5ce3 000d 5d0f 000d 7550 6c62 7369 5168     .\...]..PublishQ
   dbc10:	6575 6575 7341 6e79 0063 7571 7565 6965     ueueAsync.queuei
   dbc20:	676e 6520 6576 746e 614e 656d 253d 2073     ng eventName=%s 
   dbc30:	6164 6174 253d 2073 7474 3d6c 6425 6620     data=%s ttl=%d f
   dbc40:	616c 7367 3d31 6425 6620 616c 7367 3d32     lags1=%d flags2=
   dbc50:	6425 7320 7a69 3d65 6425 7000 6275 696c     %d size=%d.publi
   dbc60:	6873 6e69 2067 7325 2520 2073 7474 3d6c     shing %s %s ttl=
   dbc70:	6425 6620 616c 7367 253d 0078 7570 6c62     %d flags=%x.publ
   dbc80:	7369 6568 2064 7573 6363 7365 6673 6c75     ished successful
   dbc90:	796c 7000 6275 696c 6873 6465 6620 6961     ly.published fai
   dbca0:	656c 2c64 7720 6c69 206c 6572 7274 2079     led, will retry 
   dbcb0:	6e69 2520 756c 6d20 0073 7061 2e70 7570     in %lu ms.app.pu
   dbcc0:	7162 0000                                   bq..

000dbcc4 <_ZTV21PublishQueueAsyncBase>:
	...
   dbcd4:	650d 000d 40a5 000d 40a5 000d 40a5 000d     .e...@...@...@..
   dbce4:	40a5 000d 40a5 000d                         .@...@..

000dbcec <_ZTV25PublishQueueAsyncRetained>:
	...
   dbcf4:	65f5 000d 6609 000d 650d 000d 6699 000d     .e...f...e...f..
   dbd04:	6659 000d 6637 000d 67df 000d 667f 000d     Yf..7f...g...f..

000dbd14 <_ZTVN5spark13CellularClassE>:
	...
   dbd1c:	7287 000d 727d 000d 7273 000d 7229 000d     .r..}r..sr..)r..
   dbd2c:	7267 000d 725b 000d 724f 000d 7247 000d     gr..[r..Or..Gr..
   dbd3c:	723d 000d 7233 000d 7bb1 000d               =r..3r...{..

000dbd48 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dbd50:	72c1 000d 72c7 000d 7305 000d 72d5 000d     .r...r...s...r..
   dbd60:	72c3 000d                                   .r..

000dbd64 <_ZTVN5spark13EthernetClassE>:
	...
   dbd6c:	78cb 000d 78c1 000d 78b7 000d 78ad 000d     .x...x...x...x..
   dbd7c:	78a1 000d 7895 000d 7889 000d 7881 000d     .x...x...x...x..
   dbd8c:	7877 000d 786d 000d 7bb1 000d               wx..mx...{..

000dbd98 <_ZTV7TwoWire>:
	...
   dbda0:	78e9 000d 7933 000d 790b 000d 78eb 000d     .x..3y...y...x..
   dbdb0:	7913 000d 791b 000d 7923 000d 792b 000d     .y...y..#y..+y..

000dbdc0 <_ZTV9IPAddress>:
	...
   dbdc8:	7a65 000d 7a55 000d 7a57 000d 7061 0070     ez..Uz..Wz..app.

000dbdd8 <_ZTVN5spark12NetworkClassE>:
	...
   dbde0:	7b49 000d 7b53 000d 7b5d 000d 7b67 000d     I{..S{..]{..g{..
   dbdf0:	7b71 000d 7b7d 000d 7b89 000d 7b95 000d     q{..}{...{...{..
   dbe00:	7b9d 000d 7ba7 000d 7bb1 000d 005a 2b25     .{...{...{..Z.%+
   dbe10:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   dbe20:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   dbe30:	6974 656d 0000 0000                         time....

000dbe38 <_ZTV11USARTSerial>:
	...
   dbe40:	8279 000d 82e5 000d 82bd 000d 7c99 000d     y............|..
   dbe50:	828d 000d 82a9 000d 829b 000d 82b7 000d     ................
   dbe60:	827b 000d 827f 000d                         {.......

000dbe68 <_ZTV9USBSerial>:
	...
   dbe70:	8379 000d 83e1 000d 83b7 000d 7c99 000d     y............|..
   dbe80:	83a9 000d 837b 000d 838b 000d 83db 000d     ....{...........
   dbe90:	839b 000d 8375 000d                         ....u...

000dbe98 <_ZSt7nothrow>:
   dbe98:	0000 0000 7173 7472 2500 332e 2073 2e25     ....sqrt.%.3s %.
   dbea8:	7333 3325 2064 2e25 6432 253a 322e 3a64     3s%3d %.2d:%.2d:
   dbeb8:	2e25 6432 2520 0a64                          %.2d %d..

000dbec1 <day_name.6145>:
   dbec1:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dbed1:	6972 6153                                    riSat

000dbed6 <mon_name.6146>:
   dbed6:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dbee6:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dbef6:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000dbf08 <fpi.7566>:
   dbf08:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dbf18:	0000 0000                                   ....

000dbf1c <fpinan.7602>:
   dbf1c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   dbf2c:	0000 0000                                   ....

000dbf30 <tinytens>:
   dbf30:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dbf40:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dbf50:	6f43 64ac 0628 1168                         Co.d(.h.

000dbf58 <_ctype_>:
   dbf58:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dbf68:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dbf78:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dbf88:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dbf98:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dbfa8:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dbfb8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dbfc8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dbfd8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dc05c <_C_numeric_locale>:
   dc05c:	b4b4 000d bec0 000d dcfc 2003 0043 4f50     ........... C.PO
   dc06c:	4953 0058                                   SIX.

000dc070 <__mprec_bigtens>:
   dc070:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dc080:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dc090:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dc098 <__mprec_tens>:
   dc098:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dc0a8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dc0b8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dc0c8:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dc0d8:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dc0e8:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dc0f8:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dc108:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dc118:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dc128:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dc138:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dc148:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dc158:	9db4 79d9 7843 44ea                         ...yCx.D

000dc160 <p05.7490>:
   dc160:	0005 0000 0019 0000 007d 0000               ........}...

000dc16c <link_const_variable_data_end>:
   dc16c:	000d55c5 	.word	0x000d55c5
   dc170:	000d6495 	.word	0x000d6495
   dc174:	000d6a71 	.word	0x000d6a71
   dc178:	000d7201 	.word	0x000d7201
   dc17c:	000d7291 	.word	0x000d7291
   dc180:	000d78d5 	.word	0x000d78d5
   dc184:	000d7b39 	.word	0x000d7b39
   dc188:	000d7c85 	.word	0x000d7c85
   dc18c:	000d7d39 	.word	0x000d7d39
   dc190:	000d7f25 	.word	0x000d7f25
   dc194:	000d8265 	.word	0x000d8265

000dc198 <link_constructors_end>:
	...
