
/Users/abdulhannanmustajab/Desktop/IoT/Power-Monitoring/PowerMonitoring/target/3.0.0/boron/PowerMonitoring.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00008360  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  2003f400  000dc380  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000002bc  2003dbe8  000dcb84  0001dbe8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000950  2003dea8  2003dea8  0002dea8  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000dce40  000dce40  0002ce40  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000dce6c  000dce6c  0002ce6c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001e2bbf  00000000  00000000  0002ce70  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001bb08  00000000  00000000  0020fa2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003dbf1  00000000  00000000  0022b537  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003340  00000000  00000000  00269128  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000a9a8  00000000  00000000  0026c468  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003f984  00000000  00000000  00276e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004b405  00000000  00000000  002b6794  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00134aea  00000000  00000000  00301b99  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000985c  00000000  00000000  00436684  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fabd 	bl	d95b0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fadf 	bl	d9600 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dbe8 	.word	0x2003dbe8
   d404c:	000dcb84 	.word	0x000dcb84
   d4050:	2003dea4 	.word	0x2003dea4
   d4054:	2003dea8 	.word	0x2003dea8
   d4058:	2003e7f8 	.word	0x2003e7f8

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f004 fb21 	bl	d86a8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000dc354 	.word	0x000dc354
   d4080:	000dc380 	.word	0x000dc380

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f001 b966 	b.w	d5354 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 ff53 	bl	d4f34 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f004 bacb 	b.w	d862c <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f003 b8ad 	b.w	d71f4 <malloc>

000d409a <_Znaj>:
   d409a:	f003 b8ab 	b.w	d71f4 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f003 b8b1 	b.w	d7204 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 ff6c 	bl	d6f88 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d6cb9 	.word	0x000d6cb9

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z11watchdogISRv>:
}


void watchdogISR()
{
  watchdogFlag = true;
   d40c8:	4b01      	ldr	r3, [pc, #4]	; (d40d0 <_Z11watchdogISRv+0x8>)
   d40ca:	2201      	movs	r2, #1
   d40cc:	701a      	strb	r2, [r3, #0]
}
   d40ce:	4770      	bx	lr
   d40d0:	2003e5d1 	.word	0x2003e5d1

000d40d4 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
   d40d4:	6803      	ldr	r3, [r0, #0]
   d40d6:	4718      	bx	r3

000d40d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	  switch (__op)
   d40d8:	2a01      	cmp	r2, #1
   d40da:	d003      	beq.n	d40e4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xc>
   d40dc:	2a02      	cmp	r2, #2
   d40de:	d003      	beq.n	d40e8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x10>
	}
   d40e0:	2000      	movs	r0, #0
   d40e2:	4770      	bx	lr
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d40e4:	6001      	str	r1, [r0, #0]
	      break;
   d40e6:	e7fb      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d40e8:	680b      	ldr	r3, [r1, #0]
   d40ea:	6003      	str	r3, [r0, #0]
	}
   d40ec:	e7f8      	b.n	d40e0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x8>
	...

000d40f0 <_Z10measureNow6String>:
  sysStatusWriteNeeded = true;
  return 1;
}

int measureNow(String command) // Function to force sending data in current hour
{
   d40f0:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40f2:	4904      	ldr	r1, [pc, #16]	; (d4104 <_Z10measureNow6String+0x14>)
   d40f4:	f003 ff93 	bl	d801e <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d40f8:	b118      	cbz	r0, d4102 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d40fa:	4b03      	ldr	r3, [pc, #12]	; (d4108 <_Z10measureNow6String+0x18>)
   d40fc:	2203      	movs	r2, #3
   d40fe:	701a      	strb	r2, [r3, #0]
    return 1;
   d4100:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4102:	bd08      	pop	{r3, pc}
   d4104:	000db4a3 	.word	0x000db4a3
   d4108:	2003e59d 	.word	0x2003e59d

000d410c <_Z12enableSensor6String>:

/* 
  EnableSensor (String Sensor)
  This function takes in the sensor number as integer and enables or disable the sensor accordingly.
*/
int enableSensor(String Sensor){
   d410c:	b570      	push	{r4, r5, r6, lr}
   d410e:	b0c2      	sub	sp, #264	; 0x108
  char * pEND;
  char data[256];
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4110:	6800      	ldr	r0, [r0, #0]
   d4112:	220a      	movs	r2, #10
   d4114:	a901      	add	r1, sp, #4
   d4116:	f006 f9a7 	bl	da468 <strtol>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d411a:	1e43      	subs	r3, r0, #1
   d411c:	2b06      	cmp	r3, #6
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d411e:	4604      	mov	r4, r0
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d4120:	d82b      	bhi.n	d417a <_Z12enableSensor6String+0x6e>
 
  if (tempSensor == 1){
   d4122:	2801      	cmp	r0, #1
   d4124:	4b16      	ldr	r3, [pc, #88]	; (d4180 <_Z12enableSensor6String+0x74>)
   d4126:	4e17      	ldr	r6, [pc, #92]	; (d4184 <_Z12enableSensor6String+0x78>)
   d4128:	d108      	bne.n	d413c <_Z12enableSensor6String+0x30>
    sysStatus.sensorOneConnected = true;
   d412a:	7718      	strb	r0, [r3, #28]
    snprintf(data, sizeof(data), "Enabled Sensor One");
   d412c:	4916      	ldr	r1, [pc, #88]	; (d4188 <_Z12enableSensor6String+0x7c>)
   d412e:	a802      	add	r0, sp, #8
   d4130:	f005 fa9c 	bl	d966c <strcpy>
    sysStatusWriteNeeded = true;  
   d4134:	7034      	strb	r4, [r6, #0]
    sysStatus.sensorSixConnected = true;
    snprintf(data, sizeof(data), "Enabled Sensor Six");
    sysStatusWriteNeeded = true; 
    return 1;      
  }
}
   d4136:	4620      	mov	r0, r4
   d4138:	b042      	add	sp, #264	; 0x108
   d413a:	bd70      	pop	{r4, r5, r6, pc}
  } else if (tempSensor == 2){
   d413c:	2802      	cmp	r0, #2
   d413e:	f04f 0501 	mov.w	r5, #1
   d4142:	d107      	bne.n	d4154 <_Z12enableSensor6String+0x48>
    snprintf(data, sizeof(data), "Enabled Sensor Two");
   d4144:	4911      	ldr	r1, [pc, #68]	; (d418c <_Z12enableSensor6String+0x80>)
    sysStatus.sensorTwoConnected = true;
   d4146:	775d      	strb	r5, [r3, #29]
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d4148:	a802      	add	r0, sp, #8
   d414a:	f005 fa8f 	bl	d966c <strcpy>
    return 1;      
   d414e:	462c      	mov	r4, r5
    sysStatusWriteNeeded = true; 
   d4150:	7035      	strb	r5, [r6, #0]
    return 1;      
   d4152:	e7f0      	b.n	d4136 <_Z12enableSensor6String+0x2a>
  else if (tempSensor == 3){
   d4154:	2803      	cmp	r0, #3
   d4156:	d102      	bne.n	d415e <_Z12enableSensor6String+0x52>
    snprintf(data, sizeof(data), "Enabled Sensor Three");
   d4158:	490d      	ldr	r1, [pc, #52]	; (d4190 <_Z12enableSensor6String+0x84>)
    sysStatus.sensorThreeConnected = true;
   d415a:	779d      	strb	r5, [r3, #30]
    snprintf(data, sizeof(data), "Enabled Sensor Three");
   d415c:	e7f4      	b.n	d4148 <_Z12enableSensor6String+0x3c>
  else if (tempSensor == 4){
   d415e:	2804      	cmp	r0, #4
   d4160:	d102      	bne.n	d4168 <_Z12enableSensor6String+0x5c>
    snprintf(data, sizeof(data), "Enabled Sensor Four");
   d4162:	490c      	ldr	r1, [pc, #48]	; (d4194 <_Z12enableSensor6String+0x88>)
    sysStatus.sensorFourConnected = true;
   d4164:	77dd      	strb	r5, [r3, #31]
    snprintf(data, sizeof(data), "Enabled Sensor Four");
   d4166:	e7ef      	b.n	d4148 <_Z12enableSensor6String+0x3c>
  else if (tempSensor == 5){
   d4168:	2805      	cmp	r0, #5
    snprintf(data, sizeof(data), "Enabled Sensor Five");
   d416a:	bf0b      	itete	eq
   d416c:	490a      	ldreq	r1, [pc, #40]	; (d4198 <_Z12enableSensor6String+0x8c>)
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d416e:	490b      	ldrne	r1, [pc, #44]	; (d419c <_Z12enableSensor6String+0x90>)
    sysStatus.sensorFiveConnected = true;
   d4170:	f883 5020 	strbeq.w	r5, [r3, #32]
    sysStatus.sensorSixConnected = true;
   d4174:	f883 5021 	strbne.w	r5, [r3, #33]	; 0x21
    snprintf(data, sizeof(data), "Enabled Sensor Six");
   d4178:	e7e6      	b.n	d4148 <_Z12enableSensor6String+0x3c>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d417a:	2400      	movs	r4, #0
   d417c:	e7db      	b.n	d4136 <_Z12enableSensor6String+0x2a>
   d417e:	bf00      	nop
   d4180:	2003e5a0 	.word	0x2003e5a0
   d4184:	2003e5d0 	.word	0x2003e5d0
   d4188:	000db4a5 	.word	0x000db4a5
   d418c:	000db4b8 	.word	0x000db4b8
   d4190:	000db4cb 	.word	0x000db4cb
   d4194:	000db4e0 	.word	0x000db4e0
   d4198:	000db4f4 	.word	0x000db4f4
   d419c:	000db508 	.word	0x000db508

000d41a0 <_Z11resetSystem6String>:
  emon5.current(CT5_PIN,sensorConstants.sensorFiveConstant);
  emon6.current(CT6_PIN,sensorConstants.sensorSixConstant);

}

int resetSystem(String Command){
   d41a0:	b513      	push	{r0, r1, r4, lr}
  char * pEND;
  int command = strtol(Command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d41a2:	220a      	movs	r2, #10
   d41a4:	6800      	ldr	r0, [r0, #0]
   d41a6:	a901      	add	r1, sp, #4
   d41a8:	f006 f95e 	bl	da468 <strtol>
  if (command == 1) {
   d41ac:	2801      	cmp	r0, #1
  int command = strtol(Command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d41ae:	4604      	mov	r4, r0
  if (command == 1) {
   d41b0:	d104      	bne.n	d41bc <_Z11resetSystem6String+0x1c>
    System.reset();
   d41b2:	f003 ff69 	bl	d8088 <_ZN11SystemClass5resetEv>
    return 1;
    }
  else return 0;  
   d41b6:	4620      	mov	r0, r4
   d41b8:	b002      	add	sp, #8
   d41ba:	bd10      	pop	{r4, pc}
  else return 0;  
   d41bc:	2400      	movs	r4, #0
   d41be:	e7fa      	b.n	d41b6 <_Z11resetSystem6String+0x16>

000d41c0 <_ZN5Timer7timeoutEv>:
     * Subclasses can either provide a callback function, or override
     * this timeout method.
     */
    virtual void timeout()
    {
        if (callback) {
   d41c0:	6943      	ldr	r3, [r0, #20]
   d41c2:	b113      	cbz	r3, d41ca <_ZN5Timer7timeoutEv+0xa>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d41c4:	6983      	ldr	r3, [r0, #24]
   d41c6:	300c      	adds	r0, #12
   d41c8:	4718      	bx	r3
            callback();
        }
    }
   d41ca:	4770      	bx	lr

000d41cc <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d41cc:	b510      	push	{r4, lr}
   d41ce:	4b03      	ldr	r3, [pc, #12]	; (d41dc <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d41d0:	6003      	str	r3, [r0, #0]
   d41d2:	4604      	mov	r4, r0
   d41d4:	f002 faa2 	bl	d671c <_ZN25PublishQueueAsyncRetainedD1Ev>
   d41d8:	4620      	mov	r0, r4
   d41da:	bd10      	pop	{r4, pc}
   d41dc:	000dbbe4 	.word	0x000dbbe4

000d41e0 <_ZN17PublishQueueAsyncD0Ev>:
   d41e0:	b510      	push	{r4, lr}
   d41e2:	4604      	mov	r4, r0
   d41e4:	f7ff fff2 	bl	d41cc <_ZN17PublishQueueAsyncD1Ev>
   d41e8:	4620      	mov	r0, r4
   d41ea:	2138      	movs	r1, #56	; 0x38
   d41ec:	f004 fb6b 	bl	d88c6 <_ZdlPvj>
   d41f0:	4620      	mov	r0, r4
   d41f2:	bd10      	pop	{r4, pc}

000d41f4 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d41f4:	b510      	push	{r4, lr}
   d41f6:	4b03      	ldr	r3, [pc, #12]	; (d4204 <_ZN8MB85RC64D1Ev+0x10>)
   d41f8:	6003      	str	r3, [r0, #0]
   d41fa:	4604      	mov	r4, r0
   d41fc:	f001 fca6 	bl	d5b4c <_ZN6MB85RCD1Ev>
   d4200:	4620      	mov	r0, r4
   d4202:	bd10      	pop	{r4, pc}
   d4204:	000dbc0c 	.word	0x000dbc0c

000d4208 <_ZN8MB85RC64D0Ev>:
   d4208:	b510      	push	{r4, lr}
   d420a:	4604      	mov	r4, r0
   d420c:	f7ff fff2 	bl	d41f4 <_ZN8MB85RC64D1Ev>
   d4210:	4620      	mov	r0, r4
   d4212:	2110      	movs	r1, #16
   d4214:	f004 fb57 	bl	d88c6 <_ZdlPvj>
   d4218:	4620      	mov	r0, r4
   d421a:	bd10      	pop	{r4, pc}

000d421c <_ZN5Timer12invoke_timerEPv>:
private:
	volatile bool running;
    os_timer_t handle;
    timer_callback_fn callback;

    static void invoke_timer(os_timer_t timer)
   d421c:	b513      	push	{r0, r1, r4, lr}
typedef std::function<os_thread_return_t(void)> wiring_thread_fn_t;

class SingleThreadedSection {
public:
    SingleThreadedSection() {
        os_thread_scheduling(false, NULL);
   d421e:	2100      	movs	r1, #0
   d4220:	4604      	mov	r4, r0
   d4222:	4608      	mov	r0, r1
   d4224:	f002 fcd0 	bl	d6bc8 <os_thread_scheduling>
    {
        Timer* t = nullptr;
        SINGLE_THREADED_BLOCK() {
            void* id = nullptr;
   d4228:	2300      	movs	r3, #0
            os_timer_get_id(timer, &id);
   d422a:	4620      	mov	r0, r4
   d422c:	a901      	add	r1, sp, #4
            void* id = nullptr;
   d422e:	9301      	str	r3, [sp, #4]
            os_timer_get_id(timer, &id);
   d4230:	f002 fce2 	bl	d6bf8 <os_timer_get_id>
            t = static_cast<Timer*>(id);
   d4234:	9c01      	ldr	r4, [sp, #4]
            if (t) {
   d4236:	b10c      	cbz	r4, d423c <_ZN5Timer12invoke_timerEPv+0x20>
                t->running = true;
   d4238:	2301      	movs	r3, #1
   d423a:	7123      	strb	r3, [r4, #4]
    }

    ~SingleThreadedSection() {
        os_thread_scheduling(true, NULL);
   d423c:	2100      	movs	r1, #0
   d423e:	2001      	movs	r0, #1
   d4240:	f002 fcc2 	bl	d6bc8 <os_thread_scheduling>
            }
        }
        if (t) {
   d4244:	b12c      	cbz	r4, d4252 <_ZN5Timer12invoke_timerEPv+0x36>
            t->timeout();
   d4246:	6823      	ldr	r3, [r4, #0]
   d4248:	4620      	mov	r0, r4
   d424a:	689b      	ldr	r3, [r3, #8]
   d424c:	4798      	blx	r3
            t->running = false;
   d424e:	2300      	movs	r3, #0
   d4250:	7123      	strb	r3, [r4, #4]
        }
    }
   d4252:	b002      	add	sp, #8
   d4254:	bd10      	pop	{r4, pc}

000d4256 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4256:	b510      	push	{r4, lr}
   d4258:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d425a:	6800      	ldr	r0, [r0, #0]
   d425c:	b108      	cbz	r0, d4262 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d425e:	f002 ffd1 	bl	d7204 <free>
class SystemClass {
   d4262:	4620      	mov	r0, r4
   d4264:	bd10      	pop	{r4, pc}

000d4266 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4266:	2300      	movs	r3, #0
   d4268:	2204      	movs	r2, #4
   d426a:	f002 befb 	b.w	d7064 <spark_variable>
	...

000d4270 <_Z16keepAliveMessagev>:
void keepAliveMessage() {
   d4270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d4272:	4b10      	ldr	r3, [pc, #64]	; (d42b4 <_Z16keepAliveMessagev+0x44>)
   d4274:	4a10      	ldr	r2, [pc, #64]	; (d42b8 <_Z16keepAliveMessagev+0x48>)
   d4276:	781b      	ldrb	r3, [r3, #0]
   d4278:	7812      	ldrb	r2, [r2, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d427a:	4910      	ldr	r1, [pc, #64]	; (d42bc <_Z16keepAliveMessagev+0x4c>)
   d427c:	4313      	orrs	r3, r2
   d427e:	f88d 3000 	strb.w	r3, [sp]
   d4282:	2200      	movs	r2, #0
   d4284:	233c      	movs	r3, #60	; 0x3c
   d4286:	a802      	add	r0, sp, #8
   d4288:	f003 fa1e 	bl	d76c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d428c:	9c03      	ldr	r4, [sp, #12]
   d428e:	b17c      	cbz	r4, d42b0 <_Z16keepAliveMessagev+0x40>
      if (--_M_use_count == 0)
   d4290:	6863      	ldr	r3, [r4, #4]
   d4292:	3b01      	subs	r3, #1
   d4294:	6063      	str	r3, [r4, #4]
   d4296:	b95b      	cbnz	r3, d42b0 <_Z16keepAliveMessagev+0x40>
          _M_dispose();
   d4298:	6823      	ldr	r3, [r4, #0]
   d429a:	4620      	mov	r0, r4
   d429c:	689b      	ldr	r3, [r3, #8]
   d429e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d42a0:	68a3      	ldr	r3, [r4, #8]
   d42a2:	3b01      	subs	r3, #1
   d42a4:	60a3      	str	r3, [r4, #8]
   d42a6:	b91b      	cbnz	r3, d42b0 <_Z16keepAliveMessagev+0x40>
            _M_destroy();
   d42a8:	6823      	ldr	r3, [r4, #0]
   d42aa:	4620      	mov	r0, r4
   d42ac:	68db      	ldr	r3, [r3, #12]
   d42ae:	4798      	blx	r3
}
   d42b0:	b004      	add	sp, #16
   d42b2:	bd10      	pop	{r4, pc}
   d42b4:	2003df98 	.word	0x2003df98
   d42b8:	2003df99 	.word	0x2003df99
   d42bc:	000db51b 	.word	0x000db51b

000d42c0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d42c0:	b510      	push	{r4, lr}
      if (_M_manager)
   d42c2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d42c4:	4604      	mov	r4, r0
      if (_M_manager)
   d42c6:	b113      	cbz	r3, d42ce <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d42c8:	2203      	movs	r2, #3
   d42ca:	4601      	mov	r1, r0
   d42cc:	4798      	blx	r3
    }
   d42ce:	4620      	mov	r0, r4
   d42d0:	bd10      	pop	{r4, pc}
	...

000d42d4 <_ZN5TimerD1Ev>:
    virtual ~Timer() {
   d42d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d42d6:	4b13      	ldr	r3, [pc, #76]	; (d4324 <_ZN5TimerD1Ev+0x50>)
   d42d8:	6003      	str	r3, [r0, #0]
   d42da:	4604      	mov	r4, r0
        if (handle) {
   d42dc:	6880      	ldr	r0, [r0, #8]
   d42de:	b1c8      	cbz	r0, d4314 <_ZN5TimerD1Ev+0x40>
        return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_STOP, fromISR, 0, block, nullptr) : false;
   d42e0:	2500      	movs	r5, #0
   d42e2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   d42e6:	e9cd 3500 	strd	r3, r5, [sp]
   d42ea:	2102      	movs	r1, #2
   d42ec:	462b      	mov	r3, r5
   d42ee:	462a      	mov	r2, r5
   d42f0:	f002 fc8a 	bl	d6c08 <os_timer_change>
            os_timer_set_id(handle, nullptr);
   d42f4:	68a0      	ldr	r0, [r4, #8]
   d42f6:	4629      	mov	r1, r5
   d42f8:	f002 fcbe 	bl	d6c78 <os_timer_set_id>
            while (running) {
   d42fc:	7923      	ldrb	r3, [r4, #4]
   d42fe:	f003 05ff 	and.w	r5, r3, #255	; 0xff
   d4302:	b113      	cbz	r3, d430a <_ZN5TimerD1Ev+0x36>
                os_thread_yield();
   d4304:	f002 fc58 	bl	d6bb8 <os_thread_yield>
            while (running) {
   d4308:	e7f8      	b.n	d42fc <_ZN5TimerD1Ev+0x28>
            os_timer_destroy(handle, nullptr);
   d430a:	68a0      	ldr	r0, [r4, #8]
   d430c:	4629      	mov	r1, r5
   d430e:	f002 fc6b 	bl	d6be8 <os_timer_destroy>
            handle = nullptr;
   d4312:	60a5      	str	r5, [r4, #8]
    class function<_Res(_ArgTypes...)>
   d4314:	f104 000c 	add.w	r0, r4, #12
   d4318:	f7ff ffd2 	bl	d42c0 <_ZNSt14_Function_baseD1Ev>
    }
   d431c:	4620      	mov	r0, r4
   d431e:	b003      	add	sp, #12
   d4320:	bd30      	pop	{r4, r5, pc}
   d4322:	bf00      	nop
   d4324:	000dbbd0 	.word	0x000dbbd0

000d4328 <_ZN5TimerD0Ev>:
    virtual ~Timer() {
   d4328:	b510      	push	{r4, lr}
   d432a:	4604      	mov	r4, r0
    }
   d432c:	f7ff ffd2 	bl	d42d4 <_ZN5TimerD1Ev>
   d4330:	4620      	mov	r0, r4
   d4332:	211c      	movs	r1, #28
   d4334:	f004 fac7 	bl	d88c6 <_ZdlPvj>
   d4338:	4620      	mov	r0, r4
   d433a:	bd10      	pop	{r4, pc}

000d433c <_ZN10CloudClass9_functionEPKcPFi6StringE>:
    static bool _function(const char *funcKey, user_function_int_str_t* func)
   d433c:	4602      	mov	r2, r0
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d433e:	4801      	ldr	r0, [pc, #4]	; (d4344 <_ZN10CloudClass9_functionEPKcPFi6StringE+0x8>)
   d4340:	f003 b8cf 	b.w	d74e2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4344:	000d74b7 	.word	0x000d74b7

000d4348 <_ZN10CloudClass9keepAliveEj>:
    		spark_process();
    }
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
   d4348:	b507      	push	{r0, r1, r2, lr}
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d434a:	2208      	movs	r2, #8
        particle::protocol::connection_properties_t conn_prop = {0};
   d434c:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   d434e:	f8ad 2000 	strh.w	r2, [sp]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4352:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d4356:	2201      	movs	r2, #1
   d4358:	9201      	str	r2, [sp, #4]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d435a:	4341      	muls	r1, r0
   d435c:	466a      	mov	r2, sp
   d435e:	4618      	mov	r0, r3
        particle::protocol::connection_properties_t conn_prop = {0};
   d4360:	f8ad 3002 	strh.w	r3, [sp, #2]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4364:	f002 fed6 	bl	d7114 <spark_set_connection_property>
    }
   d4368:	b003      	add	sp, #12
   d436a:	f85d fb04 	ldr.w	pc, [sp], #4

000d436e <_ZN5Timer12changePeriodEjj>:
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d436e:	b507      	push	{r0, r1, r2, lr}
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d4370:	6880      	ldr	r0, [r0, #8]
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d4372:	460b      	mov	r3, r1
         return handle ? !os_timer_change(handle, OS_TIMER_CHANGE_PERIOD, fromISR, period, block, nullptr) : false;
   d4374:	2100      	movs	r1, #0
   d4376:	b140      	cbz	r0, d438a <_ZN5Timer12changePeriodEjj+0x1c>
   d4378:	e9cd 2100 	strd	r2, r1, [sp]
   d437c:	460a      	mov	r2, r1
   d437e:	2103      	movs	r1, #3
   d4380:	f002 fc42 	bl	d6c08 <os_timer_change>
   d4384:	fab0 f080 	clz	r0, r0
   d4388:	0940      	lsrs	r0, r0, #5
    bool changePeriod(unsigned period, unsigned block=default_wait) { return _changePeriod(period, block, false); }
   d438a:	b003      	add	sp, #12
   d438c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4390 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d4390:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4392:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d4394:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4398:	f88d 3000 	strb.w	r3, [sp]
   d439c:	f88d 5004 	strb.w	r5, [sp, #4]
   d43a0:	68e4      	ldr	r4, [r4, #12]
   d43a2:	233c      	movs	r3, #60	; 0x3c
   d43a4:	47a0      	blx	r4
	}
   d43a6:	b003      	add	sp, #12
   d43a8:	bd30      	pop	{r4, r5, pc}
	...

000d43ac <_Z14UbidotsHandlerPKcS0_>:
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d43ac:	b510      	push	{r4, lr}
  if (!strlen(data)) {                                                // No data in response - Error
   d43ae:	780b      	ldrb	r3, [r1, #0]
void UbidotsHandler(const char *event, const char *data) {            // Looks at the response from Ubidots - Will reset Photon if no successful response
   d43b0:	b092      	sub	sp, #72	; 0x48
   d43b2:	460c      	mov	r4, r1
  if (!strlen(data)) {                                                // No data in response - Error
   d43b4:	b97b      	cbnz	r3, d43d6 <_Z14UbidotsHandlerPKcS0_+0x2a>
    snprintf(responseString, sizeof(responseString),"No Data");
   d43b6:	4919      	ldr	r1, [pc, #100]	; (d441c <_Z14UbidotsHandlerPKcS0_+0x70>)
   d43b8:	a802      	add	r0, sp, #8
   d43ba:	f005 f957 	bl	d966c <strcpy>
        val_(0) {
   d43be:	2300      	movs	r3, #0
  publishQueue.publish("Ubidots Hook", responseString, PRIVATE);
   d43c0:	f88d 3000 	strb.w	r3, [sp]
   d43c4:	4b16      	ldr	r3, [pc, #88]	; (d4420 <_Z14UbidotsHandlerPKcS0_+0x74>)
   d43c6:	4917      	ldr	r1, [pc, #92]	; (d4424 <_Z14UbidotsHandlerPKcS0_+0x78>)
   d43c8:	781b      	ldrb	r3, [r3, #0]
   d43ca:	4817      	ldr	r0, [pc, #92]	; (d4428 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d43cc:	aa02      	add	r2, sp, #8
   d43ce:	f7ff ffdf 	bl	d4390 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d43d2:	b012      	add	sp, #72	; 0x48
   d43d4:	bd10      	pop	{r4, pc}
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d43d6:	4608      	mov	r0, r1
   d43d8:	f005 f8c5 	bl	d9566 <atoi>
   d43dc:	28c8      	cmp	r0, #200	; 0xc8
   d43de:	d10e      	bne.n	d43fe <_Z14UbidotsHandlerPKcS0_+0x52>
    snprintf(responseString, sizeof(responseString),"Response Received");
   d43e0:	4912      	ldr	r1, [pc, #72]	; (d442c <_Z14UbidotsHandlerPKcS0_+0x80>)
   d43e2:	a802      	add	r0, sp, #8
   d43e4:	f005 f942 	bl	d966c <strcpy>
    sysStatus.lastHookResponse = Time.now();                          // Record the last successful Webhook Response
   d43e8:	f003 ffc9 	bl	d837e <_ZN9TimeClass3nowEv>
   d43ec:	4b10      	ldr	r3, [pc, #64]	; (d4430 <_Z14UbidotsHandlerPKcS0_+0x84>)
   d43ee:	6198      	str	r0, [r3, #24]
    sysStatusWriteNeeded = true;
   d43f0:	4b10      	ldr	r3, [pc, #64]	; (d4434 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d43f2:	2201      	movs	r2, #1
   d43f4:	701a      	strb	r2, [r3, #0]
    dataInFlight = false;                                             // Data has been received
   d43f6:	4b10      	ldr	r3, [pc, #64]	; (d4438 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d43f8:	2200      	movs	r2, #0
   d43fa:	701a      	strb	r2, [r3, #0]
   d43fc:	e7df      	b.n	d43be <_Z14UbidotsHandlerPKcS0_+0x12>
  else if (atoi(data) == 200 || atoi(data) == 201) {
   d43fe:	4620      	mov	r0, r4
   d4400:	f005 f8b1 	bl	d9566 <atoi>
   d4404:	28c9      	cmp	r0, #201	; 0xc9
   d4406:	d0eb      	beq.n	d43e0 <_Z14UbidotsHandlerPKcS0_+0x34>
    snprintf(responseString, sizeof(responseString), "Unknown response recevied %i",atoi(data));
   d4408:	4620      	mov	r0, r4
   d440a:	f005 f8ac 	bl	d9566 <atoi>
   d440e:	4a0b      	ldr	r2, [pc, #44]	; (d443c <_Z14UbidotsHandlerPKcS0_+0x90>)
   d4410:	4603      	mov	r3, r0
   d4412:	2140      	movs	r1, #64	; 0x40
   d4414:	a802      	add	r0, sp, #8
   d4416:	f002 ff0d 	bl	d7234 <snprintf>
   d441a:	e7d0      	b.n	d43be <_Z14UbidotsHandlerPKcS0_+0x12>
   d441c:	000db51d 	.word	0x000db51d
   d4420:	2003df99 	.word	0x2003df99
   d4424:	000db554 	.word	0x000db554
   d4428:	2003e440 	.word	0x2003e440
   d442c:	000db525 	.word	0x000db525
   d4430:	2003e5a0 	.word	0x2003e5a0
   d4434:	2003e5d0 	.word	0x2003e5d0
   d4438:	2003dfbb 	.word	0x2003dfbb
   d443c:	000db537 	.word	0x000db537

000d4440 <_Z16setThirdPartySim6String>:
{
   d4440:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4442:	491c      	ldr	r1, [pc, #112]	; (d44b4 <_Z16setThirdPartySim6String+0x74>)
   d4444:	4605      	mov	r5, r0
   d4446:	f003 fdea 	bl	d801e <_ZNK6String6equalsEPKc>
  if (command == "1")
   d444a:	4604      	mov	r4, r0
   d444c:	b300      	cbz	r0, d4490 <_Z16setThirdPartySim6String+0x50>
    sysStatus.thirdPartySim = true;
   d444e:	4c1a      	ldr	r4, [pc, #104]	; (d44b8 <_Z16setThirdPartySim6String+0x78>)
   d4450:	2301      	movs	r3, #1
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d4452:	6860      	ldr	r0, [r4, #4]
    sysStatus.thirdPartySim = true;
   d4454:	7063      	strb	r3, [r4, #1]
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d4456:	f7ff ff77 	bl	d4348 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d445a:	6863      	ldr	r3, [r4, #4]
   d445c:	4817      	ldr	r0, [pc, #92]	; (d44bc <_Z16setThirdPartySim6String+0x7c>)
   d445e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4462:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4466:	4359      	muls	r1, r3
   d4468:	f7ff ff81 	bl	d436e <_ZN5Timer12changePeriodEjj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d446c:	f002 fe1a 	bl	d70a4 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to 3rd Party Sim", PRIVATE);
   d4470:	b148      	cbz	r0, d4486 <_Z16setThirdPartySim6String+0x46>
   d4472:	2300      	movs	r3, #0
   d4474:	f88d 3000 	strb.w	r3, [sp]
   d4478:	4b11      	ldr	r3, [pc, #68]	; (d44c0 <_Z16setThirdPartySim6String+0x80>)
   d447a:	4a12      	ldr	r2, [pc, #72]	; (d44c4 <_Z16setThirdPartySim6String+0x84>)
   d447c:	781b      	ldrb	r3, [r3, #0]
   d447e:	4912      	ldr	r1, [pc, #72]	; (d44c8 <_Z16setThirdPartySim6String+0x88>)
   d4480:	4812      	ldr	r0, [pc, #72]	; (d44cc <_Z16setThirdPartySim6String+0x8c>)
   d4482:	f7ff ff85 	bl	d4390 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d4486:	4b12      	ldr	r3, [pc, #72]	; (d44d0 <_Z16setThirdPartySim6String+0x90>)
   d4488:	2001      	movs	r0, #1
   d448a:	7018      	strb	r0, [r3, #0]
}
   d448c:	b003      	add	sp, #12
   d448e:	bd30      	pop	{r4, r5, pc}
   d4490:	4910      	ldr	r1, [pc, #64]	; (d44d4 <_Z16setThirdPartySim6String+0x94>)
   d4492:	4628      	mov	r0, r5
   d4494:	f003 fdc3 	bl	d801e <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4498:	2800      	cmp	r0, #0
   d449a:	d0f7      	beq.n	d448c <_Z16setThirdPartySim6String+0x4c>
    sysStatus.thirdPartySim = false;
   d449c:	4b06      	ldr	r3, [pc, #24]	; (d44b8 <_Z16setThirdPartySim6String+0x78>)
   d449e:	705c      	strb	r4, [r3, #1]
   d44a0:	f002 fe00 	bl	d70a4 <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
   d44a4:	2800      	cmp	r0, #0
   d44a6:	d0ee      	beq.n	d4486 <_Z16setThirdPartySim6String+0x46>
   d44a8:	4b05      	ldr	r3, [pc, #20]	; (d44c0 <_Z16setThirdPartySim6String+0x80>)
   d44aa:	f88d 4000 	strb.w	r4, [sp]
   d44ae:	781b      	ldrb	r3, [r3, #0]
   d44b0:	4a09      	ldr	r2, [pc, #36]	; (d44d8 <_Z16setThirdPartySim6String+0x98>)
   d44b2:	e7e4      	b.n	d447e <_Z16setThirdPartySim6String+0x3e>
   d44b4:	000db4a3 	.word	0x000db4a3
   d44b8:	2003e5a0 	.word	0x2003e5a0
   d44bc:	2003e420 	.word	0x2003e420
   d44c0:	2003df99 	.word	0x2003df99
   d44c4:	000db561 	.word	0x000db561
   d44c8:	000db5f3 	.word	0x000db5f3
   d44cc:	2003e440 	.word	0x2003e440
   d44d0:	2003e5d0 	.word	0x2003e5d0
   d44d4:	000db576 	.word	0x000db576
   d44d8:	000db578 	.word	0x000db578

000d44dc <_Z12setKeepAlive6String>:
{
   d44dc:	b510      	push	{r4, lr}
   d44de:	b0c4      	sub	sp, #272	; 0x110
  int tempTime = strtol(command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d44e0:	6800      	ldr	r0, [r0, #0]
   d44e2:	220a      	movs	r2, #10
   d44e4:	a903      	add	r1, sp, #12
   d44e6:	f005 ffbf 	bl	da468 <strtol>
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d44ea:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   d44ee:	d822      	bhi.n	d4536 <_Z12setKeepAlive6String+0x5a>
  sysStatus.keepAlive = tempTime;
   d44f0:	4c12      	ldr	r4, [pc, #72]	; (d453c <_Z12setKeepAlive6String+0x60>)
   d44f2:	6060      	str	r0, [r4, #4]
  Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d44f4:	f7ff ff28 	bl	d4348 <_ZN10CloudClass9keepAliveEj>
  keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d44f8:	6863      	ldr	r3, [r4, #4]
   d44fa:	4811      	ldr	r0, [pc, #68]	; (d4540 <_Z12setKeepAlive6String+0x64>)
   d44fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4500:	4359      	muls	r1, r3
   d4502:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d4506:	f7ff ff32 	bl	d436e <_ZN5Timer12changePeriodEjj>
  snprintf(data, sizeof(data), "Keep Alive set to %i sec",sysStatus.keepAlive);
   d450a:	6863      	ldr	r3, [r4, #4]
   d450c:	4a0d      	ldr	r2, [pc, #52]	; (d4544 <_Z12setKeepAlive6String+0x68>)
   d450e:	f44f 7180 	mov.w	r1, #256	; 0x100
   d4512:	a804      	add	r0, sp, #16
   d4514:	f002 fe8e 	bl	d7234 <snprintf>
   d4518:	2300      	movs	r3, #0
  publishQueue.publish("Keep Alive",data, PRIVATE);
   d451a:	f88d 3000 	strb.w	r3, [sp]
   d451e:	4b0a      	ldr	r3, [pc, #40]	; (d4548 <_Z12setKeepAlive6String+0x6c>)
   d4520:	490a      	ldr	r1, [pc, #40]	; (d454c <_Z12setKeepAlive6String+0x70>)
   d4522:	781b      	ldrb	r3, [r3, #0]
   d4524:	480a      	ldr	r0, [pc, #40]	; (d4550 <_Z12setKeepAlive6String+0x74>)
   d4526:	aa04      	add	r2, sp, #16
   d4528:	f7ff ff32 	bl	d4390 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatusWriteNeeded = true;                                                           // Need to store to FRAM back in the main loop
   d452c:	4b09      	ldr	r3, [pc, #36]	; (d4554 <_Z12setKeepAlive6String+0x78>)
   d452e:	2001      	movs	r0, #1
   d4530:	7018      	strb	r0, [r3, #0]
}
   d4532:	b044      	add	sp, #272	; 0x110
   d4534:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d4536:	2000      	movs	r0, #0
   d4538:	e7fb      	b.n	d4532 <_Z12setKeepAlive6String+0x56>
   d453a:	bf00      	nop
   d453c:	2003e5a0 	.word	0x2003e5a0
   d4540:	2003e420 	.word	0x2003e420
   d4544:	000db58c 	.word	0x000db58c
   d4548:	2003df99 	.word	0x2003df99
   d454c:	000db5a5 	.word	0x000db5a5
   d4550:	2003e440 	.word	0x2003e440
   d4554:	2003e5d0 	.word	0x2003e5d0

000d4558 <_Z20setReportingDuration6String>:
int setReportingDuration(String command){
   d4558:	b500      	push	{lr}
   d455a:	b089      	sub	sp, #36	; 0x24
   d455c:	9003      	str	r0, [sp, #12]
  sysStatus.reportingBoundary = command.toFloat();
   d455e:	f003 fd71 	bl	d8044 <_ZNK6String7toFloatEv>
   d4562:	4b0e      	ldr	r3, [pc, #56]	; (d459c <_Z20setReportingDuration6String+0x44>)
  publishQueue.publish("Reporting Time Set to %s Minutes.",String(command),PRIVATE);
   d4564:	9903      	ldr	r1, [sp, #12]
  sysStatus.reportingBoundary = command.toFloat();
   d4566:	eebd 0ac0 	vcvt.s32.f32	s0, s0
  publishQueue.publish("Reporting Time Set to %s Minutes.",String(command),PRIVATE);
   d456a:	a804      	add	r0, sp, #16
  sysStatus.reportingBoundary = command.toFloat();
   d456c:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
  publishQueue.publish("Reporting Time Set to %s Minutes.",String(command),PRIVATE);
   d4570:	f003 fd1e 	bl	d7fb0 <_ZN6StringC1ERKS_>
   d4574:	2300      	movs	r3, #0
   d4576:	f88d 3000 	strb.w	r3, [sp]
   d457a:	4b09      	ldr	r3, [pc, #36]	; (d45a0 <_Z20setReportingDuration6String+0x48>)
   d457c:	9a04      	ldr	r2, [sp, #16]
   d457e:	781b      	ldrb	r3, [r3, #0]
   d4580:	4908      	ldr	r1, [pc, #32]	; (d45a4 <_Z20setReportingDuration6String+0x4c>)
   d4582:	4809      	ldr	r0, [pc, #36]	; (d45a8 <_Z20setReportingDuration6String+0x50>)
   d4584:	f7ff ff04 	bl	d4390 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d4588:	a804      	add	r0, sp, #16
   d458a:	f003 fca3 	bl	d7ed4 <_ZN6StringD1Ev>
  sysStatusWriteNeeded = true;
   d458e:	4b07      	ldr	r3, [pc, #28]	; (d45ac <_Z20setReportingDuration6String+0x54>)
   d4590:	2001      	movs	r0, #1
   d4592:	7018      	strb	r0, [r3, #0]
}
   d4594:	b009      	add	sp, #36	; 0x24
   d4596:	f85d fb04 	ldr.w	pc, [sp], #4
   d459a:	bf00      	nop
   d459c:	2003e5a0 	.word	0x2003e5a0
   d45a0:	2003df99 	.word	0x2003df99
   d45a4:	000db5b0 	.word	0x000db5b0
   d45a8:	2003e440 	.word	0x2003e440
   d45ac:	2003e5d0 	.word	0x2003e5d0

000d45b0 <_Z14setVerboseMode6String>:
{
   d45b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d45b2:	4916      	ldr	r1, [pc, #88]	; (d460c <_Z14setVerboseMode6String+0x5c>)
   d45b4:	4605      	mov	r5, r0
   d45b6:	f003 fd32 	bl	d801e <_ZNK6String6equalsEPKc>
  if (command == "1")
   d45ba:	4604      	mov	r4, r0
   d45bc:	b188      	cbz	r0, d45e2 <_Z14setVerboseMode6String+0x32>
    sysStatus.verboseMode = true;
   d45be:	4b14      	ldr	r3, [pc, #80]	; (d4610 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d45c0:	4a14      	ldr	r2, [pc, #80]	; (d4614 <_Z14setVerboseMode6String+0x64>)
   d45c2:	4915      	ldr	r1, [pc, #84]	; (d4618 <_Z14setVerboseMode6String+0x68>)
   d45c4:	4815      	ldr	r0, [pc, #84]	; (d461c <_Z14setVerboseMode6String+0x6c>)
    sysStatus.verboseMode = true;
   d45c6:	2401      	movs	r4, #1
   d45c8:	725c      	strb	r4, [r3, #9]
   d45ca:	2300      	movs	r3, #0
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d45cc:	f88d 3000 	strb.w	r3, [sp]
   d45d0:	4b13      	ldr	r3, [pc, #76]	; (d4620 <_Z14setVerboseMode6String+0x70>)
   d45d2:	781b      	ldrb	r3, [r3, #0]
   d45d4:	f7ff fedc 	bl	d4390 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d45d8:	4b12      	ldr	r3, [pc, #72]	; (d4624 <_Z14setVerboseMode6String+0x74>)
    return 1;
   d45da:	4620      	mov	r0, r4
    sysStatusWriteNeeded = true;
   d45dc:	701c      	strb	r4, [r3, #0]
}
   d45de:	b003      	add	sp, #12
   d45e0:	bd30      	pop	{r4, r5, pc}
   d45e2:	4911      	ldr	r1, [pc, #68]	; (d4628 <_Z14setVerboseMode6String+0x78>)
   d45e4:	4628      	mov	r0, r5
   d45e6:	f003 fd1a 	bl	d801e <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d45ea:	2800      	cmp	r0, #0
   d45ec:	d0f7      	beq.n	d45de <_Z14setVerboseMode6String+0x2e>
    sysStatus.verboseMode = false;
   d45ee:	4b08      	ldr	r3, [pc, #32]	; (d4610 <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d45f0:	4a0e      	ldr	r2, [pc, #56]	; (d462c <_Z14setVerboseMode6String+0x7c>)
    sysStatus.verboseMode = false;
   d45f2:	725c      	strb	r4, [r3, #9]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d45f4:	4b0a      	ldr	r3, [pc, #40]	; (d4620 <_Z14setVerboseMode6String+0x70>)
   d45f6:	f88d 4000 	strb.w	r4, [sp]
   d45fa:	781b      	ldrb	r3, [r3, #0]
   d45fc:	4906      	ldr	r1, [pc, #24]	; (d4618 <_Z14setVerboseMode6String+0x68>)
   d45fe:	4807      	ldr	r0, [pc, #28]	; (d461c <_Z14setVerboseMode6String+0x6c>)
   d4600:	f7ff fec6 	bl	d4390 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d4604:	4b07      	ldr	r3, [pc, #28]	; (d4624 <_Z14setVerboseMode6String+0x74>)
   d4606:	2001      	movs	r0, #1
   d4608:	7018      	strb	r0, [r3, #0]
    return 1;
   d460a:	e7e8      	b.n	d45de <_Z14setVerboseMode6String+0x2e>
   d460c:	000db4a3 	.word	0x000db4a3
   d4610:	2003e5a0 	.word	0x2003e5a0
   d4614:	000db5d2 	.word	0x000db5d2
   d4618:	000db5f3 	.word	0x000db5f3
   d461c:	2003e440 	.word	0x2003e440
   d4620:	2003df99 	.word	0x2003df99
   d4624:	2003e5d0 	.word	0x2003e5d0
   d4628:	000db576 	.word	0x000db576
   d462c:	000db5e3 	.word	0x000db5e3

000d4630 <_Z13disableSensor6String>:
int disableSensor(String Sensor){
   d4630:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4632:	b0c5      	sub	sp, #276	; 0x114
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4634:	6800      	ldr	r0, [r0, #0]
   d4636:	220a      	movs	r2, #10
   d4638:	a903      	add	r1, sp, #12
   d463a:	f005 ff15 	bl	da468 <strtol>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d463e:	1e43      	subs	r3, r0, #1
   d4640:	2b06      	cmp	r3, #6
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d4642:	4604      	mov	r4, r0
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d4644:	f04f 0500 	mov.w	r5, #0
   d4648:	d839      	bhi.n	d46be <_Z13disableSensor6String+0x8e>
  if (tempSensor == 1){
   d464a:	2801      	cmp	r0, #1
   d464c:	4b1d      	ldr	r3, [pc, #116]	; (d46c4 <_Z13disableSensor6String+0x94>)
   d464e:	4f1e      	ldr	r7, [pc, #120]	; (d46c8 <_Z13disableSensor6String+0x98>)
   d4650:	4e1e      	ldr	r6, [pc, #120]	; (d46cc <_Z13disableSensor6String+0x9c>)
   d4652:	d110      	bne.n	d4676 <_Z13disableSensor6String+0x46>
    snprintf(data, sizeof(data), "Disabled Sensor One");
   d4654:	491e      	ldr	r1, [pc, #120]	; (d46d0 <_Z13disableSensor6String+0xa0>)
    sysStatus.sensorOneConnected = false;
   d4656:	771d      	strb	r5, [r3, #28]
    snprintf(data, sizeof(data), "Disabled Sensor One");
   d4658:	a804      	add	r0, sp, #16
   d465a:	f005 f807 	bl	d966c <strcpy>
    publishQueue.publish("Sensor Status",data,PRIVATE);
   d465e:	783b      	ldrb	r3, [r7, #0]
   d4660:	491c      	ldr	r1, [pc, #112]	; (d46d4 <_Z13disableSensor6String+0xa4>)
   d4662:	481d      	ldr	r0, [pc, #116]	; (d46d8 <_Z13disableSensor6String+0xa8>)
   d4664:	f88d 5000 	strb.w	r5, [sp]
   d4668:	aa04      	add	r2, sp, #16
   d466a:	f7ff fe91 	bl	d4390 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true; 
   d466e:	7034      	strb	r4, [r6, #0]
}
   d4670:	4620      	mov	r0, r4
   d4672:	b045      	add	sp, #276	; 0x114
   d4674:	bdf0      	pop	{r4, r5, r6, r7, pc}
  } else if (tempSensor == 2){
   d4676:	2802      	cmp	r0, #2
   d4678:	d10e      	bne.n	d4698 <_Z13disableSensor6String+0x68>
    snprintf(data, sizeof(data), "Disabled Sensor Two");
   d467a:	4918      	ldr	r1, [pc, #96]	; (d46dc <_Z13disableSensor6String+0xac>)
    sysStatus.sensorTwoConnected = false;
   d467c:	775d      	strb	r5, [r3, #29]
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d467e:	a804      	add	r0, sp, #16
   d4680:	f004 fff4 	bl	d966c <strcpy>
    publishQueue.publish("Sensor Status",data,PRIVATE);
   d4684:	783b      	ldrb	r3, [r7, #0]
   d4686:	4913      	ldr	r1, [pc, #76]	; (d46d4 <_Z13disableSensor6String+0xa4>)
   d4688:	4813      	ldr	r0, [pc, #76]	; (d46d8 <_Z13disableSensor6String+0xa8>)
   d468a:	f88d 5000 	strb.w	r5, [sp]
   d468e:	aa04      	add	r2, sp, #16
   d4690:	f7ff fe7e 	bl	d4390 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true; 
   d4694:	2401      	movs	r4, #1
   d4696:	e7ea      	b.n	d466e <_Z13disableSensor6String+0x3e>
  else if (tempSensor == 3){
   d4698:	2803      	cmp	r0, #3
   d469a:	d102      	bne.n	d46a2 <_Z13disableSensor6String+0x72>
    snprintf(data, sizeof(data), "Disabled Sensor Three");
   d469c:	4910      	ldr	r1, [pc, #64]	; (d46e0 <_Z13disableSensor6String+0xb0>)
    sysStatus.sensorThreeConnected = false;
   d469e:	779d      	strb	r5, [r3, #30]
    snprintf(data, sizeof(data), "Disabled Sensor Three");
   d46a0:	e7ed      	b.n	d467e <_Z13disableSensor6String+0x4e>
  else if (tempSensor == 4){
   d46a2:	2804      	cmp	r0, #4
   d46a4:	d102      	bne.n	d46ac <_Z13disableSensor6String+0x7c>
    snprintf(data, sizeof(data), "Disabled Sensor Four");
   d46a6:	490f      	ldr	r1, [pc, #60]	; (d46e4 <_Z13disableSensor6String+0xb4>)
    sysStatus.sensorFourConnected = false;
   d46a8:	77dd      	strb	r5, [r3, #31]
    snprintf(data, sizeof(data), "Disabled Sensor Four");
   d46aa:	e7e8      	b.n	d467e <_Z13disableSensor6String+0x4e>
  else if (tempSensor == 5){
   d46ac:	2805      	cmp	r0, #5
    snprintf(data, sizeof(data), "Disabled Sensor Five");
   d46ae:	bf0b      	itete	eq
   d46b0:	490d      	ldreq	r1, [pc, #52]	; (d46e8 <_Z13disableSensor6String+0xb8>)
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d46b2:	490e      	ldrne	r1, [pc, #56]	; (d46ec <_Z13disableSensor6String+0xbc>)
    sysStatus.sensorFiveConnected = false;
   d46b4:	f883 5020 	strbeq.w	r5, [r3, #32]
    sysStatus.sensorSixConnected = false;
   d46b8:	f883 5021 	strbne.w	r5, [r3, #33]	; 0x21
    snprintf(data, sizeof(data), "Disabled Sensor Six");
   d46bc:	e7df      	b.n	d467e <_Z13disableSensor6String+0x4e>
  if ((tempSensor < 1) || (tempSensor >7) ) return 0;
   d46be:	462c      	mov	r4, r5
   d46c0:	e7d6      	b.n	d4670 <_Z13disableSensor6String+0x40>
   d46c2:	bf00      	nop
   d46c4:	2003e5a0 	.word	0x2003e5a0
   d46c8:	2003df99 	.word	0x2003df99
   d46cc:	2003e5d0 	.word	0x2003e5d0
   d46d0:	000db5f8 	.word	0x000db5f8
   d46d4:	000db60c 	.word	0x000db60c
   d46d8:	2003e440 	.word	0x2003e440
   d46dc:	000db61a 	.word	0x000db61a
   d46e0:	000db62e 	.word	0x000db62e
   d46e4:	000db644 	.word	0x000db644
   d46e8:	000db659 	.word	0x000db659
   d46ec:	000db66e 	.word	0x000db66e

000d46f0 <_Z16setOperatingMode6String>:
int setOperatingMode(String Sensor){
   d46f0:	b500      	push	{lr}
   d46f2:	b0c5      	sub	sp, #276	; 0x114
  int tempSensor = strtol(Sensor,&pEND,10);                                                  // Looks for the first integer and interprets it
   d46f4:	6800      	ldr	r0, [r0, #0]
   d46f6:	220a      	movs	r2, #10
   d46f8:	a903      	add	r1, sp, #12
   d46fa:	f005 feb5 	bl	da468 <strtol>
  if ((tempSensor < 0) || (tempSensor >4) ) return 0;
   d46fe:	2804      	cmp	r0, #4
   d4700:	d818      	bhi.n	d4734 <_Z16setOperatingMode6String+0x44>
    sysStatus.operatingMode = tempSensor;
   d4702:	4b0d      	ldr	r3, [pc, #52]	; (d4738 <_Z16setOperatingMode6String+0x48>)
    snprintf(data, sizeof(data), "Operation Mode %i",tempSensor);
   d4704:	4a0d      	ldr	r2, [pc, #52]	; (d473c <_Z16setOperatingMode6String+0x4c>)
    sysStatus.operatingMode = tempSensor;
   d4706:	6298      	str	r0, [r3, #40]	; 0x28
    snprintf(data, sizeof(data), "Operation Mode %i",tempSensor);
   d4708:	f44f 7180 	mov.w	r1, #256	; 0x100
   d470c:	4603      	mov	r3, r0
   d470e:	a804      	add	r0, sp, #16
   d4710:	f002 fd90 	bl	d7234 <snprintf>
   d4714:	2300      	movs	r3, #0
    publishQueue.publish("Mode",data,PRIVATE);
   d4716:	f88d 3000 	strb.w	r3, [sp]
   d471a:	4b09      	ldr	r3, [pc, #36]	; (d4740 <_Z16setOperatingMode6String+0x50>)
   d471c:	4909      	ldr	r1, [pc, #36]	; (d4744 <_Z16setOperatingMode6String+0x54>)
   d471e:	781b      	ldrb	r3, [r3, #0]
   d4720:	4809      	ldr	r0, [pc, #36]	; (d4748 <_Z16setOperatingMode6String+0x58>)
   d4722:	aa04      	add	r2, sp, #16
   d4724:	f7ff fe34 	bl	d4390 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;  
   d4728:	4b08      	ldr	r3, [pc, #32]	; (d474c <_Z16setOperatingMode6String+0x5c>)
   d472a:	2001      	movs	r0, #1
   d472c:	7018      	strb	r0, [r3, #0]
}
   d472e:	b045      	add	sp, #276	; 0x114
   d4730:	f85d fb04 	ldr.w	pc, [sp], #4
  if ((tempSensor < 0) || (tempSensor >4) ) return 0;
   d4734:	2000      	movs	r0, #0
   d4736:	e7fa      	b.n	d472e <_Z16setOperatingMode6String+0x3e>
   d4738:	2003e5a0 	.word	0x2003e5a0
   d473c:	000db682 	.word	0x000db682
   d4740:	2003df99 	.word	0x2003df99
   d4744:	000db5f3 	.word	0x000db5f3
   d4748:	2003e440 	.word	0x2003e440
   d474c:	2003e5d0 	.word	0x2003e5d0

000d4750 <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                                                 // Default settings for the device - connected, not-low power and always on
   d4750:	b507      	push	{r0, r1, r2, lr}
   d4752:	f002 fca7 	bl	d70a4 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d4756:	b148      	cbz	r0, d476c <_Z18loadSystemDefaultsv+0x1c>
   d4758:	2300      	movs	r3, #0
   d475a:	f88d 3000 	strb.w	r3, [sp]
   d475e:	4b0e      	ldr	r3, [pc, #56]	; (d4798 <_Z18loadSystemDefaultsv+0x48>)
   d4760:	4a0e      	ldr	r2, [pc, #56]	; (d479c <_Z18loadSystemDefaultsv+0x4c>)
   d4762:	781b      	ldrb	r3, [r3, #0]
   d4764:	490e      	ldr	r1, [pc, #56]	; (d47a0 <_Z18loadSystemDefaultsv+0x50>)
   d4766:	480f      	ldr	r0, [pc, #60]	; (d47a4 <_Z18loadSystemDefaultsv+0x54>)
   d4768:	f7ff fe12 	bl	d4390 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.keepAlive = 120;
   d476c:	4a0e      	ldr	r2, [pc, #56]	; (d47a8 <_Z18loadSystemDefaultsv+0x58>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d476e:	480f      	ldr	r0, [pc, #60]	; (d47ac <_Z18loadSystemDefaultsv+0x5c>)
   d4770:	2378      	movs	r3, #120	; 0x78
   d4772:	6053      	str	r3, [r2, #4]
  sysStatus.structuresVersion = 1;
   d4774:	f240 1301 	movw	r3, #257	; 0x101
   d4778:	8013      	strh	r3, [r2, #0]
  sysStatus.verboseMode = false;
   d477a:	2300      	movs	r3, #0
   d477c:	7253      	strb	r3, [r2, #9]
  sysStatus.lowBatteryMode = false;
   d477e:	7293      	strb	r3, [r2, #10]
  sysStatus.operatingMode = 1;
   d4780:	2101      	movs	r1, #1
   d4782:	f44f 7316 	mov.w	r3, #600	; 0x258
   d4786:	e9c2 3109 	strd	r3, r1, [r2, #36]	; 0x24
   d478a:	2330      	movs	r3, #48	; 0x30
}
   d478c:	b003      	add	sp, #12
   d478e:	f85d eb04 	ldr.w	lr, [sp], #4
   d4792:	f001 ba96 	b.w	d5cc2 <_ZN6MB85RC9writeDataEjPKhj>
   d4796:	bf00      	nop
   d4798:	2003df99 	.word	0x2003df99
   d479c:	000db694 	.word	0x000db694
   d47a0:	000db5f3 	.word	0x000db5f3
   d47a4:	2003e440 	.word	0x2003e440
   d47a8:	2003e5a0 	.word	0x2003e5a0
   d47ac:	2003e410 	.word	0x2003e410

000d47b0 <_Z20loadConstantDefaultsv>:
void loadConstantDefaults(){                                                 // Default settings for sensor constants.
   d47b0:	b507      	push	{r0, r1, r2, lr}
   d47b2:	f002 fc77 	bl	d70a4 <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading Constant Defaults 90.9", PRIVATE);
   d47b6:	b148      	cbz	r0, d47cc <_Z20loadConstantDefaultsv+0x1c>
   d47b8:	2300      	movs	r3, #0
   d47ba:	f88d 3000 	strb.w	r3, [sp]
   d47be:	4b0b      	ldr	r3, [pc, #44]	; (d47ec <_Z20loadConstantDefaultsv+0x3c>)
   d47c0:	4a0b      	ldr	r2, [pc, #44]	; (d47f0 <_Z20loadConstantDefaultsv+0x40>)
   d47c2:	781b      	ldrb	r3, [r3, #0]
   d47c4:	490b      	ldr	r1, [pc, #44]	; (d47f4 <_Z20loadConstantDefaultsv+0x44>)
   d47c6:	480c      	ldr	r0, [pc, #48]	; (d47f8 <_Z20loadConstantDefaultsv+0x48>)
   d47c8:	f7ff fde2 	bl	d4390 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sensorConstants.sensorOneConstant = 90.9;
   d47cc:	4a0b      	ldr	r2, [pc, #44]	; (d47fc <_Z20loadConstantDefaultsv+0x4c>)
   d47ce:	4b0c      	ldr	r3, [pc, #48]	; (d4800 <_Z20loadConstantDefaultsv+0x50>)
   d47d0:	480c      	ldr	r0, [pc, #48]	; (d4804 <_Z20loadConstantDefaultsv+0x54>)
   d47d2:	6013      	str	r3, [r2, #0]
  sensorConstants.sensorTwoConstant = 90.9;
   d47d4:	6053      	str	r3, [r2, #4]
  sensorConstants.sensorThreeConstant = 90.9;
   d47d6:	6093      	str	r3, [r2, #8]
  sensorConstants.sensorFourConstant = 90.9;
   d47d8:	60d3      	str	r3, [r2, #12]
  sensorConstants.sensorFiveConstant = 90.9;
   d47da:	6113      	str	r3, [r2, #16]
  sensorConstants.sensorSixConstant = 90.9;
   d47dc:	6153      	str	r3, [r2, #20]
   d47de:	21a0      	movs	r1, #160	; 0xa0
   d47e0:	2318      	movs	r3, #24
}
   d47e2:	b003      	add	sp, #12
   d47e4:	f85d eb04 	ldr.w	lr, [sp], #4
   d47e8:	f001 ba6b 	b.w	d5cc2 <_ZN6MB85RC9writeDataEjPKhj>
   d47ec:	2003df99 	.word	0x2003df99
   d47f0:	000db6ac 	.word	0x000db6ac
   d47f4:	000db5f3 	.word	0x000db5f3
   d47f8:	2003e440 	.word	0x2003e440
   d47fc:	2003e498 	.word	0x2003e498
   d4800:	42b5cccd 	.word	0x42b5cccd
   d4804:	2003e410 	.word	0x2003e410

000d4808 <_Z17checkSystemValuesv>:
void checkSystemValues() {                                                                  // Checks to ensure that all system values are in reasonable range 
   d4808:	b510      	push	{r4, lr}
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d480a:	4c15      	ldr	r4, [pc, #84]	; (d4860 <_Z17checkSystemValuesv+0x58>)
   d480c:	7a23      	ldrb	r3, [r4, #8]
   d480e:	2b01      	cmp	r3, #1
   d4810:	d904      	bls.n	d481c <_Z17checkSystemValuesv+0x14>
   d4812:	f002 fc47 	bl	d70a4 <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d4816:	b300      	cbz	r0, d485a <_Z17checkSystemValuesv+0x52>
   d4818:	2301      	movs	r3, #1
   d481a:	7223      	strb	r3, [r4, #8]
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   d481c:	6863      	ldr	r3, [r4, #4]
  sysStatusWriteNeeded = true;
   d481e:	4a11      	ldr	r2, [pc, #68]	; (d4864 <_Z17checkSystemValuesv+0x5c>)
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   d4820:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   d4824:	bf84      	itt	hi
   d4826:	f44f 7316 	movhi.w	r3, #600	; 0x258
   d482a:	6063      	strhi	r3, [r4, #4]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = true;
   d482c:	7a63      	ldrb	r3, [r4, #9]
   d482e:	2b01      	cmp	r3, #1
   d4830:	bf84      	itt	hi
   d4832:	2301      	movhi	r3, #1
   d4834:	7263      	strbhi	r3, [r4, #9]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
   d4836:	7aa3      	ldrb	r3, [r4, #10]
   d4838:	2b01      	cmp	r3, #1
   d483a:	bf84      	itt	hi
   d483c:	2300      	movhi	r3, #0
   d483e:	72a3      	strbhi	r3, [r4, #10]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d4840:	6963      	ldr	r3, [r4, #20]
   d4842:	2bff      	cmp	r3, #255	; 0xff
   d4844:	bf84      	itt	hi
   d4846:	2300      	movhi	r3, #0
   d4848:	6163      	strhi	r3, [r4, #20]
  if (sysStatus.operatingMode<0 || sysStatus.operatingMode>5) sysStatus.operatingMode = 1;
   d484a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d484c:	2b05      	cmp	r3, #5
   d484e:	f04f 0301 	mov.w	r3, #1
  sysStatusWriteNeeded = true;
   d4852:	7013      	strb	r3, [r2, #0]
  if (sysStatus.operatingMode<0 || sysStatus.operatingMode>5) sysStatus.operatingMode = 1;
   d4854:	bf88      	it	hi
   d4856:	62a3      	strhi	r3, [r4, #40]	; 0x28
}
   d4858:	bd10      	pop	{r4, pc}
    else sysStatus.connectedStatus = false;
   d485a:	7220      	strb	r0, [r4, #8]
   d485c:	e7de      	b.n	d481c <_Z17checkSystemValuesv+0x14>
   d485e:	bf00      	nop
   d4860:	2003e5a0 	.word	0x2003e5a0
   d4864:	2003e5d0 	.word	0x2003e5d0

000d4868 <_Z11petWatchdogv>:
{
   d4868:	b507      	push	{r0, r1, r2, lr}
  digitalWrite(donePin, HIGH);                                                              // Pet the watchdog
   d486a:	2101      	movs	r1, #1
   d486c:	2005      	movs	r0, #5
   d486e:	f003 ffb4 	bl	d87da <digitalWrite>
  digitalWrite(donePin, LOW);
   d4872:	2100      	movs	r1, #0
   d4874:	2005      	movs	r0, #5
   d4876:	f003 ffb0 	bl	d87da <digitalWrite>
  watchdogFlag = false;
   d487a:	4a09      	ldr	r2, [pc, #36]	; (d48a0 <_Z11petWatchdogv+0x38>)
   d487c:	2300      	movs	r3, #0
   d487e:	7013      	strb	r3, [r2, #0]
  if (Particle.connected && sysStatus.verboseMode) publishQueue.publish("Watchdog","Petted",PRIVATE);
   d4880:	4a08      	ldr	r2, [pc, #32]	; (d48a4 <_Z11petWatchdogv+0x3c>)
   d4882:	7a52      	ldrb	r2, [r2, #9]
   d4884:	b142      	cbz	r2, d4898 <_Z11petWatchdogv+0x30>
   d4886:	f88d 3000 	strb.w	r3, [sp]
   d488a:	4b07      	ldr	r3, [pc, #28]	; (d48a8 <_Z11petWatchdogv+0x40>)
   d488c:	4a07      	ldr	r2, [pc, #28]	; (d48ac <_Z11petWatchdogv+0x44>)
   d488e:	781b      	ldrb	r3, [r3, #0]
   d4890:	4907      	ldr	r1, [pc, #28]	; (d48b0 <_Z11petWatchdogv+0x48>)
   d4892:	4808      	ldr	r0, [pc, #32]	; (d48b4 <_Z11petWatchdogv+0x4c>)
   d4894:	f7ff fd7c 	bl	d4390 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4898:	b003      	add	sp, #12
   d489a:	f85d fb04 	ldr.w	pc, [sp], #4
   d489e:	bf00      	nop
   d48a0:	2003e5d1 	.word	0x2003e5d1
   d48a4:	2003e5a0 	.word	0x2003e5a0
   d48a8:	2003df99 	.word	0x2003df99
   d48ac:	000db6cb 	.word	0x000db6cb
   d48b0:	000db6d2 	.word	0x000db6d2
   d48b4:	2003e440 	.word	0x2003e440

000d48b8 <_Z9sendEventv>:
{
   d48b8:	b510      	push	{r4, lr}
  if (sysStatus.operatingMode == 1){
   d48ba:	4b58      	ldr	r3, [pc, #352]	; (d4a1c <_Z9sendEventv+0x164>)
   d48bc:	4c58      	ldr	r4, [pc, #352]	; (d4a20 <_Z9sendEventv+0x168>)
   d48be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d48c0:	2b01      	cmp	r3, #1
{
   d48c2:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
  if (sysStatus.operatingMode == 1){
   d48c6:	d143      	bne.n	d4950 <_Z9sendEventv+0x98>
    snprintf(data, sizeof(data), "{\"sensorOne\":%4.1f, \"sensorTwo\":%4.1f,  \"sensorThree\":%4.1f,  \"sensorFour\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":1}", sensorData.sensorOneCurrent,sensorData.sensorTwoCurrent,sensorData.sensorThreeCurrent,sensorData.sensorFourCurrent,sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d48c8:	6960      	ldr	r0, [r4, #20]
   d48ca:	f004 fa8d 	bl	d8de8 <__aeabi_f2d>
   d48ce:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d48d2:	6920      	ldr	r0, [r4, #16]
   d48d4:	f004 fa88 	bl	d8de8 <__aeabi_f2d>
   d48d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d48dc:	68e0      	ldr	r0, [r4, #12]
   d48de:	f004 fa83 	bl	d8de8 <__aeabi_f2d>
   d48e2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d48e6:	68a0      	ldr	r0, [r4, #8]
   d48e8:	f004 fa7e 	bl	d8de8 <__aeabi_f2d>
   d48ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d48f0:	6860      	ldr	r0, [r4, #4]
   d48f2:	f004 fa79 	bl	d8de8 <__aeabi_f2d>
   d48f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d48fa:	6820      	ldr	r0, [r4, #0]
   d48fc:	f004 fa74 	bl	d8de8 <__aeabi_f2d>
   d4900:	e9cd 0100 	strd	r0, r1, [sp]
   d4904:	4a47      	ldr	r2, [pc, #284]	; (d4a24 <_Z9sendEventv+0x16c>)
    snprintf(data, sizeof(data), "{\"SensorOneR\":%4.1f, \"SensorOneS\":%4.1f,  \"SensorOneT\":%4.1f,  \"SensorOneN\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":4}", sensorData.Four_ThreePhaseLoad_I[0] ,sensorData.Four_ThreePhaseLoad_I[1],sensorData.Four_ThreePhaseLoad_I[2],sensorData.Four_ThreePhaseLoad_I[3],sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d4906:	f44f 7100 	mov.w	r1, #512	; 0x200
   d490a:	a80c      	add	r0, sp, #48	; 0x30
   d490c:	f002 fc92 	bl	d7234 <snprintf>
   d4910:	2300      	movs	r3, #0
  publishQueue.publish("powermonitoring_hook", data, PRIVATE);
   d4912:	f88d 3000 	strb.w	r3, [sp]
   d4916:	4b44      	ldr	r3, [pc, #272]	; (d4a28 <_Z9sendEventv+0x170>)
   d4918:	4944      	ldr	r1, [pc, #272]	; (d4a2c <_Z9sendEventv+0x174>)
   d491a:	781b      	ldrb	r3, [r3, #0]
   d491c:	4844      	ldr	r0, [pc, #272]	; (d4a30 <_Z9sendEventv+0x178>)
   d491e:	aa0c      	add	r2, sp, #48	; 0x30
   d4920:	f7ff fd36 	bl	d4390 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sensorData.sensorOnePrevious = sensorData.sensorOneCurrent;
   d4924:	6823      	ldr	r3, [r4, #0]
   d4926:	61a3      	str	r3, [r4, #24]
  sensorData.sensorTwoPrevious = sensorData.sensorTwoCurrent;
   d4928:	6863      	ldr	r3, [r4, #4]
   d492a:	61e3      	str	r3, [r4, #28]
  sensorData.sensorThreePrevious = sensorData.sensorThreeCurrent;
   d492c:	68a3      	ldr	r3, [r4, #8]
   d492e:	6223      	str	r3, [r4, #32]
  sensorData.sensorFourPrevious = sensorData.sensorFourCurrent;
   d4930:	68e3      	ldr	r3, [r4, #12]
   d4932:	6263      	str	r3, [r4, #36]	; 0x24
  sensorData.sensorFivePrevious = sensorData.sensorFiveCurrent;
   d4934:	6923      	ldr	r3, [r4, #16]
   d4936:	62a3      	str	r3, [r4, #40]	; 0x28
  sensorData.sensorSixPrevious = sensorData.sensorSixCurrent;
   d4938:	6963      	ldr	r3, [r4, #20]
   d493a:	62e3      	str	r3, [r4, #44]	; 0x2c
  dataInFlight = true;                                                                      // set the data inflight flag
   d493c:	4b3d      	ldr	r3, [pc, #244]	; (d4a34 <_Z9sendEventv+0x17c>)
   d493e:	2201      	movs	r2, #1
   d4940:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4942:	f002 f9c1 	bl	d6cc8 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d4946:	4b3c      	ldr	r3, [pc, #240]	; (d4a38 <_Z9sendEventv+0x180>)
   d4948:	6018      	str	r0, [r3, #0]
}
   d494a:	f50d 7d0c 	add.w	sp, sp, #560	; 0x230
   d494e:	bd10      	pop	{r4, pc}
  } else if (sysStatus.operatingMode == 2){
   d4950:	2b02      	cmp	r3, #2
   d4952:	d11f      	bne.n	d4994 <_Z9sendEventv+0xdc>
    snprintf(data, sizeof(data), "{\"SensorOneR\":%4.1f, \"SensorOneS\":%4.1f,  \"SensorOneT\":%4.1f,  \"sensorTwoR\":%4.1f,  \"sensorTwoS\":%4.1f,\"sensorTwoT\":%4.1f,\"Mode\":2}", sensorData.I_ThreePhaseLoad_One[0],sensorData.I_ThreePhaseLoad_One[1],sensorData.I_ThreePhaseLoad_One[2],sensorData.I_ThreePhaseLoad_Two[0],sensorData.I_ThreePhaseLoad_Two[1],sensorData.I_ThreePhaseLoad_Two[2]);
   d4954:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d4956:	f004 fa47 	bl	d8de8 <__aeabi_f2d>
   d495a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d495e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   d4960:	f004 fa42 	bl	d8de8 <__aeabi_f2d>
   d4964:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d4968:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   d496a:	f004 fa3d 	bl	d8de8 <__aeabi_f2d>
   d496e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d4972:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d4974:	f004 fa38 	bl	d8de8 <__aeabi_f2d>
   d4978:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d497c:	6b60      	ldr	r0, [r4, #52]	; 0x34
   d497e:	f004 fa33 	bl	d8de8 <__aeabi_f2d>
   d4982:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4986:	6b20      	ldr	r0, [r4, #48]	; 0x30
   d4988:	f004 fa2e 	bl	d8de8 <__aeabi_f2d>
   d498c:	4a2b      	ldr	r2, [pc, #172]	; (d4a3c <_Z9sendEventv+0x184>)
   d498e:	e9cd 0100 	strd	r0, r1, [sp]
   d4992:	e7b8      	b.n	d4906 <_Z9sendEventv+0x4e>
  }else if (sysStatus.operatingMode == 3){
   d4994:	2b03      	cmp	r3, #3
   d4996:	d11f      	bne.n	d49d8 <_Z9sendEventv+0x120>
    snprintf(data, sizeof(data), "{\"SensorOneR\":%4.1f, \"SensorOneS\":%4.1f,  \"SensorOneT\":%4.1f,  \"sensorFour\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":3}", sensorData.I_ThreePhaseLoad_One[0],sensorData.I_ThreePhaseLoad_One[1],sensorData.I_ThreePhaseLoad_One[2],sensorData.sensorFourCurrent,sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d4998:	6960      	ldr	r0, [r4, #20]
   d499a:	f004 fa25 	bl	d8de8 <__aeabi_f2d>
   d499e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d49a2:	6920      	ldr	r0, [r4, #16]
   d49a4:	f004 fa20 	bl	d8de8 <__aeabi_f2d>
   d49a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d49ac:	68e0      	ldr	r0, [r4, #12]
   d49ae:	f004 fa1b 	bl	d8de8 <__aeabi_f2d>
   d49b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d49b6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d49b8:	f004 fa16 	bl	d8de8 <__aeabi_f2d>
   d49bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d49c0:	6b60      	ldr	r0, [r4, #52]	; 0x34
   d49c2:	f004 fa11 	bl	d8de8 <__aeabi_f2d>
   d49c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d49ca:	6b20      	ldr	r0, [r4, #48]	; 0x30
   d49cc:	f004 fa0c 	bl	d8de8 <__aeabi_f2d>
   d49d0:	4a1b      	ldr	r2, [pc, #108]	; (d4a40 <_Z9sendEventv+0x188>)
   d49d2:	e9cd 0100 	strd	r0, r1, [sp]
   d49d6:	e796      	b.n	d4906 <_Z9sendEventv+0x4e>
  }else if (sysStatus.operatingMode == 4){
   d49d8:	2b04      	cmp	r3, #4
   d49da:	d199      	bne.n	d4910 <_Z9sendEventv+0x58>
    snprintf(data, sizeof(data), "{\"SensorOneR\":%4.1f, \"SensorOneS\":%4.1f,  \"SensorOneT\":%4.1f,  \"SensorOneN\":%4.1f,  \"sensorFive\":%4.1f,\"sensorSix\":%4.1f,\"Mode\":4}", sensorData.Four_ThreePhaseLoad_I[0] ,sensorData.Four_ThreePhaseLoad_I[1],sensorData.Four_ThreePhaseLoad_I[2],sensorData.Four_ThreePhaseLoad_I[3],sensorData.sensorFiveCurrent,sensorData.sensorSixCurrent);
   d49dc:	6960      	ldr	r0, [r4, #20]
   d49de:	f004 fa03 	bl	d8de8 <__aeabi_f2d>
   d49e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   d49e6:	6920      	ldr	r0, [r4, #16]
   d49e8:	f004 f9fe 	bl	d8de8 <__aeabi_f2d>
   d49ec:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d49f0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   d49f2:	f004 f9f9 	bl	d8de8 <__aeabi_f2d>
   d49f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d49fa:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   d49fc:	f004 f9f4 	bl	d8de8 <__aeabi_f2d>
   d4a00:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4a04:	6e60      	ldr	r0, [r4, #100]	; 0x64
   d4a06:	f004 f9ef 	bl	d8de8 <__aeabi_f2d>
   d4a0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d4a0e:	6e20      	ldr	r0, [r4, #96]	; 0x60
   d4a10:	f004 f9ea 	bl	d8de8 <__aeabi_f2d>
   d4a14:	4a0b      	ldr	r2, [pc, #44]	; (d4a44 <_Z9sendEventv+0x18c>)
   d4a16:	e9cd 0100 	strd	r0, r1, [sp]
   d4a1a:	e774      	b.n	d4906 <_Z9sendEventv+0x4e>
   d4a1c:	2003e5a0 	.word	0x2003e5a0
   d4a20:	2003e4b0 	.word	0x2003e4b0
   d4a24:	000db6db 	.word	0x000db6db
   d4a28:	2003df99 	.word	0x2003df99
   d4a2c:	000db8e7 	.word	0x000db8e7
   d4a30:	2003e440 	.word	0x2003e440
   d4a34:	2003dfbb 	.word	0x2003dfbb
   d4a38:	2003e5d4 	.word	0x2003e5d4
   d4a3c:	000db75d 	.word	0x000db75d
   d4a40:	000db7e1 	.word	0x000db7e1
   d4a44:	000db864 	.word	0x000db864

000d4a48 <_Z22publishStateTransitionv>:
{
   d4a48:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4a4a:	4d11      	ldr	r5, [pc, #68]	; (d4a90 <_Z22publishStateTransitionv+0x48>)
   d4a4c:	4c11      	ldr	r4, [pc, #68]	; (d4a94 <_Z22publishStateTransitionv+0x4c>)
   d4a4e:	4912      	ldr	r1, [pc, #72]	; (d4a98 <_Z22publishStateTransitionv+0x50>)
   d4a50:	782a      	ldrb	r2, [r5, #0]
   d4a52:	7820      	ldrb	r0, [r4, #0]
{
   d4a54:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4a56:	231a      	movs	r3, #26
   d4a58:	fb03 1202 	mla	r2, r3, r2, r1
   d4a5c:	9200      	str	r2, [sp, #0]
   d4a5e:	fb03 1300 	mla	r3, r3, r0, r1
   d4a62:	4a0e      	ldr	r2, [pc, #56]	; (d4a9c <_Z22publishStateTransitionv+0x54>)
   d4a64:	2128      	movs	r1, #40	; 0x28
   d4a66:	a802      	add	r0, sp, #8
   d4a68:	f002 fbe4 	bl	d7234 <snprintf>
  oldState = state;
   d4a6c:	782b      	ldrb	r3, [r5, #0]
   d4a6e:	7023      	strb	r3, [r4, #0]
   d4a70:	f002 fb18 	bl	d70a4 <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d4a74:	b148      	cbz	r0, d4a8a <_Z22publishStateTransitionv+0x42>
   d4a76:	2300      	movs	r3, #0
   d4a78:	f88d 3000 	strb.w	r3, [sp]
   d4a7c:	4b08      	ldr	r3, [pc, #32]	; (d4aa0 <_Z22publishStateTransitionv+0x58>)
   d4a7e:	4909      	ldr	r1, [pc, #36]	; (d4aa4 <_Z22publishStateTransitionv+0x5c>)
   d4a80:	781b      	ldrb	r3, [r3, #0]
   d4a82:	4809      	ldr	r0, [pc, #36]	; (d4aa8 <_Z22publishStateTransitionv+0x60>)
   d4a84:	aa02      	add	r2, sp, #8
   d4a86:	f7ff fc83 	bl	d4390 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d4a8a:	b00d      	add	sp, #52	; 0x34
   d4a8c:	bd30      	pop	{r4, r5, pc}
   d4a8e:	bf00      	nop
   d4a90:	2003e59d 	.word	0x2003e59d
   d4a94:	2003e43c 	.word	0x2003e43c
   d4a98:	2003dbf8 	.word	0x2003dbf8
   d4a9c:	000db8fc 	.word	0x000db8fc
   d4aa0:	2003df99 	.word	0x2003df99
   d4aa4:	000db90a 	.word	0x000db90a
   d4aa8:	2003e440 	.word	0x2003e440

000d4aac <_Z17getBatteryContextv>:
{
   d4aac:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4aae:	4d0d      	ldr	r5, [pc, #52]	; (d4ae4 <_Z17getBatteryContextv+0x38>)
   d4ab0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   d4ab2:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4ab4:	ac01      	add	r4, sp, #4
   d4ab6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4ab8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d4abc:	4b0a      	ldr	r3, [pc, #40]	; (d4ae8 <_Z17getBatteryContextv+0x3c>)
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4abe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[sysStatus.batteryState]);
   d4ac2:	7c1b      	ldrb	r3, [r3, #16]
   d4ac4:	4809      	ldr	r0, [pc, #36]	; (d4aec <_Z17getBatteryContextv+0x40>)
   d4ac6:	aa08      	add	r2, sp, #32
   d4ac8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d4acc:	2110      	movs	r1, #16
   d4ace:	f853 3c1c 	ldr.w	r3, [r3, #-28]
   d4ad2:	4a07      	ldr	r2, [pc, #28]	; (d4af0 <_Z17getBatteryContextv+0x44>)
   d4ad4:	f002 fbae 	bl	d7234 <snprintf>
  sysStatusWriteNeeded = true;
   d4ad8:	4b06      	ldr	r3, [pc, #24]	; (d4af4 <_Z17getBatteryContextv+0x48>)
   d4ada:	2201      	movs	r2, #1
   d4adc:	701a      	strb	r2, [r3, #0]
}
   d4ade:	b009      	add	sp, #36	; 0x24
   d4ae0:	bd30      	pop	{r4, r5, pc}
   d4ae2:	bf00      	nop
   d4ae4:	000dbc20 	.word	0x000dbc20
   d4ae8:	2003e5a0 	.word	0x2003e5a0
   d4aec:	2003df9a 	.word	0x2003df9a
   d4af0:	000dbcfc 	.word	0x000dbcfc
   d4af4:	2003e5d0 	.word	0x2003e5d0

000d4af8 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>:
void Three_Phase_Monitor(uint8_t Wires,Load_Monitor::CT_Property_Struct Load_Name[],float *Current_rms_per_Phase,float *Power_rms_per_Phase){
   d4af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   float i_rms_per_Phase[p]={0};
   d4afc:	ea4f 0980 	mov.w	r9, r0, lsl #2
   d4b00:	f109 0407 	add.w	r4, r9, #7
void Three_Phase_Monitor(uint8_t Wires,Load_Monitor::CT_Property_Struct Load_Name[],float *Current_rms_per_Phase,float *Power_rms_per_Phase){
   d4b04:	b083      	sub	sp, #12
   float i_rms_per_Phase[p]={0};
   d4b06:	f404 64ff 	and.w	r4, r4, #2040	; 0x7f8
void Three_Phase_Monitor(uint8_t Wires,Load_Monitor::CT_Property_Struct Load_Name[],float *Current_rms_per_Phase,float *Power_rms_per_Phase){
   d4b0a:	af02      	add	r7, sp, #8
   float i_rms_per_Phase[p]={0};
   d4b0c:	ebad 0d04 	sub.w	sp, sp, r4
   d4b10:	ad02      	add	r5, sp, #8
   d4b12:	46ac      	mov	ip, r5
   d4b14:	f04f 0e00 	mov.w	lr, #0
   d4b18:	f84c eb04 	str.w	lr, [ip], #4
   d4b1c:	3802      	subs	r0, #2
   d4b1e:	2800      	cmp	r0, #0
   d4b20:	da2a      	bge.n	d4b78 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x80>
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d4b22:	f8df b068 	ldr.w	fp, [pc, #104]	; d4b8c <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x94>
  Power_rms_per_Phase[i]=((i_rms_per_Phase[i]*Vrms)/1000); //in kW
   d4b26:	f8df a068 	ldr.w	sl, [pc, #104]	; d4b90 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x98>
   d4b2a:	460c      	mov	r4, r1
   d4b2c:	4690      	mov	r8, r2
   d4b2e:	461e      	mov	r6, r3
   d4b30:	44a9      	add	r9, r5
  for (uint8_t i=0;i<p;i++){
   d4b32:	454d      	cmp	r5, r9
   d4b34:	d024      	beq.n	d4b80 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x88>
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d4b36:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
   d4b3a:	e88d 0003 	stmia.w	sp, {r0, r1}
   d4b3e:	4658      	mov	r0, fp
   d4b40:	e894 000c 	ldmia.w	r4, {r2, r3}
   d4b44:	f000 ff18 	bl	d5978 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE>
   d4b48:	ec51 0b10 	vmov	r0, r1, d0
   d4b4c:	f004 fc74 	bl	d9438 <__aeabi_d2f>
  Current_rms_per_Phase[i]=i_rms_per_Phase[i];
   d4b50:	f848 0b04 	str.w	r0, [r8], #4
   i_rms_per_Phase[i]=KUMVA_IO.calcIrms(Load_Name[i]);
   d4b54:	f845 0b04 	str.w	r0, [r5], #4
  Power_rms_per_Phase[i]=((i_rms_per_Phase[i]*Vrms)/1000); //in kW
   d4b58:	f004 f946 	bl	d8de8 <__aeabi_f2d>
   d4b5c:	e9da 2300 	ldrd	r2, r3, [sl]
   d4b60:	f004 f99a 	bl	d8e98 <__aeabi_dmul>
   d4b64:	4b08      	ldr	r3, [pc, #32]	; (d4b88 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x90>)
   d4b66:	2200      	movs	r2, #0
   d4b68:	f004 fac0 	bl	d90ec <__aeabi_ddiv>
   d4b6c:	f004 fc64 	bl	d9438 <__aeabi_d2f>
   d4b70:	3410      	adds	r4, #16
   d4b72:	f846 0b04 	str.w	r0, [r6], #4
  for (uint8_t i=0;i<p;i++){
   d4b76:	e7dc      	b.n	d4b32 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x3a>
   float i_rms_per_Phase[p]={0};
   d4b78:	f84c eb04 	str.w	lr, [ip], #4
   d4b7c:	3801      	subs	r0, #1
   d4b7e:	e7ce      	b.n	d4b1e <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_+0x26>
}
   d4b80:	3704      	adds	r7, #4
   d4b82:	46bd      	mov	sp, r7
   d4b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4b88:	408f4000 	.word	0x408f4000
   d4b8c:	2003deb0 	.word	0x2003deb0
   d4b90:	2003dbf0 	.word	0x2003dbf0

000d4b94 <_Z11loadEmonlibv>:
void loadEmonlib(){
   d4b94:	b510      	push	{r4, lr}
  emon1.current(CT1_PIN,sensorConstants.sensorOneConstant);
   d4b96:	4c1f      	ldr	r4, [pc, #124]	; (d4c14 <_Z11loadEmonlibv+0x80>)
   d4b98:	6820      	ldr	r0, [r4, #0]
   d4b9a:	f004 f925 	bl	d8de8 <__aeabi_f2d>
   d4b9e:	4b1e      	ldr	r3, [pc, #120]	; (d4c18 <_Z11loadEmonlibv+0x84>)
   d4ba0:	ec41 0b10 	vmov	d0, r0, r1
   d4ba4:	7819      	ldrb	r1, [r3, #0]
   d4ba6:	481d      	ldr	r0, [pc, #116]	; (d4c1c <_Z11loadEmonlibv+0x88>)
   d4ba8:	f000 ff5a 	bl	d5a60 <_ZN13EnergyMonitor7currentEjd>
  emon2.current(CT2_PIN,sensorConstants.sensorTwoConstant);
   d4bac:	6860      	ldr	r0, [r4, #4]
   d4bae:	f004 f91b 	bl	d8de8 <__aeabi_f2d>
   d4bb2:	4b1b      	ldr	r3, [pc, #108]	; (d4c20 <_Z11loadEmonlibv+0x8c>)
   d4bb4:	ec41 0b10 	vmov	d0, r0, r1
   d4bb8:	7819      	ldrb	r1, [r3, #0]
   d4bba:	481a      	ldr	r0, [pc, #104]	; (d4c24 <_Z11loadEmonlibv+0x90>)
   d4bbc:	f000 ff50 	bl	d5a60 <_ZN13EnergyMonitor7currentEjd>
  emon3.current(CT3_PIN,sensorConstants.sensorThreeConstant);
   d4bc0:	68a0      	ldr	r0, [r4, #8]
   d4bc2:	f004 f911 	bl	d8de8 <__aeabi_f2d>
   d4bc6:	4b18      	ldr	r3, [pc, #96]	; (d4c28 <_Z11loadEmonlibv+0x94>)
   d4bc8:	ec41 0b10 	vmov	d0, r0, r1
   d4bcc:	7819      	ldrb	r1, [r3, #0]
   d4bce:	4817      	ldr	r0, [pc, #92]	; (d4c2c <_Z11loadEmonlibv+0x98>)
   d4bd0:	f000 ff46 	bl	d5a60 <_ZN13EnergyMonitor7currentEjd>
  emon4.current(CT4_PIN,sensorConstants.sensorFourConstant);
   d4bd4:	68e0      	ldr	r0, [r4, #12]
   d4bd6:	f004 f907 	bl	d8de8 <__aeabi_f2d>
   d4bda:	4b15      	ldr	r3, [pc, #84]	; (d4c30 <_Z11loadEmonlibv+0x9c>)
   d4bdc:	ec41 0b10 	vmov	d0, r0, r1
   d4be0:	7819      	ldrb	r1, [r3, #0]
   d4be2:	4814      	ldr	r0, [pc, #80]	; (d4c34 <_Z11loadEmonlibv+0xa0>)
   d4be4:	f000 ff3c 	bl	d5a60 <_ZN13EnergyMonitor7currentEjd>
  emon5.current(CT5_PIN,sensorConstants.sensorFiveConstant);
   d4be8:	6920      	ldr	r0, [r4, #16]
   d4bea:	f004 f8fd 	bl	d8de8 <__aeabi_f2d>
   d4bee:	4b12      	ldr	r3, [pc, #72]	; (d4c38 <_Z11loadEmonlibv+0xa4>)
   d4bf0:	ec41 0b10 	vmov	d0, r0, r1
   d4bf4:	7819      	ldrb	r1, [r3, #0]
   d4bf6:	4811      	ldr	r0, [pc, #68]	; (d4c3c <_Z11loadEmonlibv+0xa8>)
   d4bf8:	f000 ff32 	bl	d5a60 <_ZN13EnergyMonitor7currentEjd>
  emon6.current(CT6_PIN,sensorConstants.sensorSixConstant);
   d4bfc:	6960      	ldr	r0, [r4, #20]
   d4bfe:	f004 f8f3 	bl	d8de8 <__aeabi_f2d>
   d4c02:	4b0f      	ldr	r3, [pc, #60]	; (d4c40 <_Z11loadEmonlibv+0xac>)
   d4c04:	ec41 0b10 	vmov	d0, r0, r1
}
   d4c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  emon6.current(CT6_PIN,sensorConstants.sensorSixConstant);
   d4c0c:	7819      	ldrb	r1, [r3, #0]
   d4c0e:	480d      	ldr	r0, [pc, #52]	; (d4c44 <_Z11loadEmonlibv+0xb0>)
   d4c10:	f000 bf26 	b.w	d5a60 <_ZN13EnergyMonitor7currentEjd>
   d4c14:	2003e498 	.word	0x2003e498
   d4c18:	2003dbe8 	.word	0x2003dbe8
   d4c1c:	2003dfc0 	.word	0x2003dfc0
   d4c20:	2003dbe9 	.word	0x2003dbe9
   d4c24:	2003e078 	.word	0x2003e078
   d4c28:	2003dbea 	.word	0x2003dbea
   d4c2c:	2003e130 	.word	0x2003e130
   d4c30:	2003dbeb 	.word	0x2003dbeb
   d4c34:	2003e1e8 	.word	0x2003e1e8
   d4c38:	2003dbec 	.word	0x2003dbec
   d4c3c:	2003e2a0 	.word	0x2003e2a0
   d4c40:	2003dbed 	.word	0x2003dbed
   d4c44:	2003e358 	.word	0x2003e358

000d4c48 <_Z20updateConstantValuesv>:
{   
   d4c48:	b513      	push	{r0, r1, r4, lr}
    snprintf(sensorOneConstantStr,sizeof(sensorOneConstantStr),"Constant One: %3.1f", sensorConstants.sensorOneConstant);
   d4c4a:	4c22      	ldr	r4, [pc, #136]	; (d4cd4 <_Z20updateConstantValuesv+0x8c>)
   d4c4c:	6820      	ldr	r0, [r4, #0]
   d4c4e:	f004 f8cb 	bl	d8de8 <__aeabi_f2d>
   d4c52:	4a21      	ldr	r2, [pc, #132]	; (d4cd8 <_Z20updateConstantValuesv+0x90>)
   d4c54:	e9cd 0100 	strd	r0, r1, [sp]
   d4c58:	2110      	movs	r1, #16
   d4c5a:	4820      	ldr	r0, [pc, #128]	; (d4cdc <_Z20updateConstantValuesv+0x94>)
   d4c5c:	f002 faea 	bl	d7234 <snprintf>
    snprintf(sensorTwoConstantStr,sizeof(sensorTwoConstantStr),"Constant Two %3.1f", sensorConstants.sensorTwoConstant);
   d4c60:	6860      	ldr	r0, [r4, #4]
   d4c62:	f004 f8c1 	bl	d8de8 <__aeabi_f2d>
   d4c66:	4a1e      	ldr	r2, [pc, #120]	; (d4ce0 <_Z20updateConstantValuesv+0x98>)
   d4c68:	e9cd 0100 	strd	r0, r1, [sp]
   d4c6c:	2110      	movs	r1, #16
   d4c6e:	481d      	ldr	r0, [pc, #116]	; (d4ce4 <_Z20updateConstantValuesv+0x9c>)
   d4c70:	f002 fae0 	bl	d7234 <snprintf>
    snprintf(sensorThreeConstantStr,sizeof(sensorThreeConstantStr),"Constant Three: %3.1f", sensorConstants.sensorThreeConstant);
   d4c74:	68a0      	ldr	r0, [r4, #8]
   d4c76:	f004 f8b7 	bl	d8de8 <__aeabi_f2d>
   d4c7a:	4a1b      	ldr	r2, [pc, #108]	; (d4ce8 <_Z20updateConstantValuesv+0xa0>)
   d4c7c:	e9cd 0100 	strd	r0, r1, [sp]
   d4c80:	2110      	movs	r1, #16
   d4c82:	481a      	ldr	r0, [pc, #104]	; (d4cec <_Z20updateConstantValuesv+0xa4>)
   d4c84:	f002 fad6 	bl	d7234 <snprintf>
    snprintf(sensorFourConstantStr,sizeof(sensorFourConstantStr),"Constant Four : %3.1f", sensorConstants.sensorFourConstant);
   d4c88:	68e0      	ldr	r0, [r4, #12]
   d4c8a:	f004 f8ad 	bl	d8de8 <__aeabi_f2d>
   d4c8e:	4a18      	ldr	r2, [pc, #96]	; (d4cf0 <_Z20updateConstantValuesv+0xa8>)
   d4c90:	e9cd 0100 	strd	r0, r1, [sp]
   d4c94:	2110      	movs	r1, #16
   d4c96:	4817      	ldr	r0, [pc, #92]	; (d4cf4 <_Z20updateConstantValuesv+0xac>)
   d4c98:	f002 facc 	bl	d7234 <snprintf>
    snprintf(sensorFiveConstantStr,sizeof(sensorFiveConstantStr),"Constant Five : %3.1f", sensorConstants.sensorFiveConstant);
   d4c9c:	6920      	ldr	r0, [r4, #16]
   d4c9e:	f004 f8a3 	bl	d8de8 <__aeabi_f2d>
   d4ca2:	4a15      	ldr	r2, [pc, #84]	; (d4cf8 <_Z20updateConstantValuesv+0xb0>)
   d4ca4:	e9cd 0100 	strd	r0, r1, [sp]
   d4ca8:	2110      	movs	r1, #16
   d4caa:	4814      	ldr	r0, [pc, #80]	; (d4cfc <_Z20updateConstantValuesv+0xb4>)
   d4cac:	f002 fac2 	bl	d7234 <snprintf>
    snprintf(sensorSixConstantStr,sizeof(sensorSixConstantStr),"Constant Six : %3.1f", sensorConstants.sensorSixConstant);
   d4cb0:	6960      	ldr	r0, [r4, #20]
   d4cb2:	f004 f899 	bl	d8de8 <__aeabi_f2d>
   d4cb6:	4a12      	ldr	r2, [pc, #72]	; (d4d00 <_Z20updateConstantValuesv+0xb8>)
   d4cb8:	e9cd 0100 	strd	r0, r1, [sp]
   d4cbc:	2110      	movs	r1, #16
   d4cbe:	4811      	ldr	r0, [pc, #68]	; (d4d04 <_Z20updateConstantValuesv+0xbc>)
   d4cc0:	f002 fab8 	bl	d7234 <snprintf>
    loadEmonlib();
   d4cc4:	f7ff ff66 	bl	d4b94 <_Z11loadEmonlibv>
    constantsStatusWriteNeeded = true;                                                         // This function is called when there is a change so, we need to update the FRAM
   d4cc8:	4b0f      	ldr	r3, [pc, #60]	; (d4d08 <_Z20updateConstantValuesv+0xc0>)
   d4cca:	2201      	movs	r2, #1
   d4ccc:	701a      	strb	r2, [r3, #0]
} 
   d4cce:	b002      	add	sp, #8
   d4cd0:	bd10      	pop	{r4, pc}
   d4cd2:	bf00      	nop
   d4cd4:	2003e498 	.word	0x2003e498
   d4cd8:	000db91b 	.word	0x000db91b
   d4cdc:	2003e55d 	.word	0x2003e55d
   d4ce0:	000db92f 	.word	0x000db92f
   d4ce4:	2003e58d 	.word	0x2003e58d
   d4ce8:	000db942 	.word	0x000db942
   d4cec:	2003e57d 	.word	0x2003e57d
   d4cf0:	000db958 	.word	0x000db958
   d4cf4:	2003e54d 	.word	0x2003e54d
   d4cf8:	000db96e 	.word	0x000db96e
   d4cfc:	2003e53d 	.word	0x2003e53d
   d4d00:	000db984 	.word	0x000db984
   d4d04:	2003e56d 	.word	0x2003e56d
   d4d08:	2003dfba 	.word	0x2003dfba

000d4d0c <_Z16takeMeasurementsv>:
{
   d4d0c:	b538      	push	{r3, r4, r5, lr}
    sensorData.validData = false;
   d4d0e:	4c7d      	ldr	r4, [pc, #500]	; (d4f04 <_Z16takeMeasurementsv+0x1f8>)
    if ((sysStatus.operatingMode) == 1){
   d4d10:	4d7d      	ldr	r5, [pc, #500]	; (d4f08 <_Z16takeMeasurementsv+0x1fc>)
    sensorData.validData = false;
   d4d12:	2300      	movs	r3, #0
   d4d14:	f884 3088 	strb.w	r3, [r4, #136]	; 0x88
    loadEmonlib();
   d4d18:	f7ff ff3c 	bl	d4b94 <_Z11loadEmonlibv>
    getBatteryContext();     
   d4d1c:	f7ff fec6 	bl	d4aac <_Z17getBatteryContextv>
    if ((sysStatus.operatingMode) == 1){
   d4d20:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   d4d22:	2801      	cmp	r0, #1
   d4d24:	d14a      	bne.n	d4dbc <_Z16takeMeasurementsv+0xb0>
      if (sysStatus.sensorOneConnected) sensorData.sensorOneCurrent =   emon1.calcIrms(1480);
   d4d26:	7f2b      	ldrb	r3, [r5, #28]
   d4d28:	b14b      	cbz	r3, d4d3e <_Z16takeMeasurementsv+0x32>
   d4d2a:	4878      	ldr	r0, [pc, #480]	; (d4f0c <_Z16takeMeasurementsv+0x200>)
   d4d2c:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4d30:	f000 fea2 	bl	d5a78 <_ZN13EnergyMonitor8calcIrmsEj>
   d4d34:	ec51 0b10 	vmov	r0, r1, d0
   d4d38:	f004 fb7e 	bl	d9438 <__aeabi_d2f>
   d4d3c:	6020      	str	r0, [r4, #0]
      if (sysStatus.sensorTwoConnected) sensorData.sensorTwoCurrent =   emon2.calcIrms(1480);
   d4d3e:	7f6b      	ldrb	r3, [r5, #29]
   d4d40:	b14b      	cbz	r3, d4d56 <_Z16takeMeasurementsv+0x4a>
   d4d42:	4873      	ldr	r0, [pc, #460]	; (d4f10 <_Z16takeMeasurementsv+0x204>)
   d4d44:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4d48:	f000 fe96 	bl	d5a78 <_ZN13EnergyMonitor8calcIrmsEj>
   d4d4c:	ec51 0b10 	vmov	r0, r1, d0
   d4d50:	f004 fb72 	bl	d9438 <__aeabi_d2f>
   d4d54:	6060      	str	r0, [r4, #4]
      if (sysStatus.sensorThreeConnected) sensorData.sensorThreeCurrent=  emon3.calcIrms(1480);
   d4d56:	7fab      	ldrb	r3, [r5, #30]
   d4d58:	b14b      	cbz	r3, d4d6e <_Z16takeMeasurementsv+0x62>
   d4d5a:	486e      	ldr	r0, [pc, #440]	; (d4f14 <_Z16takeMeasurementsv+0x208>)
   d4d5c:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4d60:	f000 fe8a 	bl	d5a78 <_ZN13EnergyMonitor8calcIrmsEj>
   d4d64:	ec51 0b10 	vmov	r0, r1, d0
   d4d68:	f004 fb66 	bl	d9438 <__aeabi_d2f>
   d4d6c:	60a0      	str	r0, [r4, #8]
      if (sysStatus.sensorFourConnected) sensorData.sensorFourCurrent =  emon4.calcIrms(1480);
   d4d6e:	7feb      	ldrb	r3, [r5, #31]
   d4d70:	b14b      	cbz	r3, d4d86 <_Z16takeMeasurementsv+0x7a>
   d4d72:	4869      	ldr	r0, [pc, #420]	; (d4f18 <_Z16takeMeasurementsv+0x20c>)
   d4d74:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4d78:	f000 fe7e 	bl	d5a78 <_ZN13EnergyMonitor8calcIrmsEj>
   d4d7c:	ec51 0b10 	vmov	r0, r1, d0
   d4d80:	f004 fb5a 	bl	d9438 <__aeabi_d2f>
   d4d84:	60e0      	str	r0, [r4, #12]
      if (sysStatus.sensorFiveConnected) sensorData.sensorFiveCurrent =  emon5.calcIrms(1480);               
   d4d86:	f895 3020 	ldrb.w	r3, [r5, #32]
   d4d8a:	b14b      	cbz	r3, d4da0 <_Z16takeMeasurementsv+0x94>
   d4d8c:	4863      	ldr	r0, [pc, #396]	; (d4f1c <_Z16takeMeasurementsv+0x210>)
   d4d8e:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4d92:	f000 fe71 	bl	d5a78 <_ZN13EnergyMonitor8calcIrmsEj>
   d4d96:	ec51 0b10 	vmov	r0, r1, d0
   d4d9a:	f004 fb4d 	bl	d9438 <__aeabi_d2f>
   d4d9e:	6120      	str	r0, [r4, #16]
      if (sysStatus.sensorSixConnected) sensorData.sensorSixCurrent =   emon6.calcIrms(1480);  
   d4da0:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
   d4da4:	b1eb      	cbz	r3, d4de2 <_Z16takeMeasurementsv+0xd6>
   d4da6:	485e      	ldr	r0, [pc, #376]	; (d4f20 <_Z16takeMeasurementsv+0x214>)
   d4da8:	f44f 61b9 	mov.w	r1, #1480	; 0x5c8
   d4dac:	f000 fe64 	bl	d5a78 <_ZN13EnergyMonitor8calcIrmsEj>
   d4db0:	ec51 0b10 	vmov	r0, r1, d0
   d4db4:	f004 fb40 	bl	d9438 <__aeabi_d2f>
   d4db8:	6160      	str	r0, [r4, #20]
   d4dba:	e012      	b.n	d4de2 <_Z16takeMeasurementsv+0xd6>
    else if ((sysStatus.operatingMode) == 2){
   d4dbc:	2802      	cmp	r0, #2
   d4dbe:	f040 8089 	bne.w	d4ed4 <_Z16takeMeasurementsv+0x1c8>
      Three_Phase_Monitor(3,ThreePhaseLoadOne,sensorData.I_ThreePhaseLoad_One,sensorData.P_ThreePhaseLoad_One);
   d4dc2:	4958      	ldr	r1, [pc, #352]	; (d4f24 <_Z16takeMeasurementsv+0x218>)
   d4dc4:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   d4dc8:	f104 0230 	add.w	r2, r4, #48	; 0x30
   d4dcc:	2003      	movs	r0, #3
   d4dce:	f7ff fe93 	bl	d4af8 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
      Three_Phase_Monitor(3,ThreePhaseLoadTwo,sensorData.I_ThreePhaseLoad_Two,sensorData.P_ThreePhaseLoad_Two);
   d4dd2:	4955      	ldr	r1, [pc, #340]	; (d4f28 <_Z16takeMeasurementsv+0x21c>)
   d4dd4:	f104 0354 	add.w	r3, r4, #84	; 0x54
   d4dd8:	f104 0248 	add.w	r2, r4, #72	; 0x48
   d4ddc:	2003      	movs	r0, #3
   d4dde:	f7ff fe8b 	bl	d4af8 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
    if (((abs(sensorData.sensorOneCurrent)-(sensorData.sensorOnePrevious)) >= 1.5) || ((abs(sensorData.sensorTwoCurrent)-(sensorData.sensorTwoPrevious)) >= 1.5) || ((abs(sensorData.sensorThreeCurrent)-(sensorData.sensorThreePrevious)) >= 1.5) || ((abs(sensorData.sensorFourCurrent)-(sensorData.sensorFourPrevious)) >= 1.5) || ((abs(sensorData.sensorFiveCurrent)-(sensorData.sensorFivePrevious)) >= 1.5) || ((abs(sensorData.sensorSixCurrent)-(sensorData.sensorSixPrevious)) >= 1.5)) {
   d4de2:	edd4 7a00 	vldr	s15, [r4]
   d4de6:	ed94 7a06 	vldr	s14, [r4, #24]
   d4dea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4df2:	bfd8      	it	le
   d4df4:	eef1 7a67 	vnegle.f32	s15, s15
   d4df8:	ee37 7ac7 	vsub.f32	s14, s15, s14
   d4dfc:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
   d4e00:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e08:	da59      	bge.n	d4ebe <_Z16takeMeasurementsv+0x1b2>
   d4e0a:	ed94 7a01 	vldr	s14, [r4, #4]
   d4e0e:	edd4 6a07 	vldr	s13, [r4, #28]
   d4e12:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e1a:	bfd8      	it	le
   d4e1c:	eeb1 7a47 	vnegle.f32	s14, s14
   d4e20:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4e24:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e2c:	da47      	bge.n	d4ebe <_Z16takeMeasurementsv+0x1b2>
   d4e2e:	ed94 7a02 	vldr	s14, [r4, #8]
   d4e32:	edd4 6a08 	vldr	s13, [r4, #32]
   d4e36:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e3e:	bfd8      	it	le
   d4e40:	eeb1 7a47 	vnegle.f32	s14, s14
   d4e44:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4e48:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e50:	da35      	bge.n	d4ebe <_Z16takeMeasurementsv+0x1b2>
   d4e52:	ed94 7a03 	vldr	s14, [r4, #12]
   d4e56:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
   d4e5a:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e62:	bfd8      	it	le
   d4e64:	eeb1 7a47 	vnegle.f32	s14, s14
   d4e68:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4e6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e74:	da23      	bge.n	d4ebe <_Z16takeMeasurementsv+0x1b2>
   d4e76:	ed94 7a04 	vldr	s14, [r4, #16]
   d4e7a:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
   d4e7e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e86:	bfd8      	it	le
   d4e88:	eeb1 7a47 	vnegle.f32	s14, s14
   d4e8c:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4e90:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4e98:	da11      	bge.n	d4ebe <_Z16takeMeasurementsv+0x1b2>
   d4e9a:	ed94 7a05 	vldr	s14, [r4, #20]
   d4e9e:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
   d4ea2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
   d4ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4eaa:	bfd8      	it	le
   d4eac:	eeb1 7a47 	vnegle.f32	s14, s14
   d4eb0:	ee37 7a66 	vsub.f32	s14, s14, s13
   d4eb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4ebc:	db1f      	blt.n	d4efe <_Z16takeMeasurementsv+0x1f2>
      sensorData.validData = true;
   d4ebe:	2501      	movs	r5, #1
   d4ec0:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
      sensorData.timeStamp = Time.now();
   d4ec4:	f003 fa5b 	bl	d837e <_ZN9TimeClass3nowEv>
      sensorDataWriteNeeded = true;
   d4ec8:	4b18      	ldr	r3, [pc, #96]	; (d4f2c <_Z16takeMeasurementsv+0x220>)
      sensorData.timeStamp = Time.now();
   d4eca:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
      sensorDataWriteNeeded = true;
   d4ece:	701d      	strb	r5, [r3, #0]
      return 1;
   d4ed0:	4628      	mov	r0, r5
  }
   d4ed2:	bd38      	pop	{r3, r4, r5, pc}
    else if (sysStatus.operatingMode == 3){
   d4ed4:	2803      	cmp	r0, #3
   d4ed6:	d107      	bne.n	d4ee8 <_Z16takeMeasurementsv+0x1dc>
      Three_Phase_Monitor(3,ThreePhaseLoadOne,sensorData.I_ThreePhaseLoad_One,sensorData.P_ThreePhaseLoad_One);
   d4ed8:	4912      	ldr	r1, [pc, #72]	; (d4f24 <_Z16takeMeasurementsv+0x218>)
   d4eda:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   d4ede:	f104 0230 	add.w	r2, r4, #48	; 0x30
   d4ee2:	f7ff fe09 	bl	d4af8 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
   d4ee6:	e742      	b.n	d4d6e <_Z16takeMeasurementsv+0x62>
    else if (sysStatus.operatingMode == 4){
   d4ee8:	2804      	cmp	r0, #4
   d4eea:	f47f af7a 	bne.w	d4de2 <_Z16takeMeasurementsv+0xd6>
      Three_Phase_Monitor(4,ThreePhaseLoadFourWires,sensorData.Four_ThreePhaseLoad_I,sensorData.Four_ThreePhaseLoad_P);
   d4eee:	4910      	ldr	r1, [pc, #64]	; (d4f30 <_Z16takeMeasurementsv+0x224>)
   d4ef0:	f104 0370 	add.w	r3, r4, #112	; 0x70
   d4ef4:	f104 0260 	add.w	r2, r4, #96	; 0x60
   d4ef8:	f7ff fdfe 	bl	d4af8 <_Z19Three_Phase_MonitorhPN12Load_Monitor7CT_DataEPfS2_>
   d4efc:	e743      	b.n	d4d86 <_Z16takeMeasurementsv+0x7a>
      } else return 0;
   d4efe:	2000      	movs	r0, #0
   d4f00:	e7e7      	b.n	d4ed2 <_Z16takeMeasurementsv+0x1c6>
   d4f02:	bf00      	nop
   d4f04:	2003e4b0 	.word	0x2003e4b0
   d4f08:	2003e5a0 	.word	0x2003e5a0
   d4f0c:	2003dfc0 	.word	0x2003dfc0
   d4f10:	2003e078 	.word	0x2003e078
   d4f14:	2003e130 	.word	0x2003e130
   d4f18:	2003e1e8 	.word	0x2003e1e8
   d4f1c:	2003e2a0 	.word	0x2003e2a0
   d4f20:	2003e358 	.word	0x2003e358
   d4f24:	2003df38 	.word	0x2003df38
   d4f28:	2003df68 	.word	0x2003df68
   d4f2c:	2003e53c 	.word	0x2003e53c
   d4f30:	2003def8 	.word	0x2003def8

000d4f34 <loop>:
void loop() {
   d4f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch(state) {
   d4f36:	4c75      	ldr	r4, [pc, #468]	; (d510c <loop+0x1d8>)
   d4f38:	7823      	ldrb	r3, [r4, #0]
   d4f3a:	3b01      	subs	r3, #1
   d4f3c:	2b05      	cmp	r3, #5
   d4f3e:	d817      	bhi.n	d4f70 <loop+0x3c>
   d4f40:	e8df f003 	tbb	[pc, r3]
   d4f44:	685c03be 	.word	0x685c03be
   d4f48:	8b42      	.short	0x8b42
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4f4a:	4b71      	ldr	r3, [pc, #452]	; (d5110 <loop+0x1dc>)
   d4f4c:	7a5b      	ldrb	r3, [r3, #9]
   d4f4e:	b12b      	cbz	r3, d4f5c <loop+0x28>
   d4f50:	4b70      	ldr	r3, [pc, #448]	; (d5114 <loop+0x1e0>)
   d4f52:	781b      	ldrb	r3, [r3, #0]
   d4f54:	2b02      	cmp	r3, #2
   d4f56:	d001      	beq.n	d4f5c <loop+0x28>
   d4f58:	f7ff fd76 	bl	d4a48 <_Z22publishStateTransitionv>
    if (!(Time.now() % wakeBoundary)) state = REPORTING_DETERMINATION;                                                     
   d4f5c:	f003 fa0f 	bl	d837e <_ZN9TimeClass3nowEv>
   d4f60:	230a      	movs	r3, #10
   d4f62:	fb90 f2f3 	sdiv	r2, r0, r3
   d4f66:	fb02 0313 	mls	r3, r2, r3, r0
   d4f6a:	b90b      	cbnz	r3, d4f70 <loop+0x3c>
   d4f6c:	2305      	movs	r3, #5
    else state = IDLE_STATE;
   d4f6e:	7023      	strb	r3, [r4, #0]
  rtc.loop();                                                                               // keeps the clock up to date
   d4f70:	4869      	ldr	r0, [pc, #420]	; (d5118 <loop+0x1e4>)
   d4f72:	f001 fa83 	bl	d647c <_ZN8MCP794104loopEv>
  if (watchdogFlag) petWatchdog();                                                          // Watchdog flag is raised - time to pet the watchdog
   d4f76:	4b69      	ldr	r3, [pc, #420]	; (d511c <loop+0x1e8>)
   d4f78:	781b      	ldrb	r3, [r3, #0]
   d4f7a:	b10b      	cbz	r3, d4f80 <loop+0x4c>
   d4f7c:	f7ff fc74 	bl	d4868 <_Z11petWatchdogv>
  if (sysStatusWriteNeeded) {
   d4f80:	4c67      	ldr	r4, [pc, #412]	; (d5120 <loop+0x1ec>)
   d4f82:	7823      	ldrb	r3, [r4, #0]
   d4f84:	b13b      	cbz	r3, d4f96 <loop+0x62>
   d4f86:	2330      	movs	r3, #48	; 0x30
   d4f88:	4a61      	ldr	r2, [pc, #388]	; (d5110 <loop+0x1dc>)
   d4f8a:	4866      	ldr	r0, [pc, #408]	; (d5124 <loop+0x1f0>)
   d4f8c:	2101      	movs	r1, #1
   d4f8e:	f000 fe98 	bl	d5cc2 <_ZN6MB85RC9writeDataEjPKhj>
    sysStatusWriteNeeded = false;
   d4f92:	2300      	movs	r3, #0
   d4f94:	7023      	strb	r3, [r4, #0]
  if (sensorDataWriteNeeded) {
   d4f96:	4c64      	ldr	r4, [pc, #400]	; (d5128 <loop+0x1f4>)
   d4f98:	7823      	ldrb	r3, [r4, #0]
   d4f9a:	b143      	cbz	r3, d4fae <loop+0x7a>
   d4f9c:	238c      	movs	r3, #140	; 0x8c
   d4f9e:	4a63      	ldr	r2, [pc, #396]	; (d512c <loop+0x1f8>)
   d4fa0:	4860      	ldr	r0, [pc, #384]	; (d5124 <loop+0x1f0>)
   d4fa2:	f44f 7100 	mov.w	r1, #512	; 0x200
   d4fa6:	f000 fe8c 	bl	d5cc2 <_ZN6MB85RC9writeDataEjPKhj>
    sensorDataWriteNeeded = false;
   d4faa:	2300      	movs	r3, #0
   d4fac:	7023      	strb	r3, [r4, #0]
  if (constantsStatusWriteNeeded) {
   d4fae:	4c60      	ldr	r4, [pc, #384]	; (d5130 <loop+0x1fc>)
   d4fb0:	7823      	ldrb	r3, [r4, #0]
   d4fb2:	b13b      	cbz	r3, d4fc4 <loop+0x90>
   d4fb4:	2318      	movs	r3, #24
   d4fb6:	4a5f      	ldr	r2, [pc, #380]	; (d5134 <loop+0x200>)
   d4fb8:	485a      	ldr	r0, [pc, #360]	; (d5124 <loop+0x1f0>)
   d4fba:	21a0      	movs	r1, #160	; 0xa0
   d4fbc:	f000 fe81 	bl	d5cc2 <_ZN6MB85RC9writeDataEjPKhj>
    constantsStatusWriteNeeded = false;
   d4fc0:	2300      	movs	r3, #0
   d4fc2:	7023      	strb	r3, [r4, #0]
}
   d4fc4:	b003      	add	sp, #12
   d4fc6:	bd30      	pop	{r4, r5, pc}
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4fc8:	4d51      	ldr	r5, [pc, #324]	; (d5110 <loop+0x1dc>)
   d4fca:	7a6a      	ldrb	r2, [r5, #9]
   d4fcc:	b12a      	cbz	r2, d4fda <loop+0xa6>
   d4fce:	4b51      	ldr	r3, [pc, #324]	; (d5114 <loop+0x1e0>)
   d4fd0:	781b      	ldrb	r3, [r3, #0]
   d4fd2:	2b05      	cmp	r3, #5
   d4fd4:	d001      	beq.n	d4fda <loop+0xa6>
   d4fd6:	f7ff fd37 	bl	d4a48 <_Z22publishStateTransitionv>
    if (takeMeasurements()) state = REPORTING_STATE;
   d4fda:	f7ff fe97 	bl	d4d0c <_Z16takeMeasurementsv>
   d4fde:	b108      	cbz	r0, d4fe4 <loop+0xb0>
    state = REPORTING_STATE;
   d4fe0:	2304      	movs	r3, #4
   d4fe2:	e7c4      	b.n	d4f6e <loop+0x3a>
    else if (!(Time.now() % sysStatus.reportingBoundary)) state = MEASURING_STATE;
   d4fe4:	f003 f9cb 	bl	d837e <_ZN9TimeClass3nowEv>
   d4fe8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d4fea:	fb90 f2f3 	sdiv	r2, r0, r3
   d4fee:	fb02 0313 	mls	r3, r2, r3, r0
   d4ff2:	b90b      	cbnz	r3, d4ff8 <loop+0xc4>
   d4ff4:	2303      	movs	r3, #3
   d4ff6:	e7ba      	b.n	d4f6e <loop+0x3a>
    else state = IDLE_STATE;
   d4ff8:	2302      	movs	r3, #2
   d4ffa:	e7b8      	b.n	d4f6e <loop+0x3a>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4ffc:	4b44      	ldr	r3, [pc, #272]	; (d5110 <loop+0x1dc>)
   d4ffe:	7a5b      	ldrb	r3, [r3, #9]
   d5000:	b12b      	cbz	r3, d500e <loop+0xda>
   d5002:	4b44      	ldr	r3, [pc, #272]	; (d5114 <loop+0x1e0>)
   d5004:	781b      	ldrb	r3, [r3, #0]
   d5006:	2b03      	cmp	r3, #3
   d5008:	d001      	beq.n	d500e <loop+0xda>
   d500a:	f7ff fd1d 	bl	d4a48 <_Z22publishStateTransitionv>
    takeMeasurements();
   d500e:	f7ff fe7d 	bl	d4d0c <_Z16takeMeasurementsv>
   d5012:	e7e5      	b.n	d4fe0 <loop+0xac>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();               // Reporting - hourly or on command
   d5014:	4b3e      	ldr	r3, [pc, #248]	; (d5110 <loop+0x1dc>)
   d5016:	7a5b      	ldrb	r3, [r3, #9]
   d5018:	b12b      	cbz	r3, d5026 <loop+0xf2>
   d501a:	4b3e      	ldr	r3, [pc, #248]	; (d5114 <loop+0x1e0>)
   d501c:	781b      	ldrb	r3, [r3, #0]
   d501e:	2b04      	cmp	r3, #4
   d5020:	d001      	beq.n	d5026 <loop+0xf2>
   d5022:	f7ff fd11 	bl	d4a48 <_Z22publishStateTransitionv>
   d5026:	f002 f83d 	bl	d70a4 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d502a:	b168      	cbz	r0, d5048 <loop+0x114>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d502c:	f003 f9b8 	bl	d83a0 <_ZN9TimeClass4hourEv>
   d5030:	280c      	cmp	r0, #12
   d5032:	d105      	bne.n	d5040 <loop+0x10c>
   d5034:	f002 f836 	bl	d70a4 <spark_cloud_flag_connected>
        if (!connected()) {
   d5038:	b110      	cbz	r0, d5040 <loop+0x10c>
        return spark_sync_time(NULL);
   d503a:	2000      	movs	r0, #0
   d503c:	f002 f852 	bl	d70e4 <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
   d5040:	f7ff fc3a 	bl	d48b8 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d5044:	2306      	movs	r3, #6
   d5046:	e792      	b.n	d4f6e <loop+0x3a>
        spark_cloud_flag_connect();
   d5048:	f002 f824 	bl	d7094 <spark_cloud_flag_connect>
      state = IDLE_STATE;
   d504c:	2302      	movs	r3, #2
   d504e:	7023      	strb	r3, [r4, #0]
   d5050:	f001 fe3a 	bl	d6cc8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d5054:	4b38      	ldr	r3, [pc, #224]	; (d5138 <loop+0x204>)
   d5056:	6018      	str	r0, [r3, #0]
   d5058:	e78a      	b.n	d4f70 <loop+0x3c>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d505a:	4b2d      	ldr	r3, [pc, #180]	; (d5110 <loop+0x1dc>)
   d505c:	7a5b      	ldrb	r3, [r3, #9]
   d505e:	b12b      	cbz	r3, d506c <loop+0x138>
   d5060:	4b2c      	ldr	r3, [pc, #176]	; (d5114 <loop+0x1e0>)
   d5062:	781b      	ldrb	r3, [r3, #0]
   d5064:	2b06      	cmp	r3, #6
   d5066:	d001      	beq.n	d506c <loop+0x138>
   d5068:	f7ff fcee 	bl	d4a48 <_Z22publishStateTransitionv>
    if (!dataInFlight && !(Time.now() % wakeBoundary))                                       // Response received back to IDLE state - make sure we don't allow repetivie reporting events
   d506c:	4b33      	ldr	r3, [pc, #204]	; (d513c <loop+0x208>)
   d506e:	781b      	ldrb	r3, [r3, #0]
   d5070:	b943      	cbnz	r3, d5084 <loop+0x150>
   d5072:	f003 f984 	bl	d837e <_ZN9TimeClass3nowEv>
   d5076:	230a      	movs	r3, #10
   d5078:	fb90 f2f3 	sdiv	r2, r0, r3
   d507c:	fb02 0313 	mls	r3, r2, r3, r0
   d5080:	2b00      	cmp	r3, #0
   d5082:	d0b9      	beq.n	d4ff8 <loop+0xc4>
   d5084:	f001 fe20 	bl	d6cc8 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {                                   // If it takes too long - will need to reset
   d5088:	4b2d      	ldr	r3, [pc, #180]	; (d5140 <loop+0x20c>)
   d508a:	681b      	ldr	r3, [r3, #0]
   d508c:	1ac0      	subs	r0, r0, r3
   d508e:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d5092:	4298      	cmp	r0, r3
   d5094:	f67f af6c 	bls.w	d4f70 <loop+0x3c>
   d5098:	f001 fe16 	bl	d6cc8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d509c:	4d26      	ldr	r5, [pc, #152]	; (d5138 <loop+0x204>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d509e:	4a29      	ldr	r2, [pc, #164]	; (d5144 <loop+0x210>)
      resetTimeStamp = millis();
   d50a0:	6028      	str	r0, [r5, #0]
   d50a2:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);                        // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d50a4:	f88d 3000 	strb.w	r3, [sp]
   d50a8:	4b27      	ldr	r3, [pc, #156]	; (d5148 <loop+0x214>)
   d50aa:	4928      	ldr	r1, [pc, #160]	; (d514c <loop+0x218>)
   d50ac:	781b      	ldrb	r3, [r3, #0]
   d50ae:	4828      	ldr	r0, [pc, #160]	; (d5150 <loop+0x21c>)
   d50b0:	f7ff f96e 	bl	d4390 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      state = ERROR_STATE;                                                                  // Response timed out
   d50b4:	2301      	movs	r3, #1
   d50b6:	7023      	strb	r3, [r4, #0]
   d50b8:	f001 fe06 	bl	d6cc8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d50bc:	6028      	str	r0, [r5, #0]
   d50be:	e757      	b.n	d4f70 <loop+0x3c>
    if (state != oldState) publishStateTransition();
   d50c0:	4b14      	ldr	r3, [pc, #80]	; (d5114 <loop+0x1e0>)
   d50c2:	781b      	ldrb	r3, [r3, #0]
   d50c4:	2b01      	cmp	r3, #1
   d50c6:	d001      	beq.n	d50cc <loop+0x198>
   d50c8:	f7ff fcbe 	bl	d4a48 <_Z22publishStateTransitionv>
   d50cc:	f001 fdfc 	bl	d6cc8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d50d0:	4b19      	ldr	r3, [pc, #100]	; (d5138 <loop+0x204>)
   d50d2:	681b      	ldr	r3, [r3, #0]
   d50d4:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d50d8:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d50dc:	4283      	cmp	r3, r0
   d50de:	f4bf af47 	bcs.w	d4f70 <loop+0x3c>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d50e2:	f001 ffdf 	bl	d70a4 <spark_cloud_flag_connected>
      if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE); // Brodcast Reset Action
   d50e6:	b148      	cbz	r0, d50fc <loop+0x1c8>
   d50e8:	2300      	movs	r3, #0
   d50ea:	f88d 3000 	strb.w	r3, [sp]
   d50ee:	4b16      	ldr	r3, [pc, #88]	; (d5148 <loop+0x214>)
   d50f0:	4a18      	ldr	r2, [pc, #96]	; (d5154 <loop+0x220>)
   d50f2:	781b      	ldrb	r3, [r3, #0]
   d50f4:	4918      	ldr	r1, [pc, #96]	; (d5158 <loop+0x224>)
   d50f6:	4816      	ldr	r0, [pc, #88]	; (d5150 <loop+0x21c>)
   d50f8:	f7ff f94a 	bl	d4390 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      delay(2000);
   d50fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d5100:	f002 f8e0 	bl	d72c4 <delay>
      System.reset();
   d5104:	f002 ffc0 	bl	d8088 <_ZN11SystemClass5resetEv>
   d5108:	e732      	b.n	d4f70 <loop+0x3c>
   d510a:	bf00      	nop
   d510c:	2003e59d 	.word	0x2003e59d
   d5110:	2003e5a0 	.word	0x2003e5a0
   d5114:	2003e43c 	.word	0x2003e43c
   d5118:	2003e47c 	.word	0x2003e47c
   d511c:	2003e5d1 	.word	0x2003e5d1
   d5120:	2003e5d0 	.word	0x2003e5d0
   d5124:	2003e410 	.word	0x2003e410
   d5128:	2003e53c 	.word	0x2003e53c
   d512c:	2003e4b0 	.word	0x2003e4b0
   d5130:	2003dfba 	.word	0x2003dfba
   d5134:	2003e498 	.word	0x2003e498
   d5138:	2003e478 	.word	0x2003e478
   d513c:	2003dfbb 	.word	0x2003dfbb
   d5140:	2003e5d4 	.word	0x2003e5d4
   d5144:	000dc0a8 	.word	0x000dc0a8
   d5148:	2003df99 	.word	0x2003df99
   d514c:	000db999 	.word	0x000db999
   d5150:	2003e440 	.word	0x2003e440
   d5154:	000db9b2 	.word	0x000db9b2
   d5158:	000db9c6 	.word	0x000db9c6

000d515c <_Z14setConstantOne6String>:
int setConstantOne(String command){
   d515c:	b500      	push	{lr}
   d515e:	b089      	sub	sp, #36	; 0x24
   d5160:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorOneConstant = command.toFloat();
   d5162:	f002 ff6f 	bl	d8044 <_ZNK6String7toFloatEv>
   d5166:	4b0e      	ldr	r3, [pc, #56]	; (d51a0 <_Z14setConstantOne6String+0x44>)
   d5168:	ed83 0a00 	vstr	s0, [r3]
  loadEmonlib();
   d516c:	f7ff fd12 	bl	d4b94 <_Z11loadEmonlibv>
  publishQueue.publish("Constant One Value set to ",String(command),PRIVATE);
   d5170:	9903      	ldr	r1, [sp, #12]
   d5172:	a804      	add	r0, sp, #16
   d5174:	f002 ff1c 	bl	d7fb0 <_ZN6StringC1ERKS_>
   d5178:	2300      	movs	r3, #0
   d517a:	f88d 3000 	strb.w	r3, [sp]
   d517e:	4b09      	ldr	r3, [pc, #36]	; (d51a4 <_Z14setConstantOne6String+0x48>)
   d5180:	9a04      	ldr	r2, [sp, #16]
   d5182:	781b      	ldrb	r3, [r3, #0]
   d5184:	4908      	ldr	r1, [pc, #32]	; (d51a8 <_Z14setConstantOne6String+0x4c>)
   d5186:	4809      	ldr	r0, [pc, #36]	; (d51ac <_Z14setConstantOne6String+0x50>)
   d5188:	f7ff f902 	bl	d4390 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d518c:	a804      	add	r0, sp, #16
   d518e:	f002 fea1 	bl	d7ed4 <_ZN6StringD1Ev>
  updateConstantValues();
   d5192:	f7ff fd59 	bl	d4c48 <_Z20updateConstantValuesv>
}
   d5196:	2001      	movs	r0, #1
   d5198:	b009      	add	sp, #36	; 0x24
   d519a:	f85d fb04 	ldr.w	pc, [sp], #4
   d519e:	bf00      	nop
   d51a0:	2003e498 	.word	0x2003e498
   d51a4:	2003df99 	.word	0x2003df99
   d51a8:	000db9cc 	.word	0x000db9cc
   d51ac:	2003e440 	.word	0x2003e440

000d51b0 <_Z14setConstantTwo6String>:
int setConstantTwo(String command){
   d51b0:	b500      	push	{lr}
   d51b2:	b089      	sub	sp, #36	; 0x24
   d51b4:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorTwoConstant = command.toFloat();
   d51b6:	f002 ff45 	bl	d8044 <_ZNK6String7toFloatEv>
   d51ba:	4b0e      	ldr	r3, [pc, #56]	; (d51f4 <_Z14setConstantTwo6String+0x44>)
   d51bc:	ed83 0a01 	vstr	s0, [r3, #4]
  loadEmonlib();
   d51c0:	f7ff fce8 	bl	d4b94 <_Z11loadEmonlibv>
  publishQueue.publish("Constant Two Value set to ",String(command),PRIVATE);
   d51c4:	9903      	ldr	r1, [sp, #12]
   d51c6:	a804      	add	r0, sp, #16
   d51c8:	f002 fef2 	bl	d7fb0 <_ZN6StringC1ERKS_>
   d51cc:	2300      	movs	r3, #0
   d51ce:	f88d 3000 	strb.w	r3, [sp]
   d51d2:	4b09      	ldr	r3, [pc, #36]	; (d51f8 <_Z14setConstantTwo6String+0x48>)
   d51d4:	9a04      	ldr	r2, [sp, #16]
   d51d6:	781b      	ldrb	r3, [r3, #0]
   d51d8:	4908      	ldr	r1, [pc, #32]	; (d51fc <_Z14setConstantTwo6String+0x4c>)
   d51da:	4809      	ldr	r0, [pc, #36]	; (d5200 <_Z14setConstantTwo6String+0x50>)
   d51dc:	f7ff f8d8 	bl	d4390 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d51e0:	a804      	add	r0, sp, #16
   d51e2:	f002 fe77 	bl	d7ed4 <_ZN6StringD1Ev>
  updateConstantValues();
   d51e6:	f7ff fd2f 	bl	d4c48 <_Z20updateConstantValuesv>
}
   d51ea:	2001      	movs	r0, #1
   d51ec:	b009      	add	sp, #36	; 0x24
   d51ee:	f85d fb04 	ldr.w	pc, [sp], #4
   d51f2:	bf00      	nop
   d51f4:	2003e498 	.word	0x2003e498
   d51f8:	2003df99 	.word	0x2003df99
   d51fc:	000db9e7 	.word	0x000db9e7
   d5200:	2003e440 	.word	0x2003e440

000d5204 <_Z16setConstantThree6String>:
int setConstantThree(String command){
   d5204:	b500      	push	{lr}
   d5206:	b089      	sub	sp, #36	; 0x24
   d5208:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorThreeConstant = command.toFloat();
   d520a:	f002 ff1b 	bl	d8044 <_ZNK6String7toFloatEv>
   d520e:	4b0e      	ldr	r3, [pc, #56]	; (d5248 <_Z16setConstantThree6String+0x44>)
   d5210:	ed83 0a02 	vstr	s0, [r3, #8]
  loadEmonlib();
   d5214:	f7ff fcbe 	bl	d4b94 <_Z11loadEmonlibv>
  publishQueue.publish("Constant Three Value set to ",String(command),PRIVATE);
   d5218:	9903      	ldr	r1, [sp, #12]
   d521a:	a804      	add	r0, sp, #16
   d521c:	f002 fec8 	bl	d7fb0 <_ZN6StringC1ERKS_>
   d5220:	2300      	movs	r3, #0
   d5222:	f88d 3000 	strb.w	r3, [sp]
   d5226:	4b09      	ldr	r3, [pc, #36]	; (d524c <_Z16setConstantThree6String+0x48>)
   d5228:	9a04      	ldr	r2, [sp, #16]
   d522a:	781b      	ldrb	r3, [r3, #0]
   d522c:	4908      	ldr	r1, [pc, #32]	; (d5250 <_Z16setConstantThree6String+0x4c>)
   d522e:	4809      	ldr	r0, [pc, #36]	; (d5254 <_Z16setConstantThree6String+0x50>)
   d5230:	f7ff f8ae 	bl	d4390 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5234:	a804      	add	r0, sp, #16
   d5236:	f002 fe4d 	bl	d7ed4 <_ZN6StringD1Ev>
  updateConstantValues();
   d523a:	f7ff fd05 	bl	d4c48 <_Z20updateConstantValuesv>
}
   d523e:	2001      	movs	r0, #1
   d5240:	b009      	add	sp, #36	; 0x24
   d5242:	f85d fb04 	ldr.w	pc, [sp], #4
   d5246:	bf00      	nop
   d5248:	2003e498 	.word	0x2003e498
   d524c:	2003df99 	.word	0x2003df99
   d5250:	000dba02 	.word	0x000dba02
   d5254:	2003e440 	.word	0x2003e440

000d5258 <_Z15setConstantFour6String>:
int setConstantFour(String command){
   d5258:	b500      	push	{lr}
   d525a:	b089      	sub	sp, #36	; 0x24
   d525c:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorFourConstant = command.toFloat();
   d525e:	f002 fef1 	bl	d8044 <_ZNK6String7toFloatEv>
   d5262:	4b0e      	ldr	r3, [pc, #56]	; (d529c <_Z15setConstantFour6String+0x44>)
   d5264:	ed83 0a03 	vstr	s0, [r3, #12]
  loadEmonlib();
   d5268:	f7ff fc94 	bl	d4b94 <_Z11loadEmonlibv>
  publishQueue.publish("Constant Four Value set to ",String(command),PRIVATE);
   d526c:	9903      	ldr	r1, [sp, #12]
   d526e:	a804      	add	r0, sp, #16
   d5270:	f002 fe9e 	bl	d7fb0 <_ZN6StringC1ERKS_>
   d5274:	2300      	movs	r3, #0
   d5276:	f88d 3000 	strb.w	r3, [sp]
   d527a:	4b09      	ldr	r3, [pc, #36]	; (d52a0 <_Z15setConstantFour6String+0x48>)
   d527c:	9a04      	ldr	r2, [sp, #16]
   d527e:	781b      	ldrb	r3, [r3, #0]
   d5280:	4908      	ldr	r1, [pc, #32]	; (d52a4 <_Z15setConstantFour6String+0x4c>)
   d5282:	4809      	ldr	r0, [pc, #36]	; (d52a8 <_Z15setConstantFour6String+0x50>)
   d5284:	f7ff f884 	bl	d4390 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5288:	a804      	add	r0, sp, #16
   d528a:	f002 fe23 	bl	d7ed4 <_ZN6StringD1Ev>
  updateConstantValues();
   d528e:	f7ff fcdb 	bl	d4c48 <_Z20updateConstantValuesv>
}
   d5292:	2001      	movs	r0, #1
   d5294:	b009      	add	sp, #36	; 0x24
   d5296:	f85d fb04 	ldr.w	pc, [sp], #4
   d529a:	bf00      	nop
   d529c:	2003e498 	.word	0x2003e498
   d52a0:	2003df99 	.word	0x2003df99
   d52a4:	000dba1f 	.word	0x000dba1f
   d52a8:	2003e440 	.word	0x2003e440

000d52ac <_Z15setConstantFive6String>:
int setConstantFive(String command){
   d52ac:	b500      	push	{lr}
   d52ae:	b089      	sub	sp, #36	; 0x24
   d52b0:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorFiveConstant = command.toFloat();
   d52b2:	f002 fec7 	bl	d8044 <_ZNK6String7toFloatEv>
   d52b6:	4b0e      	ldr	r3, [pc, #56]	; (d52f0 <_Z15setConstantFive6String+0x44>)
   d52b8:	ed83 0a04 	vstr	s0, [r3, #16]
  loadEmonlib();
   d52bc:	f7ff fc6a 	bl	d4b94 <_Z11loadEmonlibv>
  publishQueue.publish("Constant Five Value set to ",String(command),PRIVATE);
   d52c0:	9903      	ldr	r1, [sp, #12]
   d52c2:	a804      	add	r0, sp, #16
   d52c4:	f002 fe74 	bl	d7fb0 <_ZN6StringC1ERKS_>
   d52c8:	2300      	movs	r3, #0
   d52ca:	f88d 3000 	strb.w	r3, [sp]
   d52ce:	4b09      	ldr	r3, [pc, #36]	; (d52f4 <_Z15setConstantFive6String+0x48>)
   d52d0:	9a04      	ldr	r2, [sp, #16]
   d52d2:	781b      	ldrb	r3, [r3, #0]
   d52d4:	4908      	ldr	r1, [pc, #32]	; (d52f8 <_Z15setConstantFive6String+0x4c>)
   d52d6:	4809      	ldr	r0, [pc, #36]	; (d52fc <_Z15setConstantFive6String+0x50>)
   d52d8:	f7ff f85a 	bl	d4390 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d52dc:	a804      	add	r0, sp, #16
   d52de:	f002 fdf9 	bl	d7ed4 <_ZN6StringD1Ev>
  updateConstantValues();
   d52e2:	f7ff fcb1 	bl	d4c48 <_Z20updateConstantValuesv>
}
   d52e6:	2001      	movs	r0, #1
   d52e8:	b009      	add	sp, #36	; 0x24
   d52ea:	f85d fb04 	ldr.w	pc, [sp], #4
   d52ee:	bf00      	nop
   d52f0:	2003e498 	.word	0x2003e498
   d52f4:	2003df99 	.word	0x2003df99
   d52f8:	000dba3b 	.word	0x000dba3b
   d52fc:	2003e440 	.word	0x2003e440

000d5300 <_Z14setConstantSix6String>:
int setConstantSix(String command){
   d5300:	b500      	push	{lr}
   d5302:	b089      	sub	sp, #36	; 0x24
   d5304:	9003      	str	r0, [sp, #12]
  sensorConstants.sensorSixConstant = command.toFloat();
   d5306:	f002 fe9d 	bl	d8044 <_ZNK6String7toFloatEv>
   d530a:	4b0e      	ldr	r3, [pc, #56]	; (d5344 <_Z14setConstantSix6String+0x44>)
   d530c:	ed83 0a05 	vstr	s0, [r3, #20]
  loadEmonlib();
   d5310:	f7ff fc40 	bl	d4b94 <_Z11loadEmonlibv>
  publishQueue.publish("Constant Six Value set to ",String(command),PRIVATE);
   d5314:	9903      	ldr	r1, [sp, #12]
   d5316:	a804      	add	r0, sp, #16
   d5318:	f002 fe4a 	bl	d7fb0 <_ZN6StringC1ERKS_>
   d531c:	2300      	movs	r3, #0
   d531e:	f88d 3000 	strb.w	r3, [sp]
   d5322:	4b09      	ldr	r3, [pc, #36]	; (d5348 <_Z14setConstantSix6String+0x48>)
   d5324:	9a04      	ldr	r2, [sp, #16]
   d5326:	781b      	ldrb	r3, [r3, #0]
   d5328:	4908      	ldr	r1, [pc, #32]	; (d534c <_Z14setConstantSix6String+0x4c>)
   d532a:	4809      	ldr	r0, [pc, #36]	; (d5350 <_Z14setConstantSix6String+0x50>)
   d532c:	f7ff f830 	bl	d4390 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d5330:	a804      	add	r0, sp, #16
   d5332:	f002 fdcf 	bl	d7ed4 <_ZN6StringD1Ev>
  updateConstantValues();
   d5336:	f7ff fc87 	bl	d4c48 <_Z20updateConstantValuesv>
}
   d533a:	2001      	movs	r0, #1
   d533c:	b009      	add	sp, #36	; 0x24
   d533e:	f85d fb04 	ldr.w	pc, [sp], #4
   d5342:	bf00      	nop
   d5344:	2003e498 	.word	0x2003e498
   d5348:	2003df99 	.word	0x2003df99
   d534c:	000dba57 	.word	0x000dba57
   d5350:	2003e440 	.word	0x2003e440

000d5354 <setup>:
void setup() {
   d5354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d5358:	2100      	movs	r1, #0
void setup() {
   d535a:	b09a      	sub	sp, #104	; 0x68
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d535c:	2008      	movs	r0, #8
   d535e:	f003 fa2b 	bl	d87b8 <pinMode>
  pinMode(donePin,OUTPUT);                                                                  // Allows us to pet the watchdog
   d5362:	2101      	movs	r1, #1
   d5364:	2005      	movs	r0, #5
   d5366:	f003 fa27 	bl	d87b8 <pinMode>
  petWatchdog();                                                                            // Pet the watchdog - This will reset the watchdog time period AND 
   d536a:	f7ff fa7d 	bl	d4868 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                                          // The watchdog timer will signal us and we have to respond
   d536e:	2300      	movs	r3, #0
   d5370:	9300      	str	r3, [sp, #0]
   d5372:	2201      	movs	r2, #1
   d5374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d5378:	499a      	ldr	r1, [pc, #616]	; (d55e4 <setup+0x290>)
   d537a:	2008      	movs	r0, #8
   d537c:	f002 fbe4 	bl	d7b48 <_Z15attachInterrupttPFvvE13InterruptModeah>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d5380:	4b99      	ldr	r3, [pc, #612]	; (d55e8 <setup+0x294>)
   d5382:	aa0a      	add	r2, sp, #40	; 0x28
   d5384:	f103 0510 	add.w	r5, r3, #16
   d5388:	4617      	mov	r7, r2
   d538a:	6818      	ldr	r0, [r3, #0]
   d538c:	6859      	ldr	r1, [r3, #4]
   d538e:	4614      	mov	r4, r2
   d5390:	c403      	stmia	r4!, {r0, r1}
   d5392:	3308      	adds	r3, #8
   d5394:	42ab      	cmp	r3, r5
   d5396:	4622      	mov	r2, r4
   d5398:	d1f7      	bne.n	d538a <setup+0x36>
   d539a:	8819      	ldrh	r1, [r3, #0]
   d539c:	789b      	ldrb	r3, [r3, #2]
   d539e:	70a3      	strb	r3, [r4, #2]
   d53a0:	222d      	movs	r2, #45	; 0x2d
   d53a2:	8021      	strh	r1, [r4, #0]
   d53a4:	f10d 003b 	add.w	r0, sp, #59	; 0x3b
   d53a8:	2100      	movs	r1, #0
  state = INITIALIZATION_STATE;
   d53aa:	4c90      	ldr	r4, [pc, #576]	; (d55ec <setup+0x298>)
   d53ac:	4d90      	ldr	r5, [pc, #576]	; (d55f0 <setup+0x29c>)
   d53ae:	2600      	movs	r6, #0
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d53b0:	f004 f926 	bl	d9600 <memset>
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, std::chrono::seconds s) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, flag, s.count());
    }

    static String deviceID(void) {
        return spark_deviceID();
   d53b4:	a802      	add	r0, sp, #8
  state = INITIALIZATION_STATE;
   d53b6:	7026      	strb	r6, [r4, #0]
   d53b8:	f001 fe7c 	bl	d70b4 <spark_deviceID>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d53bc:	a902      	add	r1, sp, #8
   d53be:	a806      	add	r0, sp, #24
   d53c0:	f002 fdf6 	bl	d7fb0 <_ZN6StringC1ERKS_>
  Particle.subscribe(System.deviceID() + "/hook-response/powermonitoring_hook/", UbidotsHandler, MY_DEVICES);
   d53c4:	498b      	ldr	r1, [pc, #556]	; (d55f4 <setup+0x2a0>)
   d53c6:	a806      	add	r0, sp, #24
   d53c8:	f002 fe14 	bl	d7ff4 <_ZplRK15StringSumHelperPKc>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d53cc:	e9cd 6600 	strd	r6, r6, [sp]
   d53d0:	4633      	mov	r3, r6
   d53d2:	4632      	mov	r2, r6
   d53d4:	4988      	ldr	r1, [pc, #544]	; (d55f8 <setup+0x2a4>)
   d53d6:	6800      	ldr	r0, [r0, #0]
   d53d8:	f001 fe7c 	bl	d70d4 <spark_subscribe>
class StringSumHelper : public String
   d53dc:	a806      	add	r0, sp, #24
   d53de:	f002 fd79 	bl	d7ed4 <_ZN6StringD1Ev>
   d53e2:	a802      	add	r0, sp, #8
   d53e4:	f002 fd76 	bl	d7ed4 <_ZN6StringD1Ev>
        return _variable(varKey, var, STRING);
   d53e8:	4984      	ldr	r1, [pc, #528]	; (d55fc <setup+0x2a8>)
   d53ea:	4885      	ldr	r0, [pc, #532]	; (d5600 <setup+0x2ac>)
   d53ec:	f7fe ff3b 	bl	d4266 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d53f0:	4984      	ldr	r1, [pc, #528]	; (d5604 <setup+0x2b0>)
   d53f2:	4885      	ldr	r0, [pc, #532]	; (d5608 <setup+0x2b4>)
   d53f4:	f7fe ff37 	bl	d4266 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d53f8:	4984      	ldr	r1, [pc, #528]	; (d560c <setup+0x2b8>)
   d53fa:	4885      	ldr	r0, [pc, #532]	; (d5610 <setup+0x2bc>)
   d53fc:	f7fe ff33 	bl	d4266 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5400:	4984      	ldr	r1, [pc, #528]	; (d5614 <setup+0x2c0>)
   d5402:	4885      	ldr	r0, [pc, #532]	; (d5618 <setup+0x2c4>)
   d5404:	4633      	mov	r3, r6
   d5406:	2202      	movs	r2, #2
   d5408:	f001 fe2c 	bl	d7064 <spark_variable>
   d540c:	4633      	mov	r3, r6
   d540e:	2201      	movs	r2, #1
   d5410:	4982      	ldr	r1, [pc, #520]	; (d561c <setup+0x2c8>)
   d5412:	4883      	ldr	r0, [pc, #524]	; (d5620 <setup+0x2cc>)
   d5414:	f001 fe26 	bl	d7064 <spark_variable>
        return _variable(varKey, var, STRING);
   d5418:	4982      	ldr	r1, [pc, #520]	; (d5624 <setup+0x2d0>)
   d541a:	4883      	ldr	r0, [pc, #524]	; (d5628 <setup+0x2d4>)
   d541c:	f7fe ff23 	bl	d4266 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5420:	4982      	ldr	r1, [pc, #520]	; (d562c <setup+0x2d8>)
   d5422:	4883      	ldr	r0, [pc, #524]	; (d5630 <setup+0x2dc>)
   d5424:	f7fe ff1f 	bl	d4266 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5428:	4982      	ldr	r1, [pc, #520]	; (d5634 <setup+0x2e0>)
   d542a:	4883      	ldr	r0, [pc, #524]	; (d5638 <setup+0x2e4>)
   d542c:	f7fe ff1b 	bl	d4266 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5430:	4982      	ldr	r1, [pc, #520]	; (d563c <setup+0x2e8>)
   d5432:	4883      	ldr	r0, [pc, #524]	; (d5640 <setup+0x2ec>)
   d5434:	f7fe ff17 	bl	d4266 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5438:	4982      	ldr	r1, [pc, #520]	; (d5644 <setup+0x2f0>)
   d543a:	4883      	ldr	r0, [pc, #524]	; (d5648 <setup+0x2f4>)
   d543c:	f7fe ff13 	bl	d4266 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d5440:	4982      	ldr	r1, [pc, #520]	; (d564c <setup+0x2f8>)
   d5442:	4883      	ldr	r0, [pc, #524]	; (d5650 <setup+0x2fc>)
   d5444:	f7fe ff0f 	bl	d4266 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d5448:	4982      	ldr	r1, [pc, #520]	; (d5654 <setup+0x300>)
   d544a:	4883      	ldr	r0, [pc, #524]	; (d5658 <setup+0x304>)
   d544c:	4633      	mov	r3, r6
   d544e:	2202      	movs	r2, #2
   d5450:	f001 fe08 	bl	d7064 <spark_variable>
   d5454:	4633      	mov	r3, r6
   d5456:	2202      	movs	r2, #2
   d5458:	4980      	ldr	r1, [pc, #512]	; (d565c <setup+0x308>)
   d545a:	4881      	ldr	r0, [pc, #516]	; (d5660 <setup+0x30c>)
   d545c:	f001 fe02 	bl	d7064 <spark_variable>
        return _function(name, args...);
   d5460:	4980      	ldr	r1, [pc, #512]	; (d5664 <setup+0x310>)
   d5462:	4881      	ldr	r0, [pc, #516]	; (d5668 <setup+0x314>)
   d5464:	f7fe ff6a 	bl	d433c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5468:	4980      	ldr	r1, [pc, #512]	; (d566c <setup+0x318>)
   d546a:	4881      	ldr	r0, [pc, #516]	; (d5670 <setup+0x31c>)
   d546c:	f7fe ff66 	bl	d433c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5470:	4980      	ldr	r1, [pc, #512]	; (d5674 <setup+0x320>)
   d5472:	4881      	ldr	r0, [pc, #516]	; (d5678 <setup+0x324>)
   d5474:	f7fe ff62 	bl	d433c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5478:	4980      	ldr	r1, [pc, #512]	; (d567c <setup+0x328>)
   d547a:	4869      	ldr	r0, [pc, #420]	; (d5620 <setup+0x2cc>)
   d547c:	f7fe ff5e 	bl	d433c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5480:	497f      	ldr	r1, [pc, #508]	; (d5680 <setup+0x32c>)
   d5482:	4880      	ldr	r0, [pc, #512]	; (d5684 <setup+0x330>)
   d5484:	f7fe ff5a 	bl	d433c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5488:	497f      	ldr	r1, [pc, #508]	; (d5688 <setup+0x334>)
   d548a:	4880      	ldr	r0, [pc, #512]	; (d568c <setup+0x338>)
   d548c:	f7fe ff56 	bl	d433c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5490:	497f      	ldr	r1, [pc, #508]	; (d5690 <setup+0x33c>)
   d5492:	4880      	ldr	r0, [pc, #512]	; (d5694 <setup+0x340>)
   d5494:	f7fe ff52 	bl	d433c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d5498:	497f      	ldr	r1, [pc, #508]	; (d5698 <setup+0x344>)
   d549a:	4880      	ldr	r0, [pc, #512]	; (d569c <setup+0x348>)
   d549c:	f7fe ff4e 	bl	d433c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d54a0:	497f      	ldr	r1, [pc, #508]	; (d56a0 <setup+0x34c>)
   d54a2:	4880      	ldr	r0, [pc, #512]	; (d56a4 <setup+0x350>)
   d54a4:	f7fe ff4a 	bl	d433c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d54a8:	497f      	ldr	r1, [pc, #508]	; (d56a8 <setup+0x354>)
   d54aa:	4880      	ldr	r0, [pc, #512]	; (d56ac <setup+0x358>)
   d54ac:	f7fe ff46 	bl	d433c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d54b0:	497f      	ldr	r1, [pc, #508]	; (d56b0 <setup+0x35c>)
   d54b2:	4880      	ldr	r0, [pc, #512]	; (d56b4 <setup+0x360>)
   d54b4:	f7fe ff42 	bl	d433c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d54b8:	497f      	ldr	r1, [pc, #508]	; (d56b8 <setup+0x364>)
   d54ba:	4880      	ldr	r0, [pc, #512]	; (d56bc <setup+0x368>)
   d54bc:	f7fe ff3e 	bl	d433c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d54c0:	497f      	ldr	r1, [pc, #508]	; (d56c0 <setup+0x36c>)
   d54c2:	4880      	ldr	r0, [pc, #512]	; (d56c4 <setup+0x370>)
   d54c4:	f7fe ff3a 	bl	d433c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d54c8:	497f      	ldr	r1, [pc, #508]	; (d56c8 <setup+0x374>)
   d54ca:	4880      	ldr	r0, [pc, #512]	; (d56cc <setup+0x378>)
   d54cc:	f7fe ff36 	bl	d433c <_ZN10CloudClass9_functionEPKcPFi6StringE>
   d54d0:	497f      	ldr	r1, [pc, #508]	; (d56d0 <setup+0x37c>)
   d54d2:	4880      	ldr	r0, [pc, #512]	; (d56d4 <setup+0x380>)
   d54d4:	f7fe ff32 	bl	d433c <_ZN10CloudClass9_functionEPKcPFi6StringE>
  rtc.setup();                                                        // Start the real time clock
   d54d8:	487f      	ldr	r0, [pc, #508]	; (d56d8 <setup+0x384>)
   d54da:	f000 fec9 	bl	d6270 <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d54de:	4631      	mov	r1, r6
   d54e0:	487d      	ldr	r0, [pc, #500]	; (d56d8 <setup+0x384>)
   d54e2:	f001 f802 	bl	d64ea <_ZN8MCP7941010clearAlarmEi>
  fram.begin();                                                                             // Initialize the FRAM module
   d54e6:	487d      	ldr	r0, [pc, #500]	; (d56dc <setup+0x388>)
   d54e8:	f000 fb5e 	bl	d5ba8 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d54ec:	2301      	movs	r3, #1
   d54ee:	487b      	ldr	r0, [pc, #492]	; (d56dc <setup+0x388>)
   d54f0:	aa06      	add	r2, sp, #24
   d54f2:	4631      	mov	r1, r6
   d54f4:	f000 fb9a 	bl	d5c2c <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                                                   // Check to see if the memory map in the sketch matches the data on the chip
   d54f8:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d54fc:	2b11      	cmp	r3, #17
   d54fe:	d039      	beq.n	d5574 <setup+0x220>
    fram.erase();                                                                           // Reset the FRAM to correct the issue
   d5500:	4876      	ldr	r0, [pc, #472]	; (d56dc <setup+0x388>)
   d5502:	f000 fb5b 	bl	d5bbc <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d5506:	4a76      	ldr	r2, [pc, #472]	; (d56e0 <setup+0x38c>)
   d5508:	4874      	ldr	r0, [pc, #464]	; (d56dc <setup+0x388>)
   d550a:	2304      	movs	r3, #4
   d550c:	4631      	mov	r1, r6
   d550e:	f000 fbd8 	bl	d5cc2 <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d5512:	2301      	movs	r3, #1
   d5514:	4871      	ldr	r0, [pc, #452]	; (d56dc <setup+0x388>)
   d5516:	aa06      	add	r2, sp, #24
   d5518:	4631      	mov	r1, r6
   d551a:	f000 fb87 	bl	d5c2c <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;                              // Device will not work without FRAM
   d551e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5522:	2b11      	cmp	r3, #17
   d5524:	d021      	beq.n	d556a <setup+0x216>
   d5526:	2301      	movs	r3, #1
   d5528:	7023      	strb	r3, [r4, #0]
  checkSystemValues();                                                                      // Make sure System values are all in valid range
   d552a:	f7ff f96d 	bl	d4808 <_Z17checkSystemValuesv>
  loadEmonlib();
   d552e:	f7ff fb31 	bl	d4b94 <_Z11loadEmonlibv>
  if (sysStatus.thirdPartySim) {
   d5532:	786b      	ldrb	r3, [r5, #1]
   d5534:	b3cb      	cbz	r3, d55aa <setup+0x256>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, nullptr);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d5536:	2000      	movs	r0, #0
   d5538:	f001 fbd6 	bl	d6ce8 <hal_timer_millis>
   d553c:	f04f 0a00 	mov.w	sl, #0
   d5540:	4606      	mov	r6, r0
   d5542:	2000      	movs	r0, #0
   d5544:	f001 fbd0 	bl	d6ce8 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d5548:	ebb0 0806 	subs.w	r8, r0, r6
   d554c:	eb61 090a 	sbc.w	r9, r1, sl
        while (_while() && !_condition()) {
   d5550:	2300      	movs	r3, #0
   d5552:	f247 522f 	movw	r2, #29999	; 0x752f
   d5556:	454b      	cmp	r3, r9
   d5558:	bf08      	it	eq
   d555a:	4542      	cmpeq	r2, r8
   d555c:	d317      	bcc.n	d558e <setup+0x23a>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d555e:	f001 fda1 	bl	d70a4 <spark_cloud_flag_connected>
   d5562:	b9a0      	cbnz	r0, d558e <setup+0x23a>
            spark_process();
   d5564:	f001 fd8e 	bl	d7084 <spark_process>
        while (_while() && !_condition()) {
   d5568:	e7eb      	b.n	d5542 <setup+0x1ee>
      loadSystemDefaults();                                                                 // Out of the box, we need the device to be awake and connected
   d556a:	f7ff f8f1 	bl	d4750 <_Z18loadSystemDefaultsv>
      loadConstantDefaults();
   d556e:	f7ff f91f 	bl	d47b0 <_Z20loadConstantDefaultsv>
   d5572:	e7da      	b.n	d552a <setup+0x1d6>
   d5574:	4a5b      	ldr	r2, [pc, #364]	; (d56e4 <setup+0x390>)
   d5576:	4859      	ldr	r0, [pc, #356]	; (d56dc <setup+0x388>)
   d5578:	2318      	movs	r3, #24
   d557a:	21a0      	movs	r1, #160	; 0xa0
   d557c:	f000 fb56 	bl	d5c2c <_ZN6MB85RC8readDataEjPhj>
   d5580:	2330      	movs	r3, #48	; 0x30
   d5582:	462a      	mov	r2, r5
   d5584:	2101      	movs	r1, #1
   d5586:	4855      	ldr	r0, [pc, #340]	; (d56dc <setup+0x388>)
   d5588:	f000 fb50 	bl	d5c2c <_ZN6MB85RC8readDataEjPhj>
        return t;
   d558c:	e7cd      	b.n	d552a <setup+0x1d6>
   d558e:	f001 fd89 	bl	d70a4 <spark_cloud_flag_connected>
    Particle.keepAlive(sysStatus.keepAlive);                                              // Set the keep alive value
   d5592:	6868      	ldr	r0, [r5, #4]
   d5594:	f7fe fed8 	bl	d4348 <_ZN10CloudClass9keepAliveEj>
    keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
   d5598:	686b      	ldr	r3, [r5, #4]
   d559a:	4853      	ldr	r0, [pc, #332]	; (d56e8 <setup+0x394>)
   d559c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d55a0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   d55a4:	4359      	muls	r1, r3
   d55a6:	f7fe fee2 	bl	d436e <_ZN5Timer12changePeriodEjj>
  takeMeasurements();                                                                       // For the benefit of monitoring the device
   d55aa:	f7ff fbaf 	bl	d4d0c <_Z16takeMeasurementsv>
  if(sysStatus.verboseMode) publishQueue.publish("Startup",StartupMessage,PRIVATE);                       // Let Particle know how the startup process went
   d55ae:	7a6b      	ldrb	r3, [r5, #9]
   d55b0:	b14b      	cbz	r3, d55c6 <setup+0x272>
   d55b2:	2300      	movs	r3, #0
   d55b4:	f88d 3000 	strb.w	r3, [sp]
   d55b8:	4b4c      	ldr	r3, [pc, #304]	; (d56ec <setup+0x398>)
   d55ba:	494d      	ldr	r1, [pc, #308]	; (d56f0 <setup+0x39c>)
   d55bc:	781b      	ldrb	r3, [r3, #0]
   d55be:	484d      	ldr	r0, [pc, #308]	; (d56f4 <setup+0x3a0>)
   d55c0:	463a      	mov	r2, r7
   d55c2:	f7fe fee5 	bl	d4390 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d55c6:	f001 fd6d 	bl	d70a4 <spark_cloud_flag_connected>
   d55ca:	b910      	cbnz	r0, d55d2 <setup+0x27e>
            spark_process();
   d55cc:	f001 fd5a 	bl	d7084 <spark_process>
        while (_while() && !_condition()) {
   d55d0:	e7f9      	b.n	d55c6 <setup+0x272>
   d55d2:	f001 fd67 	bl	d70a4 <spark_cloud_flag_connected>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;                                    // We made it throughgo let's go to idle
   d55d6:	7823      	ldrb	r3, [r4, #0]
   d55d8:	b90b      	cbnz	r3, d55de <setup+0x28a>
   d55da:	2302      	movs	r3, #2
   d55dc:	7023      	strb	r3, [r4, #0]
}
   d55de:	b01a      	add	sp, #104	; 0x68
   d55e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d55e4:	000d40c9 	.word	0x000d40c9
   d55e8:	000dbc3c 	.word	0x000dbc3c
   d55ec:	2003e59d 	.word	0x2003e59d
   d55f0:	2003e5a0 	.word	0x2003e5a0
   d55f4:	000dba72 	.word	0x000dba72
   d55f8:	000d43ad 	.word	0x000d43ad
   d55fc:	000dbc7c 	.word	0x000dbc7c
   d5600:	000dba97 	.word	0x000dba97
   d5604:	2003dfaa 	.word	0x2003dfaa
   d5608:	000dba9f 	.word	0x000dba9f
   d560c:	2003df9a 	.word	0x2003df9a
   d5610:	000dbaa7 	.word	0x000dbaa7
   d5614:	2003e5a4 	.word	0x2003e5a4
   d5618:	000dbab6 	.word	0x000dbab6
   d561c:	2003e5a1 	.word	0x2003e5a1
   d5620:	000db568 	.word	0x000db568
   d5624:	2003e55d 	.word	0x2003e55d
   d5628:	000dbb04 	.word	0x000dbb04
   d562c:	2003e58d 	.word	0x2003e58d
   d5630:	000dbb15 	.word	0x000dbb15
   d5634:	2003e57d 	.word	0x2003e57d
   d5638:	000dbb26 	.word	0x000dbb26
   d563c:	2003e54d 	.word	0x2003e54d
   d5640:	000dbb39 	.word	0x000dbb39
   d5644:	2003e53d 	.word	0x2003e53d
   d5648:	000dbb4b 	.word	0x000dbb4b
   d564c:	2003e56d 	.word	0x2003e56d
   d5650:	000dbb5d 	.word	0x000dbb5d
   d5654:	2003e5c4 	.word	0x2003e5c4
   d5658:	000dbac5 	.word	0x000dbac5
   d565c:	2003e5c8 	.word	0x2003e5c8
   d5660:	000dbad8 	.word	0x000dbad8
   d5664:	000d40f1 	.word	0x000d40f1
   d5668:	000dbae7 	.word	0x000dbae7
   d566c:	000d45b1 	.word	0x000d45b1
   d5670:	000dbaf3 	.word	0x000dbaf3
   d5674:	000d44dd 	.word	0x000d44dd
   d5678:	000db5a5 	.word	0x000db5a5
   d567c:	000d4441 	.word	0x000d4441
   d5680:	000d515d 	.word	0x000d515d
   d5684:	000dbb00 	.word	0x000dbb00
   d5688:	000d51b1 	.word	0x000d51b1
   d568c:	000dbb11 	.word	0x000dbb11
   d5690:	000d5205 	.word	0x000d5205
   d5694:	000dbb22 	.word	0x000dbb22
   d5698:	000d5259 	.word	0x000d5259
   d569c:	000dbb35 	.word	0x000dbb35
   d56a0:	000d52ad 	.word	0x000d52ad
   d56a4:	000dbb47 	.word	0x000dbb47
   d56a8:	000d5301 	.word	0x000d5301
   d56ac:	000dbb59 	.word	0x000dbb59
   d56b0:	000d410d 	.word	0x000d410d
   d56b4:	000dbb6a 	.word	0x000dbb6a
   d56b8:	000d4631 	.word	0x000d4631
   d56bc:	000dbb78 	.word	0x000dbb78
   d56c0:	000d46f1 	.word	0x000d46f1
   d56c4:	000dbb87 	.word	0x000dbb87
   d56c8:	000d4559 	.word	0x000d4559
   d56cc:	000dbb96 	.word	0x000dbb96
   d56d0:	000d41a1 	.word	0x000d41a1
   d56d4:	000dbbb2 	.word	0x000dbbb2
   d56d8:	2003e47c 	.word	0x2003e47c
   d56dc:	2003e410 	.word	0x2003e410
   d56e0:	000dbc84 	.word	0x000dbc84
   d56e4:	2003e498 	.word	0x2003e498
   d56e8:	2003e420 	.word	0x2003e420
   d56ec:	2003df99 	.word	0x2003df99
   d56f0:	000dbbc0 	.word	0x000dbbc0
   d56f4:	2003e440 	.word	0x2003e440

000d56f8 <_GLOBAL__sub_I___appProductID>:
   d56f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        val_(val) {
   d56fc:	4b7c      	ldr	r3, [pc, #496]	; (d58f0 <_GLOBAL__sub_I___appProductID+0x1f8>)
              error_(SYSTEM_ERROR_NONE) {
   d56fe:	4d7d      	ldr	r5, [pc, #500]	; (d58f4 <_GLOBAL__sub_I___appProductID+0x1fc>)
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d5700:	4f7d      	ldr	r7, [pc, #500]	; (d58f8 <_GLOBAL__sub_I___appProductID+0x200>)
   d5702:	ed2d 8b06 	vpush	{d8-d10}
   d5706:	2601      	movs	r6, #1
   d5708:	701e      	strb	r6, [r3, #0]
   d570a:	4b7c      	ldr	r3, [pc, #496]	; (d58fc <_GLOBAL__sub_I___appProductID+0x204>)
   d570c:	2202      	movs	r2, #2
   d570e:	b089      	sub	sp, #36	; 0x24
   d5710:	701a      	strb	r2, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d5712:	f002 fffb 	bl	d870c <spark_protocol_instance>
   d5716:	2300      	movs	r3, #0
   d5718:	461a      	mov	r2, r3
   d571a:	f642 51d6 	movw	r1, #11734	; 0x2dd6
   d571e:	f002 fffd 	bl	d871c <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d5722:	f002 fff3 	bl	d870c <spark_protocol_instance>
   d5726:	2300      	movs	r3, #0
   d5728:	461a      	mov	r2, r3
   d572a:	2108      	movs	r1, #8
   d572c:	2400      	movs	r4, #0
   d572e:	f002 fffd 	bl	d872c <spark_protocol_set_product_firmware_version>
    SleepResult() {}
   d5732:	4b73      	ldr	r3, [pc, #460]	; (d5900 <_GLOBAL__sub_I___appProductID+0x208>)
   d5734:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   d5736:	602c      	str	r4, [r5, #0]
   d5738:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d573a:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d573c:	4630      	mov	r0, r6
   d573e:	f001 fc3b 	bl	d6fb8 <set_system_mode>
SYSTEM_MODE(AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d5742:	463a      	mov	r2, r7
   d5744:	496f      	ldr	r1, [pc, #444]	; (d5904 <_GLOBAL__sub_I___appProductID+0x20c>)
   d5746:	4628      	mov	r0, r5
   d5748:	f003 f8b8 	bl	d88bc <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   d574c:	4621      	mov	r1, r4
   d574e:	4630      	mov	r0, r6
   d5750:	f001 fc42 	bl	d6fd8 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d5754:	4631      	mov	r1, r6
   d5756:	2004      	movs	r0, #4
   d5758:	f001 fa96 	bl	d6c88 <HAL_Feature_Set>
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   d575c:	f003 f886 	bl	d886c <_Z19__fetch_global_Wirev>
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d5760:	4d69      	ldr	r5, [pc, #420]	; (d5908 <_GLOBAL__sub_I___appProductID+0x210>)
   d5762:	4601      	mov	r1, r0
   d5764:	4623      	mov	r3, r4
   d5766:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d576a:	4628      	mov	r0, r5
   d576c:	f000 fa12 	bl	d5b94 <_ZN6MB85RCC1ER7TwoWireji>
   d5770:	4b66      	ldr	r3, [pc, #408]	; (d590c <_GLOBAL__sub_I___appProductID+0x214>)
   d5772:	602b      	str	r3, [r5, #0]
   d5774:	463a      	mov	r2, r7
   d5776:	4966      	ldr	r1, [pc, #408]	; (d5910 <_GLOBAL__sub_I___appProductID+0x218>)
   d5778:	4628      	mov	r0, r5
   d577a:	f003 f89f 	bl	d88bc <__aeabi_atexit>
MCP79410 rtc;                                                                               // Rickkas MCP79410 libarary
   d577e:	f003 f875 	bl	d886c <_Z19__fetch_global_Wirev>
   d5782:	4d64      	ldr	r5, [pc, #400]	; (d5914 <_GLOBAL__sub_I___appProductID+0x21c>)
   d5784:	4601      	mov	r1, r0
   d5786:	4628      	mov	r0, r5
   d5788:	f000 fc7a 	bl	d6080 <_ZN8MCP79410C1ER7TwoWire>
   d578c:	4628      	mov	r0, r5
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d578e:	4d62      	ldr	r5, [pc, #392]	; (d5918 <_GLOBAL__sub_I___appProductID+0x220>)
   d5790:	4962      	ldr	r1, [pc, #392]	; (d591c <_GLOBAL__sub_I___appProductID+0x224>)
   d5792:	463a      	mov	r2, r7
   d5794:	f003 f892 	bl	d88bc <__aeabi_atexit>
   d5798:	4961      	ldr	r1, [pc, #388]	; (d5920 <_GLOBAL__sub_I___appProductID+0x228>)
   d579a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d579e:	4628      	mov	r0, r5
   d57a0:	f001 f8e4 	bl	d696c <_ZN25PublishQueueAsyncRetainedC1EPht>
   d57a4:	4b5f      	ldr	r3, [pc, #380]	; (d5924 <_GLOBAL__sub_I___appProductID+0x22c>)
   d57a6:	602b      	str	r3, [r5, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d57a8:	463a      	mov	r2, r7
   d57aa:	495f      	ldr	r1, [pc, #380]	; (d5928 <_GLOBAL__sub_I___appProductID+0x230>)
   d57ac:	4628      	mov	r0, r5
   d57ae:	f003 f885 	bl	d88bc <__aeabi_atexit>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d57b2:	4b5e      	ldr	r3, [pc, #376]	; (d592c <_GLOBAL__sub_I___appProductID+0x234>)
   d57b4:	9304      	str	r3, [sp, #16]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57b6:	f10d 0810 	add.w	r8, sp, #16
    Timer(unsigned period, timer_callback_fn callback_, bool one_shot=false) : running(false), handle(nullptr), callback(std::move(callback_)) {
   d57ba:	4d5d      	ldr	r5, [pc, #372]	; (d5930 <_GLOBAL__sub_I___appProductID+0x238>)
   d57bc:	4b5d      	ldr	r3, [pc, #372]	; (d5934 <_GLOBAL__sub_I___appProductID+0x23c>)
   d57be:	602b      	str	r3, [r5, #0]
   d57c0:	e898 0003 	ldmia.w	r8, {r0, r1}
   d57c4:	aa02      	add	r2, sp, #8
      __a = _GLIBCXX_MOVE(__b);
   d57c6:	f105 030c 	add.w	r3, r5, #12
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d57ca:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d57ce:	e893 0003 	ldmia.w	r3, {r0, r1}
   d57d2:	e888 0003 	stmia.w	r8, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d57d6:	e892 0003 	ldmia.w	r2, {r0, r1}
   d57da:	e883 0003 	stmia.w	r3, {r0, r1}
   d57de:	4b56      	ldr	r3, [pc, #344]	; (d5938 <_GLOBAL__sub_I___appProductID+0x240>)
   d57e0:	616b      	str	r3, [r5, #20]
      __a = _GLIBCXX_MOVE(__b);
   d57e2:	69ab      	ldr	r3, [r5, #24]
   d57e4:	9307      	str	r3, [sp, #28]
      __b = _GLIBCXX_MOVE(__tmp);
   d57e6:	4b55      	ldr	r3, [pc, #340]	; (d593c <_GLOBAL__sub_I___appProductID+0x244>)
   d57e8:	712c      	strb	r4, [r5, #4]
   d57ea:	60ac      	str	r4, [r5, #8]
   d57ec:	61ab      	str	r3, [r5, #24]
        os_timer_create(&handle, period, invoke_timer, this, one_shot, nullptr);
   d57ee:	4a54      	ldr	r2, [pc, #336]	; (d5940 <_GLOBAL__sub_I___appProductID+0x248>)
      __a = _GLIBCXX_MOVE(__b);
   d57f0:	9406      	str	r4, [sp, #24]
   d57f2:	462b      	mov	r3, r5
   d57f4:	e9cd 4400 	strd	r4, r4, [sp]
   d57f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d57fc:	f105 0008 	add.w	r0, r5, #8
   d5800:	f001 f9ea 	bl	d6bd8 <os_timer_create>
    class function<_Res(_ArgTypes...)>
   d5804:	4640      	mov	r0, r8
   d5806:	f7fe fd5b 	bl	d42c0 <_ZNSt14_Function_baseD1Ev>
Timer keepAliveTimer(1000, keepAliveMessage);
   d580a:	463a      	mov	r2, r7
   d580c:	494d      	ldr	r1, [pc, #308]	; (d5944 <_GLOBAL__sub_I___appProductID+0x24c>)
   d580e:	4628      	mov	r0, r5
   d5810:	f003 f854 	bl	d88bc <__aeabi_atexit>
struct sensor_data_struct {                                                               // Here we define the structure for collecting and storing data from the sensors
   d5814:	4d4c      	ldr	r5, [pc, #304]	; (d5948 <_GLOBAL__sub_I___appProductID+0x250>)
struct systemStatus_structure {                     
   d5816:	4b4d      	ldr	r3, [pc, #308]	; (d594c <_GLOBAL__sub_I___appProductID+0x254>)
struct sensor_data_struct {                                                               // Here we define the structure for collecting and storing data from the sensors
   d5818:	63ac      	str	r4, [r5, #56]	; 0x38
struct systemStatus_structure {                     
   d581a:	629e      	str	r6, [r3, #40]	; 0x28
struct sensor_data_struct {                                                               // Here we define the structure for collecting and storing data from the sensors
   d581c:	e9c5 440c 	strd	r4, r4, [r5, #48]	; 0x30
   d5820:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
   d5824:	e9c5 4412 	strd	r4, r4, [r5, #72]	; 0x48
   d5828:	e9c5 4415 	strd	r4, r4, [r5, #84]	; 0x54
   d582c:	646c      	str	r4, [r5, #68]	; 0x44
   d582e:	652c      	str	r4, [r5, #80]	; 0x50
   d5830:	65ec      	str	r4, [r5, #92]	; 0x5c
   d5832:	4621      	mov	r1, r4
   d5834:	2210      	movs	r2, #16
   d5836:	f105 0060 	add.w	r0, r5, #96	; 0x60
   d583a:	f003 fee1 	bl	d9600 <memset>
   d583e:	2210      	movs	r2, #16
   d5840:	4621      	mov	r1, r4
   d5842:	f105 0070 	add.w	r0, r5, #112	; 0x70
   d5846:	f003 fedb 	bl	d9600 <memset>
        {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d584a:	4b41      	ldr	r3, [pc, #260]	; (d5950 <_GLOBAL__sub_I___appProductID+0x258>)
  };
   d584c:	4c41      	ldr	r4, [pc, #260]	; (d5954 <_GLOBAL__sub_I___appProductID+0x25c>)
        {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d584e:	4d42      	ldr	r5, [pc, #264]	; (d5958 <_GLOBAL__sub_I___appProductID+0x260>)
   d5850:	f893 9000 	ldrb.w	r9, [r3]
  };
   d5854:	f8c4 9000 	str.w	r9, [r4]
        {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d5858:	6828      	ldr	r0, [r5, #0]
   d585a:	f003 fac5 	bl	d8de8 <__aeabi_f2d>
        {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d585e:	4b3f      	ldr	r3, [pc, #252]	; (d595c <_GLOBAL__sub_I___appProductID+0x264>)
   d5860:	f893 8000 	ldrb.w	r8, [r3]
  };
   d5864:	f8c4 8010 	str.w	r8, [r4, #16]
        {CT1_PIN,sensorConstants.sensorOneConstant}, // R phase
   d5868:	ec41 0b1a 	vmov	d10, r0, r1
  };
   d586c:	e9c4 0102 	strd	r0, r1, [r4, #8]
        {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d5870:	6868      	ldr	r0, [r5, #4]
   d5872:	f003 fab9 	bl	d8de8 <__aeabi_f2d>
        {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d5876:	4b3a      	ldr	r3, [pc, #232]	; (d5960 <_GLOBAL__sub_I___appProductID+0x268>)
   d5878:	781f      	ldrb	r7, [r3, #0]
  };
   d587a:	6227      	str	r7, [r4, #32]
        {CT2_PIN,sensorConstants.sensorTwoConstant}, // T phase
   d587c:	ec41 0b19 	vmov	d9, r0, r1
  };
   d5880:	e9c4 0106 	strd	r0, r1, [r4, #24]
        {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d5884:	68a8      	ldr	r0, [r5, #8]
   d5886:	f003 faaf 	bl	d8de8 <__aeabi_f2d>
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d588a:	4b36      	ldr	r3, [pc, #216]	; (d5964 <_GLOBAL__sub_I___appProductID+0x26c>)
  };
   d588c:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
  };
   d5890:	4c35      	ldr	r4, [pc, #212]	; (d5968 <_GLOBAL__sub_I___appProductID+0x270>)
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d5892:	781e      	ldrb	r6, [r3, #0]
  };
   d5894:	6026      	str	r6, [r4, #0]
        {CT3_PIN,sensorConstants.sensorThreeConstant} // S phase 
   d5896:	ec41 0b18 	vmov	d8, r0, r1
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d589a:	68e8      	ldr	r0, [r5, #12]
   d589c:	f003 faa4 	bl	d8de8 <__aeabi_f2d>
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d58a0:	4b32      	ldr	r3, [pc, #200]	; (d596c <_GLOBAL__sub_I___appProductID+0x274>)
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d58a2:	4682      	mov	sl, r0
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d58a4:	781b      	ldrb	r3, [r3, #0]
   d58a6:	6123      	str	r3, [r4, #16]
        {CT4_PIN,sensorConstants.sensorFourConstant}, // R phase
   d58a8:	468b      	mov	fp, r1
  };
   d58aa:	e9c4 ab02 	strd	sl, fp, [r4, #8]
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d58ae:	6928      	ldr	r0, [r5, #16]
   d58b0:	f003 fa9a 	bl	d8de8 <__aeabi_f2d>
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d58b4:	4b2e      	ldr	r3, [pc, #184]	; (d5970 <_GLOBAL__sub_I___appProductID+0x278>)
   d58b6:	781b      	ldrb	r3, [r3, #0]
   d58b8:	6223      	str	r3, [r4, #32]
        {CT5_PIN,sensorConstants.sensorFiveConstant}, // T phase
   d58ba:	e9c4 0106 	strd	r0, r1, [r4, #24]
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d58be:	6968      	ldr	r0, [r5, #20]
   d58c0:	f003 fa92 	bl	d8de8 <__aeabi_f2d>
   };
   d58c4:	4b2b      	ldr	r3, [pc, #172]	; (d5974 <_GLOBAL__sub_I___appProductID+0x27c>)
        {CT6_PIN,sensorConstants.sensorSixConstant} // S phase 
   d58c6:	e9c4 010a 	strd	r0, r1, [r4, #40]	; 0x28
   };
   d58ca:	ed83 ab02 	vstr	d10, [r3, #8]
   d58ce:	ed83 9b06 	vstr	d9, [r3, #24]
   d58d2:	ed83 8b0a 	vstr	d8, [r3, #40]	; 0x28
   d58d6:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
   d58da:	f8c3 9000 	str.w	r9, [r3]
   d58de:	f8c3 8010 	str.w	r8, [r3, #16]
   d58e2:	621f      	str	r7, [r3, #32]
   d58e4:	631e      	str	r6, [r3, #48]	; 0x30
   d58e6:	b009      	add	sp, #36	; 0x24
   d58e8:	ecbd 8b06 	vpop	{d8-d10}
   d58ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d58f0:	2003df99 	.word	0x2003df99
   d58f4:	2003dee8 	.word	0x2003dee8
   d58f8:	2003dea8 	.word	0x2003dea8
   d58fc:	2003df98 	.word	0x2003df98
   d5900:	ffff0000 	.word	0xffff0000
   d5904:	000d4257 	.word	0x000d4257
   d5908:	2003e410 	.word	0x2003e410
   d590c:	000dbc0c 	.word	0x000dbc0c
   d5910:	000d41f5 	.word	0x000d41f5
   d5914:	2003e47c 	.word	0x2003e47c
   d5918:	2003e440 	.word	0x2003e440
   d591c:	000d5e0b 	.word	0x000d5e0b
   d5920:	2003f400 	.word	0x2003f400
   d5924:	000dbbe4 	.word	0x000dbbe4
   d5928:	000d41cd 	.word	0x000d41cd
   d592c:	000d4271 	.word	0x000d4271
   d5930:	2003e420 	.word	0x2003e420
   d5934:	000dbbd0 	.word	0x000dbbd0
   d5938:	000d40d9 	.word	0x000d40d9
   d593c:	000d40d5 	.word	0x000d40d5
   d5940:	000d421d 	.word	0x000d421d
   d5944:	000d42d5 	.word	0x000d42d5
   d5948:	2003e4b0 	.word	0x2003e4b0
   d594c:	2003e5a0 	.word	0x2003e5a0
   d5950:	2003dbe8 	.word	0x2003dbe8
   d5954:	2003df38 	.word	0x2003df38
   d5958:	2003e498 	.word	0x2003e498
   d595c:	2003dbe9 	.word	0x2003dbe9
   d5960:	2003dbea 	.word	0x2003dbea
   d5964:	2003dbeb 	.word	0x2003dbeb
   d5968:	2003df68 	.word	0x2003df68
   d596c:	2003dbec 	.word	0x2003dbec
   d5970:	2003dbed 	.word	0x2003dbed
   d5974:	2003def8 	.word	0x2003def8

000d5978 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE>:
#include "WProgram.h"
#endif


//--------------------------------------------------------------------------------------
double Load_Monitor::calcIrms(CT_Property_Struct data){
   d5978:	b082      	sub	sp, #8
   d597a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d597e:	a90a      	add	r1, sp, #40	; 0x28
   d5980:	e881 000c 	stmia.w	r1, {r2, r3}
    
    double Irms=0;
    
    offsetI = ADC_COUNTS>>1;
   d5984:	4b34      	ldr	r3, [pc, #208]	; (d5a58 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xe0>)
  {
    sampleI = analogRead(data.CT_PIN);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset,
    //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d5986:	f8df b0d4 	ldr.w	fp, [pc, #212]	; d5a5c <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xe4>
    offsetI = ADC_COUNTS>>1;
   d598a:	2200      	movs	r2, #0
   d598c:	e9c0 2304 	strd	r2, r3, [r0, #16]
double Load_Monitor::calcIrms(CT_Property_Struct data){
   d5990:	4604      	mov	r4, r0
    offsetI = ADC_COUNTS>>1;
   d5992:	f240 657e 	movw	r5, #1662	; 0x67e
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d5996:	f04f 0a00 	mov.w	sl, #0
    sampleI = analogRead(data.CT_PIN);
   d599a:	f8bd 0028 	ldrh.w	r0, [sp, #40]	; 0x28
   d599e:	f002 ff35 	bl	d880c <analogRead>
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d59a2:	e9d4 8904 	ldrd	r8, r9, [r4, #16]
    sampleI = analogRead(data.CT_PIN);
   d59a6:	6020      	str	r0, [r4, #0]
    offsetI = (offsetI + (sampleI-offsetI)/4096);
   d59a8:	f003 fa0c 	bl	d8dc4 <__aeabi_i2d>
   d59ac:	4642      	mov	r2, r8
   d59ae:	464b      	mov	r3, r9
   d59b0:	4606      	mov	r6, r0
   d59b2:	460f      	mov	r7, r1
   d59b4:	f003 f8b8 	bl	d8b28 <__aeabi_dsub>
   d59b8:	4652      	mov	r2, sl
   d59ba:	465b      	mov	r3, fp
   d59bc:	f003 fa6c 	bl	d8e98 <__aeabi_dmul>
   d59c0:	4642      	mov	r2, r8
   d59c2:	464b      	mov	r3, r9
   d59c4:	f003 f8b2 	bl	d8b2c <__adddf3>
   d59c8:	4602      	mov	r2, r0
   d59ca:	460b      	mov	r3, r1
   d59cc:	e9c4 2304 	strd	r2, r3, [r4, #16]
    filteredI = sampleI - offsetI;
   d59d0:	4630      	mov	r0, r6
   d59d2:	4639      	mov	r1, r7
   d59d4:	f003 f8a8 	bl	d8b28 <__aeabi_dsub>
   d59d8:	4602      	mov	r2, r0
   d59da:	460b      	mov	r3, r1
   d59dc:	e9c4 2302 	strd	r2, r3, [r4, #8]

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d59e0:	f003 fa5a 	bl	d8e98 <__aeabi_dmul>
   d59e4:	4602      	mov	r2, r0
   d59e6:	460b      	mov	r3, r1
   d59e8:	e9c4 2306 	strd	r2, r3, [r4, #24]
    // 2) sum
    sumI += sqI;
   d59ec:	e9d4 2308 	ldrd	r2, r3, [r4, #32]
   d59f0:	f003 f89c 	bl	d8b2c <__adddf3>
  for (unsigned int n = 0; n < 1662 /*Number_of_Samples*/; n++)
   d59f4:	3d01      	subs	r5, #1
    sumI += sqI;
   d59f6:	4606      	mov	r6, r0
   d59f8:	460f      	mov	r7, r1
   d59fa:	e9c4 6708 	strd	r6, r7, [r4, #32]
  for (unsigned int n = 0; n < 1662 /*Number_of_Samples*/; n++)
   d59fe:	d1cc      	bne.n	d599a <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0x22>
  }

  double I_RATIO = data.ICAL*((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d5a00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d5a04:	a310      	add	r3, pc, #64	; (adr r3, d5a48 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xd0>)
   d5a06:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5a0a:	f003 fa45 	bl	d8e98 <__aeabi_dmul>
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d5a0e:	a310      	add	r3, pc, #64	; (adr r3, d5a50 <_ZN12Load_Monitor8calcIrmsENS_7CT_DataE+0xd8>)
   d5a10:	e9d3 2300 	ldrd	r2, r3, [r3]
  double I_RATIO = data.ICAL*((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d5a14:	4680      	mov	r8, r0
   d5a16:	4689      	mov	r9, r1
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d5a18:	4630      	mov	r0, r6
   d5a1a:	4639      	mov	r1, r7
   d5a1c:	f003 fb66 	bl	d90ec <__aeabi_ddiv>
   d5a20:	ec41 0b10 	vmov	d0, r0, r1
   d5a24:	f002 ff58 	bl	d88d8 <sqrt>

  //Reset accumulators
  sumI = 0;
   d5a28:	2200      	movs	r2, #0
   d5a2a:	2300      	movs	r3, #0
   d5a2c:	e9c4 2308 	strd	r2, r3, [r4, #32]
  Irms = I_RATIO * sqrt(sumI /1662 /*Number_of_Samples*/);
   d5a30:	ec51 0b10 	vmov	r0, r1, d0
   d5a34:	4642      	mov	r2, r8
   d5a36:	464b      	mov	r3, r9
   d5a38:	f003 fa2e 	bl	d8e98 <__aeabi_dmul>
  //--------------------------------------------------------------------------------------

  return Irms;
}
   d5a3c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5a40:	ec41 0b10 	vmov	d0, r0, r1
   d5a44:	b002      	add	sp, #8
   d5a46:	4770      	bx	lr
   d5a48:	66666666 	.word	0x66666666
   d5a4c:	3f4a6666 	.word	0x3f4a6666
   d5a50:	00000000 	.word	0x00000000
   d5a54:	4099f800 	.word	0x4099f800
   d5a58:	40a00000 	.word	0x40a00000
   d5a5c:	3f300000 	.word	0x3f300000

000d5a60 <_ZN13EnergyMonitor7currentEjd>:

void EnergyMonitor::current(unsigned int _inPinI, double _ICAL)
{
   inPinI = _inPinI;
   ICAL = _ICAL;
   offsetI = ADC_COUNTS>>1;
   d5a60:	4b03      	ldr	r3, [pc, #12]	; (d5a70 <_ZN13EnergyMonitor7currentEjd+0x10>)
   inPinI = _inPinI;
   d5a62:	62c1      	str	r1, [r0, #44]	; 0x2c
   offsetI = ADC_COUNTS>>1;
   d5a64:	2200      	movs	r2, #0
   ICAL = _ICAL;
   d5a66:	ed80 0b0e 	vstr	d0, [r0, #56]	; 0x38
   offsetI = ADC_COUNTS>>1;
   d5a6a:	e9c0 231c 	strd	r2, r3, [r0, #112]	; 0x70
}
   d5a6e:	4770      	bx	lr
   d5a70:	40a00000 	.word	0x40a00000
   d5a74:	00000000 	.word	0x00000000

000d5a78 <_ZN13EnergyMonitor8calcIrmsEj>:
//--------------------------------------------------------------------------------------       
}

//--------------------------------------------------------------------------------------
double EnergyMonitor::calcIrms(unsigned int Number_of_Samples)
{
   d5a78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
    sampleI = analogRead(inPinI);

    // Digital low pass filter extracts the 2.5 V or 1.65 V dc offset, 
  //  then subtract this - signal is now centered on 0 counts.
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d5a7c:	f8df b0c8 	ldr.w	fp, [pc, #200]	; d5b48 <_ZN13EnergyMonitor8calcIrmsEj+0xd0>
{
   d5a80:	9101      	str	r1, [sp, #4]
   d5a82:	4604      	mov	r4, r0
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d5a84:	2500      	movs	r5, #0
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d5a86:	f04f 0a00 	mov.w	sl, #0
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d5a8a:	9b01      	ldr	r3, [sp, #4]
   d5a8c:	429d      	cmp	r5, r3
   d5a8e:	d02f      	beq.n	d5af0 <_ZN13EnergyMonitor8calcIrmsEj+0x78>
    sampleI = analogRead(inPinI);
   d5a90:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
   d5a92:	f002 febb 	bl	d880c <analogRead>
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d5a96:	e9d4 891c 	ldrd	r8, r9, [r4, #112]	; 0x70
    sampleI = analogRead(inPinI);
   d5a9a:	64e0      	str	r0, [r4, #76]	; 0x4c
    offsetI = (offsetI + (sampleI-offsetI)/1024);
   d5a9c:	f003 f992 	bl	d8dc4 <__aeabi_i2d>
   d5aa0:	4642      	mov	r2, r8
   d5aa2:	464b      	mov	r3, r9
   d5aa4:	4606      	mov	r6, r0
   d5aa6:	460f      	mov	r7, r1
   d5aa8:	f003 f83e 	bl	d8b28 <__aeabi_dsub>
   d5aac:	4652      	mov	r2, sl
   d5aae:	465b      	mov	r3, fp
   d5ab0:	f003 f9f2 	bl	d8e98 <__aeabi_dmul>
   d5ab4:	4642      	mov	r2, r8
   d5ab6:	464b      	mov	r3, r9
   d5ab8:	f003 f838 	bl	d8b2c <__adddf3>
   d5abc:	4602      	mov	r2, r0
   d5abe:	460b      	mov	r3, r1
   d5ac0:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
  filteredI = sampleI - offsetI;
   d5ac4:	4630      	mov	r0, r6
   d5ac6:	4639      	mov	r1, r7
   d5ac8:	f003 f82e 	bl	d8b28 <__aeabi_dsub>
   d5acc:	4602      	mov	r2, r0
   d5ace:	460b      	mov	r3, r1
   d5ad0:	e9c4 2318 	strd	r2, r3, [r4, #96]	; 0x60

    // Root-mean-square method current
    // 1) square current values
    sqI = filteredI * filteredI;
   d5ad4:	f003 f9e0 	bl	d8e98 <__aeabi_dmul>
   d5ad8:	4602      	mov	r2, r0
   d5ada:	460b      	mov	r3, r1
   d5adc:	e9c4 2324 	strd	r2, r3, [r4, #144]	; 0x90
    // 2) sum 
    sumI += sqI;
   d5ae0:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
   d5ae4:	f003 f822 	bl	d8b2c <__adddf3>
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d5ae8:	3501      	adds	r5, #1
    sumI += sqI;
   d5aea:	e9c4 0126 	strd	r0, r1, [r4, #152]	; 0x98
  for (unsigned int n = 0; n < Number_of_Samples; n++)
   d5aee:	e7cc      	b.n	d5a8a <_ZN13EnergyMonitor8calcIrmsEj+0x12>
  }

  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d5af0:	a313      	add	r3, pc, #76	; (adr r3, d5b40 <_ZN13EnergyMonitor8calcIrmsEj+0xc8>)
   d5af2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5af6:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
   d5afa:	f003 f9cd 	bl	d8e98 <__aeabi_dmul>
   d5afe:	4606      	mov	r6, r0
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d5b00:	4628      	mov	r0, r5
  double I_RATIO = ICAL *((SupplyVoltage/1000.0) / (ADC_COUNTS));
   d5b02:	460f      	mov	r7, r1
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d5b04:	f003 f94e 	bl	d8da4 <__aeabi_ui2d>
   d5b08:	4602      	mov	r2, r0
   d5b0a:	460b      	mov	r3, r1
   d5b0c:	e9d4 0126 	ldrd	r0, r1, [r4, #152]	; 0x98
   d5b10:	f003 faec 	bl	d90ec <__aeabi_ddiv>
   d5b14:	ec41 0b10 	vmov	d0, r0, r1
   d5b18:	f002 fede 	bl	d88d8 <sqrt>
   d5b1c:	4632      	mov	r2, r6
   d5b1e:	463b      	mov	r3, r7
   d5b20:	ec51 0b10 	vmov	r0, r1, d0
   d5b24:	f003 f9b8 	bl	d8e98 <__aeabi_dmul>
   d5b28:	ec41 0b10 	vmov	d0, r0, r1

  //Reset accumulators
  sumI = 0;
   d5b2c:	2200      	movs	r2, #0
   d5b2e:	2300      	movs	r3, #0
  Irms = I_RATIO * sqrt(sumI / Number_of_Samples); 
   d5b30:	e9c4 0108 	strd	r0, r1, [r4, #32]
  sumI = 0;
   d5b34:	e9c4 2326 	strd	r2, r3, [r4, #152]	; 0x98
//--------------------------------------------------------------------------------------             
 
  return Irms;
}
   d5b38:	b003      	add	sp, #12
   d5b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5b3e:	bf00      	nop
   d5b40:	66666666 	.word	0x66666666
   d5b44:	3f4a6666 	.word	0x3f4a6666
   d5b48:	3f500000 	.word	0x3f500000

000d5b4c <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d5b4c:	4770      	bx	lr

000d5b4e <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d5b4e:	b510      	push	{r4, lr}
}
   d5b50:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d5b52:	4604      	mov	r4, r0
}
   d5b54:	f002 feb7 	bl	d88c6 <_ZdlPvj>
   d5b58:	4620      	mov	r0, r4
   d5b5a:	bd10      	pop	{r4, pc}

000d5b5c <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d5b5c:	6803      	ldr	r3, [r0, #0]
   d5b5e:	b2c9      	uxtb	r1, r1
   d5b60:	689b      	ldr	r3, [r3, #8]
   d5b62:	4718      	bx	r3

000d5b64 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5b64:	b40e      	push	{r1, r2, r3}
   d5b66:	b510      	push	{r4, lr}
   d5b68:	b08d      	sub	sp, #52	; 0x34
   d5b6a:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d5b6c:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d5b6e:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d5b72:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d5b74:	2300      	movs	r3, #0
   d5b76:	2020      	movs	r0, #32
   d5b78:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5b7c:	e9cd 4200 	strd	r4, r2, [sp]
   d5b80:	201e      	movs	r0, #30
   d5b82:	aa04      	add	r2, sp, #16
   d5b84:	f001 fa08 	bl	d6f98 <log_message_v>
}
   d5b88:	b00d      	add	sp, #52	; 0x34
   d5b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5b8e:	b003      	add	sp, #12
   d5b90:	4770      	bx	lr
	...

000d5b94 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d5b94:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d5b96:	4d03      	ldr	r5, [pc, #12]	; (d5ba4 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d5b98:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d5b9c:	e9c0 5100 	strd	r5, r1, [r0]
}
   d5ba0:	bd30      	pop	{r4, r5, pc}
   d5ba2:	bf00      	nop
   d5ba4:	000dbcbc 	.word	0x000dbcbc

000d5ba8 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d5ba8:	6840      	ldr	r0, [r0, #4]
   d5baa:	f001 bf7f 	b.w	d7aac <_ZN7TwoWire5beginEv>

000d5bae <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5bae:	b510      	push	{r4, lr}
   d5bb0:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d5bb2:	6800      	ldr	r0, [r0, #0]
   d5bb4:	f001 ffbd 	bl	d7b32 <_ZN7TwoWire6unlockEv>
   d5bb8:	4620      	mov	r0, r4
   d5bba:	bd10      	pop	{r4, pc}

000d5bbc <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d5bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5bc0:	b08a      	sub	sp, #40	; 0x28
   d5bc2:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d5bc4:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5bc6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5bc8:	f001 ffaa 	bl	d7b20 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5bcc:	221e      	movs	r2, #30
   d5bce:	2100      	movs	r1, #0
   d5bd0:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d5bd2:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d5bd4:	f003 fd14 	bl	d9600 <memset>
		size_t framAddr = 0;
   d5bd8:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d5bda:	b1ef      	cbz	r7, d5c18 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d5bdc:	6823      	ldr	r3, [r4, #0]
   d5bde:	2f1e      	cmp	r7, #30
   d5be0:	46b8      	mov	r8, r7
   d5be2:	bf28      	it	cs
   d5be4:	f04f 081e 	movcs.w	r8, #30
   d5be8:	68dd      	ldr	r5, [r3, #12]
   d5bea:	aa02      	add	r2, sp, #8
   d5bec:	4643      	mov	r3, r8
   d5bee:	4631      	mov	r1, r6
   d5bf0:	4620      	mov	r0, r4
   d5bf2:	47a8      	blx	r5
			if (!result) {
   d5bf4:	4605      	mov	r5, r0
   d5bf6:	b958      	cbnz	r0, d5c10 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d5bf8:	480a      	ldr	r0, [pc, #40]	; (d5c24 <_ZN6MB85RC5eraseEv+0x68>)
   d5bfa:	490b      	ldr	r1, [pc, #44]	; (d5c28 <_ZN6MB85RC5eraseEv+0x6c>)
   d5bfc:	4632      	mov	r2, r6
   d5bfe:	f7ff ffb1 	bl	d5b64 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d5c02:	a801      	add	r0, sp, #4
   d5c04:	f7ff ffd3 	bl	d5bae <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d5c08:	4628      	mov	r0, r5
   d5c0a:	b00a      	add	sp, #40	; 0x28
   d5c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d5c10:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d5c14:	4446      	add	r6, r8
		while(totalLen > 0) {
   d5c16:	e7e0      	b.n	d5bda <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d5c18:	a801      	add	r0, sp, #4
   d5c1a:	f7ff ffc8 	bl	d5bae <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d5c1e:	2501      	movs	r5, #1
   d5c20:	e7f2      	b.n	d5c08 <_ZN6MB85RC5eraseEv+0x4c>
   d5c22:	bf00      	nop
   d5c24:	2003e61c 	.word	0x2003e61c
   d5c28:	000dbc88 	.word	0x000dbc88

000d5c2c <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5c2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5c30:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5c32:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5c34:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5c36:	460d      	mov	r5, r1
   d5c38:	4616      	mov	r6, r2
   d5c3a:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d5c3c:	f001 ff70 	bl	d7b20 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d5c40:	b1a7      	cbz	r7, d5c6c <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5c42:	68e1      	ldr	r1, [r4, #12]
   d5c44:	6860      	ldr	r0, [r4, #4]
   d5c46:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5c4a:	f001 ff62 	bl	d7b12 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5c4e:	0a29      	lsrs	r1, r5, #8
   d5c50:	6860      	ldr	r0, [r4, #4]
   d5c52:	f7ff ff83 	bl	d5b5c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5c56:	4629      	mov	r1, r5
   d5c58:	6860      	ldr	r0, [r4, #4]
   d5c5a:	f7ff ff7f 	bl	d5b5c <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d5c5e:	6860      	ldr	r0, [r4, #4]
   d5c60:	2100      	movs	r1, #0
   d5c62:	f001 ff59 	bl	d7b18 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5c66:	b148      	cbz	r0, d5c7c <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d5c68:	2400      	movs	r4, #0
   d5c6a:	e000      	b.n	d5c6e <_ZN6MB85RC8readDataEjPhj+0x42>
   d5c6c:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5c6e:	a801      	add	r0, sp, #4
   d5c70:	f7ff ff9d 	bl	d5bae <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d5c74:	4620      	mov	r0, r4
   d5c76:	b003      	add	sp, #12
   d5c78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d5c7c:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d5c7e:	7b21      	ldrb	r1, [r4, #12]
   d5c80:	6860      	ldr	r0, [r4, #4]
   d5c82:	46b8      	mov	r8, r7
   d5c84:	bf28      	it	cs
   d5c86:	f04f 0820 	movcs.w	r8, #32
   d5c8a:	2301      	movs	r3, #1
   d5c8c:	4642      	mov	r2, r8
   d5c8e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5c92:	f001 ff28 	bl	d7ae6 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d5c96:	f002 fde9 	bl	d886c <_Z19__fetch_global_Wirev>
   d5c9a:	6803      	ldr	r3, [r0, #0]
   d5c9c:	691b      	ldr	r3, [r3, #16]
   d5c9e:	4798      	blx	r3
   d5ca0:	4540      	cmp	r0, r8
   d5ca2:	dbe1      	blt.n	d5c68 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d5ca4:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d5ca8:	f002 fde0 	bl	d886c <_Z19__fetch_global_Wirev>
   d5cac:	6803      	ldr	r3, [r0, #0]
   d5cae:	695b      	ldr	r3, [r3, #20]
   d5cb0:	4798      	blx	r3
   d5cb2:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d5cb6:	454e      	cmp	r6, r9
   d5cb8:	d1f6      	bne.n	d5ca8 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d5cba:	4445      	add	r5, r8
   d5cbc:	eba7 0708 	sub.w	r7, r7, r8
   d5cc0:	e7be      	b.n	d5c40 <_ZN6MB85RC8readDataEjPhj+0x14>

000d5cc2 <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5cc2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5cc6:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5cc8:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5cca:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5ccc:	460e      	mov	r6, r1
   d5cce:	4690      	mov	r8, r2
   d5cd0:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d5cd2:	f001 ff25 	bl	d7b20 <_ZN7TwoWire4lockEv>
   d5cd6:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d5cda:	f1b9 0f00 	cmp.w	r9, #0
   d5cde:	d02a      	beq.n	d5d36 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d5ce0:	b34d      	cbz	r5, d5d36 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5ce2:	68e1      	ldr	r1, [r4, #12]
   d5ce4:	6860      	ldr	r0, [r4, #4]
   d5ce6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5cea:	f001 ff12 	bl	d7b12 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5cee:	0a31      	lsrs	r1, r6, #8
   d5cf0:	6860      	ldr	r0, [r4, #4]
   d5cf2:	f7ff ff33 	bl	d5b5c <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5cf6:	6860      	ldr	r0, [r4, #4]
   d5cf8:	4631      	mov	r1, r6
   d5cfa:	f7ff ff2f 	bl	d5b5c <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5cfe:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d5d02:	4647      	mov	r7, r8
   d5d04:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d5d08:	6860      	ldr	r0, [r4, #4]
   d5d0a:	f817 1b01 	ldrb.w	r1, [r7], #1
   d5d0e:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d5d10:	3d01      	subs	r5, #1
				wire.write(*data);
   d5d12:	689b      	ldr	r3, [r3, #8]
   d5d14:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5d16:	4555      	cmp	r5, sl
   d5d18:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d5d1c:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5d1e:	d001      	beq.n	d5d24 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d5d20:	2d00      	cmp	r5, #0
   d5d22:	d1f1      	bne.n	d5d08 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d5d24:	6860      	ldr	r0, [r4, #4]
   d5d26:	2101      	movs	r1, #1
   d5d28:	f001 fef6 	bl	d7b18 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5d2c:	2800      	cmp	r0, #0
   d5d2e:	d0d7      	beq.n	d5ce0 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d5d30:	f04f 0900 	mov.w	r9, #0
   d5d34:	e7d1      	b.n	d5cda <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d5d36:	a801      	add	r0, sp, #4
   d5d38:	f7ff ff39 	bl	d5bae <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d5d3c:	4648      	mov	r0, r9
   d5d3e:	b003      	add	sp, #12
   d5d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5d44 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5d44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5d48:	b08b      	sub	sp, #44	; 0x2c
   d5d4a:	460e      	mov	r6, r1
   d5d4c:	4615      	mov	r5, r2
   d5d4e:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5d50:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5d52:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5d54:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d5d56:	f001 fee3 	bl	d7b20 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d5d5a:	42ae      	cmp	r6, r5
   d5d5c:	d229      	bcs.n	d5db2 <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d5d5e:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d5d60:	4425      	add	r5, r4
			while(numBytes > 0) {
   d5d62:	b18c      	cbz	r4, d5d88 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d5d64:	2c1e      	cmp	r4, #30
   d5d66:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5d68:	f8d8 3000 	ldr.w	r3, [r8]
   d5d6c:	bf28      	it	cs
   d5d6e:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d5d70:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d5d72:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5d76:	aa02      	add	r2, sp, #8
   d5d78:	463b      	mov	r3, r7
   d5d7a:	4631      	mov	r1, r6
   d5d7c:	4640      	mov	r0, r8
				framAddrTo -= count;
   d5d7e:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d5d80:	47c8      	blx	r9
				if (!result) {
   d5d82:	b948      	cbnz	r0, d5d98 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5d84:	2400      	movs	r4, #0
   d5d86:	e000      	b.n	d5d8a <_ZN6MB85RC8moveDataEjjj+0x46>
   d5d88:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5d8a:	a801      	add	r0, sp, #4
   d5d8c:	f7ff ff0f 	bl	d5bae <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d5d90:	4620      	mov	r0, r4
   d5d92:	b00b      	add	sp, #44	; 0x2c
   d5d94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d5d98:	f8d8 3000 	ldr.w	r3, [r8]
   d5d9c:	aa02      	add	r2, sp, #8
   d5d9e:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5da2:	4629      	mov	r1, r5
   d5da4:	463b      	mov	r3, r7
   d5da6:	4640      	mov	r0, r8
   d5da8:	47c8      	blx	r9
				if (!result) {
   d5daa:	2800      	cmp	r0, #0
   d5dac:	d0ea      	beq.n	d5d84 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d5dae:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d5db0:	e7d7      	b.n	d5d62 <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d5db2:	d9e9      	bls.n	d5d88 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d5db4:	2c00      	cmp	r4, #0
   d5db6:	d0e7      	beq.n	d5d88 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d5db8:	f8d8 3000 	ldr.w	r3, [r8]
   d5dbc:	2c1e      	cmp	r4, #30
   d5dbe:	4627      	mov	r7, r4
   d5dc0:	bf28      	it	cs
   d5dc2:	271e      	movcs	r7, #30
   d5dc4:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5dc8:	aa02      	add	r2, sp, #8
   d5dca:	463b      	mov	r3, r7
   d5dcc:	4631      	mov	r1, r6
   d5dce:	4640      	mov	r0, r8
   d5dd0:	47c8      	blx	r9
				if (!result) {
   d5dd2:	2800      	cmp	r0, #0
   d5dd4:	d0d6      	beq.n	d5d84 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d5dd6:	f8d8 3000 	ldr.w	r3, [r8]
   d5dda:	aa02      	add	r2, sp, #8
   d5ddc:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5de0:	4629      	mov	r1, r5
   d5de2:	463b      	mov	r3, r7
   d5de4:	4640      	mov	r0, r8
   d5de6:	47c8      	blx	r9
				if (!result) {
   d5de8:	2800      	cmp	r0, #0
   d5dea:	d0cb      	beq.n	d5d84 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d5dec:	443e      	add	r6, r7
				framAddrTo += count;
   d5dee:	443d      	add	r5, r7
				numBytes -= count;
   d5df0:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d5df2:	e7df      	b.n	d5db4 <_ZN6MB85RC8moveDataEjjj+0x70>

000d5df4 <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d5df4:	2040      	movs	r0, #64	; 0x40
   d5df6:	4770      	bx	lr

000d5df8 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d5df8:	2000      	movs	r0, #0
   d5dfa:	4770      	bx	lr

000d5dfc <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d5dfc:	2080      	movs	r0, #128	; 0x80
   d5dfe:	4770      	bx	lr

000d5e00 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d5e00:	20ff      	movs	r0, #255	; 0xff
   d5e02:	4770      	bx	lr

000d5e04 <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d5e04:	4770      	bx	lr

000d5e06 <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d5e06:	4770      	bx	lr

000d5e08 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d5e08:	4770      	bx	lr

000d5e0a <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d5e0a:	4770      	bx	lr

000d5e0c <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d5e0c:	b510      	push	{r4, lr}
}
   d5e0e:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d5e10:	4604      	mov	r4, r0
}
   d5e12:	f002 fd58 	bl	d88c6 <_ZdlPvj>
   d5e16:	4620      	mov	r0, r4
   d5e18:	bd10      	pop	{r4, pc}

000d5e1a <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d5e1a:	b510      	push	{r4, lr}
}
   d5e1c:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d5e1e:	4604      	mov	r4, r0
}
   d5e20:	f002 fd51 	bl	d88c6 <_ZdlPvj>
   d5e24:	4620      	mov	r0, r4
   d5e26:	bd10      	pop	{r4, pc}

000d5e28 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d5e28:	b510      	push	{r4, lr}
}
   d5e2a:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d5e2c:	4604      	mov	r4, r0
}
   d5e2e:	f002 fd4a 	bl	d88c6 <_ZdlPvj>
   d5e32:	4620      	mov	r0, r4
   d5e34:	bd10      	pop	{r4, pc}

000d5e36 <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d5e36:	b510      	push	{r4, lr}
}
   d5e38:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d5e3a:	4604      	mov	r4, r0
}
   d5e3c:	f002 fd43 	bl	d88c6 <_ZdlPvj>
   d5e40:	4620      	mov	r0, r4
   d5e42:	bd10      	pop	{r4, pc}

000d5e44 <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d5e44:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d5e48:	6803      	ldr	r3, [r0, #0]
   d5e4a:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d5e4c:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d5e4e:	4798      	blx	r3
   d5e50:	2210      	movs	r2, #16
   d5e52:	4601      	mov	r1, r0
   d5e54:	4668      	mov	r0, sp
   d5e56:	f003 fbd3 	bl	d9600 <memset>
	size_t len = length();
   d5e5a:	6823      	ldr	r3, [r4, #0]
   d5e5c:	4620      	mov	r0, r4
   d5e5e:	689b      	ldr	r3, [r3, #8]
   d5e60:	4798      	blx	r3
	size_t offset = 0;
   d5e62:	2500      	movs	r5, #0
	size_t len = length();
   d5e64:	4607      	mov	r7, r0
	bool bResult = false;
   d5e66:	4628      	mov	r0, r5
	while(offset < len) {
   d5e68:	42bd      	cmp	r5, r7
   d5e6a:	d20e      	bcs.n	d5e8a <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d5e6c:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d5e6e:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d5e70:	2e10      	cmp	r6, #16
   d5e72:	bf28      	it	cs
   d5e74:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d5e76:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d5e7a:	466a      	mov	r2, sp
   d5e7c:	4633      	mov	r3, r6
   d5e7e:	4629      	mov	r1, r5
   d5e80:	4620      	mov	r0, r4
   d5e82:	47c0      	blx	r8
		if (!bResult) {
   d5e84:	b108      	cbz	r0, d5e8a <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d5e86:	4435      	add	r5, r6
	while(offset < len) {
   d5e88:	e7ee      	b.n	d5e68 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d5e8a:	b004      	add	sp, #16
   d5e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5e90 <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d5e90:	f44f 7380 	mov.w	r3, #256	; 0x100
   d5e94:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d5e96:	f240 1301 	movw	r3, #257	; 0x101
   d5e9a:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d5e9c:	2300      	movs	r3, #0
   d5e9e:	8203      	strh	r3, [r0, #16]
}
   d5ea0:	4770      	bx	lr
	...

000d5ea4 <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d5ea4:	b508      	push	{r3, lr}
   d5ea6:	4b06      	ldr	r3, [pc, #24]	; (d5ec0 <_ZN12MCP79410TimeC1Ev+0x1c>)
   d5ea8:	6003      	str	r3, [r0, #0]
   d5eaa:	4b06      	ldr	r3, [pc, #24]	; (d5ec4 <_ZN12MCP79410TimeC1Ev+0x20>)
   d5eac:	6043      	str	r3, [r0, #4]
   d5eae:	f240 7304 	movw	r3, #1796	; 0x704
   d5eb2:	8103      	strh	r3, [r0, #8]
   d5eb4:	2300      	movs	r3, #0
   d5eb6:	7443      	strb	r3, [r0, #17]
	clear();
   d5eb8:	f7ff ffea 	bl	d5e90 <_ZN12MCP79410Time5clearEv>
}
   d5ebc:	bd08      	pop	{r3, pc}
   d5ebe:	bf00      	nop
   d5ec0:	000dbd9c 	.word	0x000dbd9c
   d5ec4:	03020100 	.word	0x03020100

000d5ec8 <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5ec8:	0903      	lsrs	r3, r0, #4
}
   d5eca:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5ecc:	f000 000f 	and.w	r0, r0, #15
}
   d5ed0:	fb02 0003 	mla	r0, r2, r3, r0
   d5ed4:	4770      	bx	lr

000d5ed6 <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d5ed6:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d5ed8:	7a80      	ldrb	r0, [r0, #10]
   d5eda:	f7ff fff5 	bl	d5ec8 <_ZN12MCP79410Time8bcdToIntEh>
}
   d5ede:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d5ee2:	bd08      	pop	{r3, pc}

000d5ee4 <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d5ee4:	7ac0      	ldrb	r0, [r0, #11]
   d5ee6:	f000 001f 	and.w	r0, r0, #31
   d5eea:	f7ff bfed 	b.w	d5ec8 <_ZN12MCP79410Time8bcdToIntEh>

000d5eee <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d5eee:	7b00      	ldrb	r0, [r0, #12]
   d5ef0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d5ef4:	f7ff bfe8 	b.w	d5ec8 <_ZN12MCP79410Time8bcdToIntEh>

000d5ef8 <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d5ef8:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d5efa:	7b81      	ldrb	r1, [r0, #14]
   d5efc:	064a      	lsls	r2, r1, #25
   d5efe:	d50d      	bpl.n	d5f1c <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d5f00:	f001 001f 	and.w	r0, r1, #31
   d5f04:	f7ff ffe0 	bl	d5ec8 <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d5f08:	068b      	lsls	r3, r1, #26
   d5f0a:	d503      	bpl.n	d5f14 <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d5f0c:	280c      	cmp	r0, #12
   d5f0e:	d000      	beq.n	d5f12 <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d5f10:	300c      	adds	r0, #12
}
   d5f12:	bd08      	pop	{r3, pc}
				return 0;
   d5f14:	280c      	cmp	r0, #12
   d5f16:	bf08      	it	eq
   d5f18:	2000      	moveq	r0, #0
   d5f1a:	e7fa      	b.n	d5f12 <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d5f1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d5f20:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d5f24:	f7ff bfd0 	b.w	d5ec8 <_ZN12MCP79410Time8bcdToIntEh>

000d5f28 <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d5f28:	7bc0      	ldrb	r0, [r0, #15]
   d5f2a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5f2e:	f7ff bfcb 	b.w	d5ec8 <_ZN12MCP79410Time8bcdToIntEh>

000d5f32 <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d5f32:	7c00      	ldrb	r0, [r0, #16]
   d5f34:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5f38:	f7ff bfc6 	b.w	d5ec8 <_ZN12MCP79410Time8bcdToIntEh>

000d5f3c <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d5f3c:	b510      	push	{r4, lr}
   d5f3e:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d5f40:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d5f42:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d5f44:	2100      	movs	r1, #0
   d5f46:	a801      	add	r0, sp, #4
   d5f48:	f003 fb5a 	bl	d9600 <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d5f4c:	4620      	mov	r0, r4
   d5f4e:	f7ff ffc2 	bl	d5ed6 <_ZNK12MCP79410Time7getYearEv>
   d5f52:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d5f56:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d5f58:	4620      	mov	r0, r4
   d5f5a:	f7ff ffc3 	bl	d5ee4 <_ZNK12MCP79410Time8getMonthEv>
   d5f5e:	3801      	subs	r0, #1
   d5f60:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d5f62:	4620      	mov	r0, r4
   d5f64:	f7ff ffc3 	bl	d5eee <_ZNK12MCP79410Time13getDayOfMonthEv>
   d5f68:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d5f6a:	4620      	mov	r0, r4
   d5f6c:	f7ff ffc4 	bl	d5ef8 <_ZNK12MCP79410Time7getHourEv>
   d5f70:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d5f72:	4620      	mov	r0, r4
   d5f74:	f7ff ffd8 	bl	d5f28 <_ZNK12MCP79410Time9getMinuteEv>
   d5f78:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d5f7a:	4620      	mov	r0, r4
   d5f7c:	f7ff ffd9 	bl	d5f32 <_ZNK12MCP79410Time9getSecondEv>
   d5f80:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d5f82:	a801      	add	r0, sp, #4
   d5f84:	f001 f996 	bl	d72b4 <mktime>
}
   d5f88:	b00a      	add	sp, #40	; 0x28
   d5f8a:	bd10      	pop	{r4, pc}

000d5f8c <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d5f8c:	210a      	movs	r1, #10
   d5f8e:	fb90 f2f1 	sdiv	r2, r0, r1
   d5f92:	fb92 f3f1 	sdiv	r3, r2, r1
   d5f96:	fb01 2313 	mls	r3, r1, r3, r2
   d5f9a:	011b      	lsls	r3, r3, #4
   d5f9c:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d5f9e:	fb01 0012 	mls	r0, r1, r2, r0
   d5fa2:	4318      	orrs	r0, r3
}
   d5fa4:	b2c0      	uxtb	r0, r0
   d5fa6:	4770      	bx	lr

000d5fa8 <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d5fa8:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d5faa:	b510      	push	{r4, lr}
   d5fac:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d5fae:	fb91 f0f3 	sdiv	r0, r1, r3
   d5fb2:	fb00 1013 	mls	r0, r0, r3, r1
   d5fb6:	f7ff ffe9 	bl	d5f8c <_ZN12MCP79410Time8intToBcdEi>
   d5fba:	72a0      	strb	r0, [r4, #10]
}
   d5fbc:	bd10      	pop	{r4, pc}

000d5fbe <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d5fbe:	b510      	push	{r4, lr}
   d5fc0:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d5fc2:	4608      	mov	r0, r1
   d5fc4:	f7ff ffe2 	bl	d5f8c <_ZN12MCP79410Time8intToBcdEi>
   d5fc8:	72e0      	strb	r0, [r4, #11]
}
   d5fca:	bd10      	pop	{r4, pc}

000d5fcc <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d5fcc:	b510      	push	{r4, lr}
   d5fce:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d5fd0:	4608      	mov	r0, r1
   d5fd2:	f7ff ffdb 	bl	d5f8c <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d5fd6:	7b23      	ldrb	r3, [r4, #12]
   d5fd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d5fdc:	4318      	orrs	r0, r3
   d5fde:	7320      	strb	r0, [r4, #12]
}
   d5fe0:	bd10      	pop	{r4, pc}

000d5fe2 <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d5fe2:	b510      	push	{r4, lr}
   d5fe4:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d5fe6:	1c48      	adds	r0, r1, #1
   d5fe8:	f7ff ffd0 	bl	d5f8c <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d5fec:	7b63      	ldrb	r3, [r4, #13]
   d5fee:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d5ff2:	4318      	orrs	r0, r3
   d5ff4:	7360      	strb	r0, [r4, #13]
}
   d5ff6:	bd10      	pop	{r4, pc}

000d5ff8 <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d5ff8:	b510      	push	{r4, lr}
   d5ffa:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d5ffc:	4608      	mov	r0, r1
   d5ffe:	f7ff ffc5 	bl	d5f8c <_ZN12MCP79410Time8intToBcdEi>
   d6002:	73a0      	strb	r0, [r4, #14]
}
   d6004:	bd10      	pop	{r4, pc}

000d6006 <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d6006:	b510      	push	{r4, lr}
   d6008:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d600a:	4608      	mov	r0, r1
   d600c:	f7ff ffbe 	bl	d5f8c <_ZN12MCP79410Time8intToBcdEi>
   d6010:	73e0      	strb	r0, [r4, #15]
}
   d6012:	bd10      	pop	{r4, pc}

000d6014 <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d6014:	b510      	push	{r4, lr}
   d6016:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d6018:	4608      	mov	r0, r1
   d601a:	f7ff ffb7 	bl	d5f8c <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d601e:	7c23      	ldrb	r3, [r4, #16]
   d6020:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d6024:	4318      	orrs	r0, r3
   d6026:	7420      	strb	r0, [r4, #16]
}
   d6028:	bd10      	pop	{r4, pc}

000d602a <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d602a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d602c:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d602e:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d6030:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d6034:	f003 faaa 	bl	d958c <gmtime>
   d6038:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d603a:	6941      	ldr	r1, [r0, #20]
   d603c:	4620      	mov	r0, r4
   d603e:	f7ff ffb3 	bl	d5fa8 <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d6042:	6929      	ldr	r1, [r5, #16]
   d6044:	4620      	mov	r0, r4
   d6046:	3101      	adds	r1, #1
   d6048:	f7ff ffb9 	bl	d5fbe <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d604c:	68e9      	ldr	r1, [r5, #12]
   d604e:	4620      	mov	r0, r4
   d6050:	f7ff ffbc 	bl	d5fcc <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d6054:	69a9      	ldr	r1, [r5, #24]
   d6056:	4620      	mov	r0, r4
   d6058:	f7ff ffc3 	bl	d5fe2 <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d605c:	68a9      	ldr	r1, [r5, #8]
   d605e:	4620      	mov	r0, r4
   d6060:	f7ff ffca 	bl	d5ff8 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d6064:	6869      	ldr	r1, [r5, #4]
   d6066:	4620      	mov	r0, r4
   d6068:	f7ff ffcd 	bl	d6006 <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d606c:	6829      	ldr	r1, [r5, #0]
   d606e:	293b      	cmp	r1, #59	; 0x3b
   d6070:	bfa8      	it	ge
   d6072:	213b      	movge	r1, #59	; 0x3b
   d6074:	4620      	mov	r0, r4
   d6076:	f7ff ffcd 	bl	d6014 <_ZN12MCP79410Time9setSecondEi>
}
   d607a:	b003      	add	sp, #12
   d607c:	bd30      	pop	{r4, r5, pc}
	...

000d6080 <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d6080:	4a05      	ldr	r2, [pc, #20]	; (d6098 <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d6082:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d6084:	e9c0 2100 	strd	r2, r1, [r0]
   d6088:	4a04      	ldr	r2, [pc, #16]	; (d609c <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d608a:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d608c:	4a04      	ldr	r2, [pc, #16]	; (d60a0 <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d608e:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6090:	4a04      	ldr	r2, [pc, #16]	; (d60a4 <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d6092:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d6094:	6142      	str	r2, [r0, #20]
}
   d6096:	4770      	bx	lr
   d6098:	000dbdd0 	.word	0x000dbdd0
   d609c:	03010000 	.word	0x03010000
   d60a0:	000dbd78 	.word	0x000dbd78
   d60a4:	000dbdac 	.word	0x000dbdac

000d60a8 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d60a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d60ac:	4604      	mov	r4, r0
   d60ae:	460f      	mov	r7, r1
   d60b0:	4690      	mov	r8, r2
   d60b2:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d60b4:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d60b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d60b8:	429e      	cmp	r6, r3
   d60ba:	d231      	bcs.n	d6120 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d60bc:	6860      	ldr	r0, [r4, #4]
   d60be:	4639      	mov	r1, r7
   d60c0:	f001 fd23 	bl	d7b0a <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d60c4:	eb08 0106 	add.w	r1, r8, r6
   d60c8:	6860      	ldr	r0, [r4, #4]
   d60ca:	f7ff fd47 	bl	d5b5c <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d60ce:	6860      	ldr	r0, [r4, #4]
   d60d0:	2100      	movs	r1, #0
   d60d2:	f001 fd21 	bl	d7b18 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d60d6:	4605      	mov	r5, r0
   d60d8:	b9d0      	cbnz	r0, d6110 <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d60da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d60dc:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d60de:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d60e0:	2a20      	cmp	r2, #32
   d60e2:	f04f 0301 	mov.w	r3, #1
   d60e6:	bf28      	it	cs
   d60e8:	2220      	movcs	r2, #32
   d60ea:	4639      	mov	r1, r7
   d60ec:	f001 fcfb 	bl	d7ae6 <_ZN7TwoWire11requestFromEhjh>
   d60f0:	eb09 0b06 	add.w	fp, r9, r6
   d60f4:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d60f6:	eb0b 0a00 	add.w	sl, fp, r0
   d60fa:	45da      	cmp	sl, fp
   d60fc:	d006      	beq.n	d610c <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d60fe:	6860      	ldr	r0, [r4, #4]
   d6100:	6803      	ldr	r3, [r0, #0]
   d6102:	695b      	ldr	r3, [r3, #20]
   d6104:	4798      	blx	r3
   d6106:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d610a:	e7f6      	b.n	d60fa <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d610c:	442e      	add	r6, r5
	while(offset < bufLen) {
   d610e:	e7d2      	b.n	d60b6 <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d6110:	4602      	mov	r2, r0
   d6112:	4904      	ldr	r1, [pc, #16]	; (d6124 <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d6114:	4804      	ldr	r0, [pc, #16]	; (d6128 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d6116:	f7ff fd25 	bl	d5b64 <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d611a:	4628      	mov	r0, r5
   d611c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6120:	2500      	movs	r5, #0
	return stat;
   d6122:	e7fa      	b.n	d611a <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d6124:	000dbcd0 	.word	0x000dbcd0
   d6128:	2003e5d8 	.word	0x2003e5d8

000d612c <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d612c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6130:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6134:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6136:	6803      	ldr	r3, [r0, #0]
   d6138:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d613a:	4605      	mov	r5, r0
   d613c:	460c      	mov	r4, r1
   d613e:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6140:	4798      	blx	r3
   d6142:	4580      	cmp	r8, r0
   d6144:	d80d      	bhi.n	d6162 <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6146:	3420      	adds	r4, #32
   d6148:	6868      	ldr	r0, [r5, #4]
   d614a:	9600      	str	r6, [sp, #0]
   d614c:	463b      	mov	r3, r7
   d614e:	b2e2      	uxtb	r2, r4
   d6150:	216f      	movs	r1, #111	; 0x6f
   d6152:	f7ff ffa9 	bl	d60a8 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d6156:	fab0 f080 	clz	r0, r0
   d615a:	0940      	lsrs	r0, r0, #5
}
   d615c:	b002      	add	sp, #8
   d615e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6162:	2000      	movs	r0, #0
   d6164:	e7fa      	b.n	d615c <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d6166 <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6166:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d616a:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d616e:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6170:	6803      	ldr	r3, [r0, #0]
   d6172:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d6174:	4604      	mov	r4, r0
   d6176:	460d      	mov	r5, r1
   d6178:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d617a:	4798      	blx	r3
   d617c:	4580      	cmp	r8, r0
   d617e:	d80c      	bhi.n	d619a <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d6180:	6860      	ldr	r0, [r4, #4]
   d6182:	9600      	str	r6, [sp, #0]
   d6184:	463b      	mov	r3, r7
   d6186:	b2ea      	uxtb	r2, r5
   d6188:	2157      	movs	r1, #87	; 0x57
   d618a:	f7ff ff8d 	bl	d60a8 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d618e:	fab0 f080 	clz	r0, r0
   d6192:	0940      	lsrs	r0, r0, #5
}
   d6194:	b002      	add	sp, #8
   d6196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d619a:	2000      	movs	r0, #0
   d619c:	e7fa      	b.n	d6194 <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d619e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d619e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d61a0:	1e1e      	subs	r6, r3, #0
   d61a2:	bf0c      	ite	eq
   d61a4:	2307      	moveq	r3, #7
   d61a6:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d61a8:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d61aa:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d61ac:	ab02      	add	r3, sp, #8
   d61ae:	460a      	mov	r2, r1
   d61b0:	216f      	movs	r1, #111	; 0x6f
   d61b2:	f7ff ff79 	bl	d60a8 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d61b6:	4605      	mov	r5, r0
   d61b8:	b9a8      	cbnz	r0, d61e6 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d61ba:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d61be:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d61c0:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d61c4:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d61c6:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d61ca:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d61cc:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d61d0:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d61d2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d61d6:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d61d8:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d61dc:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d61de:	b92e      	cbnz	r6, d61ec <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d61e0:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d61e4:	72a3      	strb	r3, [r4, #10]
}
   d61e6:	4628      	mov	r0, r5
   d61e8:	b004      	add	sp, #16
   d61ea:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d61ec:	f002 f8e4 	bl	d83b8 <_ZN9TimeClass4yearEv>
   d61f0:	f7ff fecc 	bl	d5f8c <_ZN12MCP79410Time8intToBcdEi>
   d61f4:	72a0      	strb	r0, [r4, #10]
	return stat;
   d61f6:	e7f6      	b.n	d61e6 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d61f8 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d61f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d61fa:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d61fc:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d61fe:	9300      	str	r3, [sp, #0]
   d6200:	216f      	movs	r1, #111	; 0x6f
   d6202:	ab03      	add	r3, sp, #12
   d6204:	f7ff ff50 	bl	d60a8 <_ZNK8MCP7941010deviceReadEhhPhj>
   d6208:	b920      	cbnz	r0, d6214 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d620a:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d620e:	b005      	add	sp, #20
   d6210:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d6214:	2000      	movs	r0, #0
   d6216:	e7fa      	b.n	d620e <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d6218 <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d6218:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d621a:	2103      	movs	r1, #3
   d621c:	f7ff ffec 	bl	d61f8 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d6220:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d6224:	bd08      	pop	{r3, pc}

000d6226 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d6226:	b538      	push	{r3, r4, r5, lr}
   d6228:	2300      	movs	r3, #0
   d622a:	460c      	mov	r4, r1
   d622c:	460a      	mov	r2, r1
   d622e:	4619      	mov	r1, r3
   d6230:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d6232:	f7ff ffb4 	bl	d619e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d6236:	b930      	cbnz	r0, d6246 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d6238:	7aa3      	ldrb	r3, [r4, #10]
   d623a:	b123      	cbz	r3, d6246 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d623c:	4628      	mov	r0, r5
}
   d623e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d6242:	f7ff bfe9 	b.w	d6218 <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d6246:	2000      	movs	r0, #0
   d6248:	bd38      	pop	{r3, r4, r5, pc}

000d624a <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d624a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d624c:	4602      	mov	r2, r0
	MCP79410Time time;
   d624e:	a801      	add	r0, sp, #4
   d6250:	f7ff fe28 	bl	d5ea4 <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d6254:	a901      	add	r1, sp, #4
   d6256:	4610      	mov	r0, r2
   d6258:	f7ff ffe5 	bl	d6226 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d625c:	b128      	cbz	r0, d626a <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d625e:	a801      	add	r0, sp, #4
   d6260:	f7ff fe6c 	bl	d5f3c <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d6264:	b007      	add	sp, #28
   d6266:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d626a:	2000      	movs	r0, #0
   d626c:	4601      	mov	r1, r0
   d626e:	e7f9      	b.n	d6264 <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d6270 <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d6270:	b5d0      	push	{r4, r6, r7, lr}
   d6272:	4604      	mov	r4, r0
   d6274:	b086      	sub	sp, #24
	wire.begin();
   d6276:	6840      	ldr	r0, [r0, #4]
   d6278:	f001 fc18 	bl	d7aac <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d627c:	f002 f862 	bl	d8344 <_ZN9TimeClass7isValidEv>
   d6280:	b9e8      	cbnz	r0, d62be <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d6282:	7ae3      	ldrb	r3, [r4, #11]
   d6284:	079b      	lsls	r3, r3, #30
   d6286:	d51a      	bpl.n	d62be <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d6288:	4620      	mov	r0, r4
   d628a:	f7ff ffde 	bl	d624a <_ZNK8MCP7941010getRTCTimeEv>
   d628e:	4606      	mov	r6, r0
   d6290:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d6292:	ea56 0307 	orrs.w	r3, r6, r7
   d6296:	d012      	beq.n	d62be <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d6298:	f001 ff5b 	bl	d8152 <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d629c:	4b0a      	ldr	r3, [pc, #40]	; (d62c8 <_ZN8MCP794105setupEv+0x58>)
   d629e:	490b      	ldr	r1, [pc, #44]	; (d62cc <_ZN8MCP794105setupEv+0x5c>)
   d62a0:	681b      	ldr	r3, [r3, #0]
   d62a2:	9300      	str	r3, [sp, #0]
   d62a4:	4632      	mov	r2, r6
   d62a6:	463b      	mov	r3, r7
   d62a8:	a802      	add	r0, sp, #8
   d62aa:	f002 f809 	bl	d82c0 <_ZN9TimeClass6formatExPKc>
   d62ae:	4808      	ldr	r0, [pc, #32]	; (d62d0 <_ZN8MCP794105setupEv+0x60>)
   d62b0:	9a02      	ldr	r2, [sp, #8]
   d62b2:	4908      	ldr	r1, [pc, #32]	; (d62d4 <_ZN8MCP794105setupEv+0x64>)
   d62b4:	f7ff fc56 	bl	d5b64 <_ZNK5spark6Logger4infoEPKcz>
   d62b8:	a802      	add	r0, sp, #8
   d62ba:	f001 fe0b 	bl	d7ed4 <_ZN6StringD1Ev>
	setupDone = true;
   d62be:	2301      	movs	r3, #1
   d62c0:	7223      	strb	r3, [r4, #8]
}
   d62c2:	b006      	add	sp, #24
   d62c4:	bdd0      	pop	{r4, r6, r7, pc}
   d62c6:	bf00      	nop
   d62c8:	2003dcc8 	.word	0x2003dcc8
   d62cc:	2003e648 	.word	0x2003e648
   d62d0:	2003e5d8 	.word	0x2003e5d8
   d62d4:	000dbcea 	.word	0x000dbcea

000d62d8 <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d62d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d62dc:	4606      	mov	r6, r0
   d62de:	4688      	mov	r8, r1
   d62e0:	4691      	mov	r9, r2
   d62e2:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d62e4:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d62e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d62e8:	429d      	cmp	r5, r3
   d62ea:	d229      	bcs.n	d6340 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d62ec:	6870      	ldr	r0, [r6, #4]
   d62ee:	4641      	mov	r1, r8
   d62f0:	f001 fc0b 	bl	d7b0a <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d62f4:	6870      	ldr	r0, [r6, #4]
   d62f6:	eb09 0105 	add.w	r1, r9, r5
   d62fa:	f7ff fc2f 	bl	d5b5c <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d62fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6300:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d6302:	2f1f      	cmp	r7, #31
   d6304:	bf28      	it	cs
   d6306:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d6308:	eb0a 0405 	add.w	r4, sl, r5
   d630c:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d6310:	6870      	ldr	r0, [r6, #4]
   d6312:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6316:	6802      	ldr	r2, [r0, #0]
   d6318:	6892      	ldr	r2, [r2, #8]
   d631a:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d631c:	45a3      	cmp	fp, r4
   d631e:	d1f7      	bne.n	d6310 <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d6320:	6870      	ldr	r0, [r6, #4]
   d6322:	2101      	movs	r1, #1
   d6324:	f001 fbf8 	bl	d7b18 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d6328:	4604      	mov	r4, r0
   d632a:	b138      	cbz	r0, d633c <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d632c:	4602      	mov	r2, r0
   d632e:	4905      	ldr	r1, [pc, #20]	; (d6344 <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d6330:	4805      	ldr	r0, [pc, #20]	; (d6348 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d6332:	f7ff fc17 	bl	d5b64 <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d6336:	4620      	mov	r0, r4
   d6338:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d633c:	443d      	add	r5, r7
	while(offset < bufLen) {
   d633e:	e7d2      	b.n	d62e6 <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d6340:	2400      	movs	r4, #0
	return stat;
   d6342:	e7f8      	b.n	d6336 <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d6344:	000dbcff 	.word	0x000dbcff
   d6348:	2003e5d8 	.word	0x2003e5d8

000d634c <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d634c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d6350:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6354:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6356:	6803      	ldr	r3, [r0, #0]
   d6358:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d635a:	4605      	mov	r5, r0
   d635c:	460c      	mov	r4, r1
   d635e:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d6360:	4798      	blx	r3
   d6362:	4580      	cmp	r8, r0
   d6364:	d80d      	bhi.n	d6382 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6366:	3420      	adds	r4, #32
   d6368:	6868      	ldr	r0, [r5, #4]
   d636a:	9600      	str	r6, [sp, #0]
   d636c:	463b      	mov	r3, r7
   d636e:	b2e2      	uxtb	r2, r4
   d6370:	216f      	movs	r1, #111	; 0x6f
   d6372:	f7ff ffb1 	bl	d62d8 <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d6376:	fab0 f080 	clz	r0, r0
   d637a:	0940      	lsrs	r0, r0, #5
}
   d637c:	b002      	add	sp, #8
   d637e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d6382:	2000      	movs	r0, #0
   d6384:	e7fa      	b.n	d637c <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d6386 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d6386:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d6388:	7c13      	ldrb	r3, [r2, #16]
   d638a:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d638e:	7bd3      	ldrb	r3, [r2, #15]
   d6390:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d6394:	7b93      	ldrb	r3, [r2, #14]
   d6396:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d639a:	7b53      	ldrb	r3, [r2, #13]
   d639c:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d63a0:	7b13      	ldrb	r3, [r2, #12]
   d63a2:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d63a6:	7ad3      	ldrb	r3, [r2, #11]
   d63a8:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d63ac:	7a93      	ldrb	r3, [r2, #10]
   d63ae:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d63b2:	2307      	movs	r3, #7
   d63b4:	9300      	str	r3, [sp, #0]
   d63b6:	460a      	mov	r2, r1
   d63b8:	ab02      	add	r3, sp, #8
   d63ba:	216f      	movs	r1, #111	; 0x6f
   d63bc:	f7ff ff8c 	bl	d62d8 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d63c0:	b005      	add	sp, #20
   d63c2:	f85d fb04 	ldr.w	pc, [sp], #4

000d63c6 <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d63c6:	b510      	push	{r4, lr}
   d63c8:	b088      	sub	sp, #32
   d63ca:	4604      	mov	r4, r0
	MCP79410Time time;
   d63cc:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d63ce:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d63d0:	f7ff fd68 	bl	d5ea4 <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d63d4:	9b01      	ldr	r3, [sp, #4]
   d63d6:	a803      	add	r0, sp, #12
   d63d8:	f7ff fe27 	bl	d602a <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d63dc:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d63e0:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d63e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d63e6:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d63ea:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d63ee:	b16a      	cbz	r2, d640c <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d63f0:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d63f4:	aa03      	add	r2, sp, #12
   d63f6:	2100      	movs	r1, #0
   d63f8:	4620      	mov	r0, r4
   d63fa:	f88d 3019 	strb.w	r3, [sp, #25]
   d63fe:	f7ff ffc2 	bl	d6386 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d6402:	fab0 f080 	clz	r0, r0
   d6406:	0940      	lsrs	r0, r0, #5
   d6408:	b008      	add	sp, #32
   d640a:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d640c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d6410:	e7f0      	b.n	d63f4 <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d6414 <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d6414:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6416:	b087      	sub	sp, #28
   d6418:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d641a:	f001 ff93 	bl	d8344 <_ZN9TimeClass7isValidEv>
   d641e:	4604      	mov	r4, r0
   d6420:	b1e8      	cbz	r0, d645e <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d6422:	f001 ffac 	bl	d837e <_ZN9TimeClass3nowEv>
   d6426:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d6428:	4602      	mov	r2, r0
		time_t now = Time.now();
   d642a:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d642c:	463b      	mov	r3, r7
   d642e:	4628      	mov	r0, r5
   d6430:	f7ff ffc9 	bl	d63c6 <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d6434:	4b0c      	ldr	r3, [pc, #48]	; (d6468 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d6436:	490d      	ldr	r1, [pc, #52]	; (d646c <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d6438:	681b      	ldr	r3, [r3, #0]
   d643a:	9300      	str	r3, [sp, #0]
   d643c:	4632      	mov	r2, r6
   d643e:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d6440:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d6442:	a802      	add	r0, sp, #8
   d6444:	f001 ff3c 	bl	d82c0 <_ZN9TimeClass6formatExPKc>
   d6448:	4809      	ldr	r0, [pc, #36]	; (d6470 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d644a:	9a02      	ldr	r2, [sp, #8]
   d644c:	4909      	ldr	r1, [pc, #36]	; (d6474 <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d644e:	f7ff fb89 	bl	d5b64 <_ZNK5spark6Logger4infoEPKcz>
   d6452:	a802      	add	r0, sp, #8
   d6454:	f001 fd3e 	bl	d7ed4 <_ZN6StringD1Ev>
}
   d6458:	4620      	mov	r0, r4
   d645a:	b007      	add	sp, #28
   d645c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d645e:	4906      	ldr	r1, [pc, #24]	; (d6478 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d6460:	4803      	ldr	r0, [pc, #12]	; (d6470 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d6462:	f7ff fb7f 	bl	d5b64 <_ZNK5spark6Logger4infoEPKcz>
   d6466:	e7f7      	b.n	d6458 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d6468:	2003dcc8 	.word	0x2003dcc8
   d646c:	2003e648 	.word	0x2003e648
   d6470:	2003e5d8 	.word	0x2003e5d8
   d6474:	000dbd1a 	.word	0x000dbd1a
   d6478:	000dbd30 	.word	0x000dbd30

000d647c <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d647c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d647e:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d6480:	4604      	mov	r4, r0
	if (!timeSet) {
   d6482:	b99d      	cbnz	r5, d64ac <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d6484:	f001 ff5e 	bl	d8344 <_ZN9TimeClass7isValidEv>
   d6488:	b180      	cbz	r0, d64ac <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d648a:	2200      	movs	r2, #0
   d648c:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d648e:	4669      	mov	r1, sp
   d6490:	4628      	mov	r0, r5
        tm = 0;
   d6492:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d6496:	f000 fe35 	bl	d7104 <spark_sync_time_last>
			if (lastSync != 0) {
   d649a:	b138      	cbz	r0, d64ac <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d649c:	7ae3      	ldrb	r3, [r4, #11]
   d649e:	07db      	lsls	r3, r3, #31
   d64a0:	d502      	bpl.n	d64a8 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d64a2:	4620      	mov	r0, r4
   d64a4:	f7ff ffb6 	bl	d6414 <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d64a8:	2301      	movs	r3, #1
   d64aa:	7263      	strb	r3, [r4, #9]
}
   d64ac:	b003      	add	sp, #12
   d64ae:	bd30      	pop	{r4, r5, pc}

000d64b0 <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d64b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d64b2:	2301      	movs	r3, #1
	buf[0] = value;
   d64b4:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d64b8:	9300      	str	r3, [sp, #0]
   d64ba:	460a      	mov	r2, r1
   d64bc:	ab03      	add	r3, sp, #12
   d64be:	216f      	movs	r1, #111	; 0x6f
   d64c0:	f7ff ff0a 	bl	d62d8 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d64c4:	b005      	add	sp, #20
   d64c6:	f85d fb04 	ldr.w	pc, [sp], #4

000d64ca <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d64ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d64cc:	4604      	mov	r4, r0
   d64ce:	460d      	mov	r5, r1
   d64d0:	4617      	mov	r7, r2
   d64d2:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d64d4:	f7ff fe90 	bl	d61f8 <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   d64d8:	ea00 0207 	and.w	r2, r0, r7
	return deviceWriteRegisterByte(addr, value);
   d64dc:	4332      	orrs	r2, r6
   d64de:	4629      	mov	r1, r5
   d64e0:	4620      	mov	r0, r4
}
   d64e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   d64e6:	f7ff bfe3 	b.w	d64b0 <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d64ea <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   d64ea:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   d64ec:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d64ee:	d80c      	bhi.n	d650a <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d64f0:	2900      	cmp	r1, #0
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d64f2:	f04f 0300 	mov.w	r3, #0
   d64f6:	bf14      	ite	ne
   d64f8:	22df      	movne	r2, #223	; 0xdf
   d64fa:	22ef      	moveq	r2, #239	; 0xef
   d64fc:	2107      	movs	r1, #7
   d64fe:	f7ff ffe4 	bl	d64ca <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d6502:	fab0 f080 	clz	r0, r0
   d6506:	0940      	lsrs	r0, r0, #5
}
   d6508:	bd08      	pop	{r3, pc}
		return false;
   d650a:	2000      	movs	r0, #0
   d650c:	e7fc      	b.n	d6508 <_ZN8MCP7941010clearAlarmEi+0x1e>

000d650e <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d650e:	b538      	push	{r3, r4, r5, lr}
   d6510:	4604      	mov	r4, r0
   d6512:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d6514:	6860      	ldr	r0, [r4, #4]
   d6516:	2157      	movs	r1, #87	; 0x57
   d6518:	f001 faf7 	bl	d7b0a <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d651c:	6860      	ldr	r0, [r4, #4]
   d651e:	2101      	movs	r1, #1
   d6520:	f001 fafa 	bl	d7b18 <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d6524:	b108      	cbz	r0, d652a <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d6526:	3d01      	subs	r5, #1
   d6528:	d1f4      	bne.n	d6514 <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d652a:	bd38      	pop	{r3, r4, r5, pc}

000d652c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d652c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6530:	4604      	mov	r4, r0
   d6532:	460f      	mov	r7, r1
   d6534:	4616      	mov	r6, r2
   d6536:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d653a:	45b0      	cmp	r8, r6
   d653c:	d020      	beq.n	d6580 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d653e:	6860      	ldr	r0, [r4, #4]
   d6540:	2157      	movs	r1, #87	; 0x57
   d6542:	f001 fae2 	bl	d7b0a <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6546:	4639      	mov	r1, r7
   d6548:	6860      	ldr	r0, [r4, #4]
   d654a:	f7ff fb07 	bl	d5b5c <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d654e:	6860      	ldr	r0, [r4, #4]
   d6550:	f816 1b01 	ldrb.w	r1, [r6], #1
   d6554:	6803      	ldr	r3, [r0, #0]
   d6556:	689b      	ldr	r3, [r3, #8]
   d6558:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d655a:	6860      	ldr	r0, [r4, #4]
   d655c:	2101      	movs	r1, #1
   d655e:	f001 fadb 	bl	d7b18 <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d6562:	3701      	adds	r7, #1
   d6564:	4605      	mov	r5, r0
   d6566:	b138      	cbz	r0, d6578 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d6568:	4602      	mov	r2, r0
   d656a:	4906      	ldr	r1, [pc, #24]	; (d6584 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d656c:	4806      	ldr	r0, [pc, #24]	; (d6588 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d656e:	f7ff faf9 	bl	d5b64 <_ZNK5spark6Logger4infoEPKcz>
}
   d6572:	4628      	mov	r0, r5
   d6574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d6578:	4620      	mov	r0, r4
   d657a:	f7ff ffc8 	bl	d650e <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d657e:	e7dc      	b.n	d653a <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d6580:	2500      	movs	r5, #0
	return stat;
   d6582:	e7f6      	b.n	d6572 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d6584:	000dbd45 	.word	0x000dbd45
   d6588:	2003e5d8 	.word	0x2003e5d8

000d658c <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d658c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d658e:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6590:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6592:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6594:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d6596:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6598:	4604      	mov	r4, r0
   d659a:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d659c:	4798      	blx	r3
   d659e:	4287      	cmp	r7, r0
   d65a0:	d80a      	bhi.n	d65b8 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d65a2:	9a01      	ldr	r2, [sp, #4]
   d65a4:	6860      	ldr	r0, [r4, #4]
   d65a6:	4633      	mov	r3, r6
   d65a8:	b2e9      	uxtb	r1, r5
   d65aa:	f7ff ffbf 	bl	d652c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d65ae:	fab0 f080 	clz	r0, r0
   d65b2:	0940      	lsrs	r0, r0, #5
}
   d65b4:	b003      	add	sp, #12
   d65b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d65b8:	2000      	movs	r0, #0
   d65ba:	e7fb      	b.n	d65b4 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d65bc <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   d65bc:	4b01      	ldr	r3, [pc, #4]	; (d65c4 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d65be:	4a02      	ldr	r2, [pc, #8]	; (d65c8 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d65c0:	601a      	str	r2, [r3, #0]
}
   d65c2:	4770      	bx	lr
   d65c4:	2003e5d8 	.word	0x2003e5d8
   d65c8:	000dbd66 	.word	0x000dbd66

000d65cc <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	switch (__op)
   d65cc:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d65ce:	4603      	mov	r3, r0
	switch (__op)
   d65d0:	d102      	bne.n	d65d8 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	    __dest._M_access<_Functor*>() =
   d65d2:	6001      	str	r1, [r0, #0]
      }
   d65d4:	2000      	movs	r0, #0
   d65d6:	4770      	bx	lr
	  switch (__op)
   d65d8:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d65da:	bf04      	itt	eq
   d65dc:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d65e0:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d65e4:	e7f6      	b.n	d65d4 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d65e6 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d65e6:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d65e8:	2301      	movs	r3, #1
   d65ea:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d65ec:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d65ee:	4604      	mov	r4, r0
        if (th->func) {
   d65f0:	b143      	cbz	r3, d6604 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d65f2:	68c0      	ldr	r0, [r0, #12]
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d65f4:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d65f6:	2301      	movs	r3, #1
   d65f8:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d65fa:	2000      	movs	r0, #0
    }
   d65fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d6600:	f000 bb32 	b.w	d6c68 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6604:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d6606:	2800      	cmp	r0, #0
   d6608:	d0f5      	beq.n	d65f6 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d660a:	6883      	ldr	r3, [r0, #8]
   d660c:	b90b      	cbnz	r3, d6612 <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d660e:	f002 f960 	bl	d88d2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6612:	68c3      	ldr	r3, [r0, #12]
   d6614:	e7ee      	b.n	d65f4 <_ZN6Thread3runEPv+0xe>

000d6616 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6616:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d6618:	6842      	ldr	r2, [r0, #4]
   d661a:	4603      	mov	r3, r0
   d661c:	1054      	asrs	r4, r2, #1
   d661e:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d6622:	07d2      	lsls	r2, r2, #31
   d6624:	bf48      	it	mi
   d6626:	590a      	ldrmi	r2, [r1, r4]
   d6628:	681b      	ldr	r3, [r3, #0]
      }
   d662a:	f85d 4b04 	ldr.w	r4, [sp], #4
   d662e:	bf48      	it	mi
   d6630:	58d3      	ldrmi	r3, [r2, r3]
   d6632:	4718      	bx	r3

000d6634 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d6634:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d6636:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d6638:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d663c:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d663e:	3008      	adds	r0, #8
   d6640:	f000 faea 	bl	d6c18 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d6644:	2004      	movs	r0, #4
   d6646:	f7fd fd26 	bl	d4096 <_Znwj>
   d664a:	4605      	mov	r5, r0
   d664c:	b398      	cbz	r0, d66b6 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d664e:	491b      	ldr	r1, [pc, #108]	; (d66bc <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d6650:	2014      	movs	r0, #20
   d6652:	f002 f93a 	bl	d88ca <_ZnwjRKSt9nothrow_t>
   d6656:	b130      	cbz	r0, d6666 <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6658:	2300      	movs	r3, #0
            exited(false) {
   d665a:	e9c0 3300 	strd	r3, r3, [r0]
   d665e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d6662:	7403      	strb	r3, [r0, #16]
   d6664:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d6666:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d6668:	b1a0      	cbz	r0, d6694 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d666a:	4b15      	ldr	r3, [pc, #84]	; (d66c0 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d666c:	4915      	ldr	r1, [pc, #84]	; (d66c4 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d666e:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6672:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d6676:	e9cd 0300 	strd	r0, r3, [sp]
   d667a:	2202      	movs	r2, #2
   d667c:	4b12      	ldr	r3, [pc, #72]	; (d66c8 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d667e:	3004      	adds	r0, #4
   d6680:	f000 fa92 	bl	d6ba8 <os_thread_create>
   d6684:	b930      	cbnz	r0, d6694 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6686:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d6688:	7c1b      	ldrb	r3, [r3, #16]
   d668a:	b9a3      	cbnz	r3, d66b6 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d668c:	2001      	movs	r0, #1
   d668e:	f000 fb0b 	bl	d6ca8 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d6692:	e7f8      	b.n	d6686 <_ZN21PublishQueueAsyncBase5setupEv+0x52>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6694:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6696:	2300      	movs	r3, #0
   d6698:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d669a:	b164      	cbz	r4, d66b6 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d669c:	6827      	ldr	r7, [r4, #0]
   d669e:	b137      	cbz	r7, d66ae <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d66a0:	4638      	mov	r0, r7
   d66a2:	f7fd fe0d 	bl	d42c0 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d66a6:	2110      	movs	r1, #16
   d66a8:	4638      	mov	r0, r7
   d66aa:	f002 f90c 	bl	d88c6 <_ZdlPvj>
   d66ae:	2114      	movs	r1, #20
   d66b0:	4620      	mov	r0, r4
   d66b2:	f002 f908 	bl	d88c6 <_ZdlPvj>
   d66b6:	6075      	str	r5, [r6, #4]
}
   d66b8:	b003      	add	sp, #12
   d66ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d66bc:	000dc080 	.word	0x000dc080
   d66c0:	000d68d3 	.word	0x000d68d3
   d66c4:	000dbdd8 	.word	0x000dbdd8
   d66c8:	000d65e7 	.word	0x000d65e7

000d66cc <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d66cc:	f247 5130 	movw	r1, #30000	; 0x7530
   d66d0:	4a08      	ldr	r2, [pc, #32]	; (d66f4 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d66d2:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d66d4:	4908      	ldr	r1, [pc, #32]	; (d66f8 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d66d6:	6002      	str	r2, [r0, #0]
   d66d8:	2200      	movs	r2, #0
   d66da:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d66de:	4907      	ldr	r1, [pc, #28]	; (d66fc <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d66e0:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d66e2:	4907      	ldr	r1, [pc, #28]	; (d6700 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d66e4:	6042      	str	r2, [r0, #4]
   d66e6:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d66ea:	6181      	str	r1, [r0, #24]
   d66ec:	8502      	strh	r2, [r0, #40]	; 0x28
   d66ee:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d66f2:	4770      	bx	lr
   d66f4:	000dbe9c 	.word	0x000dbe9c
   d66f8:	000d6a3d 	.word	0x000d6a3d
   d66fc:	000d6617 	.word	0x000d6617
   d6700:	000d65cd 	.word	0x000d65cd

000d6704 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d6704:	b510      	push	{r4, lr}
   d6706:	4b04      	ldr	r3, [pc, #16]	; (d6718 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d6708:	4604      	mov	r4, r0
   d670a:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d670e:	f7fd fdd7 	bl	d42c0 <_ZNSt14_Function_baseD1Ev>
}
   d6712:	4620      	mov	r0, r4
   d6714:	bd10      	pop	{r4, pc}
   d6716:	bf00      	nop
   d6718:	000dbe9c 	.word	0x000dbe9c

000d671c <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d671c:	b510      	push	{r4, lr}
   d671e:	4b03      	ldr	r3, [pc, #12]	; (d672c <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d6720:	6003      	str	r3, [r0, #0]
   d6722:	4604      	mov	r4, r0
   d6724:	f7ff ffee 	bl	d6704 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d6728:	4620      	mov	r0, r4
   d672a:	bd10      	pop	{r4, pc}
   d672c:	000dbec4 	.word	0x000dbec4

000d6730 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d6730:	b510      	push	{r4, lr}
   d6732:	4604      	mov	r4, r0
}
   d6734:	f7ff fff2 	bl	d671c <_ZN25PublishQueueAsyncRetainedD1Ev>
   d6738:	4620      	mov	r0, r4
   d673a:	2138      	movs	r1, #56	; 0x38
   d673c:	f002 f8c3 	bl	d88c6 <_ZdlPvj>
   d6740:	4620      	mov	r0, r4
   d6742:	bd10      	pop	{r4, pc}

000d6744 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d6744:	6880      	ldr	r0, [r0, #8]
   d6746:	f000 ba6f 	b.w	d6c28 <os_mutex_lock>

000d674a <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d674a:	6880      	ldr	r0, [r0, #8]
   d674c:	f000 ba74 	b.w	d6c38 <os_mutex_unlock>

000d6750 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d6750:	b510      	push	{r4, lr}
   d6752:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d6754:	6800      	ldr	r0, [r0, #0]
   d6756:	f7ff fff8 	bl	d674a <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d675a:	4620      	mov	r0, r4
   d675c:	bd10      	pop	{r4, pc}

000d675e <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d675e:	b513      	push	{r0, r1, r4, lr}
   d6760:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6762:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6764:	f7ff ffee 	bl	d6744 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6768:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d676a:	88dc      	ldrh	r4, [r3, #6]
   d676c:	b2a4      	uxth	r4, r4
   d676e:	b10c      	cbz	r4, d6774 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d6770:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d6774:	a801      	add	r0, sp, #4
   d6776:	f7ff ffeb 	bl	d6750 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d677a:	4620      	mov	r0, r4
   d677c:	b002      	add	sp, #8
   d677e:	bd10      	pop	{r4, pc}

000d6780 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d6780:	b513      	push	{r0, r1, r4, lr}
   d6782:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6784:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6786:	f7ff ffdd 	bl	d6744 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d678a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d678e:	b943      	cbnz	r3, d67a2 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6790:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d6792:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d6794:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d6796:	a801      	add	r0, sp, #4
   d6798:	f7ff ffda 	bl	d6750 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d679c:	4620      	mov	r0, r4
   d679e:	b002      	add	sp, #8
   d67a0:	bd10      	pop	{r4, pc}
	bool result = false;
   d67a2:	2400      	movs	r4, #0
   d67a4:	e7f7      	b.n	d6796 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d67a6 <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d67a6:	b513      	push	{r0, r1, r4, lr}
   d67a8:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d67aa:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d67ac:	f7ff ffca 	bl	d6744 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d67b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d67b2:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d67b4:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d67b6:	f7ff ffcb 	bl	d6750 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d67ba:	4620      	mov	r0, r4
   d67bc:	b002      	add	sp, #8
   d67be:	bd10      	pop	{r4, pc}

000d67c0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d67c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d67c4:	4699      	mov	r9, r3
   d67c6:	b086      	sub	sp, #24
	if (!haveSetup) {
   d67c8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d67cc:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d67d0:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d67d4:	4604      	mov	r4, r0
   d67d6:	460f      	mov	r7, r1
   d67d8:	4616      	mov	r6, r2
	if (!haveSetup) {
   d67da:	b913      	cbnz	r3, d67e2 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d67dc:	6803      	ldr	r3, [r0, #0]
   d67de:	689b      	ldr	r3, [r3, #8]
   d67e0:	4798      	blx	r3
		data = "";
   d67e2:	4b31      	ldr	r3, [pc, #196]	; (d68a8 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d67e4:	4638      	mov	r0, r7
		data = "";
   d67e6:	2e00      	cmp	r6, #0
   d67e8:	bf08      	it	eq
   d67ea:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d67ec:	f002 ff63 	bl	d96b6 <strlen>
   d67f0:	4605      	mov	r5, r0
   d67f2:	4630      	mov	r0, r6
   d67f4:	f002 ff5f 	bl	d96b6 <strlen>
   d67f8:	4428      	add	r0, r5
   d67fa:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d67fe:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d6800:	bf1c      	itt	ne
   d6802:	f025 0503 	bicne.w	r5, r5, #3
   d6806:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d6808:	4633      	mov	r3, r6
   d680a:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d680e:	e9cd 9a00 	strd	r9, sl, [sp]
   d6812:	4926      	ldr	r1, [pc, #152]	; (d68ac <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d6814:	4826      	ldr	r0, [pc, #152]	; (d68b0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d6816:	463a      	mov	r2, r7
   d6818:	f7ff f9a4 	bl	d5b64 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d681c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d681e:	3b08      	subs	r3, #8
   d6820:	42ab      	cmp	r3, r5
   d6822:	d212      	bcs.n	d684a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d6824:	2400      	movs	r4, #0
}
   d6826:	4620      	mov	r0, r4
   d6828:	b006      	add	sp, #24
   d682a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d682e:	88cb      	ldrh	r3, [r1, #6]
   d6830:	2b01      	cmp	r3, #1
   d6832:	d036      	beq.n	d68a2 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d6834:	a805      	add	r0, sp, #20
   d6836:	f7ff ff8b 	bl	d6750 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d683a:	6823      	ldr	r3, [r4, #0]
   d683c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d6840:	699b      	ldr	r3, [r3, #24]
   d6842:	4620      	mov	r0, r4
   d6844:	4798      	blx	r3
   d6846:	2800      	cmp	r0, #0
   d6848:	d0ec      	beq.n	d6824 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d684a:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d684c:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d684e:	f7ff ff79 	bl	d6744 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6852:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d6854:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d6856:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6858:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d685a:	1ad2      	subs	r2, r2, r3
   d685c:	42aa      	cmp	r2, r5
   d685e:	d3e6      	bcc.n	d682e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d6860:	ea48 080a 	orr.w	r8, r8, sl
   d6864:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d6868:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d686c:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d686e:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d6872:	4639      	mov	r1, r7
   d6874:	4640      	mov	r0, r8
   d6876:	f002 fef9 	bl	d966c <strcpy>
				cp += strlen(cp) + 1;
   d687a:	4640      	mov	r0, r8
   d687c:	f002 ff1b 	bl	d96b6 <strlen>
   d6880:	3001      	adds	r0, #1
				strcpy(cp, data);
   d6882:	4631      	mov	r1, r6
   d6884:	4440      	add	r0, r8
   d6886:	f002 fef1 	bl	d966c <strcpy>
				nextFree += size;
   d688a:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d688c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d688e:	441d      	add	r5, r3
   d6890:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d6892:	88d3      	ldrh	r3, [r2, #6]
   d6894:	3301      	adds	r3, #1
   d6896:	80d3      	strh	r3, [r2, #6]
				return true;
   d6898:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d689a:	a805      	add	r0, sp, #20
   d689c:	f7ff ff58 	bl	d6750 <_ZN11StMutexLockD1Ev>
   d68a0:	e7c1      	b.n	d6826 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d68a2:	2400      	movs	r4, #0
   d68a4:	e7f9      	b.n	d689a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d68a6:	bf00      	nop
   d68a8:	000dc0a8 	.word	0x000dc0a8
   d68ac:	000dbdea 	.word	0x000dbdea
   d68b0:	2003e5dc 	.word	0x2003e5dc

000d68b4 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d68b4:	b508      	push	{r3, lr}
   d68b6:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d68b8:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d68bc:	69a3      	ldr	r3, [r4, #24]
   d68be:	b90b      	cbnz	r3, d68c4 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d68c0:	f002 f807 	bl	d88d2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d68c4:	69e3      	ldr	r3, [r4, #28]
   d68c6:	4621      	mov	r1, r4
   d68c8:	4628      	mov	r0, r5
   d68ca:	4798      	blx	r3
		os_thread_yield();
   d68cc:	f000 f974 	bl	d6bb8 <os_thread_yield>
	while(true) {
   d68d0:	e7f4      	b.n	d68bc <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d68d2 <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d68d2:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d68d4:	f7ff ffee 	bl	d68b4 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d68d8 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d68d8:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d68da:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d68de:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d68e0:	4628      	mov	r0, r5
   d68e2:	f002 fee8 	bl	d96b6 <strlen>
   d68e6:	3001      	adds	r0, #1
   d68e8:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d68ea:	4628      	mov	r0, r5
   d68ec:	f002 fee3 	bl	d96b6 <strlen>
	size_t offset = start - retainedBuffer;
   d68f0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d68f2:	3001      	adds	r0, #1
   d68f4:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d68f6:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d68f8:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d68fc:	bf1c      	itt	ne
   d68fe:	f1c3 0304 	rsbne	r3, r3, #4
   d6902:	18c0      	addne	r0, r0, r3
}
   d6904:	bd68      	pop	{r3, r5, r6, pc}

000d6906 <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d6906:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6908:	4604      	mov	r4, r0
   d690a:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d690c:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d690e:	f7ff ff19 	bl	d6744 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6912:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d6914:	88fb      	ldrh	r3, [r7, #6]
   d6916:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d691a:	b1e6      	cbz	r6, d6956 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d691c:	2b01      	cmp	r3, #1
   d691e:	d922      	bls.n	d6966 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d6920:	4629      	mov	r1, r5
   d6922:	4620      	mov	r0, r4
   d6924:	f7ff ffd8 	bl	d68d8 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d6928:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d692a:	4629      	mov	r1, r5
   d692c:	4620      	mov	r0, r4
   d692e:	f7ff ffd3 	bl	d68d8 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6932:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d6934:	443a      	add	r2, r7
	if (after > 0) {
   d6936:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d6938:	4601      	mov	r1, r0
	size_t len = next - start;
   d693a:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d693e:	d002      	beq.n	d6946 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d6940:	4628      	mov	r0, r5
   d6942:	f002 fe43 	bl	d95cc <memmove>
	nextFree -= len;
   d6946:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d6948:	1b9b      	subs	r3, r3, r6
   d694a:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d694c:	88fb      	ldrh	r3, [r7, #6]
   d694e:	3b01      	subs	r3, #1
   d6950:	80fb      	strh	r3, [r7, #6]
	return true;
   d6952:	2601      	movs	r6, #1
   d6954:	e001      	b.n	d695a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d6956:	2b00      	cmp	r3, #0
   d6958:	d1e7      	bne.n	d692a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d695a:	a801      	add	r0, sp, #4
   d695c:	f7ff fef8 	bl	d6750 <_ZN11StMutexLockD1Ev>
}
   d6960:	4630      	mov	r0, r6
   d6962:	b003      	add	sp, #12
   d6964:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d6966:	2600      	movs	r6, #0
   d6968:	e7f7      	b.n	d695a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d696c <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d696c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6970:	460d      	mov	r5, r1
   d6972:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6974:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d6976:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6978:	f7ff fea8 	bl	d66cc <_ZN21PublishQueueAsyncBaseC1Ev>
   d697c:	4b15      	ldr	r3, [pc, #84]	; (d69d4 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d697e:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6982:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6984:	4b14      	ldr	r3, [pc, #80]	; (d69d8 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6986:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6988:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d698a:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d698c:	4698      	mov	r8, r3
   d698e:	d117      	bne.n	d69c0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d6990:	88ab      	ldrh	r3, [r5, #4]
   d6992:	b29b      	uxth	r3, r3
   d6994:	42b3      	cmp	r3, r6
   d6996:	d113      	bne.n	d69c0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6998:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d699c:	6367      	str	r7, [r4, #52]	; 0x34
   d699e:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d69a2:	88eb      	ldrh	r3, [r5, #6]
   d69a4:	fa1f f289 	uxth.w	r2, r9
   d69a8:	b29b      	uxth	r3, r3
   d69aa:	429a      	cmp	r2, r3
   d69ac:	d20e      	bcs.n	d69cc <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d69ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d69b0:	4620      	mov	r0, r4
   d69b2:	f7ff ff91 	bl	d68d8 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d69b6:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d69b8:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d69ba:	f109 0901 	add.w	r9, r9, #1
   d69be:	d9f0      	bls.n	d69a2 <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d69c0:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d69c2:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d69c6:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d69c8:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d69ca:	80eb      	strh	r3, [r5, #6]
}
   d69cc:	4620      	mov	r0, r4
   d69ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d69d2:	bf00      	nop
   d69d4:	000dbec4 	.word	0x000dbec4
   d69d8:	d19cab61 	.word	0xd19cab61

000d69dc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d69dc:	b510      	push	{r4, lr}
   d69de:	e9d1 2300 	ldrd	r2, r3, [r1]
   d69e2:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d69e4:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d69e6:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d69e8:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d69ea:	b90a      	cbnz	r2, d69f0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d69ec:	07d9      	lsls	r1, r3, #31
   d69ee:	d505      	bpl.n	d69fc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d69f0:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d69f4:	4b0f      	ldr	r3, [pc, #60]	; (d6a34 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d69f6:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d69f8:	4b0f      	ldr	r3, [pc, #60]	; (d6a38 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d69fa:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d69fc:	ab02      	add	r3, sp, #8
   d69fe:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6a02:	466a      	mov	r2, sp
   d6a04:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6a08:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6a0c:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6a10:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a14:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6a16:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6a1a:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6a1c:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a1e:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6a20:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d6a22:	4618      	mov	r0, r3
   d6a24:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6a26:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6a28:	9105      	str	r1, [sp, #20]
   d6a2a:	f7fd fc49 	bl	d42c0 <_ZNSt14_Function_baseD1Ev>
	}
   d6a2e:	4620      	mov	r0, r4
   d6a30:	b006      	add	sp, #24
   d6a32:	bd10      	pop	{r4, pc}
   d6a34:	000d6617 	.word	0x000d6617
   d6a38:	000d65cd 	.word	0x000d65cd

000d6a3c <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d6a3c:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d6a3e:	4b05      	ldr	r3, [pc, #20]	; (d6a54 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d6a40:	9300      	str	r3, [sp, #0]
   d6a42:	4669      	mov	r1, sp
   d6a44:	2300      	movs	r3, #0
   d6a46:	3010      	adds	r0, #16
   d6a48:	9301      	str	r3, [sp, #4]
   d6a4a:	f7ff ffc7 	bl	d69dc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6a4e:	b003      	add	sp, #12
   d6a50:	f85d fb04 	ldr.w	pc, [sp], #4
   d6a54:	000d6a85 	.word	0x000d6a85

000d6a58 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d6a58:	b513      	push	{r0, r1, r4, lr}
   d6a5a:	4604      	mov	r4, r0
   d6a5c:	f000 f934 	bl	d6cc8 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d6a60:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d6a62:	1ac0      	subs	r0, r0, r3
   d6a64:	68e3      	ldr	r3, [r4, #12]
   d6a66:	4298      	cmp	r0, r3
   d6a68:	d308      	bcc.n	d6a7c <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d6a6a:	4b05      	ldr	r3, [pc, #20]	; (d6a80 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d6a6c:	9300      	str	r3, [sp, #0]
   d6a6e:	4669      	mov	r1, sp
   d6a70:	2300      	movs	r3, #0
   d6a72:	f104 0010 	add.w	r0, r4, #16
   d6a76:	9301      	str	r3, [sp, #4]
   d6a78:	f7ff ffb0 	bl	d69dc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d6a7c:	b002      	add	sp, #8
   d6a7e:	bd10      	pop	{r4, pc}
   d6a80:	000d6a85 	.word	0x000d6a85

000d6a84 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d6a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d6a88:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d6a8c:	b086      	sub	sp, #24
   d6a8e:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d6a90:	2b00      	cmp	r3, #0
   d6a92:	d164      	bne.n	d6b5e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6a94:	f000 fb06 	bl	d70a4 <spark_cloud_flag_connected>
   d6a98:	2800      	cmp	r0, #0
   d6a9a:	d060      	beq.n	d6b5e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d6a9c:	f000 f914 	bl	d6cc8 <HAL_Timer_Get_Milli_Seconds>
   d6aa0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d6aa2:	1ac0      	subs	r0, r0, r3
   d6aa4:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d6aa8:	4298      	cmp	r0, r3
   d6aaa:	d958      	bls.n	d6b5e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d6aac:	6823      	ldr	r3, [r4, #0]
   d6aae:	4620      	mov	r0, r4
   d6ab0:	695b      	ldr	r3, [r3, #20]
   d6ab2:	4798      	blx	r3
		if (data) {
   d6ab4:	4605      	mov	r5, r0
   d6ab6:	2800      	cmp	r0, #0
   d6ab8:	d051      	beq.n	d6b5e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d6aba:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d6abe:	2301      	movs	r3, #1
   d6ac0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d6ac4:	4638      	mov	r0, r7
   d6ac6:	f002 fdf6 	bl	d96b6 <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d6aca:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6ace:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d6ad2:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6ad4:	682b      	ldr	r3, [r5, #0]
   d6ad6:	492b      	ldr	r1, [pc, #172]	; (d6b84 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d6ad8:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d6ada:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d6adc:	4633      	mov	r3, r6
   d6ade:	482a      	ldr	r0, [pc, #168]	; (d6b88 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6ae0:	463a      	mov	r2, r7
   d6ae2:	f7ff f83f 	bl	d5b64 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d6ae6:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d6ae8:	f88d 8000 	strb.w	r8, [sp]
   d6aec:	4632      	mov	r2, r6
   d6aee:	4639      	mov	r1, r7
   d6af0:	a802      	add	r0, sp, #8
   d6af2:	f000 fde9 	bl	d76c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d6af6:	9d02      	ldr	r5, [sp, #8]
   d6af8:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d6afa:	b91b      	cbnz	r3, d6b04 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d6afc:	2001      	movs	r0, #1
   d6afe:	f000 fbe1 	bl	d72c4 <delay>
			while(!request.isDone()) {
   d6b02:	e7f8      	b.n	d6af6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6b04:	2000      	movs	r0, #0
   d6b06:	f000 fa6f 	bl	d6fe8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6b0a:	b120      	cbz	r0, d6b16 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d6b0c:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d6b0e:	b913      	cbnz	r3, d6b16 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d6b10:	f000 fab8 	bl	d7084 <spark_process>
    }
   d6b14:	e7fa      	b.n	d6b0c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d6b16:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d6b18:	2b01      	cmp	r3, #1
   d6b1a:	d123      	bne.n	d6b64 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d6b1c:	491b      	ldr	r1, [pc, #108]	; (d6b8c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d6b1e:	481a      	ldr	r0, [pc, #104]	; (d6b88 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6b20:	f7ff f820 	bl	d5b64 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d6b24:	6823      	ldr	r3, [r4, #0]
   d6b26:	2100      	movs	r1, #0
   d6b28:	699b      	ldr	r3, [r3, #24]
   d6b2a:	4620      	mov	r0, r4
   d6b2c:	4798      	blx	r3
			isSending = false;
   d6b2e:	2300      	movs	r3, #0
   d6b30:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d6b34:	f000 f8c8 	bl	d6cc8 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d6b38:	6260      	str	r0, [r4, #36]	; 0x24
	if (_M_pi != nullptr)
   d6b3a:	9c03      	ldr	r4, [sp, #12]
   d6b3c:	b17c      	cbz	r4, d6b5e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d6b3e:	6863      	ldr	r3, [r4, #4]
   d6b40:	3b01      	subs	r3, #1
   d6b42:	6063      	str	r3, [r4, #4]
   d6b44:	b95b      	cbnz	r3, d6b5e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d6b46:	6823      	ldr	r3, [r4, #0]
   d6b48:	4620      	mov	r0, r4
   d6b4a:	689b      	ldr	r3, [r3, #8]
   d6b4c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6b4e:	68a3      	ldr	r3, [r4, #8]
   d6b50:	3b01      	subs	r3, #1
   d6b52:	60a3      	str	r3, [r4, #8]
   d6b54:	b91b      	cbnz	r3, d6b5e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d6b56:	6823      	ldr	r3, [r4, #0]
   d6b58:	4620      	mov	r0, r4
   d6b5a:	68db      	ldr	r3, [r3, #12]
   d6b5c:	4798      	blx	r3
}
   d6b5e:	b006      	add	sp, #24
   d6b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d6b64:	68e2      	ldr	r2, [r4, #12]
   d6b66:	490a      	ldr	r1, [pc, #40]	; (d6b90 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d6b68:	4807      	ldr	r0, [pc, #28]	; (d6b88 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6b6a:	f7fe fffb 	bl	d5b64 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d6b6e:	4b09      	ldr	r3, [pc, #36]	; (d6b94 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d6b70:	9304      	str	r3, [sp, #16]
   d6b72:	a904      	add	r1, sp, #16
   d6b74:	2300      	movs	r3, #0
   d6b76:	f104 0010 	add.w	r0, r4, #16
   d6b7a:	9305      	str	r3, [sp, #20]
   d6b7c:	f7ff ff2e 	bl	d69dc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d6b80:	e7d5      	b.n	d6b2e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d6b82:	bf00      	nop
   d6b84:	000dbe2b 	.word	0x000dbe2b
   d6b88:	2003e5dc 	.word	0x2003e5dc
   d6b8c:	000dbe4c 	.word	0x000dbe4c
   d6b90:	000dbe63 	.word	0x000dbe63
   d6b94:	000d6a59 	.word	0x000d6a59

000d6b98 <_GLOBAL__sub_I_pubqLogger>:
   d6b98:	4b01      	ldr	r3, [pc, #4]	; (d6ba0 <_GLOBAL__sub_I_pubqLogger+0x8>)
   d6b9a:	4a02      	ldr	r2, [pc, #8]	; (d6ba4 <_GLOBAL__sub_I_pubqLogger+0xc>)
   d6b9c:	601a      	str	r2, [r3, #0]
}
   d6b9e:	4770      	bx	lr
   d6ba0:	2003e5dc 	.word	0x2003e5dc
   d6ba4:	000dbe8a 	.word	0x000dbe8a

000d6ba8 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d6ba8:	b508      	push	{r3, lr}
   d6baa:	4b02      	ldr	r3, [pc, #8]	; (d6bb4 <os_thread_create+0xc>)
   d6bac:	681b      	ldr	r3, [r3, #0]
   d6bae:	685b      	ldr	r3, [r3, #4]
   d6bb0:	9301      	str	r3, [sp, #4]
   d6bb2:	bd08      	pop	{r3, pc}
   d6bb4:	00030248 	.word	0x00030248

000d6bb8 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d6bb8:	b508      	push	{r3, lr}
   d6bba:	4b02      	ldr	r3, [pc, #8]	; (d6bc4 <os_thread_yield+0xc>)
   d6bbc:	681b      	ldr	r3, [r3, #0]
   d6bbe:	68db      	ldr	r3, [r3, #12]
   d6bc0:	9301      	str	r3, [sp, #4]
   d6bc2:	bd08      	pop	{r3, pc}
   d6bc4:	00030248 	.word	0x00030248

000d6bc8 <os_thread_scheduling>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
DYNALIB_FN(6, hal_concurrent, os_thread_delay_until, os_result_t(system_tick_t*, system_tick_t))
DYNALIB_FN(7, hal_concurrent, os_thread_scheduling, void(bool, void*))
   d6bc8:	b508      	push	{r3, lr}
   d6bca:	4b02      	ldr	r3, [pc, #8]	; (d6bd4 <os_thread_scheduling+0xc>)
   d6bcc:	681b      	ldr	r3, [r3, #0]
   d6bce:	69db      	ldr	r3, [r3, #28]
   d6bd0:	9301      	str	r3, [sp, #4]
   d6bd2:	bd08      	pop	{r3, pc}
   d6bd4:	00030248 	.word	0x00030248

000d6bd8 <os_timer_create>:

DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
   d6bd8:	b508      	push	{r3, lr}
   d6bda:	4b02      	ldr	r3, [pc, #8]	; (d6be4 <os_timer_create+0xc>)
   d6bdc:	681b      	ldr	r3, [r3, #0]
   d6bde:	6a1b      	ldr	r3, [r3, #32]
   d6be0:	9301      	str	r3, [sp, #4]
   d6be2:	bd08      	pop	{r3, pc}
   d6be4:	00030248 	.word	0x00030248

000d6be8 <os_timer_destroy>:
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
   d6be8:	b508      	push	{r3, lr}
   d6bea:	4b02      	ldr	r3, [pc, #8]	; (d6bf4 <os_timer_destroy+0xc>)
   d6bec:	681b      	ldr	r3, [r3, #0]
   d6bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6bf0:	9301      	str	r3, [sp, #4]
   d6bf2:	bd08      	pop	{r3, pc}
   d6bf4:	00030248 	.word	0x00030248

000d6bf8 <os_timer_get_id>:
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
   d6bf8:	b508      	push	{r3, lr}
   d6bfa:	4b02      	ldr	r3, [pc, #8]	; (d6c04 <os_timer_get_id+0xc>)
   d6bfc:	681b      	ldr	r3, [r3, #0]
   d6bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6c00:	9301      	str	r3, [sp, #4]
   d6c02:	bd08      	pop	{r3, pc}
   d6c04:	00030248 	.word	0x00030248

000d6c08 <os_timer_change>:
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))
   d6c08:	b508      	push	{r3, lr}
   d6c0a:	4b02      	ldr	r3, [pc, #8]	; (d6c14 <os_timer_change+0xc>)
   d6c0c:	681b      	ldr	r3, [r3, #0]
   d6c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6c10:	9301      	str	r3, [sp, #4]
   d6c12:	bd08      	pop	{r3, pc}
   d6c14:	00030248 	.word	0x00030248

000d6c18 <os_mutex_create>:

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d6c18:	b508      	push	{r3, lr}
   d6c1a:	4b02      	ldr	r3, [pc, #8]	; (d6c24 <os_mutex_create+0xc>)
   d6c1c:	681b      	ldr	r3, [r3, #0]
   d6c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6c20:	9301      	str	r3, [sp, #4]
   d6c22:	bd08      	pop	{r3, pc}
   d6c24:	00030248 	.word	0x00030248

000d6c28 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d6c28:	b508      	push	{r3, lr}
   d6c2a:	4b02      	ldr	r3, [pc, #8]	; (d6c34 <os_mutex_lock+0xc>)
   d6c2c:	681b      	ldr	r3, [r3, #0]
   d6c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6c30:	9301      	str	r3, [sp, #4]
   d6c32:	bd08      	pop	{r3, pc}
   d6c34:	00030248 	.word	0x00030248

000d6c38 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d6c38:	b508      	push	{r3, lr}
   d6c3a:	4b02      	ldr	r3, [pc, #8]	; (d6c44 <os_mutex_unlock+0xc>)
   d6c3c:	681b      	ldr	r3, [r3, #0]
   d6c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6c40:	9301      	str	r3, [sp, #4]
   d6c42:	bd08      	pop	{r3, pc}
   d6c44:	00030248 	.word	0x00030248

000d6c48 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6c48:	b508      	push	{r3, lr}
   d6c4a:	4b02      	ldr	r3, [pc, #8]	; (d6c54 <os_mutex_recursive_create+0xc>)
   d6c4c:	681b      	ldr	r3, [r3, #0]
   d6c4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6c50:	9301      	str	r3, [sp, #4]
   d6c52:	bd08      	pop	{r3, pc}
   d6c54:	00030248 	.word	0x00030248

000d6c58 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6c58:	b508      	push	{r3, lr}
   d6c5a:	4b02      	ldr	r3, [pc, #8]	; (d6c64 <os_mutex_recursive_destroy+0xc>)
   d6c5c:	681b      	ldr	r3, [r3, #0]
   d6c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6c60:	9301      	str	r3, [sp, #4]
   d6c62:	bd08      	pop	{r3, pc}
   d6c64:	00030248 	.word	0x00030248

000d6c68 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d6c68:	b508      	push	{r3, lr}
   d6c6a:	4b02      	ldr	r3, [pc, #8]	; (d6c74 <os_thread_exit+0xc>)
   d6c6c:	681b      	ldr	r3, [r3, #0]
   d6c6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d6c70:	9301      	str	r3, [sp, #4]
   d6c72:	bd08      	pop	{r3, pc}
   d6c74:	00030248 	.word	0x00030248

000d6c78 <os_timer_set_id>:

DYNALIB_FN(28, hal_concurrent, os_timer_set_id, int(os_timer_t, void*))
   d6c78:	b508      	push	{r3, lr}
   d6c7a:	4b02      	ldr	r3, [pc, #8]	; (d6c84 <os_timer_set_id+0xc>)
   d6c7c:	681b      	ldr	r3, [r3, #0]
   d6c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d6c80:	9301      	str	r3, [sp, #4]
   d6c82:	bd08      	pop	{r3, pc}
   d6c84:	00030248 	.word	0x00030248

000d6c88 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d6c88:	b508      	push	{r3, lr}
   d6c8a:	4b02      	ldr	r3, [pc, #8]	; (d6c94 <HAL_Feature_Set+0xc>)
   d6c8c:	681b      	ldr	r3, [r3, #0]
   d6c8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6c90:	9301      	str	r3, [sp, #4]
   d6c92:	bd08      	pop	{r3, pc}
   d6c94:	00030234 	.word	0x00030234

000d6c98 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6c98:	b508      	push	{r3, lr}
   d6c9a:	4b02      	ldr	r3, [pc, #8]	; (d6ca4 <HAL_RNG_GetRandomNumber+0xc>)
   d6c9c:	681b      	ldr	r3, [r3, #0]
   d6c9e:	685b      	ldr	r3, [r3, #4]
   d6ca0:	9301      	str	r3, [sp, #4]
   d6ca2:	bd08      	pop	{r3, pc}
   d6ca4:	00030218 	.word	0x00030218

000d6ca8 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d6ca8:	b508      	push	{r3, lr}
   d6caa:	4b02      	ldr	r3, [pc, #8]	; (d6cb4 <HAL_Delay_Milliseconds+0xc>)
   d6cac:	681b      	ldr	r3, [r3, #0]
   d6cae:	689b      	ldr	r3, [r3, #8]
   d6cb0:	9301      	str	r3, [sp, #4]
   d6cb2:	bd08      	pop	{r3, pc}
   d6cb4:	00030218 	.word	0x00030218

000d6cb8 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6cb8:	b508      	push	{r3, lr}
   d6cba:	4b02      	ldr	r3, [pc, #8]	; (d6cc4 <HAL_Delay_Microseconds+0xc>)
   d6cbc:	681b      	ldr	r3, [r3, #0]
   d6cbe:	68db      	ldr	r3, [r3, #12]
   d6cc0:	9301      	str	r3, [sp, #4]
   d6cc2:	bd08      	pop	{r3, pc}
   d6cc4:	00030218 	.word	0x00030218

000d6cc8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6cc8:	b508      	push	{r3, lr}
   d6cca:	4b02      	ldr	r3, [pc, #8]	; (d6cd4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6ccc:	681b      	ldr	r3, [r3, #0]
   d6cce:	695b      	ldr	r3, [r3, #20]
   d6cd0:	9301      	str	r3, [sp, #4]
   d6cd2:	bd08      	pop	{r3, pc}
   d6cd4:	00030218 	.word	0x00030218

000d6cd8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d6cd8:	b508      	push	{r3, lr}
   d6cda:	4b02      	ldr	r3, [pc, #8]	; (d6ce4 <hal_rtc_time_is_valid+0xc>)
   d6cdc:	681b      	ldr	r3, [r3, #0]
   d6cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6ce0:	9301      	str	r3, [sp, #4]
   d6ce2:	bd08      	pop	{r3, pc}
   d6ce4:	00030218 	.word	0x00030218

000d6ce8 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d6ce8:	b508      	push	{r3, lr}
   d6cea:	4b02      	ldr	r3, [pc, #8]	; (d6cf4 <hal_timer_millis+0xc>)
   d6cec:	681b      	ldr	r3, [r3, #0]
   d6cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6cf0:	9301      	str	r3, [sp, #4]
   d6cf2:	bd08      	pop	{r3, pc}
   d6cf4:	00030218 	.word	0x00030218

000d6cf8 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d6cf8:	b508      	push	{r3, lr}
   d6cfa:	4b02      	ldr	r3, [pc, #8]	; (d6d04 <hal_rtc_get_time+0xc>)
   d6cfc:	681b      	ldr	r3, [r3, #0]
   d6cfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6d00:	9301      	str	r3, [sp, #4]
   d6d02:	bd08      	pop	{r3, pc}
   d6d04:	00030218 	.word	0x00030218

000d6d08 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d6d08:	b508      	push	{r3, lr}
   d6d0a:	4b02      	ldr	r3, [pc, #8]	; (d6d14 <hal_rtc_set_time+0xc>)
   d6d0c:	681b      	ldr	r3, [r3, #0]
   d6d0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d6d10:	9301      	str	r3, [sp, #4]
   d6d12:	bd08      	pop	{r3, pc}
   d6d14:	00030218 	.word	0x00030218

000d6d18 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d6d18:	b508      	push	{r3, lr}
   d6d1a:	4b02      	ldr	r3, [pc, #8]	; (d6d24 <HAL_Validate_Pin_Function+0xc>)
   d6d1c:	681b      	ldr	r3, [r3, #0]
   d6d1e:	685b      	ldr	r3, [r3, #4]
   d6d20:	9301      	str	r3, [sp, #4]
   d6d22:	bd08      	pop	{r3, pc}
   d6d24:	0003022c 	.word	0x0003022c

000d6d28 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6d28:	b508      	push	{r3, lr}
   d6d2a:	4b02      	ldr	r3, [pc, #8]	; (d6d34 <HAL_Pin_Mode+0xc>)
   d6d2c:	681b      	ldr	r3, [r3, #0]
   d6d2e:	689b      	ldr	r3, [r3, #8]
   d6d30:	9301      	str	r3, [sp, #4]
   d6d32:	bd08      	pop	{r3, pc}
   d6d34:	0003022c 	.word	0x0003022c

000d6d38 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6d38:	b508      	push	{r3, lr}
   d6d3a:	4b02      	ldr	r3, [pc, #8]	; (d6d44 <HAL_Get_Pin_Mode+0xc>)
   d6d3c:	681b      	ldr	r3, [r3, #0]
   d6d3e:	68db      	ldr	r3, [r3, #12]
   d6d40:	9301      	str	r3, [sp, #4]
   d6d42:	bd08      	pop	{r3, pc}
   d6d44:	0003022c 	.word	0x0003022c

000d6d48 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d6d48:	b508      	push	{r3, lr}
   d6d4a:	4b02      	ldr	r3, [pc, #8]	; (d6d54 <HAL_GPIO_Write+0xc>)
   d6d4c:	681b      	ldr	r3, [r3, #0]
   d6d4e:	691b      	ldr	r3, [r3, #16]
   d6d50:	9301      	str	r3, [sp, #4]
   d6d52:	bd08      	pop	{r3, pc}
   d6d54:	0003022c 	.word	0x0003022c

000d6d58 <HAL_Interrupts_Attach>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d6d58:	b508      	push	{r3, lr}
   d6d5a:	4b02      	ldr	r3, [pc, #8]	; (d6d64 <HAL_Interrupts_Attach+0xc>)
   d6d5c:	681b      	ldr	r3, [r3, #0]
   d6d5e:	699b      	ldr	r3, [r3, #24]
   d6d60:	9301      	str	r3, [sp, #4]
   d6d62:	bd08      	pop	{r3, pc}
   d6d64:	0003022c 	.word	0x0003022c

000d6d68 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d6d68:	b508      	push	{r3, lr}
   d6d6a:	4b02      	ldr	r3, [pc, #8]	; (d6d74 <HAL_Interrupts_Detach+0xc>)
   d6d6c:	681b      	ldr	r3, [r3, #0]
   d6d6e:	69db      	ldr	r3, [r3, #28]
   d6d70:	9301      	str	r3, [sp, #4]
   d6d72:	bd08      	pop	{r3, pc}
   d6d74:	0003022c 	.word	0x0003022c

000d6d78 <hal_adc_read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, hal_adc_set_sample_time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, hal_adc_read, int32_t(uint16_t))
   d6d78:	b508      	push	{r3, lr}
   d6d7a:	4b02      	ldr	r3, [pc, #8]	; (d6d84 <hal_adc_read+0xc>)
   d6d7c:	681b      	ldr	r3, [r3, #0]
   d6d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6d80:	9301      	str	r3, [sp, #4]
   d6d82:	bd08      	pop	{r3, pc}
   d6d84:	0003022c 	.word	0x0003022c

000d6d88 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d6d88:	b508      	push	{r3, lr}
   d6d8a:	4b02      	ldr	r3, [pc, #8]	; (d6d94 <hal_i2c_begin+0xc>)
   d6d8c:	681b      	ldr	r3, [r3, #0]
   d6d8e:	68db      	ldr	r3, [r3, #12]
   d6d90:	9301      	str	r3, [sp, #4]
   d6d92:	bd08      	pop	{r3, pc}
   d6d94:	00030228 	.word	0x00030228

000d6d98 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d6d98:	b508      	push	{r3, lr}
   d6d9a:	4b02      	ldr	r3, [pc, #8]	; (d6da4 <hal_i2c_begin_transmission+0xc>)
   d6d9c:	681b      	ldr	r3, [r3, #0]
   d6d9e:	699b      	ldr	r3, [r3, #24]
   d6da0:	9301      	str	r3, [sp, #4]
   d6da2:	bd08      	pop	{r3, pc}
   d6da4:	00030228 	.word	0x00030228

000d6da8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6da8:	b508      	push	{r3, lr}
   d6daa:	4b02      	ldr	r3, [pc, #8]	; (d6db4 <hal_i2c_end_transmission+0xc>)
   d6dac:	681b      	ldr	r3, [r3, #0]
   d6dae:	69db      	ldr	r3, [r3, #28]
   d6db0:	9301      	str	r3, [sp, #4]
   d6db2:	bd08      	pop	{r3, pc}
   d6db4:	00030228 	.word	0x00030228

000d6db8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6db8:	b508      	push	{r3, lr}
   d6dba:	4b02      	ldr	r3, [pc, #8]	; (d6dc4 <hal_i2c_write+0xc>)
   d6dbc:	681b      	ldr	r3, [r3, #0]
   d6dbe:	6a1b      	ldr	r3, [r3, #32]
   d6dc0:	9301      	str	r3, [sp, #4]
   d6dc2:	bd08      	pop	{r3, pc}
   d6dc4:	00030228 	.word	0x00030228

000d6dc8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6dc8:	b508      	push	{r3, lr}
   d6dca:	4b02      	ldr	r3, [pc, #8]	; (d6dd4 <hal_i2c_available+0xc>)
   d6dcc:	681b      	ldr	r3, [r3, #0]
   d6dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6dd0:	9301      	str	r3, [sp, #4]
   d6dd2:	bd08      	pop	{r3, pc}
   d6dd4:	00030228 	.word	0x00030228

000d6dd8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6dd8:	b508      	push	{r3, lr}
   d6dda:	4b02      	ldr	r3, [pc, #8]	; (d6de4 <hal_i2c_read+0xc>)
   d6ddc:	681b      	ldr	r3, [r3, #0]
   d6dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6de0:	9301      	str	r3, [sp, #4]
   d6de2:	bd08      	pop	{r3, pc}
   d6de4:	00030228 	.word	0x00030228

000d6de8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d6de8:	b508      	push	{r3, lr}
   d6dea:	4b02      	ldr	r3, [pc, #8]	; (d6df4 <hal_i2c_peek+0xc>)
   d6dec:	681b      	ldr	r3, [r3, #0]
   d6dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6df0:	9301      	str	r3, [sp, #4]
   d6df2:	bd08      	pop	{r3, pc}
   d6df4:	00030228 	.word	0x00030228

000d6df8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d6df8:	b508      	push	{r3, lr}
   d6dfa:	4b02      	ldr	r3, [pc, #8]	; (d6e04 <hal_i2c_flush+0xc>)
   d6dfc:	681b      	ldr	r3, [r3, #0]
   d6dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6e00:	9301      	str	r3, [sp, #4]
   d6e02:	bd08      	pop	{r3, pc}
   d6e04:	00030228 	.word	0x00030228

000d6e08 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d6e08:	b508      	push	{r3, lr}
   d6e0a:	4b02      	ldr	r3, [pc, #8]	; (d6e14 <hal_i2c_is_enabled+0xc>)
   d6e0c:	681b      	ldr	r3, [r3, #0]
   d6e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6e10:	9301      	str	r3, [sp, #4]
   d6e12:	bd08      	pop	{r3, pc}
   d6e14:	00030228 	.word	0x00030228

000d6e18 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d6e18:	b508      	push	{r3, lr}
   d6e1a:	4b02      	ldr	r3, [pc, #8]	; (d6e24 <hal_i2c_init+0xc>)
   d6e1c:	681b      	ldr	r3, [r3, #0]
   d6e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6e20:	9301      	str	r3, [sp, #4]
   d6e22:	bd08      	pop	{r3, pc}
   d6e24:	00030228 	.word	0x00030228

000d6e28 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d6e28:	b508      	push	{r3, lr}
   d6e2a:	4b02      	ldr	r3, [pc, #8]	; (d6e34 <hal_i2c_lock+0xc>)
   d6e2c:	681b      	ldr	r3, [r3, #0]
   d6e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6e30:	9301      	str	r3, [sp, #4]
   d6e32:	bd08      	pop	{r3, pc}
   d6e34:	00030228 	.word	0x00030228

000d6e38 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d6e38:	b508      	push	{r3, lr}
   d6e3a:	4b02      	ldr	r3, [pc, #8]	; (d6e44 <hal_i2c_unlock+0xc>)
   d6e3c:	681b      	ldr	r3, [r3, #0]
   d6e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6e40:	9301      	str	r3, [sp, #4]
   d6e42:	bd08      	pop	{r3, pc}
   d6e44:	00030228 	.word	0x00030228

000d6e48 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d6e48:	b508      	push	{r3, lr}
   d6e4a:	4b02      	ldr	r3, [pc, #8]	; (d6e54 <hal_i2c_request_ex+0xc>)
   d6e4c:	681b      	ldr	r3, [r3, #0]
   d6e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6e50:	9301      	str	r3, [sp, #4]
   d6e52:	bd08      	pop	{r3, pc}
   d6e54:	00030228 	.word	0x00030228

000d6e58 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6e58:	b508      	push	{r3, lr}
   d6e5a:	4b02      	ldr	r3, [pc, #8]	; (d6e64 <inet_inet_ntop+0xc>)
   d6e5c:	681b      	ldr	r3, [r3, #0]
   d6e5e:	695b      	ldr	r3, [r3, #20]
   d6e60:	9301      	str	r3, [sp, #4]
   d6e62:	bd08      	pop	{r3, pc}
   d6e64:	00030264 	.word	0x00030264

000d6e68 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6e68:	b508      	push	{r3, lr}
   d6e6a:	4b02      	ldr	r3, [pc, #8]	; (d6e74 <netdb_freeaddrinfo+0xc>)
   d6e6c:	681b      	ldr	r3, [r3, #0]
   d6e6e:	689b      	ldr	r3, [r3, #8]
   d6e70:	9301      	str	r3, [sp, #4]
   d6e72:	bd08      	pop	{r3, pc}
   d6e74:	00030268 	.word	0x00030268

000d6e78 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6e78:	b508      	push	{r3, lr}
   d6e7a:	4b02      	ldr	r3, [pc, #8]	; (d6e84 <netdb_getaddrinfo+0xc>)
   d6e7c:	681b      	ldr	r3, [r3, #0]
   d6e7e:	68db      	ldr	r3, [r3, #12]
   d6e80:	9301      	str	r3, [sp, #4]
   d6e82:	bd08      	pop	{r3, pc}
   d6e84:	00030268 	.word	0x00030268

000d6e88 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6e88:	b508      	push	{r3, lr}
   d6e8a:	4b02      	ldr	r3, [pc, #8]	; (d6e94 <hal_spi_init+0xc>)
   d6e8c:	681b      	ldr	r3, [r3, #0]
   d6e8e:	69db      	ldr	r3, [r3, #28]
   d6e90:	9301      	str	r3, [sp, #4]
   d6e92:	bd08      	pop	{r3, pc}
   d6e94:	00030230 	.word	0x00030230

000d6e98 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6e98:	b508      	push	{r3, lr}
   d6e9a:	4b02      	ldr	r3, [pc, #8]	; (d6ea4 <hal_spi_is_enabled+0xc>)
   d6e9c:	681b      	ldr	r3, [r3, #0]
   d6e9e:	6a1b      	ldr	r3, [r3, #32]
   d6ea0:	9301      	str	r3, [sp, #4]
   d6ea2:	bd08      	pop	{r3, pc}
   d6ea4:	00030230 	.word	0x00030230

000d6ea8 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6ea8:	b508      	push	{r3, lr}
   d6eaa:	4b02      	ldr	r3, [pc, #8]	; (d6eb4 <hal_usart_init+0xc>)
   d6eac:	681b      	ldr	r3, [r3, #0]
   d6eae:	681b      	ldr	r3, [r3, #0]
   d6eb0:	9301      	str	r3, [sp, #4]
   d6eb2:	bd08      	pop	{r3, pc}
   d6eb4:	0003023c 	.word	0x0003023c

000d6eb8 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6eb8:	b508      	push	{r3, lr}
   d6eba:	4b02      	ldr	r3, [pc, #8]	; (d6ec4 <hal_usart_write+0xc>)
   d6ebc:	681b      	ldr	r3, [r3, #0]
   d6ebe:	68db      	ldr	r3, [r3, #12]
   d6ec0:	9301      	str	r3, [sp, #4]
   d6ec2:	bd08      	pop	{r3, pc}
   d6ec4:	0003023c 	.word	0x0003023c

000d6ec8 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6ec8:	b508      	push	{r3, lr}
   d6eca:	4b02      	ldr	r3, [pc, #8]	; (d6ed4 <hal_usart_available+0xc>)
   d6ecc:	681b      	ldr	r3, [r3, #0]
   d6ece:	691b      	ldr	r3, [r3, #16]
   d6ed0:	9301      	str	r3, [sp, #4]
   d6ed2:	bd08      	pop	{r3, pc}
   d6ed4:	0003023c 	.word	0x0003023c

000d6ed8 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6ed8:	b508      	push	{r3, lr}
   d6eda:	4b02      	ldr	r3, [pc, #8]	; (d6ee4 <hal_usart_read+0xc>)
   d6edc:	681b      	ldr	r3, [r3, #0]
   d6ede:	695b      	ldr	r3, [r3, #20]
   d6ee0:	9301      	str	r3, [sp, #4]
   d6ee2:	bd08      	pop	{r3, pc}
   d6ee4:	0003023c 	.word	0x0003023c

000d6ee8 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d6ee8:	b508      	push	{r3, lr}
   d6eea:	4b02      	ldr	r3, [pc, #8]	; (d6ef4 <hal_usart_peek+0xc>)
   d6eec:	681b      	ldr	r3, [r3, #0]
   d6eee:	699b      	ldr	r3, [r3, #24]
   d6ef0:	9301      	str	r3, [sp, #4]
   d6ef2:	bd08      	pop	{r3, pc}
   d6ef4:	0003023c 	.word	0x0003023c

000d6ef8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d6ef8:	b508      	push	{r3, lr}
   d6efa:	4b02      	ldr	r3, [pc, #8]	; (d6f04 <hal_usart_flush+0xc>)
   d6efc:	681b      	ldr	r3, [r3, #0]
   d6efe:	69db      	ldr	r3, [r3, #28]
   d6f00:	9301      	str	r3, [sp, #4]
   d6f02:	bd08      	pop	{r3, pc}
   d6f04:	0003023c 	.word	0x0003023c

000d6f08 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d6f08:	b508      	push	{r3, lr}
   d6f0a:	4b02      	ldr	r3, [pc, #8]	; (d6f14 <hal_usart_is_enabled+0xc>)
   d6f0c:	681b      	ldr	r3, [r3, #0]
   d6f0e:	6a1b      	ldr	r3, [r3, #32]
   d6f10:	9301      	str	r3, [sp, #4]
   d6f12:	bd08      	pop	{r3, pc}
   d6f14:	0003023c 	.word	0x0003023c

000d6f18 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d6f18:	b508      	push	{r3, lr}
   d6f1a:	4b02      	ldr	r3, [pc, #8]	; (d6f24 <hal_usart_available_data_for_write+0xc>)
   d6f1c:	681b      	ldr	r3, [r3, #0]
   d6f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6f20:	9301      	str	r3, [sp, #4]
   d6f22:	bd08      	pop	{r3, pc}
   d6f24:	0003023c 	.word	0x0003023c

000d6f28 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6f28:	b508      	push	{r3, lr}
   d6f2a:	4b02      	ldr	r3, [pc, #8]	; (d6f34 <HAL_USB_USART_Init+0xc>)
   d6f2c:	681b      	ldr	r3, [r3, #0]
   d6f2e:	681b      	ldr	r3, [r3, #0]
   d6f30:	9301      	str	r3, [sp, #4]
   d6f32:	bd08      	pop	{r3, pc}
   d6f34:	0003024c 	.word	0x0003024c

000d6f38 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6f38:	b508      	push	{r3, lr}
   d6f3a:	4b02      	ldr	r3, [pc, #8]	; (d6f44 <HAL_USB_USART_Available_Data+0xc>)
   d6f3c:	681b      	ldr	r3, [r3, #0]
   d6f3e:	691b      	ldr	r3, [r3, #16]
   d6f40:	9301      	str	r3, [sp, #4]
   d6f42:	bd08      	pop	{r3, pc}
   d6f44:	0003024c 	.word	0x0003024c

000d6f48 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6f48:	b508      	push	{r3, lr}
   d6f4a:	4b02      	ldr	r3, [pc, #8]	; (d6f54 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6f4c:	681b      	ldr	r3, [r3, #0]
   d6f4e:	695b      	ldr	r3, [r3, #20]
   d6f50:	9301      	str	r3, [sp, #4]
   d6f52:	bd08      	pop	{r3, pc}
   d6f54:	0003024c 	.word	0x0003024c

000d6f58 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6f58:	b508      	push	{r3, lr}
   d6f5a:	4b02      	ldr	r3, [pc, #8]	; (d6f64 <HAL_USB_USART_Receive_Data+0xc>)
   d6f5c:	681b      	ldr	r3, [r3, #0]
   d6f5e:	699b      	ldr	r3, [r3, #24]
   d6f60:	9301      	str	r3, [sp, #4]
   d6f62:	bd08      	pop	{r3, pc}
   d6f64:	0003024c 	.word	0x0003024c

000d6f68 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6f68:	b508      	push	{r3, lr}
   d6f6a:	4b02      	ldr	r3, [pc, #8]	; (d6f74 <HAL_USB_USART_Send_Data+0xc>)
   d6f6c:	681b      	ldr	r3, [r3, #0]
   d6f6e:	69db      	ldr	r3, [r3, #28]
   d6f70:	9301      	str	r3, [sp, #4]
   d6f72:	bd08      	pop	{r3, pc}
   d6f74:	0003024c 	.word	0x0003024c

000d6f78 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6f78:	b508      	push	{r3, lr}
   d6f7a:	4b02      	ldr	r3, [pc, #8]	; (d6f84 <HAL_USB_USART_Flush_Data+0xc>)
   d6f7c:	681b      	ldr	r3, [r3, #0]
   d6f7e:	6a1b      	ldr	r3, [r3, #32]
   d6f80:	9301      	str	r3, [sp, #4]
   d6f82:	bd08      	pop	{r3, pc}
   d6f84:	0003024c 	.word	0x0003024c

000d6f88 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6f88:	b508      	push	{r3, lr}
   d6f8a:	4b02      	ldr	r3, [pc, #8]	; (d6f94 <panic_+0xc>)
   d6f8c:	681b      	ldr	r3, [r3, #0]
   d6f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6f90:	9301      	str	r3, [sp, #4]
   d6f92:	bd08      	pop	{r3, pc}
   d6f94:	00030260 	.word	0x00030260

000d6f98 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d6f98:	b508      	push	{r3, lr}
   d6f9a:	4b02      	ldr	r3, [pc, #8]	; (d6fa4 <log_message_v+0xc>)
   d6f9c:	681b      	ldr	r3, [r3, #0]
   d6f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6fa0:	9301      	str	r3, [sp, #4]
   d6fa2:	bd08      	pop	{r3, pc}
   d6fa4:	00030260 	.word	0x00030260

000d6fa8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6fa8:	b508      	push	{r3, lr}
   d6faa:	4b02      	ldr	r3, [pc, #8]	; (d6fb4 <system_mode+0xc>)
   d6fac:	681b      	ldr	r3, [r3, #0]
   d6fae:	681b      	ldr	r3, [r3, #0]
   d6fb0:	9301      	str	r3, [sp, #4]
   d6fb2:	bd08      	pop	{r3, pc}
   d6fb4:	00030220 	.word	0x00030220

000d6fb8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6fb8:	b508      	push	{r3, lr}
   d6fba:	4b02      	ldr	r3, [pc, #8]	; (d6fc4 <set_system_mode+0xc>)
   d6fbc:	681b      	ldr	r3, [r3, #0]
   d6fbe:	685b      	ldr	r3, [r3, #4]
   d6fc0:	9301      	str	r3, [sp, #4]
   d6fc2:	bd08      	pop	{r3, pc}
   d6fc4:	00030220 	.word	0x00030220

000d6fc8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6fc8:	b508      	push	{r3, lr}
   d6fca:	4b02      	ldr	r3, [pc, #8]	; (d6fd4 <system_delay_ms+0xc>)
   d6fcc:	681b      	ldr	r3, [r3, #0]
   d6fce:	695b      	ldr	r3, [r3, #20]
   d6fd0:	9301      	str	r3, [sp, #4]
   d6fd2:	bd08      	pop	{r3, pc}
   d6fd4:	00030220 	.word	0x00030220

000d6fd8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6fd8:	b508      	push	{r3, lr}
   d6fda:	4b02      	ldr	r3, [pc, #8]	; (d6fe4 <system_thread_set_state+0xc>)
   d6fdc:	681b      	ldr	r3, [r3, #0]
   d6fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6fe0:	9301      	str	r3, [sp, #4]
   d6fe2:	bd08      	pop	{r3, pc}
   d6fe4:	00030220 	.word	0x00030220

000d6fe8 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6fe8:	b508      	push	{r3, lr}
   d6fea:	4b02      	ldr	r3, [pc, #8]	; (d6ff4 <application_thread_current+0xc>)
   d6fec:	681b      	ldr	r3, [r3, #0]
   d6fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6ff0:	9301      	str	r3, [sp, #4]
   d6ff2:	bd08      	pop	{r3, pc}
   d6ff4:	00030220 	.word	0x00030220

000d6ff8 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6ff8:	b508      	push	{r3, lr}
   d6ffa:	4b02      	ldr	r3, [pc, #8]	; (d7004 <application_thread_invoke+0xc>)
   d6ffc:	681b      	ldr	r3, [r3, #0]
   d6ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7000:	9301      	str	r3, [sp, #4]
   d7002:	bd08      	pop	{r3, pc}
   d7004:	00030220 	.word	0x00030220

000d7008 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d7008:	b508      	push	{r3, lr}
   d700a:	4b02      	ldr	r3, [pc, #8]	; (d7014 <system_thread_get_state+0xc>)
   d700c:	681b      	ldr	r3, [r3, #0]
   d700e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d7010:	9301      	str	r3, [sp, #4]
   d7012:	bd08      	pop	{r3, pc}
   d7014:	00030220 	.word	0x00030220

000d7018 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d7018:	b508      	push	{r3, lr}
   d701a:	4b02      	ldr	r3, [pc, #8]	; (d7024 <system_notify_time_changed+0xc>)
   d701c:	681b      	ldr	r3, [r3, #0]
   d701e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d7020:	9301      	str	r3, [sp, #4]
   d7022:	bd08      	pop	{r3, pc}
   d7024:	00030220 	.word	0x00030220

000d7028 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d7028:	b508      	push	{r3, lr}
   d702a:	4b03      	ldr	r3, [pc, #12]	; (d7038 <system_ctrl_set_app_request_handler+0x10>)
   d702c:	681b      	ldr	r3, [r3, #0]
   d702e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d7032:	9301      	str	r3, [sp, #4]
   d7034:	bd08      	pop	{r3, pc}
   d7036:	0000      	.short	0x0000
   d7038:	00030220 	.word	0x00030220

000d703c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d703c:	b508      	push	{r3, lr}
   d703e:	4b03      	ldr	r3, [pc, #12]	; (d704c <system_ctrl_set_result+0x10>)
   d7040:	681b      	ldr	r3, [r3, #0]
   d7042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d7046:	9301      	str	r3, [sp, #4]
   d7048:	bd08      	pop	{r3, pc}
   d704a:	0000      	.short	0x0000
   d704c:	00030220 	.word	0x00030220

000d7050 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d7050:	b508      	push	{r3, lr}
   d7052:	4b03      	ldr	r3, [pc, #12]	; (d7060 <system_reset+0x10>)
   d7054:	681b      	ldr	r3, [r3, #0]
   d7056:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d705a:	9301      	str	r3, [sp, #4]
   d705c:	bd08      	pop	{r3, pc}
   d705e:	0000      	.short	0x0000
   d7060:	00030220 	.word	0x00030220

000d7064 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d7064:	b508      	push	{r3, lr}
   d7066:	4b02      	ldr	r3, [pc, #8]	; (d7070 <spark_variable+0xc>)
   d7068:	681b      	ldr	r3, [r3, #0]
   d706a:	681b      	ldr	r3, [r3, #0]
   d706c:	9301      	str	r3, [sp, #4]
   d706e:	bd08      	pop	{r3, pc}
   d7070:	00030244 	.word	0x00030244

000d7074 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d7074:	b508      	push	{r3, lr}
   d7076:	4b02      	ldr	r3, [pc, #8]	; (d7080 <spark_function+0xc>)
   d7078:	681b      	ldr	r3, [r3, #0]
   d707a:	685b      	ldr	r3, [r3, #4]
   d707c:	9301      	str	r3, [sp, #4]
   d707e:	bd08      	pop	{r3, pc}
   d7080:	00030244 	.word	0x00030244

000d7084 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d7084:	b508      	push	{r3, lr}
   d7086:	4b02      	ldr	r3, [pc, #8]	; (d7090 <spark_process+0xc>)
   d7088:	681b      	ldr	r3, [r3, #0]
   d708a:	689b      	ldr	r3, [r3, #8]
   d708c:	9301      	str	r3, [sp, #4]
   d708e:	bd08      	pop	{r3, pc}
   d7090:	00030244 	.word	0x00030244

000d7094 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d7094:	b508      	push	{r3, lr}
   d7096:	4b02      	ldr	r3, [pc, #8]	; (d70a0 <spark_cloud_flag_connect+0xc>)
   d7098:	681b      	ldr	r3, [r3, #0]
   d709a:	68db      	ldr	r3, [r3, #12]
   d709c:	9301      	str	r3, [sp, #4]
   d709e:	bd08      	pop	{r3, pc}
   d70a0:	00030244 	.word	0x00030244

000d70a4 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d70a4:	b508      	push	{r3, lr}
   d70a6:	4b02      	ldr	r3, [pc, #8]	; (d70b0 <spark_cloud_flag_connected+0xc>)
   d70a8:	681b      	ldr	r3, [r3, #0]
   d70aa:	695b      	ldr	r3, [r3, #20]
   d70ac:	9301      	str	r3, [sp, #4]
   d70ae:	bd08      	pop	{r3, pc}
   d70b0:	00030244 	.word	0x00030244

000d70b4 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d70b4:	b508      	push	{r3, lr}
   d70b6:	4b02      	ldr	r3, [pc, #8]	; (d70c0 <spark_deviceID+0xc>)
   d70b8:	681b      	ldr	r3, [r3, #0]
   d70ba:	69db      	ldr	r3, [r3, #28]
   d70bc:	9301      	str	r3, [sp, #4]
   d70be:	bd08      	pop	{r3, pc}
   d70c0:	00030244 	.word	0x00030244

000d70c4 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d70c4:	b508      	push	{r3, lr}
   d70c6:	4b02      	ldr	r3, [pc, #8]	; (d70d0 <spark_send_event+0xc>)
   d70c8:	681b      	ldr	r3, [r3, #0]
   d70ca:	6a1b      	ldr	r3, [r3, #32]
   d70cc:	9301      	str	r3, [sp, #4]
   d70ce:	bd08      	pop	{r3, pc}
   d70d0:	00030244 	.word	0x00030244

000d70d4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d70d4:	b508      	push	{r3, lr}
   d70d6:	4b02      	ldr	r3, [pc, #8]	; (d70e0 <spark_subscribe+0xc>)
   d70d8:	681b      	ldr	r3, [r3, #0]
   d70da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d70dc:	9301      	str	r3, [sp, #4]
   d70de:	bd08      	pop	{r3, pc}
   d70e0:	00030244 	.word	0x00030244

000d70e4 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d70e4:	b508      	push	{r3, lr}
   d70e6:	4b02      	ldr	r3, [pc, #8]	; (d70f0 <spark_sync_time+0xc>)
   d70e8:	681b      	ldr	r3, [r3, #0]
   d70ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d70ec:	9301      	str	r3, [sp, #4]
   d70ee:	bd08      	pop	{r3, pc}
   d70f0:	00030244 	.word	0x00030244

000d70f4 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d70f4:	b508      	push	{r3, lr}
   d70f6:	4b02      	ldr	r3, [pc, #8]	; (d7100 <spark_sync_time_pending+0xc>)
   d70f8:	681b      	ldr	r3, [r3, #0]
   d70fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d70fc:	9301      	str	r3, [sp, #4]
   d70fe:	bd08      	pop	{r3, pc}
   d7100:	00030244 	.word	0x00030244

000d7104 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d7104:	b508      	push	{r3, lr}
   d7106:	4b02      	ldr	r3, [pc, #8]	; (d7110 <spark_sync_time_last+0xc>)
   d7108:	681b      	ldr	r3, [r3, #0]
   d710a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d710c:	9301      	str	r3, [sp, #4]
   d710e:	bd08      	pop	{r3, pc}
   d7110:	00030244 	.word	0x00030244

000d7114 <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d7114:	b508      	push	{r3, lr}
   d7116:	4b02      	ldr	r3, [pc, #8]	; (d7120 <spark_set_connection_property+0xc>)
   d7118:	681b      	ldr	r3, [r3, #0]
   d711a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d711c:	9301      	str	r3, [sp, #4]
   d711e:	bd08      	pop	{r3, pc}
   d7120:	00030244 	.word	0x00030244

000d7124 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d7124:	b508      	push	{r3, lr}
   d7126:	4b02      	ldr	r3, [pc, #8]	; (d7130 <spark_set_random_seed_from_cloud_handler+0xc>)
   d7128:	681b      	ldr	r3, [r3, #0]
   d712a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d712c:	9301      	str	r3, [sp, #4]
   d712e:	bd08      	pop	{r3, pc}
   d7130:	00030244 	.word	0x00030244

000d7134 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d7134:	b508      	push	{r3, lr}
   d7136:	4b02      	ldr	r3, [pc, #8]	; (d7140 <network_connect+0xc>)
   d7138:	681b      	ldr	r3, [r3, #0]
   d713a:	685b      	ldr	r3, [r3, #4]
   d713c:	9301      	str	r3, [sp, #4]
   d713e:	bd08      	pop	{r3, pc}
   d7140:	00030240 	.word	0x00030240

000d7144 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d7144:	b508      	push	{r3, lr}
   d7146:	4b02      	ldr	r3, [pc, #8]	; (d7150 <network_connecting+0xc>)
   d7148:	681b      	ldr	r3, [r3, #0]
   d714a:	689b      	ldr	r3, [r3, #8]
   d714c:	9301      	str	r3, [sp, #4]
   d714e:	bd08      	pop	{r3, pc}
   d7150:	00030240 	.word	0x00030240

000d7154 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d7154:	b508      	push	{r3, lr}
   d7156:	4b02      	ldr	r3, [pc, #8]	; (d7160 <network_disconnect+0xc>)
   d7158:	681b      	ldr	r3, [r3, #0]
   d715a:	68db      	ldr	r3, [r3, #12]
   d715c:	9301      	str	r3, [sp, #4]
   d715e:	bd08      	pop	{r3, pc}
   d7160:	00030240 	.word	0x00030240

000d7164 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d7164:	b508      	push	{r3, lr}
   d7166:	4b02      	ldr	r3, [pc, #8]	; (d7170 <network_ready+0xc>)
   d7168:	681b      	ldr	r3, [r3, #0]
   d716a:	691b      	ldr	r3, [r3, #16]
   d716c:	9301      	str	r3, [sp, #4]
   d716e:	bd08      	pop	{r3, pc}
   d7170:	00030240 	.word	0x00030240

000d7174 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d7174:	b508      	push	{r3, lr}
   d7176:	4b02      	ldr	r3, [pc, #8]	; (d7180 <network_on+0xc>)
   d7178:	681b      	ldr	r3, [r3, #0]
   d717a:	695b      	ldr	r3, [r3, #20]
   d717c:	9301      	str	r3, [sp, #4]
   d717e:	bd08      	pop	{r3, pc}
   d7180:	00030240 	.word	0x00030240

000d7184 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d7184:	b508      	push	{r3, lr}
   d7186:	4b02      	ldr	r3, [pc, #8]	; (d7190 <network_off+0xc>)
   d7188:	681b      	ldr	r3, [r3, #0]
   d718a:	699b      	ldr	r3, [r3, #24]
   d718c:	9301      	str	r3, [sp, #4]
   d718e:	bd08      	pop	{r3, pc}
   d7190:	00030240 	.word	0x00030240

000d7194 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d7194:	b508      	push	{r3, lr}
   d7196:	4b02      	ldr	r3, [pc, #8]	; (d71a0 <network_listen+0xc>)
   d7198:	681b      	ldr	r3, [r3, #0]
   d719a:	69db      	ldr	r3, [r3, #28]
   d719c:	9301      	str	r3, [sp, #4]
   d719e:	bd08      	pop	{r3, pc}
   d71a0:	00030240 	.word	0x00030240

000d71a4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d71a4:	b508      	push	{r3, lr}
   d71a6:	4b02      	ldr	r3, [pc, #8]	; (d71b0 <network_listening+0xc>)
   d71a8:	681b      	ldr	r3, [r3, #0]
   d71aa:	6a1b      	ldr	r3, [r3, #32]
   d71ac:	9301      	str	r3, [sp, #4]
   d71ae:	bd08      	pop	{r3, pc}
   d71b0:	00030240 	.word	0x00030240

000d71b4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d71b4:	b508      	push	{r3, lr}
   d71b6:	4b02      	ldr	r3, [pc, #8]	; (d71c0 <network_set_listen_timeout+0xc>)
   d71b8:	681b      	ldr	r3, [r3, #0]
   d71ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d71bc:	9301      	str	r3, [sp, #4]
   d71be:	bd08      	pop	{r3, pc}
   d71c0:	00030240 	.word	0x00030240

000d71c4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d71c4:	b508      	push	{r3, lr}
   d71c6:	4b02      	ldr	r3, [pc, #8]	; (d71d0 <network_get_listen_timeout+0xc>)
   d71c8:	681b      	ldr	r3, [r3, #0]
   d71ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d71cc:	9301      	str	r3, [sp, #4]
   d71ce:	bd08      	pop	{r3, pc}
   d71d0:	00030240 	.word	0x00030240

000d71d4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d71d4:	b508      	push	{r3, lr}
   d71d6:	4b02      	ldr	r3, [pc, #8]	; (d71e0 <network_is_on+0xc>)
   d71d8:	681b      	ldr	r3, [r3, #0]
   d71da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d71dc:	9301      	str	r3, [sp, #4]
   d71de:	bd08      	pop	{r3, pc}
   d71e0:	00030240 	.word	0x00030240

000d71e4 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d71e4:	b508      	push	{r3, lr}
   d71e6:	4b02      	ldr	r3, [pc, #8]	; (d71f0 <network_is_off+0xc>)
   d71e8:	681b      	ldr	r3, [r3, #0]
   d71ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d71ec:	9301      	str	r3, [sp, #4]
   d71ee:	bd08      	pop	{r3, pc}
   d71f0:	00030240 	.word	0x00030240

000d71f4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d71f4:	b508      	push	{r3, lr}
   d71f6:	4b02      	ldr	r3, [pc, #8]	; (d7200 <malloc+0xc>)
   d71f8:	681b      	ldr	r3, [r3, #0]
   d71fa:	681b      	ldr	r3, [r3, #0]
   d71fc:	9301      	str	r3, [sp, #4]
   d71fe:	bd08      	pop	{r3, pc}
   d7200:	0003021c 	.word	0x0003021c

000d7204 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d7204:	b508      	push	{r3, lr}
   d7206:	4b02      	ldr	r3, [pc, #8]	; (d7210 <free+0xc>)
   d7208:	681b      	ldr	r3, [r3, #0]
   d720a:	685b      	ldr	r3, [r3, #4]
   d720c:	9301      	str	r3, [sp, #4]
   d720e:	bd08      	pop	{r3, pc}
   d7210:	0003021c 	.word	0x0003021c

000d7214 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d7214:	b508      	push	{r3, lr}
   d7216:	4b02      	ldr	r3, [pc, #8]	; (d7220 <realloc+0xc>)
   d7218:	681b      	ldr	r3, [r3, #0]
   d721a:	689b      	ldr	r3, [r3, #8]
   d721c:	9301      	str	r3, [sp, #4]
   d721e:	bd08      	pop	{r3, pc}
   d7220:	0003021c 	.word	0x0003021c

000d7224 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d7224:	b508      	push	{r3, lr}
   d7226:	4b02      	ldr	r3, [pc, #8]	; (d7230 <siprintf+0xc>)
   d7228:	681b      	ldr	r3, [r3, #0]
   d722a:	691b      	ldr	r3, [r3, #16]
   d722c:	9301      	str	r3, [sp, #4]
   d722e:	bd08      	pop	{r3, pc}
   d7230:	0003021c 	.word	0x0003021c

000d7234 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d7234:	b508      	push	{r3, lr}
   d7236:	4b02      	ldr	r3, [pc, #8]	; (d7240 <snprintf+0xc>)
   d7238:	681b      	ldr	r3, [r3, #0]
   d723a:	69db      	ldr	r3, [r3, #28]
   d723c:	9301      	str	r3, [sp, #4]
   d723e:	bd08      	pop	{r3, pc}
   d7240:	0003021c 	.word	0x0003021c

000d7244 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d7244:	b508      	push	{r3, lr}
   d7246:	4b02      	ldr	r3, [pc, #8]	; (d7250 <abort+0xc>)
   d7248:	681b      	ldr	r3, [r3, #0]
   d724a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d724c:	9301      	str	r3, [sp, #4]
   d724e:	bd08      	pop	{r3, pc}
   d7250:	0003021c 	.word	0x0003021c

000d7254 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d7254:	b508      	push	{r3, lr}
   d7256:	4b02      	ldr	r3, [pc, #8]	; (d7260 <_malloc_r+0xc>)
   d7258:	681b      	ldr	r3, [r3, #0]
   d725a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d725c:	9301      	str	r3, [sp, #4]
   d725e:	bd08      	pop	{r3, pc}
   d7260:	0003021c 	.word	0x0003021c

000d7264 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d7264:	b508      	push	{r3, lr}
   d7266:	4b02      	ldr	r3, [pc, #8]	; (d7270 <__errno+0xc>)
   d7268:	681b      	ldr	r3, [r3, #0]
   d726a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d726c:	9301      	str	r3, [sp, #4]
   d726e:	bd08      	pop	{r3, pc}
   d7270:	0003021c 	.word	0x0003021c

000d7274 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d7274:	b508      	push	{r3, lr}
   d7276:	4b02      	ldr	r3, [pc, #8]	; (d7280 <newlib_impure_ptr_callback+0xc>)
   d7278:	681b      	ldr	r3, [r3, #0]
   d727a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d727c:	9301      	str	r3, [sp, #4]
   d727e:	bd08      	pop	{r3, pc}
   d7280:	0003021c 	.word	0x0003021c

000d7284 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d7284:	b508      	push	{r3, lr}
   d7286:	4b02      	ldr	r3, [pc, #8]	; (d7290 <strftime+0xc>)
   d7288:	681b      	ldr	r3, [r3, #0]
   d728a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d728c:	9301      	str	r3, [sp, #4]
   d728e:	bd08      	pop	{r3, pc}
   d7290:	0003021c 	.word	0x0003021c

000d7294 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d7294:	b508      	push	{r3, lr}
   d7296:	4b02      	ldr	r3, [pc, #8]	; (d72a0 <localtime_r+0xc>)
   d7298:	681b      	ldr	r3, [r3, #0]
   d729a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d729c:	9301      	str	r3, [sp, #4]
   d729e:	bd08      	pop	{r3, pc}
   d72a0:	0003021c 	.word	0x0003021c

000d72a4 <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d72a4:	b508      	push	{r3, lr}
   d72a6:	4b02      	ldr	r3, [pc, #8]	; (d72b0 <gmtime_r+0xc>)
   d72a8:	681b      	ldr	r3, [r3, #0]
   d72aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d72ac:	9301      	str	r3, [sp, #4]
   d72ae:	bd08      	pop	{r3, pc}
   d72b0:	0003021c 	.word	0x0003021c

000d72b4 <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d72b4:	b508      	push	{r3, lr}
   d72b6:	4b02      	ldr	r3, [pc, #8]	; (d72c0 <mktime+0xc>)
   d72b8:	681b      	ldr	r3, [r3, #0]
   d72ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d72bc:	9301      	str	r3, [sp, #4]
   d72be:	bd08      	pop	{r3, pc}
   d72c0:	0003021c 	.word	0x0003021c

000d72c4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d72c4:	2100      	movs	r1, #0
   d72c6:	f7ff be7f 	b.w	d6fc8 <system_delay_ms>

000d72ca <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d72ca:	b510      	push	{r4, lr}
      if (_M_empty())
   d72cc:	6883      	ldr	r3, [r0, #8]
   d72ce:	4604      	mov	r4, r0
   d72d0:	b90b      	cbnz	r3, d72d6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d72d2:	f001 fafe 	bl	d88d2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d72d6:	68c3      	ldr	r3, [r0, #12]
   d72d8:	4798      	blx	r3
      if (_M_manager)
   d72da:	68a3      	ldr	r3, [r4, #8]
   d72dc:	b11b      	cbz	r3, d72e6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d72de:	2203      	movs	r2, #3
   d72e0:	4621      	mov	r1, r4
   d72e2:	4620      	mov	r0, r4
   d72e4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d72e6:	4620      	mov	r0, r4
   d72e8:	2110      	movs	r1, #16
}
   d72ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d72ee:	f001 baea 	b.w	d88c6 <_ZdlPvj>

000d72f2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d72f2:	b510      	push	{r4, lr}
          _M_dispose();
   d72f4:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d72f6:	4604      	mov	r4, r0
          _M_dispose();
   d72f8:	689b      	ldr	r3, [r3, #8]
   d72fa:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d72fc:	68a3      	ldr	r3, [r4, #8]
   d72fe:	3b01      	subs	r3, #1
   d7300:	60a3      	str	r3, [r4, #8]
   d7302:	b92b      	cbnz	r3, d7310 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d7304:	6823      	ldr	r3, [r4, #0]
   d7306:	4620      	mov	r0, r4
   d7308:	68db      	ldr	r3, [r3, #12]
    }
   d730a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d730e:	4718      	bx	r3
    }
   d7310:	bd10      	pop	{r4, pc}

000d7312 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d7312:	b510      	push	{r4, lr}
   d7314:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d7316:	6800      	ldr	r0, [r0, #0]
   d7318:	b108      	cbz	r0, d731e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d731a:	f7ff fc9d 	bl	d6c58 <os_mutex_recursive_destroy>
    }
   d731e:	4620      	mov	r0, r4
   d7320:	bd10      	pop	{r4, pc}

000d7322 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d7322:	680b      	ldr	r3, [r1, #0]
   d7324:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d7326:	b113      	cbz	r3, d732e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d7328:	685a      	ldr	r2, [r3, #4]
   d732a:	3201      	adds	r2, #1
   d732c:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d732e:	4770      	bx	lr

000d7330 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d7330:	b510      	push	{r4, lr}
   d7332:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d7334:	6800      	ldr	r0, [r0, #0]
   d7336:	b128      	cbz	r0, d7344 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d7338:	6843      	ldr	r3, [r0, #4]
   d733a:	3b01      	subs	r3, #1
   d733c:	6043      	str	r3, [r0, #4]
   d733e:	b90b      	cbnz	r3, d7344 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d7340:	f7ff ffd7 	bl	d72f2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d7344:	4620      	mov	r0, r4
   d7346:	bd10      	pop	{r4, pc}

000d7348 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d7348:	b513      	push	{r0, r1, r4, lr}
   d734a:	460b      	mov	r3, r1
   d734c:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d734e:	e9d0 0100 	ldrd	r0, r1, [r0]
   d7352:	466c      	mov	r4, sp
   d7354:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d7358:	e893 0003 	ldmia.w	r3, {r0, r1}
   d735c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d7360:	e894 0003 	ldmia.w	r4, {r0, r1}
   d7364:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d7368:	b002      	add	sp, #8
   d736a:	bd10      	pop	{r4, pc}

000d736c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d736c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d736e:	4c06      	ldr	r4, [pc, #24]	; (d7388 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7370:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d7372:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7374:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d7376:	f7ff fc67 	bl	d6c48 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d737a:	4620      	mov	r0, r4
   d737c:	4a03      	ldr	r2, [pc, #12]	; (d738c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d737e:	4904      	ldr	r1, [pc, #16]	; (d7390 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d7380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7384:	f001 ba9a 	b.w	d88bc <__aeabi_atexit>
   d7388:	2003e5e0 	.word	0x2003e5e0
   d738c:	2003dea8 	.word	0x2003dea8
   d7390:	000d7313 	.word	0x000d7313

000d7394 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d7394:	2200      	movs	r2, #0
   d7396:	6840      	ldr	r0, [r0, #4]
   d7398:	4611      	mov	r1, r2
   d739a:	f7ff bee3 	b.w	d7164 <network_ready>

000d739e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d739e:	2200      	movs	r2, #0
   d73a0:	6840      	ldr	r0, [r0, #4]
   d73a2:	4611      	mov	r1, r2
   d73a4:	f7ff befe 	b.w	d71a4 <network_listening>

000d73a8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d73a8:	2200      	movs	r2, #0
   d73aa:	6840      	ldr	r0, [r0, #4]
   d73ac:	4611      	mov	r1, r2
   d73ae:	f7ff bf09 	b.w	d71c4 <network_get_listen_timeout>

000d73b2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d73b2:	6840      	ldr	r0, [r0, #4]
   d73b4:	2200      	movs	r2, #0
   d73b6:	f7ff befd 	b.w	d71b4 <network_set_listen_timeout>

000d73ba <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d73ba:	6840      	ldr	r0, [r0, #4]
   d73bc:	2200      	movs	r2, #0
   d73be:	f081 0101 	eor.w	r1, r1, #1
   d73c2:	f7ff bee7 	b.w	d7194 <network_listen>

000d73c6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d73c6:	2300      	movs	r3, #0
   d73c8:	6840      	ldr	r0, [r0, #4]
   d73ca:	461a      	mov	r2, r3
   d73cc:	4619      	mov	r1, r3
   d73ce:	f7ff bed9 	b.w	d7184 <network_off>

000d73d2 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d73d2:	2300      	movs	r3, #0
   d73d4:	6840      	ldr	r0, [r0, #4]
   d73d6:	461a      	mov	r2, r3
   d73d8:	4619      	mov	r1, r3
   d73da:	f7ff becb 	b.w	d7174 <network_on>

000d73de <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d73de:	2200      	movs	r2, #0
   d73e0:	6840      	ldr	r0, [r0, #4]
   d73e2:	4611      	mov	r1, r2
   d73e4:	f7ff beae 	b.w	d7144 <network_connecting>

000d73e8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d73e8:	6840      	ldr	r0, [r0, #4]
   d73ea:	2200      	movs	r2, #0
   d73ec:	2102      	movs	r1, #2
   d73ee:	f7ff beb1 	b.w	d7154 <network_disconnect>

000d73f2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d73f2:	2300      	movs	r3, #0
   d73f4:	6840      	ldr	r0, [r0, #4]
   d73f6:	461a      	mov	r2, r3
   d73f8:	f7ff be9c 	b.w	d7134 <network_connect>

000d73fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d73fc:	4b08      	ldr	r3, [pc, #32]	; (d7420 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d73fe:	b510      	push	{r4, lr}
   d7400:	2428      	movs	r4, #40	; 0x28
   d7402:	4622      	mov	r2, r4
   d7404:	4618      	mov	r0, r3
   d7406:	2100      	movs	r1, #0
   d7408:	f002 f8fa 	bl	d9600 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d740c:	4b05      	ldr	r3, [pc, #20]	; (d7424 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d740e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d7410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7414:	6042      	str	r2, [r0, #4]
   d7416:	2204      	movs	r2, #4
   d7418:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d741a:	4a03      	ldr	r2, [pc, #12]	; (d7428 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d741c:	601a      	str	r2, [r3, #0]
   d741e:	bd10      	pop	{r4, pc}
   d7420:	2003e5ec 	.word	0x2003e5ec
   d7424:	2003e5e4 	.word	0x2003e5e4
   d7428:	000dbeec 	.word	0x000dbeec

000d742c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d742c:	4770      	bx	lr

000d742e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d742e:	2000      	movs	r0, #0
   d7430:	4770      	bx	lr

000d7432 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7432:	b510      	push	{r4, lr}
   d7434:	2110      	movs	r1, #16
   d7436:	4604      	mov	r4, r0
   d7438:	f001 fa45 	bl	d88c6 <_ZdlPvj>
   d743c:	4620      	mov	r0, r4
   d743e:	bd10      	pop	{r4, pc}

000d7440 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d7440:	b508      	push	{r3, lr}
      { delete this; }
   d7442:	f7ff fff6 	bl	d7432 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d7446:	bd08      	pop	{r3, pc}

000d7448 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d7448:	b530      	push	{r4, r5, lr}
        type_(type) {
   d744a:	2200      	movs	r2, #0
   d744c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d7450:	6002      	str	r2, [r0, #0]
   d7452:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7454:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d7456:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7458:	680c      	ldr	r4, [r1, #0]
   d745a:	8085      	strh	r5, [r0, #4]
   d745c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d745e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d7460:	bd30      	pop	{r4, r5, pc}

000d7462 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d7462:	b510      	push	{r4, lr}
   d7464:	4604      	mov	r4, r0
    free((void*)msg_);
   d7466:	6800      	ldr	r0, [r0, #0]
   d7468:	f7ff fecc 	bl	d7204 <free>
}
   d746c:	4620      	mov	r0, r4
   d746e:	bd10      	pop	{r4, pc}

000d7470 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d7470:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d7472:	68c4      	ldr	r4, [r0, #12]
   d7474:	b1f4      	cbz	r4, d74b4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d7476:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d7478:	2b02      	cmp	r3, #2
   d747a:	d103      	bne.n	d7484 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d747c:	f104 000c 	add.w	r0, r4, #12
   d7480:	f7ff ffef 	bl	d7462 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d7484:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d7486:	b135      	cbz	r5, d7496 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d7488:	4628      	mov	r0, r5
   d748a:	f7fc ff19 	bl	d42c0 <_ZNSt14_Function_baseD1Ev>
   d748e:	2110      	movs	r1, #16
   d7490:	4628      	mov	r0, r5
   d7492:	f001 fa18 	bl	d88c6 <_ZdlPvj>
   d7496:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d7498:	b135      	cbz	r5, d74a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d749a:	4628      	mov	r0, r5
   d749c:	f7fc ff10 	bl	d42c0 <_ZNSt14_Function_baseD1Ev>
   d74a0:	2110      	movs	r1, #16
   d74a2:	4628      	mov	r0, r5
   d74a4:	f001 fa0f 	bl	d88c6 <_ZdlPvj>
   d74a8:	4620      	mov	r0, r4
   d74aa:	2114      	movs	r1, #20
   d74ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d74b0:	f001 ba09 	b.w	d88c6 <_ZdlPvj>
   d74b4:	bd38      	pop	{r3, r4, r5, pc}

000d74b6 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d74b6:	b510      	push	{r4, lr}
   d74b8:	b088      	sub	sp, #32
   d74ba:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d74bc:	4668      	mov	r0, sp
   d74be:	f000 fd54 	bl	d7f6a <_ZN6StringC1EPKc>
    return (*fn)(p);
   d74c2:	4669      	mov	r1, sp
   d74c4:	a804      	add	r0, sp, #16
   d74c6:	f000 fd73 	bl	d7fb0 <_ZN6StringC1ERKS_>
   d74ca:	a804      	add	r0, sp, #16
   d74cc:	47a0      	blx	r4
   d74ce:	4604      	mov	r4, r0
   d74d0:	a804      	add	r0, sp, #16
   d74d2:	f000 fcff 	bl	d7ed4 <_ZN6StringD1Ev>
    String p(param);
   d74d6:	4668      	mov	r0, sp
   d74d8:	f000 fcfc 	bl	d7ed4 <_ZN6StringD1Ev>
}
   d74dc:	4620      	mov	r0, r4
   d74de:	b008      	add	sp, #32
   d74e0:	bd10      	pop	{r4, pc}

000d74e2 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d74e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d74e4:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d74e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d74ea:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d74ec:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d74ee:	461a      	mov	r2, r3
   d74f0:	4669      	mov	r1, sp
   d74f2:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d74f4:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d74f8:	f8ad 4000 	strh.w	r4, [sp]
   d74fc:	f7ff fdba 	bl	d7074 <spark_function>
}
   d7500:	b004      	add	sp, #16
   d7502:	bd10      	pop	{r4, pc}

000d7504 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d7504:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7506:	460e      	mov	r6, r1
   d7508:	4604      	mov	r4, r0
   d750a:	f856 3b04 	ldr.w	r3, [r6], #4
   d750e:	9300      	str	r3, [sp, #0]
   d7510:	460d      	mov	r5, r1
   d7512:	a801      	add	r0, sp, #4
   d7514:	4631      	mov	r1, r6
   d7516:	f7ff ff04 	bl	d7322 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d751a:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d751c:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d751e:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7520:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d7522:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d7524:	2300      	movs	r3, #0
   d7526:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d7528:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d752a:	f7ff ff01 	bl	d7330 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d752e:	4630      	mov	r0, r6
   d7530:	f7ff fefe 	bl	d7330 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d7534:	4628      	mov	r0, r5
   d7536:	2108      	movs	r1, #8
   d7538:	f001 f9c5 	bl	d88c6 <_ZdlPvj>
        return p;
    }
   d753c:	4620      	mov	r0, r4
   d753e:	b002      	add	sp, #8
   d7540:	bd70      	pop	{r4, r5, r6, pc}

000d7542 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d7542:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7544:	b510      	push	{r4, lr}
      if (_M_empty())
   d7546:	b90a      	cbnz	r2, d754c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d7548:	f001 f9c3 	bl	d88d2 <_ZSt25__throw_bad_function_callv>
    }
   d754c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7550:	68c3      	ldr	r3, [r0, #12]
   d7552:	4718      	bx	r3

000d7554 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7554:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7556:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d7558:	f100 0110 	add.w	r1, r0, #16
   d755c:	f7ff fff1 	bl	d7542 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d7560:	bd08      	pop	{r3, pc}

000d7562 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d7562:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7564:	b510      	push	{r4, lr}
      if (_M_empty())
   d7566:	b90a      	cbnz	r2, d756c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7568:	f001 f9b3 	bl	d88d2 <_ZSt25__throw_bad_function_callv>
    }
   d756c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d7570:	68c3      	ldr	r3, [r0, #12]
   d7572:	4718      	bx	r3

000d7574 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7574:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7576:	6800      	ldr	r0, [r0, #0]
   d7578:	f100 0110 	add.w	r1, r0, #16
   d757c:	f7ff fff1 	bl	d7562 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d7580:	bd08      	pop	{r3, pc}
	...

000d7584 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d7584:	b538      	push	{r3, r4, r5, lr}
   d7586:	2300      	movs	r3, #0
   d7588:	4604      	mov	r4, r0
   d758a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d758c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d758e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7590:	f7fc fd81 	bl	d4096 <_Znwj>
   d7594:	b128      	cbz	r0, d75a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d7596:	2301      	movs	r3, #1
   d7598:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d759c:	4b02      	ldr	r3, [pc, #8]	; (d75a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d759e:	6003      	str	r3, [r0, #0]
   d75a0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d75a2:	6020      	str	r0, [r4, #0]
	}
   d75a4:	4620      	mov	r0, r4
   d75a6:	bd38      	pop	{r3, r4, r5, pc}
   d75a8:	000dbf28 	.word	0x000dbf28

000d75ac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d75ac:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d75ae:	2300      	movs	r3, #0
   d75b0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d75b2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d75b4:	4604      	mov	r4, r0
   d75b6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d75b8:	b12b      	cbz	r3, d75c6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d75ba:	2202      	movs	r2, #2
   d75bc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d75be:	68eb      	ldr	r3, [r5, #12]
   d75c0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d75c2:	68ab      	ldr	r3, [r5, #8]
   d75c4:	60a3      	str	r3, [r4, #8]
    }
   d75c6:	4620      	mov	r0, r4
   d75c8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d75cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d75cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d75ce:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d75d0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d75d2:	4668      	mov	r0, sp
   d75d4:	f7ff ff38 	bl	d7448 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d75d8:	f04f 0302 	mov.w	r3, #2
   d75dc:	e8d4 2f4f 	ldrexb	r2, [r4]
   d75e0:	2a00      	cmp	r2, #0
   d75e2:	d103      	bne.n	d75ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d75e4:	e8c4 3f41 	strexb	r1, r3, [r4]
   d75e8:	2900      	cmp	r1, #0
   d75ea:	d1f7      	bne.n	d75dc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d75ec:	d125      	bne.n	d763a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d75ee:	f104 050c 	add.w	r5, r4, #12
   d75f2:	4669      	mov	r1, sp
   d75f4:	4628      	mov	r0, r5
   d75f6:	f7ff ff27 	bl	d7448 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d75fa:	f3bf 8f5b 	dmb	ish
   d75fe:	2301      	movs	r3, #1
   d7600:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d7602:	2000      	movs	r0, #0
   d7604:	f104 0308 	add.w	r3, r4, #8
   d7608:	f3bf 8f5b 	dmb	ish
   d760c:	e853 6f00 	ldrex	r6, [r3]
   d7610:	e843 0200 	strex	r2, r0, [r3]
   d7614:	2a00      	cmp	r2, #0
   d7616:	d1f9      	bne.n	d760c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d7618:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d761c:	b16e      	cbz	r6, d763a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d761e:	f7ff fce3 	bl	d6fe8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d7622:	b178      	cbz	r0, d7644 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d7624:	4629      	mov	r1, r5
   d7626:	4630      	mov	r0, r6
   d7628:	f7ff ff8b 	bl	d7542 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d762c:	4630      	mov	r0, r6
   d762e:	f7fc fe47 	bl	d42c0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d7632:	2110      	movs	r1, #16
   d7634:	4630      	mov	r0, r6
   d7636:	f001 f946 	bl	d88c6 <_ZdlPvj>
        p_->setError(std::move(error));
   d763a:	4668      	mov	r0, sp
   d763c:	f7ff ff11 	bl	d7462 <_ZN8particle5ErrorD1Ev>
    }
   d7640:	b009      	add	sp, #36	; 0x24
   d7642:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7644:	4631      	mov	r1, r6
   d7646:	a802      	add	r0, sp, #8
   d7648:	f7ff ffb0 	bl	d75ac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d764c:	68e0      	ldr	r0, [r4, #12]
   d764e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7652:	b108      	cbz	r0, d7658 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d7654:	f002 f812 	bl	d967c <strdup>
        type_(type) {
   d7658:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d765a:	2010      	movs	r0, #16
   d765c:	f8ad 501c 	strh.w	r5, [sp, #28]
   d7660:	f7fc fd19 	bl	d4096 <_Znwj>
   d7664:	4605      	mov	r5, r0
   d7666:	b1e8      	cbz	r0, d76a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d7668:	2700      	movs	r7, #0
   d766a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d766c:	2018      	movs	r0, #24
   d766e:	f7fc fd12 	bl	d4096 <_Znwj>
   d7672:	4604      	mov	r4, r0
   d7674:	b188      	cbz	r0, d769a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d7676:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d7678:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d767a:	a802      	add	r0, sp, #8
   d767c:	f7ff fe64 	bl	d7348 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7680:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7682:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7684:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7686:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7688:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d768a:	a906      	add	r1, sp, #24
   d768c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d768e:	60e3      	str	r3, [r4, #12]
   d7690:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d7694:	9205      	str	r2, [sp, #20]
   d7696:	f7ff fed7 	bl	d7448 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d769a:	4b08      	ldr	r3, [pc, #32]	; (d76bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d769c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d769e:	4b08      	ldr	r3, [pc, #32]	; (d76c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d76a0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d76a2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d76a4:	a806      	add	r0, sp, #24
   d76a6:	f7ff fedc 	bl	d7462 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d76aa:	a802      	add	r0, sp, #8
   d76ac:	f7fc fe08 	bl	d42c0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d76b0:	2200      	movs	r2, #0
   d76b2:	4629      	mov	r1, r5
   d76b4:	4803      	ldr	r0, [pc, #12]	; (d76c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d76b6:	f7ff fc9f 	bl	d6ff8 <application_thread_invoke>
   d76ba:	e7b7      	b.n	d762c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d76bc:	000d7555 	.word	0x000d7555
   d76c0:	000d77ed 	.word	0x000d77ed
   d76c4:	000d72cb 	.word	0x000d72cb

000d76c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d76c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d76cc:	b08a      	sub	sp, #40	; 0x28
   d76ce:	4605      	mov	r5, r0
   d76d0:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d76d4:	460c      	mov	r4, r1
   d76d6:	4617      	mov	r7, r2
   d76d8:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d76da:	f7ff fce3 	bl	d70a4 <spark_cloud_flag_connected>
   d76de:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d76e0:	4682      	mov	sl, r0
   d76e2:	bb38      	cbnz	r0, d7734 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d76e4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d76e8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d76ea:	a905      	add	r1, sp, #20
   d76ec:	4630      	mov	r0, r6
   d76ee:	f8ad 3018 	strh.w	r3, [sp, #24]
   d76f2:	f7ff fea9 	bl	d7448 <_ZN8particle5ErrorC1EOS0_>
   d76f6:	2014      	movs	r0, #20
   d76f8:	f7fc fccd 	bl	d4096 <_Znwj>
   d76fc:	4604      	mov	r4, r0
   d76fe:	b148      	cbz	r0, d7714 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d7700:	2302      	movs	r3, #2
   d7702:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7704:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d7706:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d770a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d770c:	4631      	mov	r1, r6
   d770e:	300c      	adds	r0, #12
   d7710:	f7ff fe9a 	bl	d7448 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7714:	4628      	mov	r0, r5
	: __shared_count(__p)
   d7716:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7718:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d771c:	f7ff ff32 	bl	d7584 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7720:	4630      	mov	r0, r6
   d7722:	f7ff fe9e 	bl	d7462 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d7726:	a805      	add	r0, sp, #20
   d7728:	f7ff fe9b 	bl	d7462 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d772c:	4628      	mov	r0, r5
   d772e:	b00a      	add	sp, #40	; 0x28
   d7730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d7734:	230c      	movs	r3, #12
   d7736:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d773a:	2014      	movs	r0, #20
   d773c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d7740:	9307      	str	r3, [sp, #28]
   d7742:	f7fc fca8 	bl	d4096 <_Znwj>
   d7746:	4601      	mov	r1, r0
   d7748:	b128      	cbz	r0, d7756 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d774a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d774e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d7752:	f880 a001 	strb.w	sl, [r0, #1]
   d7756:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7758:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d775a:	f7ff ff13 	bl	d7584 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d775e:	4b22      	ldr	r3, [pc, #136]	; (d77e8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d7760:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d7762:	2008      	movs	r0, #8
   d7764:	f7fc fc97 	bl	d4096 <_Znwj>
   d7768:	4682      	mov	sl, r0
   d776a:	b128      	cbz	r0, d7778 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d776c:	9b03      	ldr	r3, [sp, #12]
   d776e:	f840 3b04 	str.w	r3, [r0], #4
   d7772:	a904      	add	r1, sp, #16
   d7774:	f7ff fdd5 	bl	d7322 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7778:	9600      	str	r6, [sp, #0]
   d777a:	fa5f f389 	uxtb.w	r3, r9
   d777e:	4642      	mov	r2, r8
   d7780:	4639      	mov	r1, r7
   d7782:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d7784:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7788:	f7ff fc9c 	bl	d70c4 <spark_send_event>
   d778c:	b9b8      	cbnz	r0, d77be <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d778e:	9b03      	ldr	r3, [sp, #12]
   d7790:	785b      	ldrb	r3, [r3, #1]
   d7792:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d7796:	b993      	cbnz	r3, d77be <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d7798:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d779c:	a905      	add	r1, sp, #20
   d779e:	a803      	add	r0, sp, #12
   d77a0:	9205      	str	r2, [sp, #20]
   d77a2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d77a6:	f7ff ff11 	bl	d75cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d77aa:	a805      	add	r0, sp, #20
   d77ac:	f7ff fe59 	bl	d7462 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d77b0:	a805      	add	r0, sp, #20
   d77b2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d77b4:	f7ff fea6 	bl	d7504 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d77b8:	a806      	add	r0, sp, #24
   d77ba:	f7ff fdb9 	bl	d7330 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d77be:	9b03      	ldr	r3, [sp, #12]
   d77c0:	9305      	str	r3, [sp, #20]
   d77c2:	a904      	add	r1, sp, #16
   d77c4:	a806      	add	r0, sp, #24
   d77c6:	f7ff fdac 	bl	d7322 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d77ca:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d77cc:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d77ce:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d77d0:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d77d2:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d77d4:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d77d6:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d77d8:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d77da:	f7ff fda9 	bl	d7330 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d77de:	a804      	add	r0, sp, #16
   d77e0:	f7ff fda6 	bl	d7330 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d77e4:	e7a2      	b.n	d772c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d77e6:	bf00      	nop
   d77e8:	000d78b1 	.word	0x000d78b1

000d77ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d77ec:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d77ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d77f0:	4605      	mov	r5, r0
	  switch (__op)
   d77f2:	d007      	beq.n	d7804 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d77f4:	2a03      	cmp	r2, #3
   d77f6:	d018      	beq.n	d782a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d77f8:	2a01      	cmp	r2, #1
   d77fa:	d101      	bne.n	d7800 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d77fc:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d77fe:	6003      	str	r3, [r0, #0]
	}
   d7800:	2000      	movs	r0, #0
   d7802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d7804:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d7806:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d7808:	f7fc fc45 	bl	d4096 <_Znwj>
   d780c:	4604      	mov	r4, r0
   d780e:	b150      	cbz	r0, d7826 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d7810:	4631      	mov	r1, r6
   d7812:	f7ff fecb 	bl	d75ac <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d7816:	6930      	ldr	r0, [r6, #16]
   d7818:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d781c:	b108      	cbz	r0, d7822 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d781e:	f001 ff2d 	bl	d967c <strdup>
        type_(type) {
   d7822:	6120      	str	r0, [r4, #16]
   d7824:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d7826:	602c      	str	r4, [r5, #0]
	}
   d7828:	e7ea      	b.n	d7800 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d782a:	6804      	ldr	r4, [r0, #0]
   d782c:	2c00      	cmp	r4, #0
   d782e:	d0e7      	beq.n	d7800 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d7830:	f104 0010 	add.w	r0, r4, #16
   d7834:	f7ff fe15 	bl	d7462 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d7838:	4620      	mov	r0, r4
   d783a:	f7fc fd41 	bl	d42c0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d783e:	2118      	movs	r1, #24
   d7840:	4620      	mov	r0, r4
   d7842:	f001 f840 	bl	d88c6 <_ZdlPvj>
   d7846:	e7db      	b.n	d7800 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d7848 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d7848:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d784a:	2300      	movs	r3, #0
   d784c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d784e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d7850:	4604      	mov	r4, r0
   d7852:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d7854:	b12b      	cbz	r3, d7862 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7856:	2202      	movs	r2, #2
   d7858:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d785a:	68eb      	ldr	r3, [r5, #12]
   d785c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d785e:	68ab      	ldr	r3, [r5, #8]
   d7860:	60a3      	str	r3, [r4, #8]
    }
   d7862:	4620      	mov	r0, r4
   d7864:	bd38      	pop	{r3, r4, r5, pc}

000d7866 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d7866:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7868:	b570      	push	{r4, r5, r6, lr}
   d786a:	4604      	mov	r4, r0
	  switch (__op)
   d786c:	d007      	beq.n	d787e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d786e:	2a03      	cmp	r2, #3
   d7870:	d012      	beq.n	d7898 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d7872:	2a01      	cmp	r2, #1
   d7874:	d101      	bne.n	d787a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d7876:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7878:	6003      	str	r3, [r0, #0]
	}
   d787a:	2000      	movs	r0, #0
   d787c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d787e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d7880:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d7882:	f7fc fc08 	bl	d4096 <_Znwj>
   d7886:	4605      	mov	r5, r0
   d7888:	b120      	cbz	r0, d7894 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d788a:	4631      	mov	r1, r6
   d788c:	f7ff ffdc 	bl	d7848 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d7890:	7c33      	ldrb	r3, [r6, #16]
   d7892:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d7894:	6025      	str	r5, [r4, #0]
	}
   d7896:	e7f0      	b.n	d787a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d7898:	6804      	ldr	r4, [r0, #0]
   d789a:	2c00      	cmp	r4, #0
   d789c:	d0ed      	beq.n	d787a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d789e:	4620      	mov	r0, r4
   d78a0:	f7fc fd0e 	bl	d42c0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d78a4:	2114      	movs	r1, #20
   d78a6:	4620      	mov	r0, r4
   d78a8:	f001 f80d 	bl	d88c6 <_ZdlPvj>
   d78ac:	e7e5      	b.n	d787a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d78b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d78b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d78b2:	b089      	sub	sp, #36	; 0x24
   d78b4:	4604      	mov	r4, r0
   d78b6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d78b8:	a801      	add	r0, sp, #4
   d78ba:	4611      	mov	r1, r2
   d78bc:	f7ff fe22 	bl	d7504 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d78c0:	b1a4      	cbz	r4, d78ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d78c2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d78c4:	b11d      	cbz	r5, d78ce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d78c6:	4628      	mov	r0, r5
   d78c8:	f001 fed8 	bl	d967c <strdup>
   d78cc:	4605      	mov	r5, r0
   d78ce:	a801      	add	r0, sp, #4
   d78d0:	a903      	add	r1, sp, #12
        type_(type) {
   d78d2:	9503      	str	r5, [sp, #12]
   d78d4:	f8ad 4010 	strh.w	r4, [sp, #16]
   d78d8:	f7ff fe78 	bl	d75cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d78dc:	a803      	add	r0, sp, #12
   d78de:	f7ff fdc0 	bl	d7462 <_ZN8particle5ErrorD1Ev>
   d78e2:	a802      	add	r0, sp, #8
   d78e4:	f7ff fd24 	bl	d7330 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d78e8:	b009      	add	sp, #36	; 0x24
   d78ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d78ec:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d78ee:	2301      	movs	r3, #1
   d78f0:	e8d5 2f4f 	ldrexb	r2, [r5]
   d78f4:	2a00      	cmp	r2, #0
   d78f6:	d103      	bne.n	d7900 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d78f8:	e8c5 3f41 	strexb	r1, r3, [r5]
   d78fc:	2900      	cmp	r1, #0
   d78fe:	d1f7      	bne.n	d78f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d7900:	d1ef      	bne.n	d78e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d7902:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d7904:	f3bf 8f5b 	dmb	ish
   d7908:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d790a:	1d2b      	adds	r3, r5, #4
   d790c:	f3bf 8f5b 	dmb	ish
   d7910:	e853 6f00 	ldrex	r6, [r3]
   d7914:	e843 4200 	strex	r2, r4, [r3]
   d7918:	2a00      	cmp	r2, #0
   d791a:	d1f9      	bne.n	d7910 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d791c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d7920:	2e00      	cmp	r6, #0
   d7922:	d0de      	beq.n	d78e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d7924:	4620      	mov	r0, r4
   d7926:	f7ff fb5f 	bl	d6fe8 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d792a:	4607      	mov	r7, r0
   d792c:	b160      	cbz	r0, d7948 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d792e:	f105 010c 	add.w	r1, r5, #12
   d7932:	4630      	mov	r0, r6
   d7934:	f7ff fe15 	bl	d7562 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d7938:	4630      	mov	r0, r6
   d793a:	f7fc fcc1 	bl	d42c0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d793e:	2110      	movs	r1, #16
   d7940:	4630      	mov	r0, r6
   d7942:	f000 ffc0 	bl	d88c6 <_ZdlPvj>
   d7946:	e7cc      	b.n	d78e2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d7948:	4631      	mov	r1, r6
   d794a:	a803      	add	r0, sp, #12
   d794c:	f7ff ff7c 	bl	d7848 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7950:	7b2b      	ldrb	r3, [r5, #12]
   d7952:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7956:	2010      	movs	r0, #16
   d7958:	f7fc fb9d 	bl	d4096 <_Znwj>
   d795c:	4605      	mov	r5, r0
   d795e:	b1d0      	cbz	r0, d7996 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d7960:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7962:	2014      	movs	r0, #20
   d7964:	f7fc fb97 	bl	d4096 <_Znwj>
   d7968:	4604      	mov	r4, r0
   d796a:	b178      	cbz	r0, d798c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d796c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d796e:	4601      	mov	r1, r0
   d7970:	a803      	add	r0, sp, #12
   d7972:	f7ff fce9 	bl	d7348 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7976:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7978:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d797a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d797c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d797e:	9205      	str	r2, [sp, #20]
   d7980:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7982:	60e3      	str	r3, [r4, #12]
   d7984:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d7988:	9206      	str	r2, [sp, #24]
   d798a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d798c:	4b06      	ldr	r3, [pc, #24]	; (d79a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d798e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d7990:	4b06      	ldr	r3, [pc, #24]	; (d79ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7992:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d7994:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d7996:	a803      	add	r0, sp, #12
   d7998:	f7fc fc92 	bl	d42c0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d799c:	2200      	movs	r2, #0
   d799e:	4629      	mov	r1, r5
   d79a0:	4803      	ldr	r0, [pc, #12]	; (d79b0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d79a2:	f7ff fb29 	bl	d6ff8 <application_thread_invoke>
   d79a6:	e7c7      	b.n	d7938 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d79a8:	000d7575 	.word	0x000d7575
   d79ac:	000d7867 	.word	0x000d7867
   d79b0:	000d72cb 	.word	0x000d72cb

000d79b4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d79b4:	2200      	movs	r2, #0
   d79b6:	6840      	ldr	r0, [r0, #4]
   d79b8:	4611      	mov	r1, r2
   d79ba:	f7ff bbf3 	b.w	d71a4 <network_listening>

000d79be <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d79be:	2200      	movs	r2, #0
   d79c0:	6840      	ldr	r0, [r0, #4]
   d79c2:	4611      	mov	r1, r2
   d79c4:	f7ff bbfe 	b.w	d71c4 <network_get_listen_timeout>

000d79c8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d79c8:	6840      	ldr	r0, [r0, #4]
   d79ca:	2200      	movs	r2, #0
   d79cc:	f7ff bbf2 	b.w	d71b4 <network_set_listen_timeout>

000d79d0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d79d0:	6840      	ldr	r0, [r0, #4]
   d79d2:	2200      	movs	r2, #0
   d79d4:	f081 0101 	eor.w	r1, r1, #1
   d79d8:	f7ff bbdc 	b.w	d7194 <network_listen>

000d79dc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d79dc:	2300      	movs	r3, #0
   d79de:	6840      	ldr	r0, [r0, #4]
   d79e0:	461a      	mov	r2, r3
   d79e2:	4619      	mov	r1, r3
   d79e4:	f7ff bbce 	b.w	d7184 <network_off>

000d79e8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d79e8:	2300      	movs	r3, #0
   d79ea:	6840      	ldr	r0, [r0, #4]
   d79ec:	461a      	mov	r2, r3
   d79ee:	4619      	mov	r1, r3
   d79f0:	f7ff bbc0 	b.w	d7174 <network_on>

000d79f4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d79f4:	2200      	movs	r2, #0
   d79f6:	6840      	ldr	r0, [r0, #4]
   d79f8:	4611      	mov	r1, r2
   d79fa:	f7ff bbb3 	b.w	d7164 <network_ready>

000d79fe <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d79fe:	2200      	movs	r2, #0
   d7a00:	6840      	ldr	r0, [r0, #4]
   d7a02:	4611      	mov	r1, r2
   d7a04:	f7ff bb9e 	b.w	d7144 <network_connecting>

000d7a08 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7a08:	6840      	ldr	r0, [r0, #4]
   d7a0a:	2200      	movs	r2, #0
   d7a0c:	2102      	movs	r1, #2
   d7a0e:	f7ff bba1 	b.w	d7154 <network_disconnect>

000d7a12 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7a12:	2300      	movs	r3, #0
   d7a14:	6840      	ldr	r0, [r0, #4]
   d7a16:	461a      	mov	r2, r3
   d7a18:	f7ff bb8c 	b.w	d7134 <network_connect>

000d7a1c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d7a1c:	4b02      	ldr	r3, [pc, #8]	; (d7a28 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d7a1e:	2203      	movs	r2, #3
   d7a20:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7a22:	4a02      	ldr	r2, [pc, #8]	; (d7a2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7a24:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d7a26:	4770      	bx	lr
   d7a28:	2003e614 	.word	0x2003e614
   d7a2c:	000dbf44 	.word	0x000dbf44

000d7a30 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7a30:	4770      	bx	lr

000d7a32 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7a34:	4606      	mov	r6, r0
   d7a36:	4615      	mov	r5, r2
   d7a38:	460c      	mov	r4, r1
   d7a3a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7a3c:	42bc      	cmp	r4, r7
   d7a3e:	d006      	beq.n	d7a4e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7a40:	6833      	ldr	r3, [r6, #0]
   d7a42:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7a46:	689b      	ldr	r3, [r3, #8]
   d7a48:	4630      	mov	r0, r6
   d7a4a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d7a4c:	e7f6      	b.n	d7a3c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d7a4e:	4628      	mov	r0, r5
   d7a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7a52 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d7a52:	7c00      	ldrb	r0, [r0, #16]
   d7a54:	2200      	movs	r2, #0
   d7a56:	f7ff b9af 	b.w	d6db8 <hal_i2c_write>

000d7a5a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d7a5a:	7c00      	ldrb	r0, [r0, #16]
   d7a5c:	2100      	movs	r1, #0
   d7a5e:	f7ff b9b3 	b.w	d6dc8 <hal_i2c_available>

000d7a62 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d7a62:	7c00      	ldrb	r0, [r0, #16]
   d7a64:	2100      	movs	r1, #0
   d7a66:	f7ff b9b7 	b.w	d6dd8 <hal_i2c_read>

000d7a6a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d7a6a:	7c00      	ldrb	r0, [r0, #16]
   d7a6c:	2100      	movs	r1, #0
   d7a6e:	f7ff b9bb 	b.w	d6de8 <hal_i2c_peek>

000d7a72 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d7a72:	7c00      	ldrb	r0, [r0, #16]
   d7a74:	2100      	movs	r1, #0
   d7a76:	f7ff b9bf 	b.w	d6df8 <hal_i2c_flush>

000d7a7a <_ZN7TwoWireD0Ev>:
   d7a7a:	b510      	push	{r4, lr}
   d7a7c:	2114      	movs	r1, #20
   d7a7e:	4604      	mov	r4, r0
   d7a80:	f000 ff21 	bl	d88c6 <_ZdlPvj>
   d7a84:	4620      	mov	r0, r4
   d7a86:	bd10      	pop	{r4, pc}

000d7a88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7a88:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7a8e:	4604      	mov	r4, r0
   d7a90:	4608      	mov	r0, r1
   d7a92:	2100      	movs	r1, #0
   d7a94:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7a98:	4b03      	ldr	r3, [pc, #12]	; (d7aa8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d7a9a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7a9c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d7a9e:	4611      	mov	r1, r2
   d7aa0:	f7ff f9ba 	bl	d6e18 <hal_i2c_init>
}
   d7aa4:	4620      	mov	r0, r4
   d7aa6:	bd10      	pop	{r4, pc}
   d7aa8:	000dbf80 	.word	0x000dbf80

000d7aac <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7aac:	2300      	movs	r3, #0
   d7aae:	7c00      	ldrb	r0, [r0, #16]
   d7ab0:	461a      	mov	r2, r3
   d7ab2:	4619      	mov	r1, r3
   d7ab4:	f7ff b968 	b.w	d6d88 <hal_i2c_begin>

000d7ab8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7ab8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d7aba:	2200      	movs	r2, #0
   d7abc:	2314      	movs	r3, #20
   d7abe:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d7ac2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d7ac6:	780b      	ldrb	r3, [r1, #0]
   d7ac8:	f88d 3008 	strb.w	r3, [sp, #8]
   d7acc:	684b      	ldr	r3, [r1, #4]
   d7ace:	9303      	str	r3, [sp, #12]
   d7ad0:	68cb      	ldr	r3, [r1, #12]
   d7ad2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d7ad4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d7ad6:	7a0b      	ldrb	r3, [r1, #8]
   d7ad8:	9305      	str	r3, [sp, #20]
   d7ada:	a901      	add	r1, sp, #4
   d7adc:	f7ff f9b4 	bl	d6e48 <hal_i2c_request_ex>
}
   d7ae0:	b007      	add	sp, #28
   d7ae2:	f85d fb04 	ldr.w	pc, [sp], #4

000d7ae6 <_ZN7TwoWire11requestFromEhjh>:
{
   d7ae6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7ae8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7aea:	f88d 1000 	strb.w	r1, [sp]
   d7aee:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7af2:	9103      	str	r1, [sp, #12]
   d7af4:	bf18      	it	ne
   d7af6:	2301      	movne	r3, #1
   d7af8:	4669      	mov	r1, sp
    size_ = size;
   d7afa:	9201      	str	r2, [sp, #4]
   d7afc:	f88d 3008 	strb.w	r3, [sp, #8]
   d7b00:	f7ff ffda 	bl	d7ab8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7b04:	b005      	add	sp, #20
   d7b06:	f85d fb04 	ldr.w	pc, [sp], #4

000d7b0a <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7b0a:	7c00      	ldrb	r0, [r0, #16]
   d7b0c:	2200      	movs	r2, #0
   d7b0e:	f7ff b943 	b.w	d6d98 <hal_i2c_begin_transmission>

000d7b12 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7b12:	b2c9      	uxtb	r1, r1
   d7b14:	f7ff bff9 	b.w	d7b0a <_ZN7TwoWire17beginTransmissionEh>

000d7b18 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d7b18:	7c00      	ldrb	r0, [r0, #16]
   d7b1a:	2200      	movs	r2, #0
   d7b1c:	f7ff b944 	b.w	d6da8 <hal_i2c_end_transmission>

000d7b20 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d7b20:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d7b22:	2100      	movs	r1, #0
   d7b24:	7c00      	ldrb	r0, [r0, #16]
   d7b26:	f7ff f97f 	bl	d6e28 <hal_i2c_lock>
}
   d7b2a:	fab0 f080 	clz	r0, r0
   d7b2e:	0940      	lsrs	r0, r0, #5
   d7b30:	bd08      	pop	{r3, pc}

000d7b32 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d7b32:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d7b34:	2100      	movs	r1, #0
   d7b36:	7c00      	ldrb	r0, [r0, #16]
   d7b38:	f7ff f97e 	bl	d6e38 <hal_i2c_unlock>
}
   d7b3c:	fab0 f080 	clz	r0, r0
   d7b40:	0940      	lsrs	r0, r0, #5
   d7b42:	bd08      	pop	{r3, pc}

000d7b44 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d7b44:	4700      	bx	r0
	...

000d7b48 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d7b48:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d7b4c:	2400      	movs	r4, #0
{
   d7b4e:	461d      	mov	r5, r3
   d7b50:	460f      	mov	r7, r1
   d7b52:	4690      	mov	r8, r2
   d7b54:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d7b56:	f7ff f907 	bl	d6d68 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d7b5a:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7b5c:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d7b60:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7b64:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d7b68:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d7b6c:	bfa2      	ittt	ge
   d7b6e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d7b72:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d7b76:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7b78:	4907      	ldr	r1, [pc, #28]	; (d7b98 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d7b7a:	9400      	str	r4, [sp, #0]
   d7b7c:	4643      	mov	r3, r8
   d7b7e:	463a      	mov	r2, r7
   d7b80:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d7b82:	bfa8      	it	ge
   d7b84:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7b88:	f7ff f8e6 	bl	d6d58 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d7b8c:	fab0 f080 	clz	r0, r0
   d7b90:	0940      	lsrs	r0, r0, #5
   d7b92:	b004      	add	sp, #16
   d7b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7b98:	000d7b45 	.word	0x000d7b45

000d7b9c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7b9c:	4770      	bx	lr

000d7b9e <_ZN9IPAddressD0Ev>:
   d7b9e:	b510      	push	{r4, lr}
   d7ba0:	2118      	movs	r1, #24
   d7ba2:	4604      	mov	r4, r0
   d7ba4:	f000 fe8f 	bl	d88c6 <_ZdlPvj>
   d7ba8:	4620      	mov	r0, r4
   d7baa:	bd10      	pop	{r4, pc}

000d7bac <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7bac:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7bae:	7d03      	ldrb	r3, [r0, #20]
   d7bb0:	2b06      	cmp	r3, #6
{
   d7bb2:	b08d      	sub	sp, #52	; 0x34
   d7bb4:	460e      	mov	r6, r1
   d7bb6:	f100 0704 	add.w	r7, r0, #4
   d7bba:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d7bbe:	d012      	beq.n	d7be6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d7bc0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7bc4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7bc8:	220a      	movs	r2, #10
   d7bca:	4630      	mov	r0, r6
   d7bcc:	f000 f945 	bl	d7e5a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7bd0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7bd2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d7bd4:	d019      	beq.n	d7c0a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d7bd6:	2c00      	cmp	r4, #0
   d7bd8:	d0f4      	beq.n	d7bc4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d7bda:	212e      	movs	r1, #46	; 0x2e
   d7bdc:	4630      	mov	r0, r6
   d7bde:	f000 f939 	bl	d7e54 <_ZN5Print5printEc>
   d7be2:	4404      	add	r4, r0
   d7be4:	e7ee      	b.n	d7bc4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7be6:	232f      	movs	r3, #47	; 0x2f
   d7be8:	466a      	mov	r2, sp
   d7bea:	4639      	mov	r1, r7
   d7bec:	200a      	movs	r0, #10
		buf[0] = 0;
   d7bee:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7bf2:	f7ff f931 	bl	d6e58 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d7bf6:	4668      	mov	r0, sp
   d7bf8:	f001 fd5d 	bl	d96b6 <strlen>
   d7bfc:	6833      	ldr	r3, [r6, #0]
   d7bfe:	4602      	mov	r2, r0
   d7c00:	68db      	ldr	r3, [r3, #12]
   d7c02:	4669      	mov	r1, sp
   d7c04:	4630      	mov	r0, r6
   d7c06:	4798      	blx	r3
   d7c08:	4604      	mov	r4, r0
    }
    return n;
}
   d7c0a:	4620      	mov	r0, r4
   d7c0c:	b00d      	add	sp, #52	; 0x34
   d7c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7c10 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d7c10:	b510      	push	{r4, lr}
   d7c12:	4b05      	ldr	r3, [pc, #20]	; (d7c28 <_ZN9IPAddressC1Ev+0x18>)
   d7c14:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7c16:	2211      	movs	r2, #17
   d7c18:	f840 3b04 	str.w	r3, [r0], #4
   d7c1c:	2100      	movs	r1, #0
   d7c1e:	f001 fcef 	bl	d9600 <memset>
}
   d7c22:	4620      	mov	r0, r4
   d7c24:	bd10      	pop	{r4, pc}
   d7c26:	bf00      	nop
   d7c28:	000dbfa8 	.word	0x000dbfa8

000d7c2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7c2c:	4603      	mov	r3, r0
   d7c2e:	4a07      	ldr	r2, [pc, #28]	; (d7c4c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7c30:	b510      	push	{r4, lr}
   d7c32:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7c36:	f101 0210 	add.w	r2, r1, #16
   d7c3a:	f851 4b04 	ldr.w	r4, [r1], #4
   d7c3e:	f843 4b04 	str.w	r4, [r3], #4
   d7c42:	4291      	cmp	r1, r2
   d7c44:	d1f9      	bne.n	d7c3a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7c46:	780a      	ldrb	r2, [r1, #0]
   d7c48:	701a      	strb	r2, [r3, #0]
}
   d7c4a:	bd10      	pop	{r4, pc}
   d7c4c:	000dbfa8 	.word	0x000dbfa8

000d7c50 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7c50:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7c52:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7c56:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7c5a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7c5e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7c62:	2304      	movs	r3, #4
   d7c64:	6041      	str	r1, [r0, #4]
   d7c66:	7503      	strb	r3, [r0, #20]
}
   d7c68:	bd10      	pop	{r4, pc}
	...

000d7c6c <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d7c6c:	b513      	push	{r0, r1, r4, lr}
   d7c6e:	4b05      	ldr	r3, [pc, #20]	; (d7c84 <_ZN9IPAddressC1EPKh+0x18>)
   d7c70:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d7c72:	78cb      	ldrb	r3, [r1, #3]
   d7c74:	9300      	str	r3, [sp, #0]
   d7c76:	788b      	ldrb	r3, [r1, #2]
   d7c78:	784a      	ldrb	r2, [r1, #1]
   d7c7a:	7809      	ldrb	r1, [r1, #0]
   d7c7c:	f7ff ffe8 	bl	d7c50 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7c80:	b002      	add	sp, #8
   d7c82:	bd10      	pop	{r4, pc}
   d7c84:	000dbfa8 	.word	0x000dbfa8

000d7c88 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7c88:	4b01      	ldr	r3, [pc, #4]	; (d7c90 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7c8a:	4a02      	ldr	r2, [pc, #8]	; (d7c94 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7c8c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7c8e:	4770      	bx	lr
   d7c90:	2003e61c 	.word	0x2003e61c
   d7c94:	000dbfb4 	.word	0x000dbfb4

000d7c98 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7c98:	2300      	movs	r3, #0
   d7c9a:	6840      	ldr	r0, [r0, #4]
   d7c9c:	461a      	mov	r2, r3
   d7c9e:	f7ff ba49 	b.w	d7134 <network_connect>

000d7ca2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7ca2:	6840      	ldr	r0, [r0, #4]
   d7ca4:	2200      	movs	r2, #0
   d7ca6:	2102      	movs	r1, #2
   d7ca8:	f7ff ba54 	b.w	d7154 <network_disconnect>

000d7cac <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7cac:	2200      	movs	r2, #0
   d7cae:	6840      	ldr	r0, [r0, #4]
   d7cb0:	4611      	mov	r1, r2
   d7cb2:	f7ff ba47 	b.w	d7144 <network_connecting>

000d7cb6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7cb6:	2200      	movs	r2, #0
   d7cb8:	6840      	ldr	r0, [r0, #4]
   d7cba:	4611      	mov	r1, r2
   d7cbc:	f7ff ba52 	b.w	d7164 <network_ready>

000d7cc0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7cc0:	2300      	movs	r3, #0
   d7cc2:	6840      	ldr	r0, [r0, #4]
   d7cc4:	461a      	mov	r2, r3
   d7cc6:	4619      	mov	r1, r3
   d7cc8:	f7ff ba54 	b.w	d7174 <network_on>

000d7ccc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7ccc:	2300      	movs	r3, #0
   d7cce:	6840      	ldr	r0, [r0, #4]
   d7cd0:	461a      	mov	r2, r3
   d7cd2:	4619      	mov	r1, r3
   d7cd4:	f7ff ba56 	b.w	d7184 <network_off>

000d7cd8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d7cd8:	6840      	ldr	r0, [r0, #4]
   d7cda:	2100      	movs	r1, #0
   d7cdc:	f7ff ba7a 	b.w	d71d4 <network_is_on>

000d7ce0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d7ce0:	6840      	ldr	r0, [r0, #4]
   d7ce2:	2100      	movs	r1, #0
   d7ce4:	f7ff ba7e 	b.w	d71e4 <network_is_off>

000d7ce8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7ce8:	6840      	ldr	r0, [r0, #4]
   d7cea:	2200      	movs	r2, #0
   d7cec:	f081 0101 	eor.w	r1, r1, #1
   d7cf0:	f7ff ba50 	b.w	d7194 <network_listen>

000d7cf4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7cf4:	6840      	ldr	r0, [r0, #4]
   d7cf6:	2200      	movs	r2, #0
   d7cf8:	f7ff ba5c 	b.w	d71b4 <network_set_listen_timeout>

000d7cfc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7cfc:	2200      	movs	r2, #0
   d7cfe:	6840      	ldr	r0, [r0, #4]
   d7d00:	4611      	mov	r1, r2
   d7d02:	f7ff ba5f 	b.w	d71c4 <network_get_listen_timeout>

000d7d06 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7d06:	2200      	movs	r2, #0
   d7d08:	6840      	ldr	r0, [r0, #4]
   d7d0a:	4611      	mov	r1, r2
   d7d0c:	f7ff ba4a 	b.w	d71a4 <network_listening>

000d7d10 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7d14:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7d16:	b095      	sub	sp, #84	; 0x54
   d7d18:	4616      	mov	r6, r2
   d7d1a:	460d      	mov	r5, r1
   d7d1c:	4607      	mov	r7, r0
    IPAddress addr;
   d7d1e:	f7ff ff77 	bl	d7c10 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7d22:	4621      	mov	r1, r4
   d7d24:	2218      	movs	r2, #24
   d7d26:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7d28:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7d2a:	f001 fc69 	bl	d9600 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7d2e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7d30:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7d34:	4621      	mov	r1, r4
   d7d36:	466b      	mov	r3, sp
   d7d38:	aa0c      	add	r2, sp, #48	; 0x30
   d7d3a:	4630      	mov	r0, r6
   d7d3c:	f7ff f89c 	bl	d6e78 <netdb_getaddrinfo>
    if (!r) {
   d7d40:	4604      	mov	r4, r0
   d7d42:	2800      	cmp	r0, #0
   d7d44:	d14c      	bne.n	d7de0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7d46:	4602      	mov	r2, r0
   d7d48:	2101      	movs	r1, #1
   d7d4a:	6868      	ldr	r0, [r5, #4]
   d7d4c:	f7ff fa0a 	bl	d7164 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7d50:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7d52:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7d54:	4622      	mov	r2, r4
   d7d56:	6868      	ldr	r0, [r5, #4]
   d7d58:	f7ff fa04 	bl	d7164 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7d5c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7d5e:	4681      	mov	r9, r0
        bool ok = false;
   d7d60:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7d62:	2e00      	cmp	r6, #0
   d7d64:	d03c      	beq.n	d7de0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d7d66:	2900      	cmp	r1, #0
   d7d68:	d13a      	bne.n	d7de0 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7d6a:	6873      	ldr	r3, [r6, #4]
   d7d6c:	2b02      	cmp	r3, #2
   d7d6e:	d003      	beq.n	d7d78 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7d70:	2b0a      	cmp	r3, #10
   d7d72:	d011      	beq.n	d7d98 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7d74:	69f6      	ldr	r6, [r6, #28]
   d7d76:	e7f4      	b.n	d7d62 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7d78:	f1b8 0f00 	cmp.w	r8, #0
   d7d7c:	d00a      	beq.n	d7d94 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7d7e:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d7d80:	a806      	add	r0, sp, #24
   d7d82:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d7d84:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d7d86:	f7ff ff71 	bl	d7c6c <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d7d8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7d8c:	1d3c      	adds	r4, r7, #4
   d7d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7d90:	682b      	ldr	r3, [r5, #0]
   d7d92:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d7d94:	4641      	mov	r1, r8
   d7d96:	e7ed      	b.n	d7d74 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7d98:	f1b9 0f00 	cmp.w	r9, #0
   d7d9c:	d101      	bne.n	d7da2 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7d9e:	4649      	mov	r1, r9
   d7da0:	e7e8      	b.n	d7d74 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7da2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7da4:	2210      	movs	r2, #16
   d7da6:	a801      	add	r0, sp, #4
   d7da8:	f001 fc2a 	bl	d9600 <memset>
                    a.v = 6;
   d7dac:	2306      	movs	r3, #6
   d7dae:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7db2:	ad01      	add	r5, sp, #4
   d7db4:	f104 0308 	add.w	r3, r4, #8
   d7db8:	3418      	adds	r4, #24
   d7dba:	6818      	ldr	r0, [r3, #0]
   d7dbc:	6859      	ldr	r1, [r3, #4]
   d7dbe:	462a      	mov	r2, r5
   d7dc0:	c203      	stmia	r2!, {r0, r1}
   d7dc2:	3308      	adds	r3, #8
   d7dc4:	42a3      	cmp	r3, r4
   d7dc6:	4615      	mov	r5, r2
   d7dc8:	d1f7      	bne.n	d7dba <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d7dca:	a901      	add	r1, sp, #4
   d7dcc:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7dce:	ad07      	add	r5, sp, #28
   d7dd0:	f7ff ff2c 	bl	d7c2c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7dd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7dd6:	1d3c      	adds	r4, r7, #4
   d7dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7dda:	682b      	ldr	r3, [r5, #0]
   d7ddc:	7023      	strb	r3, [r4, #0]
   d7dde:	e7de      	b.n	d7d9e <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7de0:	9800      	ldr	r0, [sp, #0]
   d7de2:	f7ff f841 	bl	d6e68 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7de6:	4638      	mov	r0, r7
   d7de8:	b015      	add	sp, #84	; 0x54
   d7dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7df0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7df0:	4b02      	ldr	r3, [pc, #8]	; (d7dfc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7df2:	4a03      	ldr	r2, [pc, #12]	; (d7e00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7df4:	601a      	str	r2, [r3, #0]
   d7df6:	2200      	movs	r2, #0
   d7df8:	605a      	str	r2, [r3, #4]

} // spark
   d7dfa:	4770      	bx	lr
   d7dfc:	2003e620 	.word	0x2003e620
   d7e00:	000dbfc0 	.word	0x000dbfc0

000d7e04 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7e06:	4606      	mov	r6, r0
   d7e08:	460d      	mov	r5, r1
  size_t n = 0;
   d7e0a:	188f      	adds	r7, r1, r2
   d7e0c:	2400      	movs	r4, #0
  while (size--) {
   d7e0e:	42bd      	cmp	r5, r7
   d7e10:	d00c      	beq.n	d7e2c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7e12:	6833      	ldr	r3, [r6, #0]
   d7e14:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7e18:	689b      	ldr	r3, [r3, #8]
   d7e1a:	4630      	mov	r0, r6
   d7e1c:	4798      	blx	r3
     if (chunk>=0)
   d7e1e:	1e03      	subs	r3, r0, #0
   d7e20:	db01      	blt.n	d7e26 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7e22:	441c      	add	r4, r3
  while (size--) {
   d7e24:	e7f3      	b.n	d7e0e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7e26:	2c00      	cmp	r4, #0
   d7e28:	bf08      	it	eq
   d7e2a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7e2c:	4620      	mov	r0, r4
   d7e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7e30 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d7e30:	b513      	push	{r0, r1, r4, lr}
   d7e32:	4604      	mov	r4, r0
    }
   d7e34:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d7e36:	b159      	cbz	r1, d7e50 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7e38:	9101      	str	r1, [sp, #4]
   d7e3a:	f001 fc3c 	bl	d96b6 <strlen>
   d7e3e:	6823      	ldr	r3, [r4, #0]
   d7e40:	9901      	ldr	r1, [sp, #4]
   d7e42:	68db      	ldr	r3, [r3, #12]
   d7e44:	4602      	mov	r2, r0
   d7e46:	4620      	mov	r0, r4
    }
   d7e48:	b002      	add	sp, #8
   d7e4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7e4e:	4718      	bx	r3
    }
   d7e50:	b002      	add	sp, #8
   d7e52:	bd10      	pop	{r4, pc}

000d7e54 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7e54:	6803      	ldr	r3, [r0, #0]
   d7e56:	689b      	ldr	r3, [r3, #8]
   d7e58:	4718      	bx	r3

000d7e5a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7e5a:	b530      	push	{r4, r5, lr}
   d7e5c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7e5e:	2300      	movs	r3, #0
   d7e60:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7e64:	2a01      	cmp	r2, #1
   d7e66:	bf98      	it	ls
   d7e68:	220a      	movls	r2, #10
   d7e6a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7e6c:	460d      	mov	r5, r1
   d7e6e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d7e72:	fb01 5312 	mls	r3, r1, r2, r5
   d7e76:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7e7a:	2b09      	cmp	r3, #9
   d7e7c:	bf94      	ite	ls
   d7e7e:	3330      	addls	r3, #48	; 0x30
   d7e80:	3337      	addhi	r3, #55	; 0x37
   d7e82:	b2db      	uxtb	r3, r3
  } while(n);
   d7e84:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7e86:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7e8a:	d9ef      	bls.n	d7e6c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7e8c:	4621      	mov	r1, r4
   d7e8e:	f7ff ffcf 	bl	d7e30 <_ZN5Print5writeEPKc>
}
   d7e92:	b00b      	add	sp, #44	; 0x2c
   d7e94:	bd30      	pop	{r4, r5, pc}

000d7e96 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7e96:	b510      	push	{r4, lr}
   d7e98:	4604      	mov	r4, r0
   d7e9a:	f7fc fa11 	bl	d42c0 <_ZNSt14_Function_baseD1Ev>
   d7e9e:	4620      	mov	r0, r4
   d7ea0:	bd10      	pop	{r4, pc}
	...

000d7ea4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7ea4:	4803      	ldr	r0, [pc, #12]	; (d7eb4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7ea6:	4a04      	ldr	r2, [pc, #16]	; (d7eb8 <_GLOBAL__sub_I_RGB+0x14>)
   d7ea8:	4904      	ldr	r1, [pc, #16]	; (d7ebc <_GLOBAL__sub_I_RGB+0x18>)
   d7eaa:	2300      	movs	r3, #0
   d7eac:	6083      	str	r3, [r0, #8]
   d7eae:	f000 bd05 	b.w	d88bc <__aeabi_atexit>
   d7eb2:	bf00      	nop
   d7eb4:	2003e628 	.word	0x2003e628
   d7eb8:	2003dea8 	.word	0x2003dea8
   d7ebc:	000d7e97 	.word	0x000d7e97

000d7ec0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d7ec0:	b510      	push	{r4, lr}
   d7ec2:	4604      	mov	r4, r0
   d7ec4:	4608      	mov	r0, r1
{
    _spi = spi;
   d7ec6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d7ec8:	f7fe ffde 	bl	d6e88 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7ecc:	2300      	movs	r3, #0
   d7ece:	6063      	str	r3, [r4, #4]
}
   d7ed0:	4620      	mov	r0, r4
   d7ed2:	bd10      	pop	{r4, pc}

000d7ed4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7ed4:	b510      	push	{r4, lr}
   d7ed6:	4604      	mov	r4, r0
{
	free(buffer);
   d7ed8:	6800      	ldr	r0, [r0, #0]
   d7eda:	f7ff f993 	bl	d7204 <free>
}
   d7ede:	4620      	mov	r0, r4
   d7ee0:	bd10      	pop	{r4, pc}

000d7ee2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7ee2:	b510      	push	{r4, lr}
   d7ee4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7ee6:	6800      	ldr	r0, [r0, #0]
   d7ee8:	b108      	cbz	r0, d7eee <_ZN6String10invalidateEv+0xc>
   d7eea:	f7ff f98b 	bl	d7204 <free>
	buffer = NULL;
   d7eee:	2300      	movs	r3, #0
	capacity = len = 0;
   d7ef0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d7ef4:	6023      	str	r3, [r4, #0]
}
   d7ef6:	bd10      	pop	{r4, pc}

000d7ef8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7ef8:	b538      	push	{r3, r4, r5, lr}
   d7efa:	4604      	mov	r4, r0
   d7efc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7efe:	6800      	ldr	r0, [r0, #0]
   d7f00:	3101      	adds	r1, #1
   d7f02:	f7ff f987 	bl	d7214 <realloc>
	if (newbuffer) {
   d7f06:	b110      	cbz	r0, d7f0e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7f08:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d7f0c:	2001      	movs	r0, #1
	}
	return 0;
}
   d7f0e:	bd38      	pop	{r3, r4, r5, pc}

000d7f10 <_ZN6String7reserveEj>:
{
   d7f10:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7f12:	6803      	ldr	r3, [r0, #0]
{
   d7f14:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7f16:	b123      	cbz	r3, d7f22 <_ZN6String7reserveEj+0x12>
   d7f18:	6843      	ldr	r3, [r0, #4]
   d7f1a:	428b      	cmp	r3, r1
   d7f1c:	d301      	bcc.n	d7f22 <_ZN6String7reserveEj+0x12>
   d7f1e:	2001      	movs	r0, #1
}
   d7f20:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d7f22:	4620      	mov	r0, r4
   d7f24:	f7ff ffe8 	bl	d7ef8 <_ZN6String12changeBufferEj>
   d7f28:	2800      	cmp	r0, #0
   d7f2a:	d0f9      	beq.n	d7f20 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d7f2c:	68a3      	ldr	r3, [r4, #8]
   d7f2e:	2b00      	cmp	r3, #0
   d7f30:	d1f5      	bne.n	d7f1e <_ZN6String7reserveEj+0xe>
   d7f32:	6822      	ldr	r2, [r4, #0]
   d7f34:	7013      	strb	r3, [r2, #0]
   d7f36:	e7f2      	b.n	d7f1e <_ZN6String7reserveEj+0xe>

000d7f38 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7f3a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d7f3c:	4611      	mov	r1, r2
   d7f3e:	9201      	str	r2, [sp, #4]
{
   d7f40:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d7f42:	f7ff ffe5 	bl	d7f10 <_ZN6String7reserveEj>
   d7f46:	9a01      	ldr	r2, [sp, #4]
   d7f48:	b928      	cbnz	r0, d7f56 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d7f4a:	4620      	mov	r0, r4
   d7f4c:	f7ff ffc9 	bl	d7ee2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d7f50:	4620      	mov	r0, r4
   d7f52:	b003      	add	sp, #12
   d7f54:	bd30      	pop	{r4, r5, pc}
	len = length;
   d7f56:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d7f58:	4629      	mov	r1, r5
   d7f5a:	6820      	ldr	r0, [r4, #0]
   d7f5c:	f001 fb28 	bl	d95b0 <memcpy>
	buffer[len] = 0;
   d7f60:	6822      	ldr	r2, [r4, #0]
   d7f62:	68a3      	ldr	r3, [r4, #8]
   d7f64:	2100      	movs	r1, #0
   d7f66:	54d1      	strb	r1, [r2, r3]
	return *this;
   d7f68:	e7f2      	b.n	d7f50 <_ZN6String4copyEPKcj+0x18>

000d7f6a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d7f6a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d7f6c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d7f6e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d7f72:	4604      	mov	r4, r0
	len = 0;
   d7f74:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7f76:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d7f78:	b141      	cbz	r1, d7f8c <_ZN6StringC1EPKc+0x22>
   d7f7a:	4608      	mov	r0, r1
   d7f7c:	9101      	str	r1, [sp, #4]
   d7f7e:	f001 fb9a 	bl	d96b6 <strlen>
   d7f82:	9901      	ldr	r1, [sp, #4]
   d7f84:	4602      	mov	r2, r0
   d7f86:	4620      	mov	r0, r4
   d7f88:	f7ff ffd6 	bl	d7f38 <_ZN6String4copyEPKcj>
}
   d7f8c:	4620      	mov	r0, r4
   d7f8e:	b002      	add	sp, #8
   d7f90:	bd10      	pop	{r4, pc}

000d7f92 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d7f92:	4288      	cmp	r0, r1
{
   d7f94:	b510      	push	{r4, lr}
   d7f96:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7f98:	d005      	beq.n	d7fa6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7f9a:	680b      	ldr	r3, [r1, #0]
   d7f9c:	b12b      	cbz	r3, d7faa <_ZN6StringaSERKS_+0x18>
   d7f9e:	688a      	ldr	r2, [r1, #8]
   d7fa0:	4619      	mov	r1, r3
   d7fa2:	f7ff ffc9 	bl	d7f38 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d7fa6:	4620      	mov	r0, r4
   d7fa8:	bd10      	pop	{r4, pc}
	else invalidate();
   d7faa:	f7ff ff9a 	bl	d7ee2 <_ZN6String10invalidateEv>
   d7fae:	e7fa      	b.n	d7fa6 <_ZN6StringaSERKS_+0x14>

000d7fb0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d7fb0:	b510      	push	{r4, lr}
	buffer = NULL;
   d7fb2:	2300      	movs	r3, #0
String::String(const String &value)
   d7fb4:	4604      	mov	r4, r0
	capacity = 0;
   d7fb6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d7fba:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7fbc:	7303      	strb	r3, [r0, #12]
	*this = value;
   d7fbe:	f7ff ffe8 	bl	d7f92 <_ZN6StringaSERKS_>
}
   d7fc2:	4620      	mov	r0, r4
   d7fc4:	bd10      	pop	{r4, pc}

000d7fc6 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d7fc6:	b570      	push	{r4, r5, r6, lr}
   d7fc8:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d7fca:	460e      	mov	r6, r1
   d7fcc:	b909      	cbnz	r1, d7fd2 <_ZN6String6concatEPKcj+0xc>
   d7fce:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d7fd0:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d7fd2:	b16a      	cbz	r2, d7ff0 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d7fd4:	6884      	ldr	r4, [r0, #8]
   d7fd6:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d7fd8:	4621      	mov	r1, r4
   d7fda:	f7ff ff99 	bl	d7f10 <_ZN6String7reserveEj>
   d7fde:	2800      	cmp	r0, #0
   d7fe0:	d0f5      	beq.n	d7fce <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d7fe2:	6828      	ldr	r0, [r5, #0]
   d7fe4:	68ab      	ldr	r3, [r5, #8]
   d7fe6:	4631      	mov	r1, r6
   d7fe8:	4418      	add	r0, r3
   d7fea:	f001 fb3f 	bl	d966c <strcpy>
	len = newlen;
   d7fee:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d7ff0:	2001      	movs	r0, #1
   d7ff2:	e7ed      	b.n	d7fd0 <_ZN6String6concatEPKcj+0xa>

000d7ff4 <_ZplRK15StringSumHelperPKc>:
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d7ff4:	b513      	push	{r0, r1, r4, lr}
   d7ff6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d7ff8:	b929      	cbnz	r1, d8006 <_ZplRK15StringSumHelperPKc+0x12>
   d7ffa:	4620      	mov	r0, r4
   d7ffc:	f7ff ff71 	bl	d7ee2 <_ZN6String10invalidateEv>
	return a;
}
   d8000:	4620      	mov	r0, r4
   d8002:	b002      	add	sp, #8
   d8004:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d8006:	4608      	mov	r0, r1
   d8008:	9101      	str	r1, [sp, #4]
   d800a:	f001 fb54 	bl	d96b6 <strlen>
   d800e:	9901      	ldr	r1, [sp, #4]
   d8010:	4602      	mov	r2, r0
   d8012:	4620      	mov	r0, r4
   d8014:	f7ff ffd7 	bl	d7fc6 <_ZN6String6concatEPKcj>
   d8018:	2800      	cmp	r0, #0
   d801a:	d0ee      	beq.n	d7ffa <_ZplRK15StringSumHelperPKc+0x6>
   d801c:	e7f0      	b.n	d8000 <_ZplRK15StringSumHelperPKc+0xc>

000d801e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d801e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d8020:	6882      	ldr	r2, [r0, #8]
   d8022:	b93a      	cbnz	r2, d8034 <_ZNK6String6equalsEPKc+0x16>
   d8024:	b121      	cbz	r1, d8030 <_ZNK6String6equalsEPKc+0x12>
   d8026:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d8028:	fab0 f080 	clz	r0, r0
   d802c:	0940      	lsrs	r0, r0, #5
   d802e:	e000      	b.n	d8032 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d8030:	2001      	movs	r0, #1
}
   d8032:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d8034:	6800      	ldr	r0, [r0, #0]
   d8036:	b909      	cbnz	r1, d803c <_ZNK6String6equalsEPKc+0x1e>
   d8038:	7800      	ldrb	r0, [r0, #0]
   d803a:	e7f5      	b.n	d8028 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d803c:	f001 fb0c 	bl	d9658 <strcmp>
   d8040:	e7f2      	b.n	d8028 <_ZNK6String6equalsEPKc+0xa>
	...

000d8044 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d8044:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d8046:	6800      	ldr	r0, [r0, #0]
   d8048:	b140      	cbz	r0, d805c <_ZNK6String7toFloatEv+0x18>
   d804a:	f001 fa89 	bl	d9560 <atof>
   d804e:	ec51 0b10 	vmov	r0, r1, d0
   d8052:	f001 f9f1 	bl	d9438 <__aeabi_d2f>
   d8056:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d805a:	bd08      	pop	{r3, pc}
	return 0;
   d805c:	ed9f 0a01 	vldr	s0, [pc, #4]	; d8064 <_ZNK6String7toFloatEv+0x20>
   d8060:	e7fb      	b.n	d805a <_ZNK6String7toFloatEv+0x16>
   d8062:	bf00      	nop
   d8064:	00000000 	.word	0x00000000

000d8068 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d8068:	b507      	push	{r0, r1, r2, lr}
   d806a:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d806c:	2100      	movs	r1, #0
{
   d806e:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d8070:	9100      	str	r1, [sp, #0]
   d8072:	2001      	movs	r0, #1
   d8074:	218c      	movs	r1, #140	; 0x8c
   d8076:	f7fe ffeb 	bl	d7050 <system_reset>
}
   d807a:	b003      	add	sp, #12
   d807c:	f85d fb04 	ldr.w	pc, [sp], #4

000d8080 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d8080:	4601      	mov	r1, r0
    reset(0, flags);
   d8082:	2000      	movs	r0, #0
   d8084:	f7ff bff0 	b.w	d8068 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d8088 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d8088:	2000      	movs	r0, #0
   d808a:	f7ff bff9 	b.w	d8080 <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d8090 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d8090:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d8092:	4b09      	ldr	r3, [pc, #36]	; (d80b8 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d8094:	4c09      	ldr	r4, [pc, #36]	; (d80bc <_GLOBAL__sub_I_System+0x2c>)
   d8096:	2202      	movs	r2, #2
   d8098:	2000      	movs	r0, #0
   d809a:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d809c:	4b08      	ldr	r3, [pc, #32]	; (d80c0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d809e:	6020      	str	r0, [r4, #0]
   d80a0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d80a2:	71a0      	strb	r0, [r4, #6]
   d80a4:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d80a6:	f7fe ff87 	bl	d6fb8 <set_system_mode>
SystemClass System;
   d80aa:	4620      	mov	r0, r4
   d80ac:	4a05      	ldr	r2, [pc, #20]	; (d80c4 <_GLOBAL__sub_I_System+0x34>)
   d80ae:	4906      	ldr	r1, [pc, #24]	; (d80c8 <_GLOBAL__sub_I_System+0x38>)
   d80b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d80b4:	f000 bc02 	b.w	d88bc <__aeabi_atexit>
   d80b8:	2003e644 	.word	0x2003e644
   d80bc:	2003e638 	.word	0x2003e638
   d80c0:	ffff0000 	.word	0xffff0000
   d80c4:	2003dea8 	.word	0x2003dea8
   d80c8:	000d4257 	.word	0x000d4257

000d80cc <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d80cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d80d0:	4a15      	ldr	r2, [pc, #84]	; (d8128 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d80d2:	f8df 8060 	ldr.w	r8, [pc, #96]	; d8134 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d80d6:	e9d2 3200 	ldrd	r3, r2, [r2]
   d80da:	18c0      	adds	r0, r0, r3
   d80dc:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d80e0:	4a12      	ldr	r2, [pc, #72]	; (d812c <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d80e2:	e9d2 3200 	ldrd	r3, r2, [r2]
   d80e6:	18c6      	adds	r6, r0, r3
   d80e8:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d80ec:	e9d8 2300 	ldrd	r2, r3, [r8]
   d80f0:	42bb      	cmp	r3, r7
   d80f2:	bf08      	it	eq
   d80f4:	42b2      	cmpeq	r2, r6
{
   d80f6:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d80f8:	d013      	beq.n	d8122 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d80fa:	a903      	add	r1, sp, #12
   d80fc:	4668      	mov	r0, sp
   d80fe:	e9cd 6700 	strd	r6, r7, [sp]
   d8102:	f7ff f8c7 	bl	d7294 <localtime_r>
	calendar_time.tm_year += 1900;
   d8106:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8108:	4d09      	ldr	r5, [pc, #36]	; (d8130 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d810a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d810e:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d8110:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d8118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d811a:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d811e:	6823      	ldr	r3, [r4, #0]
   d8120:	602b      	str	r3, [r5, #0]
    }
}
   d8122:	b00c      	add	sp, #48	; 0x30
   d8124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8128:	2003e680 	.word	0x2003e680
   d812c:	2003e678 	.word	0x2003e678
   d8130:	2003e650 	.word	0x2003e650
   d8134:	2003e688 	.word	0x2003e688

000d8138 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d8138:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d813a:	2000      	movs	r0, #0
   d813c:	f7fe ffda 	bl	d70f4 <spark_sync_time_pending>
   d8140:	b128      	cbz	r0, d814e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8142:	f7fe ffaf 	bl	d70a4 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8146:	f080 0001 	eor.w	r0, r0, #1
   d814a:	b2c0      	uxtb	r0, r0
    }
   d814c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d814e:	2001      	movs	r0, #1
   d8150:	e7fc      	b.n	d814c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d8152 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d8152:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d8154:	4602      	mov	r2, r0
   d8156:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d8158:	4668      	mov	r0, sp
    struct timeval tv = {
   d815a:	2100      	movs	r1, #0
    };
   d815c:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d8160:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d8164:	f7fe fdd0 	bl	d6d08 <hal_rtc_set_time>
   d8168:	4602      	mov	r2, r0
   d816a:	b910      	cbnz	r0, d8172 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d816c:	4601      	mov	r1, r0
   d816e:	f7fe ff53 	bl	d7018 <system_notify_time_changed>
    }
}
   d8172:	b005      	add	sp, #20
   d8174:	f85d fb04 	ldr.w	pc, [sp], #4

000d8178 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d8178:	b530      	push	{r4, r5, lr}
   d817a:	4604      	mov	r4, r0
    t += time_zone_cache;
   d817c:	4818      	ldr	r0, [pc, #96]	; (d81e0 <_ZN9TimeClass7timeStrEx+0x68>)
   d817e:	e9d0 1000 	ldrd	r1, r0, [r0]
   d8182:	1852      	adds	r2, r2, r1
   d8184:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d8188:	4816      	ldr	r0, [pc, #88]	; (d81e4 <_ZN9TimeClass7timeStrEx+0x6c>)
   d818a:	e9d0 1000 	ldrd	r1, r0, [r0]
   d818e:	1852      	adds	r2, r2, r1
{
   d8190:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d8192:	eb40 0303 	adc.w	r3, r0, r3
   d8196:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d819a:	2224      	movs	r2, #36	; 0x24
   d819c:	eb0d 0002 	add.w	r0, sp, r2
   d81a0:	2100      	movs	r1, #0
   d81a2:	f001 fa2d 	bl	d9600 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d81a6:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d81a8:	a909      	add	r1, sp, #36	; 0x24
   d81aa:	4668      	mov	r0, sp
   d81ac:	f7ff f872 	bl	d7294 <localtime_r>
    char ascstr[26] = {};
   d81b0:	2216      	movs	r2, #22
   d81b2:	4629      	mov	r1, r5
   d81b4:	a803      	add	r0, sp, #12
   d81b6:	9502      	str	r5, [sp, #8]
   d81b8:	f001 fa22 	bl	d9600 <memset>
    asctime_r(&calendar_time, ascstr);
   d81bc:	a902      	add	r1, sp, #8
   d81be:	a809      	add	r0, sp, #36	; 0x24
   d81c0:	f001 f9a8 	bl	d9514 <asctime_r>
    int len = strlen(ascstr);
   d81c4:	a802      	add	r0, sp, #8
   d81c6:	f001 fa76 	bl	d96b6 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d81ca:	ab12      	add	r3, sp, #72	; 0x48
   d81cc:	4418      	add	r0, r3
    return String(ascstr);
   d81ce:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d81d0:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d81d4:	4620      	mov	r0, r4
   d81d6:	f7ff fec8 	bl	d7f6a <_ZN6StringC1EPKc>
}
   d81da:	4620      	mov	r0, r4
   d81dc:	b013      	add	sp, #76	; 0x4c
   d81de:	bd30      	pop	{r4, r5, pc}
   d81e0:	2003e680 	.word	0x2003e680
   d81e4:	2003e678 	.word	0x2003e678

000d81e8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d81e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d81ec:	b0a5      	sub	sp, #148	; 0x94
   d81ee:	4607      	mov	r7, r0
   d81f0:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d81f2:	a814      	add	r0, sp, #80	; 0x50
{
   d81f4:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d81f6:	223f      	movs	r2, #63	; 0x3f
{
   d81f8:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d81fa:	f001 fa76 	bl	d96ea <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d81fe:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d8200:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d8202:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d8206:	f001 fa56 	bl	d96b6 <strlen>
   d820a:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d820c:	bb5d      	cbnz	r5, d8266 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d820e:	492a      	ldr	r1, [pc, #168]	; (d82b8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d8210:	a803      	add	r0, sp, #12
   d8212:	f001 fa2b 	bl	d966c <strcpy>
   d8216:	ae14      	add	r6, sp, #80	; 0x50
{
   d8218:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d821a:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d821e:	45ab      	cmp	fp, r5
   d8220:	d936      	bls.n	d8290 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d8222:	46b1      	mov	r9, r6
   d8224:	f105 0a01 	add.w	sl, r5, #1
   d8228:	f819 3b01 	ldrb.w	r3, [r9], #1
   d822c:	2b25      	cmp	r3, #37	; 0x25
   d822e:	d117      	bne.n	d8260 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d8230:	7873      	ldrb	r3, [r6, #1]
   d8232:	2b7a      	cmp	r3, #122	; 0x7a
   d8234:	d114      	bne.n	d8260 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d8236:	a803      	add	r0, sp, #12
   d8238:	f001 fa3d 	bl	d96b6 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d823c:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d823e:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d8240:	1828      	adds	r0, r5, r0
   d8242:	4418      	add	r0, r3
   d8244:	ebab 0205 	sub.w	r2, fp, r5
   d8248:	1cb1      	adds	r1, r6, #2
   d824a:	f001 f9b1 	bl	d95b0 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d824e:	4622      	mov	r2, r4
   d8250:	a903      	add	r1, sp, #12
   d8252:	4630      	mov	r0, r6
   d8254:	f001 f9ac 	bl	d95b0 <memcpy>
            len = strlen(format_str);
   d8258:	a814      	add	r0, sp, #80	; 0x50
   d825a:	f001 fa2c 	bl	d96b6 <strlen>
   d825e:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d8260:	464e      	mov	r6, r9
   d8262:	4655      	mov	r5, sl
   d8264:	e7d9      	b.n	d821a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d8266:	213c      	movs	r1, #60	; 0x3c
   d8268:	fb95 f3f1 	sdiv	r3, r5, r1
   d826c:	2b00      	cmp	r3, #0
   d826e:	bfb8      	it	lt
   d8270:	425b      	neglt	r3, r3
   d8272:	fbb3 f2f1 	udiv	r2, r3, r1
   d8276:	fb01 3312 	mls	r3, r1, r2, r3
   d827a:	9300      	str	r3, [sp, #0]
   d827c:	4a0f      	ldr	r2, [pc, #60]	; (d82bc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d827e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d8282:	2110      	movs	r1, #16
   d8284:	a803      	add	r0, sp, #12
   d8286:	fb95 f3f3 	sdiv	r3, r5, r3
   d828a:	f7fe ffd3 	bl	d7234 <snprintf>
   d828e:	e7c2      	b.n	d8216 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d8290:	2100      	movs	r1, #0
   d8292:	222e      	movs	r2, #46	; 0x2e
   d8294:	a808      	add	r0, sp, #32
   d8296:	9107      	str	r1, [sp, #28]
   d8298:	f001 f9b2 	bl	d9600 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d829c:	4643      	mov	r3, r8
   d829e:	aa14      	add	r2, sp, #80	; 0x50
   d82a0:	2132      	movs	r1, #50	; 0x32
   d82a2:	a807      	add	r0, sp, #28
   d82a4:	f7fe ffee 	bl	d7284 <strftime>
    return String(buf);
   d82a8:	a907      	add	r1, sp, #28
   d82aa:	4638      	mov	r0, r7
   d82ac:	f7ff fe5d 	bl	d7f6a <_ZN6StringC1EPKc>
}
   d82b0:	4638      	mov	r0, r7
   d82b2:	b025      	add	sp, #148	; 0x94
   d82b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d82b8:	000dbff4 	.word	0x000dbff4
   d82bc:	000dbff6 	.word	0x000dbff6

000d82c0 <_ZN9TimeClass6formatExPKc>:
{
   d82c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d82c2:	b08d      	sub	sp, #52	; 0x34
   d82c4:	e9cd 2300 	strd	r2, r3, [sp]
   d82c8:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d82ca:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d82cc:	b915      	cbnz	r5, d82d4 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d82ce:	4b19      	ldr	r3, [pc, #100]	; (d8334 <_ZN9TimeClass6formatExPKc+0x74>)
   d82d0:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d82d2:	b12d      	cbz	r5, d82e0 <_ZN9TimeClass6formatExPKc+0x20>
   d82d4:	4b18      	ldr	r3, [pc, #96]	; (d8338 <_ZN9TimeClass6formatExPKc+0x78>)
   d82d6:	4628      	mov	r0, r5
   d82d8:	6819      	ldr	r1, [r3, #0]
   d82da:	f001 f9bd 	bl	d9658 <strcmp>
   d82de:	b938      	cbnz	r0, d82f0 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d82e0:	e9dd 2300 	ldrd	r2, r3, [sp]
   d82e4:	4620      	mov	r0, r4
   d82e6:	f7ff ff47 	bl	d8178 <_ZN9TimeClass7timeStrEx>
}
   d82ea:	4620      	mov	r0, r4
   d82ec:	b00d      	add	sp, #52	; 0x34
   d82ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d82f0:	4e12      	ldr	r6, [pc, #72]	; (d833c <_ZN9TimeClass6formatExPKc+0x7c>)
   d82f2:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d82f4:	4f12      	ldr	r7, [pc, #72]	; (d8340 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d82f6:	e9d6 3200 	ldrd	r3, r2, [r6]
   d82fa:	185b      	adds	r3, r3, r1
   d82fc:	9901      	ldr	r1, [sp, #4]
   d82fe:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d8302:	e9d7 0100 	ldrd	r0, r1, [r7]
   d8306:	181b      	adds	r3, r3, r0
   d8308:	eb41 0202 	adc.w	r2, r1, r2
   d830c:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d8310:	2100      	movs	r1, #0
   d8312:	2224      	movs	r2, #36	; 0x24
   d8314:	a803      	add	r0, sp, #12
   d8316:	f001 f973 	bl	d9600 <memset>
    localtime_r(&t, &calendar_time);
   d831a:	a903      	add	r1, sp, #12
   d831c:	4668      	mov	r0, sp
   d831e:	f7fe ffb9 	bl	d7294 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d8322:	6832      	ldr	r2, [r6, #0]
   d8324:	683b      	ldr	r3, [r7, #0]
   d8326:	a903      	add	r1, sp, #12
   d8328:	4413      	add	r3, r2
   d832a:	4620      	mov	r0, r4
   d832c:	462a      	mov	r2, r5
   d832e:	f7ff ff5b 	bl	d81e8 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d8332:	e7da      	b.n	d82ea <_ZN9TimeClass6formatExPKc+0x2a>
   d8334:	2003e64c 	.word	0x2003e64c
   d8338:	2003dcc8 	.word	0x2003dcc8
   d833c:	2003e680 	.word	0x2003e680
   d8340:	2003e678 	.word	0x2003e678

000d8344 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d8344:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d8346:	2000      	movs	r0, #0
   d8348:	f7fe fcc6 	bl	d6cd8 <hal_rtc_time_is_valid>
    if (rtcstate)
   d834c:	4604      	mov	r4, r0
   d834e:	b9a0      	cbnz	r0, d837a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8350:	f7fe fe2a 	bl	d6fa8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8354:	2801      	cmp	r0, #1
   d8356:	d110      	bne.n	d837a <_ZN9TimeClass7isValidEv+0x36>
   d8358:	4620      	mov	r0, r4
   d835a:	f7fe fe55 	bl	d7008 <system_thread_get_state>
   d835e:	b960      	cbnz	r0, d837a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d8360:	f7ff feea 	bl	d8138 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8364:	b910      	cbnz	r0, d836c <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d8366:	f7fe fe8d 	bl	d7084 <spark_process>
        while (_while() && !_condition()) {
   d836a:	e7f9      	b.n	d8360 <_ZN9TimeClass7isValidEv+0x1c>
   d836c:	f7ff fee4 	bl	d8138 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d8370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d8374:	2000      	movs	r0, #0
   d8376:	f7fe bcaf 	b.w	d6cd8 <hal_rtc_time_is_valid>
}
   d837a:	4620      	mov	r0, r4
   d837c:	bd10      	pop	{r4, pc}

000d837e <_ZN9TimeClass3nowEv>:
{
   d837e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d8380:	f7ff ffe0 	bl	d8344 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d8384:	2210      	movs	r2, #16
   d8386:	2100      	movs	r1, #0
   d8388:	4668      	mov	r0, sp
   d838a:	f001 f939 	bl	d9600 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d838e:	2100      	movs	r1, #0
   d8390:	4668      	mov	r0, sp
   d8392:	f7fe fcb1 	bl	d6cf8 <hal_rtc_get_time>
}
   d8396:	9800      	ldr	r0, [sp, #0]
   d8398:	b005      	add	sp, #20
   d839a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d83a0 <_ZN9TimeClass4hourEv>:
{
   d83a0:	b508      	push	{r3, lr}
	return hour(now());
   d83a2:	f7ff ffec 	bl	d837e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d83a6:	17c1      	asrs	r1, r0, #31
   d83a8:	f7ff fe90 	bl	d80cc <_ZL22Refresh_UnixTime_Cachex>
}
   d83ac:	4b01      	ldr	r3, [pc, #4]	; (d83b4 <_ZN9TimeClass4hourEv+0x14>)
   d83ae:	6898      	ldr	r0, [r3, #8]
   d83b0:	bd08      	pop	{r3, pc}
   d83b2:	bf00      	nop
   d83b4:	2003e650 	.word	0x2003e650

000d83b8 <_ZN9TimeClass4yearEv>:
{
   d83b8:	b508      	push	{r3, lr}
	return year(now());
   d83ba:	f7ff ffe0 	bl	d837e <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d83be:	17c1      	asrs	r1, r0, #31
   d83c0:	f7ff fe84 	bl	d80cc <_ZL22Refresh_UnixTime_Cachex>
}
   d83c4:	4b01      	ldr	r3, [pc, #4]	; (d83cc <_ZN9TimeClass4yearEv+0x14>)
   d83c6:	6958      	ldr	r0, [r3, #20]
   d83c8:	bd08      	pop	{r3, pc}
   d83ca:	bf00      	nop
   d83cc:	2003e650 	.word	0x2003e650

000d83d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d83d0:	4b02      	ldr	r3, [pc, #8]	; (d83dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d83d2:	681a      	ldr	r2, [r3, #0]
   d83d4:	4b02      	ldr	r3, [pc, #8]	; (d83e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d83d6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d83d8:	4770      	bx	lr
   d83da:	bf00      	nop
   d83dc:	2003dcc8 	.word	0x2003dcc8
   d83e0:	2003e64c 	.word	0x2003e64c

000d83e4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d83e4:	4770      	bx	lr

000d83e6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d83e6:	7441      	strb	r1, [r0, #17]
}
   d83e8:	4770      	bx	lr

000d83ea <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d83ea:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d83ec:	7c00      	ldrb	r0, [r0, #16]
   d83ee:	f7fe fd93 	bl	d6f18 <hal_usart_available_data_for_write>
}
   d83f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d83f6:	bd08      	pop	{r3, pc}

000d83f8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d83f8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d83fa:	7c00      	ldrb	r0, [r0, #16]
   d83fc:	f7fe fd64 	bl	d6ec8 <hal_usart_available>
}
   d8400:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8404:	bd08      	pop	{r3, pc}

000d8406 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d8406:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d8408:	7c00      	ldrb	r0, [r0, #16]
   d840a:	f7fe fd6d 	bl	d6ee8 <hal_usart_peek>
}
   d840e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8412:	bd08      	pop	{r3, pc}

000d8414 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d8414:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d8416:	7c00      	ldrb	r0, [r0, #16]
   d8418:	f7fe fd5e 	bl	d6ed8 <hal_usart_read>
}
   d841c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8420:	bd08      	pop	{r3, pc}

000d8422 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d8422:	7c00      	ldrb	r0, [r0, #16]
   d8424:	f7fe bd68 	b.w	d6ef8 <hal_usart_flush>

000d8428 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d8428:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d842a:	7c45      	ldrb	r5, [r0, #17]
{
   d842c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d842e:	b12d      	cbz	r5, d843c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d8430:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d8432:	b003      	add	sp, #12
   d8434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d8438:	f7fe bd3e 	b.w	d6eb8 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d843c:	7c00      	ldrb	r0, [r0, #16]
   d843e:	9101      	str	r1, [sp, #4]
   d8440:	f7fe fd6a 	bl	d6f18 <hal_usart_available_data_for_write>
   d8444:	2800      	cmp	r0, #0
   d8446:	9901      	ldr	r1, [sp, #4]
   d8448:	dcf2      	bgt.n	d8430 <_ZN11USARTSerial5writeEh+0x8>
}
   d844a:	4628      	mov	r0, r5
   d844c:	b003      	add	sp, #12
   d844e:	bd30      	pop	{r4, r5, pc}

000d8450 <_ZN11USARTSerialD0Ev>:
   d8450:	b510      	push	{r4, lr}
   d8452:	2114      	movs	r1, #20
   d8454:	4604      	mov	r4, r0
   d8456:	f000 fa36 	bl	d88c6 <_ZdlPvj>
   d845a:	4620      	mov	r0, r4
   d845c:	bd10      	pop	{r4, pc}
	...

000d8460 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d8460:	b510      	push	{r4, lr}
   d8462:	f04f 0c00 	mov.w	ip, #0
   d8466:	4604      	mov	r4, r0
   d8468:	4608      	mov	r0, r1
   d846a:	4611      	mov	r1, r2
   d846c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8470:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d8474:	4a04      	ldr	r2, [pc, #16]	; (d8488 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d8476:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d8478:	2201      	movs	r2, #1
  _serial = serial;
   d847a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d847c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d847e:	461a      	mov	r2, r3
   d8480:	f7fe fd12 	bl	d6ea8 <hal_usart_init>
}
   d8484:	4620      	mov	r0, r4
   d8486:	bd10      	pop	{r4, pc}
   d8488:	000dc028 	.word	0x000dc028

000d848c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d848c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d848e:	4c0e      	ldr	r4, [pc, #56]	; (d84c8 <_Z22__fetch_global_Serial1v+0x3c>)
   d8490:	7821      	ldrb	r1, [r4, #0]
   d8492:	f3bf 8f5b 	dmb	ish
   d8496:	f011 0101 	ands.w	r1, r1, #1
   d849a:	d112      	bne.n	d84c2 <_Z22__fetch_global_Serial1v+0x36>
   d849c:	4620      	mov	r0, r4
   d849e:	9101      	str	r1, [sp, #4]
   d84a0:	f7fb fe0a 	bl	d40b8 <__cxa_guard_acquire>
   d84a4:	9901      	ldr	r1, [sp, #4]
   d84a6:	b160      	cbz	r0, d84c2 <_Z22__fetch_global_Serial1v+0x36>
   d84a8:	4a08      	ldr	r2, [pc, #32]	; (d84cc <_Z22__fetch_global_Serial1v+0x40>)
   d84aa:	4b09      	ldr	r3, [pc, #36]	; (d84d0 <_Z22__fetch_global_Serial1v+0x44>)
   d84ac:	4809      	ldr	r0, [pc, #36]	; (d84d4 <_Z22__fetch_global_Serial1v+0x48>)
   d84ae:	f7ff ffd7 	bl	d8460 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d84b2:	4620      	mov	r0, r4
   d84b4:	f7fb fe05 	bl	d40c2 <__cxa_guard_release>
   d84b8:	4a07      	ldr	r2, [pc, #28]	; (d84d8 <_Z22__fetch_global_Serial1v+0x4c>)
   d84ba:	4908      	ldr	r1, [pc, #32]	; (d84dc <_Z22__fetch_global_Serial1v+0x50>)
   d84bc:	4805      	ldr	r0, [pc, #20]	; (d84d4 <_Z22__fetch_global_Serial1v+0x48>)
   d84be:	f000 f9fd 	bl	d88bc <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d84c2:	4804      	ldr	r0, [pc, #16]	; (d84d4 <_Z22__fetch_global_Serial1v+0x48>)
   d84c4:	b002      	add	sp, #8
   d84c6:	bd10      	pop	{r4, pc}
   d84c8:	2003e690 	.word	0x2003e690
   d84cc:	2003e694 	.word	0x2003e694
   d84d0:	2003e718 	.word	0x2003e718
   d84d4:	2003e79c 	.word	0x2003e79c
   d84d8:	2003dea8 	.word	0x2003dea8
   d84dc:	000d83e5 	.word	0x000d83e5

000d84e0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d84e0:	7441      	strb	r1, [r0, #17]
}
   d84e2:	4770      	bx	lr

000d84e4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d84e4:	4770      	bx	lr

000d84e6 <_ZN9USBSerial4readEv>:
{
   d84e6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d84e8:	2100      	movs	r1, #0
   d84ea:	7c00      	ldrb	r0, [r0, #16]
   d84ec:	f7fe fd34 	bl	d6f58 <HAL_USB_USART_Receive_Data>
}
   d84f0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d84f4:	bd08      	pop	{r3, pc}

000d84f6 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d84f6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d84f8:	2101      	movs	r1, #1
   d84fa:	7c00      	ldrb	r0, [r0, #16]
   d84fc:	f7fe fd2c 	bl	d6f58 <HAL_USB_USART_Receive_Data>
}
   d8500:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8504:	bd08      	pop	{r3, pc}

000d8506 <_ZN9USBSerial17availableForWriteEv>:
{
   d8506:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8508:	7c00      	ldrb	r0, [r0, #16]
   d850a:	f7fe fd1d 	bl	d6f48 <HAL_USB_USART_Available_Data_For_Write>
}
   d850e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8512:	bd08      	pop	{r3, pc}

000d8514 <_ZN9USBSerial9availableEv>:
{
   d8514:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8516:	7c00      	ldrb	r0, [r0, #16]
   d8518:	f7fe fd0e 	bl	d6f38 <HAL_USB_USART_Available_Data>
}
   d851c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8520:	bd08      	pop	{r3, pc}

000d8522 <_ZN9USBSerial5writeEh>:
{
   d8522:	b513      	push	{r0, r1, r4, lr}
   d8524:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8526:	7c00      	ldrb	r0, [r0, #16]
{
   d8528:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d852a:	f7fe fd0d 	bl	d6f48 <HAL_USB_USART_Available_Data_For_Write>
   d852e:	2800      	cmp	r0, #0
   d8530:	9901      	ldr	r1, [sp, #4]
   d8532:	dc01      	bgt.n	d8538 <_ZN9USBSerial5writeEh+0x16>
   d8534:	7c60      	ldrb	r0, [r4, #17]
   d8536:	b120      	cbz	r0, d8542 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8538:	7c20      	ldrb	r0, [r4, #16]
   d853a:	f7fe fd15 	bl	d6f68 <HAL_USB_USART_Send_Data>
   d853e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d8542:	b002      	add	sp, #8
   d8544:	bd10      	pop	{r4, pc}

000d8546 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d8546:	7c00      	ldrb	r0, [r0, #16]
   d8548:	f7fe bd16 	b.w	d6f78 <HAL_USB_USART_Flush_Data>

000d854c <_ZN9USBSerialD0Ev>:
   d854c:	b510      	push	{r4, lr}
   d854e:	2114      	movs	r1, #20
   d8550:	4604      	mov	r4, r0
   d8552:	f000 f9b8 	bl	d88c6 <_ZdlPvj>
   d8556:	4620      	mov	r0, r4
   d8558:	bd10      	pop	{r4, pc}
	...

000d855c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d855c:	b510      	push	{r4, lr}
   d855e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8562:	4604      	mov	r4, r0
   d8564:	4608      	mov	r0, r1
   d8566:	2100      	movs	r1, #0
   d8568:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d856c:	4b04      	ldr	r3, [pc, #16]	; (d8580 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d856e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d8570:	2301      	movs	r3, #1
  _serial = serial;
   d8572:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8574:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d8576:	4611      	mov	r1, r2
   d8578:	f7fe fcd6 	bl	d6f28 <HAL_USB_USART_Init>
}
   d857c:	4620      	mov	r0, r4
   d857e:	bd10      	pop	{r4, pc}
   d8580:	000dc058 	.word	0x000dc058

000d8584 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8584:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8586:	2214      	movs	r2, #20
{
   d8588:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d858a:	2100      	movs	r1, #0
   d858c:	f001 f838 	bl	d9600 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8590:	4620      	mov	r0, r4
   d8592:	bd10      	pop	{r4, pc}

000d8594 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8594:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8596:	4c10      	ldr	r4, [pc, #64]	; (d85d8 <_Z16_fetch_usbserialv+0x44>)
{
   d8598:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d859a:	a803      	add	r0, sp, #12
   d859c:	f7ff fff2 	bl	d8584 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d85a0:	7821      	ldrb	r1, [r4, #0]
   d85a2:	f3bf 8f5b 	dmb	ish
   d85a6:	f011 0101 	ands.w	r1, r1, #1
   d85aa:	d111      	bne.n	d85d0 <_Z16_fetch_usbserialv+0x3c>
   d85ac:	4620      	mov	r0, r4
   d85ae:	9101      	str	r1, [sp, #4]
   d85b0:	f7fb fd82 	bl	d40b8 <__cxa_guard_acquire>
   d85b4:	9901      	ldr	r1, [sp, #4]
   d85b6:	b158      	cbz	r0, d85d0 <_Z16_fetch_usbserialv+0x3c>
   d85b8:	aa03      	add	r2, sp, #12
   d85ba:	4808      	ldr	r0, [pc, #32]	; (d85dc <_Z16_fetch_usbserialv+0x48>)
   d85bc:	f7ff ffce 	bl	d855c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d85c0:	4620      	mov	r0, r4
   d85c2:	f7fb fd7e 	bl	d40c2 <__cxa_guard_release>
   d85c6:	4a06      	ldr	r2, [pc, #24]	; (d85e0 <_Z16_fetch_usbserialv+0x4c>)
   d85c8:	4906      	ldr	r1, [pc, #24]	; (d85e4 <_Z16_fetch_usbserialv+0x50>)
   d85ca:	4804      	ldr	r0, [pc, #16]	; (d85dc <_Z16_fetch_usbserialv+0x48>)
   d85cc:	f000 f976 	bl	d88bc <__aeabi_atexit>
	return _usbserial;
}
   d85d0:	4802      	ldr	r0, [pc, #8]	; (d85dc <_Z16_fetch_usbserialv+0x48>)
   d85d2:	b008      	add	sp, #32
   d85d4:	bd10      	pop	{r4, pc}
   d85d6:	bf00      	nop
   d85d8:	2003e7b0 	.word	0x2003e7b0
   d85dc:	2003e7b4 	.word	0x2003e7b4
   d85e0:	2003dea8 	.word	0x2003dea8
   d85e4:	000d84e5 	.word	0x000d84e5

000d85e8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d85e8:	4b01      	ldr	r3, [pc, #4]	; (d85f0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d85ea:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d85ec:	4770      	bx	lr
   d85ee:	bf00      	nop
   d85f0:	2003dcd0 	.word	0x2003dcd0

000d85f4 <serialEventRun>:
{
   d85f4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d85f6:	4b0b      	ldr	r3, [pc, #44]	; (d8624 <serialEventRun+0x30>)
   d85f8:	b143      	cbz	r3, d860c <serialEventRun+0x18>
   d85fa:	f7ff ffcb 	bl	d8594 <_Z16_fetch_usbserialv>
   d85fe:	6803      	ldr	r3, [r0, #0]
   d8600:	691b      	ldr	r3, [r3, #16]
   d8602:	4798      	blx	r3
   d8604:	2800      	cmp	r0, #0
   d8606:	dd01      	ble.n	d860c <serialEventRun+0x18>
        serialEvent();
   d8608:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d860c:	4b06      	ldr	r3, [pc, #24]	; (d8628 <serialEventRun+0x34>)
   d860e:	b143      	cbz	r3, d8622 <serialEventRun+0x2e>
   d8610:	f7ff ff3c 	bl	d848c <_Z22__fetch_global_Serial1v>
   d8614:	6803      	ldr	r3, [r0, #0]
   d8616:	691b      	ldr	r3, [r3, #16]
   d8618:	4798      	blx	r3
   d861a:	2800      	cmp	r0, #0
   d861c:	dd01      	ble.n	d8622 <serialEventRun+0x2e>
        serialEvent1();
   d861e:	f3af 8000 	nop.w
}
   d8622:	bd08      	pop	{r3, pc}
	...

000d862c <_post_loop>:
{
   d862c:	b508      	push	{r3, lr}
	serialEventRun();
   d862e:	f7ff ffe1 	bl	d85f4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8632:	f7fe fb49 	bl	d6cc8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8636:	4b01      	ldr	r3, [pc, #4]	; (d863c <_post_loop+0x10>)
   d8638:	6018      	str	r0, [r3, #0]
}
   d863a:	bd08      	pop	{r3, pc}
   d863c:	2003e7dc 	.word	0x2003e7dc

000d8640 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8640:	4802      	ldr	r0, [pc, #8]	; (d864c <_Z33system_initialize_user_backup_ramv+0xc>)
   d8642:	4a03      	ldr	r2, [pc, #12]	; (d8650 <_Z33system_initialize_user_backup_ramv+0x10>)
   d8644:	4903      	ldr	r1, [pc, #12]	; (d8654 <_Z33system_initialize_user_backup_ramv+0x14>)
   d8646:	1a12      	subs	r2, r2, r0
   d8648:	f000 bfb2 	b.w	d95b0 <memcpy>
   d864c:	2003f400 	.word	0x2003f400
   d8650:	2003fc04 	.word	0x2003fc04
   d8654:	000dc380 	.word	0x000dc380

000d8658 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8658:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d865a:	2300      	movs	r3, #0
   d865c:	9300      	str	r3, [sp, #0]
   d865e:	461a      	mov	r2, r3
   d8660:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8664:	f7fe fcea 	bl	d703c <system_ctrl_set_result>
}
   d8668:	b003      	add	sp, #12
   d866a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8670 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d8670:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8672:	8843      	ldrh	r3, [r0, #2]
   d8674:	2b0a      	cmp	r3, #10
   d8676:	d008      	beq.n	d868a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8678:	2b50      	cmp	r3, #80	; 0x50
   d867a:	d10b      	bne.n	d8694 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d867c:	4b09      	ldr	r3, [pc, #36]	; (d86a4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d867e:	681b      	ldr	r3, [r3, #0]
   d8680:	b14b      	cbz	r3, d8696 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d8682:	b003      	add	sp, #12
   d8684:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d8688:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d868a:	f7ff ffe5 	bl	d8658 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d868e:	b003      	add	sp, #12
   d8690:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8694:	2300      	movs	r3, #0
   d8696:	9300      	str	r3, [sp, #0]
   d8698:	461a      	mov	r2, r3
   d869a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d869e:	f7fe fccd 	bl	d703c <system_ctrl_set_result>
}
   d86a2:	e7f4      	b.n	d868e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d86a4:	2003e7cc 	.word	0x2003e7cc

000d86a8 <module_user_init_hook>:
{
   d86a8:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d86aa:	4c12      	ldr	r4, [pc, #72]	; (d86f4 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d86ac:	4812      	ldr	r0, [pc, #72]	; (d86f8 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d86ae:	4d13      	ldr	r5, [pc, #76]	; (d86fc <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d86b0:	2100      	movs	r1, #0
   d86b2:	f7fe fddf 	bl	d7274 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d86b6:	6823      	ldr	r3, [r4, #0]
   d86b8:	42ab      	cmp	r3, r5
   d86ba:	4b11      	ldr	r3, [pc, #68]	; (d8700 <module_user_init_hook+0x58>)
   d86bc:	bf0c      	ite	eq
   d86be:	2201      	moveq	r2, #1
   d86c0:	2200      	movne	r2, #0
   d86c2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d86c4:	d002      	beq.n	d86cc <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d86c6:	f7ff ffbb 	bl	d8640 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d86ca:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d86cc:	f7fe fae4 	bl	d6c98 <HAL_RNG_GetRandomNumber>
   d86d0:	4604      	mov	r4, r0
    srand(seed);
   d86d2:	f000 ff9d 	bl	d9610 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d86d6:	4b0b      	ldr	r3, [pc, #44]	; (d8704 <module_user_init_hook+0x5c>)
   d86d8:	b113      	cbz	r3, d86e0 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d86da:	4620      	mov	r0, r4
   d86dc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d86e0:	2100      	movs	r1, #0
   d86e2:	4808      	ldr	r0, [pc, #32]	; (d8704 <module_user_init_hook+0x5c>)
   d86e4:	f7fe fd1e 	bl	d7124 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d86e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d86ec:	4806      	ldr	r0, [pc, #24]	; (d8708 <module_user_init_hook+0x60>)
   d86ee:	2100      	movs	r1, #0
   d86f0:	f7fe bc9a 	b.w	d7028 <system_ctrl_set_app_request_handler>
   d86f4:	2003fc00 	.word	0x2003fc00
   d86f8:	000d85e9 	.word	0x000d85e9
   d86fc:	9a271c1e 	.word	0x9a271c1e
   d8700:	2003e7c8 	.word	0x2003e7c8
   d8704:	00000000 	.word	0x00000000
   d8708:	000d8671 	.word	0x000d8671

000d870c <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d870c:	b508      	push	{r3, lr}
   d870e:	4b02      	ldr	r3, [pc, #8]	; (d8718 <spark_protocol_instance+0xc>)
   d8710:	681b      	ldr	r3, [r3, #0]
   d8712:	681b      	ldr	r3, [r3, #0]
   d8714:	9301      	str	r3, [sp, #4]
   d8716:	bd08      	pop	{r3, pc}
   d8718:	0003025c 	.word	0x0003025c

000d871c <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d871c:	b508      	push	{r3, lr}
   d871e:	4b02      	ldr	r3, [pc, #8]	; (d8728 <spark_protocol_set_product_id+0xc>)
   d8720:	681b      	ldr	r3, [r3, #0]
   d8722:	685b      	ldr	r3, [r3, #4]
   d8724:	9301      	str	r3, [sp, #4]
   d8726:	bd08      	pop	{r3, pc}
   d8728:	0003025c 	.word	0x0003025c

000d872c <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d872c:	b508      	push	{r3, lr}
   d872e:	4b02      	ldr	r3, [pc, #8]	; (d8738 <spark_protocol_set_product_firmware_version+0xc>)
   d8730:	681b      	ldr	r3, [r3, #0]
   d8732:	689b      	ldr	r3, [r3, #8]
   d8734:	9301      	str	r3, [sp, #4]
   d8736:	bd08      	pop	{r3, pc}
   d8738:	0003025c 	.word	0x0003025c

000d873c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d873c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d873e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d8740:	d902      	bls.n	d8748 <pinAvailable+0xc>
    return false;
   d8742:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d8744:	b002      	add	sp, #8
   d8746:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d8748:	f1a0 030b 	sub.w	r3, r0, #11
   d874c:	2b02      	cmp	r3, #2
   d874e:	d81a      	bhi.n	d8786 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8750:	4c17      	ldr	r4, [pc, #92]	; (d87b0 <pinAvailable+0x74>)
   d8752:	7821      	ldrb	r1, [r4, #0]
   d8754:	f3bf 8f5b 	dmb	ish
   d8758:	f011 0101 	ands.w	r1, r1, #1
   d875c:	d10b      	bne.n	d8776 <pinAvailable+0x3a>
   d875e:	4620      	mov	r0, r4
   d8760:	9101      	str	r1, [sp, #4]
   d8762:	f7fb fca9 	bl	d40b8 <__cxa_guard_acquire>
   d8766:	9901      	ldr	r1, [sp, #4]
   d8768:	b128      	cbz	r0, d8776 <pinAvailable+0x3a>
   d876a:	4812      	ldr	r0, [pc, #72]	; (d87b4 <pinAvailable+0x78>)
   d876c:	f7ff fba8 	bl	d7ec0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d8770:	4620      	mov	r0, r4
   d8772:	f7fb fca6 	bl	d40c2 <__cxa_guard_release>
   d8776:	4b0f      	ldr	r3, [pc, #60]	; (d87b4 <pinAvailable+0x78>)
   d8778:	7818      	ldrb	r0, [r3, #0]
   d877a:	f7fe fb8d 	bl	d6e98 <hal_spi_is_enabled>
   d877e:	2800      	cmp	r0, #0
   d8780:	d1df      	bne.n	d8742 <pinAvailable+0x6>
  return true; // 'pin' is available
   d8782:	2001      	movs	r0, #1
   d8784:	e7de      	b.n	d8744 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d8786:	2801      	cmp	r0, #1
   d8788:	d809      	bhi.n	d879e <pinAvailable+0x62>
   d878a:	f000 f86f 	bl	d886c <_Z19__fetch_global_Wirev>
   d878e:	2100      	movs	r1, #0
   d8790:	7c00      	ldrb	r0, [r0, #16]
   d8792:	f7fe fb39 	bl	d6e08 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d8796:	f080 0001 	eor.w	r0, r0, #1
   d879a:	b2c0      	uxtb	r0, r0
   d879c:	e7d2      	b.n	d8744 <pinAvailable+0x8>
   d879e:	3809      	subs	r0, #9
   d87a0:	2801      	cmp	r0, #1
   d87a2:	d8ee      	bhi.n	d8782 <pinAvailable+0x46>
   d87a4:	f7ff fe72 	bl	d848c <_Z22__fetch_global_Serial1v>
   d87a8:	7c00      	ldrb	r0, [r0, #16]
   d87aa:	f7fe fbad 	bl	d6f08 <hal_usart_is_enabled>
   d87ae:	e7f2      	b.n	d8796 <pinAvailable+0x5a>
   d87b0:	2003e7d0 	.word	0x2003e7d0
   d87b4:	2003e7d4 	.word	0x2003e7d4

000d87b8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d87b8:	2823      	cmp	r0, #35	; 0x23
{
   d87ba:	b538      	push	{r3, r4, r5, lr}
   d87bc:	4604      	mov	r4, r0
   d87be:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d87c0:	d80a      	bhi.n	d87d8 <pinMode+0x20>
   d87c2:	29ff      	cmp	r1, #255	; 0xff
   d87c4:	d008      	beq.n	d87d8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d87c6:	f7ff ffb9 	bl	d873c <pinAvailable>
   d87ca:	b128      	cbz	r0, d87d8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d87cc:	4629      	mov	r1, r5
   d87ce:	4620      	mov	r0, r4
}
   d87d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d87d4:	f7fe baa8 	b.w	d6d28 <HAL_Pin_Mode>
}
   d87d8:	bd38      	pop	{r3, r4, r5, pc}

000d87da <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d87da:	b538      	push	{r3, r4, r5, lr}
   d87dc:	4604      	mov	r4, r0
   d87de:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d87e0:	f7fe faaa 	bl	d6d38 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d87e4:	28ff      	cmp	r0, #255	; 0xff
   d87e6:	d010      	beq.n	d880a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d87e8:	2806      	cmp	r0, #6
   d87ea:	d804      	bhi.n	d87f6 <digitalWrite+0x1c>
   d87ec:	234d      	movs	r3, #77	; 0x4d
   d87ee:	fa23 f000 	lsr.w	r0, r3, r0
   d87f2:	07c3      	lsls	r3, r0, #31
   d87f4:	d409      	bmi.n	d880a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d87f6:	4620      	mov	r0, r4
   d87f8:	f7ff ffa0 	bl	d873c <pinAvailable>
   d87fc:	b128      	cbz	r0, d880a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d87fe:	4629      	mov	r1, r5
   d8800:	4620      	mov	r0, r4
}
   d8802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d8806:	f7fe ba9f 	b.w	d6d48 <HAL_GPIO_Write>
}
   d880a:	bd38      	pop	{r3, r4, r5, pc}

000d880c <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d880c:	280d      	cmp	r0, #13
{
   d880e:	b510      	push	{r4, lr}
   d8810:	4604      	mov	r4, r0
  {
    pin = pin + FIRST_ANALOG_PIN;
   d8812:	bf9c      	itt	ls
   d8814:	340e      	addls	r4, #14
   d8816:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d8818:	4620      	mov	r0, r4
   d881a:	f7ff ff8f 	bl	d873c <pinAvailable>
   d881e:	b150      	cbz	r0, d8836 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8820:	2103      	movs	r1, #3
   d8822:	4620      	mov	r0, r4
   d8824:	f7fe fa78 	bl	d6d18 <HAL_Validate_Pin_Function>
   d8828:	2803      	cmp	r0, #3
   d882a:	d104      	bne.n	d8836 <analogRead+0x2a>
  {
    return LOW;
  }

  return hal_adc_read(pin);
   d882c:	4620      	mov	r0, r4
}
   d882e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return hal_adc_read(pin);
   d8832:	f7fe baa1 	b.w	d6d78 <hal_adc_read>
}
   d8836:	2000      	movs	r0, #0
   d8838:	bd10      	pop	{r4, pc}
	...

000d883c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d883c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d883e:	2300      	movs	r3, #0
   d8840:	2520      	movs	r5, #32
   d8842:	8043      	strh	r3, [r0, #2]
   d8844:	2314      	movs	r3, #20
{
   d8846:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d8848:	8003      	strh	r3, [r0, #0]
   d884a:	6085      	str	r5, [r0, #8]
   d884c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d884e:	4906      	ldr	r1, [pc, #24]	; (d8868 <_Z17acquireWireBufferv+0x2c>)
   d8850:	4628      	mov	r0, r5
   d8852:	f000 f83c 	bl	d88ce <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8856:	4904      	ldr	r1, [pc, #16]	; (d8868 <_Z17acquireWireBufferv+0x2c>)
	};
   d8858:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d885a:	4628      	mov	r0, r5
   d885c:	f000 f837 	bl	d88ce <_ZnajRKSt9nothrow_t>
	};
   d8860:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d8862:	4620      	mov	r0, r4
   d8864:	bd38      	pop	{r3, r4, r5, pc}
   d8866:	bf00      	nop
   d8868:	000dc080 	.word	0x000dc080

000d886c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d886c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d886e:	4d0f      	ldr	r5, [pc, #60]	; (d88ac <_Z19__fetch_global_Wirev+0x40>)
   d8870:	7829      	ldrb	r1, [r5, #0]
   d8872:	f3bf 8f5b 	dmb	ish
   d8876:	f011 0401 	ands.w	r4, r1, #1
{
   d887a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d887c:	d113      	bne.n	d88a6 <_Z19__fetch_global_Wirev+0x3a>
   d887e:	4628      	mov	r0, r5
   d8880:	f7fb fc1a 	bl	d40b8 <__cxa_guard_acquire>
   d8884:	b178      	cbz	r0, d88a6 <_Z19__fetch_global_Wirev+0x3a>
   d8886:	a801      	add	r0, sp, #4
   d8888:	f7ff ffd8 	bl	d883c <_Z17acquireWireBufferv>
   d888c:	aa01      	add	r2, sp, #4
   d888e:	4621      	mov	r1, r4
   d8890:	4807      	ldr	r0, [pc, #28]	; (d88b0 <_Z19__fetch_global_Wirev+0x44>)
   d8892:	f7ff f8f9 	bl	d7a88 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d8896:	4628      	mov	r0, r5
   d8898:	f7fb fc13 	bl	d40c2 <__cxa_guard_release>
   d889c:	4a05      	ldr	r2, [pc, #20]	; (d88b4 <_Z19__fetch_global_Wirev+0x48>)
   d889e:	4906      	ldr	r1, [pc, #24]	; (d88b8 <_Z19__fetch_global_Wirev+0x4c>)
   d88a0:	4803      	ldr	r0, [pc, #12]	; (d88b0 <_Z19__fetch_global_Wirev+0x44>)
   d88a2:	f000 f80b 	bl	d88bc <__aeabi_atexit>
	return wire;
}
   d88a6:	4802      	ldr	r0, [pc, #8]	; (d88b0 <_Z19__fetch_global_Wirev+0x44>)
   d88a8:	b007      	add	sp, #28
   d88aa:	bd30      	pop	{r4, r5, pc}
   d88ac:	2003e7e0 	.word	0x2003e7e0
   d88b0:	2003e7e4 	.word	0x2003e7e4
   d88b4:	2003dea8 	.word	0x2003dea8
   d88b8:	000d7a31 	.word	0x000d7a31

000d88bc <__aeabi_atexit>:
   d88bc:	460b      	mov	r3, r1
   d88be:	4601      	mov	r1, r0
   d88c0:	4618      	mov	r0, r3
   d88c2:	f000 be55 	b.w	d9570 <__cxa_atexit>

000d88c6 <_ZdlPvj>:
   d88c6:	f7fb bbea 	b.w	d409e <_ZdlPv>

000d88ca <_ZnwjRKSt9nothrow_t>:
   d88ca:	f7fb bbe4 	b.w	d4096 <_Znwj>

000d88ce <_ZnajRKSt9nothrow_t>:
   d88ce:	f7fb bbe4 	b.w	d409a <_Znaj>

000d88d2 <_ZSt25__throw_bad_function_callv>:
   d88d2:	b508      	push	{r3, lr}
   d88d4:	f7fe fcb6 	bl	d7244 <abort>

000d88d8 <sqrt>:
   d88d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d88dc:	ed2d 8b02 	vpush	{d8}
   d88e0:	b08b      	sub	sp, #44	; 0x2c
   d88e2:	ec55 4b10 	vmov	r4, r5, d0
   d88e6:	f000 f855 	bl	d8994 <__ieee754_sqrt>
   d88ea:	4b28      	ldr	r3, [pc, #160]	; (d898c <sqrt+0xb4>)
   d88ec:	eeb0 8a40 	vmov.f32	s16, s0
   d88f0:	eef0 8a60 	vmov.f32	s17, s1
   d88f4:	f993 7000 	ldrsb.w	r7, [r3]
   d88f8:	1c7b      	adds	r3, r7, #1
   d88fa:	d012      	beq.n	d8922 <sqrt+0x4a>
   d88fc:	4622      	mov	r2, r4
   d88fe:	462b      	mov	r3, r5
   d8900:	4620      	mov	r0, r4
   d8902:	4629      	mov	r1, r5
   d8904:	f000 fd62 	bl	d93cc <__aeabi_dcmpun>
   d8908:	4606      	mov	r6, r0
   d890a:	b950      	cbnz	r0, d8922 <sqrt+0x4a>
   d890c:	f04f 0800 	mov.w	r8, #0
   d8910:	f04f 0900 	mov.w	r9, #0
   d8914:	4620      	mov	r0, r4
   d8916:	4629      	mov	r1, r5
   d8918:	4642      	mov	r2, r8
   d891a:	464b      	mov	r3, r9
   d891c:	f000 fd2e 	bl	d937c <__aeabi_dcmplt>
   d8920:	b940      	cbnz	r0, d8934 <sqrt+0x5c>
   d8922:	eeb0 0a48 	vmov.f32	s0, s16
   d8926:	eef0 0a68 	vmov.f32	s1, s17
   d892a:	b00b      	add	sp, #44	; 0x2c
   d892c:	ecbd 8b02 	vpop	{d8}
   d8930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8934:	4b16      	ldr	r3, [pc, #88]	; (d8990 <sqrt+0xb8>)
   d8936:	9608      	str	r6, [sp, #32]
   d8938:	2201      	movs	r2, #1
   d893a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d893e:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d8942:	9200      	str	r2, [sp, #0]
   d8944:	9301      	str	r3, [sp, #4]
   d8946:	b197      	cbz	r7, d896e <sqrt+0x96>
   d8948:	4642      	mov	r2, r8
   d894a:	464b      	mov	r3, r9
   d894c:	4640      	mov	r0, r8
   d894e:	4649      	mov	r1, r9
   d8950:	f000 fbcc 	bl	d90ec <__aeabi_ddiv>
   d8954:	2f02      	cmp	r7, #2
   d8956:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d895a:	d10a      	bne.n	d8972 <sqrt+0x9a>
   d895c:	f7fe fc82 	bl	d7264 <__errno>
   d8960:	2321      	movs	r3, #33	; 0x21
   d8962:	6003      	str	r3, [r0, #0]
   d8964:	9b08      	ldr	r3, [sp, #32]
   d8966:	b963      	cbnz	r3, d8982 <sqrt+0xaa>
   d8968:	ed9d 8b06 	vldr	d8, [sp, #24]
   d896c:	e7d9      	b.n	d8922 <sqrt+0x4a>
   d896e:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d8972:	4668      	mov	r0, sp
   d8974:	f000 f8d2 	bl	d8b1c <matherr>
   d8978:	2800      	cmp	r0, #0
   d897a:	d0ef      	beq.n	d895c <sqrt+0x84>
   d897c:	9b08      	ldr	r3, [sp, #32]
   d897e:	2b00      	cmp	r3, #0
   d8980:	d0f2      	beq.n	d8968 <sqrt+0x90>
   d8982:	f7fe fc6f 	bl	d7264 <__errno>
   d8986:	9b08      	ldr	r3, [sp, #32]
   d8988:	6003      	str	r3, [r0, #0]
   d898a:	e7ed      	b.n	d8968 <sqrt+0x90>
   d898c:	2003dccc 	.word	0x2003dccc
   d8990:	000dc084 	.word	0x000dc084

000d8994 <__ieee754_sqrt>:
   d8994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8998:	4a5f      	ldr	r2, [pc, #380]	; (d8b18 <__ieee754_sqrt+0x184>)
   d899a:	ec57 6b10 	vmov	r6, r7, d0
   d899e:	43ba      	bics	r2, r7
   d89a0:	f000 8098 	beq.w	d8ad4 <__ieee754_sqrt+0x140>
   d89a4:	2f00      	cmp	r7, #0
   d89a6:	ee10 4a10 	vmov	r4, s0
   d89aa:	463b      	mov	r3, r7
   d89ac:	dd4e      	ble.n	d8a4c <__ieee754_sqrt+0xb8>
   d89ae:	1539      	asrs	r1, r7, #20
   d89b0:	d05b      	beq.n	d8a6a <__ieee754_sqrt+0xd6>
   d89b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d89b6:	07ca      	lsls	r2, r1, #31
   d89b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d89bc:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d89c0:	d403      	bmi.n	d89ca <__ieee754_sqrt+0x36>
   d89c2:	005b      	lsls	r3, r3, #1
   d89c4:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d89c8:	0064      	lsls	r4, r4, #1
   d89ca:	0fe2      	lsrs	r2, r4, #31
   d89cc:	f04f 0c00 	mov.w	ip, #0
   d89d0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d89d4:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d89d8:	0064      	lsls	r4, r4, #1
   d89da:	4666      	mov	r6, ip
   d89dc:	2516      	movs	r5, #22
   d89de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d89e2:	18b1      	adds	r1, r6, r2
   d89e4:	4299      	cmp	r1, r3
   d89e6:	dc02      	bgt.n	d89ee <__ieee754_sqrt+0x5a>
   d89e8:	1a5b      	subs	r3, r3, r1
   d89ea:	188e      	adds	r6, r1, r2
   d89ec:	4494      	add	ip, r2
   d89ee:	005b      	lsls	r3, r3, #1
   d89f0:	3d01      	subs	r5, #1
   d89f2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d89f6:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d89fa:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d89fe:	d1f0      	bne.n	d89e2 <__ieee754_sqrt+0x4e>
   d8a00:	462f      	mov	r7, r5
   d8a02:	2020      	movs	r0, #32
   d8a04:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d8a08:	e009      	b.n	d8a1e <__ieee754_sqrt+0x8a>
   d8a0a:	d03e      	beq.n	d8a8a <__ieee754_sqrt+0xf6>
   d8a0c:	0fe1      	lsrs	r1, r4, #31
   d8a0e:	3801      	subs	r0, #1
   d8a10:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d8a14:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d8a18:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8a1c:	d03e      	beq.n	d8a9c <__ieee754_sqrt+0x108>
   d8a1e:	42b3      	cmp	r3, r6
   d8a20:	eb02 0105 	add.w	r1, r2, r5
   d8a24:	ddf1      	ble.n	d8a0a <__ieee754_sqrt+0x76>
   d8a26:	2900      	cmp	r1, #0
   d8a28:	eb01 0502 	add.w	r5, r1, r2
   d8a2c:	db09      	blt.n	d8a42 <__ieee754_sqrt+0xae>
   d8a2e:	46b0      	mov	r8, r6
   d8a30:	1b9b      	subs	r3, r3, r6
   d8a32:	42a1      	cmp	r1, r4
   d8a34:	bf88      	it	hi
   d8a36:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
   d8a3a:	1a64      	subs	r4, r4, r1
   d8a3c:	4417      	add	r7, r2
   d8a3e:	4646      	mov	r6, r8
   d8a40:	e7e4      	b.n	d8a0c <__ieee754_sqrt+0x78>
   d8a42:	2d00      	cmp	r5, #0
   d8a44:	dbf3      	blt.n	d8a2e <__ieee754_sqrt+0x9a>
   d8a46:	f106 0801 	add.w	r8, r6, #1
   d8a4a:	e7f1      	b.n	d8a30 <__ieee754_sqrt+0x9c>
   d8a4c:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d8a50:	4332      	orrs	r2, r6
   d8a52:	d036      	beq.n	d8ac2 <__ieee754_sqrt+0x12e>
   d8a54:	2f00      	cmp	r7, #0
   d8a56:	d14d      	bne.n	d8af4 <__ieee754_sqrt+0x160>
   d8a58:	4639      	mov	r1, r7
   d8a5a:	0ae2      	lsrs	r2, r4, #11
   d8a5c:	3915      	subs	r1, #21
   d8a5e:	0564      	lsls	r4, r4, #21
   d8a60:	4613      	mov	r3, r2
   d8a62:	2a00      	cmp	r2, #0
   d8a64:	d0f9      	beq.n	d8a5a <__ieee754_sqrt+0xc6>
   d8a66:	02d7      	lsls	r7, r2, #11
   d8a68:	d451      	bmi.n	d8b0e <__ieee754_sqrt+0x17a>
   d8a6a:	2000      	movs	r0, #0
   d8a6c:	005b      	lsls	r3, r3, #1
   d8a6e:	02de      	lsls	r6, r3, #11
   d8a70:	4605      	mov	r5, r0
   d8a72:	f100 0001 	add.w	r0, r0, #1
   d8a76:	d5f9      	bpl.n	d8a6c <__ieee754_sqrt+0xd8>
   d8a78:	461a      	mov	r2, r3
   d8a7a:	4623      	mov	r3, r4
   d8a7c:	4084      	lsls	r4, r0
   d8a7e:	f1c0 0020 	rsb	r0, r0, #32
   d8a82:	40c3      	lsrs	r3, r0
   d8a84:	4313      	orrs	r3, r2
   d8a86:	1b49      	subs	r1, r1, r5
   d8a88:	e793      	b.n	d89b2 <__ieee754_sqrt+0x1e>
   d8a8a:	42a1      	cmp	r1, r4
   d8a8c:	d8be      	bhi.n	d8a0c <__ieee754_sqrt+0x78>
   d8a8e:	2900      	cmp	r1, #0
   d8a90:	eb01 0502 	add.w	r5, r1, r2
   d8a94:	dbd5      	blt.n	d8a42 <__ieee754_sqrt+0xae>
   d8a96:	4698      	mov	r8, r3
   d8a98:	2300      	movs	r3, #0
   d8a9a:	e7ce      	b.n	d8a3a <__ieee754_sqrt+0xa6>
   d8a9c:	4323      	orrs	r3, r4
   d8a9e:	d112      	bne.n	d8ac6 <__ieee754_sqrt+0x132>
   d8aa0:	0878      	lsrs	r0, r7, #1
   d8aa2:	ea4f 016c 	mov.w	r1, ip, asr #1
   d8aa6:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d8aaa:	f01c 0f01 	tst.w	ip, #1
   d8aae:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d8ab2:	bf18      	it	ne
   d8ab4:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d8ab8:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d8abc:	4602      	mov	r2, r0
   d8abe:	ec43 2b10 	vmov	d0, r2, r3
   d8ac2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8ac6:	1c7b      	adds	r3, r7, #1
   d8ac8:	bf16      	itet	ne
   d8aca:	1c78      	addne	r0, r7, #1
   d8acc:	f10c 0c01 	addeq.w	ip, ip, #1
   d8ad0:	0840      	lsrne	r0, r0, #1
   d8ad2:	e7e6      	b.n	d8aa2 <__ieee754_sqrt+0x10e>
   d8ad4:	ee10 2a10 	vmov	r2, s0
   d8ad8:	ee10 0a10 	vmov	r0, s0
   d8adc:	463b      	mov	r3, r7
   d8ade:	4639      	mov	r1, r7
   d8ae0:	f000 f9da 	bl	d8e98 <__aeabi_dmul>
   d8ae4:	4632      	mov	r2, r6
   d8ae6:	463b      	mov	r3, r7
   d8ae8:	f000 f820 	bl	d8b2c <__adddf3>
   d8aec:	ec41 0b10 	vmov	d0, r0, r1
   d8af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8af4:	ee10 2a10 	vmov	r2, s0
   d8af8:	4630      	mov	r0, r6
   d8afa:	4639      	mov	r1, r7
   d8afc:	f000 f814 	bl	d8b28 <__aeabi_dsub>
   d8b00:	4602      	mov	r2, r0
   d8b02:	460b      	mov	r3, r1
   d8b04:	f000 faf2 	bl	d90ec <__aeabi_ddiv>
   d8b08:	ec41 0b10 	vmov	d0, r0, r1
   d8b0c:	e7d9      	b.n	d8ac2 <__ieee754_sqrt+0x12e>
   d8b0e:	4623      	mov	r3, r4
   d8b10:	2020      	movs	r0, #32
   d8b12:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d8b16:	e7b4      	b.n	d8a82 <__ieee754_sqrt+0xee>
   d8b18:	7ff00000 	.word	0x7ff00000

000d8b1c <matherr>:
   d8b1c:	2000      	movs	r0, #0
   d8b1e:	4770      	bx	lr

000d8b20 <__aeabi_drsub>:
   d8b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8b24:	e002      	b.n	d8b2c <__adddf3>
   d8b26:	bf00      	nop

000d8b28 <__aeabi_dsub>:
   d8b28:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8b2c <__adddf3>:
   d8b2c:	b530      	push	{r4, r5, lr}
   d8b2e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8b32:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8b36:	ea94 0f05 	teq	r4, r5
   d8b3a:	bf08      	it	eq
   d8b3c:	ea90 0f02 	teqeq	r0, r2
   d8b40:	bf1f      	itttt	ne
   d8b42:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8b46:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8b4a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8b4e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8b52:	f000 80e2 	beq.w	d8d1a <__adddf3+0x1ee>
   d8b56:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8b5a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8b5e:	bfb8      	it	lt
   d8b60:	426d      	neglt	r5, r5
   d8b62:	dd0c      	ble.n	d8b7e <__adddf3+0x52>
   d8b64:	442c      	add	r4, r5
   d8b66:	ea80 0202 	eor.w	r2, r0, r2
   d8b6a:	ea81 0303 	eor.w	r3, r1, r3
   d8b6e:	ea82 0000 	eor.w	r0, r2, r0
   d8b72:	ea83 0101 	eor.w	r1, r3, r1
   d8b76:	ea80 0202 	eor.w	r2, r0, r2
   d8b7a:	ea81 0303 	eor.w	r3, r1, r3
   d8b7e:	2d36      	cmp	r5, #54	; 0x36
   d8b80:	bf88      	it	hi
   d8b82:	bd30      	pophi	{r4, r5, pc}
   d8b84:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8b88:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8b8c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8b90:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8b94:	d002      	beq.n	d8b9c <__adddf3+0x70>
   d8b96:	4240      	negs	r0, r0
   d8b98:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8b9c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8ba0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8ba4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8ba8:	d002      	beq.n	d8bb0 <__adddf3+0x84>
   d8baa:	4252      	negs	r2, r2
   d8bac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8bb0:	ea94 0f05 	teq	r4, r5
   d8bb4:	f000 80a7 	beq.w	d8d06 <__adddf3+0x1da>
   d8bb8:	f1a4 0401 	sub.w	r4, r4, #1
   d8bbc:	f1d5 0e20 	rsbs	lr, r5, #32
   d8bc0:	db0d      	blt.n	d8bde <__adddf3+0xb2>
   d8bc2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8bc6:	fa22 f205 	lsr.w	r2, r2, r5
   d8bca:	1880      	adds	r0, r0, r2
   d8bcc:	f141 0100 	adc.w	r1, r1, #0
   d8bd0:	fa03 f20e 	lsl.w	r2, r3, lr
   d8bd4:	1880      	adds	r0, r0, r2
   d8bd6:	fa43 f305 	asr.w	r3, r3, r5
   d8bda:	4159      	adcs	r1, r3
   d8bdc:	e00e      	b.n	d8bfc <__adddf3+0xd0>
   d8bde:	f1a5 0520 	sub.w	r5, r5, #32
   d8be2:	f10e 0e20 	add.w	lr, lr, #32
   d8be6:	2a01      	cmp	r2, #1
   d8be8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8bec:	bf28      	it	cs
   d8bee:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8bf2:	fa43 f305 	asr.w	r3, r3, r5
   d8bf6:	18c0      	adds	r0, r0, r3
   d8bf8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8bfc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8c00:	d507      	bpl.n	d8c12 <__adddf3+0xe6>
   d8c02:	f04f 0e00 	mov.w	lr, #0
   d8c06:	f1dc 0c00 	rsbs	ip, ip, #0
   d8c0a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8c0e:	eb6e 0101 	sbc.w	r1, lr, r1
   d8c12:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8c16:	d31b      	bcc.n	d8c50 <__adddf3+0x124>
   d8c18:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8c1c:	d30c      	bcc.n	d8c38 <__adddf3+0x10c>
   d8c1e:	0849      	lsrs	r1, r1, #1
   d8c20:	ea5f 0030 	movs.w	r0, r0, rrx
   d8c24:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8c28:	f104 0401 	add.w	r4, r4, #1
   d8c2c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8c30:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8c34:	f080 809a 	bcs.w	d8d6c <__adddf3+0x240>
   d8c38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8c3c:	bf08      	it	eq
   d8c3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8c42:	f150 0000 	adcs.w	r0, r0, #0
   d8c46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8c4a:	ea41 0105 	orr.w	r1, r1, r5
   d8c4e:	bd30      	pop	{r4, r5, pc}
   d8c50:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8c54:	4140      	adcs	r0, r0
   d8c56:	eb41 0101 	adc.w	r1, r1, r1
   d8c5a:	3c01      	subs	r4, #1
   d8c5c:	bf28      	it	cs
   d8c5e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d8c62:	d2e9      	bcs.n	d8c38 <__adddf3+0x10c>
   d8c64:	f091 0f00 	teq	r1, #0
   d8c68:	bf04      	itt	eq
   d8c6a:	4601      	moveq	r1, r0
   d8c6c:	2000      	moveq	r0, #0
   d8c6e:	fab1 f381 	clz	r3, r1
   d8c72:	bf08      	it	eq
   d8c74:	3320      	addeq	r3, #32
   d8c76:	f1a3 030b 	sub.w	r3, r3, #11
   d8c7a:	f1b3 0220 	subs.w	r2, r3, #32
   d8c7e:	da0c      	bge.n	d8c9a <__adddf3+0x16e>
   d8c80:	320c      	adds	r2, #12
   d8c82:	dd08      	ble.n	d8c96 <__adddf3+0x16a>
   d8c84:	f102 0c14 	add.w	ip, r2, #20
   d8c88:	f1c2 020c 	rsb	r2, r2, #12
   d8c8c:	fa01 f00c 	lsl.w	r0, r1, ip
   d8c90:	fa21 f102 	lsr.w	r1, r1, r2
   d8c94:	e00c      	b.n	d8cb0 <__adddf3+0x184>
   d8c96:	f102 0214 	add.w	r2, r2, #20
   d8c9a:	bfd8      	it	le
   d8c9c:	f1c2 0c20 	rsble	ip, r2, #32
   d8ca0:	fa01 f102 	lsl.w	r1, r1, r2
   d8ca4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8ca8:	bfdc      	itt	le
   d8caa:	ea41 010c 	orrle.w	r1, r1, ip
   d8cae:	4090      	lslle	r0, r2
   d8cb0:	1ae4      	subs	r4, r4, r3
   d8cb2:	bfa2      	ittt	ge
   d8cb4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8cb8:	4329      	orrge	r1, r5
   d8cba:	bd30      	popge	{r4, r5, pc}
   d8cbc:	ea6f 0404 	mvn.w	r4, r4
   d8cc0:	3c1f      	subs	r4, #31
   d8cc2:	da1c      	bge.n	d8cfe <__adddf3+0x1d2>
   d8cc4:	340c      	adds	r4, #12
   d8cc6:	dc0e      	bgt.n	d8ce6 <__adddf3+0x1ba>
   d8cc8:	f104 0414 	add.w	r4, r4, #20
   d8ccc:	f1c4 0220 	rsb	r2, r4, #32
   d8cd0:	fa20 f004 	lsr.w	r0, r0, r4
   d8cd4:	fa01 f302 	lsl.w	r3, r1, r2
   d8cd8:	ea40 0003 	orr.w	r0, r0, r3
   d8cdc:	fa21 f304 	lsr.w	r3, r1, r4
   d8ce0:	ea45 0103 	orr.w	r1, r5, r3
   d8ce4:	bd30      	pop	{r4, r5, pc}
   d8ce6:	f1c4 040c 	rsb	r4, r4, #12
   d8cea:	f1c4 0220 	rsb	r2, r4, #32
   d8cee:	fa20 f002 	lsr.w	r0, r0, r2
   d8cf2:	fa01 f304 	lsl.w	r3, r1, r4
   d8cf6:	ea40 0003 	orr.w	r0, r0, r3
   d8cfa:	4629      	mov	r1, r5
   d8cfc:	bd30      	pop	{r4, r5, pc}
   d8cfe:	fa21 f004 	lsr.w	r0, r1, r4
   d8d02:	4629      	mov	r1, r5
   d8d04:	bd30      	pop	{r4, r5, pc}
   d8d06:	f094 0f00 	teq	r4, #0
   d8d0a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8d0e:	bf06      	itte	eq
   d8d10:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8d14:	3401      	addeq	r4, #1
   d8d16:	3d01      	subne	r5, #1
   d8d18:	e74e      	b.n	d8bb8 <__adddf3+0x8c>
   d8d1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8d1e:	bf18      	it	ne
   d8d20:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8d24:	d029      	beq.n	d8d7a <__adddf3+0x24e>
   d8d26:	ea94 0f05 	teq	r4, r5
   d8d2a:	bf08      	it	eq
   d8d2c:	ea90 0f02 	teqeq	r0, r2
   d8d30:	d005      	beq.n	d8d3e <__adddf3+0x212>
   d8d32:	ea54 0c00 	orrs.w	ip, r4, r0
   d8d36:	bf04      	itt	eq
   d8d38:	4619      	moveq	r1, r3
   d8d3a:	4610      	moveq	r0, r2
   d8d3c:	bd30      	pop	{r4, r5, pc}
   d8d3e:	ea91 0f03 	teq	r1, r3
   d8d42:	bf1e      	ittt	ne
   d8d44:	2100      	movne	r1, #0
   d8d46:	2000      	movne	r0, #0
   d8d48:	bd30      	popne	{r4, r5, pc}
   d8d4a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8d4e:	d105      	bne.n	d8d5c <__adddf3+0x230>
   d8d50:	0040      	lsls	r0, r0, #1
   d8d52:	4149      	adcs	r1, r1
   d8d54:	bf28      	it	cs
   d8d56:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8d5a:	bd30      	pop	{r4, r5, pc}
   d8d5c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8d60:	bf3c      	itt	cc
   d8d62:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8d66:	bd30      	popcc	{r4, r5, pc}
   d8d68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8d6c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8d70:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8d74:	f04f 0000 	mov.w	r0, #0
   d8d78:	bd30      	pop	{r4, r5, pc}
   d8d7a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8d7e:	bf1a      	itte	ne
   d8d80:	4619      	movne	r1, r3
   d8d82:	4610      	movne	r0, r2
   d8d84:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8d88:	bf1c      	itt	ne
   d8d8a:	460b      	movne	r3, r1
   d8d8c:	4602      	movne	r2, r0
   d8d8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8d92:	bf06      	itte	eq
   d8d94:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8d98:	ea91 0f03 	teqeq	r1, r3
   d8d9c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8da0:	bd30      	pop	{r4, r5, pc}
   d8da2:	bf00      	nop

000d8da4 <__aeabi_ui2d>:
   d8da4:	f090 0f00 	teq	r0, #0
   d8da8:	bf04      	itt	eq
   d8daa:	2100      	moveq	r1, #0
   d8dac:	4770      	bxeq	lr
   d8dae:	b530      	push	{r4, r5, lr}
   d8db0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8db4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8db8:	f04f 0500 	mov.w	r5, #0
   d8dbc:	f04f 0100 	mov.w	r1, #0
   d8dc0:	e750      	b.n	d8c64 <__adddf3+0x138>
   d8dc2:	bf00      	nop

000d8dc4 <__aeabi_i2d>:
   d8dc4:	f090 0f00 	teq	r0, #0
   d8dc8:	bf04      	itt	eq
   d8dca:	2100      	moveq	r1, #0
   d8dcc:	4770      	bxeq	lr
   d8dce:	b530      	push	{r4, r5, lr}
   d8dd0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8dd4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8dd8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8ddc:	bf48      	it	mi
   d8dde:	4240      	negmi	r0, r0
   d8de0:	f04f 0100 	mov.w	r1, #0
   d8de4:	e73e      	b.n	d8c64 <__adddf3+0x138>
   d8de6:	bf00      	nop

000d8de8 <__aeabi_f2d>:
   d8de8:	0042      	lsls	r2, r0, #1
   d8dea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8dee:	ea4f 0131 	mov.w	r1, r1, rrx
   d8df2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8df6:	bf1f      	itttt	ne
   d8df8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8dfc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8e00:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8e04:	4770      	bxne	lr
   d8e06:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d8e0a:	bf08      	it	eq
   d8e0c:	4770      	bxeq	lr
   d8e0e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8e12:	bf04      	itt	eq
   d8e14:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8e18:	4770      	bxeq	lr
   d8e1a:	b530      	push	{r4, r5, lr}
   d8e1c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8e20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8e24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8e28:	e71c      	b.n	d8c64 <__adddf3+0x138>
   d8e2a:	bf00      	nop

000d8e2c <__aeabi_ul2d>:
   d8e2c:	ea50 0201 	orrs.w	r2, r0, r1
   d8e30:	bf08      	it	eq
   d8e32:	4770      	bxeq	lr
   d8e34:	b530      	push	{r4, r5, lr}
   d8e36:	f04f 0500 	mov.w	r5, #0
   d8e3a:	e00a      	b.n	d8e52 <__aeabi_l2d+0x16>

000d8e3c <__aeabi_l2d>:
   d8e3c:	ea50 0201 	orrs.w	r2, r0, r1
   d8e40:	bf08      	it	eq
   d8e42:	4770      	bxeq	lr
   d8e44:	b530      	push	{r4, r5, lr}
   d8e46:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8e4a:	d502      	bpl.n	d8e52 <__aeabi_l2d+0x16>
   d8e4c:	4240      	negs	r0, r0
   d8e4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8e52:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8e56:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8e5a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8e5e:	f43f aed8 	beq.w	d8c12 <__adddf3+0xe6>
   d8e62:	f04f 0203 	mov.w	r2, #3
   d8e66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8e6a:	bf18      	it	ne
   d8e6c:	3203      	addne	r2, #3
   d8e6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8e72:	bf18      	it	ne
   d8e74:	3203      	addne	r2, #3
   d8e76:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8e7a:	f1c2 0320 	rsb	r3, r2, #32
   d8e7e:	fa00 fc03 	lsl.w	ip, r0, r3
   d8e82:	fa20 f002 	lsr.w	r0, r0, r2
   d8e86:	fa01 fe03 	lsl.w	lr, r1, r3
   d8e8a:	ea40 000e 	orr.w	r0, r0, lr
   d8e8e:	fa21 f102 	lsr.w	r1, r1, r2
   d8e92:	4414      	add	r4, r2
   d8e94:	e6bd      	b.n	d8c12 <__adddf3+0xe6>
   d8e96:	bf00      	nop

000d8e98 <__aeabi_dmul>:
   d8e98:	b570      	push	{r4, r5, r6, lr}
   d8e9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8e9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8ea2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8ea6:	bf1d      	ittte	ne
   d8ea8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8eac:	ea94 0f0c 	teqne	r4, ip
   d8eb0:	ea95 0f0c 	teqne	r5, ip
   d8eb4:	f000 f8de 	bleq	d9074 <__aeabi_dmul+0x1dc>
   d8eb8:	442c      	add	r4, r5
   d8eba:	ea81 0603 	eor.w	r6, r1, r3
   d8ebe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8ec2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8ec6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8eca:	bf18      	it	ne
   d8ecc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8ed0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8ed4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8ed8:	d038      	beq.n	d8f4c <__aeabi_dmul+0xb4>
   d8eda:	fba0 ce02 	umull	ip, lr, r0, r2
   d8ede:	f04f 0500 	mov.w	r5, #0
   d8ee2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8ee6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8eea:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8eee:	f04f 0600 	mov.w	r6, #0
   d8ef2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8ef6:	f09c 0f00 	teq	ip, #0
   d8efa:	bf18      	it	ne
   d8efc:	f04e 0e01 	orrne.w	lr, lr, #1
   d8f00:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8f04:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8f08:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8f0c:	d204      	bcs.n	d8f18 <__aeabi_dmul+0x80>
   d8f0e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8f12:	416d      	adcs	r5, r5
   d8f14:	eb46 0606 	adc.w	r6, r6, r6
   d8f18:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8f1c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8f20:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8f24:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8f28:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8f2c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8f30:	bf88      	it	hi
   d8f32:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8f36:	d81e      	bhi.n	d8f76 <__aeabi_dmul+0xde>
   d8f38:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8f3c:	bf08      	it	eq
   d8f3e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8f42:	f150 0000 	adcs.w	r0, r0, #0
   d8f46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8f4a:	bd70      	pop	{r4, r5, r6, pc}
   d8f4c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8f50:	ea46 0101 	orr.w	r1, r6, r1
   d8f54:	ea40 0002 	orr.w	r0, r0, r2
   d8f58:	ea81 0103 	eor.w	r1, r1, r3
   d8f5c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8f60:	bfc2      	ittt	gt
   d8f62:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8f66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8f6a:	bd70      	popgt	{r4, r5, r6, pc}
   d8f6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8f70:	f04f 0e00 	mov.w	lr, #0
   d8f74:	3c01      	subs	r4, #1
   d8f76:	f300 80ab 	bgt.w	d90d0 <__aeabi_dmul+0x238>
   d8f7a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8f7e:	bfde      	ittt	le
   d8f80:	2000      	movle	r0, #0
   d8f82:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8f86:	bd70      	pople	{r4, r5, r6, pc}
   d8f88:	f1c4 0400 	rsb	r4, r4, #0
   d8f8c:	3c20      	subs	r4, #32
   d8f8e:	da35      	bge.n	d8ffc <__aeabi_dmul+0x164>
   d8f90:	340c      	adds	r4, #12
   d8f92:	dc1b      	bgt.n	d8fcc <__aeabi_dmul+0x134>
   d8f94:	f104 0414 	add.w	r4, r4, #20
   d8f98:	f1c4 0520 	rsb	r5, r4, #32
   d8f9c:	fa00 f305 	lsl.w	r3, r0, r5
   d8fa0:	fa20 f004 	lsr.w	r0, r0, r4
   d8fa4:	fa01 f205 	lsl.w	r2, r1, r5
   d8fa8:	ea40 0002 	orr.w	r0, r0, r2
   d8fac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8fb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8fb4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8fb8:	fa21 f604 	lsr.w	r6, r1, r4
   d8fbc:	eb42 0106 	adc.w	r1, r2, r6
   d8fc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8fc4:	bf08      	it	eq
   d8fc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8fca:	bd70      	pop	{r4, r5, r6, pc}
   d8fcc:	f1c4 040c 	rsb	r4, r4, #12
   d8fd0:	f1c4 0520 	rsb	r5, r4, #32
   d8fd4:	fa00 f304 	lsl.w	r3, r0, r4
   d8fd8:	fa20 f005 	lsr.w	r0, r0, r5
   d8fdc:	fa01 f204 	lsl.w	r2, r1, r4
   d8fe0:	ea40 0002 	orr.w	r0, r0, r2
   d8fe4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8fe8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8fec:	f141 0100 	adc.w	r1, r1, #0
   d8ff0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8ff4:	bf08      	it	eq
   d8ff6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8ffa:	bd70      	pop	{r4, r5, r6, pc}
   d8ffc:	f1c4 0520 	rsb	r5, r4, #32
   d9000:	fa00 f205 	lsl.w	r2, r0, r5
   d9004:	ea4e 0e02 	orr.w	lr, lr, r2
   d9008:	fa20 f304 	lsr.w	r3, r0, r4
   d900c:	fa01 f205 	lsl.w	r2, r1, r5
   d9010:	ea43 0302 	orr.w	r3, r3, r2
   d9014:	fa21 f004 	lsr.w	r0, r1, r4
   d9018:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d901c:	fa21 f204 	lsr.w	r2, r1, r4
   d9020:	ea20 0002 	bic.w	r0, r0, r2
   d9024:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9028:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d902c:	bf08      	it	eq
   d902e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9032:	bd70      	pop	{r4, r5, r6, pc}
   d9034:	f094 0f00 	teq	r4, #0
   d9038:	d10f      	bne.n	d905a <__aeabi_dmul+0x1c2>
   d903a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d903e:	0040      	lsls	r0, r0, #1
   d9040:	eb41 0101 	adc.w	r1, r1, r1
   d9044:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9048:	bf08      	it	eq
   d904a:	3c01      	subeq	r4, #1
   d904c:	d0f7      	beq.n	d903e <__aeabi_dmul+0x1a6>
   d904e:	ea41 0106 	orr.w	r1, r1, r6
   d9052:	f095 0f00 	teq	r5, #0
   d9056:	bf18      	it	ne
   d9058:	4770      	bxne	lr
   d905a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d905e:	0052      	lsls	r2, r2, #1
   d9060:	eb43 0303 	adc.w	r3, r3, r3
   d9064:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d9068:	bf08      	it	eq
   d906a:	3d01      	subeq	r5, #1
   d906c:	d0f7      	beq.n	d905e <__aeabi_dmul+0x1c6>
   d906e:	ea43 0306 	orr.w	r3, r3, r6
   d9072:	4770      	bx	lr
   d9074:	ea94 0f0c 	teq	r4, ip
   d9078:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d907c:	bf18      	it	ne
   d907e:	ea95 0f0c 	teqne	r5, ip
   d9082:	d00c      	beq.n	d909e <__aeabi_dmul+0x206>
   d9084:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9088:	bf18      	it	ne
   d908a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d908e:	d1d1      	bne.n	d9034 <__aeabi_dmul+0x19c>
   d9090:	ea81 0103 	eor.w	r1, r1, r3
   d9094:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9098:	f04f 0000 	mov.w	r0, #0
   d909c:	bd70      	pop	{r4, r5, r6, pc}
   d909e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d90a2:	bf06      	itte	eq
   d90a4:	4610      	moveq	r0, r2
   d90a6:	4619      	moveq	r1, r3
   d90a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d90ac:	d019      	beq.n	d90e2 <__aeabi_dmul+0x24a>
   d90ae:	ea94 0f0c 	teq	r4, ip
   d90b2:	d102      	bne.n	d90ba <__aeabi_dmul+0x222>
   d90b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d90b8:	d113      	bne.n	d90e2 <__aeabi_dmul+0x24a>
   d90ba:	ea95 0f0c 	teq	r5, ip
   d90be:	d105      	bne.n	d90cc <__aeabi_dmul+0x234>
   d90c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d90c4:	bf1c      	itt	ne
   d90c6:	4610      	movne	r0, r2
   d90c8:	4619      	movne	r1, r3
   d90ca:	d10a      	bne.n	d90e2 <__aeabi_dmul+0x24a>
   d90cc:	ea81 0103 	eor.w	r1, r1, r3
   d90d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d90d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d90d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d90dc:	f04f 0000 	mov.w	r0, #0
   d90e0:	bd70      	pop	{r4, r5, r6, pc}
   d90e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d90e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d90ea:	bd70      	pop	{r4, r5, r6, pc}

000d90ec <__aeabi_ddiv>:
   d90ec:	b570      	push	{r4, r5, r6, lr}
   d90ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d90f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d90f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d90fa:	bf1d      	ittte	ne
   d90fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9100:	ea94 0f0c 	teqne	r4, ip
   d9104:	ea95 0f0c 	teqne	r5, ip
   d9108:	f000 f8a7 	bleq	d925a <__aeabi_ddiv+0x16e>
   d910c:	eba4 0405 	sub.w	r4, r4, r5
   d9110:	ea81 0e03 	eor.w	lr, r1, r3
   d9114:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9118:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d911c:	f000 8088 	beq.w	d9230 <__aeabi_ddiv+0x144>
   d9120:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9124:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9128:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d912c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9130:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9134:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9138:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d913c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9140:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9144:	429d      	cmp	r5, r3
   d9146:	bf08      	it	eq
   d9148:	4296      	cmpeq	r6, r2
   d914a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d914e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d9152:	d202      	bcs.n	d915a <__aeabi_ddiv+0x6e>
   d9154:	085b      	lsrs	r3, r3, #1
   d9156:	ea4f 0232 	mov.w	r2, r2, rrx
   d915a:	1ab6      	subs	r6, r6, r2
   d915c:	eb65 0503 	sbc.w	r5, r5, r3
   d9160:	085b      	lsrs	r3, r3, #1
   d9162:	ea4f 0232 	mov.w	r2, r2, rrx
   d9166:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d916a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d916e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9172:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9176:	bf22      	ittt	cs
   d9178:	1ab6      	subcs	r6, r6, r2
   d917a:	4675      	movcs	r5, lr
   d917c:	ea40 000c 	orrcs.w	r0, r0, ip
   d9180:	085b      	lsrs	r3, r3, #1
   d9182:	ea4f 0232 	mov.w	r2, r2, rrx
   d9186:	ebb6 0e02 	subs.w	lr, r6, r2
   d918a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d918e:	bf22      	ittt	cs
   d9190:	1ab6      	subcs	r6, r6, r2
   d9192:	4675      	movcs	r5, lr
   d9194:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9198:	085b      	lsrs	r3, r3, #1
   d919a:	ea4f 0232 	mov.w	r2, r2, rrx
   d919e:	ebb6 0e02 	subs.w	lr, r6, r2
   d91a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d91a6:	bf22      	ittt	cs
   d91a8:	1ab6      	subcs	r6, r6, r2
   d91aa:	4675      	movcs	r5, lr
   d91ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d91b0:	085b      	lsrs	r3, r3, #1
   d91b2:	ea4f 0232 	mov.w	r2, r2, rrx
   d91b6:	ebb6 0e02 	subs.w	lr, r6, r2
   d91ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   d91be:	bf22      	ittt	cs
   d91c0:	1ab6      	subcs	r6, r6, r2
   d91c2:	4675      	movcs	r5, lr
   d91c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d91c8:	ea55 0e06 	orrs.w	lr, r5, r6
   d91cc:	d018      	beq.n	d9200 <__aeabi_ddiv+0x114>
   d91ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d91d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d91d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d91da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d91de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d91e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d91e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d91ea:	d1c0      	bne.n	d916e <__aeabi_ddiv+0x82>
   d91ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d91f0:	d10b      	bne.n	d920a <__aeabi_ddiv+0x11e>
   d91f2:	ea41 0100 	orr.w	r1, r1, r0
   d91f6:	f04f 0000 	mov.w	r0, #0
   d91fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d91fe:	e7b6      	b.n	d916e <__aeabi_ddiv+0x82>
   d9200:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9204:	bf04      	itt	eq
   d9206:	4301      	orreq	r1, r0
   d9208:	2000      	moveq	r0, #0
   d920a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d920e:	bf88      	it	hi
   d9210:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9214:	f63f aeaf 	bhi.w	d8f76 <__aeabi_dmul+0xde>
   d9218:	ebb5 0c03 	subs.w	ip, r5, r3
   d921c:	bf04      	itt	eq
   d921e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9222:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9226:	f150 0000 	adcs.w	r0, r0, #0
   d922a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d922e:	bd70      	pop	{r4, r5, r6, pc}
   d9230:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9234:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9238:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d923c:	bfc2      	ittt	gt
   d923e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9242:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9246:	bd70      	popgt	{r4, r5, r6, pc}
   d9248:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d924c:	f04f 0e00 	mov.w	lr, #0
   d9250:	3c01      	subs	r4, #1
   d9252:	e690      	b.n	d8f76 <__aeabi_dmul+0xde>
   d9254:	ea45 0e06 	orr.w	lr, r5, r6
   d9258:	e68d      	b.n	d8f76 <__aeabi_dmul+0xde>
   d925a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d925e:	ea94 0f0c 	teq	r4, ip
   d9262:	bf08      	it	eq
   d9264:	ea95 0f0c 	teqeq	r5, ip
   d9268:	f43f af3b 	beq.w	d90e2 <__aeabi_dmul+0x24a>
   d926c:	ea94 0f0c 	teq	r4, ip
   d9270:	d10a      	bne.n	d9288 <__aeabi_ddiv+0x19c>
   d9272:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9276:	f47f af34 	bne.w	d90e2 <__aeabi_dmul+0x24a>
   d927a:	ea95 0f0c 	teq	r5, ip
   d927e:	f47f af25 	bne.w	d90cc <__aeabi_dmul+0x234>
   d9282:	4610      	mov	r0, r2
   d9284:	4619      	mov	r1, r3
   d9286:	e72c      	b.n	d90e2 <__aeabi_dmul+0x24a>
   d9288:	ea95 0f0c 	teq	r5, ip
   d928c:	d106      	bne.n	d929c <__aeabi_ddiv+0x1b0>
   d928e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9292:	f43f aefd 	beq.w	d9090 <__aeabi_dmul+0x1f8>
   d9296:	4610      	mov	r0, r2
   d9298:	4619      	mov	r1, r3
   d929a:	e722      	b.n	d90e2 <__aeabi_dmul+0x24a>
   d929c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d92a0:	bf18      	it	ne
   d92a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d92a6:	f47f aec5 	bne.w	d9034 <__aeabi_dmul+0x19c>
   d92aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d92ae:	f47f af0d 	bne.w	d90cc <__aeabi_dmul+0x234>
   d92b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d92b6:	f47f aeeb 	bne.w	d9090 <__aeabi_dmul+0x1f8>
   d92ba:	e712      	b.n	d90e2 <__aeabi_dmul+0x24a>

000d92bc <__gedf2>:
   d92bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d92c0:	e006      	b.n	d92d0 <__cmpdf2+0x4>
   d92c2:	bf00      	nop

000d92c4 <__ledf2>:
   d92c4:	f04f 0c01 	mov.w	ip, #1
   d92c8:	e002      	b.n	d92d0 <__cmpdf2+0x4>
   d92ca:	bf00      	nop

000d92cc <__cmpdf2>:
   d92cc:	f04f 0c01 	mov.w	ip, #1
   d92d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d92d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d92d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d92dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d92e0:	bf18      	it	ne
   d92e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d92e6:	d01b      	beq.n	d9320 <__cmpdf2+0x54>
   d92e8:	b001      	add	sp, #4
   d92ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d92ee:	bf0c      	ite	eq
   d92f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d92f4:	ea91 0f03 	teqne	r1, r3
   d92f8:	bf02      	ittt	eq
   d92fa:	ea90 0f02 	teqeq	r0, r2
   d92fe:	2000      	moveq	r0, #0
   d9300:	4770      	bxeq	lr
   d9302:	f110 0f00 	cmn.w	r0, #0
   d9306:	ea91 0f03 	teq	r1, r3
   d930a:	bf58      	it	pl
   d930c:	4299      	cmppl	r1, r3
   d930e:	bf08      	it	eq
   d9310:	4290      	cmpeq	r0, r2
   d9312:	bf2c      	ite	cs
   d9314:	17d8      	asrcs	r0, r3, #31
   d9316:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d931a:	f040 0001 	orr.w	r0, r0, #1
   d931e:	4770      	bx	lr
   d9320:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9324:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9328:	d102      	bne.n	d9330 <__cmpdf2+0x64>
   d932a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d932e:	d107      	bne.n	d9340 <__cmpdf2+0x74>
   d9330:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9334:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9338:	d1d6      	bne.n	d92e8 <__cmpdf2+0x1c>
   d933a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d933e:	d0d3      	beq.n	d92e8 <__cmpdf2+0x1c>
   d9340:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9344:	4770      	bx	lr
   d9346:	bf00      	nop

000d9348 <__aeabi_cdrcmple>:
   d9348:	4684      	mov	ip, r0
   d934a:	4610      	mov	r0, r2
   d934c:	4662      	mov	r2, ip
   d934e:	468c      	mov	ip, r1
   d9350:	4619      	mov	r1, r3
   d9352:	4663      	mov	r3, ip
   d9354:	e000      	b.n	d9358 <__aeabi_cdcmpeq>
   d9356:	bf00      	nop

000d9358 <__aeabi_cdcmpeq>:
   d9358:	b501      	push	{r0, lr}
   d935a:	f7ff ffb7 	bl	d92cc <__cmpdf2>
   d935e:	2800      	cmp	r0, #0
   d9360:	bf48      	it	mi
   d9362:	f110 0f00 	cmnmi.w	r0, #0
   d9366:	bd01      	pop	{r0, pc}

000d9368 <__aeabi_dcmpeq>:
   d9368:	f84d ed08 	str.w	lr, [sp, #-8]!
   d936c:	f7ff fff4 	bl	d9358 <__aeabi_cdcmpeq>
   d9370:	bf0c      	ite	eq
   d9372:	2001      	moveq	r0, #1
   d9374:	2000      	movne	r0, #0
   d9376:	f85d fb08 	ldr.w	pc, [sp], #8
   d937a:	bf00      	nop

000d937c <__aeabi_dcmplt>:
   d937c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9380:	f7ff ffea 	bl	d9358 <__aeabi_cdcmpeq>
   d9384:	bf34      	ite	cc
   d9386:	2001      	movcc	r0, #1
   d9388:	2000      	movcs	r0, #0
   d938a:	f85d fb08 	ldr.w	pc, [sp], #8
   d938e:	bf00      	nop

000d9390 <__aeabi_dcmple>:
   d9390:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9394:	f7ff ffe0 	bl	d9358 <__aeabi_cdcmpeq>
   d9398:	bf94      	ite	ls
   d939a:	2001      	movls	r0, #1
   d939c:	2000      	movhi	r0, #0
   d939e:	f85d fb08 	ldr.w	pc, [sp], #8
   d93a2:	bf00      	nop

000d93a4 <__aeabi_dcmpge>:
   d93a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d93a8:	f7ff ffce 	bl	d9348 <__aeabi_cdrcmple>
   d93ac:	bf94      	ite	ls
   d93ae:	2001      	movls	r0, #1
   d93b0:	2000      	movhi	r0, #0
   d93b2:	f85d fb08 	ldr.w	pc, [sp], #8
   d93b6:	bf00      	nop

000d93b8 <__aeabi_dcmpgt>:
   d93b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d93bc:	f7ff ffc4 	bl	d9348 <__aeabi_cdrcmple>
   d93c0:	bf34      	ite	cc
   d93c2:	2001      	movcc	r0, #1
   d93c4:	2000      	movcs	r0, #0
   d93c6:	f85d fb08 	ldr.w	pc, [sp], #8
   d93ca:	bf00      	nop

000d93cc <__aeabi_dcmpun>:
   d93cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d93d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d93d4:	d102      	bne.n	d93dc <__aeabi_dcmpun+0x10>
   d93d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d93da:	d10a      	bne.n	d93f2 <__aeabi_dcmpun+0x26>
   d93dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d93e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d93e4:	d102      	bne.n	d93ec <__aeabi_dcmpun+0x20>
   d93e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d93ea:	d102      	bne.n	d93f2 <__aeabi_dcmpun+0x26>
   d93ec:	f04f 0000 	mov.w	r0, #0
   d93f0:	4770      	bx	lr
   d93f2:	f04f 0001 	mov.w	r0, #1
   d93f6:	4770      	bx	lr

000d93f8 <__aeabi_d2uiz>:
   d93f8:	004a      	lsls	r2, r1, #1
   d93fa:	d211      	bcs.n	d9420 <__aeabi_d2uiz+0x28>
   d93fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9400:	d211      	bcs.n	d9426 <__aeabi_d2uiz+0x2e>
   d9402:	d50d      	bpl.n	d9420 <__aeabi_d2uiz+0x28>
   d9404:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9408:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d940c:	d40e      	bmi.n	d942c <__aeabi_d2uiz+0x34>
   d940e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9412:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9416:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d941a:	fa23 f002 	lsr.w	r0, r3, r2
   d941e:	4770      	bx	lr
   d9420:	f04f 0000 	mov.w	r0, #0
   d9424:	4770      	bx	lr
   d9426:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d942a:	d102      	bne.n	d9432 <__aeabi_d2uiz+0x3a>
   d942c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9430:	4770      	bx	lr
   d9432:	f04f 0000 	mov.w	r0, #0
   d9436:	4770      	bx	lr

000d9438 <__aeabi_d2f>:
   d9438:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d943c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9440:	bf24      	itt	cs
   d9442:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d9446:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d944a:	d90d      	bls.n	d9468 <__aeabi_d2f+0x30>
   d944c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9450:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9454:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9458:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d945c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9460:	bf08      	it	eq
   d9462:	f020 0001 	biceq.w	r0, r0, #1
   d9466:	4770      	bx	lr
   d9468:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d946c:	d121      	bne.n	d94b2 <__aeabi_d2f+0x7a>
   d946e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9472:	bfbc      	itt	lt
   d9474:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9478:	4770      	bxlt	lr
   d947a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d947e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9482:	f1c2 0218 	rsb	r2, r2, #24
   d9486:	f1c2 0c20 	rsb	ip, r2, #32
   d948a:	fa10 f30c 	lsls.w	r3, r0, ip
   d948e:	fa20 f002 	lsr.w	r0, r0, r2
   d9492:	bf18      	it	ne
   d9494:	f040 0001 	orrne.w	r0, r0, #1
   d9498:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d949c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d94a0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d94a4:	ea40 000c 	orr.w	r0, r0, ip
   d94a8:	fa23 f302 	lsr.w	r3, r3, r2
   d94ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d94b0:	e7cc      	b.n	d944c <__aeabi_d2f+0x14>
   d94b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d94b6:	d107      	bne.n	d94c8 <__aeabi_d2f+0x90>
   d94b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d94bc:	bf1e      	ittt	ne
   d94be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d94c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d94c6:	4770      	bxne	lr
   d94c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d94cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d94d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d94d4:	4770      	bx	lr
   d94d6:	bf00      	nop

000d94d8 <__aeabi_d2ulz>:
   d94d8:	b5d0      	push	{r4, r6, r7, lr}
   d94da:	4b0c      	ldr	r3, [pc, #48]	; (d950c <__aeabi_d2ulz+0x34>)
   d94dc:	2200      	movs	r2, #0
   d94de:	4606      	mov	r6, r0
   d94e0:	460f      	mov	r7, r1
   d94e2:	f7ff fcd9 	bl	d8e98 <__aeabi_dmul>
   d94e6:	f7ff ff87 	bl	d93f8 <__aeabi_d2uiz>
   d94ea:	4604      	mov	r4, r0
   d94ec:	f7ff fc5a 	bl	d8da4 <__aeabi_ui2d>
   d94f0:	4b07      	ldr	r3, [pc, #28]	; (d9510 <__aeabi_d2ulz+0x38>)
   d94f2:	2200      	movs	r2, #0
   d94f4:	f7ff fcd0 	bl	d8e98 <__aeabi_dmul>
   d94f8:	4602      	mov	r2, r0
   d94fa:	460b      	mov	r3, r1
   d94fc:	4630      	mov	r0, r6
   d94fe:	4639      	mov	r1, r7
   d9500:	f7ff fb12 	bl	d8b28 <__aeabi_dsub>
   d9504:	f7ff ff78 	bl	d93f8 <__aeabi_d2uiz>
   d9508:	4621      	mov	r1, r4
   d950a:	bdd0      	pop	{r4, r6, r7, pc}
   d950c:	3df00000 	.word	0x3df00000
   d9510:	41f00000 	.word	0x41f00000

000d9514 <asctime_r>:
   d9514:	b510      	push	{r4, lr}
   d9516:	460c      	mov	r4, r1
   d9518:	6941      	ldr	r1, [r0, #20]
   d951a:	6903      	ldr	r3, [r0, #16]
   d951c:	6982      	ldr	r2, [r0, #24]
   d951e:	b086      	sub	sp, #24
   d9520:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d9524:	9104      	str	r1, [sp, #16]
   d9526:	6801      	ldr	r1, [r0, #0]
   d9528:	9103      	str	r1, [sp, #12]
   d952a:	6841      	ldr	r1, [r0, #4]
   d952c:	9102      	str	r1, [sp, #8]
   d952e:	6881      	ldr	r1, [r0, #8]
   d9530:	9101      	str	r1, [sp, #4]
   d9532:	68c1      	ldr	r1, [r0, #12]
   d9534:	9100      	str	r1, [sp, #0]
   d9536:	4907      	ldr	r1, [pc, #28]	; (d9554 <asctime_r+0x40>)
   d9538:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d953c:	440b      	add	r3, r1
   d953e:	4906      	ldr	r1, [pc, #24]	; (d9558 <asctime_r+0x44>)
   d9540:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d9544:	440a      	add	r2, r1
   d9546:	4620      	mov	r0, r4
   d9548:	4904      	ldr	r1, [pc, #16]	; (d955c <asctime_r+0x48>)
   d954a:	f7fd fe6b 	bl	d7224 <siprintf>
   d954e:	4620      	mov	r0, r4
   d9550:	b006      	add	sp, #24
   d9552:	bd10      	pop	{r4, pc}
   d9554:	000dc0be 	.word	0x000dc0be
   d9558:	000dc0a9 	.word	0x000dc0a9
   d955c:	000dc089 	.word	0x000dc089

000d9560 <atof>:
   d9560:	2100      	movs	r1, #0
   d9562:	f000 befb 	b.w	da35c <strtod>

000d9566 <atoi>:
   d9566:	220a      	movs	r2, #10
   d9568:	2100      	movs	r1, #0
   d956a:	f000 bf7d 	b.w	da468 <strtol>
	...

000d9570 <__cxa_atexit>:
   d9570:	b510      	push	{r4, lr}
   d9572:	4c05      	ldr	r4, [pc, #20]	; (d9588 <__cxa_atexit+0x18>)
   d9574:	4613      	mov	r3, r2
   d9576:	b12c      	cbz	r4, d9584 <__cxa_atexit+0x14>
   d9578:	460a      	mov	r2, r1
   d957a:	4601      	mov	r1, r0
   d957c:	2002      	movs	r0, #2
   d957e:	f3af 8000 	nop.w
   d9582:	bd10      	pop	{r4, pc}
   d9584:	4620      	mov	r0, r4
   d9586:	e7fc      	b.n	d9582 <__cxa_atexit+0x12>
   d9588:	00000000 	.word	0x00000000

000d958c <gmtime>:
   d958c:	b538      	push	{r3, r4, r5, lr}
   d958e:	4b07      	ldr	r3, [pc, #28]	; (d95ac <gmtime+0x20>)
   d9590:	681d      	ldr	r5, [r3, #0]
   d9592:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   d9594:	4604      	mov	r4, r0
   d9596:	b91b      	cbnz	r3, d95a0 <gmtime+0x14>
   d9598:	2024      	movs	r0, #36	; 0x24
   d959a:	f7fd fe2b 	bl	d71f4 <malloc>
   d959e:	63e8      	str	r0, [r5, #60]	; 0x3c
   d95a0:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   d95a2:	4620      	mov	r0, r4
   d95a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d95a8:	f7fd be7c 	b.w	d72a4 <gmtime_r>
   d95ac:	2003dcd0 	.word	0x2003dcd0

000d95b0 <memcpy>:
   d95b0:	440a      	add	r2, r1
   d95b2:	4291      	cmp	r1, r2
   d95b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d95b8:	d100      	bne.n	d95bc <memcpy+0xc>
   d95ba:	4770      	bx	lr
   d95bc:	b510      	push	{r4, lr}
   d95be:	f811 4b01 	ldrb.w	r4, [r1], #1
   d95c2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d95c6:	4291      	cmp	r1, r2
   d95c8:	d1f9      	bne.n	d95be <memcpy+0xe>
   d95ca:	bd10      	pop	{r4, pc}

000d95cc <memmove>:
   d95cc:	4288      	cmp	r0, r1
   d95ce:	b510      	push	{r4, lr}
   d95d0:	eb01 0402 	add.w	r4, r1, r2
   d95d4:	d902      	bls.n	d95dc <memmove+0x10>
   d95d6:	4284      	cmp	r4, r0
   d95d8:	4623      	mov	r3, r4
   d95da:	d807      	bhi.n	d95ec <memmove+0x20>
   d95dc:	1e43      	subs	r3, r0, #1
   d95de:	42a1      	cmp	r1, r4
   d95e0:	d008      	beq.n	d95f4 <memmove+0x28>
   d95e2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d95e6:	f803 2f01 	strb.w	r2, [r3, #1]!
   d95ea:	e7f8      	b.n	d95de <memmove+0x12>
   d95ec:	4402      	add	r2, r0
   d95ee:	4601      	mov	r1, r0
   d95f0:	428a      	cmp	r2, r1
   d95f2:	d100      	bne.n	d95f6 <memmove+0x2a>
   d95f4:	bd10      	pop	{r4, pc}
   d95f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d95fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d95fe:	e7f7      	b.n	d95f0 <memmove+0x24>

000d9600 <memset>:
   d9600:	4402      	add	r2, r0
   d9602:	4603      	mov	r3, r0
   d9604:	4293      	cmp	r3, r2
   d9606:	d100      	bne.n	d960a <memset+0xa>
   d9608:	4770      	bx	lr
   d960a:	f803 1b01 	strb.w	r1, [r3], #1
   d960e:	e7f9      	b.n	d9604 <memset+0x4>

000d9610 <srand>:
   d9610:	b538      	push	{r3, r4, r5, lr}
   d9612:	4b0d      	ldr	r3, [pc, #52]	; (d9648 <srand+0x38>)
   d9614:	681d      	ldr	r5, [r3, #0]
   d9616:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9618:	4604      	mov	r4, r0
   d961a:	b97b      	cbnz	r3, d963c <srand+0x2c>
   d961c:	2018      	movs	r0, #24
   d961e:	f7fd fde9 	bl	d71f4 <malloc>
   d9622:	4a0a      	ldr	r2, [pc, #40]	; (d964c <srand+0x3c>)
   d9624:	4b0a      	ldr	r3, [pc, #40]	; (d9650 <srand+0x40>)
   d9626:	63a8      	str	r0, [r5, #56]	; 0x38
   d9628:	e9c0 2300 	strd	r2, r3, [r0]
   d962c:	4b09      	ldr	r3, [pc, #36]	; (d9654 <srand+0x44>)
   d962e:	6083      	str	r3, [r0, #8]
   d9630:	230b      	movs	r3, #11
   d9632:	8183      	strh	r3, [r0, #12]
   d9634:	2201      	movs	r2, #1
   d9636:	2300      	movs	r3, #0
   d9638:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d963c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d963e:	2200      	movs	r2, #0
   d9640:	611c      	str	r4, [r3, #16]
   d9642:	615a      	str	r2, [r3, #20]
   d9644:	bd38      	pop	{r3, r4, r5, pc}
   d9646:	bf00      	nop
   d9648:	2003dcd0 	.word	0x2003dcd0
   d964c:	abcd330e 	.word	0xabcd330e
   d9650:	e66d1234 	.word	0xe66d1234
   d9654:	0005deec 	.word	0x0005deec

000d9658 <strcmp>:
   d9658:	f810 2b01 	ldrb.w	r2, [r0], #1
   d965c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9660:	2a01      	cmp	r2, #1
   d9662:	bf28      	it	cs
   d9664:	429a      	cmpcs	r2, r3
   d9666:	d0f7      	beq.n	d9658 <strcmp>
   d9668:	1ad0      	subs	r0, r2, r3
   d966a:	4770      	bx	lr

000d966c <strcpy>:
   d966c:	4603      	mov	r3, r0
   d966e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9672:	f803 2b01 	strb.w	r2, [r3], #1
   d9676:	2a00      	cmp	r2, #0
   d9678:	d1f9      	bne.n	d966e <strcpy+0x2>
   d967a:	4770      	bx	lr

000d967c <strdup>:
   d967c:	4b02      	ldr	r3, [pc, #8]	; (d9688 <strdup+0xc>)
   d967e:	4601      	mov	r1, r0
   d9680:	6818      	ldr	r0, [r3, #0]
   d9682:	f000 b803 	b.w	d968c <_strdup_r>
   d9686:	bf00      	nop
   d9688:	2003dcd0 	.word	0x2003dcd0

000d968c <_strdup_r>:
   d968c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d968e:	4604      	mov	r4, r0
   d9690:	4608      	mov	r0, r1
   d9692:	460d      	mov	r5, r1
   d9694:	f000 f80f 	bl	d96b6 <strlen>
   d9698:	1c42      	adds	r2, r0, #1
   d969a:	4611      	mov	r1, r2
   d969c:	4620      	mov	r0, r4
   d969e:	9201      	str	r2, [sp, #4]
   d96a0:	f7fd fdd8 	bl	d7254 <_malloc_r>
   d96a4:	4604      	mov	r4, r0
   d96a6:	b118      	cbz	r0, d96b0 <_strdup_r+0x24>
   d96a8:	9a01      	ldr	r2, [sp, #4]
   d96aa:	4629      	mov	r1, r5
   d96ac:	f7ff ff80 	bl	d95b0 <memcpy>
   d96b0:	4620      	mov	r0, r4
   d96b2:	b003      	add	sp, #12
   d96b4:	bd30      	pop	{r4, r5, pc}

000d96b6 <strlen>:
   d96b6:	4603      	mov	r3, r0
   d96b8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d96bc:	2a00      	cmp	r2, #0
   d96be:	d1fb      	bne.n	d96b8 <strlen+0x2>
   d96c0:	1a18      	subs	r0, r3, r0
   d96c2:	3801      	subs	r0, #1
   d96c4:	4770      	bx	lr

000d96c6 <strncmp>:
   d96c6:	b510      	push	{r4, lr}
   d96c8:	b16a      	cbz	r2, d96e6 <strncmp+0x20>
   d96ca:	3901      	subs	r1, #1
   d96cc:	1884      	adds	r4, r0, r2
   d96ce:	f810 3b01 	ldrb.w	r3, [r0], #1
   d96d2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d96d6:	4293      	cmp	r3, r2
   d96d8:	d103      	bne.n	d96e2 <strncmp+0x1c>
   d96da:	42a0      	cmp	r0, r4
   d96dc:	d001      	beq.n	d96e2 <strncmp+0x1c>
   d96de:	2b00      	cmp	r3, #0
   d96e0:	d1f5      	bne.n	d96ce <strncmp+0x8>
   d96e2:	1a98      	subs	r0, r3, r2
   d96e4:	bd10      	pop	{r4, pc}
   d96e6:	4610      	mov	r0, r2
   d96e8:	e7fc      	b.n	d96e4 <strncmp+0x1e>

000d96ea <strncpy>:
   d96ea:	b510      	push	{r4, lr}
   d96ec:	3901      	subs	r1, #1
   d96ee:	4603      	mov	r3, r0
   d96f0:	b132      	cbz	r2, d9700 <strncpy+0x16>
   d96f2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d96f6:	f803 4b01 	strb.w	r4, [r3], #1
   d96fa:	3a01      	subs	r2, #1
   d96fc:	2c00      	cmp	r4, #0
   d96fe:	d1f7      	bne.n	d96f0 <strncpy+0x6>
   d9700:	441a      	add	r2, r3
   d9702:	2100      	movs	r1, #0
   d9704:	4293      	cmp	r3, r2
   d9706:	d100      	bne.n	d970a <strncpy+0x20>
   d9708:	bd10      	pop	{r4, pc}
   d970a:	f803 1b01 	strb.w	r1, [r3], #1
   d970e:	e7f9      	b.n	d9704 <strncpy+0x1a>

000d9710 <sulp>:
   d9710:	b570      	push	{r4, r5, r6, lr}
   d9712:	4604      	mov	r4, r0
   d9714:	460d      	mov	r5, r1
   d9716:	ec45 4b10 	vmov	d0, r4, r5
   d971a:	4616      	mov	r6, r2
   d971c:	f001 fd1a 	bl	db154 <__ulp>
   d9720:	ec51 0b10 	vmov	r0, r1, d0
   d9724:	b17e      	cbz	r6, d9746 <sulp+0x36>
   d9726:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d972a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d972e:	2b00      	cmp	r3, #0
   d9730:	dd09      	ble.n	d9746 <sulp+0x36>
   d9732:	051b      	lsls	r3, r3, #20
   d9734:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d9738:	2400      	movs	r4, #0
   d973a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d973e:	4622      	mov	r2, r4
   d9740:	462b      	mov	r3, r5
   d9742:	f7ff fba9 	bl	d8e98 <__aeabi_dmul>
   d9746:	bd70      	pop	{r4, r5, r6, pc}

000d9748 <_strtod_l>:
   d9748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d974c:	b0a3      	sub	sp, #140	; 0x8c
   d974e:	461f      	mov	r7, r3
   d9750:	2300      	movs	r3, #0
   d9752:	931e      	str	r3, [sp, #120]	; 0x78
   d9754:	4ba4      	ldr	r3, [pc, #656]	; (d99e8 <_strtod_l+0x2a0>)
   d9756:	9219      	str	r2, [sp, #100]	; 0x64
   d9758:	681b      	ldr	r3, [r3, #0]
   d975a:	9307      	str	r3, [sp, #28]
   d975c:	4604      	mov	r4, r0
   d975e:	4618      	mov	r0, r3
   d9760:	4688      	mov	r8, r1
   d9762:	f7ff ffa8 	bl	d96b6 <strlen>
   d9766:	f04f 0a00 	mov.w	sl, #0
   d976a:	4605      	mov	r5, r0
   d976c:	f04f 0b00 	mov.w	fp, #0
   d9770:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d9774:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9776:	781a      	ldrb	r2, [r3, #0]
   d9778:	2a2b      	cmp	r2, #43	; 0x2b
   d977a:	d04c      	beq.n	d9816 <_strtod_l+0xce>
   d977c:	d839      	bhi.n	d97f2 <_strtod_l+0xaa>
   d977e:	2a0d      	cmp	r2, #13
   d9780:	d832      	bhi.n	d97e8 <_strtod_l+0xa0>
   d9782:	2a08      	cmp	r2, #8
   d9784:	d832      	bhi.n	d97ec <_strtod_l+0xa4>
   d9786:	2a00      	cmp	r2, #0
   d9788:	d03c      	beq.n	d9804 <_strtod_l+0xbc>
   d978a:	2300      	movs	r3, #0
   d978c:	930e      	str	r3, [sp, #56]	; 0x38
   d978e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d9790:	7833      	ldrb	r3, [r6, #0]
   d9792:	2b30      	cmp	r3, #48	; 0x30
   d9794:	f040 80b4 	bne.w	d9900 <_strtod_l+0x1b8>
   d9798:	7873      	ldrb	r3, [r6, #1]
   d979a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d979e:	2b58      	cmp	r3, #88	; 0x58
   d97a0:	d16c      	bne.n	d987c <_strtod_l+0x134>
   d97a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d97a4:	9301      	str	r3, [sp, #4]
   d97a6:	ab1e      	add	r3, sp, #120	; 0x78
   d97a8:	9702      	str	r7, [sp, #8]
   d97aa:	9300      	str	r3, [sp, #0]
   d97ac:	4a8f      	ldr	r2, [pc, #572]	; (d99ec <_strtod_l+0x2a4>)
   d97ae:	ab1f      	add	r3, sp, #124	; 0x7c
   d97b0:	a91d      	add	r1, sp, #116	; 0x74
   d97b2:	4620      	mov	r0, r4
   d97b4:	f000 feca 	bl	da54c <__gethex>
   d97b8:	f010 0707 	ands.w	r7, r0, #7
   d97bc:	4605      	mov	r5, r0
   d97be:	d005      	beq.n	d97cc <_strtod_l+0x84>
   d97c0:	2f06      	cmp	r7, #6
   d97c2:	d12a      	bne.n	d981a <_strtod_l+0xd2>
   d97c4:	3601      	adds	r6, #1
   d97c6:	2300      	movs	r3, #0
   d97c8:	961d      	str	r6, [sp, #116]	; 0x74
   d97ca:	930e      	str	r3, [sp, #56]	; 0x38
   d97cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d97ce:	2b00      	cmp	r3, #0
   d97d0:	f040 8596 	bne.w	da300 <_strtod_l+0xbb8>
   d97d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d97d6:	b1db      	cbz	r3, d9810 <_strtod_l+0xc8>
   d97d8:	4652      	mov	r2, sl
   d97da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d97de:	ec43 2b10 	vmov	d0, r2, r3
   d97e2:	b023      	add	sp, #140	; 0x8c
   d97e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d97e8:	2a20      	cmp	r2, #32
   d97ea:	d1ce      	bne.n	d978a <_strtod_l+0x42>
   d97ec:	3301      	adds	r3, #1
   d97ee:	931d      	str	r3, [sp, #116]	; 0x74
   d97f0:	e7c0      	b.n	d9774 <_strtod_l+0x2c>
   d97f2:	2a2d      	cmp	r2, #45	; 0x2d
   d97f4:	d1c9      	bne.n	d978a <_strtod_l+0x42>
   d97f6:	2201      	movs	r2, #1
   d97f8:	920e      	str	r2, [sp, #56]	; 0x38
   d97fa:	1c5a      	adds	r2, r3, #1
   d97fc:	921d      	str	r2, [sp, #116]	; 0x74
   d97fe:	785b      	ldrb	r3, [r3, #1]
   d9800:	2b00      	cmp	r3, #0
   d9802:	d1c4      	bne.n	d978e <_strtod_l+0x46>
   d9804:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d9806:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d980a:	2b00      	cmp	r3, #0
   d980c:	f040 8576 	bne.w	da2fc <_strtod_l+0xbb4>
   d9810:	4652      	mov	r2, sl
   d9812:	465b      	mov	r3, fp
   d9814:	e7e3      	b.n	d97de <_strtod_l+0x96>
   d9816:	2200      	movs	r2, #0
   d9818:	e7ee      	b.n	d97f8 <_strtod_l+0xb0>
   d981a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d981c:	b13a      	cbz	r2, d982e <_strtod_l+0xe6>
   d981e:	2135      	movs	r1, #53	; 0x35
   d9820:	a820      	add	r0, sp, #128	; 0x80
   d9822:	f001 fd96 	bl	db352 <__copybits>
   d9826:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9828:	4620      	mov	r0, r4
   d982a:	f001 f9cb 	bl	dabc4 <_Bfree>
   d982e:	3f01      	subs	r7, #1
   d9830:	2f05      	cmp	r7, #5
   d9832:	d807      	bhi.n	d9844 <_strtod_l+0xfc>
   d9834:	e8df f007 	tbb	[pc, r7]
   d9838:	1d180b0e 	.word	0x1d180b0e
   d983c:	030e      	.short	0x030e
   d983e:	f04f 0b00 	mov.w	fp, #0
   d9842:	46da      	mov	sl, fp
   d9844:	0728      	lsls	r0, r5, #28
   d9846:	d5c1      	bpl.n	d97cc <_strtod_l+0x84>
   d9848:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d984c:	e7be      	b.n	d97cc <_strtod_l+0x84>
   d984e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d9852:	e7f7      	b.n	d9844 <_strtod_l+0xfc>
   d9854:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d9858:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d985a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d985e:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d9862:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d9866:	e7ed      	b.n	d9844 <_strtod_l+0xfc>
   d9868:	f8df b184 	ldr.w	fp, [pc, #388]	; d99f0 <_strtod_l+0x2a8>
   d986c:	f04f 0a00 	mov.w	sl, #0
   d9870:	e7e8      	b.n	d9844 <_strtod_l+0xfc>
   d9872:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d9876:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d987a:	e7e3      	b.n	d9844 <_strtod_l+0xfc>
   d987c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d987e:	1c5a      	adds	r2, r3, #1
   d9880:	921d      	str	r2, [sp, #116]	; 0x74
   d9882:	785b      	ldrb	r3, [r3, #1]
   d9884:	2b30      	cmp	r3, #48	; 0x30
   d9886:	d0f9      	beq.n	d987c <_strtod_l+0x134>
   d9888:	2b00      	cmp	r3, #0
   d988a:	d09f      	beq.n	d97cc <_strtod_l+0x84>
   d988c:	2301      	movs	r3, #1
   d988e:	f04f 0900 	mov.w	r9, #0
   d9892:	9304      	str	r3, [sp, #16]
   d9894:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9896:	930a      	str	r3, [sp, #40]	; 0x28
   d9898:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d989c:	464f      	mov	r7, r9
   d989e:	220a      	movs	r2, #10
   d98a0:	981d      	ldr	r0, [sp, #116]	; 0x74
   d98a2:	7806      	ldrb	r6, [r0, #0]
   d98a4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d98a8:	b2d9      	uxtb	r1, r3
   d98aa:	2909      	cmp	r1, #9
   d98ac:	d92a      	bls.n	d9904 <_strtod_l+0x1bc>
   d98ae:	9907      	ldr	r1, [sp, #28]
   d98b0:	462a      	mov	r2, r5
   d98b2:	f7ff ff08 	bl	d96c6 <strncmp>
   d98b6:	b398      	cbz	r0, d9920 <_strtod_l+0x1d8>
   d98b8:	2000      	movs	r0, #0
   d98ba:	4633      	mov	r3, r6
   d98bc:	463d      	mov	r5, r7
   d98be:	9007      	str	r0, [sp, #28]
   d98c0:	4602      	mov	r2, r0
   d98c2:	2b65      	cmp	r3, #101	; 0x65
   d98c4:	d001      	beq.n	d98ca <_strtod_l+0x182>
   d98c6:	2b45      	cmp	r3, #69	; 0x45
   d98c8:	d118      	bne.n	d98fc <_strtod_l+0x1b4>
   d98ca:	b91d      	cbnz	r5, d98d4 <_strtod_l+0x18c>
   d98cc:	9b04      	ldr	r3, [sp, #16]
   d98ce:	4303      	orrs	r3, r0
   d98d0:	d098      	beq.n	d9804 <_strtod_l+0xbc>
   d98d2:	2500      	movs	r5, #0
   d98d4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d98d8:	f108 0301 	add.w	r3, r8, #1
   d98dc:	931d      	str	r3, [sp, #116]	; 0x74
   d98de:	f898 3001 	ldrb.w	r3, [r8, #1]
   d98e2:	2b2b      	cmp	r3, #43	; 0x2b
   d98e4:	d075      	beq.n	d99d2 <_strtod_l+0x28a>
   d98e6:	2b2d      	cmp	r3, #45	; 0x2d
   d98e8:	d07b      	beq.n	d99e2 <_strtod_l+0x29a>
   d98ea:	f04f 0c00 	mov.w	ip, #0
   d98ee:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d98f2:	2909      	cmp	r1, #9
   d98f4:	f240 8082 	bls.w	d99fc <_strtod_l+0x2b4>
   d98f8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d98fc:	2600      	movs	r6, #0
   d98fe:	e09d      	b.n	d9a3c <_strtod_l+0x2f4>
   d9900:	2300      	movs	r3, #0
   d9902:	e7c4      	b.n	d988e <_strtod_l+0x146>
   d9904:	2f08      	cmp	r7, #8
   d9906:	bfd8      	it	le
   d9908:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d990a:	f100 0001 	add.w	r0, r0, #1
   d990e:	bfda      	itte	le
   d9910:	fb02 3301 	mlale	r3, r2, r1, r3
   d9914:	9309      	strle	r3, [sp, #36]	; 0x24
   d9916:	fb02 3909 	mlagt	r9, r2, r9, r3
   d991a:	3701      	adds	r7, #1
   d991c:	901d      	str	r0, [sp, #116]	; 0x74
   d991e:	e7bf      	b.n	d98a0 <_strtod_l+0x158>
   d9920:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9922:	195a      	adds	r2, r3, r5
   d9924:	921d      	str	r2, [sp, #116]	; 0x74
   d9926:	5d5b      	ldrb	r3, [r3, r5]
   d9928:	2f00      	cmp	r7, #0
   d992a:	d037      	beq.n	d999c <_strtod_l+0x254>
   d992c:	9007      	str	r0, [sp, #28]
   d992e:	463d      	mov	r5, r7
   d9930:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d9934:	2a09      	cmp	r2, #9
   d9936:	d912      	bls.n	d995e <_strtod_l+0x216>
   d9938:	2201      	movs	r2, #1
   d993a:	e7c2      	b.n	d98c2 <_strtod_l+0x17a>
   d993c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d993e:	1c5a      	adds	r2, r3, #1
   d9940:	921d      	str	r2, [sp, #116]	; 0x74
   d9942:	785b      	ldrb	r3, [r3, #1]
   d9944:	3001      	adds	r0, #1
   d9946:	2b30      	cmp	r3, #48	; 0x30
   d9948:	d0f8      	beq.n	d993c <_strtod_l+0x1f4>
   d994a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d994e:	2a08      	cmp	r2, #8
   d9950:	f200 84db 	bhi.w	da30a <_strtod_l+0xbc2>
   d9954:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d9956:	9007      	str	r0, [sp, #28]
   d9958:	2000      	movs	r0, #0
   d995a:	920a      	str	r2, [sp, #40]	; 0x28
   d995c:	4605      	mov	r5, r0
   d995e:	3b30      	subs	r3, #48	; 0x30
   d9960:	f100 0201 	add.w	r2, r0, #1
   d9964:	d014      	beq.n	d9990 <_strtod_l+0x248>
   d9966:	9907      	ldr	r1, [sp, #28]
   d9968:	4411      	add	r1, r2
   d996a:	9107      	str	r1, [sp, #28]
   d996c:	462a      	mov	r2, r5
   d996e:	eb00 0e05 	add.w	lr, r0, r5
   d9972:	210a      	movs	r1, #10
   d9974:	4572      	cmp	r2, lr
   d9976:	d113      	bne.n	d99a0 <_strtod_l+0x258>
   d9978:	182a      	adds	r2, r5, r0
   d997a:	2a08      	cmp	r2, #8
   d997c:	f105 0501 	add.w	r5, r5, #1
   d9980:	4405      	add	r5, r0
   d9982:	dc1c      	bgt.n	d99be <_strtod_l+0x276>
   d9984:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9986:	220a      	movs	r2, #10
   d9988:	fb02 3301 	mla	r3, r2, r1, r3
   d998c:	9309      	str	r3, [sp, #36]	; 0x24
   d998e:	2200      	movs	r2, #0
   d9990:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9992:	1c59      	adds	r1, r3, #1
   d9994:	911d      	str	r1, [sp, #116]	; 0x74
   d9996:	785b      	ldrb	r3, [r3, #1]
   d9998:	4610      	mov	r0, r2
   d999a:	e7c9      	b.n	d9930 <_strtod_l+0x1e8>
   d999c:	4638      	mov	r0, r7
   d999e:	e7d2      	b.n	d9946 <_strtod_l+0x1fe>
   d99a0:	2a08      	cmp	r2, #8
   d99a2:	dc04      	bgt.n	d99ae <_strtod_l+0x266>
   d99a4:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d99a6:	434e      	muls	r6, r1
   d99a8:	9609      	str	r6, [sp, #36]	; 0x24
   d99aa:	3201      	adds	r2, #1
   d99ac:	e7e2      	b.n	d9974 <_strtod_l+0x22c>
   d99ae:	f102 0c01 	add.w	ip, r2, #1
   d99b2:	f1bc 0f10 	cmp.w	ip, #16
   d99b6:	bfd8      	it	le
   d99b8:	fb01 f909 	mulle.w	r9, r1, r9
   d99bc:	e7f5      	b.n	d99aa <_strtod_l+0x262>
   d99be:	2d10      	cmp	r5, #16
   d99c0:	bfdc      	itt	le
   d99c2:	220a      	movle	r2, #10
   d99c4:	fb02 3909 	mlale	r9, r2, r9, r3
   d99c8:	e7e1      	b.n	d998e <_strtod_l+0x246>
   d99ca:	2300      	movs	r3, #0
   d99cc:	9307      	str	r3, [sp, #28]
   d99ce:	2201      	movs	r2, #1
   d99d0:	e77c      	b.n	d98cc <_strtod_l+0x184>
   d99d2:	f04f 0c00 	mov.w	ip, #0
   d99d6:	f108 0302 	add.w	r3, r8, #2
   d99da:	931d      	str	r3, [sp, #116]	; 0x74
   d99dc:	f898 3002 	ldrb.w	r3, [r8, #2]
   d99e0:	e785      	b.n	d98ee <_strtod_l+0x1a6>
   d99e2:	f04f 0c01 	mov.w	ip, #1
   d99e6:	e7f6      	b.n	d99d6 <_strtod_l+0x28e>
   d99e8:	000dc244 	.word	0x000dc244
   d99ec:	000dc0f0 	.word	0x000dc0f0
   d99f0:	7ff00000 	.word	0x7ff00000
   d99f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d99f6:	1c59      	adds	r1, r3, #1
   d99f8:	911d      	str	r1, [sp, #116]	; 0x74
   d99fa:	785b      	ldrb	r3, [r3, #1]
   d99fc:	2b30      	cmp	r3, #48	; 0x30
   d99fe:	d0f9      	beq.n	d99f4 <_strtod_l+0x2ac>
   d9a00:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d9a04:	2908      	cmp	r1, #8
   d9a06:	f63f af79 	bhi.w	d98fc <_strtod_l+0x1b4>
   d9a0a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d9a0e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9a10:	9308      	str	r3, [sp, #32]
   d9a12:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9a14:	1c59      	adds	r1, r3, #1
   d9a16:	911d      	str	r1, [sp, #116]	; 0x74
   d9a18:	785b      	ldrb	r3, [r3, #1]
   d9a1a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d9a1e:	2e09      	cmp	r6, #9
   d9a20:	d937      	bls.n	d9a92 <_strtod_l+0x34a>
   d9a22:	9e08      	ldr	r6, [sp, #32]
   d9a24:	1b89      	subs	r1, r1, r6
   d9a26:	2908      	cmp	r1, #8
   d9a28:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d9a2c:	dc02      	bgt.n	d9a34 <_strtod_l+0x2ec>
   d9a2e:	4576      	cmp	r6, lr
   d9a30:	bfa8      	it	ge
   d9a32:	4676      	movge	r6, lr
   d9a34:	f1bc 0f00 	cmp.w	ip, #0
   d9a38:	d000      	beq.n	d9a3c <_strtod_l+0x2f4>
   d9a3a:	4276      	negs	r6, r6
   d9a3c:	2d00      	cmp	r5, #0
   d9a3e:	d14f      	bne.n	d9ae0 <_strtod_l+0x398>
   d9a40:	9904      	ldr	r1, [sp, #16]
   d9a42:	4301      	orrs	r1, r0
   d9a44:	f47f aec2 	bne.w	d97cc <_strtod_l+0x84>
   d9a48:	2a00      	cmp	r2, #0
   d9a4a:	f47f aedb 	bne.w	d9804 <_strtod_l+0xbc>
   d9a4e:	2b69      	cmp	r3, #105	; 0x69
   d9a50:	d027      	beq.n	d9aa2 <_strtod_l+0x35a>
   d9a52:	dc24      	bgt.n	d9a9e <_strtod_l+0x356>
   d9a54:	2b49      	cmp	r3, #73	; 0x49
   d9a56:	d024      	beq.n	d9aa2 <_strtod_l+0x35a>
   d9a58:	2b4e      	cmp	r3, #78	; 0x4e
   d9a5a:	f47f aed3 	bne.w	d9804 <_strtod_l+0xbc>
   d9a5e:	499e      	ldr	r1, [pc, #632]	; (d9cd8 <_strtod_l+0x590>)
   d9a60:	a81d      	add	r0, sp, #116	; 0x74
   d9a62:	f000 ffb9 	bl	da9d8 <__match>
   d9a66:	2800      	cmp	r0, #0
   d9a68:	f43f aecc 	beq.w	d9804 <_strtod_l+0xbc>
   d9a6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9a6e:	781b      	ldrb	r3, [r3, #0]
   d9a70:	2b28      	cmp	r3, #40	; 0x28
   d9a72:	d12d      	bne.n	d9ad0 <_strtod_l+0x388>
   d9a74:	4999      	ldr	r1, [pc, #612]	; (d9cdc <_strtod_l+0x594>)
   d9a76:	aa20      	add	r2, sp, #128	; 0x80
   d9a78:	a81d      	add	r0, sp, #116	; 0x74
   d9a7a:	f000 ffc1 	bl	daa00 <__hexnan>
   d9a7e:	2805      	cmp	r0, #5
   d9a80:	d126      	bne.n	d9ad0 <_strtod_l+0x388>
   d9a82:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d9a84:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d9a88:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d9a8c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d9a90:	e69c      	b.n	d97cc <_strtod_l+0x84>
   d9a92:	210a      	movs	r1, #10
   d9a94:	fb01 3e0e 	mla	lr, r1, lr, r3
   d9a98:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d9a9c:	e7b9      	b.n	d9a12 <_strtod_l+0x2ca>
   d9a9e:	2b6e      	cmp	r3, #110	; 0x6e
   d9aa0:	e7db      	b.n	d9a5a <_strtod_l+0x312>
   d9aa2:	498f      	ldr	r1, [pc, #572]	; (d9ce0 <_strtod_l+0x598>)
   d9aa4:	a81d      	add	r0, sp, #116	; 0x74
   d9aa6:	f000 ff97 	bl	da9d8 <__match>
   d9aaa:	2800      	cmp	r0, #0
   d9aac:	f43f aeaa 	beq.w	d9804 <_strtod_l+0xbc>
   d9ab0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9ab2:	498c      	ldr	r1, [pc, #560]	; (d9ce4 <_strtod_l+0x59c>)
   d9ab4:	3b01      	subs	r3, #1
   d9ab6:	a81d      	add	r0, sp, #116	; 0x74
   d9ab8:	931d      	str	r3, [sp, #116]	; 0x74
   d9aba:	f000 ff8d 	bl	da9d8 <__match>
   d9abe:	b910      	cbnz	r0, d9ac6 <_strtod_l+0x37e>
   d9ac0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d9ac2:	3301      	adds	r3, #1
   d9ac4:	931d      	str	r3, [sp, #116]	; 0x74
   d9ac6:	f8df b22c 	ldr.w	fp, [pc, #556]	; d9cf4 <_strtod_l+0x5ac>
   d9aca:	f04f 0a00 	mov.w	sl, #0
   d9ace:	e67d      	b.n	d97cc <_strtod_l+0x84>
   d9ad0:	4885      	ldr	r0, [pc, #532]	; (d9ce8 <_strtod_l+0x5a0>)
   d9ad2:	f001 fc91 	bl	db3f8 <nan>
   d9ad6:	ed8d 0b04 	vstr	d0, [sp, #16]
   d9ada:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d9ade:	e675      	b.n	d97cc <_strtod_l+0x84>
   d9ae0:	9b07      	ldr	r3, [sp, #28]
   d9ae2:	9809      	ldr	r0, [sp, #36]	; 0x24
   d9ae4:	1af3      	subs	r3, r6, r3
   d9ae6:	2f00      	cmp	r7, #0
   d9ae8:	bf08      	it	eq
   d9aea:	462f      	moveq	r7, r5
   d9aec:	2d10      	cmp	r5, #16
   d9aee:	9308      	str	r3, [sp, #32]
   d9af0:	46a8      	mov	r8, r5
   d9af2:	bfa8      	it	ge
   d9af4:	f04f 0810 	movge.w	r8, #16
   d9af8:	f7ff f954 	bl	d8da4 <__aeabi_ui2d>
   d9afc:	2d09      	cmp	r5, #9
   d9afe:	4682      	mov	sl, r0
   d9b00:	468b      	mov	fp, r1
   d9b02:	dd13      	ble.n	d9b2c <_strtod_l+0x3e4>
   d9b04:	4b79      	ldr	r3, [pc, #484]	; (d9cec <_strtod_l+0x5a4>)
   d9b06:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d9b0a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d9b0e:	f7ff f9c3 	bl	d8e98 <__aeabi_dmul>
   d9b12:	4682      	mov	sl, r0
   d9b14:	4648      	mov	r0, r9
   d9b16:	468b      	mov	fp, r1
   d9b18:	f7ff f944 	bl	d8da4 <__aeabi_ui2d>
   d9b1c:	4602      	mov	r2, r0
   d9b1e:	460b      	mov	r3, r1
   d9b20:	4650      	mov	r0, sl
   d9b22:	4659      	mov	r1, fp
   d9b24:	f7ff f802 	bl	d8b2c <__adddf3>
   d9b28:	4682      	mov	sl, r0
   d9b2a:	468b      	mov	fp, r1
   d9b2c:	2d0f      	cmp	r5, #15
   d9b2e:	dc38      	bgt.n	d9ba2 <_strtod_l+0x45a>
   d9b30:	9b08      	ldr	r3, [sp, #32]
   d9b32:	2b00      	cmp	r3, #0
   d9b34:	f43f ae4a 	beq.w	d97cc <_strtod_l+0x84>
   d9b38:	dd24      	ble.n	d9b84 <_strtod_l+0x43c>
   d9b3a:	2b16      	cmp	r3, #22
   d9b3c:	dc0b      	bgt.n	d9b56 <_strtod_l+0x40e>
   d9b3e:	4d6b      	ldr	r5, [pc, #428]	; (d9cec <_strtod_l+0x5a4>)
   d9b40:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d9b44:	e9d5 0100 	ldrd	r0, r1, [r5]
   d9b48:	4652      	mov	r2, sl
   d9b4a:	465b      	mov	r3, fp
   d9b4c:	f7ff f9a4 	bl	d8e98 <__aeabi_dmul>
   d9b50:	4682      	mov	sl, r0
   d9b52:	468b      	mov	fp, r1
   d9b54:	e63a      	b.n	d97cc <_strtod_l+0x84>
   d9b56:	9a08      	ldr	r2, [sp, #32]
   d9b58:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d9b5c:	4293      	cmp	r3, r2
   d9b5e:	db20      	blt.n	d9ba2 <_strtod_l+0x45a>
   d9b60:	4c62      	ldr	r4, [pc, #392]	; (d9cec <_strtod_l+0x5a4>)
   d9b62:	f1c5 050f 	rsb	r5, r5, #15
   d9b66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d9b6a:	4652      	mov	r2, sl
   d9b6c:	465b      	mov	r3, fp
   d9b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9b72:	f7ff f991 	bl	d8e98 <__aeabi_dmul>
   d9b76:	9b08      	ldr	r3, [sp, #32]
   d9b78:	1b5d      	subs	r5, r3, r5
   d9b7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d9b7e:	e9d4 2300 	ldrd	r2, r3, [r4]
   d9b82:	e7e3      	b.n	d9b4c <_strtod_l+0x404>
   d9b84:	9b08      	ldr	r3, [sp, #32]
   d9b86:	3316      	adds	r3, #22
   d9b88:	db0b      	blt.n	d9ba2 <_strtod_l+0x45a>
   d9b8a:	9b07      	ldr	r3, [sp, #28]
   d9b8c:	4a57      	ldr	r2, [pc, #348]	; (d9cec <_strtod_l+0x5a4>)
   d9b8e:	1b9e      	subs	r6, r3, r6
   d9b90:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d9b94:	e9d6 2300 	ldrd	r2, r3, [r6]
   d9b98:	4650      	mov	r0, sl
   d9b9a:	4659      	mov	r1, fp
   d9b9c:	f7ff faa6 	bl	d90ec <__aeabi_ddiv>
   d9ba0:	e7d6      	b.n	d9b50 <_strtod_l+0x408>
   d9ba2:	9b08      	ldr	r3, [sp, #32]
   d9ba4:	eba5 0808 	sub.w	r8, r5, r8
   d9ba8:	4498      	add	r8, r3
   d9baa:	f1b8 0f00 	cmp.w	r8, #0
   d9bae:	dd71      	ble.n	d9c94 <_strtod_l+0x54c>
   d9bb0:	f018 030f 	ands.w	r3, r8, #15
   d9bb4:	d00a      	beq.n	d9bcc <_strtod_l+0x484>
   d9bb6:	494d      	ldr	r1, [pc, #308]	; (d9cec <_strtod_l+0x5a4>)
   d9bb8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d9bbc:	4652      	mov	r2, sl
   d9bbe:	465b      	mov	r3, fp
   d9bc0:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9bc4:	f7ff f968 	bl	d8e98 <__aeabi_dmul>
   d9bc8:	4682      	mov	sl, r0
   d9bca:	468b      	mov	fp, r1
   d9bcc:	f038 080f 	bics.w	r8, r8, #15
   d9bd0:	d04d      	beq.n	d9c6e <_strtod_l+0x526>
   d9bd2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d9bd6:	dd22      	ble.n	d9c1e <_strtod_l+0x4d6>
   d9bd8:	2500      	movs	r5, #0
   d9bda:	462e      	mov	r6, r5
   d9bdc:	9509      	str	r5, [sp, #36]	; 0x24
   d9bde:	9507      	str	r5, [sp, #28]
   d9be0:	2322      	movs	r3, #34	; 0x22
   d9be2:	f8df b110 	ldr.w	fp, [pc, #272]	; d9cf4 <_strtod_l+0x5ac>
   d9be6:	6023      	str	r3, [r4, #0]
   d9be8:	f04f 0a00 	mov.w	sl, #0
   d9bec:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9bee:	2b00      	cmp	r3, #0
   d9bf0:	f43f adec 	beq.w	d97cc <_strtod_l+0x84>
   d9bf4:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9bf6:	4620      	mov	r0, r4
   d9bf8:	f000 ffe4 	bl	dabc4 <_Bfree>
   d9bfc:	9907      	ldr	r1, [sp, #28]
   d9bfe:	4620      	mov	r0, r4
   d9c00:	f000 ffe0 	bl	dabc4 <_Bfree>
   d9c04:	4631      	mov	r1, r6
   d9c06:	4620      	mov	r0, r4
   d9c08:	f000 ffdc 	bl	dabc4 <_Bfree>
   d9c0c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d9c0e:	4620      	mov	r0, r4
   d9c10:	f000 ffd8 	bl	dabc4 <_Bfree>
   d9c14:	4629      	mov	r1, r5
   d9c16:	4620      	mov	r0, r4
   d9c18:	f000 ffd4 	bl	dabc4 <_Bfree>
   d9c1c:	e5d6      	b.n	d97cc <_strtod_l+0x84>
   d9c1e:	2300      	movs	r3, #0
   d9c20:	ea4f 1828 	mov.w	r8, r8, asr #4
   d9c24:	4650      	mov	r0, sl
   d9c26:	4659      	mov	r1, fp
   d9c28:	4699      	mov	r9, r3
   d9c2a:	f1b8 0f01 	cmp.w	r8, #1
   d9c2e:	dc21      	bgt.n	d9c74 <_strtod_l+0x52c>
   d9c30:	b10b      	cbz	r3, d9c36 <_strtod_l+0x4ee>
   d9c32:	4682      	mov	sl, r0
   d9c34:	468b      	mov	fp, r1
   d9c36:	4b2e      	ldr	r3, [pc, #184]	; (d9cf0 <_strtod_l+0x5a8>)
   d9c38:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d9c3c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d9c40:	4652      	mov	r2, sl
   d9c42:	465b      	mov	r3, fp
   d9c44:	e9d9 0100 	ldrd	r0, r1, [r9]
   d9c48:	f7ff f926 	bl	d8e98 <__aeabi_dmul>
   d9c4c:	4b29      	ldr	r3, [pc, #164]	; (d9cf4 <_strtod_l+0x5ac>)
   d9c4e:	460a      	mov	r2, r1
   d9c50:	400b      	ands	r3, r1
   d9c52:	4929      	ldr	r1, [pc, #164]	; (d9cf8 <_strtod_l+0x5b0>)
   d9c54:	428b      	cmp	r3, r1
   d9c56:	4682      	mov	sl, r0
   d9c58:	d8be      	bhi.n	d9bd8 <_strtod_l+0x490>
   d9c5a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d9c5e:	428b      	cmp	r3, r1
   d9c60:	bf86      	itte	hi
   d9c62:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d9cfc <_strtod_l+0x5b4>
   d9c66:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d9c6a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d9c6e:	2300      	movs	r3, #0
   d9c70:	9304      	str	r3, [sp, #16]
   d9c72:	e081      	b.n	d9d78 <_strtod_l+0x630>
   d9c74:	f018 0f01 	tst.w	r8, #1
   d9c78:	d007      	beq.n	d9c8a <_strtod_l+0x542>
   d9c7a:	4b1d      	ldr	r3, [pc, #116]	; (d9cf0 <_strtod_l+0x5a8>)
   d9c7c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d9c80:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9c84:	f7ff f908 	bl	d8e98 <__aeabi_dmul>
   d9c88:	2301      	movs	r3, #1
   d9c8a:	f109 0901 	add.w	r9, r9, #1
   d9c8e:	ea4f 0868 	mov.w	r8, r8, asr #1
   d9c92:	e7ca      	b.n	d9c2a <_strtod_l+0x4e2>
   d9c94:	d0eb      	beq.n	d9c6e <_strtod_l+0x526>
   d9c96:	f1c8 0800 	rsb	r8, r8, #0
   d9c9a:	f018 020f 	ands.w	r2, r8, #15
   d9c9e:	d00a      	beq.n	d9cb6 <_strtod_l+0x56e>
   d9ca0:	4b12      	ldr	r3, [pc, #72]	; (d9cec <_strtod_l+0x5a4>)
   d9ca2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d9ca6:	4650      	mov	r0, sl
   d9ca8:	4659      	mov	r1, fp
   d9caa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9cae:	f7ff fa1d 	bl	d90ec <__aeabi_ddiv>
   d9cb2:	4682      	mov	sl, r0
   d9cb4:	468b      	mov	fp, r1
   d9cb6:	ea5f 1828 	movs.w	r8, r8, asr #4
   d9cba:	d0d8      	beq.n	d9c6e <_strtod_l+0x526>
   d9cbc:	f1b8 0f1f 	cmp.w	r8, #31
   d9cc0:	dd1e      	ble.n	d9d00 <_strtod_l+0x5b8>
   d9cc2:	2500      	movs	r5, #0
   d9cc4:	462e      	mov	r6, r5
   d9cc6:	9509      	str	r5, [sp, #36]	; 0x24
   d9cc8:	9507      	str	r5, [sp, #28]
   d9cca:	2322      	movs	r3, #34	; 0x22
   d9ccc:	f04f 0a00 	mov.w	sl, #0
   d9cd0:	f04f 0b00 	mov.w	fp, #0
   d9cd4:	6023      	str	r3, [r4, #0]
   d9cd6:	e789      	b.n	d9bec <_strtod_l+0x4a4>
   d9cd8:	000dc0eb 	.word	0x000dc0eb
   d9cdc:	000dc104 	.word	0x000dc104
   d9ce0:	000dc0e2 	.word	0x000dc0e2
   d9ce4:	000dc0e5 	.word	0x000dc0e5
   d9ce8:	000dc0a8 	.word	0x000dc0a8
   d9cec:	000dc280 	.word	0x000dc280
   d9cf0:	000dc258 	.word	0x000dc258
   d9cf4:	7ff00000 	.word	0x7ff00000
   d9cf8:	7ca00000 	.word	0x7ca00000
   d9cfc:	7fefffff 	.word	0x7fefffff
   d9d00:	f018 0310 	ands.w	r3, r8, #16
   d9d04:	bf18      	it	ne
   d9d06:	236a      	movne	r3, #106	; 0x6a
   d9d08:	f8df 93b4 	ldr.w	r9, [pc, #948]	; da0c0 <_strtod_l+0x978>
   d9d0c:	9304      	str	r3, [sp, #16]
   d9d0e:	4650      	mov	r0, sl
   d9d10:	4659      	mov	r1, fp
   d9d12:	2300      	movs	r3, #0
   d9d14:	f018 0f01 	tst.w	r8, #1
   d9d18:	d004      	beq.n	d9d24 <_strtod_l+0x5dc>
   d9d1a:	e9d9 2300 	ldrd	r2, r3, [r9]
   d9d1e:	f7ff f8bb 	bl	d8e98 <__aeabi_dmul>
   d9d22:	2301      	movs	r3, #1
   d9d24:	ea5f 0868 	movs.w	r8, r8, asr #1
   d9d28:	f109 0908 	add.w	r9, r9, #8
   d9d2c:	d1f2      	bne.n	d9d14 <_strtod_l+0x5cc>
   d9d2e:	b10b      	cbz	r3, d9d34 <_strtod_l+0x5ec>
   d9d30:	4682      	mov	sl, r0
   d9d32:	468b      	mov	fp, r1
   d9d34:	9b04      	ldr	r3, [sp, #16]
   d9d36:	b1bb      	cbz	r3, d9d68 <_strtod_l+0x620>
   d9d38:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d9d3c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d9d40:	2b00      	cmp	r3, #0
   d9d42:	4659      	mov	r1, fp
   d9d44:	dd10      	ble.n	d9d68 <_strtod_l+0x620>
   d9d46:	2b1f      	cmp	r3, #31
   d9d48:	f340 8128 	ble.w	d9f9c <_strtod_l+0x854>
   d9d4c:	2b34      	cmp	r3, #52	; 0x34
   d9d4e:	bfde      	ittt	le
   d9d50:	3b20      	suble	r3, #32
   d9d52:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d9d56:	fa02 f303 	lslle.w	r3, r2, r3
   d9d5a:	f04f 0a00 	mov.w	sl, #0
   d9d5e:	bfcc      	ite	gt
   d9d60:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d9d64:	ea03 0b01 	andle.w	fp, r3, r1
   d9d68:	2200      	movs	r2, #0
   d9d6a:	2300      	movs	r3, #0
   d9d6c:	4650      	mov	r0, sl
   d9d6e:	4659      	mov	r1, fp
   d9d70:	f7ff fafa 	bl	d9368 <__aeabi_dcmpeq>
   d9d74:	2800      	cmp	r0, #0
   d9d76:	d1a4      	bne.n	d9cc2 <_strtod_l+0x57a>
   d9d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9d7a:	9300      	str	r3, [sp, #0]
   d9d7c:	990a      	ldr	r1, [sp, #40]	; 0x28
   d9d7e:	462b      	mov	r3, r5
   d9d80:	463a      	mov	r2, r7
   d9d82:	4620      	mov	r0, r4
   d9d84:	f000 ff73 	bl	dac6e <__s2b>
   d9d88:	9009      	str	r0, [sp, #36]	; 0x24
   d9d8a:	2800      	cmp	r0, #0
   d9d8c:	f43f af24 	beq.w	d9bd8 <_strtod_l+0x490>
   d9d90:	9b07      	ldr	r3, [sp, #28]
   d9d92:	1b9e      	subs	r6, r3, r6
   d9d94:	9b08      	ldr	r3, [sp, #32]
   d9d96:	2b00      	cmp	r3, #0
   d9d98:	bfb4      	ite	lt
   d9d9a:	4633      	movlt	r3, r6
   d9d9c:	2300      	movge	r3, #0
   d9d9e:	9310      	str	r3, [sp, #64]	; 0x40
   d9da0:	9b08      	ldr	r3, [sp, #32]
   d9da2:	2500      	movs	r5, #0
   d9da4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d9da8:	9318      	str	r3, [sp, #96]	; 0x60
   d9daa:	462e      	mov	r6, r5
   d9dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9dae:	4620      	mov	r0, r4
   d9db0:	6859      	ldr	r1, [r3, #4]
   d9db2:	f000 fed3 	bl	dab5c <_Balloc>
   d9db6:	9007      	str	r0, [sp, #28]
   d9db8:	2800      	cmp	r0, #0
   d9dba:	f43f af11 	beq.w	d9be0 <_strtod_l+0x498>
   d9dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d9dc0:	691a      	ldr	r2, [r3, #16]
   d9dc2:	3202      	adds	r2, #2
   d9dc4:	f103 010c 	add.w	r1, r3, #12
   d9dc8:	0092      	lsls	r2, r2, #2
   d9dca:	300c      	adds	r0, #12
   d9dcc:	f7ff fbf0 	bl	d95b0 <memcpy>
   d9dd0:	ec4b ab10 	vmov	d0, sl, fp
   d9dd4:	aa20      	add	r2, sp, #128	; 0x80
   d9dd6:	a91f      	add	r1, sp, #124	; 0x7c
   d9dd8:	4620      	mov	r0, r4
   d9dda:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   d9dde:	f001 fa35 	bl	db24c <__d2b>
   d9de2:	901e      	str	r0, [sp, #120]	; 0x78
   d9de4:	2800      	cmp	r0, #0
   d9de6:	f43f aefb 	beq.w	d9be0 <_strtod_l+0x498>
   d9dea:	2101      	movs	r1, #1
   d9dec:	4620      	mov	r0, r4
   d9dee:	f000 ffcc 	bl	dad8a <__i2b>
   d9df2:	4606      	mov	r6, r0
   d9df4:	2800      	cmp	r0, #0
   d9df6:	f43f aef3 	beq.w	d9be0 <_strtod_l+0x498>
   d9dfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d9dfc:	9904      	ldr	r1, [sp, #16]
   d9dfe:	2b00      	cmp	r3, #0
   d9e00:	bfab      	itete	ge
   d9e02:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   d9e04:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   d9e06:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   d9e08:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   d9e0c:	bfac      	ite	ge
   d9e0e:	eb03 0902 	addge.w	r9, r3, r2
   d9e12:	1ad7      	sublt	r7, r2, r3
   d9e14:	9a20      	ldr	r2, [sp, #128]	; 0x80
   d9e16:	eba3 0801 	sub.w	r8, r3, r1
   d9e1a:	4490      	add	r8, r2
   d9e1c:	4ba3      	ldr	r3, [pc, #652]	; (da0ac <_strtod_l+0x964>)
   d9e1e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d9e22:	4598      	cmp	r8, r3
   d9e24:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   d9e28:	f280 80cc 	bge.w	d9fc4 <_strtod_l+0x87c>
   d9e2c:	eba3 0308 	sub.w	r3, r3, r8
   d9e30:	2b1f      	cmp	r3, #31
   d9e32:	eba2 0203 	sub.w	r2, r2, r3
   d9e36:	f04f 0101 	mov.w	r1, #1
   d9e3a:	f300 80b6 	bgt.w	d9faa <_strtod_l+0x862>
   d9e3e:	fa01 f303 	lsl.w	r3, r1, r3
   d9e42:	9311      	str	r3, [sp, #68]	; 0x44
   d9e44:	2300      	movs	r3, #0
   d9e46:	930c      	str	r3, [sp, #48]	; 0x30
   d9e48:	eb09 0802 	add.w	r8, r9, r2
   d9e4c:	9b04      	ldr	r3, [sp, #16]
   d9e4e:	45c1      	cmp	r9, r8
   d9e50:	4417      	add	r7, r2
   d9e52:	441f      	add	r7, r3
   d9e54:	464b      	mov	r3, r9
   d9e56:	bfa8      	it	ge
   d9e58:	4643      	movge	r3, r8
   d9e5a:	42bb      	cmp	r3, r7
   d9e5c:	bfa8      	it	ge
   d9e5e:	463b      	movge	r3, r7
   d9e60:	2b00      	cmp	r3, #0
   d9e62:	bfc2      	ittt	gt
   d9e64:	eba8 0803 	subgt.w	r8, r8, r3
   d9e68:	1aff      	subgt	r7, r7, r3
   d9e6a:	eba9 0903 	subgt.w	r9, r9, r3
   d9e6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d9e70:	2b00      	cmp	r3, #0
   d9e72:	dd17      	ble.n	d9ea4 <_strtod_l+0x75c>
   d9e74:	4631      	mov	r1, r6
   d9e76:	461a      	mov	r2, r3
   d9e78:	4620      	mov	r0, r4
   d9e7a:	f001 f82b 	bl	daed4 <__pow5mult>
   d9e7e:	4606      	mov	r6, r0
   d9e80:	2800      	cmp	r0, #0
   d9e82:	f43f aead 	beq.w	d9be0 <_strtod_l+0x498>
   d9e86:	4601      	mov	r1, r0
   d9e88:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d9e8a:	4620      	mov	r0, r4
   d9e8c:	f000 ff86 	bl	dad9c <__multiply>
   d9e90:	900f      	str	r0, [sp, #60]	; 0x3c
   d9e92:	2800      	cmp	r0, #0
   d9e94:	f43f aea4 	beq.w	d9be0 <_strtod_l+0x498>
   d9e98:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9e9a:	4620      	mov	r0, r4
   d9e9c:	f000 fe92 	bl	dabc4 <_Bfree>
   d9ea0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9ea2:	931e      	str	r3, [sp, #120]	; 0x78
   d9ea4:	f1b8 0f00 	cmp.w	r8, #0
   d9ea8:	f300 8091 	bgt.w	d9fce <_strtod_l+0x886>
   d9eac:	9b08      	ldr	r3, [sp, #32]
   d9eae:	2b00      	cmp	r3, #0
   d9eb0:	dd08      	ble.n	d9ec4 <_strtod_l+0x77c>
   d9eb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d9eb4:	9907      	ldr	r1, [sp, #28]
   d9eb6:	4620      	mov	r0, r4
   d9eb8:	f001 f80c 	bl	daed4 <__pow5mult>
   d9ebc:	9007      	str	r0, [sp, #28]
   d9ebe:	2800      	cmp	r0, #0
   d9ec0:	f43f ae8e 	beq.w	d9be0 <_strtod_l+0x498>
   d9ec4:	2f00      	cmp	r7, #0
   d9ec6:	dd08      	ble.n	d9eda <_strtod_l+0x792>
   d9ec8:	9907      	ldr	r1, [sp, #28]
   d9eca:	463a      	mov	r2, r7
   d9ecc:	4620      	mov	r0, r4
   d9ece:	f001 f84f 	bl	daf70 <__lshift>
   d9ed2:	9007      	str	r0, [sp, #28]
   d9ed4:	2800      	cmp	r0, #0
   d9ed6:	f43f ae83 	beq.w	d9be0 <_strtod_l+0x498>
   d9eda:	f1b9 0f00 	cmp.w	r9, #0
   d9ede:	dd08      	ble.n	d9ef2 <_strtod_l+0x7aa>
   d9ee0:	4631      	mov	r1, r6
   d9ee2:	464a      	mov	r2, r9
   d9ee4:	4620      	mov	r0, r4
   d9ee6:	f001 f843 	bl	daf70 <__lshift>
   d9eea:	4606      	mov	r6, r0
   d9eec:	2800      	cmp	r0, #0
   d9eee:	f43f ae77 	beq.w	d9be0 <_strtod_l+0x498>
   d9ef2:	9a07      	ldr	r2, [sp, #28]
   d9ef4:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9ef6:	4620      	mov	r0, r4
   d9ef8:	f001 f8b5 	bl	db066 <__mdiff>
   d9efc:	4605      	mov	r5, r0
   d9efe:	2800      	cmp	r0, #0
   d9f00:	f43f ae6e 	beq.w	d9be0 <_strtod_l+0x498>
   d9f04:	68c3      	ldr	r3, [r0, #12]
   d9f06:	930f      	str	r3, [sp, #60]	; 0x3c
   d9f08:	2300      	movs	r3, #0
   d9f0a:	60c3      	str	r3, [r0, #12]
   d9f0c:	4631      	mov	r1, r6
   d9f0e:	f001 f88e 	bl	db02e <__mcmp>
   d9f12:	2800      	cmp	r0, #0
   d9f14:	da65      	bge.n	d9fe2 <_strtod_l+0x89a>
   d9f16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d9f18:	ea53 030a 	orrs.w	r3, r3, sl
   d9f1c:	f040 8087 	bne.w	da02e <_strtod_l+0x8e6>
   d9f20:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9f24:	2b00      	cmp	r3, #0
   d9f26:	f040 8082 	bne.w	da02e <_strtod_l+0x8e6>
   d9f2a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d9f2e:	0d1b      	lsrs	r3, r3, #20
   d9f30:	051b      	lsls	r3, r3, #20
   d9f32:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d9f36:	d97a      	bls.n	da02e <_strtod_l+0x8e6>
   d9f38:	696b      	ldr	r3, [r5, #20]
   d9f3a:	b913      	cbnz	r3, d9f42 <_strtod_l+0x7fa>
   d9f3c:	692b      	ldr	r3, [r5, #16]
   d9f3e:	2b01      	cmp	r3, #1
   d9f40:	dd75      	ble.n	da02e <_strtod_l+0x8e6>
   d9f42:	4629      	mov	r1, r5
   d9f44:	2201      	movs	r2, #1
   d9f46:	4620      	mov	r0, r4
   d9f48:	f001 f812 	bl	daf70 <__lshift>
   d9f4c:	4631      	mov	r1, r6
   d9f4e:	4605      	mov	r5, r0
   d9f50:	f001 f86d 	bl	db02e <__mcmp>
   d9f54:	2800      	cmp	r0, #0
   d9f56:	dd6a      	ble.n	da02e <_strtod_l+0x8e6>
   d9f58:	9904      	ldr	r1, [sp, #16]
   d9f5a:	4a55      	ldr	r2, [pc, #340]	; (da0b0 <_strtod_l+0x968>)
   d9f5c:	465b      	mov	r3, fp
   d9f5e:	2900      	cmp	r1, #0
   d9f60:	f000 8085 	beq.w	da06e <_strtod_l+0x926>
   d9f64:	ea02 010b 	and.w	r1, r2, fp
   d9f68:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   d9f6c:	dc7f      	bgt.n	da06e <_strtod_l+0x926>
   d9f6e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   d9f72:	f77f aeaa 	ble.w	d9cca <_strtod_l+0x582>
   d9f76:	4a4f      	ldr	r2, [pc, #316]	; (da0b4 <_strtod_l+0x96c>)
   d9f78:	2300      	movs	r3, #0
   d9f7a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   d9f7e:	4650      	mov	r0, sl
   d9f80:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   d9f84:	4659      	mov	r1, fp
   d9f86:	f7fe ff87 	bl	d8e98 <__aeabi_dmul>
   d9f8a:	460b      	mov	r3, r1
   d9f8c:	4303      	orrs	r3, r0
   d9f8e:	bf08      	it	eq
   d9f90:	2322      	moveq	r3, #34	; 0x22
   d9f92:	4682      	mov	sl, r0
   d9f94:	468b      	mov	fp, r1
   d9f96:	bf08      	it	eq
   d9f98:	6023      	streq	r3, [r4, #0]
   d9f9a:	e62b      	b.n	d9bf4 <_strtod_l+0x4ac>
   d9f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9fa0:	fa02 f303 	lsl.w	r3, r2, r3
   d9fa4:	ea03 0a0a 	and.w	sl, r3, sl
   d9fa8:	e6de      	b.n	d9d68 <_strtod_l+0x620>
   d9faa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   d9fae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   d9fb2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   d9fb6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   d9fba:	fa01 f308 	lsl.w	r3, r1, r8
   d9fbe:	930c      	str	r3, [sp, #48]	; 0x30
   d9fc0:	9111      	str	r1, [sp, #68]	; 0x44
   d9fc2:	e741      	b.n	d9e48 <_strtod_l+0x700>
   d9fc4:	2300      	movs	r3, #0
   d9fc6:	930c      	str	r3, [sp, #48]	; 0x30
   d9fc8:	2301      	movs	r3, #1
   d9fca:	9311      	str	r3, [sp, #68]	; 0x44
   d9fcc:	e73c      	b.n	d9e48 <_strtod_l+0x700>
   d9fce:	991e      	ldr	r1, [sp, #120]	; 0x78
   d9fd0:	4642      	mov	r2, r8
   d9fd2:	4620      	mov	r0, r4
   d9fd4:	f000 ffcc 	bl	daf70 <__lshift>
   d9fd8:	901e      	str	r0, [sp, #120]	; 0x78
   d9fda:	2800      	cmp	r0, #0
   d9fdc:	f47f af66 	bne.w	d9eac <_strtod_l+0x764>
   d9fe0:	e5fe      	b.n	d9be0 <_strtod_l+0x498>
   d9fe2:	465f      	mov	r7, fp
   d9fe4:	d16e      	bne.n	da0c4 <_strtod_l+0x97c>
   d9fe6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d9fe8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d9fec:	b342      	cbz	r2, da040 <_strtod_l+0x8f8>
   d9fee:	4a32      	ldr	r2, [pc, #200]	; (da0b8 <_strtod_l+0x970>)
   d9ff0:	4293      	cmp	r3, r2
   d9ff2:	d128      	bne.n	da046 <_strtod_l+0x8fe>
   d9ff4:	9b04      	ldr	r3, [sp, #16]
   d9ff6:	4650      	mov	r0, sl
   d9ff8:	b1eb      	cbz	r3, da036 <_strtod_l+0x8ee>
   d9ffa:	4a2d      	ldr	r2, [pc, #180]	; (da0b0 <_strtod_l+0x968>)
   d9ffc:	403a      	ands	r2, r7
   d9ffe:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   da002:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   da006:	d819      	bhi.n	da03c <_strtod_l+0x8f4>
   da008:	0d12      	lsrs	r2, r2, #20
   da00a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   da00e:	fa01 f303 	lsl.w	r3, r1, r3
   da012:	4298      	cmp	r0, r3
   da014:	d117      	bne.n	da046 <_strtod_l+0x8fe>
   da016:	4b29      	ldr	r3, [pc, #164]	; (da0bc <_strtod_l+0x974>)
   da018:	429f      	cmp	r7, r3
   da01a:	d102      	bne.n	da022 <_strtod_l+0x8da>
   da01c:	3001      	adds	r0, #1
   da01e:	f43f addf 	beq.w	d9be0 <_strtod_l+0x498>
   da022:	4b23      	ldr	r3, [pc, #140]	; (da0b0 <_strtod_l+0x968>)
   da024:	403b      	ands	r3, r7
   da026:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   da02a:	f04f 0a00 	mov.w	sl, #0
   da02e:	9b04      	ldr	r3, [sp, #16]
   da030:	2b00      	cmp	r3, #0
   da032:	d1a0      	bne.n	d9f76 <_strtod_l+0x82e>
   da034:	e5de      	b.n	d9bf4 <_strtod_l+0x4ac>
   da036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   da03a:	e7ea      	b.n	da012 <_strtod_l+0x8ca>
   da03c:	460b      	mov	r3, r1
   da03e:	e7e8      	b.n	da012 <_strtod_l+0x8ca>
   da040:	ea53 030a 	orrs.w	r3, r3, sl
   da044:	d088      	beq.n	d9f58 <_strtod_l+0x810>
   da046:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   da048:	b1db      	cbz	r3, da082 <_strtod_l+0x93a>
   da04a:	423b      	tst	r3, r7
   da04c:	d0ef      	beq.n	da02e <_strtod_l+0x8e6>
   da04e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da050:	9a04      	ldr	r2, [sp, #16]
   da052:	4650      	mov	r0, sl
   da054:	4659      	mov	r1, fp
   da056:	b1c3      	cbz	r3, da08a <_strtod_l+0x942>
   da058:	f7ff fb5a 	bl	d9710 <sulp>
   da05c:	4602      	mov	r2, r0
   da05e:	460b      	mov	r3, r1
   da060:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   da064:	f7fe fd62 	bl	d8b2c <__adddf3>
   da068:	4682      	mov	sl, r0
   da06a:	468b      	mov	fp, r1
   da06c:	e7df      	b.n	da02e <_strtod_l+0x8e6>
   da06e:	4013      	ands	r3, r2
   da070:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   da074:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   da078:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   da07c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   da080:	e7d5      	b.n	da02e <_strtod_l+0x8e6>
   da082:	9b11      	ldr	r3, [sp, #68]	; 0x44
   da084:	ea13 0f0a 	tst.w	r3, sl
   da088:	e7e0      	b.n	da04c <_strtod_l+0x904>
   da08a:	f7ff fb41 	bl	d9710 <sulp>
   da08e:	4602      	mov	r2, r0
   da090:	460b      	mov	r3, r1
   da092:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   da096:	f7fe fd47 	bl	d8b28 <__aeabi_dsub>
   da09a:	2200      	movs	r2, #0
   da09c:	2300      	movs	r3, #0
   da09e:	4682      	mov	sl, r0
   da0a0:	468b      	mov	fp, r1
   da0a2:	f7ff f961 	bl	d9368 <__aeabi_dcmpeq>
   da0a6:	2800      	cmp	r0, #0
   da0a8:	d0c1      	beq.n	da02e <_strtod_l+0x8e6>
   da0aa:	e60e      	b.n	d9cca <_strtod_l+0x582>
   da0ac:	fffffc02 	.word	0xfffffc02
   da0b0:	7ff00000 	.word	0x7ff00000
   da0b4:	39500000 	.word	0x39500000
   da0b8:	000fffff 	.word	0x000fffff
   da0bc:	7fefffff 	.word	0x7fefffff
   da0c0:	000dc118 	.word	0x000dc118
   da0c4:	4631      	mov	r1, r6
   da0c6:	4628      	mov	r0, r5
   da0c8:	f001 f910 	bl	db2ec <__ratio>
   da0cc:	ec59 8b10 	vmov	r8, r9, d0
   da0d0:	ee10 0a10 	vmov	r0, s0
   da0d4:	2200      	movs	r2, #0
   da0d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   da0da:	4649      	mov	r1, r9
   da0dc:	f7ff f958 	bl	d9390 <__aeabi_dcmple>
   da0e0:	2800      	cmp	r0, #0
   da0e2:	d07c      	beq.n	da1de <_strtod_l+0xa96>
   da0e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da0e6:	2b00      	cmp	r3, #0
   da0e8:	d04c      	beq.n	da184 <_strtod_l+0xa3c>
   da0ea:	4b95      	ldr	r3, [pc, #596]	; (da340 <_strtod_l+0xbf8>)
   da0ec:	2200      	movs	r2, #0
   da0ee:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   da0f2:	f8df 924c 	ldr.w	r9, [pc, #588]	; da340 <_strtod_l+0xbf8>
   da0f6:	f04f 0800 	mov.w	r8, #0
   da0fa:	4b92      	ldr	r3, [pc, #584]	; (da344 <_strtod_l+0xbfc>)
   da0fc:	403b      	ands	r3, r7
   da0fe:	9311      	str	r3, [sp, #68]	; 0x44
   da100:	9a11      	ldr	r2, [sp, #68]	; 0x44
   da102:	4b91      	ldr	r3, [pc, #580]	; (da348 <_strtod_l+0xc00>)
   da104:	429a      	cmp	r2, r3
   da106:	f040 80b2 	bne.w	da26e <_strtod_l+0xb26>
   da10a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   da10e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   da112:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   da116:	ec4b ab10 	vmov	d0, sl, fp
   da11a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   da11e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   da122:	f001 f817 	bl	db154 <__ulp>
   da126:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   da12a:	ec53 2b10 	vmov	r2, r3, d0
   da12e:	f7fe feb3 	bl	d8e98 <__aeabi_dmul>
   da132:	4652      	mov	r2, sl
   da134:	465b      	mov	r3, fp
   da136:	f7fe fcf9 	bl	d8b2c <__adddf3>
   da13a:	460b      	mov	r3, r1
   da13c:	4981      	ldr	r1, [pc, #516]	; (da344 <_strtod_l+0xbfc>)
   da13e:	4a83      	ldr	r2, [pc, #524]	; (da34c <_strtod_l+0xc04>)
   da140:	4019      	ands	r1, r3
   da142:	4291      	cmp	r1, r2
   da144:	4682      	mov	sl, r0
   da146:	d95e      	bls.n	da206 <_strtod_l+0xabe>
   da148:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   da14a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   da14e:	4293      	cmp	r3, r2
   da150:	d103      	bne.n	da15a <_strtod_l+0xa12>
   da152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   da154:	3301      	adds	r3, #1
   da156:	f43f ad43 	beq.w	d9be0 <_strtod_l+0x498>
   da15a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; da358 <_strtod_l+0xc10>
   da15e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   da162:	991e      	ldr	r1, [sp, #120]	; 0x78
   da164:	4620      	mov	r0, r4
   da166:	f000 fd2d 	bl	dabc4 <_Bfree>
   da16a:	9907      	ldr	r1, [sp, #28]
   da16c:	4620      	mov	r0, r4
   da16e:	f000 fd29 	bl	dabc4 <_Bfree>
   da172:	4631      	mov	r1, r6
   da174:	4620      	mov	r0, r4
   da176:	f000 fd25 	bl	dabc4 <_Bfree>
   da17a:	4629      	mov	r1, r5
   da17c:	4620      	mov	r0, r4
   da17e:	f000 fd21 	bl	dabc4 <_Bfree>
   da182:	e613      	b.n	d9dac <_strtod_l+0x664>
   da184:	f1ba 0f00 	cmp.w	sl, #0
   da188:	d11b      	bne.n	da1c2 <_strtod_l+0xa7a>
   da18a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da18e:	b9f3      	cbnz	r3, da1ce <_strtod_l+0xa86>
   da190:	4b6b      	ldr	r3, [pc, #428]	; (da340 <_strtod_l+0xbf8>)
   da192:	2200      	movs	r2, #0
   da194:	4640      	mov	r0, r8
   da196:	4649      	mov	r1, r9
   da198:	f7ff f8f0 	bl	d937c <__aeabi_dcmplt>
   da19c:	b9d0      	cbnz	r0, da1d4 <_strtod_l+0xa8c>
   da19e:	4640      	mov	r0, r8
   da1a0:	4649      	mov	r1, r9
   da1a2:	4b6b      	ldr	r3, [pc, #428]	; (da350 <_strtod_l+0xc08>)
   da1a4:	2200      	movs	r2, #0
   da1a6:	f7fe fe77 	bl	d8e98 <__aeabi_dmul>
   da1aa:	4680      	mov	r8, r0
   da1ac:	4689      	mov	r9, r1
   da1ae:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   da1b2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   da1b6:	931b      	str	r3, [sp, #108]	; 0x6c
   da1b8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   da1bc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   da1c0:	e79b      	b.n	da0fa <_strtod_l+0x9b2>
   da1c2:	f1ba 0f01 	cmp.w	sl, #1
   da1c6:	d102      	bne.n	da1ce <_strtod_l+0xa86>
   da1c8:	2f00      	cmp	r7, #0
   da1ca:	f43f ad7e 	beq.w	d9cca <_strtod_l+0x582>
   da1ce:	4b61      	ldr	r3, [pc, #388]	; (da354 <_strtod_l+0xc0c>)
   da1d0:	2200      	movs	r2, #0
   da1d2:	e78c      	b.n	da0ee <_strtod_l+0x9a6>
   da1d4:	f8df 9178 	ldr.w	r9, [pc, #376]	; da350 <_strtod_l+0xc08>
   da1d8:	f04f 0800 	mov.w	r8, #0
   da1dc:	e7e7      	b.n	da1ae <_strtod_l+0xa66>
   da1de:	4b5c      	ldr	r3, [pc, #368]	; (da350 <_strtod_l+0xc08>)
   da1e0:	4640      	mov	r0, r8
   da1e2:	4649      	mov	r1, r9
   da1e4:	2200      	movs	r2, #0
   da1e6:	f7fe fe57 	bl	d8e98 <__aeabi_dmul>
   da1ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da1ec:	4680      	mov	r8, r0
   da1ee:	4689      	mov	r9, r1
   da1f0:	b933      	cbnz	r3, da200 <_strtod_l+0xab8>
   da1f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da1f6:	9012      	str	r0, [sp, #72]	; 0x48
   da1f8:	9313      	str	r3, [sp, #76]	; 0x4c
   da1fa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   da1fe:	e7dd      	b.n	da1bc <_strtod_l+0xa74>
   da200:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   da204:	e7f9      	b.n	da1fa <_strtod_l+0xab2>
   da206:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   da20a:	9b04      	ldr	r3, [sp, #16]
   da20c:	2b00      	cmp	r3, #0
   da20e:	d1a8      	bne.n	da162 <_strtod_l+0xa1a>
   da210:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   da214:	9a11      	ldr	r2, [sp, #68]	; 0x44
   da216:	0d1b      	lsrs	r3, r3, #20
   da218:	051b      	lsls	r3, r3, #20
   da21a:	429a      	cmp	r2, r3
   da21c:	d1a1      	bne.n	da162 <_strtod_l+0xa1a>
   da21e:	4640      	mov	r0, r8
   da220:	4649      	mov	r1, r9
   da222:	f001 f8ff 	bl	db424 <__aeabi_d2lz>
   da226:	f7fe fe09 	bl	d8e3c <__aeabi_l2d>
   da22a:	4602      	mov	r2, r0
   da22c:	460b      	mov	r3, r1
   da22e:	4640      	mov	r0, r8
   da230:	4649      	mov	r1, r9
   da232:	f7fe fc79 	bl	d8b28 <__aeabi_dsub>
   da236:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   da238:	f3cb 0313 	ubfx	r3, fp, #0, #20
   da23c:	ea43 030a 	orr.w	r3, r3, sl
   da240:	4313      	orrs	r3, r2
   da242:	4680      	mov	r8, r0
   da244:	4689      	mov	r9, r1
   da246:	d053      	beq.n	da2f0 <_strtod_l+0xba8>
   da248:	a335      	add	r3, pc, #212	; (adr r3, da320 <_strtod_l+0xbd8>)
   da24a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da24e:	f7ff f895 	bl	d937c <__aeabi_dcmplt>
   da252:	2800      	cmp	r0, #0
   da254:	f47f acce 	bne.w	d9bf4 <_strtod_l+0x4ac>
   da258:	a333      	add	r3, pc, #204	; (adr r3, da328 <_strtod_l+0xbe0>)
   da25a:	e9d3 2300 	ldrd	r2, r3, [r3]
   da25e:	4640      	mov	r0, r8
   da260:	4649      	mov	r1, r9
   da262:	f7ff f8a9 	bl	d93b8 <__aeabi_dcmpgt>
   da266:	2800      	cmp	r0, #0
   da268:	f43f af7b 	beq.w	da162 <_strtod_l+0xa1a>
   da26c:	e4c2      	b.n	d9bf4 <_strtod_l+0x4ac>
   da26e:	9b04      	ldr	r3, [sp, #16]
   da270:	b333      	cbz	r3, da2c0 <_strtod_l+0xb78>
   da272:	9b11      	ldr	r3, [sp, #68]	; 0x44
   da274:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   da278:	d822      	bhi.n	da2c0 <_strtod_l+0xb78>
   da27a:	a32d      	add	r3, pc, #180	; (adr r3, da330 <_strtod_l+0xbe8>)
   da27c:	e9d3 2300 	ldrd	r2, r3, [r3]
   da280:	4640      	mov	r0, r8
   da282:	4649      	mov	r1, r9
   da284:	f7ff f884 	bl	d9390 <__aeabi_dcmple>
   da288:	b1a0      	cbz	r0, da2b4 <_strtod_l+0xb6c>
   da28a:	4649      	mov	r1, r9
   da28c:	4640      	mov	r0, r8
   da28e:	f7ff f8b3 	bl	d93f8 <__aeabi_d2uiz>
   da292:	2801      	cmp	r0, #1
   da294:	bf38      	it	cc
   da296:	2001      	movcc	r0, #1
   da298:	f7fe fd84 	bl	d8da4 <__aeabi_ui2d>
   da29c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   da29e:	4680      	mov	r8, r0
   da2a0:	4689      	mov	r9, r1
   da2a2:	bb13      	cbnz	r3, da2ea <_strtod_l+0xba2>
   da2a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   da2a8:	9014      	str	r0, [sp, #80]	; 0x50
   da2aa:	9315      	str	r3, [sp, #84]	; 0x54
   da2ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   da2b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   da2b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   da2b6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   da2b8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   da2bc:	1a9b      	subs	r3, r3, r2
   da2be:	930d      	str	r3, [sp, #52]	; 0x34
   da2c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   da2c4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   da2c8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   da2cc:	f000 ff42 	bl	db154 <__ulp>
   da2d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   da2d4:	ec53 2b10 	vmov	r2, r3, d0
   da2d8:	f7fe fdde 	bl	d8e98 <__aeabi_dmul>
   da2dc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   da2e0:	f7fe fc24 	bl	d8b2c <__adddf3>
   da2e4:	4682      	mov	sl, r0
   da2e6:	468b      	mov	fp, r1
   da2e8:	e78f      	b.n	da20a <_strtod_l+0xac2>
   da2ea:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   da2ee:	e7dd      	b.n	da2ac <_strtod_l+0xb64>
   da2f0:	a311      	add	r3, pc, #68	; (adr r3, da338 <_strtod_l+0xbf0>)
   da2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
   da2f6:	f7ff f841 	bl	d937c <__aeabi_dcmplt>
   da2fa:	e7b4      	b.n	da266 <_strtod_l+0xb1e>
   da2fc:	2300      	movs	r3, #0
   da2fe:	930e      	str	r3, [sp, #56]	; 0x38
   da300:	9a19      	ldr	r2, [sp, #100]	; 0x64
   da302:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   da304:	6013      	str	r3, [r2, #0]
   da306:	f7ff ba65 	b.w	d97d4 <_strtod_l+0x8c>
   da30a:	2b65      	cmp	r3, #101	; 0x65
   da30c:	f43f ab5d 	beq.w	d99ca <_strtod_l+0x282>
   da310:	2b45      	cmp	r3, #69	; 0x45
   da312:	f43f ab5a 	beq.w	d99ca <_strtod_l+0x282>
   da316:	2201      	movs	r2, #1
   da318:	f7ff bb92 	b.w	d9a40 <_strtod_l+0x2f8>
   da31c:	f3af 8000 	nop.w
   da320:	94a03595 	.word	0x94a03595
   da324:	3fdfffff 	.word	0x3fdfffff
   da328:	35afe535 	.word	0x35afe535
   da32c:	3fe00000 	.word	0x3fe00000
   da330:	ffc00000 	.word	0xffc00000
   da334:	41dfffff 	.word	0x41dfffff
   da338:	94a03595 	.word	0x94a03595
   da33c:	3fcfffff 	.word	0x3fcfffff
   da340:	3ff00000 	.word	0x3ff00000
   da344:	7ff00000 	.word	0x7ff00000
   da348:	7fe00000 	.word	0x7fe00000
   da34c:	7c9fffff 	.word	0x7c9fffff
   da350:	3fe00000 	.word	0x3fe00000
   da354:	bff00000 	.word	0xbff00000
   da358:	7fefffff 	.word	0x7fefffff

000da35c <strtod>:
   da35c:	460a      	mov	r2, r1
   da35e:	4601      	mov	r1, r0
   da360:	4802      	ldr	r0, [pc, #8]	; (da36c <strtod+0x10>)
   da362:	4b03      	ldr	r3, [pc, #12]	; (da370 <strtod+0x14>)
   da364:	6800      	ldr	r0, [r0, #0]
   da366:	f7ff b9ef 	b.w	d9748 <_strtod_l>
   da36a:	bf00      	nop
   da36c:	2003dcd0 	.word	0x2003dcd0
   da370:	2003dd38 	.word	0x2003dd38

000da374 <_strtol_l.isra.0>:
   da374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da378:	4e3a      	ldr	r6, [pc, #232]	; (da464 <_strtol_l.isra.0+0xf0>)
   da37a:	4686      	mov	lr, r0
   da37c:	468c      	mov	ip, r1
   da37e:	4660      	mov	r0, ip
   da380:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da384:	5da5      	ldrb	r5, [r4, r6]
   da386:	f015 0508 	ands.w	r5, r5, #8
   da38a:	d1f8      	bne.n	da37e <_strtol_l.isra.0+0xa>
   da38c:	2c2d      	cmp	r4, #45	; 0x2d
   da38e:	d133      	bne.n	da3f8 <_strtol_l.isra.0+0x84>
   da390:	f89c 4000 	ldrb.w	r4, [ip]
   da394:	f04f 0801 	mov.w	r8, #1
   da398:	f100 0c02 	add.w	ip, r0, #2
   da39c:	2b00      	cmp	r3, #0
   da39e:	d05c      	beq.n	da45a <_strtol_l.isra.0+0xe6>
   da3a0:	2b10      	cmp	r3, #16
   da3a2:	d10c      	bne.n	da3be <_strtol_l.isra.0+0x4a>
   da3a4:	2c30      	cmp	r4, #48	; 0x30
   da3a6:	d10a      	bne.n	da3be <_strtol_l.isra.0+0x4a>
   da3a8:	f89c 0000 	ldrb.w	r0, [ip]
   da3ac:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da3b0:	2858      	cmp	r0, #88	; 0x58
   da3b2:	d14d      	bne.n	da450 <_strtol_l.isra.0+0xdc>
   da3b4:	f89c 4001 	ldrb.w	r4, [ip, #1]
   da3b8:	2310      	movs	r3, #16
   da3ba:	f10c 0c02 	add.w	ip, ip, #2
   da3be:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   da3c2:	3f01      	subs	r7, #1
   da3c4:	2600      	movs	r6, #0
   da3c6:	fbb7 f9f3 	udiv	r9, r7, r3
   da3ca:	4630      	mov	r0, r6
   da3cc:	fb03 7a19 	mls	sl, r3, r9, r7
   da3d0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   da3d4:	2d09      	cmp	r5, #9
   da3d6:	d818      	bhi.n	da40a <_strtol_l.isra.0+0x96>
   da3d8:	462c      	mov	r4, r5
   da3da:	42a3      	cmp	r3, r4
   da3dc:	dd24      	ble.n	da428 <_strtol_l.isra.0+0xb4>
   da3de:	1c75      	adds	r5, r6, #1
   da3e0:	d007      	beq.n	da3f2 <_strtol_l.isra.0+0x7e>
   da3e2:	4581      	cmp	r9, r0
   da3e4:	d31d      	bcc.n	da422 <_strtol_l.isra.0+0xae>
   da3e6:	d101      	bne.n	da3ec <_strtol_l.isra.0+0x78>
   da3e8:	45a2      	cmp	sl, r4
   da3ea:	db1a      	blt.n	da422 <_strtol_l.isra.0+0xae>
   da3ec:	fb00 4003 	mla	r0, r0, r3, r4
   da3f0:	2601      	movs	r6, #1
   da3f2:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da3f6:	e7eb      	b.n	da3d0 <_strtol_l.isra.0+0x5c>
   da3f8:	2c2b      	cmp	r4, #43	; 0x2b
   da3fa:	bf08      	it	eq
   da3fc:	f89c 4000 	ldrbeq.w	r4, [ip]
   da400:	46a8      	mov	r8, r5
   da402:	bf08      	it	eq
   da404:	f100 0c02 	addeq.w	ip, r0, #2
   da408:	e7c8      	b.n	da39c <_strtol_l.isra.0+0x28>
   da40a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   da40e:	2d19      	cmp	r5, #25
   da410:	d801      	bhi.n	da416 <_strtol_l.isra.0+0xa2>
   da412:	3c37      	subs	r4, #55	; 0x37
   da414:	e7e1      	b.n	da3da <_strtol_l.isra.0+0x66>
   da416:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   da41a:	2d19      	cmp	r5, #25
   da41c:	d804      	bhi.n	da428 <_strtol_l.isra.0+0xb4>
   da41e:	3c57      	subs	r4, #87	; 0x57
   da420:	e7db      	b.n	da3da <_strtol_l.isra.0+0x66>
   da422:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   da426:	e7e4      	b.n	da3f2 <_strtol_l.isra.0+0x7e>
   da428:	1c73      	adds	r3, r6, #1
   da42a:	d106      	bne.n	da43a <_strtol_l.isra.0+0xc6>
   da42c:	2322      	movs	r3, #34	; 0x22
   da42e:	f8ce 3000 	str.w	r3, [lr]
   da432:	4638      	mov	r0, r7
   da434:	b942      	cbnz	r2, da448 <_strtol_l.isra.0+0xd4>
   da436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da43a:	f1b8 0f00 	cmp.w	r8, #0
   da43e:	d000      	beq.n	da442 <_strtol_l.isra.0+0xce>
   da440:	4240      	negs	r0, r0
   da442:	2a00      	cmp	r2, #0
   da444:	d0f7      	beq.n	da436 <_strtol_l.isra.0+0xc2>
   da446:	b10e      	cbz	r6, da44c <_strtol_l.isra.0+0xd8>
   da448:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   da44c:	6011      	str	r1, [r2, #0]
   da44e:	e7f2      	b.n	da436 <_strtol_l.isra.0+0xc2>
   da450:	2430      	movs	r4, #48	; 0x30
   da452:	2b00      	cmp	r3, #0
   da454:	d1b3      	bne.n	da3be <_strtol_l.isra.0+0x4a>
   da456:	2308      	movs	r3, #8
   da458:	e7b1      	b.n	da3be <_strtol_l.isra.0+0x4a>
   da45a:	2c30      	cmp	r4, #48	; 0x30
   da45c:	d0a4      	beq.n	da3a8 <_strtol_l.isra.0+0x34>
   da45e:	230a      	movs	r3, #10
   da460:	e7ad      	b.n	da3be <_strtol_l.isra.0+0x4a>
   da462:	bf00      	nop
   da464:	000dc141 	.word	0x000dc141

000da468 <strtol>:
   da468:	4613      	mov	r3, r2
   da46a:	460a      	mov	r2, r1
   da46c:	4601      	mov	r1, r0
   da46e:	4802      	ldr	r0, [pc, #8]	; (da478 <strtol+0x10>)
   da470:	6800      	ldr	r0, [r0, #0]
   da472:	f7ff bf7f 	b.w	da374 <_strtol_l.isra.0>
   da476:	bf00      	nop
   da478:	2003dcd0 	.word	0x2003dcd0

000da47c <rshift>:
   da47c:	6903      	ldr	r3, [r0, #16]
   da47e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   da482:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   da486:	ea4f 1261 	mov.w	r2, r1, asr #5
   da48a:	f100 0414 	add.w	r4, r0, #20
   da48e:	dd45      	ble.n	da51c <rshift+0xa0>
   da490:	f011 011f 	ands.w	r1, r1, #31
   da494:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   da498:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   da49c:	d10c      	bne.n	da4b8 <rshift+0x3c>
   da49e:	f100 0710 	add.w	r7, r0, #16
   da4a2:	4629      	mov	r1, r5
   da4a4:	42b1      	cmp	r1, r6
   da4a6:	d334      	bcc.n	da512 <rshift+0x96>
   da4a8:	1a9b      	subs	r3, r3, r2
   da4aa:	009b      	lsls	r3, r3, #2
   da4ac:	1eea      	subs	r2, r5, #3
   da4ae:	4296      	cmp	r6, r2
   da4b0:	bf38      	it	cc
   da4b2:	2300      	movcc	r3, #0
   da4b4:	4423      	add	r3, r4
   da4b6:	e015      	b.n	da4e4 <rshift+0x68>
   da4b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   da4bc:	f1c1 0820 	rsb	r8, r1, #32
   da4c0:	40cf      	lsrs	r7, r1
   da4c2:	f105 0e04 	add.w	lr, r5, #4
   da4c6:	46a1      	mov	r9, r4
   da4c8:	4576      	cmp	r6, lr
   da4ca:	46f4      	mov	ip, lr
   da4cc:	d815      	bhi.n	da4fa <rshift+0x7e>
   da4ce:	1a9b      	subs	r3, r3, r2
   da4d0:	009a      	lsls	r2, r3, #2
   da4d2:	3a04      	subs	r2, #4
   da4d4:	3501      	adds	r5, #1
   da4d6:	42ae      	cmp	r6, r5
   da4d8:	bf38      	it	cc
   da4da:	2200      	movcc	r2, #0
   da4dc:	18a3      	adds	r3, r4, r2
   da4de:	50a7      	str	r7, [r4, r2]
   da4e0:	b107      	cbz	r7, da4e4 <rshift+0x68>
   da4e2:	3304      	adds	r3, #4
   da4e4:	1b1a      	subs	r2, r3, r4
   da4e6:	42a3      	cmp	r3, r4
   da4e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
   da4ec:	bf08      	it	eq
   da4ee:	2300      	moveq	r3, #0
   da4f0:	6102      	str	r2, [r0, #16]
   da4f2:	bf08      	it	eq
   da4f4:	6143      	streq	r3, [r0, #20]
   da4f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da4fa:	f8dc c000 	ldr.w	ip, [ip]
   da4fe:	fa0c fc08 	lsl.w	ip, ip, r8
   da502:	ea4c 0707 	orr.w	r7, ip, r7
   da506:	f849 7b04 	str.w	r7, [r9], #4
   da50a:	f85e 7b04 	ldr.w	r7, [lr], #4
   da50e:	40cf      	lsrs	r7, r1
   da510:	e7da      	b.n	da4c8 <rshift+0x4c>
   da512:	f851 cb04 	ldr.w	ip, [r1], #4
   da516:	f847 cf04 	str.w	ip, [r7, #4]!
   da51a:	e7c3      	b.n	da4a4 <rshift+0x28>
   da51c:	4623      	mov	r3, r4
   da51e:	e7e1      	b.n	da4e4 <rshift+0x68>

000da520 <__hexdig_fun>:
   da520:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   da524:	2b09      	cmp	r3, #9
   da526:	d802      	bhi.n	da52e <__hexdig_fun+0xe>
   da528:	3820      	subs	r0, #32
   da52a:	b2c0      	uxtb	r0, r0
   da52c:	4770      	bx	lr
   da52e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   da532:	2b05      	cmp	r3, #5
   da534:	d801      	bhi.n	da53a <__hexdig_fun+0x1a>
   da536:	3847      	subs	r0, #71	; 0x47
   da538:	e7f7      	b.n	da52a <__hexdig_fun+0xa>
   da53a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   da53e:	2b05      	cmp	r3, #5
   da540:	d801      	bhi.n	da546 <__hexdig_fun+0x26>
   da542:	3827      	subs	r0, #39	; 0x27
   da544:	e7f1      	b.n	da52a <__hexdig_fun+0xa>
   da546:	2000      	movs	r0, #0
   da548:	4770      	bx	lr
	...

000da54c <__gethex>:
   da54c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da550:	ed2d 8b02 	vpush	{d8}
   da554:	b089      	sub	sp, #36	; 0x24
   da556:	ee08 0a10 	vmov	s16, r0
   da55a:	9304      	str	r3, [sp, #16]
   da55c:	4bbc      	ldr	r3, [pc, #752]	; (da850 <__gethex+0x304>)
   da55e:	681b      	ldr	r3, [r3, #0]
   da560:	9301      	str	r3, [sp, #4]
   da562:	4618      	mov	r0, r3
   da564:	468b      	mov	fp, r1
   da566:	4690      	mov	r8, r2
   da568:	f7ff f8a5 	bl	d96b6 <strlen>
   da56c:	9b01      	ldr	r3, [sp, #4]
   da56e:	f8db 2000 	ldr.w	r2, [fp]
   da572:	4403      	add	r3, r0
   da574:	4682      	mov	sl, r0
   da576:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   da57a:	9305      	str	r3, [sp, #20]
   da57c:	1c93      	adds	r3, r2, #2
   da57e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   da582:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   da586:	32fe      	adds	r2, #254	; 0xfe
   da588:	18d1      	adds	r1, r2, r3
   da58a:	461f      	mov	r7, r3
   da58c:	f813 0b01 	ldrb.w	r0, [r3], #1
   da590:	9100      	str	r1, [sp, #0]
   da592:	2830      	cmp	r0, #48	; 0x30
   da594:	d0f8      	beq.n	da588 <__gethex+0x3c>
   da596:	f7ff ffc3 	bl	da520 <__hexdig_fun>
   da59a:	4604      	mov	r4, r0
   da59c:	2800      	cmp	r0, #0
   da59e:	d13a      	bne.n	da616 <__gethex+0xca>
   da5a0:	9901      	ldr	r1, [sp, #4]
   da5a2:	4652      	mov	r2, sl
   da5a4:	4638      	mov	r0, r7
   da5a6:	f7ff f88e 	bl	d96c6 <strncmp>
   da5aa:	4605      	mov	r5, r0
   da5ac:	2800      	cmp	r0, #0
   da5ae:	d168      	bne.n	da682 <__gethex+0x136>
   da5b0:	f817 000a 	ldrb.w	r0, [r7, sl]
   da5b4:	eb07 060a 	add.w	r6, r7, sl
   da5b8:	f7ff ffb2 	bl	da520 <__hexdig_fun>
   da5bc:	2800      	cmp	r0, #0
   da5be:	d062      	beq.n	da686 <__gethex+0x13a>
   da5c0:	4633      	mov	r3, r6
   da5c2:	7818      	ldrb	r0, [r3, #0]
   da5c4:	2830      	cmp	r0, #48	; 0x30
   da5c6:	461f      	mov	r7, r3
   da5c8:	f103 0301 	add.w	r3, r3, #1
   da5cc:	d0f9      	beq.n	da5c2 <__gethex+0x76>
   da5ce:	f7ff ffa7 	bl	da520 <__hexdig_fun>
   da5d2:	2301      	movs	r3, #1
   da5d4:	fab0 f480 	clz	r4, r0
   da5d8:	0964      	lsrs	r4, r4, #5
   da5da:	4635      	mov	r5, r6
   da5dc:	9300      	str	r3, [sp, #0]
   da5de:	463a      	mov	r2, r7
   da5e0:	4616      	mov	r6, r2
   da5e2:	3201      	adds	r2, #1
   da5e4:	7830      	ldrb	r0, [r6, #0]
   da5e6:	f7ff ff9b 	bl	da520 <__hexdig_fun>
   da5ea:	2800      	cmp	r0, #0
   da5ec:	d1f8      	bne.n	da5e0 <__gethex+0x94>
   da5ee:	9901      	ldr	r1, [sp, #4]
   da5f0:	4652      	mov	r2, sl
   da5f2:	4630      	mov	r0, r6
   da5f4:	f7ff f867 	bl	d96c6 <strncmp>
   da5f8:	b980      	cbnz	r0, da61c <__gethex+0xd0>
   da5fa:	b94d      	cbnz	r5, da610 <__gethex+0xc4>
   da5fc:	eb06 050a 	add.w	r5, r6, sl
   da600:	462a      	mov	r2, r5
   da602:	4616      	mov	r6, r2
   da604:	3201      	adds	r2, #1
   da606:	7830      	ldrb	r0, [r6, #0]
   da608:	f7ff ff8a 	bl	da520 <__hexdig_fun>
   da60c:	2800      	cmp	r0, #0
   da60e:	d1f8      	bne.n	da602 <__gethex+0xb6>
   da610:	1bad      	subs	r5, r5, r6
   da612:	00ad      	lsls	r5, r5, #2
   da614:	e004      	b.n	da620 <__gethex+0xd4>
   da616:	2400      	movs	r4, #0
   da618:	4625      	mov	r5, r4
   da61a:	e7e0      	b.n	da5de <__gethex+0x92>
   da61c:	2d00      	cmp	r5, #0
   da61e:	d1f7      	bne.n	da610 <__gethex+0xc4>
   da620:	7833      	ldrb	r3, [r6, #0]
   da622:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   da626:	2b50      	cmp	r3, #80	; 0x50
   da628:	d13b      	bne.n	da6a2 <__gethex+0x156>
   da62a:	7873      	ldrb	r3, [r6, #1]
   da62c:	2b2b      	cmp	r3, #43	; 0x2b
   da62e:	d02c      	beq.n	da68a <__gethex+0x13e>
   da630:	2b2d      	cmp	r3, #45	; 0x2d
   da632:	d02e      	beq.n	da692 <__gethex+0x146>
   da634:	1c71      	adds	r1, r6, #1
   da636:	f04f 0900 	mov.w	r9, #0
   da63a:	7808      	ldrb	r0, [r1, #0]
   da63c:	f7ff ff70 	bl	da520 <__hexdig_fun>
   da640:	1e43      	subs	r3, r0, #1
   da642:	b2db      	uxtb	r3, r3
   da644:	2b18      	cmp	r3, #24
   da646:	d82c      	bhi.n	da6a2 <__gethex+0x156>
   da648:	f1a0 0210 	sub.w	r2, r0, #16
   da64c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   da650:	f7ff ff66 	bl	da520 <__hexdig_fun>
   da654:	1e43      	subs	r3, r0, #1
   da656:	b2db      	uxtb	r3, r3
   da658:	2b18      	cmp	r3, #24
   da65a:	d91d      	bls.n	da698 <__gethex+0x14c>
   da65c:	f1b9 0f00 	cmp.w	r9, #0
   da660:	d000      	beq.n	da664 <__gethex+0x118>
   da662:	4252      	negs	r2, r2
   da664:	4415      	add	r5, r2
   da666:	f8cb 1000 	str.w	r1, [fp]
   da66a:	b1e4      	cbz	r4, da6a6 <__gethex+0x15a>
   da66c:	9b00      	ldr	r3, [sp, #0]
   da66e:	2b00      	cmp	r3, #0
   da670:	bf14      	ite	ne
   da672:	2700      	movne	r7, #0
   da674:	2706      	moveq	r7, #6
   da676:	4638      	mov	r0, r7
   da678:	b009      	add	sp, #36	; 0x24
   da67a:	ecbd 8b02 	vpop	{d8}
   da67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da682:	463e      	mov	r6, r7
   da684:	4625      	mov	r5, r4
   da686:	2401      	movs	r4, #1
   da688:	e7ca      	b.n	da620 <__gethex+0xd4>
   da68a:	f04f 0900 	mov.w	r9, #0
   da68e:	1cb1      	adds	r1, r6, #2
   da690:	e7d3      	b.n	da63a <__gethex+0xee>
   da692:	f04f 0901 	mov.w	r9, #1
   da696:	e7fa      	b.n	da68e <__gethex+0x142>
   da698:	230a      	movs	r3, #10
   da69a:	fb03 0202 	mla	r2, r3, r2, r0
   da69e:	3a10      	subs	r2, #16
   da6a0:	e7d4      	b.n	da64c <__gethex+0x100>
   da6a2:	4631      	mov	r1, r6
   da6a4:	e7df      	b.n	da666 <__gethex+0x11a>
   da6a6:	1bf3      	subs	r3, r6, r7
   da6a8:	3b01      	subs	r3, #1
   da6aa:	4621      	mov	r1, r4
   da6ac:	2b07      	cmp	r3, #7
   da6ae:	dc52      	bgt.n	da756 <__gethex+0x20a>
   da6b0:	ee18 0a10 	vmov	r0, s16
   da6b4:	f000 fa52 	bl	dab5c <_Balloc>
   da6b8:	f04f 0b00 	mov.w	fp, #0
   da6bc:	f100 0914 	add.w	r9, r0, #20
   da6c0:	f1ca 0301 	rsb	r3, sl, #1
   da6c4:	4604      	mov	r4, r0
   da6c6:	f8cd 9008 	str.w	r9, [sp, #8]
   da6ca:	f8cd b000 	str.w	fp, [sp]
   da6ce:	9306      	str	r3, [sp, #24]
   da6d0:	42b7      	cmp	r7, r6
   da6d2:	d343      	bcc.n	da75c <__gethex+0x210>
   da6d4:	9802      	ldr	r0, [sp, #8]
   da6d6:	9b00      	ldr	r3, [sp, #0]
   da6d8:	f840 3b04 	str.w	r3, [r0], #4
   da6dc:	eba0 0009 	sub.w	r0, r0, r9
   da6e0:	1080      	asrs	r0, r0, #2
   da6e2:	0146      	lsls	r6, r0, #5
   da6e4:	6120      	str	r0, [r4, #16]
   da6e6:	4618      	mov	r0, r3
   da6e8:	f000 faff 	bl	dacea <__hi0bits>
   da6ec:	1a30      	subs	r0, r6, r0
   da6ee:	f8d8 6000 	ldr.w	r6, [r8]
   da6f2:	42b0      	cmp	r0, r6
   da6f4:	dd66      	ble.n	da7c4 <__gethex+0x278>
   da6f6:	1b87      	subs	r7, r0, r6
   da6f8:	4639      	mov	r1, r7
   da6fa:	4620      	mov	r0, r4
   da6fc:	f000 fe4c 	bl	db398 <__any_on>
   da700:	4682      	mov	sl, r0
   da702:	b1a8      	cbz	r0, da730 <__gethex+0x1e4>
   da704:	1e7b      	subs	r3, r7, #1
   da706:	1159      	asrs	r1, r3, #5
   da708:	f003 021f 	and.w	r2, r3, #31
   da70c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   da710:	f04f 0a01 	mov.w	sl, #1
   da714:	fa0a f202 	lsl.w	r2, sl, r2
   da718:	420a      	tst	r2, r1
   da71a:	d009      	beq.n	da730 <__gethex+0x1e4>
   da71c:	4553      	cmp	r3, sl
   da71e:	dd05      	ble.n	da72c <__gethex+0x1e0>
   da720:	1eb9      	subs	r1, r7, #2
   da722:	4620      	mov	r0, r4
   da724:	f000 fe38 	bl	db398 <__any_on>
   da728:	2800      	cmp	r0, #0
   da72a:	d148      	bne.n	da7be <__gethex+0x272>
   da72c:	f04f 0a02 	mov.w	sl, #2
   da730:	4639      	mov	r1, r7
   da732:	4620      	mov	r0, r4
   da734:	f7ff fea2 	bl	da47c <rshift>
   da738:	443d      	add	r5, r7
   da73a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da73e:	42ab      	cmp	r3, r5
   da740:	da4f      	bge.n	da7e2 <__gethex+0x296>
   da742:	ee18 0a10 	vmov	r0, s16
   da746:	4621      	mov	r1, r4
   da748:	f000 fa3c 	bl	dabc4 <_Bfree>
   da74c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da74e:	2300      	movs	r3, #0
   da750:	6013      	str	r3, [r2, #0]
   da752:	27a3      	movs	r7, #163	; 0xa3
   da754:	e78f      	b.n	da676 <__gethex+0x12a>
   da756:	3101      	adds	r1, #1
   da758:	105b      	asrs	r3, r3, #1
   da75a:	e7a7      	b.n	da6ac <__gethex+0x160>
   da75c:	1e73      	subs	r3, r6, #1
   da75e:	9a05      	ldr	r2, [sp, #20]
   da760:	9303      	str	r3, [sp, #12]
   da762:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   da766:	4293      	cmp	r3, r2
   da768:	d019      	beq.n	da79e <__gethex+0x252>
   da76a:	f1bb 0f20 	cmp.w	fp, #32
   da76e:	d107      	bne.n	da780 <__gethex+0x234>
   da770:	9b02      	ldr	r3, [sp, #8]
   da772:	9a00      	ldr	r2, [sp, #0]
   da774:	f843 2b04 	str.w	r2, [r3], #4
   da778:	9302      	str	r3, [sp, #8]
   da77a:	2300      	movs	r3, #0
   da77c:	9300      	str	r3, [sp, #0]
   da77e:	469b      	mov	fp, r3
   da780:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   da784:	f7ff fecc 	bl	da520 <__hexdig_fun>
   da788:	9b00      	ldr	r3, [sp, #0]
   da78a:	f000 000f 	and.w	r0, r0, #15
   da78e:	fa00 f00b 	lsl.w	r0, r0, fp
   da792:	4303      	orrs	r3, r0
   da794:	9300      	str	r3, [sp, #0]
   da796:	f10b 0b04 	add.w	fp, fp, #4
   da79a:	9b03      	ldr	r3, [sp, #12]
   da79c:	e00d      	b.n	da7ba <__gethex+0x26e>
   da79e:	9b03      	ldr	r3, [sp, #12]
   da7a0:	9a06      	ldr	r2, [sp, #24]
   da7a2:	4413      	add	r3, r2
   da7a4:	42bb      	cmp	r3, r7
   da7a6:	d3e0      	bcc.n	da76a <__gethex+0x21e>
   da7a8:	4618      	mov	r0, r3
   da7aa:	9901      	ldr	r1, [sp, #4]
   da7ac:	9307      	str	r3, [sp, #28]
   da7ae:	4652      	mov	r2, sl
   da7b0:	f7fe ff89 	bl	d96c6 <strncmp>
   da7b4:	9b07      	ldr	r3, [sp, #28]
   da7b6:	2800      	cmp	r0, #0
   da7b8:	d1d7      	bne.n	da76a <__gethex+0x21e>
   da7ba:	461e      	mov	r6, r3
   da7bc:	e788      	b.n	da6d0 <__gethex+0x184>
   da7be:	f04f 0a03 	mov.w	sl, #3
   da7c2:	e7b5      	b.n	da730 <__gethex+0x1e4>
   da7c4:	da0a      	bge.n	da7dc <__gethex+0x290>
   da7c6:	1a37      	subs	r7, r6, r0
   da7c8:	4621      	mov	r1, r4
   da7ca:	ee18 0a10 	vmov	r0, s16
   da7ce:	463a      	mov	r2, r7
   da7d0:	f000 fbce 	bl	daf70 <__lshift>
   da7d4:	1bed      	subs	r5, r5, r7
   da7d6:	4604      	mov	r4, r0
   da7d8:	f100 0914 	add.w	r9, r0, #20
   da7dc:	f04f 0a00 	mov.w	sl, #0
   da7e0:	e7ab      	b.n	da73a <__gethex+0x1ee>
   da7e2:	f8d8 0004 	ldr.w	r0, [r8, #4]
   da7e6:	42a8      	cmp	r0, r5
   da7e8:	dd6d      	ble.n	da8c6 <__gethex+0x37a>
   da7ea:	1b45      	subs	r5, r0, r5
   da7ec:	42ae      	cmp	r6, r5
   da7ee:	dc31      	bgt.n	da854 <__gethex+0x308>
   da7f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
   da7f4:	2b02      	cmp	r3, #2
   da7f6:	d023      	beq.n	da840 <__gethex+0x2f4>
   da7f8:	2b03      	cmp	r3, #3
   da7fa:	d025      	beq.n	da848 <__gethex+0x2fc>
   da7fc:	2b01      	cmp	r3, #1
   da7fe:	d115      	bne.n	da82c <__gethex+0x2e0>
   da800:	42ae      	cmp	r6, r5
   da802:	d113      	bne.n	da82c <__gethex+0x2e0>
   da804:	2e01      	cmp	r6, #1
   da806:	d10b      	bne.n	da820 <__gethex+0x2d4>
   da808:	9a04      	ldr	r2, [sp, #16]
   da80a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   da80e:	6013      	str	r3, [r2, #0]
   da810:	2301      	movs	r3, #1
   da812:	6123      	str	r3, [r4, #16]
   da814:	f8c9 3000 	str.w	r3, [r9]
   da818:	9b14      	ldr	r3, [sp, #80]	; 0x50
   da81a:	2762      	movs	r7, #98	; 0x62
   da81c:	601c      	str	r4, [r3, #0]
   da81e:	e72a      	b.n	da676 <__gethex+0x12a>
   da820:	1e71      	subs	r1, r6, #1
   da822:	4620      	mov	r0, r4
   da824:	f000 fdb8 	bl	db398 <__any_on>
   da828:	2800      	cmp	r0, #0
   da82a:	d1ed      	bne.n	da808 <__gethex+0x2bc>
   da82c:	ee18 0a10 	vmov	r0, s16
   da830:	4621      	mov	r1, r4
   da832:	f000 f9c7 	bl	dabc4 <_Bfree>
   da836:	9a14      	ldr	r2, [sp, #80]	; 0x50
   da838:	2300      	movs	r3, #0
   da83a:	6013      	str	r3, [r2, #0]
   da83c:	2750      	movs	r7, #80	; 0x50
   da83e:	e71a      	b.n	da676 <__gethex+0x12a>
   da840:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da842:	2b00      	cmp	r3, #0
   da844:	d1f2      	bne.n	da82c <__gethex+0x2e0>
   da846:	e7df      	b.n	da808 <__gethex+0x2bc>
   da848:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da84a:	2b00      	cmp	r3, #0
   da84c:	d1dc      	bne.n	da808 <__gethex+0x2bc>
   da84e:	e7ed      	b.n	da82c <__gethex+0x2e0>
   da850:	000dc244 	.word	0x000dc244
   da854:	1e6f      	subs	r7, r5, #1
   da856:	f1ba 0f00 	cmp.w	sl, #0
   da85a:	d131      	bne.n	da8c0 <__gethex+0x374>
   da85c:	b127      	cbz	r7, da868 <__gethex+0x31c>
   da85e:	4639      	mov	r1, r7
   da860:	4620      	mov	r0, r4
   da862:	f000 fd99 	bl	db398 <__any_on>
   da866:	4682      	mov	sl, r0
   da868:	117b      	asrs	r3, r7, #5
   da86a:	2101      	movs	r1, #1
   da86c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   da870:	f007 071f 	and.w	r7, r7, #31
   da874:	fa01 f707 	lsl.w	r7, r1, r7
   da878:	421f      	tst	r7, r3
   da87a:	4629      	mov	r1, r5
   da87c:	4620      	mov	r0, r4
   da87e:	bf18      	it	ne
   da880:	f04a 0a02 	orrne.w	sl, sl, #2
   da884:	1b76      	subs	r6, r6, r5
   da886:	f7ff fdf9 	bl	da47c <rshift>
   da88a:	f8d8 5004 	ldr.w	r5, [r8, #4]
   da88e:	2702      	movs	r7, #2
   da890:	f1ba 0f00 	cmp.w	sl, #0
   da894:	d048      	beq.n	da928 <__gethex+0x3dc>
   da896:	f8d8 300c 	ldr.w	r3, [r8, #12]
   da89a:	2b02      	cmp	r3, #2
   da89c:	d015      	beq.n	da8ca <__gethex+0x37e>
   da89e:	2b03      	cmp	r3, #3
   da8a0:	d017      	beq.n	da8d2 <__gethex+0x386>
   da8a2:	2b01      	cmp	r3, #1
   da8a4:	d109      	bne.n	da8ba <__gethex+0x36e>
   da8a6:	f01a 0f02 	tst.w	sl, #2
   da8aa:	d006      	beq.n	da8ba <__gethex+0x36e>
   da8ac:	f8d9 0000 	ldr.w	r0, [r9]
   da8b0:	ea4a 0a00 	orr.w	sl, sl, r0
   da8b4:	f01a 0f01 	tst.w	sl, #1
   da8b8:	d10e      	bne.n	da8d8 <__gethex+0x38c>
   da8ba:	f047 0710 	orr.w	r7, r7, #16
   da8be:	e033      	b.n	da928 <__gethex+0x3dc>
   da8c0:	f04f 0a01 	mov.w	sl, #1
   da8c4:	e7d0      	b.n	da868 <__gethex+0x31c>
   da8c6:	2701      	movs	r7, #1
   da8c8:	e7e2      	b.n	da890 <__gethex+0x344>
   da8ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da8cc:	f1c3 0301 	rsb	r3, r3, #1
   da8d0:	9315      	str	r3, [sp, #84]	; 0x54
   da8d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   da8d4:	2b00      	cmp	r3, #0
   da8d6:	d0f0      	beq.n	da8ba <__gethex+0x36e>
   da8d8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   da8dc:	f104 0314 	add.w	r3, r4, #20
   da8e0:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   da8e4:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   da8e8:	f04f 0c00 	mov.w	ip, #0
   da8ec:	4618      	mov	r0, r3
   da8ee:	f853 2b04 	ldr.w	r2, [r3], #4
   da8f2:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   da8f6:	d01c      	beq.n	da932 <__gethex+0x3e6>
   da8f8:	3201      	adds	r2, #1
   da8fa:	6002      	str	r2, [r0, #0]
   da8fc:	2f02      	cmp	r7, #2
   da8fe:	f104 0314 	add.w	r3, r4, #20
   da902:	d13a      	bne.n	da97a <__gethex+0x42e>
   da904:	f8d8 2000 	ldr.w	r2, [r8]
   da908:	3a01      	subs	r2, #1
   da90a:	42b2      	cmp	r2, r6
   da90c:	d10a      	bne.n	da924 <__gethex+0x3d8>
   da90e:	1171      	asrs	r1, r6, #5
   da910:	2201      	movs	r2, #1
   da912:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   da916:	f006 061f 	and.w	r6, r6, #31
   da91a:	fa02 f606 	lsl.w	r6, r2, r6
   da91e:	421e      	tst	r6, r3
   da920:	bf18      	it	ne
   da922:	4617      	movne	r7, r2
   da924:	f047 0720 	orr.w	r7, r7, #32
   da928:	9b14      	ldr	r3, [sp, #80]	; 0x50
   da92a:	601c      	str	r4, [r3, #0]
   da92c:	9b04      	ldr	r3, [sp, #16]
   da92e:	601d      	str	r5, [r3, #0]
   da930:	e6a1      	b.n	da676 <__gethex+0x12a>
   da932:	4299      	cmp	r1, r3
   da934:	f843 cc04 	str.w	ip, [r3, #-4]
   da938:	d8d8      	bhi.n	da8ec <__gethex+0x3a0>
   da93a:	68a3      	ldr	r3, [r4, #8]
   da93c:	4599      	cmp	r9, r3
   da93e:	db14      	blt.n	da96a <__gethex+0x41e>
   da940:	6861      	ldr	r1, [r4, #4]
   da942:	ee18 0a10 	vmov	r0, s16
   da946:	3101      	adds	r1, #1
   da948:	f000 f908 	bl	dab5c <_Balloc>
   da94c:	6922      	ldr	r2, [r4, #16]
   da94e:	3202      	adds	r2, #2
   da950:	f104 010c 	add.w	r1, r4, #12
   da954:	4682      	mov	sl, r0
   da956:	0092      	lsls	r2, r2, #2
   da958:	300c      	adds	r0, #12
   da95a:	f7fe fe29 	bl	d95b0 <memcpy>
   da95e:	4621      	mov	r1, r4
   da960:	ee18 0a10 	vmov	r0, s16
   da964:	f000 f92e 	bl	dabc4 <_Bfree>
   da968:	4654      	mov	r4, sl
   da96a:	6923      	ldr	r3, [r4, #16]
   da96c:	1c5a      	adds	r2, r3, #1
   da96e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   da972:	6122      	str	r2, [r4, #16]
   da974:	2201      	movs	r2, #1
   da976:	615a      	str	r2, [r3, #20]
   da978:	e7c0      	b.n	da8fc <__gethex+0x3b0>
   da97a:	6922      	ldr	r2, [r4, #16]
   da97c:	454a      	cmp	r2, r9
   da97e:	dd0b      	ble.n	da998 <__gethex+0x44c>
   da980:	2101      	movs	r1, #1
   da982:	4620      	mov	r0, r4
   da984:	f7ff fd7a 	bl	da47c <rshift>
   da988:	f8d8 3008 	ldr.w	r3, [r8, #8]
   da98c:	3501      	adds	r5, #1
   da98e:	42ab      	cmp	r3, r5
   da990:	f6ff aed7 	blt.w	da742 <__gethex+0x1f6>
   da994:	2701      	movs	r7, #1
   da996:	e7c5      	b.n	da924 <__gethex+0x3d8>
   da998:	f016 061f 	ands.w	r6, r6, #31
   da99c:	d0fa      	beq.n	da994 <__gethex+0x448>
   da99e:	449b      	add	fp, r3
   da9a0:	f1c6 0620 	rsb	r6, r6, #32
   da9a4:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   da9a8:	f000 f99f 	bl	dacea <__hi0bits>
   da9ac:	42b0      	cmp	r0, r6
   da9ae:	dbe7      	blt.n	da980 <__gethex+0x434>
   da9b0:	e7f0      	b.n	da994 <__gethex+0x448>
   da9b2:	bf00      	nop

000da9b4 <L_shift>:
   da9b4:	f1c2 0208 	rsb	r2, r2, #8
   da9b8:	0092      	lsls	r2, r2, #2
   da9ba:	b570      	push	{r4, r5, r6, lr}
   da9bc:	f1c2 0620 	rsb	r6, r2, #32
   da9c0:	6843      	ldr	r3, [r0, #4]
   da9c2:	6804      	ldr	r4, [r0, #0]
   da9c4:	fa03 f506 	lsl.w	r5, r3, r6
   da9c8:	432c      	orrs	r4, r5
   da9ca:	40d3      	lsrs	r3, r2
   da9cc:	6004      	str	r4, [r0, #0]
   da9ce:	f840 3f04 	str.w	r3, [r0, #4]!
   da9d2:	4288      	cmp	r0, r1
   da9d4:	d3f4      	bcc.n	da9c0 <L_shift+0xc>
   da9d6:	bd70      	pop	{r4, r5, r6, pc}

000da9d8 <__match>:
   da9d8:	b530      	push	{r4, r5, lr}
   da9da:	6803      	ldr	r3, [r0, #0]
   da9dc:	3301      	adds	r3, #1
   da9de:	f811 4b01 	ldrb.w	r4, [r1], #1
   da9e2:	b914      	cbnz	r4, da9ea <__match+0x12>
   da9e4:	6003      	str	r3, [r0, #0]
   da9e6:	2001      	movs	r0, #1
   da9e8:	bd30      	pop	{r4, r5, pc}
   da9ea:	f813 2b01 	ldrb.w	r2, [r3], #1
   da9ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   da9f2:	2d19      	cmp	r5, #25
   da9f4:	bf98      	it	ls
   da9f6:	3220      	addls	r2, #32
   da9f8:	42a2      	cmp	r2, r4
   da9fa:	d0f0      	beq.n	da9de <__match+0x6>
   da9fc:	2000      	movs	r0, #0
   da9fe:	e7f3      	b.n	da9e8 <__match+0x10>

000daa00 <__hexnan>:
   daa00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   daa04:	680b      	ldr	r3, [r1, #0]
   daa06:	6801      	ldr	r1, [r0, #0]
   daa08:	115e      	asrs	r6, r3, #5
   daa0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   daa0e:	f013 031f 	ands.w	r3, r3, #31
   daa12:	b087      	sub	sp, #28
   daa14:	bf18      	it	ne
   daa16:	3604      	addne	r6, #4
   daa18:	2500      	movs	r5, #0
   daa1a:	1f37      	subs	r7, r6, #4
   daa1c:	4682      	mov	sl, r0
   daa1e:	4690      	mov	r8, r2
   daa20:	9301      	str	r3, [sp, #4]
   daa22:	f846 5c04 	str.w	r5, [r6, #-4]
   daa26:	46b9      	mov	r9, r7
   daa28:	463c      	mov	r4, r7
   daa2a:	9502      	str	r5, [sp, #8]
   daa2c:	46ab      	mov	fp, r5
   daa2e:	784a      	ldrb	r2, [r1, #1]
   daa30:	1c4b      	adds	r3, r1, #1
   daa32:	9303      	str	r3, [sp, #12]
   daa34:	b342      	cbz	r2, daa88 <__hexnan+0x88>
   daa36:	4610      	mov	r0, r2
   daa38:	9105      	str	r1, [sp, #20]
   daa3a:	9204      	str	r2, [sp, #16]
   daa3c:	f7ff fd70 	bl	da520 <__hexdig_fun>
   daa40:	2800      	cmp	r0, #0
   daa42:	d14f      	bne.n	daae4 <__hexnan+0xe4>
   daa44:	9a04      	ldr	r2, [sp, #16]
   daa46:	9905      	ldr	r1, [sp, #20]
   daa48:	2a20      	cmp	r2, #32
   daa4a:	d818      	bhi.n	daa7e <__hexnan+0x7e>
   daa4c:	9b02      	ldr	r3, [sp, #8]
   daa4e:	459b      	cmp	fp, r3
   daa50:	dd13      	ble.n	daa7a <__hexnan+0x7a>
   daa52:	454c      	cmp	r4, r9
   daa54:	d206      	bcs.n	daa64 <__hexnan+0x64>
   daa56:	2d07      	cmp	r5, #7
   daa58:	dc04      	bgt.n	daa64 <__hexnan+0x64>
   daa5a:	462a      	mov	r2, r5
   daa5c:	4649      	mov	r1, r9
   daa5e:	4620      	mov	r0, r4
   daa60:	f7ff ffa8 	bl	da9b4 <L_shift>
   daa64:	4544      	cmp	r4, r8
   daa66:	d950      	bls.n	dab0a <__hexnan+0x10a>
   daa68:	2300      	movs	r3, #0
   daa6a:	f1a4 0904 	sub.w	r9, r4, #4
   daa6e:	f844 3c04 	str.w	r3, [r4, #-4]
   daa72:	f8cd b008 	str.w	fp, [sp, #8]
   daa76:	464c      	mov	r4, r9
   daa78:	461d      	mov	r5, r3
   daa7a:	9903      	ldr	r1, [sp, #12]
   daa7c:	e7d7      	b.n	daa2e <__hexnan+0x2e>
   daa7e:	2a29      	cmp	r2, #41	; 0x29
   daa80:	d156      	bne.n	dab30 <__hexnan+0x130>
   daa82:	3102      	adds	r1, #2
   daa84:	f8ca 1000 	str.w	r1, [sl]
   daa88:	f1bb 0f00 	cmp.w	fp, #0
   daa8c:	d050      	beq.n	dab30 <__hexnan+0x130>
   daa8e:	454c      	cmp	r4, r9
   daa90:	d206      	bcs.n	daaa0 <__hexnan+0xa0>
   daa92:	2d07      	cmp	r5, #7
   daa94:	dc04      	bgt.n	daaa0 <__hexnan+0xa0>
   daa96:	462a      	mov	r2, r5
   daa98:	4649      	mov	r1, r9
   daa9a:	4620      	mov	r0, r4
   daa9c:	f7ff ff8a 	bl	da9b4 <L_shift>
   daaa0:	4544      	cmp	r4, r8
   daaa2:	d934      	bls.n	dab0e <__hexnan+0x10e>
   daaa4:	f1a8 0204 	sub.w	r2, r8, #4
   daaa8:	4623      	mov	r3, r4
   daaaa:	f853 1b04 	ldr.w	r1, [r3], #4
   daaae:	f842 1f04 	str.w	r1, [r2, #4]!
   daab2:	429f      	cmp	r7, r3
   daab4:	d2f9      	bcs.n	daaaa <__hexnan+0xaa>
   daab6:	1b3b      	subs	r3, r7, r4
   daab8:	f023 0303 	bic.w	r3, r3, #3
   daabc:	3304      	adds	r3, #4
   daabe:	3401      	adds	r4, #1
   daac0:	3e03      	subs	r6, #3
   daac2:	42b4      	cmp	r4, r6
   daac4:	bf88      	it	hi
   daac6:	2304      	movhi	r3, #4
   daac8:	4443      	add	r3, r8
   daaca:	2200      	movs	r2, #0
   daacc:	f843 2b04 	str.w	r2, [r3], #4
   daad0:	429f      	cmp	r7, r3
   daad2:	d2fb      	bcs.n	daacc <__hexnan+0xcc>
   daad4:	683b      	ldr	r3, [r7, #0]
   daad6:	b91b      	cbnz	r3, daae0 <__hexnan+0xe0>
   daad8:	4547      	cmp	r7, r8
   daada:	d127      	bne.n	dab2c <__hexnan+0x12c>
   daadc:	2301      	movs	r3, #1
   daade:	603b      	str	r3, [r7, #0]
   daae0:	2005      	movs	r0, #5
   daae2:	e026      	b.n	dab32 <__hexnan+0x132>
   daae4:	3501      	adds	r5, #1
   daae6:	2d08      	cmp	r5, #8
   daae8:	f10b 0b01 	add.w	fp, fp, #1
   daaec:	dd06      	ble.n	daafc <__hexnan+0xfc>
   daaee:	4544      	cmp	r4, r8
   daaf0:	d9c3      	bls.n	daa7a <__hexnan+0x7a>
   daaf2:	2300      	movs	r3, #0
   daaf4:	f844 3c04 	str.w	r3, [r4, #-4]
   daaf8:	2501      	movs	r5, #1
   daafa:	3c04      	subs	r4, #4
   daafc:	6822      	ldr	r2, [r4, #0]
   daafe:	f000 000f 	and.w	r0, r0, #15
   dab02:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   dab06:	6022      	str	r2, [r4, #0]
   dab08:	e7b7      	b.n	daa7a <__hexnan+0x7a>
   dab0a:	2508      	movs	r5, #8
   dab0c:	e7b5      	b.n	daa7a <__hexnan+0x7a>
   dab0e:	9b01      	ldr	r3, [sp, #4]
   dab10:	2b00      	cmp	r3, #0
   dab12:	d0df      	beq.n	daad4 <__hexnan+0xd4>
   dab14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   dab18:	f1c3 0320 	rsb	r3, r3, #32
   dab1c:	fa22 f303 	lsr.w	r3, r2, r3
   dab20:	f856 2c04 	ldr.w	r2, [r6, #-4]
   dab24:	401a      	ands	r2, r3
   dab26:	f846 2c04 	str.w	r2, [r6, #-4]
   dab2a:	e7d3      	b.n	daad4 <__hexnan+0xd4>
   dab2c:	3f04      	subs	r7, #4
   dab2e:	e7d1      	b.n	daad4 <__hexnan+0xd4>
   dab30:	2004      	movs	r0, #4
   dab32:	b007      	add	sp, #28
   dab34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dab38 <__ascii_mbtowc>:
   dab38:	b082      	sub	sp, #8
   dab3a:	b901      	cbnz	r1, dab3e <__ascii_mbtowc+0x6>
   dab3c:	a901      	add	r1, sp, #4
   dab3e:	b142      	cbz	r2, dab52 <__ascii_mbtowc+0x1a>
   dab40:	b14b      	cbz	r3, dab56 <__ascii_mbtowc+0x1e>
   dab42:	7813      	ldrb	r3, [r2, #0]
   dab44:	600b      	str	r3, [r1, #0]
   dab46:	7812      	ldrb	r2, [r2, #0]
   dab48:	1e10      	subs	r0, r2, #0
   dab4a:	bf18      	it	ne
   dab4c:	2001      	movne	r0, #1
   dab4e:	b002      	add	sp, #8
   dab50:	4770      	bx	lr
   dab52:	4610      	mov	r0, r2
   dab54:	e7fb      	b.n	dab4e <__ascii_mbtowc+0x16>
   dab56:	f06f 0001 	mvn.w	r0, #1
   dab5a:	e7f8      	b.n	dab4e <__ascii_mbtowc+0x16>

000dab5c <_Balloc>:
   dab5c:	b570      	push	{r4, r5, r6, lr}
   dab5e:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dab60:	4604      	mov	r4, r0
   dab62:	460d      	mov	r5, r1
   dab64:	b93e      	cbnz	r6, dab76 <_Balloc+0x1a>
   dab66:	2010      	movs	r0, #16
   dab68:	f7fc fb44 	bl	d71f4 <malloc>
   dab6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dab70:	6260      	str	r0, [r4, #36]	; 0x24
   dab72:	6006      	str	r6, [r0, #0]
   dab74:	60c6      	str	r6, [r0, #12]
   dab76:	6a66      	ldr	r6, [r4, #36]	; 0x24
   dab78:	68f3      	ldr	r3, [r6, #12]
   dab7a:	b183      	cbz	r3, dab9e <_Balloc+0x42>
   dab7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dab7e:	68db      	ldr	r3, [r3, #12]
   dab80:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   dab84:	b9b8      	cbnz	r0, dabb6 <_Balloc+0x5a>
   dab86:	2101      	movs	r1, #1
   dab88:	fa01 f605 	lsl.w	r6, r1, r5
   dab8c:	1d72      	adds	r2, r6, #5
   dab8e:	0092      	lsls	r2, r2, #2
   dab90:	4620      	mov	r0, r4
   dab92:	f000 fc22 	bl	db3da <_calloc_r>
   dab96:	b160      	cbz	r0, dabb2 <_Balloc+0x56>
   dab98:	e9c0 5601 	strd	r5, r6, [r0, #4]
   dab9c:	e00e      	b.n	dabbc <_Balloc+0x60>
   dab9e:	2221      	movs	r2, #33	; 0x21
   daba0:	2104      	movs	r1, #4
   daba2:	4620      	mov	r0, r4
   daba4:	f000 fc19 	bl	db3da <_calloc_r>
   daba8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   dabaa:	60f0      	str	r0, [r6, #12]
   dabac:	68db      	ldr	r3, [r3, #12]
   dabae:	2b00      	cmp	r3, #0
   dabb0:	d1e4      	bne.n	dab7c <_Balloc+0x20>
   dabb2:	2000      	movs	r0, #0
   dabb4:	bd70      	pop	{r4, r5, r6, pc}
   dabb6:	6802      	ldr	r2, [r0, #0]
   dabb8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   dabbc:	2300      	movs	r3, #0
   dabbe:	e9c0 3303 	strd	r3, r3, [r0, #12]
   dabc2:	e7f7      	b.n	dabb4 <_Balloc+0x58>

000dabc4 <_Bfree>:
   dabc4:	b570      	push	{r4, r5, r6, lr}
   dabc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
   dabc8:	4605      	mov	r5, r0
   dabca:	460c      	mov	r4, r1
   dabcc:	b93e      	cbnz	r6, dabde <_Bfree+0x1a>
   dabce:	2010      	movs	r0, #16
   dabd0:	f7fc fb10 	bl	d71f4 <malloc>
   dabd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
   dabd8:	6268      	str	r0, [r5, #36]	; 0x24
   dabda:	6006      	str	r6, [r0, #0]
   dabdc:	60c6      	str	r6, [r0, #12]
   dabde:	b13c      	cbz	r4, dabf0 <_Bfree+0x2c>
   dabe0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   dabe2:	6862      	ldr	r2, [r4, #4]
   dabe4:	68db      	ldr	r3, [r3, #12]
   dabe6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   dabea:	6021      	str	r1, [r4, #0]
   dabec:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   dabf0:	bd70      	pop	{r4, r5, r6, pc}

000dabf2 <__multadd>:
   dabf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   dabf6:	690e      	ldr	r6, [r1, #16]
   dabf8:	4607      	mov	r7, r0
   dabfa:	4698      	mov	r8, r3
   dabfc:	460c      	mov	r4, r1
   dabfe:	f101 0014 	add.w	r0, r1, #20
   dac02:	2300      	movs	r3, #0
   dac04:	6805      	ldr	r5, [r0, #0]
   dac06:	b2a9      	uxth	r1, r5
   dac08:	fb02 8101 	mla	r1, r2, r1, r8
   dac0c:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   dac10:	0c2d      	lsrs	r5, r5, #16
   dac12:	fb02 c505 	mla	r5, r2, r5, ip
   dac16:	b289      	uxth	r1, r1
   dac18:	3301      	adds	r3, #1
   dac1a:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   dac1e:	429e      	cmp	r6, r3
   dac20:	f840 1b04 	str.w	r1, [r0], #4
   dac24:	ea4f 4815 	mov.w	r8, r5, lsr #16
   dac28:	dcec      	bgt.n	dac04 <__multadd+0x12>
   dac2a:	f1b8 0f00 	cmp.w	r8, #0
   dac2e:	d01b      	beq.n	dac68 <__multadd+0x76>
   dac30:	68a3      	ldr	r3, [r4, #8]
   dac32:	42b3      	cmp	r3, r6
   dac34:	dc12      	bgt.n	dac5c <__multadd+0x6a>
   dac36:	6861      	ldr	r1, [r4, #4]
   dac38:	4638      	mov	r0, r7
   dac3a:	3101      	adds	r1, #1
   dac3c:	f7ff ff8e 	bl	dab5c <_Balloc>
   dac40:	6922      	ldr	r2, [r4, #16]
   dac42:	3202      	adds	r2, #2
   dac44:	f104 010c 	add.w	r1, r4, #12
   dac48:	4605      	mov	r5, r0
   dac4a:	0092      	lsls	r2, r2, #2
   dac4c:	300c      	adds	r0, #12
   dac4e:	f7fe fcaf 	bl	d95b0 <memcpy>
   dac52:	4621      	mov	r1, r4
   dac54:	4638      	mov	r0, r7
   dac56:	f7ff ffb5 	bl	dabc4 <_Bfree>
   dac5a:	462c      	mov	r4, r5
   dac5c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   dac60:	3601      	adds	r6, #1
   dac62:	f8c3 8014 	str.w	r8, [r3, #20]
   dac66:	6126      	str	r6, [r4, #16]
   dac68:	4620      	mov	r0, r4
   dac6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000dac6e <__s2b>:
   dac6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   dac72:	460c      	mov	r4, r1
   dac74:	4615      	mov	r5, r2
   dac76:	461f      	mov	r7, r3
   dac78:	2209      	movs	r2, #9
   dac7a:	3308      	adds	r3, #8
   dac7c:	4606      	mov	r6, r0
   dac7e:	fb93 f3f2 	sdiv	r3, r3, r2
   dac82:	2100      	movs	r1, #0
   dac84:	2201      	movs	r2, #1
   dac86:	429a      	cmp	r2, r3
   dac88:	db20      	blt.n	daccc <__s2b+0x5e>
   dac8a:	4630      	mov	r0, r6
   dac8c:	f7ff ff66 	bl	dab5c <_Balloc>
   dac90:	9b08      	ldr	r3, [sp, #32]
   dac92:	6143      	str	r3, [r0, #20]
   dac94:	2d09      	cmp	r5, #9
   dac96:	f04f 0301 	mov.w	r3, #1
   dac9a:	6103      	str	r3, [r0, #16]
   dac9c:	dd19      	ble.n	dacd2 <__s2b+0x64>
   dac9e:	f104 0909 	add.w	r9, r4, #9
   daca2:	46c8      	mov	r8, r9
   daca4:	442c      	add	r4, r5
   daca6:	f818 3b01 	ldrb.w	r3, [r8], #1
   dacaa:	4601      	mov	r1, r0
   dacac:	3b30      	subs	r3, #48	; 0x30
   dacae:	220a      	movs	r2, #10
   dacb0:	4630      	mov	r0, r6
   dacb2:	f7ff ff9e 	bl	dabf2 <__multadd>
   dacb6:	45a0      	cmp	r8, r4
   dacb8:	d1f5      	bne.n	daca6 <__s2b+0x38>
   dacba:	f1a5 0408 	sub.w	r4, r5, #8
   dacbe:	444c      	add	r4, r9
   dacc0:	1b2d      	subs	r5, r5, r4
   dacc2:	1963      	adds	r3, r4, r5
   dacc4:	42bb      	cmp	r3, r7
   dacc6:	db07      	blt.n	dacd8 <__s2b+0x6a>
   dacc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   daccc:	0052      	lsls	r2, r2, #1
   dacce:	3101      	adds	r1, #1
   dacd0:	e7d9      	b.n	dac86 <__s2b+0x18>
   dacd2:	340a      	adds	r4, #10
   dacd4:	2509      	movs	r5, #9
   dacd6:	e7f3      	b.n	dacc0 <__s2b+0x52>
   dacd8:	f814 3b01 	ldrb.w	r3, [r4], #1
   dacdc:	4601      	mov	r1, r0
   dacde:	3b30      	subs	r3, #48	; 0x30
   dace0:	220a      	movs	r2, #10
   dace2:	4630      	mov	r0, r6
   dace4:	f7ff ff85 	bl	dabf2 <__multadd>
   dace8:	e7eb      	b.n	dacc2 <__s2b+0x54>

000dacea <__hi0bits>:
   dacea:	0c03      	lsrs	r3, r0, #16
   dacec:	041b      	lsls	r3, r3, #16
   dacee:	b9d3      	cbnz	r3, dad26 <__hi0bits+0x3c>
   dacf0:	0400      	lsls	r0, r0, #16
   dacf2:	2310      	movs	r3, #16
   dacf4:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   dacf8:	bf04      	itt	eq
   dacfa:	0200      	lsleq	r0, r0, #8
   dacfc:	3308      	addeq	r3, #8
   dacfe:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   dad02:	bf04      	itt	eq
   dad04:	0100      	lsleq	r0, r0, #4
   dad06:	3304      	addeq	r3, #4
   dad08:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   dad0c:	bf04      	itt	eq
   dad0e:	0080      	lsleq	r0, r0, #2
   dad10:	3302      	addeq	r3, #2
   dad12:	2800      	cmp	r0, #0
   dad14:	db05      	blt.n	dad22 <__hi0bits+0x38>
   dad16:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   dad1a:	f103 0301 	add.w	r3, r3, #1
   dad1e:	bf08      	it	eq
   dad20:	2320      	moveq	r3, #32
   dad22:	4618      	mov	r0, r3
   dad24:	4770      	bx	lr
   dad26:	2300      	movs	r3, #0
   dad28:	e7e4      	b.n	dacf4 <__hi0bits+0xa>

000dad2a <__lo0bits>:
   dad2a:	6803      	ldr	r3, [r0, #0]
   dad2c:	f013 0207 	ands.w	r2, r3, #7
   dad30:	4601      	mov	r1, r0
   dad32:	d00b      	beq.n	dad4c <__lo0bits+0x22>
   dad34:	07da      	lsls	r2, r3, #31
   dad36:	d424      	bmi.n	dad82 <__lo0bits+0x58>
   dad38:	0798      	lsls	r0, r3, #30
   dad3a:	bf49      	itett	mi
   dad3c:	085b      	lsrmi	r3, r3, #1
   dad3e:	089b      	lsrpl	r3, r3, #2
   dad40:	2001      	movmi	r0, #1
   dad42:	600b      	strmi	r3, [r1, #0]
   dad44:	bf5c      	itt	pl
   dad46:	600b      	strpl	r3, [r1, #0]
   dad48:	2002      	movpl	r0, #2
   dad4a:	4770      	bx	lr
   dad4c:	b298      	uxth	r0, r3
   dad4e:	b9b0      	cbnz	r0, dad7e <__lo0bits+0x54>
   dad50:	0c1b      	lsrs	r3, r3, #16
   dad52:	2010      	movs	r0, #16
   dad54:	f013 0fff 	tst.w	r3, #255	; 0xff
   dad58:	bf04      	itt	eq
   dad5a:	0a1b      	lsreq	r3, r3, #8
   dad5c:	3008      	addeq	r0, #8
   dad5e:	071a      	lsls	r2, r3, #28
   dad60:	bf04      	itt	eq
   dad62:	091b      	lsreq	r3, r3, #4
   dad64:	3004      	addeq	r0, #4
   dad66:	079a      	lsls	r2, r3, #30
   dad68:	bf04      	itt	eq
   dad6a:	089b      	lsreq	r3, r3, #2
   dad6c:	3002      	addeq	r0, #2
   dad6e:	07da      	lsls	r2, r3, #31
   dad70:	d403      	bmi.n	dad7a <__lo0bits+0x50>
   dad72:	085b      	lsrs	r3, r3, #1
   dad74:	f100 0001 	add.w	r0, r0, #1
   dad78:	d005      	beq.n	dad86 <__lo0bits+0x5c>
   dad7a:	600b      	str	r3, [r1, #0]
   dad7c:	4770      	bx	lr
   dad7e:	4610      	mov	r0, r2
   dad80:	e7e8      	b.n	dad54 <__lo0bits+0x2a>
   dad82:	2000      	movs	r0, #0
   dad84:	4770      	bx	lr
   dad86:	2020      	movs	r0, #32
   dad88:	4770      	bx	lr

000dad8a <__i2b>:
   dad8a:	b510      	push	{r4, lr}
   dad8c:	460c      	mov	r4, r1
   dad8e:	2101      	movs	r1, #1
   dad90:	f7ff fee4 	bl	dab5c <_Balloc>
   dad94:	2201      	movs	r2, #1
   dad96:	6144      	str	r4, [r0, #20]
   dad98:	6102      	str	r2, [r0, #16]
   dad9a:	bd10      	pop	{r4, pc}

000dad9c <__multiply>:
   dad9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dada0:	4615      	mov	r5, r2
   dada2:	690a      	ldr	r2, [r1, #16]
   dada4:	692b      	ldr	r3, [r5, #16]
   dada6:	429a      	cmp	r2, r3
   dada8:	bfb8      	it	lt
   dadaa:	460b      	movlt	r3, r1
   dadac:	460c      	mov	r4, r1
   dadae:	bfbc      	itt	lt
   dadb0:	462c      	movlt	r4, r5
   dadb2:	461d      	movlt	r5, r3
   dadb4:	6927      	ldr	r7, [r4, #16]
   dadb6:	f8d5 9010 	ldr.w	r9, [r5, #16]
   dadba:	68a3      	ldr	r3, [r4, #8]
   dadbc:	6861      	ldr	r1, [r4, #4]
   dadbe:	eb07 0609 	add.w	r6, r7, r9
   dadc2:	42b3      	cmp	r3, r6
   dadc4:	bfb8      	it	lt
   dadc6:	3101      	addlt	r1, #1
   dadc8:	b085      	sub	sp, #20
   dadca:	f7ff fec7 	bl	dab5c <_Balloc>
   dadce:	f100 0114 	add.w	r1, r0, #20
   dadd2:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   dadd6:	460b      	mov	r3, r1
   dadd8:	2200      	movs	r2, #0
   dadda:	4543      	cmp	r3, r8
   daddc:	d31d      	bcc.n	dae1a <__multiply+0x7e>
   dadde:	f104 0314 	add.w	r3, r4, #20
   dade2:	f105 0214 	add.w	r2, r5, #20
   dade6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   dadea:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   dadee:	9302      	str	r3, [sp, #8]
   dadf0:	1b3b      	subs	r3, r7, r4
   dadf2:	3b15      	subs	r3, #21
   dadf4:	f023 0303 	bic.w	r3, r3, #3
   dadf8:	3304      	adds	r3, #4
   dadfa:	f104 0515 	add.w	r5, r4, #21
   dadfe:	42af      	cmp	r7, r5
   dae00:	bf38      	it	cc
   dae02:	2304      	movcc	r3, #4
   dae04:	9301      	str	r3, [sp, #4]
   dae06:	9b02      	ldr	r3, [sp, #8]
   dae08:	9203      	str	r2, [sp, #12]
   dae0a:	4293      	cmp	r3, r2
   dae0c:	d808      	bhi.n	dae20 <__multiply+0x84>
   dae0e:	2e00      	cmp	r6, #0
   dae10:	dc5a      	bgt.n	daec8 <__multiply+0x12c>
   dae12:	6106      	str	r6, [r0, #16]
   dae14:	b005      	add	sp, #20
   dae16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dae1a:	f843 2b04 	str.w	r2, [r3], #4
   dae1e:	e7dc      	b.n	dadda <__multiply+0x3e>
   dae20:	f8b2 a000 	ldrh.w	sl, [r2]
   dae24:	f1ba 0f00 	cmp.w	sl, #0
   dae28:	d024      	beq.n	dae74 <__multiply+0xd8>
   dae2a:	f104 0e14 	add.w	lr, r4, #20
   dae2e:	4689      	mov	r9, r1
   dae30:	f04f 0c00 	mov.w	ip, #0
   dae34:	f85e 5b04 	ldr.w	r5, [lr], #4
   dae38:	f8d9 b000 	ldr.w	fp, [r9]
   dae3c:	b2ab      	uxth	r3, r5
   dae3e:	fa1f fb8b 	uxth.w	fp, fp
   dae42:	fb0a b303 	mla	r3, sl, r3, fp
   dae46:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   dae4a:	f8d9 5000 	ldr.w	r5, [r9]
   dae4e:	4463      	add	r3, ip
   dae50:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dae54:	fb0a c50b 	mla	r5, sl, fp, ip
   dae58:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   dae5c:	b29b      	uxth	r3, r3
   dae5e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   dae62:	4577      	cmp	r7, lr
   dae64:	f849 3b04 	str.w	r3, [r9], #4
   dae68:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   dae6c:	d8e2      	bhi.n	dae34 <__multiply+0x98>
   dae6e:	9b01      	ldr	r3, [sp, #4]
   dae70:	f841 c003 	str.w	ip, [r1, r3]
   dae74:	9b03      	ldr	r3, [sp, #12]
   dae76:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   dae7a:	3204      	adds	r2, #4
   dae7c:	f1b9 0f00 	cmp.w	r9, #0
   dae80:	d020      	beq.n	daec4 <__multiply+0x128>
   dae82:	680b      	ldr	r3, [r1, #0]
   dae84:	f104 0c14 	add.w	ip, r4, #20
   dae88:	468e      	mov	lr, r1
   dae8a:	f04f 0a00 	mov.w	sl, #0
   dae8e:	f8bc 5000 	ldrh.w	r5, [ip]
   dae92:	f8be b002 	ldrh.w	fp, [lr, #2]
   dae96:	fb09 b505 	mla	r5, r9, r5, fp
   dae9a:	44aa      	add	sl, r5
   dae9c:	b29b      	uxth	r3, r3
   dae9e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   daea2:	f84e 3b04 	str.w	r3, [lr], #4
   daea6:	f85c 3b04 	ldr.w	r3, [ip], #4
   daeaa:	f8be 5000 	ldrh.w	r5, [lr]
   daeae:	0c1b      	lsrs	r3, r3, #16
   daeb0:	fb09 5303 	mla	r3, r9, r3, r5
   daeb4:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   daeb8:	4567      	cmp	r7, ip
   daeba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   daebe:	d8e6      	bhi.n	dae8e <__multiply+0xf2>
   daec0:	9d01      	ldr	r5, [sp, #4]
   daec2:	514b      	str	r3, [r1, r5]
   daec4:	3104      	adds	r1, #4
   daec6:	e79e      	b.n	dae06 <__multiply+0x6a>
   daec8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   daecc:	2b00      	cmp	r3, #0
   daece:	d1a0      	bne.n	dae12 <__multiply+0x76>
   daed0:	3e01      	subs	r6, #1
   daed2:	e79c      	b.n	dae0e <__multiply+0x72>

000daed4 <__pow5mult>:
   daed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   daed8:	4615      	mov	r5, r2
   daeda:	f012 0203 	ands.w	r2, r2, #3
   daede:	4606      	mov	r6, r0
   daee0:	460f      	mov	r7, r1
   daee2:	d007      	beq.n	daef4 <__pow5mult+0x20>
   daee4:	4c21      	ldr	r4, [pc, #132]	; (daf6c <__pow5mult+0x98>)
   daee6:	3a01      	subs	r2, #1
   daee8:	2300      	movs	r3, #0
   daeea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   daeee:	f7ff fe80 	bl	dabf2 <__multadd>
   daef2:	4607      	mov	r7, r0
   daef4:	10ad      	asrs	r5, r5, #2
   daef6:	d035      	beq.n	daf64 <__pow5mult+0x90>
   daef8:	6a74      	ldr	r4, [r6, #36]	; 0x24
   daefa:	b93c      	cbnz	r4, daf0c <__pow5mult+0x38>
   daefc:	2010      	movs	r0, #16
   daefe:	f7fc f979 	bl	d71f4 <malloc>
   daf02:	e9c0 4401 	strd	r4, r4, [r0, #4]
   daf06:	6270      	str	r0, [r6, #36]	; 0x24
   daf08:	6004      	str	r4, [r0, #0]
   daf0a:	60c4      	str	r4, [r0, #12]
   daf0c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   daf10:	f8d8 4008 	ldr.w	r4, [r8, #8]
   daf14:	b94c      	cbnz	r4, daf2a <__pow5mult+0x56>
   daf16:	f240 2171 	movw	r1, #625	; 0x271
   daf1a:	4630      	mov	r0, r6
   daf1c:	f7ff ff35 	bl	dad8a <__i2b>
   daf20:	2300      	movs	r3, #0
   daf22:	f8c8 0008 	str.w	r0, [r8, #8]
   daf26:	4604      	mov	r4, r0
   daf28:	6003      	str	r3, [r0, #0]
   daf2a:	f04f 0900 	mov.w	r9, #0
   daf2e:	07eb      	lsls	r3, r5, #31
   daf30:	d50a      	bpl.n	daf48 <__pow5mult+0x74>
   daf32:	4639      	mov	r1, r7
   daf34:	4622      	mov	r2, r4
   daf36:	4630      	mov	r0, r6
   daf38:	f7ff ff30 	bl	dad9c <__multiply>
   daf3c:	4639      	mov	r1, r7
   daf3e:	4680      	mov	r8, r0
   daf40:	4630      	mov	r0, r6
   daf42:	f7ff fe3f 	bl	dabc4 <_Bfree>
   daf46:	4647      	mov	r7, r8
   daf48:	106d      	asrs	r5, r5, #1
   daf4a:	d00b      	beq.n	daf64 <__pow5mult+0x90>
   daf4c:	6820      	ldr	r0, [r4, #0]
   daf4e:	b938      	cbnz	r0, daf60 <__pow5mult+0x8c>
   daf50:	4622      	mov	r2, r4
   daf52:	4621      	mov	r1, r4
   daf54:	4630      	mov	r0, r6
   daf56:	f7ff ff21 	bl	dad9c <__multiply>
   daf5a:	6020      	str	r0, [r4, #0]
   daf5c:	f8c0 9000 	str.w	r9, [r0]
   daf60:	4604      	mov	r4, r0
   daf62:	e7e4      	b.n	daf2e <__pow5mult+0x5a>
   daf64:	4638      	mov	r0, r7
   daf66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   daf6a:	bf00      	nop
   daf6c:	000dc348 	.word	0x000dc348

000daf70 <__lshift>:
   daf70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   daf74:	460c      	mov	r4, r1
   daf76:	6849      	ldr	r1, [r1, #4]
   daf78:	6923      	ldr	r3, [r4, #16]
   daf7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
   daf7e:	68a3      	ldr	r3, [r4, #8]
   daf80:	4607      	mov	r7, r0
   daf82:	4691      	mov	r9, r2
   daf84:	ea4f 1a62 	mov.w	sl, r2, asr #5
   daf88:	f108 0601 	add.w	r6, r8, #1
   daf8c:	42b3      	cmp	r3, r6
   daf8e:	db3f      	blt.n	db010 <__lshift+0xa0>
   daf90:	4638      	mov	r0, r7
   daf92:	f7ff fde3 	bl	dab5c <_Balloc>
   daf96:	2300      	movs	r3, #0
   daf98:	4605      	mov	r5, r0
   daf9a:	f100 0114 	add.w	r1, r0, #20
   daf9e:	f100 0210 	add.w	r2, r0, #16
   dafa2:	4618      	mov	r0, r3
   dafa4:	4553      	cmp	r3, sl
   dafa6:	db36      	blt.n	db016 <__lshift+0xa6>
   dafa8:	6920      	ldr	r0, [r4, #16]
   dafaa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   dafae:	f104 0314 	add.w	r3, r4, #20
   dafb2:	f019 091f 	ands.w	r9, r9, #31
   dafb6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   dafba:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   dafbe:	d02e      	beq.n	db01e <__lshift+0xae>
   dafc0:	f1c9 0e20 	rsb	lr, r9, #32
   dafc4:	468a      	mov	sl, r1
   dafc6:	2200      	movs	r2, #0
   dafc8:	6818      	ldr	r0, [r3, #0]
   dafca:	fa00 f009 	lsl.w	r0, r0, r9
   dafce:	4302      	orrs	r2, r0
   dafd0:	f84a 2b04 	str.w	r2, [sl], #4
   dafd4:	f853 2b04 	ldr.w	r2, [r3], #4
   dafd8:	459c      	cmp	ip, r3
   dafda:	fa22 f20e 	lsr.w	r2, r2, lr
   dafde:	d8f3      	bhi.n	dafc8 <__lshift+0x58>
   dafe0:	ebac 0304 	sub.w	r3, ip, r4
   dafe4:	3b15      	subs	r3, #21
   dafe6:	f023 0303 	bic.w	r3, r3, #3
   dafea:	3304      	adds	r3, #4
   dafec:	f104 0015 	add.w	r0, r4, #21
   daff0:	4560      	cmp	r0, ip
   daff2:	bf88      	it	hi
   daff4:	2304      	movhi	r3, #4
   daff6:	50ca      	str	r2, [r1, r3]
   daff8:	b10a      	cbz	r2, daffe <__lshift+0x8e>
   daffa:	f108 0602 	add.w	r6, r8, #2
   daffe:	3e01      	subs	r6, #1
   db000:	4638      	mov	r0, r7
   db002:	612e      	str	r6, [r5, #16]
   db004:	4621      	mov	r1, r4
   db006:	f7ff fddd 	bl	dabc4 <_Bfree>
   db00a:	4628      	mov	r0, r5
   db00c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   db010:	3101      	adds	r1, #1
   db012:	005b      	lsls	r3, r3, #1
   db014:	e7ba      	b.n	daf8c <__lshift+0x1c>
   db016:	f842 0f04 	str.w	r0, [r2, #4]!
   db01a:	3301      	adds	r3, #1
   db01c:	e7c2      	b.n	dafa4 <__lshift+0x34>
   db01e:	3904      	subs	r1, #4
   db020:	f853 2b04 	ldr.w	r2, [r3], #4
   db024:	f841 2f04 	str.w	r2, [r1, #4]!
   db028:	459c      	cmp	ip, r3
   db02a:	d8f9      	bhi.n	db020 <__lshift+0xb0>
   db02c:	e7e7      	b.n	daffe <__lshift+0x8e>

000db02e <__mcmp>:
   db02e:	b530      	push	{r4, r5, lr}
   db030:	6902      	ldr	r2, [r0, #16]
   db032:	690c      	ldr	r4, [r1, #16]
   db034:	1b12      	subs	r2, r2, r4
   db036:	d10e      	bne.n	db056 <__mcmp+0x28>
   db038:	f100 0314 	add.w	r3, r0, #20
   db03c:	3114      	adds	r1, #20
   db03e:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   db042:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   db046:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   db04a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   db04e:	42a5      	cmp	r5, r4
   db050:	d003      	beq.n	db05a <__mcmp+0x2c>
   db052:	d305      	bcc.n	db060 <__mcmp+0x32>
   db054:	2201      	movs	r2, #1
   db056:	4610      	mov	r0, r2
   db058:	bd30      	pop	{r4, r5, pc}
   db05a:	4283      	cmp	r3, r0
   db05c:	d3f3      	bcc.n	db046 <__mcmp+0x18>
   db05e:	e7fa      	b.n	db056 <__mcmp+0x28>
   db060:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   db064:	e7f7      	b.n	db056 <__mcmp+0x28>

000db066 <__mdiff>:
   db066:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db06a:	460c      	mov	r4, r1
   db06c:	4606      	mov	r6, r0
   db06e:	4611      	mov	r1, r2
   db070:	4620      	mov	r0, r4
   db072:	4617      	mov	r7, r2
   db074:	f7ff ffdb 	bl	db02e <__mcmp>
   db078:	1e05      	subs	r5, r0, #0
   db07a:	d108      	bne.n	db08e <__mdiff+0x28>
   db07c:	4629      	mov	r1, r5
   db07e:	4630      	mov	r0, r6
   db080:	f7ff fd6c 	bl	dab5c <_Balloc>
   db084:	2301      	movs	r3, #1
   db086:	e9c0 3504 	strd	r3, r5, [r0, #16]
   db08a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   db08e:	bfa4      	itt	ge
   db090:	463b      	movge	r3, r7
   db092:	4627      	movge	r7, r4
   db094:	4630      	mov	r0, r6
   db096:	6879      	ldr	r1, [r7, #4]
   db098:	bfa6      	itte	ge
   db09a:	461c      	movge	r4, r3
   db09c:	2500      	movge	r5, #0
   db09e:	2501      	movlt	r5, #1
   db0a0:	f7ff fd5c 	bl	dab5c <_Balloc>
   db0a4:	693e      	ldr	r6, [r7, #16]
   db0a6:	60c5      	str	r5, [r0, #12]
   db0a8:	6925      	ldr	r5, [r4, #16]
   db0aa:	f107 0114 	add.w	r1, r7, #20
   db0ae:	f104 0914 	add.w	r9, r4, #20
   db0b2:	f100 0e14 	add.w	lr, r0, #20
   db0b6:	f107 0210 	add.w	r2, r7, #16
   db0ba:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   db0be:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   db0c2:	46f2      	mov	sl, lr
   db0c4:	2700      	movs	r7, #0
   db0c6:	f859 3b04 	ldr.w	r3, [r9], #4
   db0ca:	f852 bf04 	ldr.w	fp, [r2, #4]!
   db0ce:	fa1f f883 	uxth.w	r8, r3
   db0d2:	fa17 f78b 	uxtah	r7, r7, fp
   db0d6:	0c1b      	lsrs	r3, r3, #16
   db0d8:	eba7 0808 	sub.w	r8, r7, r8
   db0dc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   db0e0:	eb03 4328 	add.w	r3, r3, r8, asr #16
   db0e4:	fa1f f888 	uxth.w	r8, r8
   db0e8:	141f      	asrs	r7, r3, #16
   db0ea:	454d      	cmp	r5, r9
   db0ec:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   db0f0:	f84a 3b04 	str.w	r3, [sl], #4
   db0f4:	d8e7      	bhi.n	db0c6 <__mdiff+0x60>
   db0f6:	1b2b      	subs	r3, r5, r4
   db0f8:	3b15      	subs	r3, #21
   db0fa:	f023 0303 	bic.w	r3, r3, #3
   db0fe:	3304      	adds	r3, #4
   db100:	3415      	adds	r4, #21
   db102:	42a5      	cmp	r5, r4
   db104:	bf38      	it	cc
   db106:	2304      	movcc	r3, #4
   db108:	4419      	add	r1, r3
   db10a:	4473      	add	r3, lr
   db10c:	469e      	mov	lr, r3
   db10e:	460d      	mov	r5, r1
   db110:	4565      	cmp	r5, ip
   db112:	d30e      	bcc.n	db132 <__mdiff+0xcc>
   db114:	f10c 0203 	add.w	r2, ip, #3
   db118:	1a52      	subs	r2, r2, r1
   db11a:	f022 0203 	bic.w	r2, r2, #3
   db11e:	3903      	subs	r1, #3
   db120:	458c      	cmp	ip, r1
   db122:	bf38      	it	cc
   db124:	2200      	movcc	r2, #0
   db126:	441a      	add	r2, r3
   db128:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   db12c:	b17b      	cbz	r3, db14e <__mdiff+0xe8>
   db12e:	6106      	str	r6, [r0, #16]
   db130:	e7ab      	b.n	db08a <__mdiff+0x24>
   db132:	f855 8b04 	ldr.w	r8, [r5], #4
   db136:	fa17 f488 	uxtah	r4, r7, r8
   db13a:	1422      	asrs	r2, r4, #16
   db13c:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   db140:	b2a4      	uxth	r4, r4
   db142:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   db146:	f84e 4b04 	str.w	r4, [lr], #4
   db14a:	1417      	asrs	r7, r2, #16
   db14c:	e7e0      	b.n	db110 <__mdiff+0xaa>
   db14e:	3e01      	subs	r6, #1
   db150:	e7ea      	b.n	db128 <__mdiff+0xc2>
	...

000db154 <__ulp>:
   db154:	b082      	sub	sp, #8
   db156:	ed8d 0b00 	vstr	d0, [sp]
   db15a:	9b01      	ldr	r3, [sp, #4]
   db15c:	4912      	ldr	r1, [pc, #72]	; (db1a8 <__ulp+0x54>)
   db15e:	4019      	ands	r1, r3
   db160:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   db164:	2900      	cmp	r1, #0
   db166:	dd05      	ble.n	db174 <__ulp+0x20>
   db168:	2200      	movs	r2, #0
   db16a:	460b      	mov	r3, r1
   db16c:	ec43 2b10 	vmov	d0, r2, r3
   db170:	b002      	add	sp, #8
   db172:	4770      	bx	lr
   db174:	4249      	negs	r1, r1
   db176:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   db17a:	ea4f 5021 	mov.w	r0, r1, asr #20
   db17e:	f04f 0200 	mov.w	r2, #0
   db182:	f04f 0300 	mov.w	r3, #0
   db186:	da04      	bge.n	db192 <__ulp+0x3e>
   db188:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   db18c:	fa41 f300 	asr.w	r3, r1, r0
   db190:	e7ec      	b.n	db16c <__ulp+0x18>
   db192:	f1a0 0114 	sub.w	r1, r0, #20
   db196:	291e      	cmp	r1, #30
   db198:	bfda      	itte	le
   db19a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   db19e:	fa20 f101 	lsrle.w	r1, r0, r1
   db1a2:	2101      	movgt	r1, #1
   db1a4:	460a      	mov	r2, r1
   db1a6:	e7e1      	b.n	db16c <__ulp+0x18>
   db1a8:	7ff00000 	.word	0x7ff00000

000db1ac <__b2d>:
   db1ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   db1ae:	6905      	ldr	r5, [r0, #16]
   db1b0:	f100 0714 	add.w	r7, r0, #20
   db1b4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   db1b8:	1f2e      	subs	r6, r5, #4
   db1ba:	f855 4c04 	ldr.w	r4, [r5, #-4]
   db1be:	4620      	mov	r0, r4
   db1c0:	f7ff fd93 	bl	dacea <__hi0bits>
   db1c4:	f1c0 0320 	rsb	r3, r0, #32
   db1c8:	280a      	cmp	r0, #10
   db1ca:	f8df c07c 	ldr.w	ip, [pc, #124]	; db248 <__b2d+0x9c>
   db1ce:	600b      	str	r3, [r1, #0]
   db1d0:	dc14      	bgt.n	db1fc <__b2d+0x50>
   db1d2:	f1c0 0e0b 	rsb	lr, r0, #11
   db1d6:	fa24 f10e 	lsr.w	r1, r4, lr
   db1da:	42b7      	cmp	r7, r6
   db1dc:	ea41 030c 	orr.w	r3, r1, ip
   db1e0:	bf34      	ite	cc
   db1e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db1e6:	2100      	movcs	r1, #0
   db1e8:	3015      	adds	r0, #21
   db1ea:	fa04 f000 	lsl.w	r0, r4, r0
   db1ee:	fa21 f10e 	lsr.w	r1, r1, lr
   db1f2:	ea40 0201 	orr.w	r2, r0, r1
   db1f6:	ec43 2b10 	vmov	d0, r2, r3
   db1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   db1fc:	42b7      	cmp	r7, r6
   db1fe:	bf3a      	itte	cc
   db200:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   db204:	f1a5 0608 	subcc.w	r6, r5, #8
   db208:	2100      	movcs	r1, #0
   db20a:	380b      	subs	r0, #11
   db20c:	d017      	beq.n	db23e <__b2d+0x92>
   db20e:	f1c0 0c20 	rsb	ip, r0, #32
   db212:	fa04 f500 	lsl.w	r5, r4, r0
   db216:	42be      	cmp	r6, r7
   db218:	fa21 f40c 	lsr.w	r4, r1, ip
   db21c:	ea45 0504 	orr.w	r5, r5, r4
   db220:	bf8c      	ite	hi
   db222:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   db226:	2400      	movls	r4, #0
   db228:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   db22c:	fa01 f000 	lsl.w	r0, r1, r0
   db230:	fa24 f40c 	lsr.w	r4, r4, ip
   db234:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   db238:	ea40 0204 	orr.w	r2, r0, r4
   db23c:	e7db      	b.n	db1f6 <__b2d+0x4a>
   db23e:	ea44 030c 	orr.w	r3, r4, ip
   db242:	460a      	mov	r2, r1
   db244:	e7d7      	b.n	db1f6 <__b2d+0x4a>
   db246:	bf00      	nop
   db248:	3ff00000 	.word	0x3ff00000

000db24c <__d2b>:
   db24c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   db250:	4689      	mov	r9, r1
   db252:	2101      	movs	r1, #1
   db254:	ec57 6b10 	vmov	r6, r7, d0
   db258:	4690      	mov	r8, r2
   db25a:	f7ff fc7f 	bl	dab5c <_Balloc>
   db25e:	f3c7 550a 	ubfx	r5, r7, #20, #11
   db262:	4604      	mov	r4, r0
   db264:	f3c7 0313 	ubfx	r3, r7, #0, #20
   db268:	bb35      	cbnz	r5, db2b8 <__d2b+0x6c>
   db26a:	2e00      	cmp	r6, #0
   db26c:	9301      	str	r3, [sp, #4]
   db26e:	d028      	beq.n	db2c2 <__d2b+0x76>
   db270:	4668      	mov	r0, sp
   db272:	9600      	str	r6, [sp, #0]
   db274:	f7ff fd59 	bl	dad2a <__lo0bits>
   db278:	9900      	ldr	r1, [sp, #0]
   db27a:	b300      	cbz	r0, db2be <__d2b+0x72>
   db27c:	9a01      	ldr	r2, [sp, #4]
   db27e:	f1c0 0320 	rsb	r3, r0, #32
   db282:	fa02 f303 	lsl.w	r3, r2, r3
   db286:	430b      	orrs	r3, r1
   db288:	40c2      	lsrs	r2, r0
   db28a:	6163      	str	r3, [r4, #20]
   db28c:	9201      	str	r2, [sp, #4]
   db28e:	9b01      	ldr	r3, [sp, #4]
   db290:	61a3      	str	r3, [r4, #24]
   db292:	2b00      	cmp	r3, #0
   db294:	bf14      	ite	ne
   db296:	2202      	movne	r2, #2
   db298:	2201      	moveq	r2, #1
   db29a:	6122      	str	r2, [r4, #16]
   db29c:	b1d5      	cbz	r5, db2d4 <__d2b+0x88>
   db29e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   db2a2:	4405      	add	r5, r0
   db2a4:	f8c9 5000 	str.w	r5, [r9]
   db2a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   db2ac:	f8c8 0000 	str.w	r0, [r8]
   db2b0:	4620      	mov	r0, r4
   db2b2:	b003      	add	sp, #12
   db2b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db2b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   db2bc:	e7d5      	b.n	db26a <__d2b+0x1e>
   db2be:	6161      	str	r1, [r4, #20]
   db2c0:	e7e5      	b.n	db28e <__d2b+0x42>
   db2c2:	a801      	add	r0, sp, #4
   db2c4:	f7ff fd31 	bl	dad2a <__lo0bits>
   db2c8:	9b01      	ldr	r3, [sp, #4]
   db2ca:	6163      	str	r3, [r4, #20]
   db2cc:	2201      	movs	r2, #1
   db2ce:	6122      	str	r2, [r4, #16]
   db2d0:	3020      	adds	r0, #32
   db2d2:	e7e3      	b.n	db29c <__d2b+0x50>
   db2d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   db2d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   db2dc:	f8c9 0000 	str.w	r0, [r9]
   db2e0:	6918      	ldr	r0, [r3, #16]
   db2e2:	f7ff fd02 	bl	dacea <__hi0bits>
   db2e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   db2ea:	e7df      	b.n	db2ac <__d2b+0x60>

000db2ec <__ratio>:
   db2ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   db2f0:	4688      	mov	r8, r1
   db2f2:	4669      	mov	r1, sp
   db2f4:	4681      	mov	r9, r0
   db2f6:	f7ff ff59 	bl	db1ac <__b2d>
   db2fa:	a901      	add	r1, sp, #4
   db2fc:	4640      	mov	r0, r8
   db2fe:	ec55 4b10 	vmov	r4, r5, d0
   db302:	f7ff ff53 	bl	db1ac <__b2d>
   db306:	f8d9 3010 	ldr.w	r3, [r9, #16]
   db30a:	f8d8 2010 	ldr.w	r2, [r8, #16]
   db30e:	eba3 0c02 	sub.w	ip, r3, r2
   db312:	e9dd 3200 	ldrd	r3, r2, [sp]
   db316:	1a9b      	subs	r3, r3, r2
   db318:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   db31c:	ec51 0b10 	vmov	r0, r1, d0
   db320:	2b00      	cmp	r3, #0
   db322:	bfd6      	itet	le
   db324:	460a      	movle	r2, r1
   db326:	462a      	movgt	r2, r5
   db328:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   db32c:	468b      	mov	fp, r1
   db32e:	462f      	mov	r7, r5
   db330:	bfd4      	ite	le
   db332:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   db336:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   db33a:	4620      	mov	r0, r4
   db33c:	ee10 2a10 	vmov	r2, s0
   db340:	465b      	mov	r3, fp
   db342:	4639      	mov	r1, r7
   db344:	f7fd fed2 	bl	d90ec <__aeabi_ddiv>
   db348:	ec41 0b10 	vmov	d0, r0, r1
   db34c:	b003      	add	sp, #12
   db34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000db352 <__copybits>:
   db352:	3901      	subs	r1, #1
   db354:	b570      	push	{r4, r5, r6, lr}
   db356:	1149      	asrs	r1, r1, #5
   db358:	6914      	ldr	r4, [r2, #16]
   db35a:	3101      	adds	r1, #1
   db35c:	f102 0314 	add.w	r3, r2, #20
   db360:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   db364:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   db368:	1f05      	subs	r5, r0, #4
   db36a:	42a3      	cmp	r3, r4
   db36c:	d30c      	bcc.n	db388 <__copybits+0x36>
   db36e:	1aa3      	subs	r3, r4, r2
   db370:	3b11      	subs	r3, #17
   db372:	f023 0303 	bic.w	r3, r3, #3
   db376:	3211      	adds	r2, #17
   db378:	42a2      	cmp	r2, r4
   db37a:	bf88      	it	hi
   db37c:	2300      	movhi	r3, #0
   db37e:	4418      	add	r0, r3
   db380:	2300      	movs	r3, #0
   db382:	4288      	cmp	r0, r1
   db384:	d305      	bcc.n	db392 <__copybits+0x40>
   db386:	bd70      	pop	{r4, r5, r6, pc}
   db388:	f853 6b04 	ldr.w	r6, [r3], #4
   db38c:	f845 6f04 	str.w	r6, [r5, #4]!
   db390:	e7eb      	b.n	db36a <__copybits+0x18>
   db392:	f840 3b04 	str.w	r3, [r0], #4
   db396:	e7f4      	b.n	db382 <__copybits+0x30>

000db398 <__any_on>:
   db398:	f100 0214 	add.w	r2, r0, #20
   db39c:	6900      	ldr	r0, [r0, #16]
   db39e:	114b      	asrs	r3, r1, #5
   db3a0:	4298      	cmp	r0, r3
   db3a2:	b510      	push	{r4, lr}
   db3a4:	db11      	blt.n	db3ca <__any_on+0x32>
   db3a6:	dd0a      	ble.n	db3be <__any_on+0x26>
   db3a8:	f011 011f 	ands.w	r1, r1, #31
   db3ac:	d007      	beq.n	db3be <__any_on+0x26>
   db3ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   db3b2:	fa24 f001 	lsr.w	r0, r4, r1
   db3b6:	fa00 f101 	lsl.w	r1, r0, r1
   db3ba:	428c      	cmp	r4, r1
   db3bc:	d10b      	bne.n	db3d6 <__any_on+0x3e>
   db3be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   db3c2:	4293      	cmp	r3, r2
   db3c4:	d803      	bhi.n	db3ce <__any_on+0x36>
   db3c6:	2000      	movs	r0, #0
   db3c8:	bd10      	pop	{r4, pc}
   db3ca:	4603      	mov	r3, r0
   db3cc:	e7f7      	b.n	db3be <__any_on+0x26>
   db3ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   db3d2:	2900      	cmp	r1, #0
   db3d4:	d0f5      	beq.n	db3c2 <__any_on+0x2a>
   db3d6:	2001      	movs	r0, #1
   db3d8:	e7f6      	b.n	db3c8 <__any_on+0x30>

000db3da <_calloc_r>:
   db3da:	b513      	push	{r0, r1, r4, lr}
   db3dc:	434a      	muls	r2, r1
   db3de:	4611      	mov	r1, r2
   db3e0:	9201      	str	r2, [sp, #4]
   db3e2:	f7fb ff37 	bl	d7254 <_malloc_r>
   db3e6:	4604      	mov	r4, r0
   db3e8:	b118      	cbz	r0, db3f2 <_calloc_r+0x18>
   db3ea:	9a01      	ldr	r2, [sp, #4]
   db3ec:	2100      	movs	r1, #0
   db3ee:	f7fe f907 	bl	d9600 <memset>
   db3f2:	4620      	mov	r0, r4
   db3f4:	b002      	add	sp, #8
   db3f6:	bd10      	pop	{r4, pc}

000db3f8 <nan>:
   db3f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; db400 <nan+0x8>
   db3fc:	4770      	bx	lr
   db3fe:	bf00      	nop
   db400:	00000000 	.word	0x00000000
   db404:	7ff80000 	.word	0x7ff80000

000db408 <__ascii_wctomb>:
   db408:	b149      	cbz	r1, db41e <__ascii_wctomb+0x16>
   db40a:	2aff      	cmp	r2, #255	; 0xff
   db40c:	bf85      	ittet	hi
   db40e:	238a      	movhi	r3, #138	; 0x8a
   db410:	6003      	strhi	r3, [r0, #0]
   db412:	700a      	strbls	r2, [r1, #0]
   db414:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   db418:	bf98      	it	ls
   db41a:	2001      	movls	r0, #1
   db41c:	4770      	bx	lr
   db41e:	4608      	mov	r0, r1
   db420:	4770      	bx	lr
	...

000db424 <__aeabi_d2lz>:
   db424:	b538      	push	{r3, r4, r5, lr}
   db426:	2200      	movs	r2, #0
   db428:	2300      	movs	r3, #0
   db42a:	4604      	mov	r4, r0
   db42c:	460d      	mov	r5, r1
   db42e:	f7fd ffa5 	bl	d937c <__aeabi_dcmplt>
   db432:	b928      	cbnz	r0, db440 <__aeabi_d2lz+0x1c>
   db434:	4620      	mov	r0, r4
   db436:	4629      	mov	r1, r5
   db438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   db43c:	f7fe b84c 	b.w	d94d8 <__aeabi_d2ulz>
   db440:	4620      	mov	r0, r4
   db442:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   db446:	f7fe f847 	bl	d94d8 <__aeabi_d2ulz>
   db44a:	4240      	negs	r0, r0
   db44c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   db450:	bd38      	pop	{r3, r4, r5, pc}
   db452:	bf00      	nop

000db454 <dynalib_user>:
   db454:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   db464:	0000 0000 6e55 6e6b 776f 006e 6f4e 2074     ....Unknown.Not 
   db474:	6843 7261 6967 676e 4300 6168 6772 6465     Charging.Charged
   db484:	4400 7369 6863 7261 6967 676e 4600 7561     .Discharging.Fau
   db494:	746c 4400 6369 6e6f 656e 7463 6465 3100     lt.Diconnected.1
   db4a4:	4500 616e 6c62 6465 5320 6e65 6f73 2072     .Enabled Sensor 
   db4b4:	6e4f 0065 6e45 6261 656c 2064 6553 736e     One.Enabled Sens
   db4c4:	726f 5420 6f77 4500 616e 6c62 6465 5320     or Two.Enabled S
   db4d4:	6e65 6f73 2072 6854 6572 0065 6e45 6261     ensor Three.Enab
   db4e4:	656c 2064 6553 736e 726f 4620 756f 0072     led Sensor Four.
   db4f4:	6e45 6261 656c 2064 6553 736e 726f 4620     Enabled Sensor F
   db504:	7669 0065 6e45 6261 656c 2064 6553 736e     ive.Enabled Sens
   db514:	726f 5320 7869 2a00 4e00 206f 6144 6174     or Six.*.No Data
   db524:	5200 7365 6f70 736e 2065 6552 6563 7669     .Response Receiv
   db534:	6465 5500 6b6e 6f6e 6e77 7220 7365 6f70     ed.Unknown respo
   db544:	736e 2065 6572 6563 6976 6465 2520 0069     nse recevied %i.
   db554:	6255 6469 746f 2073 6f48 6b6f 5300 7465     Ubidots Hook.Set
   db564:	7420 206f 7233 2064 6150 7472 2079 6953      to 3rd Party Si
   db574:	006d 0030 6553 2074 6f74 5020 7261 6974     m.0.Set to Parti
   db584:	6c63 2065 6953 006d 654b 7065 4120 696c     cle Sim.Keep Ali
   db594:	6576 7320 7465 7420 206f 6925 7320 6365     ve set to %i sec
   db5a4:	4b00 6565 2070 6c41 7669 0065 6552 6f70     .Keep Alive.Repo
   db5b4:	7472 6e69 2067 6954 656d 5320 7465 7420     rting Time Set t
   db5c4:	206f 7325 4d20 6e69 7475 7365 002e 6553     o %s Minutes..Se
   db5d4:	2074 6556 6272 736f 2065 6f4d 6564 4300     t Verbose Mode.C
   db5e4:	656c 7261 6465 5620 7265 6f62 6573 4d20     leared Verbose M
   db5f4:	646f 0065 6944 6173 6c62 6465 5320 6e65     ode.Disabled Sen
   db604:	6f73 2072 6e4f 0065 6553 736e 726f 5320     sor One.Sensor S
   db614:	6174 7574 0073 6944 6173 6c62 6465 5320     tatus.Disabled S
   db624:	6e65 6f73 2072 7754 006f 6944 6173 6c62     ensor Two.Disabl
   db634:	6465 5320 6e65 6f73 2072 6854 6572 0065     ed Sensor Three.
   db644:	6944 6173 6c62 6465 5320 6e65 6f73 2072     Disabled Sensor 
   db654:	6f46 7275 4400 7369 6261 656c 2064 6553     Four.Disabled Se
   db664:	736e 726f 4620 7669 0065 6944 6173 6c62     nsor Five.Disabl
   db674:	6465 5320 6e65 6f73 2072 6953 0078 704f     ed Sensor Six.Op
   db684:	7265 7461 6f69 206e 6f4d 6564 2520 0069     eration Mode %i.
   db694:	6f4c 6461 6e69 2067 7953 7473 6d65 4420     Loading System D
   db6a4:	6665 7561 746c 0073 6f4c 6461 6e69 2067     efaults.Loading 
   db6b4:	6f43 736e 6174 746e 4420 6665 7561 746c     Constant Default
   db6c4:	2073 3039 392e 5000 7465 6574 0064 6157     s 90.9.Petted.Wa
   db6d4:	6374 6468 676f 7b00 7322 6e65 6f73 4f72     tchdog.{"sensorO
   db6e4:	656e 3a22 3425 312e 2c66 2220 6573 736e     ne":%4.1f, "sens
   db6f4:	726f 7754 226f 253a 2e34 6631 202c 2220     orTwo":%4.1f,  "
   db704:	6573 736e 726f 6854 6572 2265 253a 2e34     sensorThree":%4.
   db714:	6631 202c 2220 6573 736e 726f 6f46 7275     1f,  "sensorFour
   db724:	3a22 3425 312e 2c66 2020 7322 6e65 6f73     ":%4.1f,  "senso
   db734:	4672 7669 2265 253a 2e34 6631 222c 6573     rFive":%4.1f,"se
   db744:	736e 726f 6953 2278 253a 2e34 6631 222c     nsorSix":%4.1f,"
   db754:	6f4d 6564 3a22 7d31 7b00 5322 6e65 6f73     Mode":1}.{"Senso
   db764:	4f72 656e 2252 253a 2e34 6631 202c 5322     rOneR":%4.1f, "S
   db774:	6e65 6f73 4f72 656e 2253 253a 2e34 6631     ensorOneS":%4.1f
   db784:	202c 2220 6553 736e 726f 6e4f 5465 3a22     ,  "SensorOneT":
   db794:	3425 312e 2c66 2020 7322 6e65 6f73 5472     %4.1f,  "sensorT
   db7a4:	6f77 2252 253a 2e34 6631 202c 2220 6573     woR":%4.1f,  "se
   db7b4:	736e 726f 7754 536f 3a22 3425 312e 2c66     nsorTwoS":%4.1f,
   db7c4:	7322 6e65 6f73 5472 6f77 2254 253a 2e34     "sensorTwoT":%4.
   db7d4:	6631 222c 6f4d 6564 3a22 7d32 7b00 5322     1f,"Mode":2}.{"S
   db7e4:	6e65 6f73 4f72 656e 2252 253a 2e34 6631     ensorOneR":%4.1f
   db7f4:	202c 5322 6e65 6f73 4f72 656e 2253 253a     , "SensorOneS":%
   db804:	2e34 6631 202c 2220 6553 736e 726f 6e4f     4.1f,  "SensorOn
   db814:	5465 3a22 3425 312e 2c66 2020 7322 6e65     eT":%4.1f,  "sen
   db824:	6f73 4672 756f 2272 253a 2e34 6631 202c     sorFour":%4.1f, 
   db834:	2220 6573 736e 726f 6946 6576 3a22 3425      "sensorFive":%4
   db844:	312e 2c66 7322 6e65 6f73 5372 7869 3a22     .1f,"sensorSix":
   db854:	3425 312e 2c66 4d22 646f 2265 333a 007d     %4.1f,"Mode":3}.
   db864:	227b 6553 736e 726f 6e4f 5265 3a22 3425     {"SensorOneR":%4
   db874:	312e 2c66 2220 6553 736e 726f 6e4f 5365     .1f, "SensorOneS
   db884:	3a22 3425 312e 2c66 2020 5322 6e65 6f73     ":%4.1f,  "Senso
   db894:	4f72 656e 2254 253a 2e34 6631 202c 2220     rOneT":%4.1f,  "
   db8a4:	6553 736e 726f 6e4f 4e65 3a22 3425 312e     SensorOneN":%4.1
   db8b4:	2c66 2020 7322 6e65 6f73 4672 7669 2265     f,  "sensorFive"
   db8c4:	253a 2e34 6631 222c 6573 736e 726f 6953     :%4.1f,"sensorSi
   db8d4:	2278 253a 2e34 6631 222c 6f4d 6564 3a22     x":%4.1f,"Mode":
   db8e4:	7d34 7000 776f 7265 6f6d 696e 6f74 6972     4}.powermonitori
   db8f4:	676e 685f 6f6f 006b 7246 6d6f 2520 2073     ng_hook.From %s 
   db904:	6f74 2520 0073 7453 7461 2065 7254 6e61     to %s.State Tran
   db914:	6973 6974 6e6f 4300 6e6f 7473 6e61 2074     sition.Constant 
   db924:	6e4f 3a65 2520 2e33 6631 4300 6e6f 7473     One: %3.1f.Const
   db934:	6e61 2074 7754 206f 3325 312e 0066 6f43     ant Two %3.1f.Co
   db944:	736e 6174 746e 5420 7268 6565 203a 3325     nstant Three: %3
   db954:	312e 0066 6f43 736e 6174 746e 4620 756f     .1f.Constant Fou
   db964:	2072 203a 3325 312e 0066 6f43 736e 6174     r : %3.1f.Consta
   db974:	746e 4620 7669 2065 203a 3325 312e 0066     nt Five : %3.1f.
   db984:	6f43 736e 6174 746e 5320 7869 3a20 2520     Constant Six : %
   db994:	2e33 6631 7300 6170 6b72 642f 7665 6369     3.1f.spark/devic
   db9a4:	2f65 6573 7373 6f69 2f6e 6e65 0064 7245     e/session/end.Er
   db9b4:	6f72 2072 7453 7461 2065 202d 6552 6573     ror State - Rese
   db9c4:	0074 7453 7461 0065 6f43 736e 6174 746e     t.State.Constant
   db9d4:	4f20 656e 5620 6c61 6575 7320 7465 7420      One Value set t
   db9e4:	206f 4300 6e6f 7473 6e61 2074 7754 206f     o .Constant Two 
   db9f4:	6156 756c 2065 6573 2074 6f74 0020 6f43     Value set to .Co
   dba04:	736e 6174 746e 5420 7268 6565 5620 6c61     nstant Three Val
   dba14:	6575 7320 7465 7420 206f 4300 6e6f 7473     ue set to .Const
   dba24:	6e61 2074 6f46 7275 5620 6c61 6575 7320     ant Four Value s
   dba34:	7465 7420 206f 4300 6e6f 7473 6e61 2074     et to .Constant 
   dba44:	6946 6576 5620 6c61 6575 7320 7465 7420     Five Value set t
   dba54:	206f 4300 6e6f 7473 6e61 2074 6953 2078     o .Constant Six 
   dba64:	6156 756c 2065 6573 2074 6f74 0020 682f     Value set to ./h
   dba74:	6f6f 2d6b 6572 7073 6e6f 6573 702f 776f     ook-response/pow
   dba84:	7265 6f6d 696e 6f74 6972 676e 685f 6f6f     ermonitoring_hoo
   dba94:	2f6b 5200 6c65 6165 6573 4200 7461 6574     k/.Release.Batte
   dbaa4:	7972 4200 7461 6574 7972 6f43 746e 7865     ry.BatteryContex
   dbab4:	0074 654b 7065 4120 696c 6576 5320 6365     t.Keep Alive Sec
   dbac4:	5200 7065 726f 6974 676e 4420 7275 7461     .Reporting Durat
   dbad4:	6f69 006e 704f 7265 7461 6f69 206e 6f4d     ion.Operation Mo
   dbae4:	6564 4d00 6165 7573 6572 4e2d 776f 5600     de.Measure-Now.V
   dbaf4:	7265 6f62 6573 4d2d 646f 0065 6553 2074     erbose-Mode.Set 
   dbb04:	6f43 736e 6174 746e 4f20 656e 5300 7465     Constant One.Set
   dbb14:	4320 6e6f 7473 6e61 2074 7754 006f 6553      Constant Two.Se
   dbb24:	2074 6f43 736e 6174 746e 5420 7268 6565     t Constant Three
   dbb34:	5300 7465 4320 6e6f 7473 6e61 2074 6f46     .Set Constant Fo
   dbb44:	7275 5300 7465 4320 6e6f 7473 6e61 2074     ur.Set Constant 
   dbb54:	6946 6576 5300 7465 4320 6e6f 7473 6e61     Five.Set Constan
   dbb64:	2074 6953 0078 6e45 6261 656c 5320 6e65     t Six.Enable Sen
   dbb74:	6f73 0072 6944 6173 6c62 2065 6553 736e     sor.Disable Sens
   dbb84:	726f 4f00 6570 6172 6974 676e 4d20 646f     or.Operating Mod
   dbb94:	0065 6552 6f70 7472 6e69 2067 7544 6172     e.Reporting Dura
   dbba4:	6974 6e6f 4d28 4e49 5455 5345 0029 6552     tion(MINUTES).Re
   dbbb4:	6f62 746f 4420 7665 6369 0065 7453 7261     boot Device.Star
   dbbc4:	7574 0070                                   tup.

000dbbc8 <_ZTV5Timer>:
	...
   dbbd0:	42d5 000d 4329 000d 41c1 000d               .B..)C...A..

000dbbdc <_ZTV17PublishQueueAsync>:
	...
   dbbe4:	41cd 000d 41e1 000d 6635 000d 67c1 000d     .A...A..5f...g..
   dbbf4:	6781 000d 675f 000d 6907 000d 67a7 000d     .g.._g...i...g..

000dbc04 <_ZTV8MB85RC64>:
	...
   dbc0c:	41f5 000d 4209 000d 5c2d 000d 5cc3 000d     .A...B..-\...\..
   dbc1c:	5d45 000d b468 000d b470 000d b474 000d     E]..h...p...t...
   dbc2c:	b47d 000d b485 000d b491 000d b497 000d     }...............
   dbc3c:	7453 7261 7574 2070 7553 6363 7365 6673     Startup Successf
   dbc4c:	6c75 0000 0000 0000 0000 0000 0000 0000     ul..............
	...

000dbc7c <_ZL13releaseNumber>:
   dbc7c:	2e38 3030 0000 0000                         8.00....

000dbc84 <_ZL17FRAMversionNumber>:
   dbc84:	0011 0000 7277 7469 4465 7461 2061 6166     ....writeData fa
   dbc94:	6c69 6465 6420 7275 6e69 2067 7265 7361     iled during eras
   dbca4:	2065 7266 6d61 6441 7264 253d 0075 0000     e framAddr=%u...

000dbcb4 <_ZTV6MB85RC>:
	...
   dbcbc:	5b4d 000d 5b4f 000d 5c2d 000d 5cc3 000d     M[..O[..-\...\..
   dbccc:	5d45 000d 6564 6976 6563 6552 6461 6620     E]..deviceRead f
   dbcdc:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   dbcec:	2074 6954 656d 6620 6f72 206d 5452 2043     t Time from RTC 
   dbcfc:	7325 6400 7665 6369 5765 6972 6574 6620     %s.deviceWrite f
   dbd0c:	6961 656c 2064 7473 7461 253d 0064 6573     ailed stat=%d.se
   dbd1c:	2074 5452 2043 7266 6d6f 6320 6f6c 6475     t RTC from cloud
   dbd2c:	2520 0073 6c63 756f 2064 6974 656d 6e20      %s.cloud time n
   dbd3c:	746f 7620 6c61 6469 6400 7665 6369 5765     ot valid.deviceW
   dbd4c:	6972 6574 4545 5250 4d4f 6620 6961 656c     riteEEPROM faile
   dbd5c:	2064 7473 7461 253d 0064 7061 2e70 7472     d stat=%d.app.rt
   dbd6c:	0063 0000                                   c...

000dbd70 <_ZTV12MCP79410SRAM>:
	...
   dbd78:	5e05 000d 5e1b 000d 5df5 000d 5df9 000d     .^...^...]...]..
   dbd88:	5e45 000d 612d 000d 634d 000d               E^..-a..Mc..

000dbd94 <_ZTV12MCP79410Time>:
	...
   dbd9c:	5e09 000d 5e0d 000d                         .^...^..

000dbda4 <_ZTV14MCP79410EEPROM>:
	...
   dbdac:	5e07 000d 5e29 000d 5dfd 000d 5e01 000d     .^..)^...]...^..
   dbdbc:	5e45 000d 6167 000d 658d 000d               E^..ga...e..

000dbdc8 <_ZTV8MCP79410>:
	...
   dbdd0:	5e0b 000d 5e37 000d 7550 6c62 7369 5168     .^..7^..PublishQ
   dbde0:	6575 6575 7341 6e79 0063 7571 7565 6965     ueueAsync.queuei
   dbdf0:	676e 6520 6576 746e 614e 656d 253d 2073     ng eventName=%s 
   dbe00:	6164 6174 253d 2073 7474 3d6c 6425 6620     data=%s ttl=%d f
   dbe10:	616c 7367 3d31 6425 6620 616c 7367 3d32     lags1=%d flags2=
   dbe20:	6425 7320 7a69 3d65 6425 7000 6275 696c     %d size=%d.publi
   dbe30:	6873 6e69 2067 7325 2520 2073 7474 3d6c     shing %s %s ttl=
   dbe40:	6425 6620 616c 7367 253d 0078 7570 6c62     %d flags=%x.publ
   dbe50:	7369 6568 2064 7573 6363 7365 6673 6c75     ished successful
   dbe60:	796c 7000 6275 696c 6873 6465 6620 6961     ly.published fai
   dbe70:	656c 2c64 7720 6c69 206c 6572 7274 2079     led, will retry 
   dbe80:	6e69 2520 756c 6d20 0073 7061 2e70 7570     in %lu ms.app.pu
   dbe90:	7162 0000                                   bq..

000dbe94 <_ZTV21PublishQueueAsyncBase>:
	...
   dbea4:	6635 000d 40a5 000d 40a5 000d 40a5 000d     5f...@...@...@..
   dbeb4:	40a5 000d 40a5 000d                         .@...@..

000dbebc <_ZTV25PublishQueueAsyncRetained>:
	...
   dbec4:	671d 000d 6731 000d 6635 000d 67c1 000d     .g..1g..5f...g..
   dbed4:	6781 000d 675f 000d 6907 000d 67a7 000d     .g.._g...i...g..

000dbee4 <_ZTVN5spark13CellularClassE>:
	...
   dbeec:	73f3 000d 73e9 000d 73df 000d 7395 000d     .s...s...s...s..
   dbefc:	73d3 000d 73c7 000d 7cd9 000d 7ce1 000d     .s...s...|...|..
   dbf0c:	73bb 000d 73b3 000d 73a9 000d 739f 000d     .s...s...s...s..
   dbf1c:	7d11 000d                                   .}..

000dbf20 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   dbf28:	742d 000d 7433 000d 7471 000d 7441 000d     -t..3t..qt..At..
   dbf38:	742f 000d                                   /t..

000dbf3c <_ZTVN5spark13EthernetClassE>:
	...
   dbf44:	7a13 000d 7a09 000d 79ff 000d 79f5 000d     .z...z...y...y..
   dbf54:	79e9 000d 79dd 000d 7cd9 000d 7ce1 000d     .y...y...|...|..
   dbf64:	79d1 000d 79c9 000d 79bf 000d 79b5 000d     .y...y...y...y..
   dbf74:	7d11 000d                                   .}..

000dbf78 <_ZTV7TwoWire>:
	...
   dbf80:	7a31 000d 7a7b 000d 7a53 000d 7a33 000d     1z..{z..Sz..3z..
   dbf90:	7a5b 000d 7a63 000d 7a6b 000d 7a73 000d     [z..cz..kz..sz..

000dbfa0 <_ZTV9IPAddress>:
	...
   dbfa8:	7bad 000d 7b9d 000d 7b9f 000d 7061 0070     .{...{...{..app.

000dbfb8 <_ZTVN5spark12NetworkClassE>:
	...
   dbfc0:	7c99 000d 7ca3 000d 7cad 000d 7cb7 000d     .|...|...|...|..
   dbfd0:	7cc1 000d 7ccd 000d 7cd9 000d 7ce1 000d     .|...|...|...|..
   dbfe0:	7ce9 000d 7cf5 000d 7cfd 000d 7d07 000d     .|...|...|...}..
   dbff0:	7d11 000d 005a 2b25 3330 3a64 3025 7532     .}..Z.%+03d:%02u
   dc000:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   dc010:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000dc020 <_ZTV11USARTSerial>:
	...
   dc028:	83e5 000d 8451 000d 8429 000d 7e05 000d     ....Q...)....~..
   dc038:	83f9 000d 8415 000d 8407 000d 8423 000d     ............#...
   dc048:	83e7 000d 83eb 000d                         ........

000dc050 <_ZTV9USBSerial>:
	...
   dc058:	84e5 000d 854d 000d 8523 000d 7e05 000d     ....M...#....~..
   dc068:	8515 000d 84e7 000d 84f7 000d 8547 000d     ............G...
   dc078:	8507 000d 84e1 000d                         ........

000dc080 <_ZSt7nothrow>:
   dc080:	0000 0000 7173 7472 2500 332e 2073 2e25     ....sqrt.%.3s %.
   dc090:	7333 3325 2064 2e25 6432 253a 322e 3a64     3s%3d %.2d:%.2d:
   dc0a0:	2e25 6432 2520 0a64                          %.2d %d..

000dc0a9 <day_name.6145>:
   dc0a9:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   dc0b9:	6972 6153                                    riSat

000dc0be <mon_name.6146>:
   dc0be:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   dc0ce:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   dc0de:	4476 6365 666e 6900 696e 7974 6100 006e     vDecnf.inity.an.
	...

000dc0f0 <fpi.7566>:
   dc0f0:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dc100:	0000 0000                                   ....

000dc104 <fpinan.7602>:
   dc104:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   dc114:	0000 0000                                   ....

000dc118 <tinytens>:
   dc118:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dc128:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dc138:	6f43 64ac 0628 1168                         Co.d(.h.

000dc140 <_ctype_>:
   dc140:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dc150:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dc160:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dc170:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dc180:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dc190:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dc1a0:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dc1b0:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dc1c0:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000dc244 <_C_numeric_locale>:
   dc244:	b5d0 000d c0a8 000d dd34 2003 0043 4f50     ........4.. C.PO
   dc254:	4953 0058                                   SIX.

000dc258 <__mprec_bigtens>:
   dc258:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dc268:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dc278:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dc280 <__mprec_tens>:
   dc280:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dc290:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dc2a0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dc2b0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dc2c0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dc2d0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dc2e0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dc2f0:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dc300:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dc310:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dc320:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dc330:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dc340:	9db4 79d9 7843 44ea                         ...yCx.D

000dc348 <p05.7490>:
   dc348:	0005 0000 0019 0000 007d 0000               ........}...

000dc354 <link_const_variable_data_end>:
   dc354:	000d56f9 	.word	0x000d56f9
   dc358:	000d65bd 	.word	0x000d65bd
   dc35c:	000d6b99 	.word	0x000d6b99
   dc360:	000d736d 	.word	0x000d736d
   dc364:	000d73fd 	.word	0x000d73fd
   dc368:	000d7a1d 	.word	0x000d7a1d
   dc36c:	000d7c89 	.word	0x000d7c89
   dc370:	000d7df1 	.word	0x000d7df1
   dc374:	000d7ea5 	.word	0x000d7ea5
   dc378:	000d8091 	.word	0x000d8091
   dc37c:	000d83d1 	.word	0x000d83d1
